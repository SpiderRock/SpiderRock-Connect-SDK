// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/EqtAnalytics/TickerAnalytics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/EqtAnalytics/TickerAnalytics.proto</summary>
  public static partial class TickerAnalyticsReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/EqtAnalytics/TickerAnalytics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickerAnalyticsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9FcXRBbmFseXRpY3MvVGlja2VyQW5hbHl0aWNzLnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLeBQoPVGlja2Vy",
            "QW5hbHl0aWNzEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NZXNzYWdlTWV0YWRhdGESNwoEcGtleRgCIAEoCzIpLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuVGlja2VyQW5hbHl0aWNzLlBLZXkSEwoLc2VjdXJpdHlfaUQY",
            "ZCABKAUSDgoGYWx0X2lEGGcgASgFEhIKCmRheV9udW1iZXIYaiABKAUSEQoJ",
            "b3BlbnByaWNlGG0gASgCEhEKCWhpZ2hwcmljZRhwIAEoAhIQCghsb3dwcmlj",
            "ZRhzIAEoAhISCgpjbG9zZXByaWNlGHYgASgCEhAKCHByX2Nsb3NlGHkgASgC",
            "EhYKDnByX2Nsb3NlX3VuYWRqGHwgASgCEhMKC3dlZWs1Ml9oaWdoGH8gASgB",
            "EjcKEHdlZWs1Ml9oaWdoX2RhdGUYggEgASgLMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5EYXRlS2V5EhMKCndlZWs1Ml9sb3cYhQEgASgBEjYKD3dlZWs1Ml9s",
            "b3dfZGF0ZRiIASABKAsyHC5zcGlkZXJyb2NrLnByb3RvYnVmLkRhdGVLZXkS",
            "EwoKYXZnX3ZvbHVtZRiLASABKAISDgoFY2N2YXIYjgEgASgBEg4KBWhsdmFy",
            "GJEBIAEoARISCglkYXlyZXR1cm4YlAEgASgCEhUKDHJldHVybmZhY3RvchiX",
            "ASABKAISGAoPY3VtcmV0dXJuZmFjdG9yGJoBIAEoAhIuCgl0aW1lc3RhbXAY",
            "nQEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBppCgRQS2V5Ei4K",
            "BnRpY2tlchgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5",
            "EjEKC3RyYWRpbmdkYXRlGAsgASgLMhwuc3BpZGVycm9jay5wcm90b2J1Zi5E",
            "YXRlS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TickerAnalytics), global::Spiderrock.Protobuf.TickerAnalytics.Parser, new[]{ "Meta", "Pkey", "SecurityID", "AltID", "DayNumber", "Openprice", "Highprice", "Lowprice", "Closeprice", "PrClose", "PrCloseUnadj", "Week52High", "Week52HighDate", "Week52Low", "Week52LowDate", "AvgVolume", "Ccvar", "Hlvar", "Dayreturn", "Returnfactor", "Cumreturnfactor", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey), global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey.Parser, new[]{ "Ticker", "Tradingdate" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TickerAnalytics : pb::IMessage<TickerAnalytics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickerAnalytics> _parser = new pb::MessageParser<TickerAnalytics>(() => new TickerAnalytics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickerAnalytics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.TickerAnalyticsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerAnalytics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerAnalytics(TickerAnalytics other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      securityID_ = other.securityID_;
      altID_ = other.altID_;
      dayNumber_ = other.dayNumber_;
      openprice_ = other.openprice_;
      highprice_ = other.highprice_;
      lowprice_ = other.lowprice_;
      closeprice_ = other.closeprice_;
      prClose_ = other.prClose_;
      prCloseUnadj_ = other.prCloseUnadj_;
      week52High_ = other.week52High_;
      week52HighDate_ = other.week52HighDate_ != null ? other.week52HighDate_.Clone() : null;
      week52Low_ = other.week52Low_;
      week52LowDate_ = other.week52LowDate_ != null ? other.week52LowDate_.Clone() : null;
      avgVolume_ = other.avgVolume_;
      ccvar_ = other.ccvar_;
      hlvar_ = other.hlvar_;
      dayreturn_ = other.dayreturn_;
      returnfactor_ = other.returnfactor_;
      cumreturnfactor_ = other.cumreturnfactor_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerAnalytics Clone() {
      return new TickerAnalytics(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "security_iD" field.</summary>
    public const int SecurityIDFieldNumber = 100;
    private int securityID_;
    /// <summary>
    /// security ID is used to track a ticker over time.  It is a best effort attempt to track a ticker through name changes and other corporate actions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecurityID {
      get { return securityID_; }
      set {
        securityID_ = value;
      }
    }

    /// <summary>Field number for the "alt_iD" field.</summary>
    public const int AltIDFieldNumber = 103;
    private int altID_;
    /// <summary>
    /// SR security ID is used to track a ticker over time.  It is a best effort attempt to track a ticker through name changes and other corporate actions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AltID {
      get { return altID_; }
      set {
        altID_ = value;
      }
    }

    /// <summary>Field number for the "day_number" field.</summary>
    public const int DayNumberFieldNumber = 106;
    private int dayNumber_;
    /// <summary>
    /// cardinal day number (increments by 1 each trading period)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DayNumber {
      get { return dayNumber_; }
      set {
        dayNumber_ = value;
      }
    }

    /// <summary>Field number for the "openprice" field.</summary>
    public const int OpenpriceFieldNumber = 109;
    private float openprice_;
    /// <summary>
    /// open print
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Openprice {
      get { return openprice_; }
      set {
        openprice_ = value;
      }
    }

    /// <summary>Field number for the "highprice" field.</summary>
    public const int HighpriceFieldNumber = 112;
    private float highprice_;
    /// <summary>
    /// highest regular hours print price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Highprice {
      get { return highprice_; }
      set {
        highprice_ = value;
      }
    }

    /// <summary>Field number for the "lowprice" field.</summary>
    public const int LowpriceFieldNumber = 115;
    private float lowprice_;
    /// <summary>
    /// lowest regular hours print price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lowprice {
      get { return lowprice_; }
      set {
        lowprice_ = value;
      }
    }

    /// <summary>Field number for the "closeprice" field.</summary>
    public const int ClosepriceFieldNumber = 118;
    private float closeprice_;
    /// <summary>
    /// official exchange close (as reported by primary exchange)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Closeprice {
      get { return closeprice_; }
      set {
        closeprice_ = value;
      }
    }

    /// <summary>Field number for the "pr_close" field.</summary>
    public const int PrCloseFieldNumber = 121;
    private float prClose_;
    /// <summary>
    /// adjusted prior period close; closePr = prior Close X returnFactor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrClose {
      get { return prClose_; }
      set {
        prClose_ = value;
      }
    }

    /// <summary>Field number for the "pr_close_unadj" field.</summary>
    public const int PrCloseUnadjFieldNumber = 124;
    private float prCloseUnadj_;
    /// <summary>
    /// unadjusted prior period close
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrCloseUnadj {
      get { return prCloseUnadj_; }
      set {
        prCloseUnadj_ = value;
      }
    }

    /// <summary>Field number for the "week52_high" field.</summary>
    public const int Week52HighFieldNumber = 127;
    private double week52High_;
    /// <summary>
    /// 52 week high
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Week52High {
      get { return week52High_; }
      set {
        week52High_ = value;
      }
    }

    /// <summary>Field number for the "week52_high_date" field.</summary>
    public const int Week52HighDateFieldNumber = 130;
    private global::Spiderrock.Protobuf.DateKey week52HighDate_;
    /// <summary>
    /// 52 week high date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey Week52HighDate {
      get { return week52HighDate_; }
      set {
        week52HighDate_ = value;
      }
    }

    /// <summary>Field number for the "week52_low" field.</summary>
    public const int Week52LowFieldNumber = 133;
    private double week52Low_;
    /// <summary>
    /// 52 week low
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Week52Low {
      get { return week52Low_; }
      set {
        week52Low_ = value;
      }
    }

    /// <summary>Field number for the "week52_low_date" field.</summary>
    public const int Week52LowDateFieldNumber = 136;
    private global::Spiderrock.Protobuf.DateKey week52LowDate_;
    /// <summary>
    /// 52 week low date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey Week52LowDate {
      get { return week52LowDate_; }
      set {
        week52LowDate_ = value;
      }
    }

    /// <summary>Field number for the "avg_volume" field.</summary>
    public const int AvgVolumeFieldNumber = 139;
    private float avgVolume_;
    /// <summary>
    /// trailing average 20D daily stock volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgVolume {
      get { return avgVolume_; }
      set {
        avgVolume_ = value;
      }
    }

    /// <summary>Field number for the "ccvar" field.</summary>
    public const int CcvarFieldNumber = 142;
    private double ccvar_;
    /// <summary>
    /// close-close log return daily variance (using the adjusted yesterday close:Ln (Close/ClosePr) ^ 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Ccvar {
      get { return ccvar_; }
      set {
        ccvar_ = value;
      }
    }

    /// <summary>Field number for the "hlvar" field.</summary>
    public const int HlvarFieldNumber = 145;
    private double hlvar_;
    /// <summary>
    /// high-low daily variance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Hlvar {
      get { return hlvar_; }
      set {
        hlvar_ = value;
      }
    }

    /// <summary>Field number for the "dayreturn" field.</summary>
    public const int DayreturnFieldNumber = 148;
    private float dayreturn_;
    /// <summary>
    /// daily return (adjusted for CorpAction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Dayreturn {
      get { return dayreturn_; }
      set {
        dayreturn_ = value;
      }
    }

    /// <summary>Field number for the "returnfactor" field.</summary>
    public const int ReturnfactorFieldNumber = 151;
    private float returnfactor_;
    /// <summary>
    /// adjustment factor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Returnfactor {
      get { return returnfactor_; }
      set {
        returnfactor_ = value;
      }
    }

    /// <summary>Field number for the "cumreturnfactor" field.</summary>
    public const int CumreturnfactorFieldNumber = 154;
    private float cumreturnfactor_;
    /// <summary>
    /// cumulative adjustment factor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cumreturnfactor {
      get { return cumreturnfactor_; }
      set {
        cumreturnfactor_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 157;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// record update timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickerAnalytics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickerAnalytics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SecurityID != other.SecurityID) return false;
      if (AltID != other.AltID) return false;
      if (DayNumber != other.DayNumber) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Openprice, other.Openprice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Highprice, other.Highprice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lowprice, other.Lowprice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Closeprice, other.Closeprice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrClose, other.PrClose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrCloseUnadj, other.PrCloseUnadj)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Week52High, other.Week52High)) return false;
      if (!object.Equals(Week52HighDate, other.Week52HighDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Week52Low, other.Week52Low)) return false;
      if (!object.Equals(Week52LowDate, other.Week52LowDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgVolume, other.AvgVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ccvar, other.Ccvar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Hlvar, other.Hlvar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dayreturn, other.Dayreturn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Returnfactor, other.Returnfactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cumreturnfactor, other.Cumreturnfactor)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SecurityID != 0) hash ^= SecurityID.GetHashCode();
      if (AltID != 0) hash ^= AltID.GetHashCode();
      if (DayNumber != 0) hash ^= DayNumber.GetHashCode();
      if (Openprice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Openprice);
      if (Highprice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Highprice);
      if (Lowprice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lowprice);
      if (Closeprice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Closeprice);
      if (PrClose != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrClose);
      if (PrCloseUnadj != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrCloseUnadj);
      if (Week52High != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Week52High);
      if (week52HighDate_ != null) hash ^= Week52HighDate.GetHashCode();
      if (Week52Low != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Week52Low);
      if (week52LowDate_ != null) hash ^= Week52LowDate.GetHashCode();
      if (AvgVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgVolume);
      if (Ccvar != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ccvar);
      if (Hlvar != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Hlvar);
      if (Dayreturn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dayreturn);
      if (Returnfactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Returnfactor);
      if (Cumreturnfactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cumreturnfactor);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SecurityID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SecurityID);
      }
      if (AltID != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(AltID);
      }
      if (DayNumber != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(DayNumber);
      }
      if (Openprice != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Openprice);
      }
      if (Highprice != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Highprice);
      }
      if (Lowprice != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Lowprice);
      }
      if (Closeprice != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Closeprice);
      }
      if (PrClose != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(PrClose);
      }
      if (PrCloseUnadj != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(PrCloseUnadj);
      }
      if (Week52High != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(Week52High);
      }
      if (week52HighDate_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(Week52HighDate);
      }
      if (Week52Low != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(Week52Low);
      }
      if (week52LowDate_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(Week52LowDate);
      }
      if (AvgVolume != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(AvgVolume);
      }
      if (Ccvar != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(Ccvar);
      }
      if (Hlvar != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(Hlvar);
      }
      if (Dayreturn != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Dayreturn);
      }
      if (Returnfactor != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(Returnfactor);
      }
      if (Cumreturnfactor != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Cumreturnfactor);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SecurityID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SecurityID);
      }
      if (AltID != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(AltID);
      }
      if (DayNumber != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(DayNumber);
      }
      if (Openprice != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Openprice);
      }
      if (Highprice != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Highprice);
      }
      if (Lowprice != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Lowprice);
      }
      if (Closeprice != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Closeprice);
      }
      if (PrClose != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(PrClose);
      }
      if (PrCloseUnadj != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(PrCloseUnadj);
      }
      if (Week52High != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(Week52High);
      }
      if (week52HighDate_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(Week52HighDate);
      }
      if (Week52Low != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(Week52Low);
      }
      if (week52LowDate_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(Week52LowDate);
      }
      if (AvgVolume != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(AvgVolume);
      }
      if (Ccvar != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(Ccvar);
      }
      if (Hlvar != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(Hlvar);
      }
      if (Dayreturn != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Dayreturn);
      }
      if (Returnfactor != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(Returnfactor);
      }
      if (Cumreturnfactor != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Cumreturnfactor);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SecurityID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SecurityID);
      }
      if (AltID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AltID);
      }
      if (DayNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DayNumber);
      }
      if (Openprice != 0F) {
        size += 2 + 4;
      }
      if (Highprice != 0F) {
        size += 2 + 4;
      }
      if (Lowprice != 0F) {
        size += 2 + 4;
      }
      if (Closeprice != 0F) {
        size += 2 + 4;
      }
      if (PrClose != 0F) {
        size += 2 + 4;
      }
      if (PrCloseUnadj != 0F) {
        size += 2 + 4;
      }
      if (Week52High != 0D) {
        size += 2 + 8;
      }
      if (week52HighDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Week52HighDate);
      }
      if (Week52Low != 0D) {
        size += 2 + 8;
      }
      if (week52LowDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Week52LowDate);
      }
      if (AvgVolume != 0F) {
        size += 2 + 4;
      }
      if (Ccvar != 0D) {
        size += 2 + 8;
      }
      if (Hlvar != 0D) {
        size += 2 + 8;
      }
      if (Dayreturn != 0F) {
        size += 2 + 4;
      }
      if (Returnfactor != 0F) {
        size += 2 + 4;
      }
      if (Cumreturnfactor != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickerAnalytics other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SecurityID != 0) {
        SecurityID = other.SecurityID;
      }
      if (other.AltID != 0) {
        AltID = other.AltID;
      }
      if (other.DayNumber != 0) {
        DayNumber = other.DayNumber;
      }
      if (other.Openprice != 0F) {
        Openprice = other.Openprice;
      }
      if (other.Highprice != 0F) {
        Highprice = other.Highprice;
      }
      if (other.Lowprice != 0F) {
        Lowprice = other.Lowprice;
      }
      if (other.Closeprice != 0F) {
        Closeprice = other.Closeprice;
      }
      if (other.PrClose != 0F) {
        PrClose = other.PrClose;
      }
      if (other.PrCloseUnadj != 0F) {
        PrCloseUnadj = other.PrCloseUnadj;
      }
      if (other.Week52High != 0D) {
        Week52High = other.Week52High;
      }
      if (other.week52HighDate_ != null) {
        if (week52HighDate_ == null) {
          Week52HighDate = new global::Spiderrock.Protobuf.DateKey();
        }
        Week52HighDate.MergeFrom(other.Week52HighDate);
      }
      if (other.Week52Low != 0D) {
        Week52Low = other.Week52Low;
      }
      if (other.week52LowDate_ != null) {
        if (week52LowDate_ == null) {
          Week52LowDate = new global::Spiderrock.Protobuf.DateKey();
        }
        Week52LowDate.MergeFrom(other.Week52LowDate);
      }
      if (other.AvgVolume != 0F) {
        AvgVolume = other.AvgVolume;
      }
      if (other.Ccvar != 0D) {
        Ccvar = other.Ccvar;
      }
      if (other.Hlvar != 0D) {
        Hlvar = other.Hlvar;
      }
      if (other.Dayreturn != 0F) {
        Dayreturn = other.Dayreturn;
      }
      if (other.Returnfactor != 0F) {
        Returnfactor = other.Returnfactor;
      }
      if (other.Cumreturnfactor != 0F) {
        Cumreturnfactor = other.Cumreturnfactor;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SecurityID = input.ReadInt32();
            break;
          }
          case 824: {
            AltID = input.ReadInt32();
            break;
          }
          case 848: {
            DayNumber = input.ReadInt32();
            break;
          }
          case 877: {
            Openprice = input.ReadFloat();
            break;
          }
          case 901: {
            Highprice = input.ReadFloat();
            break;
          }
          case 925: {
            Lowprice = input.ReadFloat();
            break;
          }
          case 949: {
            Closeprice = input.ReadFloat();
            break;
          }
          case 973: {
            PrClose = input.ReadFloat();
            break;
          }
          case 997: {
            PrCloseUnadj = input.ReadFloat();
            break;
          }
          case 1017: {
            Week52High = input.ReadDouble();
            break;
          }
          case 1042: {
            if (week52HighDate_ == null) {
              Week52HighDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Week52HighDate);
            break;
          }
          case 1065: {
            Week52Low = input.ReadDouble();
            break;
          }
          case 1090: {
            if (week52LowDate_ == null) {
              Week52LowDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Week52LowDate);
            break;
          }
          case 1117: {
            AvgVolume = input.ReadFloat();
            break;
          }
          case 1137: {
            Ccvar = input.ReadDouble();
            break;
          }
          case 1161: {
            Hlvar = input.ReadDouble();
            break;
          }
          case 1189: {
            Dayreturn = input.ReadFloat();
            break;
          }
          case 1213: {
            Returnfactor = input.ReadFloat();
            break;
          }
          case 1237: {
            Cumreturnfactor = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TickerAnalytics.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SecurityID = input.ReadInt32();
            break;
          }
          case 824: {
            AltID = input.ReadInt32();
            break;
          }
          case 848: {
            DayNumber = input.ReadInt32();
            break;
          }
          case 877: {
            Openprice = input.ReadFloat();
            break;
          }
          case 901: {
            Highprice = input.ReadFloat();
            break;
          }
          case 925: {
            Lowprice = input.ReadFloat();
            break;
          }
          case 949: {
            Closeprice = input.ReadFloat();
            break;
          }
          case 973: {
            PrClose = input.ReadFloat();
            break;
          }
          case 997: {
            PrCloseUnadj = input.ReadFloat();
            break;
          }
          case 1017: {
            Week52High = input.ReadDouble();
            break;
          }
          case 1042: {
            if (week52HighDate_ == null) {
              Week52HighDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Week52HighDate);
            break;
          }
          case 1065: {
            Week52Low = input.ReadDouble();
            break;
          }
          case 1090: {
            if (week52LowDate_ == null) {
              Week52LowDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Week52LowDate);
            break;
          }
          case 1117: {
            AvgVolume = input.ReadFloat();
            break;
          }
          case 1137: {
            Ccvar = input.ReadDouble();
            break;
          }
          case 1161: {
            Hlvar = input.ReadDouble();
            break;
          }
          case 1189: {
            Dayreturn = input.ReadFloat();
            break;
          }
          case 1213: {
            Returnfactor = input.ReadFloat();
            break;
          }
          case 1237: {
            Cumreturnfactor = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TickerAnalytics message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.TickerAnalytics.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          tradingdate_ = other.tradingdate_ != null ? other.tradingdate_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "tradingdate" field.</summary>
        public const int TradingdateFieldNumber = 11;
        private global::Spiderrock.Protobuf.DateKey tradingdate_;
        /// <summary>
        /// trading period
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey Tradingdate {
          get { return tradingdate_; }
          set {
            tradingdate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (!object.Equals(Tradingdate, other.Tradingdate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (tradingdate_ != null) hash ^= Tradingdate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (tradingdate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(Tradingdate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (tradingdate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(Tradingdate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (tradingdate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tradingdate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.tradingdate_ != null) {
            if (tradingdate_ == null) {
              Tradingdate = new global::Spiderrock.Protobuf.DateKey();
            }
            Tradingdate.MergeFrom(other.Tradingdate);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                if (tradingdate_ == null) {
                  Tradingdate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Tradingdate);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                if (tradingdate_ == null) {
                  Tradingdate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Tradingdate);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
