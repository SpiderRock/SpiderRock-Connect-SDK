// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/EqtSummaryData/StockMarketSummary.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/EqtSummaryData/StockMarketSummary.proto</summary>
  public static partial class StockMarketSummaryReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/EqtSummaryData/StockMarketSummary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockMarketSummaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9FcXRTdW1tYXJ5RGF0YS9TdG9ja01hcmtldFN1bW1hcnku",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIt0FChJT",
            "dG9ja01hcmtldFN1bW1hcnkSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI6CgRwa2V5GAIgASgLMiwuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TdG9ja01hcmtldFN1bW1hcnkuUEtleRIwCgp0",
            "cmFkZV9kYXRlGGUgASgLMhwuc3BpZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5",
            "EhEKCW9wbl9wcmljZRhkIAEoARIRCgltcmtfcHJpY2UYZyABKAESEQoJY2xz",
            "X3ByaWNlGGogASgBEhEKCW1pbl9wcmljZRhtIAEoARIRCgltYXhfcHJpY2UY",
            "cCABKAESGgoSc2hhcmVzX291dHN0YW5kaW5nGHMgASgDEhEKCWJpZF9jb3Vu",
            "dBh2IAEoBRISCgpiaWRfdm9sdW1lGHkgASgFEhEKCWFza19jb3VudBh8IAEo",
            "BRISCgphc2tfdm9sdW1lGH8gASgFEhIKCW1pZF9jb3VudBiCASABKAUSEwoK",
            "bWlkX3ZvbHVtZRiFASABKAUSEgoJcHJ0X2NvdW50GIgBIAEoBRITCgpwcnRf",
            "dm9sdW1lGIkBIAEoBRIXCg5sYXN0X3BydF9wcmljZRiLASABKAESMgoNbGFz",
            "dF9wcnRfZHR0bRiMASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EhIKCWV4cF9jb3VudBiOASABKAUSEgoJZXhwX3dpZHRoGJEBIAEoARIVCgxl",
            "eHBfYmlkX3NpemUYlAEgASgCEhUKDGV4cF9hc2tfc2l6ZRiXASABKAISLgoJ",
            "dGltZXN0YW1wGJ0BIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAa",
            "NgoEUEtleRIuCgZ0aWNrZXIYCiABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlRpY2tlcktleWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockMarketSummary), global::Spiderrock.Protobuf.StockMarketSummary.Parser, new[]{ "Meta", "Pkey", "TradeDate", "OpnPrice", "MrkPrice", "ClsPrice", "MinPrice", "MaxPrice", "SharesOutstanding", "BidCount", "BidVolume", "AskCount", "AskVolume", "MidCount", "MidVolume", "PrtCount", "PrtVolume", "LastPrtPrice", "LastPrtDttm", "ExpCount", "ExpWidth", "ExpBidSize", "ExpAskSize", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey), global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey.Parser, new[]{ "Ticker" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///These records represent live market summary snapshots for equity, index, and synthetic markets.
  /// </summary>
  public sealed partial class StockMarketSummary : pb::IMessage<StockMarketSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StockMarketSummary> _parser = new pb::MessageParser<StockMarketSummary>(() => new StockMarketSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StockMarketSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.StockMarketSummaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockMarketSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockMarketSummary(StockMarketSummary other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      opnPrice_ = other.opnPrice_;
      mrkPrice_ = other.mrkPrice_;
      clsPrice_ = other.clsPrice_;
      minPrice_ = other.minPrice_;
      maxPrice_ = other.maxPrice_;
      sharesOutstanding_ = other.sharesOutstanding_;
      bidCount_ = other.bidCount_;
      bidVolume_ = other.bidVolume_;
      askCount_ = other.askCount_;
      askVolume_ = other.askVolume_;
      midCount_ = other.midCount_;
      midVolume_ = other.midVolume_;
      prtCount_ = other.prtCount_;
      prtVolume_ = other.prtVolume_;
      lastPrtPrice_ = other.lastPrtPrice_;
      lastPrtDttm_ = other.lastPrtDttm_ != null ? other.lastPrtDttm_.Clone() : null;
      expCount_ = other.expCount_;
      expWidth_ = other.expWidth_;
      expBidSize_ = other.expBidSize_;
      expAskSize_ = other.expAskSize_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockMarketSummary Clone() {
      return new StockMarketSummary(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 101;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "opn_price" field.</summary>
    public const int OpnPriceFieldNumber = 100;
    private double opnPrice_;
    /// <summary>
    /// first print price of the day during regular market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnPrice {
      get { return opnPrice_; }
      set {
        opnPrice_ = value;
      }
    }

    /// <summary>Field number for the "mrk_price" field.</summary>
    public const int MrkPriceFieldNumber = 103;
    private double mrkPrice_;
    /// <summary>
    /// last print handled during regular market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MrkPrice {
      get { return mrkPrice_; }
      set {
        mrkPrice_ = value;
      }
    }

    /// <summary>Field number for the "cls_price" field.</summary>
    public const int ClsPriceFieldNumber = 106;
    private double clsPrice_;
    /// <summary>
    /// official exchange closing price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsPrice {
      get { return clsPrice_; }
      set {
        clsPrice_ = value;
      }
    }

    /// <summary>Field number for the "min_price" field.</summary>
    public const int MinPriceFieldNumber = 109;
    private double minPrice_;
    /// <summary>
    /// minimum print price within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinPrice {
      get { return minPrice_; }
      set {
        minPrice_ = value;
      }
    }

    /// <summary>Field number for the "max_price" field.</summary>
    public const int MaxPriceFieldNumber = 112;
    private double maxPrice_;
    /// <summary>
    /// maximum print price within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    /// <summary>Field number for the "shares_outstanding" field.</summary>
    public const int SharesOutstandingFieldNumber = 115;
    private long sharesOutstanding_;
    /// <summary>
    /// shares outstanding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SharesOutstanding {
      get { return sharesOutstanding_; }
      set {
        sharesOutstanding_ = value;
      }
    }

    /// <summary>Field number for the "bid_count" field.</summary>
    public const int BidCountFieldNumber = 118;
    private int bidCount_;
    /// <summary>
    /// num prints &lt;= quote.bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidCount {
      get { return bidCount_; }
      set {
        bidCount_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume" field.</summary>
    public const int BidVolumeFieldNumber = 121;
    private int bidVolume_;
    /// <summary>
    /// volume when prtPrice &lt;= quote.bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "ask_count" field.</summary>
    public const int AskCountFieldNumber = 124;
    private int askCount_;
    /// <summary>
    /// num prints >= quote.ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskCount {
      get { return askCount_; }
      set {
        askCount_ = value;
      }
    }

    /// <summary>Field number for the "ask_volume" field.</summary>
    public const int AskVolumeFieldNumber = 127;
    private int askVolume_;
    /// <summary>
    /// volume when prtPrice >= quote.ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "mid_count" field.</summary>
    public const int MidCountFieldNumber = 130;
    private int midCount_;
    /// <summary>
    /// num prints inside quote.bid / quote.ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MidCount {
      get { return midCount_; }
      set {
        midCount_ = value;
      }
    }

    /// <summary>Field number for the "mid_volume" field.</summary>
    public const int MidVolumeFieldNumber = 133;
    private int midVolume_;
    /// <summary>
    /// volume inside quote.bid / quote.ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MidVolume {
      get { return midVolume_; }
      set {
        midVolume_ = value;
      }
    }

    /// <summary>Field number for the "prt_count" field.</summary>
    public const int PrtCountFieldNumber = 136;
    private int prtCount_;
    /// <summary>
    /// number of distinct print reports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtCount {
      get { return prtCount_; }
      set {
        prtCount_ = value;
      }
    }

    /// <summary>Field number for the "prt_volume" field.</summary>
    public const int PrtVolumeFieldNumber = 137;
    private int prtVolume_;
    /// <summary>
    /// total print volume (all print types)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtVolume {
      get { return prtVolume_; }
      set {
        prtVolume_ = value;
      }
    }

    /// <summary>Field number for the "last_prt_price" field.</summary>
    public const int LastPrtPriceFieldNumber = 139;
    private double lastPrtPrice_;
    /// <summary>
    /// last print price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LastPrtPrice {
      get { return lastPrtPrice_; }
      set {
        lastPrtPrice_ = value;
      }
    }

    /// <summary>Field number for the "last_prt_dttm" field.</summary>
    public const int LastPrtDttmFieldNumber = 140;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastPrtDttm_;
    /// <summary>
    /// last print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastPrtDttm {
      get { return lastPrtDttm_; }
      set {
        lastPrtDttm_ = value;
      }
    }

    /// <summary>Field number for the "exp_count" field.</summary>
    public const int ExpCountFieldNumber = 142;
    private int expCount_;
    /// <summary>
    /// number of updates included in exponential average
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExpCount {
      get { return expCount_; }
      set {
        expCount_ = value;
      }
    }

    /// <summary>Field number for the "exp_width" field.</summary>
    public const int ExpWidthFieldNumber = 145;
    private double expWidth_;
    /// <summary>
    /// exponential average market width (10 minute 1/2 life)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ExpWidth {
      get { return expWidth_; }
      set {
        expWidth_ = value;
      }
    }

    /// <summary>Field number for the "exp_bid_size" field.</summary>
    public const int ExpBidSizeFieldNumber = 148;
    private float expBidSize_;
    /// <summary>
    /// exponential average bid size (10 minute 1/2 life)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExpBidSize {
      get { return expBidSize_; }
      set {
        expBidSize_ = value;
      }
    }

    /// <summary>Field number for the "exp_ask_size" field.</summary>
    public const int ExpAskSizeFieldNumber = 151;
    private float expAskSize_;
    /// <summary>
    /// exponential average ask size (10 minute 1/2 life)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExpAskSize {
      get { return expAskSize_; }
      set {
        expAskSize_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 157;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StockMarketSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StockMarketSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnPrice, other.OpnPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MrkPrice, other.MrkPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsPrice, other.ClsPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinPrice, other.MinPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxPrice, other.MaxPrice)) return false;
      if (SharesOutstanding != other.SharesOutstanding) return false;
      if (BidCount != other.BidCount) return false;
      if (BidVolume != other.BidVolume) return false;
      if (AskCount != other.AskCount) return false;
      if (AskVolume != other.AskVolume) return false;
      if (MidCount != other.MidCount) return false;
      if (MidVolume != other.MidVolume) return false;
      if (PrtCount != other.PrtCount) return false;
      if (PrtVolume != other.PrtVolume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastPrtPrice, other.LastPrtPrice)) return false;
      if (!object.Equals(LastPrtDttm, other.LastPrtDttm)) return false;
      if (ExpCount != other.ExpCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExpWidth, other.ExpWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpBidSize, other.ExpBidSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpAskSize, other.ExpAskSize)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (OpnPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnPrice);
      if (MrkPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MrkPrice);
      if (ClsPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsPrice);
      if (MinPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinPrice);
      if (MaxPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxPrice);
      if (SharesOutstanding != 0L) hash ^= SharesOutstanding.GetHashCode();
      if (BidCount != 0) hash ^= BidCount.GetHashCode();
      if (BidVolume != 0) hash ^= BidVolume.GetHashCode();
      if (AskCount != 0) hash ^= AskCount.GetHashCode();
      if (AskVolume != 0) hash ^= AskVolume.GetHashCode();
      if (MidCount != 0) hash ^= MidCount.GetHashCode();
      if (MidVolume != 0) hash ^= MidVolume.GetHashCode();
      if (PrtCount != 0) hash ^= PrtCount.GetHashCode();
      if (PrtVolume != 0) hash ^= PrtVolume.GetHashCode();
      if (LastPrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastPrtPrice);
      if (lastPrtDttm_ != null) hash ^= LastPrtDttm.GetHashCode();
      if (ExpCount != 0) hash ^= ExpCount.GetHashCode();
      if (ExpWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExpWidth);
      if (ExpBidSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpBidSize);
      if (ExpAskSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpAskSize);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (OpnPrice != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(OpnPrice);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (MrkPrice != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(MrkPrice);
      }
      if (ClsPrice != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(ClsPrice);
      }
      if (MinPrice != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(MinPrice);
      }
      if (MaxPrice != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MaxPrice);
      }
      if (SharesOutstanding != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(SharesOutstanding);
      }
      if (BidCount != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(BidCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(BidVolume);
      }
      if (AskCount != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AskCount);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(AskVolume);
      }
      if (MidCount != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(MidCount);
      }
      if (MidVolume != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(MidVolume);
      }
      if (PrtCount != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(PrtCount);
      }
      if (PrtVolume != 0) {
        output.WriteRawTag(200, 8);
        output.WriteInt32(PrtVolume);
      }
      if (LastPrtPrice != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(LastPrtPrice);
      }
      if (lastPrtDttm_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(LastPrtDttm);
      }
      if (ExpCount != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(ExpCount);
      }
      if (ExpWidth != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(ExpWidth);
      }
      if (ExpBidSize != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ExpBidSize);
      }
      if (ExpAskSize != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(ExpAskSize);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (OpnPrice != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(OpnPrice);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (MrkPrice != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(MrkPrice);
      }
      if (ClsPrice != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(ClsPrice);
      }
      if (MinPrice != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(MinPrice);
      }
      if (MaxPrice != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MaxPrice);
      }
      if (SharesOutstanding != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(SharesOutstanding);
      }
      if (BidCount != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(BidCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(BidVolume);
      }
      if (AskCount != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AskCount);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(AskVolume);
      }
      if (MidCount != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(MidCount);
      }
      if (MidVolume != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(MidVolume);
      }
      if (PrtCount != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(PrtCount);
      }
      if (PrtVolume != 0) {
        output.WriteRawTag(200, 8);
        output.WriteInt32(PrtVolume);
      }
      if (LastPrtPrice != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(LastPrtPrice);
      }
      if (lastPrtDttm_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(LastPrtDttm);
      }
      if (ExpCount != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(ExpCount);
      }
      if (ExpWidth != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(ExpWidth);
      }
      if (ExpBidSize != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ExpBidSize);
      }
      if (ExpAskSize != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(ExpAskSize);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (OpnPrice != 0D) {
        size += 2 + 8;
      }
      if (MrkPrice != 0D) {
        size += 2 + 8;
      }
      if (ClsPrice != 0D) {
        size += 2 + 8;
      }
      if (MinPrice != 0D) {
        size += 2 + 8;
      }
      if (MaxPrice != 0D) {
        size += 2 + 8;
      }
      if (SharesOutstanding != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SharesOutstanding);
      }
      if (BidCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidCount);
      }
      if (BidVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidVolume);
      }
      if (AskCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskCount);
      }
      if (AskVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskVolume);
      }
      if (MidCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MidCount);
      }
      if (MidVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MidVolume);
      }
      if (PrtCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtCount);
      }
      if (PrtVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtVolume);
      }
      if (LastPrtPrice != 0D) {
        size += 2 + 8;
      }
      if (lastPrtDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastPrtDttm);
      }
      if (ExpCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExpCount);
      }
      if (ExpWidth != 0D) {
        size += 2 + 8;
      }
      if (ExpBidSize != 0F) {
        size += 2 + 4;
      }
      if (ExpAskSize != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StockMarketSummary other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.OpnPrice != 0D) {
        OpnPrice = other.OpnPrice;
      }
      if (other.MrkPrice != 0D) {
        MrkPrice = other.MrkPrice;
      }
      if (other.ClsPrice != 0D) {
        ClsPrice = other.ClsPrice;
      }
      if (other.MinPrice != 0D) {
        MinPrice = other.MinPrice;
      }
      if (other.MaxPrice != 0D) {
        MaxPrice = other.MaxPrice;
      }
      if (other.SharesOutstanding != 0L) {
        SharesOutstanding = other.SharesOutstanding;
      }
      if (other.BidCount != 0) {
        BidCount = other.BidCount;
      }
      if (other.BidVolume != 0) {
        BidVolume = other.BidVolume;
      }
      if (other.AskCount != 0) {
        AskCount = other.AskCount;
      }
      if (other.AskVolume != 0) {
        AskVolume = other.AskVolume;
      }
      if (other.MidCount != 0) {
        MidCount = other.MidCount;
      }
      if (other.MidVolume != 0) {
        MidVolume = other.MidVolume;
      }
      if (other.PrtCount != 0) {
        PrtCount = other.PrtCount;
      }
      if (other.PrtVolume != 0) {
        PrtVolume = other.PrtVolume;
      }
      if (other.LastPrtPrice != 0D) {
        LastPrtPrice = other.LastPrtPrice;
      }
      if (other.lastPrtDttm_ != null) {
        if (lastPrtDttm_ == null) {
          LastPrtDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastPrtDttm.MergeFrom(other.LastPrtDttm);
      }
      if (other.ExpCount != 0) {
        ExpCount = other.ExpCount;
      }
      if (other.ExpWidth != 0D) {
        ExpWidth = other.ExpWidth;
      }
      if (other.ExpBidSize != 0F) {
        ExpBidSize = other.ExpBidSize;
      }
      if (other.ExpAskSize != 0F) {
        ExpAskSize = other.ExpAskSize;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            OpnPrice = input.ReadDouble();
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 825: {
            MrkPrice = input.ReadDouble();
            break;
          }
          case 849: {
            ClsPrice = input.ReadDouble();
            break;
          }
          case 873: {
            MinPrice = input.ReadDouble();
            break;
          }
          case 897: {
            MaxPrice = input.ReadDouble();
            break;
          }
          case 920: {
            SharesOutstanding = input.ReadInt64();
            break;
          }
          case 944: {
            BidCount = input.ReadInt32();
            break;
          }
          case 968: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 992: {
            AskCount = input.ReadInt32();
            break;
          }
          case 1016: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1040: {
            MidCount = input.ReadInt32();
            break;
          }
          case 1064: {
            MidVolume = input.ReadInt32();
            break;
          }
          case 1088: {
            PrtCount = input.ReadInt32();
            break;
          }
          case 1096: {
            PrtVolume = input.ReadInt32();
            break;
          }
          case 1113: {
            LastPrtPrice = input.ReadDouble();
            break;
          }
          case 1122: {
            if (lastPrtDttm_ == null) {
              LastPrtDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPrtDttm);
            break;
          }
          case 1136: {
            ExpCount = input.ReadInt32();
            break;
          }
          case 1161: {
            ExpWidth = input.ReadDouble();
            break;
          }
          case 1189: {
            ExpBidSize = input.ReadFloat();
            break;
          }
          case 1213: {
            ExpAskSize = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockMarketSummary.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            OpnPrice = input.ReadDouble();
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 825: {
            MrkPrice = input.ReadDouble();
            break;
          }
          case 849: {
            ClsPrice = input.ReadDouble();
            break;
          }
          case 873: {
            MinPrice = input.ReadDouble();
            break;
          }
          case 897: {
            MaxPrice = input.ReadDouble();
            break;
          }
          case 920: {
            SharesOutstanding = input.ReadInt64();
            break;
          }
          case 944: {
            BidCount = input.ReadInt32();
            break;
          }
          case 968: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 992: {
            AskCount = input.ReadInt32();
            break;
          }
          case 1016: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1040: {
            MidCount = input.ReadInt32();
            break;
          }
          case 1064: {
            MidVolume = input.ReadInt32();
            break;
          }
          case 1088: {
            PrtCount = input.ReadInt32();
            break;
          }
          case 1096: {
            PrtVolume = input.ReadInt32();
            break;
          }
          case 1113: {
            LastPrtPrice = input.ReadDouble();
            break;
          }
          case 1122: {
            if (lastPrtDttm_ == null) {
              LastPrtDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPrtDttm);
            break;
          }
          case 1136: {
            ExpCount = input.ReadInt32();
            break;
          }
          case 1161: {
            ExpWidth = input.ReadDouble();
            break;
          }
          case 1189: {
            ExpBidSize = input.ReadFloat();
            break;
          }
          case 1213: {
            ExpAskSize = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StockMarketSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.StockMarketSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
