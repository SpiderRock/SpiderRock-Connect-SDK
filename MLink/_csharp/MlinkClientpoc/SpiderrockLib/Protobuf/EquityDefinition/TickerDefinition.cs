// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/EquityDefinition/TickerDefinition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/EquityDefinition/TickerDefinition.proto</summary>
  public static partial class TickerDefinitionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/EquityDefinition/TickerDefinition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickerDefinitionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9FcXVpdHlEZWZpbml0aW9uL1RpY2tlckRlZmluaXRpb24u",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIqsNChBU",
            "aWNrZXJEZWZpbml0aW9uEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOAoEcGtleRgCIAEoCzIqLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuVGlja2VyRGVmaW5pdGlvbi5QS2V5EhMKC3NlY3Vy",
            "aXR5X2lEGGQgASgFEjQKC3N5bWJvbF90eXBlGGcgASgOMh8uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5TeW1ib2xUeXBlEgwKBG5hbWUYaiABKAkSDwoHY291bnRy",
            "eRhtIAEoCRI3ChBwcmltYXJ5X2N1cnJlbmN5GG4gASgOMh0uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5DdXJyZW5jeRIRCglwYXJfdmFsdWUYcCABKAISGgoScGFy",
            "X3ZhbHVlX2N1cnJlbmN5GHMgASgJEhMKC3BvaW50X3ZhbHVlGHYgASgCEjUK",
            "DnBvaW50X2N1cnJlbmN5GHkgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5D",
            "dXJyZW5jeRI6CgxwcmltYXJ5X2V4Y2gYfCABKA4yJC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlByaW1hcnlFeGNoYW5nZRIOCgZhbHRfaUQYfyABKAUSDAoDbWlj",
            "GIIBIAEoCRIQCgdtaWNfc2VnGIUBIAEoCRIPCgZzeW1ib2wYiAEgASgJEhQK",
            "C2lzc3VlX2NsYXNzGIsBIAEoCRIbChJzaGFyZXNfb3V0c3RhbmRpbmcYjgEg",
            "ASgFEg4KBWN1c2lwGJEBIAEoCRIQCgdpbmRfbnVtGJQBIAEoBRIQCgdzdWJf",
            "bnVtGJcBIAEoBRIQCgdncnBfbnVtGJoBIAEoBRIQCgduYnJfbnVtGJ0BIAEo",
            "BRIMCgNzaWMYoAEgASgJEgwKA2NpaxijASABKAkSDQoEZ2ljcximASABKAkS",
            "DAoDbGVpGKkBIAEoCRIOCgVuYWljcxisASABKAkSDAoDY2ZpGK8BIAEoCRIM",
            "CgNjaWMYsgEgASgJEg0KBGZpc24YtQEgASgJEg0KBGlzaW4YuAEgASgJEg0K",
            "BGZpZ2kYuwEgASgJEh0KFGJiZ19jb21wb3NpdGVfdGlja2VyGL4BIAEoCRIc",
            "ChNiYmdfZXhjaGFuZ2VfdGlja2VyGMEBIAEoCRIgChdiYmdfY29tcG9zaXRl",
            "X2dsb2JhbF9pRBjEASABKAkSFgoNYmJnX2dsb2JhbF9pRBjHASABKAkSFQoM",
            "YmJnX2N1cnJlbmN5GMoBIAEoCRJCChJvdGNfcHJpbWFyeV9tYXJrZXQYzQEg",
            "ASgOMiUuc3BpZGVycm9jay5wcm90b2J1Zi5PVENQcmltYXJ5TWFya2V0Ei8K",
            "CG90Y190aWVyGNABIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuT1RDVGll",
            "chIdChRvdGNfcmVwb3J0aW5nX3N0YXR1cxjTASABKAkSHgoVb3RjX2Rpc2Ns",
            "b3N1cmVfc3RhdHVzGNYBIAEoBRISCglvdGNfZmxhZ3MY2QEgASgFEjgKDXN0",
            "a19wcmljZV9pbmMY3AEgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TdGtQ",
            "cmljZUluYxI4Cg10a19kZWZfc291cmNlGN8BIAEoDjIgLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuVGtEZWZTb3VyY2USNwoLc3RhdHVzX2ZsYWcY4gEgASgOMiEu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5Ua1N0YXR1c0ZsYWcSMQoJdGFwZV9jb2Rl",
            "GOUBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuVGFwZUNvZGUSEwoKc3Rr",
            "X3ZvbHVtZRjoASABKAISEwoKZnV0X3ZvbHVtZRjrASABKAISEwoKb3B0X3Zv",
            "bHVtZRjuASABKAISFAoLZXhjaF9zdHJpbmcY8QEgASgJEjAKC2hhc19vcHRp",
            "b25zGPQBIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SFAoLbnVt",
            "X29wdGlvbnMY9wEgASgFEjUKC3RpbWVfbWV0cmljGPoBIAEoDjIfLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuVGltZU1ldHJpYxIuCgl0aW1lc3RhbXAY/QEgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBo2CgRQS2V5Ei4KBnRpY2tl",
            "chgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5YgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TickerDefinition), global::Spiderrock.Protobuf.TickerDefinition.Parser, new[]{ "Meta", "Pkey", "SecurityID", "SymbolType", "Name", "Country", "PrimaryCurrency", "ParValue", "ParValueCurrency", "PointValue", "PointCurrency", "PrimaryExch", "AltID", "Mic", "MicSeg", "Symbol", "IssueClass", "SharesOutstanding", "Cusip", "IndNum", "SubNum", "GrpNum", "NbrNum", "Sic", "Cik", "Gics", "Lei", "Naics", "Cfi", "Cic", "Fisn", "Isin", "Figi", "BbgCompositeTicker", "BbgExchangeTicker", "BbgCompositeGlobalID", "BbgGlobalID", "BbgCurrency", "OtcPrimaryMarket", "OtcTier", "OtcReportingStatus", "OtcDisclosureStatus", "OtcFlags", "StkPriceInc", "TkDefSource", "StatusFlag", "TapeCode", "StkVolume", "FutVolume", "OptVolume", "ExchString", "HasOptions", "NumOptions", "TimeMetric", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TickerDefinition.Types.PKey), global::Spiderrock.Protobuf.TickerDefinition.Types.PKey.Parser, new[]{ "Ticker" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///TickerDefinition (internal only) records exist for all SpiderRock tickers including equity tickers (stocks and ETFs) as well as index tickers and synthetic tickers for future chains and option multihedge baskets.
  /// </summary>
  public sealed partial class TickerDefinition : pb::IMessage<TickerDefinition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickerDefinition> _parser = new pb::MessageParser<TickerDefinition>(() => new TickerDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickerDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.TickerDefinitionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerDefinition(TickerDefinition other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      securityID_ = other.securityID_;
      symbolType_ = other.symbolType_;
      name_ = other.name_;
      country_ = other.country_;
      primaryCurrency_ = other.primaryCurrency_;
      parValue_ = other.parValue_;
      parValueCurrency_ = other.parValueCurrency_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      primaryExch_ = other.primaryExch_;
      altID_ = other.altID_;
      mic_ = other.mic_;
      micSeg_ = other.micSeg_;
      symbol_ = other.symbol_;
      issueClass_ = other.issueClass_;
      sharesOutstanding_ = other.sharesOutstanding_;
      cusip_ = other.cusip_;
      indNum_ = other.indNum_;
      subNum_ = other.subNum_;
      grpNum_ = other.grpNum_;
      nbrNum_ = other.nbrNum_;
      sic_ = other.sic_;
      cik_ = other.cik_;
      gics_ = other.gics_;
      lei_ = other.lei_;
      naics_ = other.naics_;
      cfi_ = other.cfi_;
      cic_ = other.cic_;
      fisn_ = other.fisn_;
      isin_ = other.isin_;
      figi_ = other.figi_;
      bbgCompositeTicker_ = other.bbgCompositeTicker_;
      bbgExchangeTicker_ = other.bbgExchangeTicker_;
      bbgCompositeGlobalID_ = other.bbgCompositeGlobalID_;
      bbgGlobalID_ = other.bbgGlobalID_;
      bbgCurrency_ = other.bbgCurrency_;
      otcPrimaryMarket_ = other.otcPrimaryMarket_;
      otcTier_ = other.otcTier_;
      otcReportingStatus_ = other.otcReportingStatus_;
      otcDisclosureStatus_ = other.otcDisclosureStatus_;
      otcFlags_ = other.otcFlags_;
      stkPriceInc_ = other.stkPriceInc_;
      tkDefSource_ = other.tkDefSource_;
      statusFlag_ = other.statusFlag_;
      tapeCode_ = other.tapeCode_;
      stkVolume_ = other.stkVolume_;
      futVolume_ = other.futVolume_;
      optVolume_ = other.optVolume_;
      exchString_ = other.exchString_;
      hasOptions_ = other.hasOptions_;
      numOptions_ = other.numOptions_;
      timeMetric_ = other.timeMetric_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickerDefinition Clone() {
      return new TickerDefinition(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.TickerDefinition.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerDefinition.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "security_iD" field.</summary>
    public const int SecurityIDFieldNumber = 100;
    private int securityID_;
    /// <summary>
    /// Security ID number from the source - Vendor, SR, Feed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecurityID {
      get { return securityID_; }
      set {
        securityID_ = value;
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 103;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 106;
    private string name_ = "";
    /// <summary>
    /// Symbol name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 109;
    private string country_ = "";
    /// <summary>
    /// ISO Issuer Country Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_currency" field.</summary>
    public const int PrimaryCurrencyFieldNumber = 110;
    private global::Spiderrock.Protobuf.Currency primaryCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PrimaryCurrency {
      get { return primaryCurrency_; }
      set {
        primaryCurrency_ = value;
      }
    }

    /// <summary>Field number for the "par_value" field.</summary>
    public const int ParValueFieldNumber = 112;
    private float parValue_;
    /// <summary>
    /// Security Parvalue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParValue {
      get { return parValue_; }
      set {
        parValue_ = value;
      }
    }

    /// <summary>Field number for the "par_value_currency" field.</summary>
    public const int ParValueCurrencyFieldNumber = 115;
    private string parValueCurrency_ = "";
    /// <summary>
    /// Security Parvalue currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParValueCurrency {
      get { return parValueCurrency_; }
      set {
        parValueCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 118;
    private float pointValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 121;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "primary_exch" field.</summary>
    public const int PrimaryExchFieldNumber = 124;
    private global::Spiderrock.Protobuf.PrimaryExchange primaryExch_ = global::Spiderrock.Protobuf.PrimaryExchange.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrimaryExchange PrimaryExch {
      get { return primaryExch_; }
      set {
        primaryExch_ = value;
      }
    }

    /// <summary>Field number for the "alt_iD" field.</summary>
    public const int AltIDFieldNumber = 127;
    private int altID_;
    /// <summary>
    /// Alt Security ID number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AltID {
      get { return altID_; }
      set {
        altID_ = value;
      }
    }

    /// <summary>Field number for the "mic" field.</summary>
    public const int MicFieldNumber = 130;
    private string mic_ = "";
    /// <summary>
    /// ISO Market Identification Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mic {
      get { return mic_; }
      set {
        mic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mic_seg" field.</summary>
    public const int MicSegFieldNumber = 133;
    private string micSeg_ = "";
    /// <summary>
    /// ISO Market Indentification Segment Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MicSeg {
      get { return micSeg_; }
      set {
        micSeg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 136;
    private string symbol_ = "";
    /// <summary>
    /// trading symbol (w/o dot notation)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_class" field.</summary>
    public const int IssueClassFieldNumber = 139;
    private string issueClass_ = "";
    /// <summary>
    /// issue class of stock symbol.  if no issue class field will be blank.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueClass {
      get { return issueClass_; }
      set {
        issueClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shares_outstanding" field.</summary>
    public const int SharesOutstandingFieldNumber = 142;
    private int sharesOutstanding_;
    /// <summary>
    /// symbol shares outstanding, represented in thousands (actualsharesoutstanding = sharesoutstanding * 1000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SharesOutstanding {
      get { return sharesOutstanding_; }
      set {
        sharesOutstanding_ = value;
      }
    }

    /// <summary>Field number for the "cusip" field.</summary>
    public const int CusipFieldNumber = 145;
    private string cusip_ = "";
    /// <summary>
    /// cusip code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cusip {
      get { return cusip_; }
      set {
        cusip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ind_num" field.</summary>
    public const int IndNumFieldNumber = 148;
    private int indNum_;
    /// <summary>
    /// IND (2 digits)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IndNum {
      get { return indNum_; }
      set {
        indNum_ = value;
      }
    }

    /// <summary>Field number for the "sub_num" field.</summary>
    public const int SubNumFieldNumber = 151;
    private int subNum_;
    /// <summary>
    /// SUB (4 digits)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubNum {
      get { return subNum_; }
      set {
        subNum_ = value;
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 154;
    private int grpNum_;
    /// <summary>
    /// GRP (6 digits)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "nbr_num" field.</summary>
    public const int NbrNumFieldNumber = 157;
    private int nbrNum_;
    /// <summary>
    /// NBR (8 digits)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbrNum {
      get { return nbrNum_; }
      set {
        nbrNum_ = value;
      }
    }

    /// <summary>Field number for the "sic" field.</summary>
    public const int SicFieldNumber = 160;
    private string sic_ = "";
    /// <summary>
    /// SIC (Standard Industrial Classification) code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sic {
      get { return sic_; }
      set {
        sic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cik" field.</summary>
    public const int CikFieldNumber = 163;
    private string cik_ = "";
    /// <summary>
    /// Central Index Key (US specific)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cik {
      get { return cik_; }
      set {
        cik_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gics" field.</summary>
    public const int GicsFieldNumber = 166;
    private string gics_ = "";
    /// <summary>
    /// Global Industry Classification Standard
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gics {
      get { return gics_; }
      set {
        gics_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lei" field.</summary>
    public const int LeiFieldNumber = 169;
    private string lei_ = "";
    /// <summary>
    /// Legal Entity Identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Lei {
      get { return lei_; }
      set {
        lei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "naics" field.</summary>
    public const int NaicsFieldNumber = 172;
    private string naics_ = "";
    /// <summary>
    /// North American Industry Classification System
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Naics {
      get { return naics_; }
      set {
        naics_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cfi" field.</summary>
    public const int CfiFieldNumber = 175;
    private string cfi_ = "";
    /// <summary>
    /// ISO Classification of Financial Instruments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cfi {
      get { return cfi_; }
      set {
        cfi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cic" field.</summary>
    public const int CicFieldNumber = 178;
    private string cic_ = "";
    /// <summary>
    /// Complementay Identification Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cic {
      get { return cic_; }
      set {
        cic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fisn" field.</summary>
    public const int FisnFieldNumber = 181;
    private string fisn_ = "";
    /// <summary>
    /// Financial Instrument Short Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Fisn {
      get { return fisn_; }
      set {
        fisn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 184;
    private string isin_ = "";
    /// <summary>
    /// ISIN code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 187;
    private string figi_ = "";
    /// <summary>
    /// FIGI code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbg_composite_ticker" field.</summary>
    public const int BbgCompositeTickerFieldNumber = 190;
    private string bbgCompositeTicker_ = "";
    /// <summary>
    /// Bloomberg Composite Ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BbgCompositeTicker {
      get { return bbgCompositeTicker_; }
      set {
        bbgCompositeTicker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbg_exchange_ticker" field.</summary>
    public const int BbgExchangeTickerFieldNumber = 193;
    private string bbgExchangeTicker_ = "";
    /// <summary>
    /// Bloomberg Exchange Ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BbgExchangeTicker {
      get { return bbgExchangeTicker_; }
      set {
        bbgExchangeTicker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbg_composite_global_iD" field.</summary>
    public const int BbgCompositeGlobalIDFieldNumber = 196;
    private string bbgCompositeGlobalID_ = "";
    /// <summary>
    /// Bloomberg Composite Global ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BbgCompositeGlobalID {
      get { return bbgCompositeGlobalID_; }
      set {
        bbgCompositeGlobalID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbg_global_iD" field.</summary>
    public const int BbgGlobalIDFieldNumber = 199;
    private string bbgGlobalID_ = "";
    /// <summary>
    /// Bloomberg Global ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BbgGlobalID {
      get { return bbgGlobalID_; }
      set {
        bbgGlobalID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbg_currency" field.</summary>
    public const int BbgCurrencyFieldNumber = 202;
    private string bbgCurrency_ = "";
    /// <summary>
    /// Bloomberg Trading Currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BbgCurrency {
      get { return bbgCurrency_; }
      set {
        bbgCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otc_primary_market" field.</summary>
    public const int OtcPrimaryMarketFieldNumber = 205;
    private global::Spiderrock.Protobuf.OTCPrimaryMarket otcPrimaryMarket_ = global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OTCPrimaryMarket OtcPrimaryMarket {
      get { return otcPrimaryMarket_; }
      set {
        otcPrimaryMarket_ = value;
      }
    }

    /// <summary>Field number for the "otc_tier" field.</summary>
    public const int OtcTierFieldNumber = 208;
    private global::Spiderrock.Protobuf.OTCTier otcTier_ = global::Spiderrock.Protobuf.OTCTier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OTCTier OtcTier {
      get { return otcTier_; }
      set {
        otcTier_ = value;
      }
    }

    /// <summary>Field number for the "otc_reporting_status" field.</summary>
    public const int OtcReportingStatusFieldNumber = 211;
    private string otcReportingStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OtcReportingStatus {
      get { return otcReportingStatus_; }
      set {
        otcReportingStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otc_disclosure_status" field.</summary>
    public const int OtcDisclosureStatusFieldNumber = 214;
    private int otcDisclosureStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtcDisclosureStatus {
      get { return otcDisclosureStatus_; }
      set {
        otcDisclosureStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flags" field.</summary>
    public const int OtcFlagsFieldNumber = 217;
    private int otcFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtcFlags {
      get { return otcFlags_; }
      set {
        otcFlags_ = value;
      }
    }

    /// <summary>Field number for the "stk_price_inc" field.</summary>
    public const int StkPriceIncFieldNumber = 220;
    private global::Spiderrock.Protobuf.StkPriceInc stkPriceInc_ = global::Spiderrock.Protobuf.StkPriceInc.Unspecified;
    /// <summary>
    /// Price increment: None; FullPenny; Nickle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkPriceInc StkPriceInc {
      get { return stkPriceInc_; }
      set {
        stkPriceInc_ = value;
      }
    }

    /// <summary>Field number for the "tk_def_source" field.</summary>
    public const int TkDefSourceFieldNumber = 223;
    private global::Spiderrock.Protobuf.TkDefSource tkDefSource_ = global::Spiderrock.Protobuf.TkDefSource.Unspecified;
    /// <summary>
    /// Ticker definition source: None; Vendor; OTC; SR; Exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TkDefSource TkDefSource {
      get { return tkDefSource_; }
      set {
        tkDefSource_ = value;
      }
    }

    /// <summary>Field number for the "status_flag" field.</summary>
    public const int StatusFlagFieldNumber = 226;
    private global::Spiderrock.Protobuf.TkStatusFlag statusFlag_ = global::Spiderrock.Protobuf.TkStatusFlag.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TkStatusFlag StatusFlag {
      get { return statusFlag_; }
      set {
        statusFlag_ = value;
      }
    }

    /// <summary>Field number for the "tape_code" field.</summary>
    public const int TapeCodeFieldNumber = 229;
    private global::Spiderrock.Protobuf.TapeCode tapeCode_ = global::Spiderrock.Protobuf.TapeCode.Unspecified;
    /// <summary>
    /// SIP Tape Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TapeCode TapeCode {
      get { return tapeCode_; }
      set {
        tapeCode_ = value;
      }
    }

    /// <summary>Field number for the "stk_volume" field.</summary>
    public const int StkVolumeFieldNumber = 232;
    private float stkVolume_;
    /// <summary>
    /// trailing average 20D daily stock volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkVolume {
      get { return stkVolume_; }
      set {
        stkVolume_ = value;
      }
    }

    /// <summary>Field number for the "fut_volume" field.</summary>
    public const int FutVolumeFieldNumber = 235;
    private float futVolume_;
    /// <summary>
    /// trailing average 20D daily future volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutVolume {
      get { return futVolume_; }
      set {
        futVolume_ = value;
      }
    }

    /// <summary>Field number for the "opt_volume" field.</summary>
    public const int OptVolumeFieldNumber = 238;
    private float optVolume_;
    /// <summary>
    /// trailing average 20D daily option volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptVolume {
      get { return optVolume_; }
      set {
        optVolume_ = value;
      }
    }

    /// <summary>Field number for the "exch_string" field.</summary>
    public const int ExchStringFieldNumber = 241;
    private string exchString_ = "";
    /// <summary>
    /// exchanges listing any options on this underlying
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchString {
      get { return exchString_; }
      set {
        exchString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_options" field.</summary>
    public const int HasOptionsFieldNumber = 244;
    private global::Spiderrock.Protobuf.YesNo hasOptions_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Has Options flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasOptions {
      get { return hasOptions_; }
      set {
        hasOptions_ = value;
      }
    }

    /// <summary>Field number for the "num_options" field.</summary>
    public const int NumOptionsFieldNumber = 247;
    private int numOptions_;
    /// <summary>
    /// total number of listed options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptions {
      get { return numOptions_; }
      set {
        numOptions_ = value;
      }
    }

    /// <summary>Field number for the "time_metric" field.</summary>
    public const int TimeMetricFieldNumber = 250;
    private global::Spiderrock.Protobuf.TimeMetric timeMetric_ = global::Spiderrock.Protobuf.TimeMetric.Unspecified;
    /// <summary>
    /// trading time metric - 252 or 365 trading days or a weekly cycle type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TimeMetric TimeMetric {
      get { return timeMetric_; }
      set {
        timeMetric_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 253;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickerDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickerDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SecurityID != other.SecurityID) return false;
      if (SymbolType != other.SymbolType) return false;
      if (Name != other.Name) return false;
      if (Country != other.Country) return false;
      if (PrimaryCurrency != other.PrimaryCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParValue, other.ParValue)) return false;
      if (ParValueCurrency != other.ParValueCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (PrimaryExch != other.PrimaryExch) return false;
      if (AltID != other.AltID) return false;
      if (Mic != other.Mic) return false;
      if (MicSeg != other.MicSeg) return false;
      if (Symbol != other.Symbol) return false;
      if (IssueClass != other.IssueClass) return false;
      if (SharesOutstanding != other.SharesOutstanding) return false;
      if (Cusip != other.Cusip) return false;
      if (IndNum != other.IndNum) return false;
      if (SubNum != other.SubNum) return false;
      if (GrpNum != other.GrpNum) return false;
      if (NbrNum != other.NbrNum) return false;
      if (Sic != other.Sic) return false;
      if (Cik != other.Cik) return false;
      if (Gics != other.Gics) return false;
      if (Lei != other.Lei) return false;
      if (Naics != other.Naics) return false;
      if (Cfi != other.Cfi) return false;
      if (Cic != other.Cic) return false;
      if (Fisn != other.Fisn) return false;
      if (Isin != other.Isin) return false;
      if (Figi != other.Figi) return false;
      if (BbgCompositeTicker != other.BbgCompositeTicker) return false;
      if (BbgExchangeTicker != other.BbgExchangeTicker) return false;
      if (BbgCompositeGlobalID != other.BbgCompositeGlobalID) return false;
      if (BbgGlobalID != other.BbgGlobalID) return false;
      if (BbgCurrency != other.BbgCurrency) return false;
      if (OtcPrimaryMarket != other.OtcPrimaryMarket) return false;
      if (OtcTier != other.OtcTier) return false;
      if (OtcReportingStatus != other.OtcReportingStatus) return false;
      if (OtcDisclosureStatus != other.OtcDisclosureStatus) return false;
      if (OtcFlags != other.OtcFlags) return false;
      if (StkPriceInc != other.StkPriceInc) return false;
      if (TkDefSource != other.TkDefSource) return false;
      if (StatusFlag != other.StatusFlag) return false;
      if (TapeCode != other.TapeCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkVolume, other.StkVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutVolume, other.FutVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptVolume, other.OptVolume)) return false;
      if (ExchString != other.ExchString) return false;
      if (HasOptions != other.HasOptions) return false;
      if (NumOptions != other.NumOptions) return false;
      if (TimeMetric != other.TimeMetric) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SecurityID != 0) hash ^= SecurityID.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (PrimaryCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PrimaryCurrency.GetHashCode();
      if (ParValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParValue);
      if (ParValueCurrency.Length != 0) hash ^= ParValueCurrency.GetHashCode();
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (PrimaryExch != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) hash ^= PrimaryExch.GetHashCode();
      if (AltID != 0) hash ^= AltID.GetHashCode();
      if (Mic.Length != 0) hash ^= Mic.GetHashCode();
      if (MicSeg.Length != 0) hash ^= MicSeg.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (IssueClass.Length != 0) hash ^= IssueClass.GetHashCode();
      if (SharesOutstanding != 0) hash ^= SharesOutstanding.GetHashCode();
      if (Cusip.Length != 0) hash ^= Cusip.GetHashCode();
      if (IndNum != 0) hash ^= IndNum.GetHashCode();
      if (SubNum != 0) hash ^= SubNum.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (NbrNum != 0) hash ^= NbrNum.GetHashCode();
      if (Sic.Length != 0) hash ^= Sic.GetHashCode();
      if (Cik.Length != 0) hash ^= Cik.GetHashCode();
      if (Gics.Length != 0) hash ^= Gics.GetHashCode();
      if (Lei.Length != 0) hash ^= Lei.GetHashCode();
      if (Naics.Length != 0) hash ^= Naics.GetHashCode();
      if (Cfi.Length != 0) hash ^= Cfi.GetHashCode();
      if (Cic.Length != 0) hash ^= Cic.GetHashCode();
      if (Fisn.Length != 0) hash ^= Fisn.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (BbgCompositeTicker.Length != 0) hash ^= BbgCompositeTicker.GetHashCode();
      if (BbgExchangeTicker.Length != 0) hash ^= BbgExchangeTicker.GetHashCode();
      if (BbgCompositeGlobalID.Length != 0) hash ^= BbgCompositeGlobalID.GetHashCode();
      if (BbgGlobalID.Length != 0) hash ^= BbgGlobalID.GetHashCode();
      if (BbgCurrency.Length != 0) hash ^= BbgCurrency.GetHashCode();
      if (OtcPrimaryMarket != global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified) hash ^= OtcPrimaryMarket.GetHashCode();
      if (OtcTier != global::Spiderrock.Protobuf.OTCTier.Unspecified) hash ^= OtcTier.GetHashCode();
      if (OtcReportingStatus.Length != 0) hash ^= OtcReportingStatus.GetHashCode();
      if (OtcDisclosureStatus != 0) hash ^= OtcDisclosureStatus.GetHashCode();
      if (OtcFlags != 0) hash ^= OtcFlags.GetHashCode();
      if (StkPriceInc != global::Spiderrock.Protobuf.StkPriceInc.Unspecified) hash ^= StkPriceInc.GetHashCode();
      if (TkDefSource != global::Spiderrock.Protobuf.TkDefSource.Unspecified) hash ^= TkDefSource.GetHashCode();
      if (StatusFlag != global::Spiderrock.Protobuf.TkStatusFlag.Unspecified) hash ^= StatusFlag.GetHashCode();
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) hash ^= TapeCode.GetHashCode();
      if (StkVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkVolume);
      if (FutVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutVolume);
      if (OptVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptVolume);
      if (ExchString.Length != 0) hash ^= ExchString.GetHashCode();
      if (HasOptions != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasOptions.GetHashCode();
      if (NumOptions != 0) hash ^= NumOptions.GetHashCode();
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) hash ^= TimeMetric.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SecurityID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SecurityID);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(Name);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(Country);
      }
      if (PrimaryCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) PrimaryCurrency);
      }
      if (ParValue != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(ParValue);
      }
      if (ParValueCurrency.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ParValueCurrency);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PrimaryExch != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PrimaryExch);
      }
      if (AltID != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(AltID);
      }
      if (Mic.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Mic);
      }
      if (MicSeg.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(MicSeg);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(Symbol);
      }
      if (IssueClass.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(IssueClass);
      }
      if (SharesOutstanding != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(SharesOutstanding);
      }
      if (Cusip.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Cusip);
      }
      if (IndNum != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NbrNum);
      }
      if (Sic.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(Sic);
      }
      if (Cik.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(Cik);
      }
      if (Gics.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(Gics);
      }
      if (Lei.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Lei);
      }
      if (Naics.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(Naics);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(250, 10);
        output.WriteString(Cfi);
      }
      if (Cic.Length != 0) {
        output.WriteRawTag(146, 11);
        output.WriteString(Cic);
      }
      if (Fisn.Length != 0) {
        output.WriteRawTag(170, 11);
        output.WriteString(Fisn);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(194, 11);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(Figi);
      }
      if (BbgCompositeTicker.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(BbgCompositeTicker);
      }
      if (BbgExchangeTicker.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(BbgExchangeTicker);
      }
      if (BbgCompositeGlobalID.Length != 0) {
        output.WriteRawTag(162, 12);
        output.WriteString(BbgCompositeGlobalID);
      }
      if (BbgGlobalID.Length != 0) {
        output.WriteRawTag(186, 12);
        output.WriteString(BbgGlobalID);
      }
      if (BbgCurrency.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(BbgCurrency);
      }
      if (OtcPrimaryMarket != global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) OtcPrimaryMarket);
      }
      if (OtcTier != global::Spiderrock.Protobuf.OTCTier.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) OtcTier);
      }
      if (OtcReportingStatus.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(OtcReportingStatus);
      }
      if (OtcDisclosureStatus != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(OtcDisclosureStatus);
      }
      if (OtcFlags != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(OtcFlags);
      }
      if (StkPriceInc != global::Spiderrock.Protobuf.StkPriceInc.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) StkPriceInc);
      }
      if (TkDefSource != global::Spiderrock.Protobuf.TkDefSource.Unspecified) {
        output.WriteRawTag(248, 13);
        output.WriteEnum((int) TkDefSource);
      }
      if (StatusFlag != global::Spiderrock.Protobuf.TkStatusFlag.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) StatusFlag);
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) TapeCode);
      }
      if (StkVolume != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(StkVolume);
      }
      if (FutVolume != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(FutVolume);
      }
      if (OptVolume != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(OptVolume);
      }
      if (ExchString.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(ExchString);
      }
      if (HasOptions != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) HasOptions);
      }
      if (NumOptions != 0) {
        output.WriteRawTag(184, 15);
        output.WriteInt32(NumOptions);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) TimeMetric);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 15);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SecurityID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SecurityID);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(Name);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(Country);
      }
      if (PrimaryCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) PrimaryCurrency);
      }
      if (ParValue != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(ParValue);
      }
      if (ParValueCurrency.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ParValueCurrency);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PrimaryExch != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PrimaryExch);
      }
      if (AltID != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(AltID);
      }
      if (Mic.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Mic);
      }
      if (MicSeg.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(MicSeg);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(Symbol);
      }
      if (IssueClass.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(IssueClass);
      }
      if (SharesOutstanding != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(SharesOutstanding);
      }
      if (Cusip.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Cusip);
      }
      if (IndNum != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NbrNum);
      }
      if (Sic.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(Sic);
      }
      if (Cik.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(Cik);
      }
      if (Gics.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(Gics);
      }
      if (Lei.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Lei);
      }
      if (Naics.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(Naics);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(250, 10);
        output.WriteString(Cfi);
      }
      if (Cic.Length != 0) {
        output.WriteRawTag(146, 11);
        output.WriteString(Cic);
      }
      if (Fisn.Length != 0) {
        output.WriteRawTag(170, 11);
        output.WriteString(Fisn);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(194, 11);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(Figi);
      }
      if (BbgCompositeTicker.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(BbgCompositeTicker);
      }
      if (BbgExchangeTicker.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(BbgExchangeTicker);
      }
      if (BbgCompositeGlobalID.Length != 0) {
        output.WriteRawTag(162, 12);
        output.WriteString(BbgCompositeGlobalID);
      }
      if (BbgGlobalID.Length != 0) {
        output.WriteRawTag(186, 12);
        output.WriteString(BbgGlobalID);
      }
      if (BbgCurrency.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(BbgCurrency);
      }
      if (OtcPrimaryMarket != global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) OtcPrimaryMarket);
      }
      if (OtcTier != global::Spiderrock.Protobuf.OTCTier.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) OtcTier);
      }
      if (OtcReportingStatus.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(OtcReportingStatus);
      }
      if (OtcDisclosureStatus != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(OtcDisclosureStatus);
      }
      if (OtcFlags != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(OtcFlags);
      }
      if (StkPriceInc != global::Spiderrock.Protobuf.StkPriceInc.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) StkPriceInc);
      }
      if (TkDefSource != global::Spiderrock.Protobuf.TkDefSource.Unspecified) {
        output.WriteRawTag(248, 13);
        output.WriteEnum((int) TkDefSource);
      }
      if (StatusFlag != global::Spiderrock.Protobuf.TkStatusFlag.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) StatusFlag);
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) TapeCode);
      }
      if (StkVolume != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(StkVolume);
      }
      if (FutVolume != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(FutVolume);
      }
      if (OptVolume != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(OptVolume);
      }
      if (ExchString.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(ExchString);
      }
      if (HasOptions != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) HasOptions);
      }
      if (NumOptions != 0) {
        output.WriteRawTag(184, 15);
        output.WriteInt32(NumOptions);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) TimeMetric);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 15);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SecurityID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SecurityID);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Country.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (PrimaryCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrimaryCurrency);
      }
      if (ParValue != 0F) {
        size += 2 + 4;
      }
      if (ParValueCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParValueCurrency);
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (PrimaryExch != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrimaryExch);
      }
      if (AltID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AltID);
      }
      if (Mic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mic);
      }
      if (MicSeg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MicSeg);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (IssueClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueClass);
      }
      if (SharesOutstanding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SharesOutstanding);
      }
      if (Cusip.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cusip);
      }
      if (IndNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndNum);
      }
      if (SubNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubNum);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (NbrNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbrNum);
      }
      if (Sic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sic);
      }
      if (Cik.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cik);
      }
      if (Gics.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Gics);
      }
      if (Lei.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lei);
      }
      if (Naics.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Naics);
      }
      if (Cfi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cfi);
      }
      if (Cic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cic);
      }
      if (Fisn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Fisn);
      }
      if (Isin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Figi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (BbgCompositeTicker.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BbgCompositeTicker);
      }
      if (BbgExchangeTicker.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BbgExchangeTicker);
      }
      if (BbgCompositeGlobalID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BbgCompositeGlobalID);
      }
      if (BbgGlobalID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BbgGlobalID);
      }
      if (BbgCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BbgCurrency);
      }
      if (OtcPrimaryMarket != global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OtcPrimaryMarket);
      }
      if (OtcTier != global::Spiderrock.Protobuf.OTCTier.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OtcTier);
      }
      if (OtcReportingStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OtcReportingStatus);
      }
      if (OtcDisclosureStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtcDisclosureStatus);
      }
      if (OtcFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtcFlags);
      }
      if (StkPriceInc != global::Spiderrock.Protobuf.StkPriceInc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkPriceInc);
      }
      if (TkDefSource != global::Spiderrock.Protobuf.TkDefSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TkDefSource);
      }
      if (StatusFlag != global::Spiderrock.Protobuf.TkStatusFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StatusFlag);
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TapeCode);
      }
      if (StkVolume != 0F) {
        size += 2 + 4;
      }
      if (FutVolume != 0F) {
        size += 2 + 4;
      }
      if (OptVolume != 0F) {
        size += 2 + 4;
      }
      if (ExchString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchString);
      }
      if (HasOptions != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasOptions);
      }
      if (NumOptions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptions);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeMetric);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickerDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.TickerDefinition.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SecurityID != 0) {
        SecurityID = other.SecurityID;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.PrimaryCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PrimaryCurrency = other.PrimaryCurrency;
      }
      if (other.ParValue != 0F) {
        ParValue = other.ParValue;
      }
      if (other.ParValueCurrency.Length != 0) {
        ParValueCurrency = other.ParValueCurrency;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.PrimaryExch != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
        PrimaryExch = other.PrimaryExch;
      }
      if (other.AltID != 0) {
        AltID = other.AltID;
      }
      if (other.Mic.Length != 0) {
        Mic = other.Mic;
      }
      if (other.MicSeg.Length != 0) {
        MicSeg = other.MicSeg;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.IssueClass.Length != 0) {
        IssueClass = other.IssueClass;
      }
      if (other.SharesOutstanding != 0) {
        SharesOutstanding = other.SharesOutstanding;
      }
      if (other.Cusip.Length != 0) {
        Cusip = other.Cusip;
      }
      if (other.IndNum != 0) {
        IndNum = other.IndNum;
      }
      if (other.SubNum != 0) {
        SubNum = other.SubNum;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.NbrNum != 0) {
        NbrNum = other.NbrNum;
      }
      if (other.Sic.Length != 0) {
        Sic = other.Sic;
      }
      if (other.Cik.Length != 0) {
        Cik = other.Cik;
      }
      if (other.Gics.Length != 0) {
        Gics = other.Gics;
      }
      if (other.Lei.Length != 0) {
        Lei = other.Lei;
      }
      if (other.Naics.Length != 0) {
        Naics = other.Naics;
      }
      if (other.Cfi.Length != 0) {
        Cfi = other.Cfi;
      }
      if (other.Cic.Length != 0) {
        Cic = other.Cic;
      }
      if (other.Fisn.Length != 0) {
        Fisn = other.Fisn;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.BbgCompositeTicker.Length != 0) {
        BbgCompositeTicker = other.BbgCompositeTicker;
      }
      if (other.BbgExchangeTicker.Length != 0) {
        BbgExchangeTicker = other.BbgExchangeTicker;
      }
      if (other.BbgCompositeGlobalID.Length != 0) {
        BbgCompositeGlobalID = other.BbgCompositeGlobalID;
      }
      if (other.BbgGlobalID.Length != 0) {
        BbgGlobalID = other.BbgGlobalID;
      }
      if (other.BbgCurrency.Length != 0) {
        BbgCurrency = other.BbgCurrency;
      }
      if (other.OtcPrimaryMarket != global::Spiderrock.Protobuf.OTCPrimaryMarket.Unspecified) {
        OtcPrimaryMarket = other.OtcPrimaryMarket;
      }
      if (other.OtcTier != global::Spiderrock.Protobuf.OTCTier.Unspecified) {
        OtcTier = other.OtcTier;
      }
      if (other.OtcReportingStatus.Length != 0) {
        OtcReportingStatus = other.OtcReportingStatus;
      }
      if (other.OtcDisclosureStatus != 0) {
        OtcDisclosureStatus = other.OtcDisclosureStatus;
      }
      if (other.OtcFlags != 0) {
        OtcFlags = other.OtcFlags;
      }
      if (other.StkPriceInc != global::Spiderrock.Protobuf.StkPriceInc.Unspecified) {
        StkPriceInc = other.StkPriceInc;
      }
      if (other.TkDefSource != global::Spiderrock.Protobuf.TkDefSource.Unspecified) {
        TkDefSource = other.TkDefSource;
      }
      if (other.StatusFlag != global::Spiderrock.Protobuf.TkStatusFlag.Unspecified) {
        StatusFlag = other.StatusFlag;
      }
      if (other.TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        TapeCode = other.TapeCode;
      }
      if (other.StkVolume != 0F) {
        StkVolume = other.StkVolume;
      }
      if (other.FutVolume != 0F) {
        FutVolume = other.FutVolume;
      }
      if (other.OptVolume != 0F) {
        OptVolume = other.OptVolume;
      }
      if (other.ExchString.Length != 0) {
        ExchString = other.ExchString;
      }
      if (other.HasOptions != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasOptions = other.HasOptions;
      }
      if (other.NumOptions != 0) {
        NumOptions = other.NumOptions;
      }
      if (other.TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        TimeMetric = other.TimeMetric;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TickerDefinition.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SecurityID = input.ReadInt32();
            break;
          }
          case 824: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 850: {
            Name = input.ReadString();
            break;
          }
          case 874: {
            Country = input.ReadString();
            break;
          }
          case 880: {
            PrimaryCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 901: {
            ParValue = input.ReadFloat();
            break;
          }
          case 922: {
            ParValueCurrency = input.ReadString();
            break;
          }
          case 949: {
            PointValue = input.ReadFloat();
            break;
          }
          case 968: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 992: {
            PrimaryExch = (global::Spiderrock.Protobuf.PrimaryExchange) input.ReadEnum();
            break;
          }
          case 1016: {
            AltID = input.ReadInt32();
            break;
          }
          case 1042: {
            Mic = input.ReadString();
            break;
          }
          case 1066: {
            MicSeg = input.ReadString();
            break;
          }
          case 1090: {
            Symbol = input.ReadString();
            break;
          }
          case 1114: {
            IssueClass = input.ReadString();
            break;
          }
          case 1136: {
            SharesOutstanding = input.ReadInt32();
            break;
          }
          case 1162: {
            Cusip = input.ReadString();
            break;
          }
          case 1184: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1208: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1232: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1256: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1282: {
            Sic = input.ReadString();
            break;
          }
          case 1306: {
            Cik = input.ReadString();
            break;
          }
          case 1330: {
            Gics = input.ReadString();
            break;
          }
          case 1354: {
            Lei = input.ReadString();
            break;
          }
          case 1378: {
            Naics = input.ReadString();
            break;
          }
          case 1402: {
            Cfi = input.ReadString();
            break;
          }
          case 1426: {
            Cic = input.ReadString();
            break;
          }
          case 1450: {
            Fisn = input.ReadString();
            break;
          }
          case 1474: {
            Isin = input.ReadString();
            break;
          }
          case 1498: {
            Figi = input.ReadString();
            break;
          }
          case 1522: {
            BbgCompositeTicker = input.ReadString();
            break;
          }
          case 1546: {
            BbgExchangeTicker = input.ReadString();
            break;
          }
          case 1570: {
            BbgCompositeGlobalID = input.ReadString();
            break;
          }
          case 1594: {
            BbgGlobalID = input.ReadString();
            break;
          }
          case 1618: {
            BbgCurrency = input.ReadString();
            break;
          }
          case 1640: {
            OtcPrimaryMarket = (global::Spiderrock.Protobuf.OTCPrimaryMarket) input.ReadEnum();
            break;
          }
          case 1664: {
            OtcTier = (global::Spiderrock.Protobuf.OTCTier) input.ReadEnum();
            break;
          }
          case 1690: {
            OtcReportingStatus = input.ReadString();
            break;
          }
          case 1712: {
            OtcDisclosureStatus = input.ReadInt32();
            break;
          }
          case 1736: {
            OtcFlags = input.ReadInt32();
            break;
          }
          case 1760: {
            StkPriceInc = (global::Spiderrock.Protobuf.StkPriceInc) input.ReadEnum();
            break;
          }
          case 1784: {
            TkDefSource = (global::Spiderrock.Protobuf.TkDefSource) input.ReadEnum();
            break;
          }
          case 1808: {
            StatusFlag = (global::Spiderrock.Protobuf.TkStatusFlag) input.ReadEnum();
            break;
          }
          case 1832: {
            TapeCode = (global::Spiderrock.Protobuf.TapeCode) input.ReadEnum();
            break;
          }
          case 1861: {
            StkVolume = input.ReadFloat();
            break;
          }
          case 1885: {
            FutVolume = input.ReadFloat();
            break;
          }
          case 1909: {
            OptVolume = input.ReadFloat();
            break;
          }
          case 1930: {
            ExchString = input.ReadString();
            break;
          }
          case 1952: {
            HasOptions = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1976: {
            NumOptions = input.ReadInt32();
            break;
          }
          case 2000: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 2026: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TickerDefinition.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SecurityID = input.ReadInt32();
            break;
          }
          case 824: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 850: {
            Name = input.ReadString();
            break;
          }
          case 874: {
            Country = input.ReadString();
            break;
          }
          case 880: {
            PrimaryCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 901: {
            ParValue = input.ReadFloat();
            break;
          }
          case 922: {
            ParValueCurrency = input.ReadString();
            break;
          }
          case 949: {
            PointValue = input.ReadFloat();
            break;
          }
          case 968: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 992: {
            PrimaryExch = (global::Spiderrock.Protobuf.PrimaryExchange) input.ReadEnum();
            break;
          }
          case 1016: {
            AltID = input.ReadInt32();
            break;
          }
          case 1042: {
            Mic = input.ReadString();
            break;
          }
          case 1066: {
            MicSeg = input.ReadString();
            break;
          }
          case 1090: {
            Symbol = input.ReadString();
            break;
          }
          case 1114: {
            IssueClass = input.ReadString();
            break;
          }
          case 1136: {
            SharesOutstanding = input.ReadInt32();
            break;
          }
          case 1162: {
            Cusip = input.ReadString();
            break;
          }
          case 1184: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1208: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1232: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1256: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1282: {
            Sic = input.ReadString();
            break;
          }
          case 1306: {
            Cik = input.ReadString();
            break;
          }
          case 1330: {
            Gics = input.ReadString();
            break;
          }
          case 1354: {
            Lei = input.ReadString();
            break;
          }
          case 1378: {
            Naics = input.ReadString();
            break;
          }
          case 1402: {
            Cfi = input.ReadString();
            break;
          }
          case 1426: {
            Cic = input.ReadString();
            break;
          }
          case 1450: {
            Fisn = input.ReadString();
            break;
          }
          case 1474: {
            Isin = input.ReadString();
            break;
          }
          case 1498: {
            Figi = input.ReadString();
            break;
          }
          case 1522: {
            BbgCompositeTicker = input.ReadString();
            break;
          }
          case 1546: {
            BbgExchangeTicker = input.ReadString();
            break;
          }
          case 1570: {
            BbgCompositeGlobalID = input.ReadString();
            break;
          }
          case 1594: {
            BbgGlobalID = input.ReadString();
            break;
          }
          case 1618: {
            BbgCurrency = input.ReadString();
            break;
          }
          case 1640: {
            OtcPrimaryMarket = (global::Spiderrock.Protobuf.OTCPrimaryMarket) input.ReadEnum();
            break;
          }
          case 1664: {
            OtcTier = (global::Spiderrock.Protobuf.OTCTier) input.ReadEnum();
            break;
          }
          case 1690: {
            OtcReportingStatus = input.ReadString();
            break;
          }
          case 1712: {
            OtcDisclosureStatus = input.ReadInt32();
            break;
          }
          case 1736: {
            OtcFlags = input.ReadInt32();
            break;
          }
          case 1760: {
            StkPriceInc = (global::Spiderrock.Protobuf.StkPriceInc) input.ReadEnum();
            break;
          }
          case 1784: {
            TkDefSource = (global::Spiderrock.Protobuf.TkDefSource) input.ReadEnum();
            break;
          }
          case 1808: {
            StatusFlag = (global::Spiderrock.Protobuf.TkStatusFlag) input.ReadEnum();
            break;
          }
          case 1832: {
            TapeCode = (global::Spiderrock.Protobuf.TapeCode) input.ReadEnum();
            break;
          }
          case 1861: {
            StkVolume = input.ReadFloat();
            break;
          }
          case 1885: {
            FutVolume = input.ReadFloat();
            break;
          }
          case 1909: {
            OptVolume = input.ReadFloat();
            break;
          }
          case 1930: {
            ExchString = input.ReadString();
            break;
          }
          case 1952: {
            HasOptions = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1976: {
            NumOptions = input.ReadInt32();
            break;
          }
          case 2000: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 2026: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TickerDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.TickerDefinition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
