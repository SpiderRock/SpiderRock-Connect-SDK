// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptMarkData/OptionOpenMark.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptMarkData/OptionOpenMark.proto</summary>
  public static partial class OptionOpenMarkReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptMarkData/OptionOpenMark.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionOpenMarkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilQcm90b2J1Zi9PcHRNYXJrRGF0YS9PcHRpb25PcGVuTWFyay5wcm90bxIT",
            "c3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ihQYKDk9wdGlvbk9w",
            "ZW5NYXJrEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "ZXNzYWdlTWV0YWRhdGESNgoEcGtleRgCIAEoCzIoLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuT3B0aW9uT3Blbk1hcmsuUEtleRIwCgp0cmFkZV9kYXRlGGQgASgL",
            "Mhwuc3BpZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5Eg0KBXVfYmlkGGcgASgB",
            "Eg0KBXVfYXNrGGogASgBEhAKCHVfc3JfY2xzGG0gASgBEg8KB3VfY2xvc2UY",
            "cCABKAESDwoHYmlkX3ByYxhzIAEoAhIPCgdhc2tfcHJjGHYgASgCEhIKCnNy",
            "X2Nsc19wcmMYeSABKAESEQoJY2xvc2VfcHJjGHwgASgBEg4KBmJpZF9pVhh/",
            "IAEoAhIPCgZhc2tfaVYYggEgASgCEg8KBnNyX3ByYxiFASABKAISDwoGc3Jf",
            "dm9sGIgBIAEoAhIwCgZzcl9zcmMYiwEgASgOMh8uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5NYXJrU291cmNlEgsKAmRlGI4BIAEoAhILCgJnYRiRASABKAISCwoC",
            "dGgYlAEgASgCEgsKAnZlGJcBIAEoAhILCgJ2bxiaASABKAISCwoCdmEYnQEg",
            "ASgCEgsKAnJoGKABIAEoAhILCgJwaBijASABKAISEQoIc3Jfc2xvcGUYpgEg",
            "ASgCEhEKCGRlX2RlY2F5GKkBIAEoAhINCgRzZGl2GKwBIAEoAhINCgRkZGl2",
            "GK8BIAEoAhINCgRyYXRlGLIBIAEoAhIOCgV5ZWFycxi1ASABKAISDgoFZXJy",
            "b3IYuAEgASgFEhQKC2NvcnBfYWN0aW9uGLsBIAEoCRIuCgl0aW1lc3RhbXAY",
            "vgEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBo0CgRQS2V5EiwK",
            "BG9rZXkYCiABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionOpenMark), global::Spiderrock.Protobuf.OptionOpenMark.Parser, new[]{ "Meta", "Pkey", "TradeDate", "UBid", "UAsk", "USrCls", "UClose", "BidPrc", "AskPrc", "SrClsPrc", "ClosePrc", "BidIV", "AskIV", "SrPrc", "SrVol", "SrSrc", "De", "Ga", "Th", "Ve", "Vo", "Va", "Rh", "Ph", "SrSlope", "DeDecay", "Sdiv", "Ddiv", "Rate", "Years", "Error", "CorpAction", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey), global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey.Parser, new[]{ "Okey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///OptionOpenMark records are created during the end-of-day rotation for each product and intended for use the following trading day.
  /// </summary>
  public sealed partial class OptionOpenMark : pb::IMessage<OptionOpenMark>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionOpenMark> _parser = new pb::MessageParser<OptionOpenMark>(() => new OptionOpenMark());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionOpenMark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.OptionOpenMarkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionOpenMark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionOpenMark(OptionOpenMark other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      uSrCls_ = other.uSrCls_;
      uClose_ = other.uClose_;
      bidPrc_ = other.bidPrc_;
      askPrc_ = other.askPrc_;
      srClsPrc_ = other.srClsPrc_;
      closePrc_ = other.closePrc_;
      bidIV_ = other.bidIV_;
      askIV_ = other.askIV_;
      srPrc_ = other.srPrc_;
      srVol_ = other.srVol_;
      srSrc_ = other.srSrc_;
      de_ = other.de_;
      ga_ = other.ga_;
      th_ = other.th_;
      ve_ = other.ve_;
      vo_ = other.vo_;
      va_ = other.va_;
      rh_ = other.rh_;
      ph_ = other.ph_;
      srSlope_ = other.srSlope_;
      deDecay_ = other.deDecay_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      rate_ = other.rate_;
      years_ = other.years_;
      error_ = other.error_;
      corpAction_ = other.corpAction_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionOpenMark Clone() {
      return new OptionOpenMark(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 100;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 103;
    private double uBid_;
    /// <summary>
    /// SR open uBid; (SR close uBid overnight adjusted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 106;
    private double uAsk_;
    /// <summary>
    /// SR open uAsk; (SR close uAsk overnight adjusted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "u_sr_cls" field.</summary>
    public const int USrClsFieldNumber = 109;
    private double uSrCls_;
    /// <summary>
    /// SR open uMark; [SR close uMark (C - 1m) overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double USrCls {
      get { return uSrCls_; }
      set {
        uSrCls_ = value;
      }
    }

    /// <summary>Field number for the "u_close" field.</summary>
    public const int UCloseFieldNumber = 112;
    private double uClose_;
    /// <summary>
    /// exchange open uMark; [exchange close uMark overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UClose {
      get { return uClose_; }
      set {
        uClose_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc" field.</summary>
    public const int BidPrcFieldNumber = 115;
    private float bidPrc_;
    /// <summary>
    /// SR open bid; [SR close bid overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc {
      get { return bidPrc_; }
      set {
        bidPrc_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc" field.</summary>
    public const int AskPrcFieldNumber = 118;
    private float askPrc_;
    /// <summary>
    /// SR open ask; [SR close ask overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc {
      get { return askPrc_; }
      set {
        askPrc_ = value;
      }
    }

    /// <summary>Field number for the "sr_cls_prc" field.</summary>
    public const int SrClsPrcFieldNumber = 121;
    private double srClsPrc_;
    /// <summary>
    /// SR open mark; [SR close mark (close - 1min) overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SrClsPrc {
      get { return srClsPrc_; }
      set {
        srClsPrc_ = value;
      }
    }

    /// <summary>Field number for the "close_prc" field.</summary>
    public const int ClosePrcFieldNumber = 124;
    private double closePrc_;
    /// <summary>
    /// exchange open mark; [exchange close mark overnight adjusted] [if available]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClosePrc {
      get { return closePrc_; }
      set {
        closePrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_iV" field.</summary>
    public const int BidIVFieldNumber = 127;
    private float bidIV_;
    /// <summary>
    /// implied vol of SR closing bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidIV {
      get { return bidIV_; }
      set {
        bidIV_ = value;
      }
    }

    /// <summary>Field number for the "ask_iV" field.</summary>
    public const int AskIVFieldNumber = 130;
    private float askIV_;
    /// <summary>
    /// implied vol of SR closing ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskIV {
      get { return askIV_; }
      set {
        askIV_ = value;
      }
    }

    /// <summary>Field number for the "sr_prc" field.</summary>
    public const int SrPrcFieldNumber = 133;
    private float srPrc_;
    /// <summary>
    /// SR open surface price; [SR close surface price overnight adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrPrc {
      get { return srPrc_; }
      set {
        srPrc_ = value;
      }
    }

    /// <summary>Field number for the "sr_vol" field.</summary>
    public const int SrVolFieldNumber = 136;
    private float srVol_;
    /// <summary>
    /// SR surface volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrVol {
      get { return srVol_; }
      set {
        srVol_ = value;
      }
    }

    /// <summary>Field number for the "sr_src" field.</summary>
    public const int SrSrcFieldNumber = 139;
    private global::Spiderrock.Protobuf.MarkSource srSrc_ = global::Spiderrock.Protobuf.MarkSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarkSource SrSrc {
      get { return srSrc_; }
      set {
        srSrc_ = value;
      }
    }

    /// <summary>Field number for the "de" field.</summary>
    public const int DeFieldNumber = 142;
    private float de_;
    /// <summary>
    /// greeks from SR surface volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float De {
      get { return de_; }
      set {
        de_ = value;
      }
    }

    /// <summary>Field number for the "ga" field.</summary>
    public const int GaFieldNumber = 145;
    private float ga_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ga {
      get { return ga_; }
      set {
        ga_ = value;
      }
    }

    /// <summary>Field number for the "th" field.</summary>
    public const int ThFieldNumber = 148;
    private float th_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Th {
      get { return th_; }
      set {
        th_ = value;
      }
    }

    /// <summary>Field number for the "ve" field.</summary>
    public const int VeFieldNumber = 151;
    private float ve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ve {
      get { return ve_; }
      set {
        ve_ = value;
      }
    }

    /// <summary>Field number for the "vo" field.</summary>
    public const int VoFieldNumber = 154;
    private float vo_;
    /// <summary>
    /// volga (SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vo {
      get { return vo_; }
      set {
        vo_ = value;
      }
    }

    /// <summary>Field number for the "va" field.</summary>
    public const int VaFieldNumber = 157;
    private float va_;
    /// <summary>
    /// vanna (SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Va {
      get { return va_; }
      set {
        va_ = value;
      }
    }

    /// <summary>Field number for the "rh" field.</summary>
    public const int RhFieldNumber = 160;
    private float rh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rh {
      get { return rh_; }
      set {
        rh_ = value;
      }
    }

    /// <summary>Field number for the "ph" field.</summary>
    public const int PhFieldNumber = 163;
    private float ph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ph {
      get { return ph_; }
      set {
        ph_ = value;
      }
    }

    /// <summary>Field number for the "sr_slope" field.</summary>
    public const int SrSlopeFieldNumber = 166;
    private float srSlope_;
    /// <summary>
    /// surface slope (SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrSlope {
      get { return srSlope_; }
      set {
        srSlope_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 169;
    private float deDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 172;
    private float sdiv_;
    /// <summary>
    /// SR live sdiv rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 175;
    private float ddiv_;
    /// <summary>
    /// SR live ddiv rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 178;
    private float rate_;
    /// <summary>
    /// SR live int rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 181;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 184;
    private int error_;
    /// <summary>
    /// SRPricingLib.CalcError
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "corp_action" field.</summary>
    public const int CorpActionFieldNumber = 187;
    private string corpAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CorpAction {
      get { return corpAction_; }
      set {
        corpAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 190;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionOpenMark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionOpenMark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(USrCls, other.USrCls)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UClose, other.UClose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc, other.BidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc, other.AskPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SrClsPrc, other.SrClsPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClosePrc, other.ClosePrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidIV, other.BidIV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskIV, other.AskIV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrPrc, other.SrPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrVol, other.SrVol)) return false;
      if (SrSrc != other.SrSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vo, other.Vo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Va, other.Va)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rh, other.Rh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ph, other.Ph)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrSlope, other.SrSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (Error != other.Error) return false;
      if (CorpAction != other.CorpAction) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (USrCls != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(USrCls);
      if (UClose != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UClose);
      if (BidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc);
      if (AskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc);
      if (SrClsPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SrClsPrc);
      if (ClosePrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClosePrc);
      if (BidIV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidIV);
      if (AskIV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskIV);
      if (SrPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrPrc);
      if (SrVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrVol);
      if (SrSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) hash ^= SrSrc.GetHashCode();
      if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
      if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
      if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
      if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
      if (Vo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vo);
      if (Va != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Va);
      if (Rh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rh);
      if (Ph != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ph);
      if (SrSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrSlope);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Error != 0) hash ^= Error.GetHashCode();
      if (CorpAction.Length != 0) hash ^= CorpAction.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TradeDate);
      }
      if (UBid != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UAsk);
      }
      if (USrCls != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(USrCls);
      }
      if (UClose != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UClose);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(BidPrc);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(AskPrc);
      }
      if (SrClsPrc != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(SrClsPrc);
      }
      if (ClosePrc != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(ClosePrc);
      }
      if (BidIV != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(BidIV);
      }
      if (AskIV != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(AskIV);
      }
      if (SrPrc != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(SrPrc);
      }
      if (SrVol != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(SrVol);
      }
      if (SrSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) SrSrc);
      }
      if (De != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(Ve);
      }
      if (Vo != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Va);
      }
      if (Rh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Rh);
      }
      if (Ph != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Ph);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(SrSlope);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(DeDecay);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Ddiv);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Rate);
      }
      if (Years != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(Years);
      }
      if (Error != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(Error);
      }
      if (CorpAction.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(CorpAction);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(242, 11);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TradeDate);
      }
      if (UBid != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UAsk);
      }
      if (USrCls != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(USrCls);
      }
      if (UClose != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UClose);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(BidPrc);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(AskPrc);
      }
      if (SrClsPrc != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(SrClsPrc);
      }
      if (ClosePrc != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(ClosePrc);
      }
      if (BidIV != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(BidIV);
      }
      if (AskIV != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(AskIV);
      }
      if (SrPrc != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(SrPrc);
      }
      if (SrVol != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(SrVol);
      }
      if (SrSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) SrSrc);
      }
      if (De != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(Ve);
      }
      if (Vo != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Va);
      }
      if (Rh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Rh);
      }
      if (Ph != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Ph);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(SrSlope);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(DeDecay);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Ddiv);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Rate);
      }
      if (Years != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(Years);
      }
      if (Error != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(Error);
      }
      if (CorpAction.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(CorpAction);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(242, 11);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (USrCls != 0D) {
        size += 2 + 8;
      }
      if (UClose != 0D) {
        size += 2 + 8;
      }
      if (BidPrc != 0F) {
        size += 2 + 4;
      }
      if (AskPrc != 0F) {
        size += 2 + 4;
      }
      if (SrClsPrc != 0D) {
        size += 2 + 8;
      }
      if (ClosePrc != 0D) {
        size += 2 + 8;
      }
      if (BidIV != 0F) {
        size += 2 + 4;
      }
      if (AskIV != 0F) {
        size += 2 + 4;
      }
      if (SrPrc != 0F) {
        size += 2 + 4;
      }
      if (SrVol != 0F) {
        size += 2 + 4;
      }
      if (SrSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SrSrc);
      }
      if (De != 0F) {
        size += 2 + 4;
      }
      if (Ga != 0F) {
        size += 2 + 4;
      }
      if (Th != 0F) {
        size += 2 + 4;
      }
      if (Ve != 0F) {
        size += 2 + 4;
      }
      if (Vo != 0F) {
        size += 2 + 4;
      }
      if (Va != 0F) {
        size += 2 + 4;
      }
      if (Rh != 0F) {
        size += 2 + 4;
      }
      if (Ph != 0F) {
        size += 2 + 4;
      }
      if (SrSlope != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (CorpAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CorpAction);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionOpenMark other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.USrCls != 0D) {
        USrCls = other.USrCls;
      }
      if (other.UClose != 0D) {
        UClose = other.UClose;
      }
      if (other.BidPrc != 0F) {
        BidPrc = other.BidPrc;
      }
      if (other.AskPrc != 0F) {
        AskPrc = other.AskPrc;
      }
      if (other.SrClsPrc != 0D) {
        SrClsPrc = other.SrClsPrc;
      }
      if (other.ClosePrc != 0D) {
        ClosePrc = other.ClosePrc;
      }
      if (other.BidIV != 0F) {
        BidIV = other.BidIV;
      }
      if (other.AskIV != 0F) {
        AskIV = other.AskIV;
      }
      if (other.SrPrc != 0F) {
        SrPrc = other.SrPrc;
      }
      if (other.SrVol != 0F) {
        SrVol = other.SrVol;
      }
      if (other.SrSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        SrSrc = other.SrSrc;
      }
      if (other.De != 0F) {
        De = other.De;
      }
      if (other.Ga != 0F) {
        Ga = other.Ga;
      }
      if (other.Th != 0F) {
        Th = other.Th;
      }
      if (other.Ve != 0F) {
        Ve = other.Ve;
      }
      if (other.Vo != 0F) {
        Vo = other.Vo;
      }
      if (other.Va != 0F) {
        Va = other.Va;
      }
      if (other.Rh != 0F) {
        Rh = other.Rh;
      }
      if (other.Ph != 0F) {
        Ph = other.Ph;
      }
      if (other.SrSlope != 0F) {
        SrSlope = other.SrSlope;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.CorpAction.Length != 0) {
        CorpAction = other.CorpAction;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 825: {
            UBid = input.ReadDouble();
            break;
          }
          case 849: {
            UAsk = input.ReadDouble();
            break;
          }
          case 873: {
            USrCls = input.ReadDouble();
            break;
          }
          case 897: {
            UClose = input.ReadDouble();
            break;
          }
          case 925: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 949: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 969: {
            SrClsPrc = input.ReadDouble();
            break;
          }
          case 993: {
            ClosePrc = input.ReadDouble();
            break;
          }
          case 1021: {
            BidIV = input.ReadFloat();
            break;
          }
          case 1045: {
            AskIV = input.ReadFloat();
            break;
          }
          case 1069: {
            SrPrc = input.ReadFloat();
            break;
          }
          case 1093: {
            SrVol = input.ReadFloat();
            break;
          }
          case 1112: {
            SrSrc = (global::Spiderrock.Protobuf.MarkSource) input.ReadEnum();
            break;
          }
          case 1141: {
            De = input.ReadFloat();
            break;
          }
          case 1165: {
            Ga = input.ReadFloat();
            break;
          }
          case 1189: {
            Th = input.ReadFloat();
            break;
          }
          case 1213: {
            Ve = input.ReadFloat();
            break;
          }
          case 1237: {
            Vo = input.ReadFloat();
            break;
          }
          case 1261: {
            Va = input.ReadFloat();
            break;
          }
          case 1285: {
            Rh = input.ReadFloat();
            break;
          }
          case 1309: {
            Ph = input.ReadFloat();
            break;
          }
          case 1333: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 1357: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1381: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1405: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1429: {
            Rate = input.ReadFloat();
            break;
          }
          case 1453: {
            Years = input.ReadFloat();
            break;
          }
          case 1472: {
            Error = input.ReadInt32();
            break;
          }
          case 1498: {
            CorpAction = input.ReadString();
            break;
          }
          case 1522: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionOpenMark.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 825: {
            UBid = input.ReadDouble();
            break;
          }
          case 849: {
            UAsk = input.ReadDouble();
            break;
          }
          case 873: {
            USrCls = input.ReadDouble();
            break;
          }
          case 897: {
            UClose = input.ReadDouble();
            break;
          }
          case 925: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 949: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 969: {
            SrClsPrc = input.ReadDouble();
            break;
          }
          case 993: {
            ClosePrc = input.ReadDouble();
            break;
          }
          case 1021: {
            BidIV = input.ReadFloat();
            break;
          }
          case 1045: {
            AskIV = input.ReadFloat();
            break;
          }
          case 1069: {
            SrPrc = input.ReadFloat();
            break;
          }
          case 1093: {
            SrVol = input.ReadFloat();
            break;
          }
          case 1112: {
            SrSrc = (global::Spiderrock.Protobuf.MarkSource) input.ReadEnum();
            break;
          }
          case 1141: {
            De = input.ReadFloat();
            break;
          }
          case 1165: {
            Ga = input.ReadFloat();
            break;
          }
          case 1189: {
            Th = input.ReadFloat();
            break;
          }
          case 1213: {
            Ve = input.ReadFloat();
            break;
          }
          case 1237: {
            Vo = input.ReadFloat();
            break;
          }
          case 1261: {
            Va = input.ReadFloat();
            break;
          }
          case 1285: {
            Rh = input.ReadFloat();
            break;
          }
          case 1309: {
            Ph = input.ReadFloat();
            break;
          }
          case 1333: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 1357: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1381: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1405: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1429: {
            Rate = input.ReadFloat();
            break;
          }
          case 1453: {
            Years = input.ReadFloat();
            break;
          }
          case 1472: {
            Error = input.ReadInt32();
            break;
          }
          case 1498: {
            CorpAction = input.ReadString();
            break;
          }
          case 1522: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OptionOpenMark message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.OptionOpenMark.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
