// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRMLinkAnalytics/SpanRiskCalculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRMLinkAnalytics/SpanRiskCalculator.proto</summary>
  public static partial class SpanRiskCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRMLinkAnalytics/SpanRiskCalculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpanRiskCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJQcm90b2J1Zi9TUk1MaW5rQW5hbHl0aWNzL1NwYW5SaXNrQ2FsY3VsYXRv",
            "ci5wcm90bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21t",
            "b24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i4A4K",
            "ElNwYW5SaXNrQ2FsY3VsYXRvchIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNwYW5SaXNrQ2FsY3VsYXRvci5QS2V5EgsK",
            "A3ZvbBhkIAEoARIuCgd2b2xfc3JjGGcgASgOMh0uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5GaWVsZFNyYxINCgV1X3ByYxhqIAEoARIwCgl1X3ByY19zcmMYbSAB",
            "KA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkZpZWxkU3JjEg0KBXllYXJzGHAg",
            "ASgBEjAKCXllYXJzX3NyYxhzIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "RmllbGRTcmMSDAoEc2Rpdhh2IAEoARIvCghzZGl2X3NyYxh5IAEoDjIdLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRmllbGRTcmMSDAoEcmF0ZRh8IAEoARIvCghy",
            "YXRlX3NyYxh/IAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuRmllbGRTcmMS",
            "MwoHZXhfdHlwZRiCASABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLkV4ZXJj",
            "aXNlVHlwZRIzCgtleF90eXBlX3NyYxiFASABKA4yHS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkZpZWxkU3JjEhMKCmVmZl9zdHJpa2UYiAEgASgBEjYKDmVmZl9z",
            "dHJpa2Vfc3JjGIsBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuRmllbGRT",
            "cmMSEgoJc3ltX3JhdGlvGI4BIAEoARI1Cg1zeW1fcmF0aW9fc3JjGJEBIAEo",
            "DjIdLnNwaWRlcnJvY2sucHJvdG9idWYuRmllbGRTcmMSEwoKZGl2X3N0cmlu",
            "ZxiUASABKAkSLwoHZGl2X3NyYxiXASABKA4yHS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkZpZWxkU3JjEjcKCm1vZGVsX3R5cGUYmgEgASgOMiIuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5DYWxjTW9kZWxUeXBlEjYKDm1vZGVsX3R5cGVfc3JjGJ0B",
            "IAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuRmllbGRTcmMSOwoOY2FsY19w",
            "cmVjaXNpb24YoAEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5DYWxjUHJl",
            "Y2lzaW9uEhQKC3BvaW50X3ZhbHVlGKMBIAEoARI2Cg5wb2ludF9jdXJyZW5j",
            "eRj4ASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkN1cnJlbmN5EjcKD3Bv",
            "aW50X3ZhbHVlX3NyYximASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkZp",
            "ZWxkU3JjEhQKC3ByY19zcGFuX3VwGKkBIAEoAhIUCgtwcmNfc3Bhbl9kbhis",
            "ASABKAISOAoNcHJjX3NwYW5fdHlwZRivASABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlByY1NwYW5UeXBlEhEKCHZvbF9zcGFuGLIBIAEoAhI4Cg12b2xf",
            "c3Bhbl90eXBlGLUBIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuVm9sU3Bh",
            "blR5cGUSOgoOc3Bhbl9jYWxjX3R5cGUYuAEgASgOMiEuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TcGFuQ2FsY1R5cGUSOAoTaGVkZ2VfZGVsdGFfbmV1dHJhbBi7",
            "ASABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEhIKCWFkal95ZWFy",
            "cxi+ASABKAESEgoJbWF4X3llYXJzGMEBIAEoARIPCgZzcGFuMDEYxAEgASgC",
            "Eg8KBnNwYW4wMhjHASABKAISDwoGc3BhbjAzGMoBIAEoAhIPCgZzcGFuMDQY",
            "zQEgASgCEg8KBnNwYW4wNRjQASABKAISDwoGc3BhbjA2GNMBIAEoAhIPCgZz",
            "cGFuMDcY1gEgASgCEg8KBnNwYW4wOBjZASABKAISDwoGc3BhbjA5GNwBIAEo",
            "AhIPCgZzcGFuMTAY3wEgASgCEg8KBnNwYW4xMRjiASABKAISDwoGc3BhbjEy",
            "GOUBIAEoAhIPCgZzcGFuMTMY6AEgASgCEg8KBnNwYW4xNBjrASABKAISDwoG",
            "c3BhbjE1GO4BIAEoAhIPCgZzcGFuMTYY8QEgASgCEg4KBWVycm9yGPQBIAEo",
            "CRIuCgl0aW1lc3RhbXAY9wEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBp+CgRQS2V5Ei8KB3NlY19rZXkYCiABKAsyHi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk9wdGlvbktleRIyCghzZWNfdHlwZRgLIAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3BkcktleVR5cGUSEQoJdXNlcl9uYW1lGAwgASgJYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpanRiskCalculator), global::Spiderrock.Protobuf.SpanRiskCalculator.Parser, new[]{ "Meta", "Pkey", "Vol", "VolSrc", "UPrc", "UPrcSrc", "Years", "YearsSrc", "Sdiv", "SdivSrc", "Rate", "RateSrc", "ExType", "ExTypeSrc", "EffStrike", "EffStrikeSrc", "SymRatio", "SymRatioSrc", "DivString", "DivSrc", "ModelType", "ModelTypeSrc", "CalcPrecision", "PointValue", "PointCurrency", "PointValueSrc", "PrcSpanUp", "PrcSpanDn", "PrcSpanType", "VolSpan", "VolSpanType", "SpanCalcType", "HedgeDeltaNeutral", "AdjYears", "MaxYears", "Span01", "Span02", "Span03", "Span04", "Span05", "Span06", "Span07", "Span08", "Span09", "Span10", "Span11", "Span12", "Span13", "Span14", "Span15", "Span16", "Error", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey), global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey.Parser, new[]{ "SecKey", "SecType", "UserName" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///This table allows custom span risk calculations based on either user or SR supplied input values.
  /// </summary>
  public sealed partial class SpanRiskCalculator : pb::IMessage<SpanRiskCalculator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpanRiskCalculator> _parser = new pb::MessageParser<SpanRiskCalculator>(() => new SpanRiskCalculator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpanRiskCalculator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpanRiskCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpanRiskCalculator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpanRiskCalculator(SpanRiskCalculator other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      vol_ = other.vol_;
      volSrc_ = other.volSrc_;
      uPrc_ = other.uPrc_;
      uPrcSrc_ = other.uPrcSrc_;
      years_ = other.years_;
      yearsSrc_ = other.yearsSrc_;
      sdiv_ = other.sdiv_;
      sdivSrc_ = other.sdivSrc_;
      rate_ = other.rate_;
      rateSrc_ = other.rateSrc_;
      exType_ = other.exType_;
      exTypeSrc_ = other.exTypeSrc_;
      effStrike_ = other.effStrike_;
      effStrikeSrc_ = other.effStrikeSrc_;
      symRatio_ = other.symRatio_;
      symRatioSrc_ = other.symRatioSrc_;
      divString_ = other.divString_;
      divSrc_ = other.divSrc_;
      modelType_ = other.modelType_;
      modelTypeSrc_ = other.modelTypeSrc_;
      calcPrecision_ = other.calcPrecision_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      pointValueSrc_ = other.pointValueSrc_;
      prcSpanUp_ = other.prcSpanUp_;
      prcSpanDn_ = other.prcSpanDn_;
      prcSpanType_ = other.prcSpanType_;
      volSpan_ = other.volSpan_;
      volSpanType_ = other.volSpanType_;
      spanCalcType_ = other.spanCalcType_;
      hedgeDeltaNeutral_ = other.hedgeDeltaNeutral_;
      adjYears_ = other.adjYears_;
      maxYears_ = other.maxYears_;
      span01_ = other.span01_;
      span02_ = other.span02_;
      span03_ = other.span03_;
      span04_ = other.span04_;
      span05_ = other.span05_;
      span06_ = other.span06_;
      span07_ = other.span07_;
      span08_ = other.span08_;
      span09_ = other.span09_;
      span10_ = other.span10_;
      span11_ = other.span11_;
      span12_ = other.span12_;
      span13_ = other.span13_;
      span14_ = other.span14_;
      span15_ = other.span15_;
      span16_ = other.span16_;
      error_ = other.error_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpanRiskCalculator Clone() {
      return new SpanRiskCalculator(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "vol" field.</summary>
    public const int VolFieldNumber = 100;
    private double vol_;
    /// <summary>
    /// volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vol {
      get { return vol_; }
      set {
        vol_ = value;
      }
    }

    /// <summary>Field number for the "vol_src" field.</summary>
    public const int VolSrcFieldNumber = 103;
    private global::Spiderrock.Protobuf.FieldSrc volSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc VolSrc {
      get { return volSrc_; }
      set {
        volSrc_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 106;
    private double uPrc_;
    /// <summary>
    /// underlying price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_src" field.</summary>
    public const int UPrcSrcFieldNumber = 109;
    private global::Spiderrock.Protobuf.FieldSrc uPrcSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc UPrcSrc {
      get { return uPrcSrc_; }
      set {
        uPrcSrc_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 112;
    private double years_;
    /// <summary>
    /// years-to-expiration (default uses SR volatility time value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "years_src" field.</summary>
    public const int YearsSrcFieldNumber = 115;
    private global::Spiderrock.Protobuf.FieldSrc yearsSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc YearsSrc {
      get { return yearsSrc_; }
      set {
        yearsSrc_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 118;
    private double sdiv_;
    /// <summary>
    /// continuous stock dividend using for pricing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_src" field.</summary>
    public const int SdivSrcFieldNumber = 121;
    private global::Spiderrock.Protobuf.FieldSrc sdivSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc SdivSrc {
      get { return sdivSrc_; }
      set {
        sdivSrc_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 124;
    private double rate_;
    /// <summary>
    /// discount rate used for pricing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "rate_src" field.</summary>
    public const int RateSrcFieldNumber = 127;
    private global::Spiderrock.Protobuf.FieldSrc rateSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc RateSrc {
      get { return rateSrc_; }
      set {
        rateSrc_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 130;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// exercise type of the option (American or European)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "ex_type_src" field.</summary>
    public const int ExTypeSrcFieldNumber = 133;
    private global::Spiderrock.Protobuf.FieldSrc exTypeSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc ExTypeSrc {
      get { return exTypeSrc_; }
      set {
        exTypeSrc_ = value;
      }
    }

    /// <summary>Field number for the "eff_strike" field.</summary>
    public const int EffStrikeFieldNumber = 136;
    private double effStrike_;
    /// <summary>
    /// effective strike used for pricing (default is okey.Strike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStrike {
      get { return effStrike_; }
      set {
        effStrike_ = value;
      }
    }

    /// <summary>Field number for the "eff_strike_src" field.</summary>
    public const int EffStrikeSrcFieldNumber = 139;
    private global::Spiderrock.Protobuf.FieldSrc effStrikeSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc EffStrikeSrc {
      get { return effStrikeSrc_; }
      set {
        effStrikeSrc_ = value;
      }
    }

    /// <summary>Field number for the "sym_ratio" field.</summary>
    public const int SymRatioFieldNumber = 142;
    private double symRatio_;
    /// <summary>
    /// underlying symbol ratio (for non-standard options); discrete dividend will be scaled by this factor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SymRatio {
      get { return symRatio_; }
      set {
        symRatio_ = value;
      }
    }

    /// <summary>Field number for the "sym_ratio_src" field.</summary>
    public const int SymRatioSrcFieldNumber = 145;
    private global::Spiderrock.Protobuf.FieldSrc symRatioSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc SymRatioSrc {
      get { return symRatioSrc_; }
      set {
        symRatioSrc_ = value;
      }
    }

    /// <summary>Field number for the "div_string" field.</summary>
    public const int DivStringFieldNumber = 148;
    private string divString_ = "";
    /// <summary>
    /// discrete dividend string  [ yearsToExpiry, years1:amt1, years2:amt2, ...] or [ -1, date1:amt1, date2:amt2, ... ]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DivString {
      get { return divString_; }
      set {
        divString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "div_src" field.</summary>
    public const int DivSrcFieldNumber = 151;
    private global::Spiderrock.Protobuf.FieldSrc divSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc DivSrc {
      get { return divSrc_; }
      set {
        divSrc_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 154;
    private global::Spiderrock.Protobuf.CalcModelType modelType_ = global::Spiderrock.Protobuf.CalcModelType.Unspecified;
    /// <summary>
    /// LogNormalExact, LogNormalApprox, NormalExact, NormalApprox
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "model_type_src" field.</summary>
    public const int ModelTypeSrcFieldNumber = 157;
    private global::Spiderrock.Protobuf.FieldSrc modelTypeSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc ModelTypeSrc {
      get { return modelTypeSrc_; }
      set {
        modelTypeSrc_ = value;
      }
    }

    /// <summary>Field number for the "calc_precision" field.</summary>
    public const int CalcPrecisionFieldNumber = 160;
    private global::Spiderrock.Protobuf.CalcPrecision calcPrecision_ = global::Spiderrock.Protobuf.CalcPrecision.Unspecified;
    /// <summary>
    /// numerical precision (# of steps) if a numerical method is used;  [more steps will be slower to calculate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcPrecision CalcPrecision {
      get { return calcPrecision_; }
      set {
        calcPrecision_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 163;
    private double pointValue_;
    /// <summary>
    /// $ value of a point in the underlying product
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 248;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "point_value_src" field.</summary>
    public const int PointValueSrcFieldNumber = 166;
    private global::Spiderrock.Protobuf.FieldSrc pointValueSrc_ = global::Spiderrock.Protobuf.FieldSrc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FieldSrc PointValueSrc {
      get { return pointValueSrc_; }
      set {
        pointValueSrc_ = value;
      }
    }

    /// <summary>Field number for the "prc_span_up" field.</summary>
    public const int PrcSpanUpFieldNumber = 169;
    private float prcSpanUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcSpanUp {
      get { return prcSpanUp_; }
      set {
        prcSpanUp_ = value;
      }
    }

    /// <summary>Field number for the "prc_span_dn" field.</summary>
    public const int PrcSpanDnFieldNumber = 172;
    private float prcSpanDn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcSpanDn {
      get { return prcSpanDn_; }
      set {
        prcSpanDn_ = value;
      }
    }

    /// <summary>Field number for the "prc_span_type" field.</summary>
    public const int PrcSpanTypeFieldNumber = 175;
    private global::Spiderrock.Protobuf.PrcSpanType prcSpanType_ = global::Spiderrock.Protobuf.PrcSpanType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrcSpanType PrcSpanType {
      get { return prcSpanType_; }
      set {
        prcSpanType_ = value;
      }
    }

    /// <summary>Field number for the "vol_span" field.</summary>
    public const int VolSpanFieldNumber = 178;
    private float volSpan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolSpan {
      get { return volSpan_; }
      set {
        volSpan_ = value;
      }
    }

    /// <summary>Field number for the "vol_span_type" field.</summary>
    public const int VolSpanTypeFieldNumber = 181;
    private global::Spiderrock.Protobuf.VolSpanType volSpanType_ = global::Spiderrock.Protobuf.VolSpanType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.VolSpanType VolSpanType {
      get { return volSpanType_; }
      set {
        volSpanType_ = value;
      }
    }

    /// <summary>Field number for the "span_calc_type" field.</summary>
    public const int SpanCalcTypeFieldNumber = 184;
    private global::Spiderrock.Protobuf.SpanCalcType spanCalcType_ = global::Spiderrock.Protobuf.SpanCalcType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpanCalcType SpanCalcType {
      get { return spanCalcType_; }
      set {
        spanCalcType_ = value;
      }
    }

    /// <summary>Field number for the "hedge_delta_neutral" field.</summary>
    public const int HedgeDeltaNeutralFieldNumber = 187;
    private global::Spiderrock.Protobuf.YesNo hedgeDeltaNeutral_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// all option will be assumed hedged delta neutral, stock and futures will not have slide values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HedgeDeltaNeutral {
      get { return hedgeDeltaNeutral_; }
      set {
        hedgeDeltaNeutral_ = value;
      }
    }

    /// <summary>Field number for the "adj_years" field.</summary>
    public const int AdjYearsFieldNumber = 190;
    private double adjYears_;
    /// <summary>
    /// year adjustment: effYears = years + adjYears (-1 = no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AdjYears {
      get { return adjYears_; }
      set {
        adjYears_ = value;
      }
    }

    /// <summary>Field number for the "max_years" field.</summary>
    public const int MaxYearsFieldNumber = 193;
    private double maxYears_;
    /// <summary>
    /// upper bound for years: effYears = MIN(maxYears, effYears) (-1 = no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxYears {
      get { return maxYears_; }
      set {
        maxYears_ = value;
      }
    }

    /// <summary>Field number for the "span01" field.</summary>
    public const int Span01FieldNumber = 196;
    private float span01_;
    /// <summary>
    /// span1: uPrc=unch, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span01 {
      get { return span01_; }
      set {
        span01_ = value;
      }
    }

    /// <summary>Field number for the "span02" field.</summary>
    public const int Span02FieldNumber = 199;
    private float span02_;
    /// <summary>
    /// span2: uPrc=unch, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span02 {
      get { return span02_; }
      set {
        span02_ = value;
      }
    }

    /// <summary>Field number for the "span03" field.</summary>
    public const int Span03FieldNumber = 202;
    private float span03_;
    /// <summary>
    /// span3: uPrc=+33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span03 {
      get { return span03_; }
      set {
        span03_ = value;
      }
    }

    /// <summary>Field number for the "span04" field.</summary>
    public const int Span04FieldNumber = 205;
    private float span04_;
    /// <summary>
    /// span4: uPrc=+33%, vol=dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span04 {
      get { return span04_; }
      set {
        span04_ = value;
      }
    }

    /// <summary>Field number for the "span05" field.</summary>
    public const int Span05FieldNumber = 208;
    private float span05_;
    /// <summary>
    /// span5: uPrc=-33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span05 {
      get { return span05_; }
      set {
        span05_ = value;
      }
    }

    /// <summary>Field number for the "span06" field.</summary>
    public const int Span06FieldNumber = 211;
    private float span06_;
    /// <summary>
    /// span6: uPrc=-33%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span06 {
      get { return span06_; }
      set {
        span06_ = value;
      }
    }

    /// <summary>Field number for the "span07" field.</summary>
    public const int Span07FieldNumber = 214;
    private float span07_;
    /// <summary>
    /// span7: uPrc=+67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span07 {
      get { return span07_; }
      set {
        span07_ = value;
      }
    }

    /// <summary>Field number for the "span08" field.</summary>
    public const int Span08FieldNumber = 217;
    private float span08_;
    /// <summary>
    /// span8: uPrc=+67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span08 {
      get { return span08_; }
      set {
        span08_ = value;
      }
    }

    /// <summary>Field number for the "span09" field.</summary>
    public const int Span09FieldNumber = 220;
    private float span09_;
    /// <summary>
    /// span9: uPrc=-67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span09 {
      get { return span09_; }
      set {
        span09_ = value;
      }
    }

    /// <summary>Field number for the "span10" field.</summary>
    public const int Span10FieldNumber = 223;
    private float span10_;
    /// <summary>
    /// span10: uPrc=-67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span10 {
      get { return span10_; }
      set {
        span10_ = value;
      }
    }

    /// <summary>Field number for the "span11" field.</summary>
    public const int Span11FieldNumber = 226;
    private float span11_;
    /// <summary>
    /// span11: uPrc=+100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span11 {
      get { return span11_; }
      set {
        span11_ = value;
      }
    }

    /// <summary>Field number for the "span12" field.</summary>
    public const int Span12FieldNumber = 229;
    private float span12_;
    /// <summary>
    /// span12: uPrc=+100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span12 {
      get { return span12_; }
      set {
        span12_ = value;
      }
    }

    /// <summary>Field number for the "span13" field.</summary>
    public const int Span13FieldNumber = 232;
    private float span13_;
    /// <summary>
    /// span13: uPrc=-100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span13 {
      get { return span13_; }
      set {
        span13_ = value;
      }
    }

    /// <summary>Field number for the "span14" field.</summary>
    public const int Span14FieldNumber = 235;
    private float span14_;
    /// <summary>
    /// span14: uPrc=-100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span14 {
      get { return span14_; }
      set {
        span14_ = value;
      }
    }

    /// <summary>Field number for the "span15" field.</summary>
    public const int Span15FieldNumber = 238;
    private float span15_;
    /// <summary>
    /// span15: uPrc=+300%; price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span15 {
      get { return span15_; }
      set {
        span15_ = value;
      }
    }

    /// <summary>Field number for the "span16" field.</summary>
    public const int Span16FieldNumber = 241;
    private float span16_;
    /// <summary>
    /// span16: uPrc=-300%, price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span16 {
      get { return span16_; }
      set {
        span16_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 244;
    private string error_ = "";
    /// <summary>
    /// calculation error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 247;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpanRiskCalculator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpanRiskCalculator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vol, other.Vol)) return false;
      if (VolSrc != other.VolSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (UPrcSrc != other.UPrcSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Years, other.Years)) return false;
      if (YearsSrc != other.YearsSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (SdivSrc != other.SdivSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (RateSrc != other.RateSrc) return false;
      if (ExType != other.ExType) return false;
      if (ExTypeSrc != other.ExTypeSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStrike, other.EffStrike)) return false;
      if (EffStrikeSrc != other.EffStrikeSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SymRatio, other.SymRatio)) return false;
      if (SymRatioSrc != other.SymRatioSrc) return false;
      if (DivString != other.DivString) return false;
      if (DivSrc != other.DivSrc) return false;
      if (ModelType != other.ModelType) return false;
      if (ModelTypeSrc != other.ModelTypeSrc) return false;
      if (CalcPrecision != other.CalcPrecision) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (PointValueSrc != other.PointValueSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcSpanUp, other.PrcSpanUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcSpanDn, other.PrcSpanDn)) return false;
      if (PrcSpanType != other.PrcSpanType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolSpan, other.VolSpan)) return false;
      if (VolSpanType != other.VolSpanType) return false;
      if (SpanCalcType != other.SpanCalcType) return false;
      if (HedgeDeltaNeutral != other.HedgeDeltaNeutral) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjYears, other.AdjYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxYears, other.MaxYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span01, other.Span01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span02, other.Span02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span03, other.Span03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span04, other.Span04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span05, other.Span05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span06, other.Span06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span07, other.Span07)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span08, other.Span08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span09, other.Span09)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span10, other.Span10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span11, other.Span11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span12, other.Span12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span13, other.Span13)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span14, other.Span14)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span15, other.Span15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span16, other.Span16)) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (Vol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vol);
      if (VolSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= VolSrc.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UPrcSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= UPrcSrc.GetHashCode();
      if (Years != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Years);
      if (YearsSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= YearsSrc.GetHashCode();
      if (Sdiv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sdiv);
      if (SdivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= SdivSrc.GetHashCode();
      if (Rate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rate);
      if (RateSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= RateSrc.GetHashCode();
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (ExTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= ExTypeSrc.GetHashCode();
      if (EffStrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStrike);
      if (EffStrikeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= EffStrikeSrc.GetHashCode();
      if (SymRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SymRatio);
      if (SymRatioSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= SymRatioSrc.GetHashCode();
      if (DivString.Length != 0) hash ^= DivString.GetHashCode();
      if (DivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= DivSrc.GetHashCode();
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) hash ^= ModelType.GetHashCode();
      if (ModelTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= ModelTypeSrc.GetHashCode();
      if (CalcPrecision != global::Spiderrock.Protobuf.CalcPrecision.Unspecified) hash ^= CalcPrecision.GetHashCode();
      if (PointValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (PointValueSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) hash ^= PointValueSrc.GetHashCode();
      if (PrcSpanUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcSpanUp);
      if (PrcSpanDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcSpanDn);
      if (PrcSpanType != global::Spiderrock.Protobuf.PrcSpanType.Unspecified) hash ^= PrcSpanType.GetHashCode();
      if (VolSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolSpan);
      if (VolSpanType != global::Spiderrock.Protobuf.VolSpanType.Unspecified) hash ^= VolSpanType.GetHashCode();
      if (SpanCalcType != global::Spiderrock.Protobuf.SpanCalcType.Unspecified) hash ^= SpanCalcType.GetHashCode();
      if (HedgeDeltaNeutral != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HedgeDeltaNeutral.GetHashCode();
      if (AdjYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjYears);
      if (MaxYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxYears);
      if (Span01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span01);
      if (Span02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span02);
      if (Span03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span03);
      if (Span04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span04);
      if (Span05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span05);
      if (Span06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span06);
      if (Span07 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span07);
      if (Span08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span08);
      if (Span09 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span09);
      if (Span10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span10);
      if (Span11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span11);
      if (Span12 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span12);
      if (Span13 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span13);
      if (Span14 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span14);
      if (Span15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span15);
      if (Span16 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span16);
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(Vol);
      }
      if (VolSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) VolSrc);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UPrc);
      }
      if (UPrcSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcSrc);
      }
      if (Years != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(Years);
      }
      if (YearsSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) YearsSrc);
      }
      if (Sdiv != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(Sdiv);
      }
      if (SdivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) SdivSrc);
      }
      if (Rate != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(Rate);
      }
      if (RateSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) RateSrc);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) ExType);
      }
      if (ExTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) ExTypeSrc);
      }
      if (EffStrike != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(EffStrike);
      }
      if (EffStrikeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) EffStrikeSrc);
      }
      if (SymRatio != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(SymRatio);
      }
      if (SymRatioSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SymRatioSrc);
      }
      if (DivString.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(DivString);
      }
      if (DivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) DivSrc);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) ModelType);
      }
      if (ModelTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) ModelTypeSrc);
      }
      if (CalcPrecision != global::Spiderrock.Protobuf.CalcPrecision.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) CalcPrecision);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(PointValue);
      }
      if (PointValueSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) PointValueSrc);
      }
      if (PrcSpanUp != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(PrcSpanUp);
      }
      if (PrcSpanDn != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(PrcSpanDn);
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.PrcSpanType.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) PrcSpanType);
      }
      if (VolSpan != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(VolSpan);
      }
      if (VolSpanType != global::Spiderrock.Protobuf.VolSpanType.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) VolSpanType);
      }
      if (SpanCalcType != global::Spiderrock.Protobuf.SpanCalcType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SpanCalcType);
      }
      if (HedgeDeltaNeutral != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) HedgeDeltaNeutral);
      }
      if (AdjYears != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(AdjYears);
      }
      if (MaxYears != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(MaxYears);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(Span16);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(Error);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(Timestamp);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(192, 15);
        output.WriteEnum((int) PointCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(Vol);
      }
      if (VolSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) VolSrc);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UPrc);
      }
      if (UPrcSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcSrc);
      }
      if (Years != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(Years);
      }
      if (YearsSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) YearsSrc);
      }
      if (Sdiv != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(Sdiv);
      }
      if (SdivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) SdivSrc);
      }
      if (Rate != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(Rate);
      }
      if (RateSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) RateSrc);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) ExType);
      }
      if (ExTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) ExTypeSrc);
      }
      if (EffStrike != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(EffStrike);
      }
      if (EffStrikeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) EffStrikeSrc);
      }
      if (SymRatio != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(SymRatio);
      }
      if (SymRatioSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SymRatioSrc);
      }
      if (DivString.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(DivString);
      }
      if (DivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) DivSrc);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) ModelType);
      }
      if (ModelTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) ModelTypeSrc);
      }
      if (CalcPrecision != global::Spiderrock.Protobuf.CalcPrecision.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) CalcPrecision);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(PointValue);
      }
      if (PointValueSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) PointValueSrc);
      }
      if (PrcSpanUp != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(PrcSpanUp);
      }
      if (PrcSpanDn != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(PrcSpanDn);
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.PrcSpanType.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) PrcSpanType);
      }
      if (VolSpan != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(VolSpan);
      }
      if (VolSpanType != global::Spiderrock.Protobuf.VolSpanType.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) VolSpanType);
      }
      if (SpanCalcType != global::Spiderrock.Protobuf.SpanCalcType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SpanCalcType);
      }
      if (HedgeDeltaNeutral != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) HedgeDeltaNeutral);
      }
      if (AdjYears != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(AdjYears);
      }
      if (MaxYears != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(MaxYears);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(Span16);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(Error);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(Timestamp);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(192, 15);
        output.WriteEnum((int) PointCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (Vol != 0D) {
        size += 2 + 8;
      }
      if (VolSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VolSrc);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UPrcSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcSrc);
      }
      if (Years != 0D) {
        size += 2 + 8;
      }
      if (YearsSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) YearsSrc);
      }
      if (Sdiv != 0D) {
        size += 2 + 8;
      }
      if (SdivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SdivSrc);
      }
      if (Rate != 0D) {
        size += 2 + 8;
      }
      if (RateSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RateSrc);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (ExTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExTypeSrc);
      }
      if (EffStrike != 0D) {
        size += 2 + 8;
      }
      if (EffStrikeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EffStrikeSrc);
      }
      if (SymRatio != 0D) {
        size += 2 + 8;
      }
      if (SymRatioSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymRatioSrc);
      }
      if (DivString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DivString);
      }
      if (DivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DivSrc);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (ModelTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelTypeSrc);
      }
      if (CalcPrecision != global::Spiderrock.Protobuf.CalcPrecision.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CalcPrecision);
      }
      if (PointValue != 0D) {
        size += 2 + 8;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (PointValueSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointValueSrc);
      }
      if (PrcSpanUp != 0F) {
        size += 2 + 4;
      }
      if (PrcSpanDn != 0F) {
        size += 2 + 4;
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.PrcSpanType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrcSpanType);
      }
      if (VolSpan != 0F) {
        size += 2 + 4;
      }
      if (VolSpanType != global::Spiderrock.Protobuf.VolSpanType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VolSpanType);
      }
      if (SpanCalcType != global::Spiderrock.Protobuf.SpanCalcType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpanCalcType);
      }
      if (HedgeDeltaNeutral != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeDeltaNeutral);
      }
      if (AdjYears != 0D) {
        size += 2 + 8;
      }
      if (MaxYears != 0D) {
        size += 2 + 8;
      }
      if (Span01 != 0F) {
        size += 2 + 4;
      }
      if (Span02 != 0F) {
        size += 2 + 4;
      }
      if (Span03 != 0F) {
        size += 2 + 4;
      }
      if (Span04 != 0F) {
        size += 2 + 4;
      }
      if (Span05 != 0F) {
        size += 2 + 4;
      }
      if (Span06 != 0F) {
        size += 2 + 4;
      }
      if (Span07 != 0F) {
        size += 2 + 4;
      }
      if (Span08 != 0F) {
        size += 2 + 4;
      }
      if (Span09 != 0F) {
        size += 2 + 4;
      }
      if (Span10 != 0F) {
        size += 2 + 4;
      }
      if (Span11 != 0F) {
        size += 2 + 4;
      }
      if (Span12 != 0F) {
        size += 2 + 4;
      }
      if (Span13 != 0F) {
        size += 2 + 4;
      }
      if (Span14 != 0F) {
        size += 2 + 4;
      }
      if (Span15 != 0F) {
        size += 2 + 4;
      }
      if (Span16 != 0F) {
        size += 2 + 4;
      }
      if (Error.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpanRiskCalculator other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.Vol != 0D) {
        Vol = other.Vol;
      }
      if (other.VolSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        VolSrc = other.VolSrc;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UPrcSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        UPrcSrc = other.UPrcSrc;
      }
      if (other.Years != 0D) {
        Years = other.Years;
      }
      if (other.YearsSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        YearsSrc = other.YearsSrc;
      }
      if (other.Sdiv != 0D) {
        Sdiv = other.Sdiv;
      }
      if (other.SdivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        SdivSrc = other.SdivSrc;
      }
      if (other.Rate != 0D) {
        Rate = other.Rate;
      }
      if (other.RateSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        RateSrc = other.RateSrc;
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.ExTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        ExTypeSrc = other.ExTypeSrc;
      }
      if (other.EffStrike != 0D) {
        EffStrike = other.EffStrike;
      }
      if (other.EffStrikeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        EffStrikeSrc = other.EffStrikeSrc;
      }
      if (other.SymRatio != 0D) {
        SymRatio = other.SymRatio;
      }
      if (other.SymRatioSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        SymRatioSrc = other.SymRatioSrc;
      }
      if (other.DivString.Length != 0) {
        DivString = other.DivString;
      }
      if (other.DivSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        DivSrc = other.DivSrc;
      }
      if (other.ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      if (other.ModelTypeSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        ModelTypeSrc = other.ModelTypeSrc;
      }
      if (other.CalcPrecision != global::Spiderrock.Protobuf.CalcPrecision.Unspecified) {
        CalcPrecision = other.CalcPrecision;
      }
      if (other.PointValue != 0D) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.PointValueSrc != global::Spiderrock.Protobuf.FieldSrc.Unspecified) {
        PointValueSrc = other.PointValueSrc;
      }
      if (other.PrcSpanUp != 0F) {
        PrcSpanUp = other.PrcSpanUp;
      }
      if (other.PrcSpanDn != 0F) {
        PrcSpanDn = other.PrcSpanDn;
      }
      if (other.PrcSpanType != global::Spiderrock.Protobuf.PrcSpanType.Unspecified) {
        PrcSpanType = other.PrcSpanType;
      }
      if (other.VolSpan != 0F) {
        VolSpan = other.VolSpan;
      }
      if (other.VolSpanType != global::Spiderrock.Protobuf.VolSpanType.Unspecified) {
        VolSpanType = other.VolSpanType;
      }
      if (other.SpanCalcType != global::Spiderrock.Protobuf.SpanCalcType.Unspecified) {
        SpanCalcType = other.SpanCalcType;
      }
      if (other.HedgeDeltaNeutral != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HedgeDeltaNeutral = other.HedgeDeltaNeutral;
      }
      if (other.AdjYears != 0D) {
        AdjYears = other.AdjYears;
      }
      if (other.MaxYears != 0D) {
        MaxYears = other.MaxYears;
      }
      if (other.Span01 != 0F) {
        Span01 = other.Span01;
      }
      if (other.Span02 != 0F) {
        Span02 = other.Span02;
      }
      if (other.Span03 != 0F) {
        Span03 = other.Span03;
      }
      if (other.Span04 != 0F) {
        Span04 = other.Span04;
      }
      if (other.Span05 != 0F) {
        Span05 = other.Span05;
      }
      if (other.Span06 != 0F) {
        Span06 = other.Span06;
      }
      if (other.Span07 != 0F) {
        Span07 = other.Span07;
      }
      if (other.Span08 != 0F) {
        Span08 = other.Span08;
      }
      if (other.Span09 != 0F) {
        Span09 = other.Span09;
      }
      if (other.Span10 != 0F) {
        Span10 = other.Span10;
      }
      if (other.Span11 != 0F) {
        Span11 = other.Span11;
      }
      if (other.Span12 != 0F) {
        Span12 = other.Span12;
      }
      if (other.Span13 != 0F) {
        Span13 = other.Span13;
      }
      if (other.Span14 != 0F) {
        Span14 = other.Span14;
      }
      if (other.Span15 != 0F) {
        Span15 = other.Span15;
      }
      if (other.Span16 != 0F) {
        Span16 = other.Span16;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            Vol = input.ReadDouble();
            break;
          }
          case 824: {
            VolSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 849: {
            UPrc = input.ReadDouble();
            break;
          }
          case 872: {
            UPrcSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 897: {
            Years = input.ReadDouble();
            break;
          }
          case 920: {
            YearsSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 945: {
            Sdiv = input.ReadDouble();
            break;
          }
          case 968: {
            SdivSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 993: {
            Rate = input.ReadDouble();
            break;
          }
          case 1016: {
            RateSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1040: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1064: {
            ExTypeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1089: {
            EffStrike = input.ReadDouble();
            break;
          }
          case 1112: {
            EffStrikeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1137: {
            SymRatio = input.ReadDouble();
            break;
          }
          case 1160: {
            SymRatioSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1186: {
            DivString = input.ReadString();
            break;
          }
          case 1208: {
            DivSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1232: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1256: {
            ModelTypeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1280: {
            CalcPrecision = (global::Spiderrock.Protobuf.CalcPrecision) input.ReadEnum();
            break;
          }
          case 1305: {
            PointValue = input.ReadDouble();
            break;
          }
          case 1328: {
            PointValueSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1357: {
            PrcSpanUp = input.ReadFloat();
            break;
          }
          case 1381: {
            PrcSpanDn = input.ReadFloat();
            break;
          }
          case 1400: {
            PrcSpanType = (global::Spiderrock.Protobuf.PrcSpanType) input.ReadEnum();
            break;
          }
          case 1429: {
            VolSpan = input.ReadFloat();
            break;
          }
          case 1448: {
            VolSpanType = (global::Spiderrock.Protobuf.VolSpanType) input.ReadEnum();
            break;
          }
          case 1472: {
            SpanCalcType = (global::Spiderrock.Protobuf.SpanCalcType) input.ReadEnum();
            break;
          }
          case 1496: {
            HedgeDeltaNeutral = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1521: {
            AdjYears = input.ReadDouble();
            break;
          }
          case 1545: {
            MaxYears = input.ReadDouble();
            break;
          }
          case 1573: {
            Span01 = input.ReadFloat();
            break;
          }
          case 1597: {
            Span02 = input.ReadFloat();
            break;
          }
          case 1621: {
            Span03 = input.ReadFloat();
            break;
          }
          case 1645: {
            Span04 = input.ReadFloat();
            break;
          }
          case 1669: {
            Span05 = input.ReadFloat();
            break;
          }
          case 1693: {
            Span06 = input.ReadFloat();
            break;
          }
          case 1717: {
            Span07 = input.ReadFloat();
            break;
          }
          case 1741: {
            Span08 = input.ReadFloat();
            break;
          }
          case 1765: {
            Span09 = input.ReadFloat();
            break;
          }
          case 1789: {
            Span10 = input.ReadFloat();
            break;
          }
          case 1813: {
            Span11 = input.ReadFloat();
            break;
          }
          case 1837: {
            Span12 = input.ReadFloat();
            break;
          }
          case 1861: {
            Span13 = input.ReadFloat();
            break;
          }
          case 1885: {
            Span14 = input.ReadFloat();
            break;
          }
          case 1909: {
            Span15 = input.ReadFloat();
            break;
          }
          case 1933: {
            Span16 = input.ReadFloat();
            break;
          }
          case 1954: {
            Error = input.ReadString();
            break;
          }
          case 1978: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1984: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpanRiskCalculator.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            Vol = input.ReadDouble();
            break;
          }
          case 824: {
            VolSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 849: {
            UPrc = input.ReadDouble();
            break;
          }
          case 872: {
            UPrcSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 897: {
            Years = input.ReadDouble();
            break;
          }
          case 920: {
            YearsSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 945: {
            Sdiv = input.ReadDouble();
            break;
          }
          case 968: {
            SdivSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 993: {
            Rate = input.ReadDouble();
            break;
          }
          case 1016: {
            RateSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1040: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1064: {
            ExTypeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1089: {
            EffStrike = input.ReadDouble();
            break;
          }
          case 1112: {
            EffStrikeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1137: {
            SymRatio = input.ReadDouble();
            break;
          }
          case 1160: {
            SymRatioSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1186: {
            DivString = input.ReadString();
            break;
          }
          case 1208: {
            DivSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1232: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1256: {
            ModelTypeSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1280: {
            CalcPrecision = (global::Spiderrock.Protobuf.CalcPrecision) input.ReadEnum();
            break;
          }
          case 1305: {
            PointValue = input.ReadDouble();
            break;
          }
          case 1328: {
            PointValueSrc = (global::Spiderrock.Protobuf.FieldSrc) input.ReadEnum();
            break;
          }
          case 1357: {
            PrcSpanUp = input.ReadFloat();
            break;
          }
          case 1381: {
            PrcSpanDn = input.ReadFloat();
            break;
          }
          case 1400: {
            PrcSpanType = (global::Spiderrock.Protobuf.PrcSpanType) input.ReadEnum();
            break;
          }
          case 1429: {
            VolSpan = input.ReadFloat();
            break;
          }
          case 1448: {
            VolSpanType = (global::Spiderrock.Protobuf.VolSpanType) input.ReadEnum();
            break;
          }
          case 1472: {
            SpanCalcType = (global::Spiderrock.Protobuf.SpanCalcType) input.ReadEnum();
            break;
          }
          case 1496: {
            HedgeDeltaNeutral = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1521: {
            AdjYears = input.ReadDouble();
            break;
          }
          case 1545: {
            MaxYears = input.ReadDouble();
            break;
          }
          case 1573: {
            Span01 = input.ReadFloat();
            break;
          }
          case 1597: {
            Span02 = input.ReadFloat();
            break;
          }
          case 1621: {
            Span03 = input.ReadFloat();
            break;
          }
          case 1645: {
            Span04 = input.ReadFloat();
            break;
          }
          case 1669: {
            Span05 = input.ReadFloat();
            break;
          }
          case 1693: {
            Span06 = input.ReadFloat();
            break;
          }
          case 1717: {
            Span07 = input.ReadFloat();
            break;
          }
          case 1741: {
            Span08 = input.ReadFloat();
            break;
          }
          case 1765: {
            Span09 = input.ReadFloat();
            break;
          }
          case 1789: {
            Span10 = input.ReadFloat();
            break;
          }
          case 1813: {
            Span11 = input.ReadFloat();
            break;
          }
          case 1837: {
            Span12 = input.ReadFloat();
            break;
          }
          case 1861: {
            Span13 = input.ReadFloat();
            break;
          }
          case 1885: {
            Span14 = input.ReadFloat();
            break;
          }
          case 1909: {
            Span15 = input.ReadFloat();
            break;
          }
          case 1933: {
            Span16 = input.ReadFloat();
            break;
          }
          case 1954: {
            Error = input.ReadString();
            break;
          }
          case 1978: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1984: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpanRiskCalculator message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpanRiskCalculator.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          userName_ = other.userName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "user_name" field.</summary>
        public const int UserNameFieldNumber = 12;
        private string userName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UserName {
          get { return userName_; }
          set {
            userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (UserName != other.UserName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (UserName.Length != 0) hash ^= UserName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (UserName.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(UserName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (UserName.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(UserName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (UserName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.UserName.Length != 0) {
            UserName = other.UserName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 98: {
                UserName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 98: {
                UserName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
