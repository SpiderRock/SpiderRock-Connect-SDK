// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRMLinkAnalytics/LiveSurfacePerf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRMLinkAnalytics/LiveSurfacePerf.proto</summary>
  public static partial class LiveSurfacePerfReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRMLinkAnalytics/LiveSurfacePerf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveSurfacePerfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9Qcm90b2J1Zi9TUk1MaW5rQW5hbHl0aWNzL0xpdmVTdXJmYWNlUGVyZi5w",
            "cm90bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8isg0KD0xp",
            "dmVTdXJmYWNlUGVyZhIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjcKBHBrZXkYAiABKAsyKS5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLkxpdmVTdXJmYWNlUGVyZi5QS2V5EgwKBGRhdGUYZCAB",
            "KAkSDAoEdGltZRhnIAEoCRIuCgZ0aWNrZXIYaiABKAsyHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlRpY2tlcktleRIyCgdleF90eXBlGG0gASgOMiEuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5FeGVyY2lzZVR5cGUSNgoKbW9kZWxfdHlwZRhwIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuQ2FsY01vZGVsVHlwZRIOCgZ1X21h",
            "cmsYcyABKAISDQoFeWVhcnMYdiABKAISDAoEcmF0ZRh5IAEoAhIMCgRzZGl2",
            "GHwgASgCEgwKBGRkaXYYfyABKAISEgoJZXZlbnRfY250GIIBIAEoAhIQCgdp",
            "X2VNb3ZlGIUBIAEoAhIQCgdoX2VNb3ZlGIgBIAEoAhIPCgZzdHJpa2UYiwEg",
            "ASgCEg8KBmNfaVZvbBiOASABKAISDwoGcF9pVm9sGJEBIAEoAhIPCgZjX3NP",
            "cHgYlAEgASgCEg8KBnBfc09weBiXASABKAISDQoEY19kZRiaASABKAISDQoE",
            "Y19nYRidASABKAISDQoEY190aBigASABKAISDQoEY192ZRijASABKAISDQoE",
            "Y19ybximASABKAISDQoEcF9kZRipASABKAISDQoEcF9nYRisASABKAISDQoE",
            "cF90aBivASABKAISDQoEcF92ZRiyASABKAISDQoEcF9ybxi1ASABKAISDwoG",
            "eHhfY250GLgBIAEoBRIPCgZwd2lkdGgYuwEgASgCEg8KBnZ3aWR0aBi+ASAB",
            "KAISEgoJZml4X2NJVm9sGMEBIAEoAhISCglmaXhfcElWb2wYxAEgASgCEhIK",
            "CWZpeF9jU09weBjHASABKAISEgoJZml4X3BTT3B4GMoBIAEoAhISCglwcnZf",
            "dU1hcmsYzQEgASgCEhIKCXBydl95ZWFycxjQASABKAISEQoIcHJ2X3NEaXYY",
            "0wEgASgCEhEKCHBydl9yYXRlGNYBIAEoAhIRCghwcnZfZERpdhjZASABKAIS",
            "EwoKcHJ2X3N0cmlrZRjcASABKAISFgoNcHJ2X2V2ZW50X2NudBjfASABKAIS",
            "EwoKcHJ2X2lFTW92ZRjiASABKAISEgoJcHJ2X2NJVm9sGOUBIAEoAhISCglw",
            "cnZfcElWb2wY6AEgASgCEhIKCXBydl9jU09weBjrASABKAISEgoJcHJ2X3BT",
            "T3B4GO4BIAEoAhIQCgdwcnZfY0RlGPEBIAEoAhIQCgdwcnZfY0dhGPQBIAEo",
            "AhIQCgdwcnZfY1RoGPcBIAEoAhIQCgdwcnZfY1ZlGPoBIAEoAhIQCgdwcnZf",
            "Y1JvGP0BIAEoAhIQCgdwcnZfcERlGIACIAEoAhIQCgdwcnZfcEdhGIMCIAEo",
            "AhIQCgdwcnZfcFRoGIYCIAEoAhIQCgdwcnZfcFZlGIkCIAEoAhIQCgdwcnZf",
            "cFJvGIwCIAEoAhISCglwcnZfeFhDbnQYjwIgASgFEhMKCnBydl9wV2lkdGgY",
            "kgIgASgCEhMKCnBydl92V2lkdGgYlQIgASgCEhMKCmNfb3B0X3BuX2wYmAIg",
            "ASgCEhMKCnBfb3B0X3BuX2wYmwIgASgCEg8KBmRfdVByYxieAiABKAISEgoJ",
            "Y19kZV9wbl9sGKECIAEoAhISCgljX2dhX3BuX2wYpAIgASgCEhIKCWNfdGhf",
            "cG5fbBinAiABKAISEgoJY192ZV9wbl9sGKoCIAEoAhISCgljX3JvX3BuX2wY",
            "rQIgASgCEhIKCXBfZGVfcG5fbBiwAiABKAISEgoJcF9nYV9wbl9sGLMCIAEo",
            "AhISCglwX3RoX3BuX2wYtgIgASgCEhIKCXBfdmVfcG5fbBi5AiABKAISEgoJ",
            "cF9yb19wbl9sGLwCIAEoAhIuCgl0aW1lc3RhbXAYvwIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBpyCgRQS2V5EiwKBGVrZXkYCiABKAsyHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRI8Cg5wZXJmX3N1cmZfdHlw",
            "ZRgLIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuUGVyZlN1cmZhY2VUeXBl",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfacePerf), global::Spiderrock.Protobuf.LiveSurfacePerf.Parser, new[]{ "Meta", "Pkey", "Date", "Time", "Ticker", "ExType", "ModelType", "UMark", "Years", "Rate", "Sdiv", "Ddiv", "EventCnt", "IEMove", "HEMove", "Strike", "CIVol", "PIVol", "CSOpx", "PSOpx", "CDe", "CGa", "CTh", "CVe", "CRo", "PDe", "PGa", "PTh", "PVe", "PRo", "XxCnt", "Pwidth", "Vwidth", "FixCIVol", "FixPIVol", "FixCSOpx", "FixPSOpx", "PrvUMark", "PrvYears", "PrvSDiv", "PrvRate", "PrvDDiv", "PrvStrike", "PrvEventCnt", "PrvIEMove", "PrvCIVol", "PrvPIVol", "PrvCSOpx", "PrvPSOpx", "PrvCDe", "PrvCGa", "PrvCTh", "PrvCVe", "PrvCRo", "PrvPDe", "PrvPGa", "PrvPTh", "PrvPVe", "PrvPRo", "PrvXXCnt", "PrvPWidth", "PrvVWidth", "COptPnL", "POptPnL", "DUPrc", "CDePnL", "CGaPnL", "CThPnL", "CVePnL", "CRoPnL", "PDePnL", "PGaPnL", "PThPnL", "PVePnL", "PRoPnL", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey), global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey.Parser, new[]{ "Ekey", "PerfSurfType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///LiveSurfacePerf records contain current and prior period implied ATM volatilities and greeks and as well as fixed-strike PnL values.  The strike used for the fix-strike calculation is equal to the forward underlier price that prevailed on the open.  Note that this strike price 'resets' each day.
  ///LiveSurfacePerf records are published to the SpiderRock elastic cluster at the end of the day for each option expiration.  These records are designed to allow fixed strike EOD to EOD attributed PnL to be easily calculated.  These records can also be used to measure atm volatility dynamics.
  /// </summary>
  public sealed partial class LiveSurfacePerf : pb::IMessage<LiveSurfacePerf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveSurfacePerf> _parser = new pb::MessageParser<LiveSurfacePerf>(() => new LiveSurfacePerf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveSurfacePerf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveSurfacePerfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfacePerf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfacePerf(LiveSurfacePerf other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      date_ = other.date_;
      time_ = other.time_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      exType_ = other.exType_;
      modelType_ = other.modelType_;
      uMark_ = other.uMark_;
      years_ = other.years_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      eventCnt_ = other.eventCnt_;
      iEMove_ = other.iEMove_;
      hEMove_ = other.hEMove_;
      strike_ = other.strike_;
      cIVol_ = other.cIVol_;
      pIVol_ = other.pIVol_;
      cSOpx_ = other.cSOpx_;
      pSOpx_ = other.pSOpx_;
      cDe_ = other.cDe_;
      cGa_ = other.cGa_;
      cTh_ = other.cTh_;
      cVe_ = other.cVe_;
      cRo_ = other.cRo_;
      pDe_ = other.pDe_;
      pGa_ = other.pGa_;
      pTh_ = other.pTh_;
      pVe_ = other.pVe_;
      pRo_ = other.pRo_;
      xxCnt_ = other.xxCnt_;
      pwidth_ = other.pwidth_;
      vwidth_ = other.vwidth_;
      fixCIVol_ = other.fixCIVol_;
      fixPIVol_ = other.fixPIVol_;
      fixCSOpx_ = other.fixCSOpx_;
      fixPSOpx_ = other.fixPSOpx_;
      prvUMark_ = other.prvUMark_;
      prvYears_ = other.prvYears_;
      prvSDiv_ = other.prvSDiv_;
      prvRate_ = other.prvRate_;
      prvDDiv_ = other.prvDDiv_;
      prvStrike_ = other.prvStrike_;
      prvEventCnt_ = other.prvEventCnt_;
      prvIEMove_ = other.prvIEMove_;
      prvCIVol_ = other.prvCIVol_;
      prvPIVol_ = other.prvPIVol_;
      prvCSOpx_ = other.prvCSOpx_;
      prvPSOpx_ = other.prvPSOpx_;
      prvCDe_ = other.prvCDe_;
      prvCGa_ = other.prvCGa_;
      prvCTh_ = other.prvCTh_;
      prvCVe_ = other.prvCVe_;
      prvCRo_ = other.prvCRo_;
      prvPDe_ = other.prvPDe_;
      prvPGa_ = other.prvPGa_;
      prvPTh_ = other.prvPTh_;
      prvPVe_ = other.prvPVe_;
      prvPRo_ = other.prvPRo_;
      prvXXCnt_ = other.prvXXCnt_;
      prvPWidth_ = other.prvPWidth_;
      prvVWidth_ = other.prvVWidth_;
      cOptPnL_ = other.cOptPnL_;
      pOptPnL_ = other.pOptPnL_;
      dUPrc_ = other.dUPrc_;
      cDePnL_ = other.cDePnL_;
      cGaPnL_ = other.cGaPnL_;
      cThPnL_ = other.cThPnL_;
      cVePnL_ = other.cVePnL_;
      cRoPnL_ = other.cRoPnL_;
      pDePnL_ = other.pDePnL_;
      pGaPnL_ = other.pGaPnL_;
      pThPnL_ = other.pThPnL_;
      pVePnL_ = other.pVePnL_;
      pRoPnL_ = other.pRoPnL_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfacePerf Clone() {
      return new LiveSurfacePerf(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 100;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 103;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 106;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SpiderRock underlier stock key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 109;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.CalcModelType modelType_ = global::Spiderrock.Protobuf.CalcModelType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "u_mark" field.</summary>
    public const int UMarkFieldNumber = 115;
    private float uMark_;
    /// <summary>
    /// current underlier mark (usually mid market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UMark {
      get { return uMark_; }
      set {
        uMark_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 118;
    private float years_;
    /// <summary>
    /// time to expiration (in years)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 121;
    private float rate_;
    /// <summary>
    /// interest rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 124;
    private float sdiv_;
    /// <summary>
    /// stock dividend (borrow rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 127;
    private float ddiv_;
    /// <summary>
    /// present value of discrete dividend stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "event_cnt" field.</summary>
    public const int EventCntFieldNumber = 130;
    private float eventCnt_;
    /// <summary>
    /// number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EventCnt {
      get { return eventCnt_; }
      set {
        eventCnt_ = value;
      }
    }

    /// <summary>Field number for the "i_eMove" field.</summary>
    public const int IEMoveFieldNumber = 133;
    private float iEMove_;
    /// <summary>
    /// implied event move (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IEMove {
      get { return iEMove_; }
      set {
        iEMove_ = value;
      }
    }

    /// <summary>Field number for the "h_eMove" field.</summary>
    public const int HEMoveFieldNumber = 136;
    private float hEMove_;
    /// <summary>
    /// average of the trailing 12 historical (quarterly) earnings moves (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HEMove {
      get { return hEMove_; }
      set {
        hEMove_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 139;
    private float strike_;
    /// <summary>
    /// atm strike = uMark * Math.Exp(years * rate) - ddiv;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "c_iVol" field.</summary>
    public const int CIVolFieldNumber = 142;
    private float cIVol_;
    /// <summary>
    /// call surface atm vol @ strike = uMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CIVol {
      get { return cIVol_; }
      set {
        cIVol_ = value;
      }
    }

    /// <summary>Field number for the "p_iVol" field.</summary>
    public const int PIVolFieldNumber = 145;
    private float pIVol_;
    /// <summary>
    /// put surface atm vol @ strike = uMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PIVol {
      get { return pIVol_; }
      set {
        pIVol_ = value;
      }
    }

    /// <summary>Field number for the "c_sOpx" field.</summary>
    public const int CSOpxFieldNumber = 148;
    private float cSOpx_;
    /// <summary>
    /// call option price @ (cAtm, uMark, years, sdiv, rate, ddiv);strike = uMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CSOpx {
      get { return cSOpx_; }
      set {
        cSOpx_ = value;
      }
    }

    /// <summary>Field number for the "p_sOpx" field.</summary>
    public const int PSOpxFieldNumber = 151;
    private float pSOpx_;
    /// <summary>
    /// put option price @ (pAtm, uMark, years, sdiv, rate, ddiv);strike = uMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PSOpx {
      get { return pSOpx_; }
      set {
        pSOpx_ = value;
      }
    }

    /// <summary>Field number for the "c_de" field.</summary>
    public const int CDeFieldNumber = 154;
    private float cDe_;
    /// <summary>
    /// surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CDe {
      get { return cDe_; }
      set {
        cDe_ = value;
      }
    }

    /// <summary>Field number for the "c_ga" field.</summary>
    public const int CGaFieldNumber = 157;
    private float cGa_;
    /// <summary>
    /// surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CGa {
      get { return cGa_; }
      set {
        cGa_ = value;
      }
    }

    /// <summary>Field number for the "c_th" field.</summary>
    public const int CThFieldNumber = 160;
    private float cTh_;
    /// <summary>
    /// surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CTh {
      get { return cTh_; }
      set {
        cTh_ = value;
      }
    }

    /// <summary>Field number for the "c_ve" field.</summary>
    public const int CVeFieldNumber = 163;
    private float cVe_;
    /// <summary>
    /// surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CVe {
      get { return cVe_; }
      set {
        cVe_ = value;
      }
    }

    /// <summary>Field number for the "c_ro" field.</summary>
    public const int CRoFieldNumber = 166;
    private float cRo_;
    /// <summary>
    /// surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CRo {
      get { return cRo_; }
      set {
        cRo_ = value;
      }
    }

    /// <summary>Field number for the "p_de" field.</summary>
    public const int PDeFieldNumber = 169;
    private float pDe_;
    /// <summary>
    /// surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PDe {
      get { return pDe_; }
      set {
        pDe_ = value;
      }
    }

    /// <summary>Field number for the "p_ga" field.</summary>
    public const int PGaFieldNumber = 172;
    private float pGa_;
    /// <summary>
    /// surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PGa {
      get { return pGa_; }
      set {
        pGa_ = value;
      }
    }

    /// <summary>Field number for the "p_th" field.</summary>
    public const int PThFieldNumber = 175;
    private float pTh_;
    /// <summary>
    /// surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PTh {
      get { return pTh_; }
      set {
        pTh_ = value;
      }
    }

    /// <summary>Field number for the "p_ve" field.</summary>
    public const int PVeFieldNumber = 178;
    private float pVe_;
    /// <summary>
    /// surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PVe {
      get { return pVe_; }
      set {
        pVe_ = value;
      }
    }

    /// <summary>Field number for the "p_ro" field.</summary>
    public const int PRoFieldNumber = 181;
    private float pRo_;
    /// <summary>
    /// surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PRo {
      get { return pRo_; }
      set {
        pRo_ = value;
      }
    }

    /// <summary>Field number for the "xx_cnt" field.</summary>
    public const int XxCntFieldNumber = 184;
    private int xxCnt_;
    /// <summary>
    /// number of valid surface strikes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XxCnt {
      get { return xxCnt_; }
      set {
        xxCnt_ = value;
      }
    }

    /// <summary>Field number for the "pwidth" field.</summary>
    public const int PwidthFieldNumber = 187;
    private float pwidth_;
    /// <summary>
    /// minimum mkt premium width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pwidth {
      get { return pwidth_; }
      set {
        pwidth_ = value;
      }
    }

    /// <summary>Field number for the "vwidth" field.</summary>
    public const int VwidthFieldNumber = 190;
    private float vwidth_;
    /// <summary>
    /// minimum mkt volatility width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vwidth {
      get { return vwidth_; }
      set {
        vwidth_ = value;
      }
    }

    /// <summary>Field number for the "fix_cIVol" field.</summary>
    public const int FixCIVolFieldNumber = 193;
    private float fixCIVol_;
    /// <summary>
    /// fixed strike call surface atm vol @ strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixCIVol {
      get { return fixCIVol_; }
      set {
        fixCIVol_ = value;
      }
    }

    /// <summary>Field number for the "fix_pIVol" field.</summary>
    public const int FixPIVolFieldNumber = 196;
    private float fixPIVol_;
    /// <summary>
    /// fixed strike put surface atm vol @ strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixPIVol {
      get { return fixPIVol_; }
      set {
        fixPIVol_ = value;
      }
    }

    /// <summary>Field number for the "fix_cSOpx" field.</summary>
    public const int FixCSOpxFieldNumber = 199;
    private float fixCSOpx_;
    /// <summary>
    /// fixed strike call option price @ (fixCAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixCSOpx {
      get { return fixCSOpx_; }
      set {
        fixCSOpx_ = value;
      }
    }

    /// <summary>Field number for the "fix_pSOpx" field.</summary>
    public const int FixPSOpxFieldNumber = 202;
    private float fixPSOpx_;
    /// <summary>
    /// fixed strike put option price @ (fixPAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixPSOpx {
      get { return fixPSOpx_; }
      set {
        fixPSOpx_ = value;
      }
    }

    /// <summary>Field number for the "prv_uMark" field.</summary>
    public const int PrvUMarkFieldNumber = 205;
    private float prvUMark_;
    /// <summary>
    /// prior period underlier mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvUMark {
      get { return prvUMark_; }
      set {
        prvUMark_ = value;
      }
    }

    /// <summary>Field number for the "prv_years" field.</summary>
    public const int PrvYearsFieldNumber = 208;
    private float prvYears_;
    /// <summary>
    /// prior period years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvYears {
      get { return prvYears_; }
      set {
        prvYears_ = value;
      }
    }

    /// <summary>Field number for the "prv_sDiv" field.</summary>
    public const int PrvSDivFieldNumber = 211;
    private float prvSDiv_;
    /// <summary>
    /// prior period sdiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvSDiv {
      get { return prvSDiv_; }
      set {
        prvSDiv_ = value;
      }
    }

    /// <summary>Field number for the "prv_rate" field.</summary>
    public const int PrvRateFieldNumber = 214;
    private float prvRate_;
    /// <summary>
    /// prior period rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvRate {
      get { return prvRate_; }
      set {
        prvRate_ = value;
      }
    }

    /// <summary>Field number for the "prv_dDiv" field.</summary>
    public const int PrvDDivFieldNumber = 217;
    private float prvDDiv_;
    /// <summary>
    /// prior period ddiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvDDiv {
      get { return prvDDiv_; }
      set {
        prvDDiv_ = value;
      }
    }

    /// <summary>Field number for the "prv_strike" field.</summary>
    public const int PrvStrikeFieldNumber = 220;
    private float prvStrike_;
    /// <summary>
    /// prior period atm strike = prvUMark * Math.Exp(years * rate) - ddiv;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvStrike {
      get { return prvStrike_; }
      set {
        prvStrike_ = value;
      }
    }

    /// <summary>Field number for the "prv_event_cnt" field.</summary>
    public const int PrvEventCntFieldNumber = 223;
    private float prvEventCnt_;
    /// <summary>
    /// number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvEventCnt {
      get { return prvEventCnt_; }
      set {
        prvEventCnt_ = value;
      }
    }

    /// <summary>Field number for the "prv_iEMove" field.</summary>
    public const int PrvIEMoveFieldNumber = 226;
    private float prvIEMove_;
    /// <summary>
    /// prior period implied event move (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvIEMove {
      get { return prvIEMove_; }
      set {
        prvIEMove_ = value;
      }
    }

    /// <summary>Field number for the "prv_cIVol" field.</summary>
    public const int PrvCIVolFieldNumber = 229;
    private float prvCIVol_;
    /// <summary>
    /// prior period surface cAtm @ strike = prvMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCIVol {
      get { return prvCIVol_; }
      set {
        prvCIVol_ = value;
      }
    }

    /// <summary>Field number for the "prv_pIVol" field.</summary>
    public const int PrvPIVolFieldNumber = 232;
    private float prvPIVol_;
    /// <summary>
    /// prior period surface pAtm @ strike = prvMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPIVol {
      get { return prvPIVol_; }
      set {
        prvPIVol_ = value;
      }
    }

    /// <summary>Field number for the "prv_cSOpx" field.</summary>
    public const int PrvCSOpxFieldNumber = 235;
    private float prvCSOpx_;
    /// <summary>
    /// prior period call surface price @ strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCSOpx {
      get { return prvCSOpx_; }
      set {
        prvCSOpx_ = value;
      }
    }

    /// <summary>Field number for the "prv_pSOpx" field.</summary>
    public const int PrvPSOpxFieldNumber = 238;
    private float prvPSOpx_;
    /// <summary>
    /// prior period put surface price @ strike = prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPSOpx {
      get { return prvPSOpx_; }
      set {
        prvPSOpx_ = value;
      }
    }

    /// <summary>Field number for the "prv_cDe" field.</summary>
    public const int PrvCDeFieldNumber = 241;
    private float prvCDe_;
    /// <summary>
    /// prior period surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCDe {
      get { return prvCDe_; }
      set {
        prvCDe_ = value;
      }
    }

    /// <summary>Field number for the "prv_cGa" field.</summary>
    public const int PrvCGaFieldNumber = 244;
    private float prvCGa_;
    /// <summary>
    /// prior period surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCGa {
      get { return prvCGa_; }
      set {
        prvCGa_ = value;
      }
    }

    /// <summary>Field number for the "prv_cTh" field.</summary>
    public const int PrvCThFieldNumber = 247;
    private float prvCTh_;
    /// <summary>
    /// prior period surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCTh {
      get { return prvCTh_; }
      set {
        prvCTh_ = value;
      }
    }

    /// <summary>Field number for the "prv_cVe" field.</summary>
    public const int PrvCVeFieldNumber = 250;
    private float prvCVe_;
    /// <summary>
    /// prior period surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCVe {
      get { return prvCVe_; }
      set {
        prvCVe_ = value;
      }
    }

    /// <summary>Field number for the "prv_cRo" field.</summary>
    public const int PrvCRoFieldNumber = 253;
    private float prvCRo_;
    /// <summary>
    /// prior period surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCRo {
      get { return prvCRo_; }
      set {
        prvCRo_ = value;
      }
    }

    /// <summary>Field number for the "prv_pDe" field.</summary>
    public const int PrvPDeFieldNumber = 256;
    private float prvPDe_;
    /// <summary>
    /// prior period surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPDe {
      get { return prvPDe_; }
      set {
        prvPDe_ = value;
      }
    }

    /// <summary>Field number for the "prv_pGa" field.</summary>
    public const int PrvPGaFieldNumber = 259;
    private float prvPGa_;
    /// <summary>
    /// prior period surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPGa {
      get { return prvPGa_; }
      set {
        prvPGa_ = value;
      }
    }

    /// <summary>Field number for the "prv_pTh" field.</summary>
    public const int PrvPThFieldNumber = 262;
    private float prvPTh_;
    /// <summary>
    /// prior period surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPTh {
      get { return prvPTh_; }
      set {
        prvPTh_ = value;
      }
    }

    /// <summary>Field number for the "prv_pVe" field.</summary>
    public const int PrvPVeFieldNumber = 265;
    private float prvPVe_;
    /// <summary>
    /// prior period surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPVe {
      get { return prvPVe_; }
      set {
        prvPVe_ = value;
      }
    }

    /// <summary>Field number for the "prv_pRo" field.</summary>
    public const int PrvPRoFieldNumber = 268;
    private float prvPRo_;
    /// <summary>
    /// prior period surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPRo {
      get { return prvPRo_; }
      set {
        prvPRo_ = value;
      }
    }

    /// <summary>Field number for the "prv_xXCnt" field.</summary>
    public const int PrvXXCntFieldNumber = 271;
    private int prvXXCnt_;
    /// <summary>
    /// prior period number of valid surface strikes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrvXXCnt {
      get { return prvXXCnt_; }
      set {
        prvXXCnt_ = value;
      }
    }

    /// <summary>Field number for the "prv_pWidth" field.</summary>
    public const int PrvPWidthFieldNumber = 274;
    private float prvPWidth_;
    /// <summary>
    /// prior period minimum mkt premium width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPWidth {
      get { return prvPWidth_; }
      set {
        prvPWidth_ = value;
      }
    }

    /// <summary>Field number for the "prv_vWidth" field.</summary>
    public const int PrvVWidthFieldNumber = 277;
    private float prvVWidth_;
    /// <summary>
    /// prior period minimum mkt volatility width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvVWidth {
      get { return prvVWidth_; }
      set {
        prvVWidth_ = value;
      }
    }

    /// <summary>Field number for the "c_opt_pn_l" field.</summary>
    public const int COptPnLFieldNumber = 280;
    private float cOptPnL_;
    /// <summary>
    /// call option pnl (fixCOpx - prvCOpx)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float COptPnL {
      get { return cOptPnL_; }
      set {
        cOptPnL_ = value;
      }
    }

    /// <summary>Field number for the "p_opt_pn_l" field.</summary>
    public const int POptPnLFieldNumber = 283;
    private float pOptPnL_;
    /// <summary>
    /// put option pnl (fixPOpx - prvPOpx)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float POptPnL {
      get { return pOptPnL_; }
      set {
        pOptPnL_ = value;
      }
    }

    /// <summary>Field number for the "d_uPrc" field.</summary>
    public const int DUPrcFieldNumber = 286;
    private float dUPrc_;
    /// <summary>
    /// uMark - prvUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DUPrc {
      get { return dUPrc_; }
      set {
        dUPrc_ = value;
      }
    }

    /// <summary>Field number for the "c_de_pn_l" field.</summary>
    public const int CDePnLFieldNumber = 289;
    private float cDePnL_;
    /// <summary>
    /// prvCDe * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CDePnL {
      get { return cDePnL_; }
      set {
        cDePnL_ = value;
      }
    }

    /// <summary>Field number for the "c_ga_pn_l" field.</summary>
    public const int CGaPnLFieldNumber = 292;
    private float cGaPnL_;
    /// <summary>
    /// 0.5 * prvCGa * dUPrc * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CGaPnL {
      get { return cGaPnL_; }
      set {
        cGaPnL_ = value;
      }
    }

    /// <summary>Field number for the "c_th_pn_l" field.</summary>
    public const int CThPnLFieldNumber = 295;
    private float cThPnL_;
    /// <summary>
    /// prvCTh * (years - prvYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CThPnL {
      get { return cThPnL_; }
      set {
        cThPnL_ = value;
      }
    }

    /// <summary>Field number for the "c_ve_pn_l" field.</summary>
    public const int CVePnLFieldNumber = 298;
    private float cVePnL_;
    /// <summary>
    /// prvCVe * (sVol - prvSVol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CVePnL {
      get { return cVePnL_; }
      set {
        cVePnL_ = value;
      }
    }

    /// <summary>Field number for the "c_ro_pn_l" field.</summary>
    public const int CRoPnLFieldNumber = 301;
    private float cRoPnL_;
    /// <summary>
    /// prvCRo * (sdiv - prvSDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CRoPnL {
      get { return cRoPnL_; }
      set {
        cRoPnL_ = value;
      }
    }

    /// <summary>Field number for the "p_de_pn_l" field.</summary>
    public const int PDePnLFieldNumber = 304;
    private float pDePnL_;
    /// <summary>
    /// prvPDe * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PDePnL {
      get { return pDePnL_; }
      set {
        pDePnL_ = value;
      }
    }

    /// <summary>Field number for the "p_ga_pn_l" field.</summary>
    public const int PGaPnLFieldNumber = 307;
    private float pGaPnL_;
    /// <summary>
    /// 0.5 * prvPGa * dUPrc * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PGaPnL {
      get { return pGaPnL_; }
      set {
        pGaPnL_ = value;
      }
    }

    /// <summary>Field number for the "p_th_pn_l" field.</summary>
    public const int PThPnLFieldNumber = 310;
    private float pThPnL_;
    /// <summary>
    /// prvPTh * (years - prvYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PThPnL {
      get { return pThPnL_; }
      set {
        pThPnL_ = value;
      }
    }

    /// <summary>Field number for the "p_ve_pn_l" field.</summary>
    public const int PVePnLFieldNumber = 313;
    private float pVePnL_;
    /// <summary>
    /// prvPVe * (sVol - prvSVol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PVePnL {
      get { return pVePnL_; }
      set {
        pVePnL_ = value;
      }
    }

    /// <summary>Field number for the "p_ro_pn_l" field.</summary>
    public const int PRoPnLFieldNumber = 316;
    private float pRoPnL_;
    /// <summary>
    /// prvPRo * (sdiv - prvSDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PRoPnL {
      get { return pRoPnL_; }
      set {
        pRoPnL_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 319;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveSurfacePerf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveSurfacePerf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (Date != other.Date) return false;
      if (Time != other.Time) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (ExType != other.ExType) return false;
      if (ModelType != other.ModelType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UMark, other.UMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventCnt, other.EventCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IEMove, other.IEMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HEMove, other.HEMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CIVol, other.CIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PIVol, other.PIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CSOpx, other.CSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PSOpx, other.PSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CDe, other.CDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CGa, other.CGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTh, other.CTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CVe, other.CVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CRo, other.CRo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PDe, other.PDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PGa, other.PGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PTh, other.PTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVe, other.PVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PRo, other.PRo)) return false;
      if (XxCnt != other.XxCnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pwidth, other.Pwidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vwidth, other.Vwidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixCIVol, other.FixCIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixPIVol, other.FixPIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixCSOpx, other.FixCSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixPSOpx, other.FixPSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvUMark, other.PrvUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvYears, other.PrvYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvSDiv, other.PrvSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvRate, other.PrvRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvDDiv, other.PrvDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvStrike, other.PrvStrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvEventCnt, other.PrvEventCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvIEMove, other.PrvIEMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCIVol, other.PrvCIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPIVol, other.PrvPIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCSOpx, other.PrvCSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPSOpx, other.PrvPSOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCDe, other.PrvCDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCGa, other.PrvCGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCTh, other.PrvCTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCVe, other.PrvCVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCRo, other.PrvCRo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPDe, other.PrvPDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPGa, other.PrvPGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPTh, other.PrvPTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPVe, other.PrvPVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPRo, other.PrvPRo)) return false;
      if (PrvXXCnt != other.PrvXXCnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPWidth, other.PrvPWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvVWidth, other.PrvVWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(COptPnL, other.COptPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(POptPnL, other.POptPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DUPrc, other.DUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CDePnL, other.CDePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CGaPnL, other.CGaPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CThPnL, other.CThPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CVePnL, other.CVePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CRoPnL, other.CRoPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PDePnL, other.PDePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PGaPnL, other.PGaPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PThPnL, other.PThPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVePnL, other.PVePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PRoPnL, other.PRoPnL)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) hash ^= ModelType.GetHashCode();
      if (UMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UMark);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (EventCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventCnt);
      if (IEMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IEMove);
      if (HEMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HEMove);
      if (Strike != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Strike);
      if (CIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CIVol);
      if (PIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PIVol);
      if (CSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CSOpx);
      if (PSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PSOpx);
      if (CDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CDe);
      if (CGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CGa);
      if (CTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTh);
      if (CVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CVe);
      if (CRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CRo);
      if (PDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PDe);
      if (PGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PGa);
      if (PTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PTh);
      if (PVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVe);
      if (PRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PRo);
      if (XxCnt != 0) hash ^= XxCnt.GetHashCode();
      if (Pwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pwidth);
      if (Vwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vwidth);
      if (FixCIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixCIVol);
      if (FixPIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixPIVol);
      if (FixCSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixCSOpx);
      if (FixPSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixPSOpx);
      if (PrvUMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvUMark);
      if (PrvYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvYears);
      if (PrvSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvSDiv);
      if (PrvRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvRate);
      if (PrvDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvDDiv);
      if (PrvStrike != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvStrike);
      if (PrvEventCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvEventCnt);
      if (PrvIEMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvIEMove);
      if (PrvCIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCIVol);
      if (PrvPIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPIVol);
      if (PrvCSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCSOpx);
      if (PrvPSOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPSOpx);
      if (PrvCDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCDe);
      if (PrvCGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCGa);
      if (PrvCTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCTh);
      if (PrvCVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCVe);
      if (PrvCRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCRo);
      if (PrvPDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPDe);
      if (PrvPGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPGa);
      if (PrvPTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPTh);
      if (PrvPVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPVe);
      if (PrvPRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPRo);
      if (PrvXXCnt != 0) hash ^= PrvXXCnt.GetHashCode();
      if (PrvPWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPWidth);
      if (PrvVWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvVWidth);
      if (COptPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(COptPnL);
      if (POptPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(POptPnL);
      if (DUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DUPrc);
      if (CDePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CDePnL);
      if (CGaPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CGaPnL);
      if (CThPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CThPnL);
      if (CVePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CVePnL);
      if (CRoPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CRoPnL);
      if (PDePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PDePnL);
      if (PGaPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PGaPnL);
      if (PThPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PThPnL);
      if (PVePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVePnL);
      if (PRoPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PRoPnL);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ModelType);
      }
      if (UMark != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(UMark);
      }
      if (Years != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Ddiv);
      }
      if (EventCnt != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(EventCnt);
      }
      if (IEMove != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(IEMove);
      }
      if (HEMove != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(HEMove);
      }
      if (Strike != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(Strike);
      }
      if (CIVol != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(CIVol);
      }
      if (PIVol != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(PIVol);
      }
      if (CSOpx != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(CSOpx);
      }
      if (PSOpx != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(PSOpx);
      }
      if (CDe != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(CDe);
      }
      if (CGa != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(CGa);
      }
      if (CTh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(CTh);
      }
      if (CVe != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(CVe);
      }
      if (CRo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(CRo);
      }
      if (PDe != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(PDe);
      }
      if (PGa != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(PGa);
      }
      if (PTh != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(PTh);
      }
      if (PVe != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(PVe);
      }
      if (PRo != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(PRo);
      }
      if (XxCnt != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(XxCnt);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(Vwidth);
      }
      if (FixCIVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(FixCIVol);
      }
      if (FixPIVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(FixPIVol);
      }
      if (FixCSOpx != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(FixCSOpx);
      }
      if (FixPSOpx != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(FixPSOpx);
      }
      if (PrvUMark != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(PrvUMark);
      }
      if (PrvYears != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PrvYears);
      }
      if (PrvSDiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PrvSDiv);
      }
      if (PrvRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PrvRate);
      }
      if (PrvDDiv != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PrvDDiv);
      }
      if (PrvStrike != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PrvStrike);
      }
      if (PrvEventCnt != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(PrvEventCnt);
      }
      if (PrvIEMove != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PrvIEMove);
      }
      if (PrvCIVol != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(PrvCIVol);
      }
      if (PrvPIVol != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(PrvPIVol);
      }
      if (PrvCSOpx != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(PrvCSOpx);
      }
      if (PrvPSOpx != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(PrvPSOpx);
      }
      if (PrvCDe != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(PrvCDe);
      }
      if (PrvCGa != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(PrvCGa);
      }
      if (PrvCTh != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(PrvCTh);
      }
      if (PrvCVe != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PrvCVe);
      }
      if (PrvCRo != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(PrvCRo);
      }
      if (PrvPDe != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(PrvPDe);
      }
      if (PrvPGa != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(PrvPGa);
      }
      if (PrvPTh != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(PrvPTh);
      }
      if (PrvPVe != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PrvPVe);
      }
      if (PrvPRo != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(PrvPRo);
      }
      if (PrvXXCnt != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(PrvXXCnt);
      }
      if (PrvPWidth != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(PrvPWidth);
      }
      if (PrvVWidth != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(PrvVWidth);
      }
      if (COptPnL != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(COptPnL);
      }
      if (POptPnL != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(POptPnL);
      }
      if (DUPrc != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(DUPrc);
      }
      if (CDePnL != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(CDePnL);
      }
      if (CGaPnL != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(CGaPnL);
      }
      if (CThPnL != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(CThPnL);
      }
      if (CVePnL != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(CVePnL);
      }
      if (CRoPnL != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(CRoPnL);
      }
      if (PDePnL != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(PDePnL);
      }
      if (PGaPnL != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PGaPnL);
      }
      if (PThPnL != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PThPnL);
      }
      if (PVePnL != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PVePnL);
      }
      if (PRoPnL != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PRoPnL);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(250, 19);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ModelType);
      }
      if (UMark != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(UMark);
      }
      if (Years != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Ddiv);
      }
      if (EventCnt != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(EventCnt);
      }
      if (IEMove != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(IEMove);
      }
      if (HEMove != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(HEMove);
      }
      if (Strike != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(Strike);
      }
      if (CIVol != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(CIVol);
      }
      if (PIVol != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(PIVol);
      }
      if (CSOpx != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(CSOpx);
      }
      if (PSOpx != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(PSOpx);
      }
      if (CDe != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(CDe);
      }
      if (CGa != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(CGa);
      }
      if (CTh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(CTh);
      }
      if (CVe != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(CVe);
      }
      if (CRo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(CRo);
      }
      if (PDe != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(PDe);
      }
      if (PGa != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(PGa);
      }
      if (PTh != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(PTh);
      }
      if (PVe != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(PVe);
      }
      if (PRo != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(PRo);
      }
      if (XxCnt != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(XxCnt);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(Vwidth);
      }
      if (FixCIVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(FixCIVol);
      }
      if (FixPIVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(FixPIVol);
      }
      if (FixCSOpx != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(FixCSOpx);
      }
      if (FixPSOpx != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(FixPSOpx);
      }
      if (PrvUMark != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(PrvUMark);
      }
      if (PrvYears != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PrvYears);
      }
      if (PrvSDiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PrvSDiv);
      }
      if (PrvRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PrvRate);
      }
      if (PrvDDiv != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PrvDDiv);
      }
      if (PrvStrike != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PrvStrike);
      }
      if (PrvEventCnt != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(PrvEventCnt);
      }
      if (PrvIEMove != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PrvIEMove);
      }
      if (PrvCIVol != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(PrvCIVol);
      }
      if (PrvPIVol != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(PrvPIVol);
      }
      if (PrvCSOpx != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(PrvCSOpx);
      }
      if (PrvPSOpx != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(PrvPSOpx);
      }
      if (PrvCDe != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(PrvCDe);
      }
      if (PrvCGa != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(PrvCGa);
      }
      if (PrvCTh != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(PrvCTh);
      }
      if (PrvCVe != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PrvCVe);
      }
      if (PrvCRo != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(PrvCRo);
      }
      if (PrvPDe != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(PrvPDe);
      }
      if (PrvPGa != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(PrvPGa);
      }
      if (PrvPTh != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(PrvPTh);
      }
      if (PrvPVe != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PrvPVe);
      }
      if (PrvPRo != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(PrvPRo);
      }
      if (PrvXXCnt != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(PrvXXCnt);
      }
      if (PrvPWidth != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(PrvPWidth);
      }
      if (PrvVWidth != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(PrvVWidth);
      }
      if (COptPnL != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(COptPnL);
      }
      if (POptPnL != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(POptPnL);
      }
      if (DUPrc != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(DUPrc);
      }
      if (CDePnL != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(CDePnL);
      }
      if (CGaPnL != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(CGaPnL);
      }
      if (CThPnL != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(CThPnL);
      }
      if (CVePnL != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(CVePnL);
      }
      if (CRoPnL != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(CRoPnL);
      }
      if (PDePnL != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(PDePnL);
      }
      if (PGaPnL != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PGaPnL);
      }
      if (PThPnL != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PThPnL);
      }
      if (PVePnL != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PVePnL);
      }
      if (PRoPnL != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PRoPnL);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(250, 19);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (Date.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Time.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (UMark != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (EventCnt != 0F) {
        size += 2 + 4;
      }
      if (IEMove != 0F) {
        size += 2 + 4;
      }
      if (HEMove != 0F) {
        size += 2 + 4;
      }
      if (Strike != 0F) {
        size += 2 + 4;
      }
      if (CIVol != 0F) {
        size += 2 + 4;
      }
      if (PIVol != 0F) {
        size += 2 + 4;
      }
      if (CSOpx != 0F) {
        size += 2 + 4;
      }
      if (PSOpx != 0F) {
        size += 2 + 4;
      }
      if (CDe != 0F) {
        size += 2 + 4;
      }
      if (CGa != 0F) {
        size += 2 + 4;
      }
      if (CTh != 0F) {
        size += 2 + 4;
      }
      if (CVe != 0F) {
        size += 2 + 4;
      }
      if (CRo != 0F) {
        size += 2 + 4;
      }
      if (PDe != 0F) {
        size += 2 + 4;
      }
      if (PGa != 0F) {
        size += 2 + 4;
      }
      if (PTh != 0F) {
        size += 2 + 4;
      }
      if (PVe != 0F) {
        size += 2 + 4;
      }
      if (PRo != 0F) {
        size += 2 + 4;
      }
      if (XxCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(XxCnt);
      }
      if (Pwidth != 0F) {
        size += 2 + 4;
      }
      if (Vwidth != 0F) {
        size += 2 + 4;
      }
      if (FixCIVol != 0F) {
        size += 2 + 4;
      }
      if (FixPIVol != 0F) {
        size += 2 + 4;
      }
      if (FixCSOpx != 0F) {
        size += 2 + 4;
      }
      if (FixPSOpx != 0F) {
        size += 2 + 4;
      }
      if (PrvUMark != 0F) {
        size += 2 + 4;
      }
      if (PrvYears != 0F) {
        size += 2 + 4;
      }
      if (PrvSDiv != 0F) {
        size += 2 + 4;
      }
      if (PrvRate != 0F) {
        size += 2 + 4;
      }
      if (PrvDDiv != 0F) {
        size += 2 + 4;
      }
      if (PrvStrike != 0F) {
        size += 2 + 4;
      }
      if (PrvEventCnt != 0F) {
        size += 2 + 4;
      }
      if (PrvIEMove != 0F) {
        size += 2 + 4;
      }
      if (PrvCIVol != 0F) {
        size += 2 + 4;
      }
      if (PrvPIVol != 0F) {
        size += 2 + 4;
      }
      if (PrvCSOpx != 0F) {
        size += 2 + 4;
      }
      if (PrvPSOpx != 0F) {
        size += 2 + 4;
      }
      if (PrvCDe != 0F) {
        size += 2 + 4;
      }
      if (PrvCGa != 0F) {
        size += 2 + 4;
      }
      if (PrvCTh != 0F) {
        size += 2 + 4;
      }
      if (PrvCVe != 0F) {
        size += 2 + 4;
      }
      if (PrvCRo != 0F) {
        size += 2 + 4;
      }
      if (PrvPDe != 0F) {
        size += 2 + 4;
      }
      if (PrvPGa != 0F) {
        size += 2 + 4;
      }
      if (PrvPTh != 0F) {
        size += 2 + 4;
      }
      if (PrvPVe != 0F) {
        size += 2 + 4;
      }
      if (PrvPRo != 0F) {
        size += 2 + 4;
      }
      if (PrvXXCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrvXXCnt);
      }
      if (PrvPWidth != 0F) {
        size += 2 + 4;
      }
      if (PrvVWidth != 0F) {
        size += 2 + 4;
      }
      if (COptPnL != 0F) {
        size += 2 + 4;
      }
      if (POptPnL != 0F) {
        size += 2 + 4;
      }
      if (DUPrc != 0F) {
        size += 2 + 4;
      }
      if (CDePnL != 0F) {
        size += 2 + 4;
      }
      if (CGaPnL != 0F) {
        size += 2 + 4;
      }
      if (CThPnL != 0F) {
        size += 2 + 4;
      }
      if (CVePnL != 0F) {
        size += 2 + 4;
      }
      if (CRoPnL != 0F) {
        size += 2 + 4;
      }
      if (PDePnL != 0F) {
        size += 2 + 4;
      }
      if (PGaPnL != 0F) {
        size += 2 + 4;
      }
      if (PThPnL != 0F) {
        size += 2 + 4;
      }
      if (PVePnL != 0F) {
        size += 2 + 4;
      }
      if (PRoPnL != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveSurfacePerf other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      if (other.UMark != 0F) {
        UMark = other.UMark;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.EventCnt != 0F) {
        EventCnt = other.EventCnt;
      }
      if (other.IEMove != 0F) {
        IEMove = other.IEMove;
      }
      if (other.HEMove != 0F) {
        HEMove = other.HEMove;
      }
      if (other.Strike != 0F) {
        Strike = other.Strike;
      }
      if (other.CIVol != 0F) {
        CIVol = other.CIVol;
      }
      if (other.PIVol != 0F) {
        PIVol = other.PIVol;
      }
      if (other.CSOpx != 0F) {
        CSOpx = other.CSOpx;
      }
      if (other.PSOpx != 0F) {
        PSOpx = other.PSOpx;
      }
      if (other.CDe != 0F) {
        CDe = other.CDe;
      }
      if (other.CGa != 0F) {
        CGa = other.CGa;
      }
      if (other.CTh != 0F) {
        CTh = other.CTh;
      }
      if (other.CVe != 0F) {
        CVe = other.CVe;
      }
      if (other.CRo != 0F) {
        CRo = other.CRo;
      }
      if (other.PDe != 0F) {
        PDe = other.PDe;
      }
      if (other.PGa != 0F) {
        PGa = other.PGa;
      }
      if (other.PTh != 0F) {
        PTh = other.PTh;
      }
      if (other.PVe != 0F) {
        PVe = other.PVe;
      }
      if (other.PRo != 0F) {
        PRo = other.PRo;
      }
      if (other.XxCnt != 0) {
        XxCnt = other.XxCnt;
      }
      if (other.Pwidth != 0F) {
        Pwidth = other.Pwidth;
      }
      if (other.Vwidth != 0F) {
        Vwidth = other.Vwidth;
      }
      if (other.FixCIVol != 0F) {
        FixCIVol = other.FixCIVol;
      }
      if (other.FixPIVol != 0F) {
        FixPIVol = other.FixPIVol;
      }
      if (other.FixCSOpx != 0F) {
        FixCSOpx = other.FixCSOpx;
      }
      if (other.FixPSOpx != 0F) {
        FixPSOpx = other.FixPSOpx;
      }
      if (other.PrvUMark != 0F) {
        PrvUMark = other.PrvUMark;
      }
      if (other.PrvYears != 0F) {
        PrvYears = other.PrvYears;
      }
      if (other.PrvSDiv != 0F) {
        PrvSDiv = other.PrvSDiv;
      }
      if (other.PrvRate != 0F) {
        PrvRate = other.PrvRate;
      }
      if (other.PrvDDiv != 0F) {
        PrvDDiv = other.PrvDDiv;
      }
      if (other.PrvStrike != 0F) {
        PrvStrike = other.PrvStrike;
      }
      if (other.PrvEventCnt != 0F) {
        PrvEventCnt = other.PrvEventCnt;
      }
      if (other.PrvIEMove != 0F) {
        PrvIEMove = other.PrvIEMove;
      }
      if (other.PrvCIVol != 0F) {
        PrvCIVol = other.PrvCIVol;
      }
      if (other.PrvPIVol != 0F) {
        PrvPIVol = other.PrvPIVol;
      }
      if (other.PrvCSOpx != 0F) {
        PrvCSOpx = other.PrvCSOpx;
      }
      if (other.PrvPSOpx != 0F) {
        PrvPSOpx = other.PrvPSOpx;
      }
      if (other.PrvCDe != 0F) {
        PrvCDe = other.PrvCDe;
      }
      if (other.PrvCGa != 0F) {
        PrvCGa = other.PrvCGa;
      }
      if (other.PrvCTh != 0F) {
        PrvCTh = other.PrvCTh;
      }
      if (other.PrvCVe != 0F) {
        PrvCVe = other.PrvCVe;
      }
      if (other.PrvCRo != 0F) {
        PrvCRo = other.PrvCRo;
      }
      if (other.PrvPDe != 0F) {
        PrvPDe = other.PrvPDe;
      }
      if (other.PrvPGa != 0F) {
        PrvPGa = other.PrvPGa;
      }
      if (other.PrvPTh != 0F) {
        PrvPTh = other.PrvPTh;
      }
      if (other.PrvPVe != 0F) {
        PrvPVe = other.PrvPVe;
      }
      if (other.PrvPRo != 0F) {
        PrvPRo = other.PrvPRo;
      }
      if (other.PrvXXCnt != 0) {
        PrvXXCnt = other.PrvXXCnt;
      }
      if (other.PrvPWidth != 0F) {
        PrvPWidth = other.PrvPWidth;
      }
      if (other.PrvVWidth != 0F) {
        PrvVWidth = other.PrvVWidth;
      }
      if (other.COptPnL != 0F) {
        COptPnL = other.COptPnL;
      }
      if (other.POptPnL != 0F) {
        POptPnL = other.POptPnL;
      }
      if (other.DUPrc != 0F) {
        DUPrc = other.DUPrc;
      }
      if (other.CDePnL != 0F) {
        CDePnL = other.CDePnL;
      }
      if (other.CGaPnL != 0F) {
        CGaPnL = other.CGaPnL;
      }
      if (other.CThPnL != 0F) {
        CThPnL = other.CThPnL;
      }
      if (other.CVePnL != 0F) {
        CVePnL = other.CVePnL;
      }
      if (other.CRoPnL != 0F) {
        CRoPnL = other.CRoPnL;
      }
      if (other.PDePnL != 0F) {
        PDePnL = other.PDePnL;
      }
      if (other.PGaPnL != 0F) {
        PGaPnL = other.PGaPnL;
      }
      if (other.PThPnL != 0F) {
        PThPnL = other.PThPnL;
      }
      if (other.PVePnL != 0F) {
        PVePnL = other.PVePnL;
      }
      if (other.PRoPnL != 0F) {
        PRoPnL = other.PRoPnL;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 872: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 896: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 925: {
            UMark = input.ReadFloat();
            break;
          }
          case 949: {
            Years = input.ReadFloat();
            break;
          }
          case 973: {
            Rate = input.ReadFloat();
            break;
          }
          case 997: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1021: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1045: {
            EventCnt = input.ReadFloat();
            break;
          }
          case 1069: {
            IEMove = input.ReadFloat();
            break;
          }
          case 1093: {
            HEMove = input.ReadFloat();
            break;
          }
          case 1117: {
            Strike = input.ReadFloat();
            break;
          }
          case 1141: {
            CIVol = input.ReadFloat();
            break;
          }
          case 1165: {
            PIVol = input.ReadFloat();
            break;
          }
          case 1189: {
            CSOpx = input.ReadFloat();
            break;
          }
          case 1213: {
            PSOpx = input.ReadFloat();
            break;
          }
          case 1237: {
            CDe = input.ReadFloat();
            break;
          }
          case 1261: {
            CGa = input.ReadFloat();
            break;
          }
          case 1285: {
            CTh = input.ReadFloat();
            break;
          }
          case 1309: {
            CVe = input.ReadFloat();
            break;
          }
          case 1333: {
            CRo = input.ReadFloat();
            break;
          }
          case 1357: {
            PDe = input.ReadFloat();
            break;
          }
          case 1381: {
            PGa = input.ReadFloat();
            break;
          }
          case 1405: {
            PTh = input.ReadFloat();
            break;
          }
          case 1429: {
            PVe = input.ReadFloat();
            break;
          }
          case 1453: {
            PRo = input.ReadFloat();
            break;
          }
          case 1472: {
            XxCnt = input.ReadInt32();
            break;
          }
          case 1501: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 1525: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 1549: {
            FixCIVol = input.ReadFloat();
            break;
          }
          case 1573: {
            FixPIVol = input.ReadFloat();
            break;
          }
          case 1597: {
            FixCSOpx = input.ReadFloat();
            break;
          }
          case 1621: {
            FixPSOpx = input.ReadFloat();
            break;
          }
          case 1645: {
            PrvUMark = input.ReadFloat();
            break;
          }
          case 1669: {
            PrvYears = input.ReadFloat();
            break;
          }
          case 1693: {
            PrvSDiv = input.ReadFloat();
            break;
          }
          case 1717: {
            PrvRate = input.ReadFloat();
            break;
          }
          case 1741: {
            PrvDDiv = input.ReadFloat();
            break;
          }
          case 1765: {
            PrvStrike = input.ReadFloat();
            break;
          }
          case 1789: {
            PrvEventCnt = input.ReadFloat();
            break;
          }
          case 1813: {
            PrvIEMove = input.ReadFloat();
            break;
          }
          case 1837: {
            PrvCIVol = input.ReadFloat();
            break;
          }
          case 1861: {
            PrvPIVol = input.ReadFloat();
            break;
          }
          case 1885: {
            PrvCSOpx = input.ReadFloat();
            break;
          }
          case 1909: {
            PrvPSOpx = input.ReadFloat();
            break;
          }
          case 1933: {
            PrvCDe = input.ReadFloat();
            break;
          }
          case 1957: {
            PrvCGa = input.ReadFloat();
            break;
          }
          case 1981: {
            PrvCTh = input.ReadFloat();
            break;
          }
          case 2005: {
            PrvCVe = input.ReadFloat();
            break;
          }
          case 2029: {
            PrvCRo = input.ReadFloat();
            break;
          }
          case 2053: {
            PrvPDe = input.ReadFloat();
            break;
          }
          case 2077: {
            PrvPGa = input.ReadFloat();
            break;
          }
          case 2101: {
            PrvPTh = input.ReadFloat();
            break;
          }
          case 2125: {
            PrvPVe = input.ReadFloat();
            break;
          }
          case 2149: {
            PrvPRo = input.ReadFloat();
            break;
          }
          case 2168: {
            PrvXXCnt = input.ReadInt32();
            break;
          }
          case 2197: {
            PrvPWidth = input.ReadFloat();
            break;
          }
          case 2221: {
            PrvVWidth = input.ReadFloat();
            break;
          }
          case 2245: {
            COptPnL = input.ReadFloat();
            break;
          }
          case 2269: {
            POptPnL = input.ReadFloat();
            break;
          }
          case 2293: {
            DUPrc = input.ReadFloat();
            break;
          }
          case 2317: {
            CDePnL = input.ReadFloat();
            break;
          }
          case 2341: {
            CGaPnL = input.ReadFloat();
            break;
          }
          case 2365: {
            CThPnL = input.ReadFloat();
            break;
          }
          case 2389: {
            CVePnL = input.ReadFloat();
            break;
          }
          case 2413: {
            CRoPnL = input.ReadFloat();
            break;
          }
          case 2437: {
            PDePnL = input.ReadFloat();
            break;
          }
          case 2461: {
            PGaPnL = input.ReadFloat();
            break;
          }
          case 2485: {
            PThPnL = input.ReadFloat();
            break;
          }
          case 2509: {
            PVePnL = input.ReadFloat();
            break;
          }
          case 2533: {
            PRoPnL = input.ReadFloat();
            break;
          }
          case 2554: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfacePerf.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 872: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 896: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 925: {
            UMark = input.ReadFloat();
            break;
          }
          case 949: {
            Years = input.ReadFloat();
            break;
          }
          case 973: {
            Rate = input.ReadFloat();
            break;
          }
          case 997: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1021: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1045: {
            EventCnt = input.ReadFloat();
            break;
          }
          case 1069: {
            IEMove = input.ReadFloat();
            break;
          }
          case 1093: {
            HEMove = input.ReadFloat();
            break;
          }
          case 1117: {
            Strike = input.ReadFloat();
            break;
          }
          case 1141: {
            CIVol = input.ReadFloat();
            break;
          }
          case 1165: {
            PIVol = input.ReadFloat();
            break;
          }
          case 1189: {
            CSOpx = input.ReadFloat();
            break;
          }
          case 1213: {
            PSOpx = input.ReadFloat();
            break;
          }
          case 1237: {
            CDe = input.ReadFloat();
            break;
          }
          case 1261: {
            CGa = input.ReadFloat();
            break;
          }
          case 1285: {
            CTh = input.ReadFloat();
            break;
          }
          case 1309: {
            CVe = input.ReadFloat();
            break;
          }
          case 1333: {
            CRo = input.ReadFloat();
            break;
          }
          case 1357: {
            PDe = input.ReadFloat();
            break;
          }
          case 1381: {
            PGa = input.ReadFloat();
            break;
          }
          case 1405: {
            PTh = input.ReadFloat();
            break;
          }
          case 1429: {
            PVe = input.ReadFloat();
            break;
          }
          case 1453: {
            PRo = input.ReadFloat();
            break;
          }
          case 1472: {
            XxCnt = input.ReadInt32();
            break;
          }
          case 1501: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 1525: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 1549: {
            FixCIVol = input.ReadFloat();
            break;
          }
          case 1573: {
            FixPIVol = input.ReadFloat();
            break;
          }
          case 1597: {
            FixCSOpx = input.ReadFloat();
            break;
          }
          case 1621: {
            FixPSOpx = input.ReadFloat();
            break;
          }
          case 1645: {
            PrvUMark = input.ReadFloat();
            break;
          }
          case 1669: {
            PrvYears = input.ReadFloat();
            break;
          }
          case 1693: {
            PrvSDiv = input.ReadFloat();
            break;
          }
          case 1717: {
            PrvRate = input.ReadFloat();
            break;
          }
          case 1741: {
            PrvDDiv = input.ReadFloat();
            break;
          }
          case 1765: {
            PrvStrike = input.ReadFloat();
            break;
          }
          case 1789: {
            PrvEventCnt = input.ReadFloat();
            break;
          }
          case 1813: {
            PrvIEMove = input.ReadFloat();
            break;
          }
          case 1837: {
            PrvCIVol = input.ReadFloat();
            break;
          }
          case 1861: {
            PrvPIVol = input.ReadFloat();
            break;
          }
          case 1885: {
            PrvCSOpx = input.ReadFloat();
            break;
          }
          case 1909: {
            PrvPSOpx = input.ReadFloat();
            break;
          }
          case 1933: {
            PrvCDe = input.ReadFloat();
            break;
          }
          case 1957: {
            PrvCGa = input.ReadFloat();
            break;
          }
          case 1981: {
            PrvCTh = input.ReadFloat();
            break;
          }
          case 2005: {
            PrvCVe = input.ReadFloat();
            break;
          }
          case 2029: {
            PrvCRo = input.ReadFloat();
            break;
          }
          case 2053: {
            PrvPDe = input.ReadFloat();
            break;
          }
          case 2077: {
            PrvPGa = input.ReadFloat();
            break;
          }
          case 2101: {
            PrvPTh = input.ReadFloat();
            break;
          }
          case 2125: {
            PrvPVe = input.ReadFloat();
            break;
          }
          case 2149: {
            PrvPRo = input.ReadFloat();
            break;
          }
          case 2168: {
            PrvXXCnt = input.ReadInt32();
            break;
          }
          case 2197: {
            PrvPWidth = input.ReadFloat();
            break;
          }
          case 2221: {
            PrvVWidth = input.ReadFloat();
            break;
          }
          case 2245: {
            COptPnL = input.ReadFloat();
            break;
          }
          case 2269: {
            POptPnL = input.ReadFloat();
            break;
          }
          case 2293: {
            DUPrc = input.ReadFloat();
            break;
          }
          case 2317: {
            CDePnL = input.ReadFloat();
            break;
          }
          case 2341: {
            CGaPnL = input.ReadFloat();
            break;
          }
          case 2365: {
            CThPnL = input.ReadFloat();
            break;
          }
          case 2389: {
            CVePnL = input.ReadFloat();
            break;
          }
          case 2413: {
            CRoPnL = input.ReadFloat();
            break;
          }
          case 2437: {
            PDePnL = input.ReadFloat();
            break;
          }
          case 2461: {
            PGaPnL = input.ReadFloat();
            break;
          }
          case 2485: {
            PThPnL = input.ReadFloat();
            break;
          }
          case 2509: {
            PVePnL = input.ReadFloat();
            break;
          }
          case 2533: {
            PRoPnL = input.ReadFloat();
            break;
          }
          case 2554: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveSurfacePerf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveSurfacePerf.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          perfSurfType_ = other.perfSurfType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "perf_surf_type" field.</summary>
        public const int PerfSurfTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.PerfSurfaceType perfSurfType_ = global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified;
        /// <summary>
        /// Preferred surface type: None; Live; PriorDay
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PerfSurfaceType PerfSurfType {
          get { return perfSurfType_; }
          set {
            perfSurfType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (PerfSurfType != other.PerfSurfType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) hash ^= PerfSurfType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            PerfSurfType = other.PerfSurfType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                PerfSurfType = (global::Spiderrock.Protobuf.PerfSurfaceType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                PerfSurfType = (global::Spiderrock.Protobuf.PerfSurfaceType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
