// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRMLinkAnalytics/LiveExpirySurface.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRMLinkAnalytics/LiveExpirySurface.proto</summary>
  public static partial class LiveExpirySurfaceReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRMLinkAnalytics/LiveExpirySurface.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveExpirySurfaceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFQcm90b2J1Zi9TUk1MaW5rQW5hbHl0aWNzL0xpdmVFeHBpcnlTdXJmYWNl",
            "LnByb3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1v",
            "bi5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKQFgoR",
            "TGl2ZUV4cGlyeVN1cmZhY2USMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgLMisuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5MaXZlRXhwaXJ5U3VyZmFjZS5QS2V5Eg0KBXVf",
            "cHJjGGQgASgBEhQKDHVfcHJjX2RyaXZlchhlIAEoARIPCgZpX2RheXMYmgEg",
            "ASgFEg0KBXllYXJzGGYgASgCEgwKBHJhdGUYZyABKAISDwoHYXRtX3ZvbBhp",
            "IAEoAhIQCgdhdG1fY2VuGJsBIAEoAhIRCglhdG1fc2xvcGUYaiABKAISFAoL",
            "YXRtX3NrZXdfeVkYnAEgASgCEhYKDWF0bV92UmVzaWR1YWwYnQEgASgCEhEK",
            "CGF0bV9zRGl2GJ4BIAEoAhIzCgpiYXNpc19lS2V5GJ8BIAEoCzIeLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5EjQKD2Jhc2lzX3RpbWVzdGFtcBig",
            "ASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIKCmF4aXNfZlVQ",
            "cmMYbCABKAISEwoLYXhpc192b2xfclQYbSABKAISDgoGeF9tdWx0GG8gASgC",
            "Eg8KB3hfc2hpZnQYcCABKAISEQoJc2tld19tdWx0GG4gASgCEhkKEG1heF9y",
            "ZXNpZHVhbF9lcnIYpAEgASgCEhEKCGNwX2Fkal9hGKUBIAEoAhIRCghjcF9h",
            "ZGpfYhimASABKAISEQoIY3BfYWRqX2MYpwEgASgCEhcKDmNwX2Fkal9yZWZf",
            "dm9sGKgBIAEoAhIvCgZ0aWNrZXIYqQEgASgLMh4uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5UaWNrZXJLZXkSLQoEZmtleRiqASABKAsyHi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkV4cGlyeUtleRI5ChB1X3ByY19kcml2ZXJfa2V5GKsBIAEoCzIe",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5EjwKEXVfcHJjX2RyaXZl",
            "cl90eXBlGKwBIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5",
            "cGUSDQoEZGRpdhitASABKAISEAoHZGRpdl9wdhiuASABKAISNQoLZGRpdl9z",
            "b3VyY2UYrwEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5ERGl2U291cmNl",
            "EhUKDHN5bWJvbF9yYXRpbxiwASABKAISMwoHZXhfdHlwZRixASABKA4yIS5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkV4ZXJjaXNlVHlwZRI3Cgptb2RlbF90eXBl",
            "GLIBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuQ2FsY01vZGVsVHlwZRI3",
            "CgpwcmljZV90eXBlGLMBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuQ2Fs",
            "Y1ByaWNlVHlwZRIRCghlYXJuX2NudBi0ASABKAISFQoMZWFybl9jbnRfYWRq",
            "GLUBIAEoAhI7Cg5tb25leW5lc3NfdHlwZRi2ASABKA4yIi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk1vbmV5bmVzc1R5cGUSPgoQcHJpY2VfcXVvdGVfdHlwZRi3",
            "ASABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlByaWNlUXVvdGVUeXBlEhUK",
            "DGF0bV92b2xfaGlzdBi4ASABKAISFQoMYXRtX2Nlbl9oaXN0GLkBIAEoAhIU",
            "Cgt1X2JldGFfaGlzdBi6ASABKAISDwoGZV9tb3ZlGLsBIAEoAhIUCgtlX21v",
            "dmVfaGlzdBi8ASABKAISEgoJbWluX3hBeGlzGL0BIAEoAhISCgltYXhfeEF4",
            "aXMYvgEgASgCEhEKCHN5bl9zcG90GL8BIAEoAhISCglzeW5fY2FycnkYwAEg",
            "ASgCEhQKC3VfcHJjX3JhdGlvGMEBIAEoARIQCgdwX3dpZHRoGMIBIAEoAhIQ",
            "Cgd2X3dpZHRoGMMBIAEoAhIOCgVjX2NudBjEASABKA0SDgoFcF9jbnQYxQEg",
            "ASgNEjQKD2hhc19icmFja2V0X21pbhjGASABKA4yGi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlllc05vEjIKDWhhc19taW5fcG9pbnQYxwEgASgOMhouc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5ZZXNObxI0Cg9oYXNfeE11bHRfYUJGaXQYyAEgASgO",
            "Mhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxIbChJ4X211bHRfYUJGaXRf",
            "ZXJyb3IYyQEgASgBEjYKEWhhc19za2V3X211bHRfZml0GMoBIAEoDjIaLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuWWVzTm8SHAoTc2tld19tdWx0X2ZpdF9lcnJv",
            "chjLASABKAESEwoKY19iaWRfbWlzcxjMASABKAUSEwoKY19hc2tfbWlzcxjN",
            "ASABKAUSEwoKcF9iaWRfbWlzcxjOASABKAUSEwoKcF9hc2tfbWlzcxjPASAB",
            "KAUSEgoJZml0X3Njb3JlGNABIAEoAhIWCg1jdW1fZml0X3Njb3JlGNEBIAEo",
            "AhIWCg1udW1fcHJpbnRzX2REGNQBIAEoBRIXCg5hdmdfcHJ0X2Vycl9kRBjV",
            "ASABKAISFwoOc3RkX3BydF9lcnJfZEQY1gEgASgCEhYKDW51bV9wcmludHNf",
            "ZE4Y1wEgASgFEhcKDmF2Z19wcnRfZXJyX2ROGNgBIAEoAhIXCg5zdGRfcHJ0",
            "X2Vycl9kThjZASABKAISFgoNbnVtX3ByaW50c19hVBjaASABKAUSFwoOYXZn",
            "X3BydF9lcnJfYVQY2wEgASgCEhcKDnN0ZF9wcnRfZXJyX2FUGNwBIAEoAhIW",
            "Cg1udW1fcHJpbnRzX3VQGN0BIAEoBRIXCg5hdmdfcHJ0X2Vycl91UBjeASAB",
            "KAISFwoOc3RkX3BydF9lcnJfdVAY3wEgASgCEhYKDW51bV9wcmludHNfZFUY",
            "4AEgASgFEhcKDmF2Z19wcnRfZXJyX2RVGOEBIAEoAhIXCg5zdGRfcHJ0X2Vy",
            "cl9kVRjiASABKAISFAoLZml0X2NvdW50ZXIY0gEgASgFEj8KEHRyYWRlYWJs",
            "ZV9zdGF0dXMYlgEgASgOMiQuc3BpZGVycm9jay5wcm90b2J1Zi5UcmFkZWFi",
            "bGVTdGF0dXMSNwoMbWFya2V0X3BoYXNlGOMBIAEoDjIgLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuTWFya2V0UGhhc2USQgoSc3VyZmFjZV9maXRfcmVzdWx0GNMB",
            "IAEoDjIlLnNwaWRlcnJvY2sucHJvdG9idWYuU3VyZmFjZUZpdFJlc3VsdBIu",
            "Cgl0aW1lc3RhbXAYmQEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBJCCghyZXNpZHVhbBihASADKAsyLy5zcGlkZXJyb2NrLnByb3RvYnVmLkxp",
            "dmVFeHBpcnlTdXJmYWNlLlJlc2lkdWFsGnEKBFBLZXkSLAoEZWtleRgKIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5EjsKDHN1cmZhY2Vf",
            "dHlwZRgLIAEoDjIlLnNwaWRlcnJvY2sucHJvdG9idWYuU3VyZmFjZUN1cnZl",
            "VHlwZRoiCghSZXNpZHVhbBIKCgF4GKIBIAEoAhIKCgF5GKMBIAEoAmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveExpirySurface), global::Spiderrock.Protobuf.LiveExpirySurface.Parser, new[]{ "Meta", "Pkey", "UPrc", "UPrcDriver", "IDays", "Years", "Rate", "AtmVol", "AtmCen", "AtmSlope", "AtmSkewYY", "AtmVResidual", "AtmSDiv", "BasisEKey", "BasisTimestamp", "AxisFUPrc", "AxisVolRT", "XMult", "XShift", "SkewMult", "MaxResidualErr", "CpAdjA", "CpAdjB", "CpAdjC", "CpAdjRefVol", "Ticker", "Fkey", "UPrcDriverKey", "UPrcDriverType", "Ddiv", "DdivPv", "DdivSource", "SymbolRatio", "ExType", "ModelType", "PriceType", "EarnCnt", "EarnCntAdj", "MoneynessType", "PriceQuoteType", "AtmVolHist", "AtmCenHist", "UBetaHist", "EMove", "EMoveHist", "MinXAxis", "MaxXAxis", "SynSpot", "SynCarry", "UPrcRatio", "PWidth", "VWidth", "CCnt", "PCnt", "HasBracketMin", "HasMinPoint", "HasXMultABFit", "XMultABFitError", "HasSkewMultFit", "SkewMultFitError", "CBidMiss", "CAskMiss", "PBidMiss", "PAskMiss", "FitScore", "CumFitScore", "NumPrintsDD", "AvgPrtErrDD", "StdPrtErrDD", "NumPrintsDN", "AvgPrtErrDN", "StdPrtErrDN", "NumPrintsAT", "AvgPrtErrAT", "StdPrtErrAT", "NumPrintsUP", "AvgPrtErrUP", "StdPrtErrUP", "NumPrintsDU", "AvgPrtErrDU", "StdPrtErrDU", "FitCounter", "TradeableStatus", "MarketPhase", "SurfaceFitResult", "Timestamp", "Residual" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey), global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey.Parser, new[]{ "Ekey", "SurfaceType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual), global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual.Parser, new[]{ "X", "Y" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///LiveExpirySurface (surfaceType = 'Live') records are computed and publish continuously during trading hours and represent a current best implied volatility market fit.
  ///SurfaceType = 'PriorDay' records contain the `closing surface record from the prior trading period (usually from just before the last main session close).
  /// </summary>
  public sealed partial class LiveExpirySurface : pb::IMessage<LiveExpirySurface>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveExpirySurface> _parser = new pb::MessageParser<LiveExpirySurface>(() => new LiveExpirySurface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveExpirySurface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveExpirySurfaceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveExpirySurface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveExpirySurface(LiveExpirySurface other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      uPrc_ = other.uPrc_;
      uPrcDriver_ = other.uPrcDriver_;
      iDays_ = other.iDays_;
      years_ = other.years_;
      rate_ = other.rate_;
      atmVol_ = other.atmVol_;
      atmCen_ = other.atmCen_;
      atmSlope_ = other.atmSlope_;
      atmSkewYY_ = other.atmSkewYY_;
      atmVResidual_ = other.atmVResidual_;
      atmSDiv_ = other.atmSDiv_;
      basisEKey_ = other.basisEKey_ != null ? other.basisEKey_.Clone() : null;
      basisTimestamp_ = other.basisTimestamp_ != null ? other.basisTimestamp_.Clone() : null;
      axisFUPrc_ = other.axisFUPrc_;
      axisVolRT_ = other.axisVolRT_;
      xMult_ = other.xMult_;
      xShift_ = other.xShift_;
      skewMult_ = other.skewMult_;
      maxResidualErr_ = other.maxResidualErr_;
      cpAdjA_ = other.cpAdjA_;
      cpAdjB_ = other.cpAdjB_;
      cpAdjC_ = other.cpAdjC_;
      cpAdjRefVol_ = other.cpAdjRefVol_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
      uPrcDriverKey_ = other.uPrcDriverKey_ != null ? other.uPrcDriverKey_.Clone() : null;
      uPrcDriverType_ = other.uPrcDriverType_;
      ddiv_ = other.ddiv_;
      ddivPv_ = other.ddivPv_;
      ddivSource_ = other.ddivSource_;
      symbolRatio_ = other.symbolRatio_;
      exType_ = other.exType_;
      modelType_ = other.modelType_;
      priceType_ = other.priceType_;
      earnCnt_ = other.earnCnt_;
      earnCntAdj_ = other.earnCntAdj_;
      moneynessType_ = other.moneynessType_;
      priceQuoteType_ = other.priceQuoteType_;
      atmVolHist_ = other.atmVolHist_;
      atmCenHist_ = other.atmCenHist_;
      uBetaHist_ = other.uBetaHist_;
      eMove_ = other.eMove_;
      eMoveHist_ = other.eMoveHist_;
      minXAxis_ = other.minXAxis_;
      maxXAxis_ = other.maxXAxis_;
      synSpot_ = other.synSpot_;
      synCarry_ = other.synCarry_;
      uPrcRatio_ = other.uPrcRatio_;
      pWidth_ = other.pWidth_;
      vWidth_ = other.vWidth_;
      cCnt_ = other.cCnt_;
      pCnt_ = other.pCnt_;
      hasBracketMin_ = other.hasBracketMin_;
      hasMinPoint_ = other.hasMinPoint_;
      hasXMultABFit_ = other.hasXMultABFit_;
      xMultABFitError_ = other.xMultABFitError_;
      hasSkewMultFit_ = other.hasSkewMultFit_;
      skewMultFitError_ = other.skewMultFitError_;
      cBidMiss_ = other.cBidMiss_;
      cAskMiss_ = other.cAskMiss_;
      pBidMiss_ = other.pBidMiss_;
      pAskMiss_ = other.pAskMiss_;
      fitScore_ = other.fitScore_;
      cumFitScore_ = other.cumFitScore_;
      numPrintsDD_ = other.numPrintsDD_;
      avgPrtErrDD_ = other.avgPrtErrDD_;
      stdPrtErrDD_ = other.stdPrtErrDD_;
      numPrintsDN_ = other.numPrintsDN_;
      avgPrtErrDN_ = other.avgPrtErrDN_;
      stdPrtErrDN_ = other.stdPrtErrDN_;
      numPrintsAT_ = other.numPrintsAT_;
      avgPrtErrAT_ = other.avgPrtErrAT_;
      stdPrtErrAT_ = other.stdPrtErrAT_;
      numPrintsUP_ = other.numPrintsUP_;
      avgPrtErrUP_ = other.avgPrtErrUP_;
      stdPrtErrUP_ = other.stdPrtErrUP_;
      numPrintsDU_ = other.numPrintsDU_;
      avgPrtErrDU_ = other.avgPrtErrDU_;
      stdPrtErrDU_ = other.stdPrtErrDU_;
      fitCounter_ = other.fitCounter_;
      tradeableStatus_ = other.tradeableStatus_;
      marketPhase_ = other.marketPhase_;
      surfaceFitResult_ = other.surfaceFitResult_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      residual_ = other.residual_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveExpirySurface Clone() {
      return new LiveExpirySurface(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 100;
    private double uPrc_;
    /// <summary>
    /// effective uPrc used for surface fitting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver" field.</summary>
    public const int UPrcDriverFieldNumber = 101;
    private double uPrcDriver_;
    /// <summary>
    /// underlier driver (mid-market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcDriver {
      get { return uPrcDriver_; }
      set {
        uPrcDriver_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 154;
    private int iDays_;
    /// <summary>
    /// interest days to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 102;
    private float years_;
    /// <summary>
    /// volatility time to expiration (in years)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 103;
    private float rate_;
    /// <summary>
    /// term interest rate to expiry (discount rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 105;
    private float atmVol_;
    /// <summary>
    /// atm surface volatility (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen" field.</summary>
    public const int AtmCenFieldNumber = 155;
    private float atmCen_;
    /// <summary>
    /// censored atm surface volatility (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCen {
      get { return atmCen_; }
      set {
        atmCen_ = value;
      }
    }

    /// <summary>Field number for the "atm_slope" field.</summary>
    public const int AtmSlopeFieldNumber = 106;
    private float atmSlope_;
    /// <summary>
    /// volatility surface slope (dVol / dXAxis) (xAxis=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmSlope {
      get { return atmSlope_; }
      set {
        atmSlope_ = value;
      }
    }

    /// <summary>Field number for the "atm_skew_yY" field.</summary>
    public const int AtmSkewYYFieldNumber = 156;
    private float atmSkewYY_;
    /// <summary>
    /// skewFn @ xAxis = 0 (sticky surface static point)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmSkewYY {
      get { return atmSkewYY_; }
      set {
        atmSkewYY_ = value;
      }
    }

    /// <summary>Field number for the "atm_vResidual" field.</summary>
    public const int AtmVResidualFieldNumber = 157;
    private float atmVResidual_;
    /// <summary>
    /// vResidual @ xAxis = 0 (sticky surface static point)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVResidual {
      get { return atmVResidual_; }
      set {
        atmVResidual_ = value;
      }
    }

    /// <summary>Field number for the "atm_sDiv" field.</summary>
    public const int AtmSDivFieldNumber = 158;
    private float atmSDiv_;
    /// <summary>
    /// atm continous stock dividend (borrow rate) (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmSDiv {
      get { return atmSDiv_; }
      set {
        atmSDiv_ = value;
      }
    }

    /// <summary>Field number for the "basis_eKey" field.</summary>
    public const int BasisEKeyFieldNumber = 159;
    private global::Spiderrock.Protobuf.ExpiryKey basisEKey_;
    /// <summary>
    /// LiveBasisCurve.pkey.ekey record that defines BasisSkewFn below.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey BasisEKey {
      get { return basisEKey_; }
      set {
        basisEKey_ = value;
      }
    }

    /// <summary>Field number for the "basis_timestamp" field.</summary>
    public const int BasisTimestampFieldNumber = 160;
    private global::Google.Protobuf.WellKnownTypes.Timestamp basisTimestamp_;
    /// <summary>
    /// LiveBasisCurve.timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp BasisTimestamp {
      get { return basisTimestamp_; }
      set {
        basisTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "axis_fUPrc" field.</summary>
    public const int AxisFUPrcFieldNumber = 108;
    private float axisFUPrc_;
    /// <summary>
    /// axis FwdUPrc (fwd underlying price used to compute xAxis)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisFUPrc {
      get { return axisFUPrc_; }
      set {
        axisFUPrc_ = value;
      }
    }

    /// <summary>Field number for the "axis_vol_rT" field.</summary>
    public const int AxisVolRTFieldNumber = 109;
    private float axisVolRT_;
    /// <summary>
    /// axis VolRT value used to compute xAxis (usually equal to skewMult) (value at curve min point)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisVolRT {
      get { return axisVolRT_; }
      set {
        axisVolRT_ = value;
      }
    }

    /// <summary>Field number for the "x_mult" field.</summary>
    public const int XMultFieldNumber = 111;
    private float xMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XMult {
      get { return xMult_; }
      set {
        xMult_ = value;
      }
    }

    /// <summary>Field number for the "x_shift" field.</summary>
    public const int XShiftFieldNumber = 112;
    private float xShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XShift {
      get { return xShift_; }
      set {
        xShift_ = value;
      }
    }

    /// <summary>Field number for the "skew_mult" field.</summary>
    public const int SkewMultFieldNumber = 110;
    private float skewMult_;
    /// <summary>
    /// sVol = skewMult * BasisSkewFn(xMult * (xAxis - xShift))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewMult {
      get { return skewMult_; }
      set {
        skewMult_ = value;
      }
    }

    /// <summary>Field number for the "max_residual_err" field.</summary>
    public const int MaxResidualErrFieldNumber = 164;
    private float maxResidualErr_;
    /// <summary>
    /// largest remain residual error (in premium points)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxResidualErr {
      get { return maxResidualErr_; }
      set {
        maxResidualErr_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_a" field.</summary>
    public const int CpAdjAFieldNumber = 165;
    private float cpAdjA_;
    /// <summary>
    /// cpAdj = cpAdjA + cpXDe * cpAdjB + cpXDe * cpXDe * cpAdjC [cpAdj is either sdiv or uPrcRatio]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjA {
      get { return cpAdjA_; }
      set {
        cpAdjA_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_b" field.</summary>
    public const int CpAdjBFieldNumber = 166;
    private float cpAdjB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjB {
      get { return cpAdjB_; }
      set {
        cpAdjB_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_c" field.</summary>
    public const int CpAdjCFieldNumber = 167;
    private float cpAdjC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjC {
      get { return cpAdjC_; }
      set {
        cpAdjC_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_ref_vol" field.</summary>
    public const int CpAdjRefVolFieldNumber = 168;
    private float cpAdjRefVol_;
    /// <summary>
    /// cpXDe = 0.5 - BS_cDe(uPrc, strike, cpAdjRefVol, years, rate, sdiv=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjRefVol {
      get { return cpAdjRefVol_; }
      set {
        cpAdjRefVol_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 169;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying stock key that this option expiration attaches to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "fkey" field.</summary>
    public const int FkeyFieldNumber = 170;
    private global::Spiderrock.Protobuf.ExpiryKey fkey_;
    /// <summary>
    /// underlying future key (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey Fkey {
      get { return fkey_; }
      set {
        fkey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_key" field.</summary>
    public const int UPrcDriverKeyFieldNumber = 171;
    private global::Spiderrock.Protobuf.ExpiryKey uPrcDriverKey_;
    /// <summary>
    /// underlier driver key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UPrcDriverKey {
      get { return uPrcDriverKey_; }
      set {
        uPrcDriverKey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_type" field.</summary>
    public const int UPrcDriverTypeFieldNumber = 172;
    private global::Spiderrock.Protobuf.SpdrKeyType uPrcDriverType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// underlier driver key type (stock or future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UPrcDriverType {
      get { return uPrcDriverType_; }
      set {
        uPrcDriverType_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 173;
    private float ddiv_;
    /// <summary>
    /// (expected) cumulative discrete dividend $ amounts prior to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 174;
    private float ddivPv_;
    /// <summary>
    /// (expected) cumulative npv of discrete dividend $ amounts prior to expiration (SR global rate curve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_source" field.</summary>
    public const int DdivSourceFieldNumber = 175;
    private global::Spiderrock.Protobuf.DDivSource ddivSource_ = global::Spiderrock.Protobuf.DDivSource.Unspecified;
    /// <summary>
    /// Forecast if any of the dividends prior to expiry are forecast rather than announced
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DDivSource DdivSource {
      get { return ddivSource_; }
      set {
        ddivSource_ = value;
      }
    }

    /// <summary>Field number for the "symbol_ratio" field.</summary>
    public const int SymbolRatioFieldNumber = 176;
    private float symbolRatio_;
    /// <summary>
    /// underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymbolRatio {
      get { return symbolRatio_; }
      set {
        symbolRatio_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 177;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// exercise type (American or European)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 178;
    private global::Spiderrock.Protobuf.CalcModelType modelType_ = global::Spiderrock.Protobuf.CalcModelType.Unspecified;
    /// <summary>
    /// option pricing model used for price calcs (Normal, LogNormal, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 179;
    private global::Spiderrock.Protobuf.CalcPriceType priceType_ = global::Spiderrock.Protobuf.CalcPriceType.Unspecified;
    /// <summary>
    /// Equity has independent sdiv and rate, Future has sdiv = rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcPriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt" field.</summary>
    public const int EarnCntFieldNumber = 180;
    private float earnCnt_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCnt {
      get { return earnCnt_; }
      set {
        earnCnt_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt_adj" field.</summary>
    public const int EarnCntAdjFieldNumber = 181;
    private float earnCntAdj_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCntAdj {
      get { return earnCntAdj_; }
      set {
        earnCntAdj_ = value;
      }
    }

    /// <summary>Field number for the "moneyness_type" field.</summary>
    public const int MoneynessTypeFieldNumber = 182;
    private global::Spiderrock.Protobuf.MoneynessType moneynessType_ = global::Spiderrock.Protobuf.MoneynessType.Unspecified;
    /// <summary>
    /// moneyness (xAxis) convention
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MoneynessType MoneynessType {
      get { return moneynessType_; }
      set {
        moneynessType_ = value;
      }
    }

    /// <summary>Field number for the "price_quote_type" field.</summary>
    public const int PriceQuoteTypeFieldNumber = 183;
    private global::Spiderrock.Protobuf.PriceQuoteType priceQuoteType_ = global::Spiderrock.Protobuf.PriceQuoteType.Unspecified;
    /// <summary>
    /// Price or Vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceQuoteType PriceQuoteType {
      get { return priceQuoteType_; }
      set {
        priceQuoteType_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol_hist" field.</summary>
    public const int AtmVolHistFieldNumber = 184;
    private float atmVolHist_;
    /// <summary>
    /// historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVolHist {
      get { return atmVolHist_; }
      set {
        atmVolHist_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen_hist" field.</summary>
    public const int AtmCenHistFieldNumber = 185;
    private float atmCenHist_;
    /// <summary>
    /// censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCenHist {
      get { return atmCenHist_; }
      set {
        atmCenHist_ = value;
      }
    }

    /// <summary>Field number for the "u_beta_hist" field.</summary>
    public const int UBetaHistFieldNumber = 186;
    private float uBetaHist_;
    /// <summary>
    /// beta (this underlier vs basis underlier; T + 1 week)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UBetaHist {
      get { return uBetaHist_; }
      set {
        uBetaHist_ = value;
      }
    }

    /// <summary>Field number for the "e_move" field.</summary>
    public const int EMoveFieldNumber = 187;
    private float eMove_;
    /// <summary>
    /// implied earnings move (from LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMove {
      get { return eMove_; }
      set {
        eMove_ = value;
      }
    }

    /// <summary>Field number for the "e_move_hist" field.</summary>
    public const int EMoveHistFieldNumber = 188;
    private float eMoveHist_;
    /// <summary>
    /// historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMoveHist {
      get { return eMoveHist_; }
      set {
        eMoveHist_ = value;
      }
    }

    /// <summary>Field number for the "min_xAxis" field.</summary>
    public const int MinXAxisFieldNumber = 189;
    private float minXAxis_;
    /// <summary>
    /// minimum xAxis value; left most point with a valid supporting strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinXAxis {
      get { return minXAxis_; }
      set {
        minXAxis_ = value;
      }
    }

    /// <summary>Field number for the "max_xAxis" field.</summary>
    public const int MaxXAxisFieldNumber = 190;
    private float maxXAxis_;
    /// <summary>
    /// maximum xAxis value; right most point with a valid supporting strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxXAxis {
      get { return maxXAxis_; }
      set {
        maxXAxis_ = value;
      }
    }

    /// <summary>Field number for the "syn_spot" field.</summary>
    public const int SynSpotFieldNumber = 191;
    private float synSpot_;
    /// <summary>
    /// synthetic spot price (future style pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SynSpot {
      get { return synSpot_; }
      set {
        synSpot_ = value;
      }
    }

    /// <summary>Field number for the "syn_carry" field.</summary>
    public const int SynCarryFieldNumber = 192;
    private float synCarry_;
    /// <summary>
    /// synthetic carry rate (future style pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SynCarry {
      get { return synCarry_; }
      set {
        synCarry_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 193;
    private double uPrcRatio_;
    /// <summary>
    /// uPrcAdj = uPrc * uPrcRatioFit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "p_width" field.</summary>
    public const int PWidthFieldNumber = 194;
    private float pWidth_;
    /// <summary>
    /// minimum mkt premium width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PWidth {
      get { return pWidth_; }
      set {
        pWidth_ = value;
      }
    }

    /// <summary>Field number for the "v_width" field.</summary>
    public const int VWidthFieldNumber = 195;
    private float vWidth_;
    /// <summary>
    /// minimum mkt volatility width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VWidth {
      get { return vWidth_; }
      set {
        vWidth_ = value;
      }
    }

    /// <summary>Field number for the "c_cnt" field.</summary>
    public const int CCntFieldNumber = 196;
    private uint cCnt_;
    /// <summary>
    /// num call strikes in base fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CCnt {
      get { return cCnt_; }
      set {
        cCnt_ = value;
      }
    }

    /// <summary>Field number for the "p_cnt" field.</summary>
    public const int PCntFieldNumber = 197;
    private uint pCnt_;
    /// <summary>
    /// num put strikes in base fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PCnt {
      get { return pCnt_; }
      set {
        pCnt_ = value;
      }
    }

    /// <summary>Field number for the "has_bracket_min" field.</summary>
    public const int HasBracketMinFieldNumber = 198;
    private global::Spiderrock.Protobuf.YesNo hasBracketMin_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasBracketMin {
      get { return hasBracketMin_; }
      set {
        hasBracketMin_ = value;
      }
    }

    /// <summary>Field number for the "has_min_point" field.</summary>
    public const int HasMinPointFieldNumber = 199;
    private global::Spiderrock.Protobuf.YesNo hasMinPoint_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasMinPoint {
      get { return hasMinPoint_; }
      set {
        hasMinPoint_ = value;
      }
    }

    /// <summary>Field number for the "has_xMult_aBFit" field.</summary>
    public const int HasXMultABFitFieldNumber = 200;
    private global::Spiderrock.Protobuf.YesNo hasXMultABFit_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasXMultABFit {
      get { return hasXMultABFit_; }
      set {
        hasXMultABFit_ = value;
      }
    }

    /// <summary>Field number for the "x_mult_aBFit_error" field.</summary>
    public const int XMultABFitErrorFieldNumber = 201;
    private double xMultABFitError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XMultABFitError {
      get { return xMultABFitError_; }
      set {
        xMultABFitError_ = value;
      }
    }

    /// <summary>Field number for the "has_skew_mult_fit" field.</summary>
    public const int HasSkewMultFitFieldNumber = 202;
    private global::Spiderrock.Protobuf.YesNo hasSkewMultFit_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasSkewMultFit {
      get { return hasSkewMultFit_; }
      set {
        hasSkewMultFit_ = value;
      }
    }

    /// <summary>Field number for the "skew_mult_fit_error" field.</summary>
    public const int SkewMultFitErrorFieldNumber = 203;
    private double skewMultFitError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SkewMultFitError {
      get { return skewMultFitError_; }
      set {
        skewMultFitError_ = value;
      }
    }

    /// <summary>Field number for the "c_bid_miss" field.</summary>
    public const int CBidMissFieldNumber = 204;
    private int cBidMiss_;
    /// <summary>
    /// number of call bid violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CBidMiss {
      get { return cBidMiss_; }
      set {
        cBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "c_ask_miss" field.</summary>
    public const int CAskMissFieldNumber = 205;
    private int cAskMiss_;
    /// <summary>
    /// number of call ask violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CAskMiss {
      get { return cAskMiss_; }
      set {
        cAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_bid_miss" field.</summary>
    public const int PBidMissFieldNumber = 206;
    private int pBidMiss_;
    /// <summary>
    /// number of put bid violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PBidMiss {
      get { return pBidMiss_; }
      set {
        pBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_ask_miss" field.</summary>
    public const int PAskMissFieldNumber = 207;
    private int pAskMiss_;
    /// <summary>
    /// number of put ask violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PAskMiss {
      get { return pAskMiss_; }
      set {
        pAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "fit_score" field.</summary>
    public const int FitScoreFieldNumber = 208;
    private float fitScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitScore {
      get { return fitScore_; }
      set {
        fitScore_ = value;
      }
    }

    /// <summary>Field number for the "cum_fit_score" field.</summary>
    public const int CumFitScoreFieldNumber = 209;
    private float cumFitScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumFitScore {
      get { return cumFitScore_; }
      set {
        cumFitScore_ = value;
      }
    }

    /// <summary>Field number for the "num_prints_dD" field.</summary>
    public const int NumPrintsDDFieldNumber = 212;
    private int numPrintsDD_;
    /// <summary>
    /// cpXDe &lt; -0.45
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintsDD {
      get { return numPrintsDD_; }
      set {
        numPrintsDD_ = value;
      }
    }

    /// <summary>Field number for the "avg_prt_err_dD" field.</summary>
    public const int AvgPrtErrDDFieldNumber = 213;
    private float avgPrtErrDD_;
    /// <summary>
    /// avg: prtPrc - surfacePrc (AUTO ONLY)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgPrtErrDD {
      get { return avgPrtErrDD_; }
      set {
        avgPrtErrDD_ = value;
      }
    }

    /// <summary>Field number for the "std_prt_err_dD" field.</summary>
    public const int StdPrtErrDDFieldNumber = 214;
    private float stdPrtErrDD_;
    /// <summary>
    /// std: prtPrc - surfacePrc (AUTO ONLY)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdPrtErrDD {
      get { return stdPrtErrDD_; }
      set {
        stdPrtErrDD_ = value;
      }
    }

    /// <summary>Field number for the "num_prints_dN" field.</summary>
    public const int NumPrintsDNFieldNumber = 215;
    private int numPrintsDN_;
    /// <summary>
    /// cpXDe: [-0.45, -0.15)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintsDN {
      get { return numPrintsDN_; }
      set {
        numPrintsDN_ = value;
      }
    }

    /// <summary>Field number for the "avg_prt_err_dN" field.</summary>
    public const int AvgPrtErrDNFieldNumber = 216;
    private float avgPrtErrDN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgPrtErrDN {
      get { return avgPrtErrDN_; }
      set {
        avgPrtErrDN_ = value;
      }
    }

    /// <summary>Field number for the "std_prt_err_dN" field.</summary>
    public const int StdPrtErrDNFieldNumber = 217;
    private float stdPrtErrDN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdPrtErrDN {
      get { return stdPrtErrDN_; }
      set {
        stdPrtErrDN_ = value;
      }
    }

    /// <summary>Field number for the "num_prints_aT" field.</summary>
    public const int NumPrintsATFieldNumber = 218;
    private int numPrintsAT_;
    /// <summary>
    /// cpXDe: [-0.15, +0.15]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintsAT {
      get { return numPrintsAT_; }
      set {
        numPrintsAT_ = value;
      }
    }

    /// <summary>Field number for the "avg_prt_err_aT" field.</summary>
    public const int AvgPrtErrATFieldNumber = 219;
    private float avgPrtErrAT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgPrtErrAT {
      get { return avgPrtErrAT_; }
      set {
        avgPrtErrAT_ = value;
      }
    }

    /// <summary>Field number for the "std_prt_err_aT" field.</summary>
    public const int StdPrtErrATFieldNumber = 220;
    private float stdPrtErrAT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdPrtErrAT {
      get { return stdPrtErrAT_; }
      set {
        stdPrtErrAT_ = value;
      }
    }

    /// <summary>Field number for the "num_prints_uP" field.</summary>
    public const int NumPrintsUPFieldNumber = 221;
    private int numPrintsUP_;
    /// <summary>
    /// cpXDe: (+0.15, +0.45]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintsUP {
      get { return numPrintsUP_; }
      set {
        numPrintsUP_ = value;
      }
    }

    /// <summary>Field number for the "avg_prt_err_uP" field.</summary>
    public const int AvgPrtErrUPFieldNumber = 222;
    private float avgPrtErrUP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgPrtErrUP {
      get { return avgPrtErrUP_; }
      set {
        avgPrtErrUP_ = value;
      }
    }

    /// <summary>Field number for the "std_prt_err_uP" field.</summary>
    public const int StdPrtErrUPFieldNumber = 223;
    private float stdPrtErrUP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdPrtErrUP {
      get { return stdPrtErrUP_; }
      set {
        stdPrtErrUP_ = value;
      }
    }

    /// <summary>Field number for the "num_prints_dU" field.</summary>
    public const int NumPrintsDUFieldNumber = 224;
    private int numPrintsDU_;
    /// <summary>
    /// cpXDe > +0.45
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintsDU {
      get { return numPrintsDU_; }
      set {
        numPrintsDU_ = value;
      }
    }

    /// <summary>Field number for the "avg_prt_err_dU" field.</summary>
    public const int AvgPrtErrDUFieldNumber = 225;
    private float avgPrtErrDU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgPrtErrDU {
      get { return avgPrtErrDU_; }
      set {
        avgPrtErrDU_ = value;
      }
    }

    /// <summary>Field number for the "std_prt_err_dU" field.</summary>
    public const int StdPrtErrDUFieldNumber = 226;
    private float stdPrtErrDU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdPrtErrDU {
      get { return stdPrtErrDU_; }
      set {
        stdPrtErrDU_ = value;
      }
    }

    /// <summary>Field number for the "fit_counter" field.</summary>
    public const int FitCounterFieldNumber = 210;
    private int fitCounter_;
    /// <summary>
    /// number of fit/count passes (current trade date / market open)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FitCounter {
      get { return fitCounter_; }
      set {
        fitCounter_ = value;
      }
    }

    /// <summary>Field number for the "tradeable_status" field.</summary>
    public const int TradeableStatusFieldNumber = 150;
    private global::Spiderrock.Protobuf.TradeableStatus tradeableStatus_ = global::Spiderrock.Protobuf.TradeableStatus.Unspecified;
    /// <summary>
    /// indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradeableStatus TradeableStatus {
      get { return tradeableStatus_; }
      set {
        tradeableStatus_ = value;
      }
    }

    /// <summary>Field number for the "market_phase" field.</summary>
    public const int MarketPhaseFieldNumber = 227;
    private global::Spiderrock.Protobuf.MarketPhase marketPhase_ = global::Spiderrock.Protobuf.MarketPhase.Unspecified;
    /// <summary>
    /// market phase this surface is from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketPhase MarketPhase {
      get { return marketPhase_; }
      set {
        marketPhase_ = value;
      }
    }

    /// <summary>Field number for the "surface_fit_result" field.</summary>
    public const int SurfaceFitResultFieldNumber = 211;
    private global::Spiderrock.Protobuf.SurfaceFitResult surfaceFitResult_ = global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SurfaceFitResult SurfaceFitResult {
      get { return surfaceFitResult_; }
      set {
        surfaceFitResult_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 153;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "residual" field.</summary>
    public const int ResidualFieldNumber = 161;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual> _repeated_residual_codec
        = pb::FieldCodec.ForMessage(1290, global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual> residual_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.LiveExpirySurface.Types.Residual> Residual {
      get { return residual_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveExpirySurface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveExpirySurface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcDriver, other.UPrcDriver)) return false;
      if (IDays != other.IDays) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCen, other.AtmCen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmSlope, other.AtmSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmSkewYY, other.AtmSkewYY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVResidual, other.AtmVResidual)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmSDiv, other.AtmSDiv)) return false;
      if (!object.Equals(BasisEKey, other.BasisEKey)) return false;
      if (!object.Equals(BasisTimestamp, other.BasisTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisFUPrc, other.AxisFUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisVolRT, other.AxisVolRT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMult, other.XMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XShift, other.XShift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewMult, other.SkewMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxResidualErr, other.MaxResidualErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjA, other.CpAdjA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjB, other.CpAdjB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjC, other.CpAdjC)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjRefVol, other.CpAdjRefVol)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(Fkey, other.Fkey)) return false;
      if (!object.Equals(UPrcDriverKey, other.UPrcDriverKey)) return false;
      if (UPrcDriverType != other.UPrcDriverType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (DdivSource != other.DdivSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymbolRatio, other.SymbolRatio)) return false;
      if (ExType != other.ExType) return false;
      if (ModelType != other.ModelType) return false;
      if (PriceType != other.PriceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCnt, other.EarnCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCntAdj, other.EarnCntAdj)) return false;
      if (MoneynessType != other.MoneynessType) return false;
      if (PriceQuoteType != other.PriceQuoteType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVolHist, other.AtmVolHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCenHist, other.AtmCenHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UBetaHist, other.UBetaHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMove, other.EMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMoveHist, other.EMoveHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinXAxis, other.MinXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxXAxis, other.MaxXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SynSpot, other.SynSpot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SynCarry, other.SynCarry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PWidth, other.PWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VWidth, other.VWidth)) return false;
      if (CCnt != other.CCnt) return false;
      if (PCnt != other.PCnt) return false;
      if (HasBracketMin != other.HasBracketMin) return false;
      if (HasMinPoint != other.HasMinPoint) return false;
      if (HasXMultABFit != other.HasXMultABFit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XMultABFitError, other.XMultABFitError)) return false;
      if (HasSkewMultFit != other.HasSkewMultFit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SkewMultFitError, other.SkewMultFitError)) return false;
      if (CBidMiss != other.CBidMiss) return false;
      if (CAskMiss != other.CAskMiss) return false;
      if (PBidMiss != other.PBidMiss) return false;
      if (PAskMiss != other.PAskMiss) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitScore, other.FitScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumFitScore, other.CumFitScore)) return false;
      if (NumPrintsDD != other.NumPrintsDD) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrtErrDD, other.AvgPrtErrDD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdPrtErrDD, other.StdPrtErrDD)) return false;
      if (NumPrintsDN != other.NumPrintsDN) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrtErrDN, other.AvgPrtErrDN)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdPrtErrDN, other.StdPrtErrDN)) return false;
      if (NumPrintsAT != other.NumPrintsAT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrtErrAT, other.AvgPrtErrAT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdPrtErrAT, other.StdPrtErrAT)) return false;
      if (NumPrintsUP != other.NumPrintsUP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrtErrUP, other.AvgPrtErrUP)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdPrtErrUP, other.StdPrtErrUP)) return false;
      if (NumPrintsDU != other.NumPrintsDU) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrtErrDU, other.AvgPrtErrDU)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdPrtErrDU, other.StdPrtErrDU)) return false;
      if (FitCounter != other.FitCounter) return false;
      if (TradeableStatus != other.TradeableStatus) return false;
      if (MarketPhase != other.MarketPhase) return false;
      if (SurfaceFitResult != other.SurfaceFitResult) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!residual_.Equals(other.residual_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UPrcDriver != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcDriver);
      if (IDays != 0) hash ^= IDays.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (AtmCen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCen);
      if (AtmSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmSlope);
      if (AtmSkewYY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmSkewYY);
      if (AtmVResidual != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVResidual);
      if (AtmSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmSDiv);
      if (basisEKey_ != null) hash ^= BasisEKey.GetHashCode();
      if (basisTimestamp_ != null) hash ^= BasisTimestamp.GetHashCode();
      if (AxisFUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisFUPrc);
      if (AxisVolRT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisVolRT);
      if (XMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMult);
      if (XShift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XShift);
      if (SkewMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewMult);
      if (MaxResidualErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxResidualErr);
      if (CpAdjA != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjA);
      if (CpAdjB != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjB);
      if (CpAdjC != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjC);
      if (CpAdjRefVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjRefVol);
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (fkey_ != null) hash ^= Fkey.GetHashCode();
      if (uPrcDriverKey_ != null) hash ^= UPrcDriverKey.GetHashCode();
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UPrcDriverType.GetHashCode();
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) hash ^= DdivSource.GetHashCode();
      if (SymbolRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymbolRatio);
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) hash ^= ModelType.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (EarnCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCnt);
      if (EarnCntAdj != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCntAdj);
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) hash ^= MoneynessType.GetHashCode();
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) hash ^= PriceQuoteType.GetHashCode();
      if (AtmVolHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVolHist);
      if (AtmCenHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCenHist);
      if (UBetaHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UBetaHist);
      if (EMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMove);
      if (EMoveHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMoveHist);
      if (MinXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinXAxis);
      if (MaxXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxXAxis);
      if (SynSpot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SynSpot);
      if (SynCarry != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SynCarry);
      if (UPrcRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcRatio);
      if (PWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PWidth);
      if (VWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VWidth);
      if (CCnt != 0) hash ^= CCnt.GetHashCode();
      if (PCnt != 0) hash ^= PCnt.GetHashCode();
      if (HasBracketMin != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasBracketMin.GetHashCode();
      if (HasMinPoint != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasMinPoint.GetHashCode();
      if (HasXMultABFit != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasXMultABFit.GetHashCode();
      if (XMultABFitError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XMultABFitError);
      if (HasSkewMultFit != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasSkewMultFit.GetHashCode();
      if (SkewMultFitError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SkewMultFitError);
      if (CBidMiss != 0) hash ^= CBidMiss.GetHashCode();
      if (CAskMiss != 0) hash ^= CAskMiss.GetHashCode();
      if (PBidMiss != 0) hash ^= PBidMiss.GetHashCode();
      if (PAskMiss != 0) hash ^= PAskMiss.GetHashCode();
      if (FitScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitScore);
      if (CumFitScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumFitScore);
      if (NumPrintsDD != 0) hash ^= NumPrintsDD.GetHashCode();
      if (AvgPrtErrDD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrtErrDD);
      if (StdPrtErrDD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdPrtErrDD);
      if (NumPrintsDN != 0) hash ^= NumPrintsDN.GetHashCode();
      if (AvgPrtErrDN != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrtErrDN);
      if (StdPrtErrDN != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdPrtErrDN);
      if (NumPrintsAT != 0) hash ^= NumPrintsAT.GetHashCode();
      if (AvgPrtErrAT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrtErrAT);
      if (StdPrtErrAT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdPrtErrAT);
      if (NumPrintsUP != 0) hash ^= NumPrintsUP.GetHashCode();
      if (AvgPrtErrUP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrtErrUP);
      if (StdPrtErrUP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdPrtErrUP);
      if (NumPrintsDU != 0) hash ^= NumPrintsDU.GetHashCode();
      if (AvgPrtErrDU != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrtErrDU);
      if (StdPrtErrDU != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdPrtErrDU);
      if (FitCounter != 0) hash ^= FitCounter.GetHashCode();
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) hash ^= TradeableStatus.GetHashCode();
      if (MarketPhase != global::Spiderrock.Protobuf.MarketPhase.Unspecified) hash ^= MarketPhase.GetHashCode();
      if (SurfaceFitResult != global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified) hash ^= SurfaceFitResult.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= residual_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(UPrc);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(169, 6);
        output.WriteDouble(UPrcDriver);
      }
      if (Years != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(Rate);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(AtmVol);
      }
      if (AtmSlope != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(AtmSlope);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(229, 6);
        output.WriteFloat(AxisFUPrc);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(AxisVolRT);
      }
      if (SkewMult != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(SkewMult);
      }
      if (XMult != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(XMult);
      }
      if (XShift != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(XShift);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(176, 9);
        output.WriteEnum((int) TradeableStatus);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 9);
        output.WriteMessage(Timestamp);
      }
      if (IDays != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(IDays);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(221, 9);
        output.WriteFloat(AtmCen);
      }
      if (AtmSkewYY != 0F) {
        output.WriteRawTag(229, 9);
        output.WriteFloat(AtmSkewYY);
      }
      if (AtmVResidual != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AtmVResidual);
      }
      if (AtmSDiv != 0F) {
        output.WriteRawTag(245, 9);
        output.WriteFloat(AtmSDiv);
      }
      if (basisEKey_ != null) {
        output.WriteRawTag(250, 9);
        output.WriteMessage(BasisEKey);
      }
      if (basisTimestamp_ != null) {
        output.WriteRawTag(130, 10);
        output.WriteMessage(BasisTimestamp);
      }
      residual_.WriteTo(output, _repeated_residual_codec);
      if (MaxResidualErr != 0F) {
        output.WriteRawTag(165, 10);
        output.WriteFloat(MaxResidualErr);
      }
      if (CpAdjA != 0F) {
        output.WriteRawTag(173, 10);
        output.WriteFloat(CpAdjA);
      }
      if (CpAdjB != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(CpAdjB);
      }
      if (CpAdjC != 0F) {
        output.WriteRawTag(189, 10);
        output.WriteFloat(CpAdjC);
      }
      if (CpAdjRefVol != 0F) {
        output.WriteRawTag(197, 10);
        output.WriteFloat(CpAdjRefVol);
      }
      if (ticker_ != null) {
        output.WriteRawTag(202, 10);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(210, 10);
        output.WriteMessage(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(218, 10);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(237, 10);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(245, 10);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        output.WriteRawTag(133, 11);
        output.WriteFloat(SymbolRatio);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(136, 11);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(152, 11);
        output.WriteEnum((int) PriceType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(165, 11);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(EarnCntAdj);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(176, 11);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(184, 11);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(205, 11);
        output.WriteFloat(AtmCenHist);
      }
      if (UBetaHist != 0F) {
        output.WriteRawTag(213, 11);
        output.WriteFloat(UBetaHist);
      }
      if (EMove != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(229, 11);
        output.WriteFloat(EMoveHist);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(237, 11);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MaxXAxis);
      }
      if (SynSpot != 0F) {
        output.WriteRawTag(253, 11);
        output.WriteFloat(SynSpot);
      }
      if (SynCarry != 0F) {
        output.WriteRawTag(133, 12);
        output.WriteFloat(SynCarry);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(UPrcRatio);
      }
      if (PWidth != 0F) {
        output.WriteRawTag(149, 12);
        output.WriteFloat(PWidth);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(157, 12);
        output.WriteFloat(VWidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(160, 12);
        output.WriteUInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(168, 12);
        output.WriteUInt32(PCnt);
      }
      if (HasBracketMin != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 12);
        output.WriteEnum((int) HasBracketMin);
      }
      if (HasMinPoint != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) HasMinPoint);
      }
      if (HasXMultABFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 12);
        output.WriteEnum((int) HasXMultABFit);
      }
      if (XMultABFitError != 0D) {
        output.WriteRawTag(201, 12);
        output.WriteDouble(XMultABFitError);
      }
      if (HasSkewMultFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) HasSkewMultFit);
      }
      if (SkewMultFitError != 0D) {
        output.WriteRawTag(217, 12);
        output.WriteDouble(SkewMultFitError);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(224, 12);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(240, 12);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(248, 12);
        output.WriteInt32(PAskMiss);
      }
      if (FitScore != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(FitScore);
      }
      if (CumFitScore != 0F) {
        output.WriteRawTag(141, 13);
        output.WriteFloat(CumFitScore);
      }
      if (FitCounter != 0) {
        output.WriteRawTag(144, 13);
        output.WriteInt32(FitCounter);
      }
      if (SurfaceFitResult != global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) SurfaceFitResult);
      }
      if (NumPrintsDD != 0) {
        output.WriteRawTag(160, 13);
        output.WriteInt32(NumPrintsDD);
      }
      if (AvgPrtErrDD != 0F) {
        output.WriteRawTag(173, 13);
        output.WriteFloat(AvgPrtErrDD);
      }
      if (StdPrtErrDD != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(StdPrtErrDD);
      }
      if (NumPrintsDN != 0) {
        output.WriteRawTag(184, 13);
        output.WriteInt32(NumPrintsDN);
      }
      if (AvgPrtErrDN != 0F) {
        output.WriteRawTag(197, 13);
        output.WriteFloat(AvgPrtErrDN);
      }
      if (StdPrtErrDN != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(StdPrtErrDN);
      }
      if (NumPrintsAT != 0) {
        output.WriteRawTag(208, 13);
        output.WriteInt32(NumPrintsAT);
      }
      if (AvgPrtErrAT != 0F) {
        output.WriteRawTag(221, 13);
        output.WriteFloat(AvgPrtErrAT);
      }
      if (StdPrtErrAT != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(StdPrtErrAT);
      }
      if (NumPrintsUP != 0) {
        output.WriteRawTag(232, 13);
        output.WriteInt32(NumPrintsUP);
      }
      if (AvgPrtErrUP != 0F) {
        output.WriteRawTag(245, 13);
        output.WriteFloat(AvgPrtErrUP);
      }
      if (StdPrtErrUP != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(StdPrtErrUP);
      }
      if (NumPrintsDU != 0) {
        output.WriteRawTag(128, 14);
        output.WriteInt32(NumPrintsDU);
      }
      if (AvgPrtErrDU != 0F) {
        output.WriteRawTag(141, 14);
        output.WriteFloat(AvgPrtErrDU);
      }
      if (StdPrtErrDU != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(StdPrtErrDU);
      }
      if (MarketPhase != global::Spiderrock.Protobuf.MarketPhase.Unspecified) {
        output.WriteRawTag(152, 14);
        output.WriteEnum((int) MarketPhase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(UPrc);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(169, 6);
        output.WriteDouble(UPrcDriver);
      }
      if (Years != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(Rate);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(AtmVol);
      }
      if (AtmSlope != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(AtmSlope);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(229, 6);
        output.WriteFloat(AxisFUPrc);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(AxisVolRT);
      }
      if (SkewMult != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(SkewMult);
      }
      if (XMult != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(XMult);
      }
      if (XShift != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(XShift);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(176, 9);
        output.WriteEnum((int) TradeableStatus);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 9);
        output.WriteMessage(Timestamp);
      }
      if (IDays != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(IDays);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(221, 9);
        output.WriteFloat(AtmCen);
      }
      if (AtmSkewYY != 0F) {
        output.WriteRawTag(229, 9);
        output.WriteFloat(AtmSkewYY);
      }
      if (AtmVResidual != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AtmVResidual);
      }
      if (AtmSDiv != 0F) {
        output.WriteRawTag(245, 9);
        output.WriteFloat(AtmSDiv);
      }
      if (basisEKey_ != null) {
        output.WriteRawTag(250, 9);
        output.WriteMessage(BasisEKey);
      }
      if (basisTimestamp_ != null) {
        output.WriteRawTag(130, 10);
        output.WriteMessage(BasisTimestamp);
      }
      residual_.WriteTo(ref output, _repeated_residual_codec);
      if (MaxResidualErr != 0F) {
        output.WriteRawTag(165, 10);
        output.WriteFloat(MaxResidualErr);
      }
      if (CpAdjA != 0F) {
        output.WriteRawTag(173, 10);
        output.WriteFloat(CpAdjA);
      }
      if (CpAdjB != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(CpAdjB);
      }
      if (CpAdjC != 0F) {
        output.WriteRawTag(189, 10);
        output.WriteFloat(CpAdjC);
      }
      if (CpAdjRefVol != 0F) {
        output.WriteRawTag(197, 10);
        output.WriteFloat(CpAdjRefVol);
      }
      if (ticker_ != null) {
        output.WriteRawTag(202, 10);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(210, 10);
        output.WriteMessage(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(218, 10);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(237, 10);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(245, 10);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        output.WriteRawTag(133, 11);
        output.WriteFloat(SymbolRatio);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(136, 11);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(152, 11);
        output.WriteEnum((int) PriceType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(165, 11);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(EarnCntAdj);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(176, 11);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(184, 11);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(205, 11);
        output.WriteFloat(AtmCenHist);
      }
      if (UBetaHist != 0F) {
        output.WriteRawTag(213, 11);
        output.WriteFloat(UBetaHist);
      }
      if (EMove != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(229, 11);
        output.WriteFloat(EMoveHist);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(237, 11);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MaxXAxis);
      }
      if (SynSpot != 0F) {
        output.WriteRawTag(253, 11);
        output.WriteFloat(SynSpot);
      }
      if (SynCarry != 0F) {
        output.WriteRawTag(133, 12);
        output.WriteFloat(SynCarry);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(UPrcRatio);
      }
      if (PWidth != 0F) {
        output.WriteRawTag(149, 12);
        output.WriteFloat(PWidth);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(157, 12);
        output.WriteFloat(VWidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(160, 12);
        output.WriteUInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(168, 12);
        output.WriteUInt32(PCnt);
      }
      if (HasBracketMin != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 12);
        output.WriteEnum((int) HasBracketMin);
      }
      if (HasMinPoint != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) HasMinPoint);
      }
      if (HasXMultABFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 12);
        output.WriteEnum((int) HasXMultABFit);
      }
      if (XMultABFitError != 0D) {
        output.WriteRawTag(201, 12);
        output.WriteDouble(XMultABFitError);
      }
      if (HasSkewMultFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) HasSkewMultFit);
      }
      if (SkewMultFitError != 0D) {
        output.WriteRawTag(217, 12);
        output.WriteDouble(SkewMultFitError);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(224, 12);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(240, 12);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(248, 12);
        output.WriteInt32(PAskMiss);
      }
      if (FitScore != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(FitScore);
      }
      if (CumFitScore != 0F) {
        output.WriteRawTag(141, 13);
        output.WriteFloat(CumFitScore);
      }
      if (FitCounter != 0) {
        output.WriteRawTag(144, 13);
        output.WriteInt32(FitCounter);
      }
      if (SurfaceFitResult != global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) SurfaceFitResult);
      }
      if (NumPrintsDD != 0) {
        output.WriteRawTag(160, 13);
        output.WriteInt32(NumPrintsDD);
      }
      if (AvgPrtErrDD != 0F) {
        output.WriteRawTag(173, 13);
        output.WriteFloat(AvgPrtErrDD);
      }
      if (StdPrtErrDD != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(StdPrtErrDD);
      }
      if (NumPrintsDN != 0) {
        output.WriteRawTag(184, 13);
        output.WriteInt32(NumPrintsDN);
      }
      if (AvgPrtErrDN != 0F) {
        output.WriteRawTag(197, 13);
        output.WriteFloat(AvgPrtErrDN);
      }
      if (StdPrtErrDN != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(StdPrtErrDN);
      }
      if (NumPrintsAT != 0) {
        output.WriteRawTag(208, 13);
        output.WriteInt32(NumPrintsAT);
      }
      if (AvgPrtErrAT != 0F) {
        output.WriteRawTag(221, 13);
        output.WriteFloat(AvgPrtErrAT);
      }
      if (StdPrtErrAT != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(StdPrtErrAT);
      }
      if (NumPrintsUP != 0) {
        output.WriteRawTag(232, 13);
        output.WriteInt32(NumPrintsUP);
      }
      if (AvgPrtErrUP != 0F) {
        output.WriteRawTag(245, 13);
        output.WriteFloat(AvgPrtErrUP);
      }
      if (StdPrtErrUP != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(StdPrtErrUP);
      }
      if (NumPrintsDU != 0) {
        output.WriteRawTag(128, 14);
        output.WriteInt32(NumPrintsDU);
      }
      if (AvgPrtErrDU != 0F) {
        output.WriteRawTag(141, 14);
        output.WriteFloat(AvgPrtErrDU);
      }
      if (StdPrtErrDU != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(StdPrtErrDU);
      }
      if (MarketPhase != global::Spiderrock.Protobuf.MarketPhase.Unspecified) {
        output.WriteRawTag(152, 14);
        output.WriteEnum((int) MarketPhase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UPrcDriver != 0D) {
        size += 2 + 8;
      }
      if (IDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IDays);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (AtmCen != 0F) {
        size += 2 + 4;
      }
      if (AtmSlope != 0F) {
        size += 2 + 4;
      }
      if (AtmSkewYY != 0F) {
        size += 2 + 4;
      }
      if (AtmVResidual != 0F) {
        size += 2 + 4;
      }
      if (AtmSDiv != 0F) {
        size += 2 + 4;
      }
      if (basisEKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasisEKey);
      }
      if (basisTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasisTimestamp);
      }
      if (AxisFUPrc != 0F) {
        size += 2 + 4;
      }
      if (AxisVolRT != 0F) {
        size += 2 + 4;
      }
      if (XMult != 0F) {
        size += 2 + 4;
      }
      if (XShift != 0F) {
        size += 2 + 4;
      }
      if (SkewMult != 0F) {
        size += 2 + 4;
      }
      if (MaxResidualErr != 0F) {
        size += 2 + 4;
      }
      if (CpAdjA != 0F) {
        size += 2 + 4;
      }
      if (CpAdjB != 0F) {
        size += 2 + 4;
      }
      if (CpAdjC != 0F) {
        size += 2 + 4;
      }
      if (CpAdjRefVol != 0F) {
        size += 2 + 4;
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (fkey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcDriverType);
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (DdivPv != 0F) {
        size += 2 + 4;
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        size += 2 + 4;
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (EarnCnt != 0F) {
        size += 2 + 4;
      }
      if (EarnCntAdj != 0F) {
        size += 2 + 4;
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceQuoteType);
      }
      if (AtmVolHist != 0F) {
        size += 2 + 4;
      }
      if (AtmCenHist != 0F) {
        size += 2 + 4;
      }
      if (UBetaHist != 0F) {
        size += 2 + 4;
      }
      if (EMove != 0F) {
        size += 2 + 4;
      }
      if (EMoveHist != 0F) {
        size += 2 + 4;
      }
      if (MinXAxis != 0F) {
        size += 2 + 4;
      }
      if (MaxXAxis != 0F) {
        size += 2 + 4;
      }
      if (SynSpot != 0F) {
        size += 2 + 4;
      }
      if (SynCarry != 0F) {
        size += 2 + 4;
      }
      if (UPrcRatio != 0D) {
        size += 2 + 8;
      }
      if (PWidth != 0F) {
        size += 2 + 4;
      }
      if (VWidth != 0F) {
        size += 2 + 4;
      }
      if (CCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CCnt);
      }
      if (PCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PCnt);
      }
      if (HasBracketMin != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBracketMin);
      }
      if (HasMinPoint != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasMinPoint);
      }
      if (HasXMultABFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasXMultABFit);
      }
      if (XMultABFitError != 0D) {
        size += 2 + 8;
      }
      if (HasSkewMultFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasSkewMultFit);
      }
      if (SkewMultFitError != 0D) {
        size += 2 + 8;
      }
      if (CBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CBidMiss);
      }
      if (CAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CAskMiss);
      }
      if (PBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PBidMiss);
      }
      if (PAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PAskMiss);
      }
      if (FitScore != 0F) {
        size += 2 + 4;
      }
      if (CumFitScore != 0F) {
        size += 2 + 4;
      }
      if (NumPrintsDD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintsDD);
      }
      if (AvgPrtErrDD != 0F) {
        size += 2 + 4;
      }
      if (StdPrtErrDD != 0F) {
        size += 2 + 4;
      }
      if (NumPrintsDN != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintsDN);
      }
      if (AvgPrtErrDN != 0F) {
        size += 2 + 4;
      }
      if (StdPrtErrDN != 0F) {
        size += 2 + 4;
      }
      if (NumPrintsAT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintsAT);
      }
      if (AvgPrtErrAT != 0F) {
        size += 2 + 4;
      }
      if (StdPrtErrAT != 0F) {
        size += 2 + 4;
      }
      if (NumPrintsUP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintsUP);
      }
      if (AvgPrtErrUP != 0F) {
        size += 2 + 4;
      }
      if (StdPrtErrUP != 0F) {
        size += 2 + 4;
      }
      if (NumPrintsDU != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintsDU);
      }
      if (AvgPrtErrDU != 0F) {
        size += 2 + 4;
      }
      if (StdPrtErrDU != 0F) {
        size += 2 + 4;
      }
      if (FitCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FitCounter);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeableStatus);
      }
      if (MarketPhase != global::Spiderrock.Protobuf.MarketPhase.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketPhase);
      }
      if (SurfaceFitResult != global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceFitResult);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += residual_.CalculateSize(_repeated_residual_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveExpirySurface other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UPrcDriver != 0D) {
        UPrcDriver = other.UPrcDriver;
      }
      if (other.IDays != 0) {
        IDays = other.IDays;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmCen != 0F) {
        AtmCen = other.AtmCen;
      }
      if (other.AtmSlope != 0F) {
        AtmSlope = other.AtmSlope;
      }
      if (other.AtmSkewYY != 0F) {
        AtmSkewYY = other.AtmSkewYY;
      }
      if (other.AtmVResidual != 0F) {
        AtmVResidual = other.AtmVResidual;
      }
      if (other.AtmSDiv != 0F) {
        AtmSDiv = other.AtmSDiv;
      }
      if (other.basisEKey_ != null) {
        if (basisEKey_ == null) {
          BasisEKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        BasisEKey.MergeFrom(other.BasisEKey);
      }
      if (other.basisTimestamp_ != null) {
        if (basisTimestamp_ == null) {
          BasisTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        BasisTimestamp.MergeFrom(other.BasisTimestamp);
      }
      if (other.AxisFUPrc != 0F) {
        AxisFUPrc = other.AxisFUPrc;
      }
      if (other.AxisVolRT != 0F) {
        AxisVolRT = other.AxisVolRT;
      }
      if (other.XMult != 0F) {
        XMult = other.XMult;
      }
      if (other.XShift != 0F) {
        XShift = other.XShift;
      }
      if (other.SkewMult != 0F) {
        SkewMult = other.SkewMult;
      }
      if (other.MaxResidualErr != 0F) {
        MaxResidualErr = other.MaxResidualErr;
      }
      if (other.CpAdjA != 0F) {
        CpAdjA = other.CpAdjA;
      }
      if (other.CpAdjB != 0F) {
        CpAdjB = other.CpAdjB;
      }
      if (other.CpAdjC != 0F) {
        CpAdjC = other.CpAdjC;
      }
      if (other.CpAdjRefVol != 0F) {
        CpAdjRefVol = other.CpAdjRefVol;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.fkey_ != null) {
        if (fkey_ == null) {
          Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        Fkey.MergeFrom(other.Fkey);
      }
      if (other.uPrcDriverKey_ != null) {
        if (uPrcDriverKey_ == null) {
          UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UPrcDriverKey.MergeFrom(other.UPrcDriverKey);
      }
      if (other.UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UPrcDriverType = other.UPrcDriverType;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.DdivPv != 0F) {
        DdivPv = other.DdivPv;
      }
      if (other.DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        DdivSource = other.DdivSource;
      }
      if (other.SymbolRatio != 0F) {
        SymbolRatio = other.SymbolRatio;
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.EarnCnt != 0F) {
        EarnCnt = other.EarnCnt;
      }
      if (other.EarnCntAdj != 0F) {
        EarnCntAdj = other.EarnCntAdj;
      }
      if (other.MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        MoneynessType = other.MoneynessType;
      }
      if (other.PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        PriceQuoteType = other.PriceQuoteType;
      }
      if (other.AtmVolHist != 0F) {
        AtmVolHist = other.AtmVolHist;
      }
      if (other.AtmCenHist != 0F) {
        AtmCenHist = other.AtmCenHist;
      }
      if (other.UBetaHist != 0F) {
        UBetaHist = other.UBetaHist;
      }
      if (other.EMove != 0F) {
        EMove = other.EMove;
      }
      if (other.EMoveHist != 0F) {
        EMoveHist = other.EMoveHist;
      }
      if (other.MinXAxis != 0F) {
        MinXAxis = other.MinXAxis;
      }
      if (other.MaxXAxis != 0F) {
        MaxXAxis = other.MaxXAxis;
      }
      if (other.SynSpot != 0F) {
        SynSpot = other.SynSpot;
      }
      if (other.SynCarry != 0F) {
        SynCarry = other.SynCarry;
      }
      if (other.UPrcRatio != 0D) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.PWidth != 0F) {
        PWidth = other.PWidth;
      }
      if (other.VWidth != 0F) {
        VWidth = other.VWidth;
      }
      if (other.CCnt != 0) {
        CCnt = other.CCnt;
      }
      if (other.PCnt != 0) {
        PCnt = other.PCnt;
      }
      if (other.HasBracketMin != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasBracketMin = other.HasBracketMin;
      }
      if (other.HasMinPoint != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasMinPoint = other.HasMinPoint;
      }
      if (other.HasXMultABFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasXMultABFit = other.HasXMultABFit;
      }
      if (other.XMultABFitError != 0D) {
        XMultABFitError = other.XMultABFitError;
      }
      if (other.HasSkewMultFit != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasSkewMultFit = other.HasSkewMultFit;
      }
      if (other.SkewMultFitError != 0D) {
        SkewMultFitError = other.SkewMultFitError;
      }
      if (other.CBidMiss != 0) {
        CBidMiss = other.CBidMiss;
      }
      if (other.CAskMiss != 0) {
        CAskMiss = other.CAskMiss;
      }
      if (other.PBidMiss != 0) {
        PBidMiss = other.PBidMiss;
      }
      if (other.PAskMiss != 0) {
        PAskMiss = other.PAskMiss;
      }
      if (other.FitScore != 0F) {
        FitScore = other.FitScore;
      }
      if (other.CumFitScore != 0F) {
        CumFitScore = other.CumFitScore;
      }
      if (other.NumPrintsDD != 0) {
        NumPrintsDD = other.NumPrintsDD;
      }
      if (other.AvgPrtErrDD != 0F) {
        AvgPrtErrDD = other.AvgPrtErrDD;
      }
      if (other.StdPrtErrDD != 0F) {
        StdPrtErrDD = other.StdPrtErrDD;
      }
      if (other.NumPrintsDN != 0) {
        NumPrintsDN = other.NumPrintsDN;
      }
      if (other.AvgPrtErrDN != 0F) {
        AvgPrtErrDN = other.AvgPrtErrDN;
      }
      if (other.StdPrtErrDN != 0F) {
        StdPrtErrDN = other.StdPrtErrDN;
      }
      if (other.NumPrintsAT != 0) {
        NumPrintsAT = other.NumPrintsAT;
      }
      if (other.AvgPrtErrAT != 0F) {
        AvgPrtErrAT = other.AvgPrtErrAT;
      }
      if (other.StdPrtErrAT != 0F) {
        StdPrtErrAT = other.StdPrtErrAT;
      }
      if (other.NumPrintsUP != 0) {
        NumPrintsUP = other.NumPrintsUP;
      }
      if (other.AvgPrtErrUP != 0F) {
        AvgPrtErrUP = other.AvgPrtErrUP;
      }
      if (other.StdPrtErrUP != 0F) {
        StdPrtErrUP = other.StdPrtErrUP;
      }
      if (other.NumPrintsDU != 0) {
        NumPrintsDU = other.NumPrintsDU;
      }
      if (other.AvgPrtErrDU != 0F) {
        AvgPrtErrDU = other.AvgPrtErrDU;
      }
      if (other.StdPrtErrDU != 0F) {
        StdPrtErrDU = other.StdPrtErrDU;
      }
      if (other.FitCounter != 0) {
        FitCounter = other.FitCounter;
      }
      if (other.TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        TradeableStatus = other.TradeableStatus;
      }
      if (other.MarketPhase != global::Spiderrock.Protobuf.MarketPhase.Unspecified) {
        MarketPhase = other.MarketPhase;
      }
      if (other.SurfaceFitResult != global::Spiderrock.Protobuf.SurfaceFitResult.Unspecified) {
        SurfaceFitResult = other.SurfaceFitResult;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      residual_.Add(other.residual_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            UPrc = input.ReadDouble();
            break;
          }
          case 809: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 821: {
            Years = input.ReadFloat();
            break;
          }
          case 829: {
            Rate = input.ReadFloat();
            break;
          }
          case 845: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 853: {
            AtmSlope = input.ReadFloat();
            break;
          }
          case 869: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 877: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 885: {
            SkewMult = input.ReadFloat();
            break;
          }
          case 893: {
            XMult = input.ReadFloat();
            break;
          }
          case 901: {
            XShift = input.ReadFloat();
            break;
          }
          case 1200: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 1226: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1232: {
            IDays = input.ReadInt32();
            break;
          }
          case 1245: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1253: {
            AtmSkewYY = input.ReadFloat();
            break;
          }
          case 1261: {
            AtmVResidual = input.ReadFloat();
            break;
          }
          case 1269: {
            AtmSDiv = input.ReadFloat();
            break;
          }
          case 1274: {
            if (basisEKey_ == null) {
              BasisEKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(BasisEKey);
            break;
          }
          case 1282: {
            if (basisTimestamp_ == null) {
              BasisTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(BasisTimestamp);
            break;
          }
          case 1290: {
            residual_.AddEntriesFrom(input, _repeated_residual_codec);
            break;
          }
          case 1317: {
            MaxResidualErr = input.ReadFloat();
            break;
          }
          case 1325: {
            CpAdjA = input.ReadFloat();
            break;
          }
          case 1333: {
            CpAdjB = input.ReadFloat();
            break;
          }
          case 1341: {
            CpAdjC = input.ReadFloat();
            break;
          }
          case 1349: {
            CpAdjRefVol = input.ReadFloat();
            break;
          }
          case 1354: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1362: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 1370: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 1376: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1389: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1397: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 1400: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 1413: {
            SymbolRatio = input.ReadFloat();
            break;
          }
          case 1416: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1424: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1432: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1445: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1453: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1456: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1464: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1477: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1485: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1493: {
            UBetaHist = input.ReadFloat();
            break;
          }
          case 1501: {
            EMove = input.ReadFloat();
            break;
          }
          case 1509: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1517: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1525: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1533: {
            SynSpot = input.ReadFloat();
            break;
          }
          case 1541: {
            SynCarry = input.ReadFloat();
            break;
          }
          case 1545: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1557: {
            PWidth = input.ReadFloat();
            break;
          }
          case 1565: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1568: {
            CCnt = input.ReadUInt32();
            break;
          }
          case 1576: {
            PCnt = input.ReadUInt32();
            break;
          }
          case 1584: {
            HasBracketMin = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1592: {
            HasMinPoint = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1600: {
            HasXMultABFit = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1609: {
            XMultABFitError = input.ReadDouble();
            break;
          }
          case 1616: {
            HasSkewMultFit = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1625: {
            SkewMultFitError = input.ReadDouble();
            break;
          }
          case 1632: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 1640: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 1648: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 1656: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 1669: {
            FitScore = input.ReadFloat();
            break;
          }
          case 1677: {
            CumFitScore = input.ReadFloat();
            break;
          }
          case 1680: {
            FitCounter = input.ReadInt32();
            break;
          }
          case 1688: {
            SurfaceFitResult = (global::Spiderrock.Protobuf.SurfaceFitResult) input.ReadEnum();
            break;
          }
          case 1696: {
            NumPrintsDD = input.ReadInt32();
            break;
          }
          case 1709: {
            AvgPrtErrDD = input.ReadFloat();
            break;
          }
          case 1717: {
            StdPrtErrDD = input.ReadFloat();
            break;
          }
          case 1720: {
            NumPrintsDN = input.ReadInt32();
            break;
          }
          case 1733: {
            AvgPrtErrDN = input.ReadFloat();
            break;
          }
          case 1741: {
            StdPrtErrDN = input.ReadFloat();
            break;
          }
          case 1744: {
            NumPrintsAT = input.ReadInt32();
            break;
          }
          case 1757: {
            AvgPrtErrAT = input.ReadFloat();
            break;
          }
          case 1765: {
            StdPrtErrAT = input.ReadFloat();
            break;
          }
          case 1768: {
            NumPrintsUP = input.ReadInt32();
            break;
          }
          case 1781: {
            AvgPrtErrUP = input.ReadFloat();
            break;
          }
          case 1789: {
            StdPrtErrUP = input.ReadFloat();
            break;
          }
          case 1792: {
            NumPrintsDU = input.ReadInt32();
            break;
          }
          case 1805: {
            AvgPrtErrDU = input.ReadFloat();
            break;
          }
          case 1813: {
            StdPrtErrDU = input.ReadFloat();
            break;
          }
          case 1816: {
            MarketPhase = (global::Spiderrock.Protobuf.MarketPhase) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveExpirySurface.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            UPrc = input.ReadDouble();
            break;
          }
          case 809: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 821: {
            Years = input.ReadFloat();
            break;
          }
          case 829: {
            Rate = input.ReadFloat();
            break;
          }
          case 845: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 853: {
            AtmSlope = input.ReadFloat();
            break;
          }
          case 869: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 877: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 885: {
            SkewMult = input.ReadFloat();
            break;
          }
          case 893: {
            XMult = input.ReadFloat();
            break;
          }
          case 901: {
            XShift = input.ReadFloat();
            break;
          }
          case 1200: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 1226: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1232: {
            IDays = input.ReadInt32();
            break;
          }
          case 1245: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1253: {
            AtmSkewYY = input.ReadFloat();
            break;
          }
          case 1261: {
            AtmVResidual = input.ReadFloat();
            break;
          }
          case 1269: {
            AtmSDiv = input.ReadFloat();
            break;
          }
          case 1274: {
            if (basisEKey_ == null) {
              BasisEKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(BasisEKey);
            break;
          }
          case 1282: {
            if (basisTimestamp_ == null) {
              BasisTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(BasisTimestamp);
            break;
          }
          case 1290: {
            residual_.AddEntriesFrom(ref input, _repeated_residual_codec);
            break;
          }
          case 1317: {
            MaxResidualErr = input.ReadFloat();
            break;
          }
          case 1325: {
            CpAdjA = input.ReadFloat();
            break;
          }
          case 1333: {
            CpAdjB = input.ReadFloat();
            break;
          }
          case 1341: {
            CpAdjC = input.ReadFloat();
            break;
          }
          case 1349: {
            CpAdjRefVol = input.ReadFloat();
            break;
          }
          case 1354: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1362: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 1370: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 1376: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1389: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1397: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 1400: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 1413: {
            SymbolRatio = input.ReadFloat();
            break;
          }
          case 1416: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1424: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1432: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1445: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1453: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1456: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1464: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1477: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1485: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1493: {
            UBetaHist = input.ReadFloat();
            break;
          }
          case 1501: {
            EMove = input.ReadFloat();
            break;
          }
          case 1509: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1517: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1525: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1533: {
            SynSpot = input.ReadFloat();
            break;
          }
          case 1541: {
            SynCarry = input.ReadFloat();
            break;
          }
          case 1545: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1557: {
            PWidth = input.ReadFloat();
            break;
          }
          case 1565: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1568: {
            CCnt = input.ReadUInt32();
            break;
          }
          case 1576: {
            PCnt = input.ReadUInt32();
            break;
          }
          case 1584: {
            HasBracketMin = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1592: {
            HasMinPoint = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1600: {
            HasXMultABFit = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1609: {
            XMultABFitError = input.ReadDouble();
            break;
          }
          case 1616: {
            HasSkewMultFit = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1625: {
            SkewMultFitError = input.ReadDouble();
            break;
          }
          case 1632: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 1640: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 1648: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 1656: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 1669: {
            FitScore = input.ReadFloat();
            break;
          }
          case 1677: {
            CumFitScore = input.ReadFloat();
            break;
          }
          case 1680: {
            FitCounter = input.ReadInt32();
            break;
          }
          case 1688: {
            SurfaceFitResult = (global::Spiderrock.Protobuf.SurfaceFitResult) input.ReadEnum();
            break;
          }
          case 1696: {
            NumPrintsDD = input.ReadInt32();
            break;
          }
          case 1709: {
            AvgPrtErrDD = input.ReadFloat();
            break;
          }
          case 1717: {
            StdPrtErrDD = input.ReadFloat();
            break;
          }
          case 1720: {
            NumPrintsDN = input.ReadInt32();
            break;
          }
          case 1733: {
            AvgPrtErrDN = input.ReadFloat();
            break;
          }
          case 1741: {
            StdPrtErrDN = input.ReadFloat();
            break;
          }
          case 1744: {
            NumPrintsAT = input.ReadInt32();
            break;
          }
          case 1757: {
            AvgPrtErrAT = input.ReadFloat();
            break;
          }
          case 1765: {
            StdPrtErrAT = input.ReadFloat();
            break;
          }
          case 1768: {
            NumPrintsUP = input.ReadInt32();
            break;
          }
          case 1781: {
            AvgPrtErrUP = input.ReadFloat();
            break;
          }
          case 1789: {
            StdPrtErrUP = input.ReadFloat();
            break;
          }
          case 1792: {
            NumPrintsDU = input.ReadInt32();
            break;
          }
          case 1805: {
            AvgPrtErrDU = input.ReadFloat();
            break;
          }
          case 1813: {
            StdPrtErrDU = input.ReadFloat();
            break;
          }
          case 1816: {
            MarketPhase = (global::Spiderrock.Protobuf.MarketPhase) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveExpirySurface message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveExpirySurface.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          surfaceType_ = other.surfaceType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "surface_type" field.</summary>
        public const int SurfaceTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SurfaceCurveType surfaceType_ = global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SurfaceCurveType SurfaceType {
          get { return surfaceType_; }
          set {
            surfaceType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (SurfaceType != other.SurfaceType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) hash ^= SurfaceType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            SurfaceType = other.SurfaceType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Residual : pb::IMessage<Residual>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Residual> _parser = new pb::MessageParser<Residual>(() => new Residual());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Residual> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveExpirySurface.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Residual() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Residual(Residual other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Residual Clone() {
          return new Residual(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 162;
        private float x_;
        /// <summary>
        /// x axis
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 163;
        private float y_;
        /// <summary>
        /// y value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Residual);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Residual other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (X != 0F) {
            output.WriteRawTag(149, 10);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(157, 10);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (X != 0F) {
            output.WriteRawTag(149, 10);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(157, 10);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 2 + 4;
          }
          if (Y != 0F) {
            size += 2 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Residual other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1301: {
                X = input.ReadFloat();
                break;
              }
              case 1309: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1301: {
                X = input.ReadFloat();
                break;
              }
              case 1309: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
