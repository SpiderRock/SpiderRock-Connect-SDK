// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRMLinkAnalytics/LiveSurfaceAtm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRMLinkAnalytics/LiveSurfaceAtm.proto</summary>
  public static partial class LiveSurfaceAtmReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRMLinkAnalytics/LiveSurfaceAtm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveSurfaceAtmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9TUk1MaW5rQW5hbHl0aWNzL0xpdmVTdXJmYWNlQXRtLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLvEgoOTGl2",
            "ZVN1cmZhY2VBdG0SMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk1lc3NhZ2VNZXRhZGF0YRI2CgRwa2V5GAIgASgLMiguc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5MaXZlU3VyZmFjZUF0bS5QS2V5Ei4KBnRpY2tlchhkIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EiwKBGZrZXkYZyAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRINCgV1X2JpZBhq",
            "IAEoARINCgV1X2FzaxhtIAEoARINCgV5ZWFycxhwIAEoAhIMCgRyYXRlGHMg",
            "ASgCEgwKBHNkaXYYdiABKAISDAoEZGRpdhh5IAEoAhIPCgdleF90eXBlGHwg",
            "ASgFEhIKCm1vZGVsX3R5cGUYfyABKAUSEQoIZWFybl9jbnQYggEgASgCEhUK",
            "DGVhcm5fY250X2FkahiFASABKAISFAoLYXhpc192b2xfclQYiAEgASgCEhMK",
            "CmF4aXNfZlVQcmMYiwEgASgCEjsKDm1vbmV5bmVzc190eXBlGI4BIAEoDjIi",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuTW9uZXluZXNzVHlwZRI7Cg51bmRlcmxp",
            "ZXJfbW9kZRiRASABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlVuZGVybGll",
            "ck1vZGUSPgoQcHJpY2VfcXVvdGVfdHlwZRiUASABKA4yIy5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlByaWNlUXVvdGVUeXBlEhAKB2F0bV92b2wYlwEgASgCEhAK",
            "B2F0bV9jZW4YmgEgASgCEhUKDGF0bV92b2xfaGlzdBidASABKAISFQoMYXRt",
            "X2Nlbl9oaXN0GKABIAEoAhIUCgttaW5fYXRtX3ZvbBijASABKAISFAoLbWF4",
            "X2F0bV92b2wYpgEgASgCEg8KBmVfbW92ZRipASABKAISFAoLZV9tb3ZlX2hp",
            "c3QYrAEgASgCEhEKCGF0bV9tb3ZlGK8BIAEoAhIVCgxhdG1fY2VuX21vdmUY",
            "sgEgASgCEhAKB2F0bV9waGkYtQEgASgCEhEKCGF0bV92ZWdhGLgBIAEoAhIO",
            "CgVzbG9wZRi7ASABKAISFAoLdmFyX3N3YXBfZlYYvgEgASgCEjEKCWdyaWRf",
            "dHlwZRjBASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkdyaWRUeXBlEhIK",
            "CW1pbl94QXhpcxjEASABKAISEgoJbWF4X3hBeGlzGMcBIAEoAhIXCg5taW5f",
            "Y3Vydl92YWx1ZRjKASABKAISFwoObWluX2N1cnZfeEF4aXMYzQEgASgCEhcK",
            "Dm1heF9jdXJ2X3ZhbHVlGNABIAEoAhIXCg5tYXhfY3Vydl94QXhpcxjTASAB",
            "KAISEwoKc2tld19taW5feBjWASABKAISEwoKc2tld19taW5feRjZASABKAIS",
            "EQoIc2tld19kMTEY3AEgASgCEhEKCHNrZXdfZDEwGN8BIAEoAhIQCgdza2V3",
            "X2Q5GOIBIAEoAhIQCgdza2V3X2Q4GOUBIAEoAhIQCgdza2V3X2Q3GOgBIAEo",
            "AhIQCgdza2V3X2Q2GOsBIAEoAhIQCgdza2V3X2Q1GO4BIAEoAhIQCgdza2V3",
            "X2Q0GPEBIAEoAhIQCgdza2V3X2QzGPQBIAEoAhIQCgdza2V3X2QyGPcBIAEo",
            "AhIQCgdza2V3X2QxGPoBIAEoAhIQCgdza2V3X2MwGP0BIAEoAhIQCgdza2V3",
            "X3UxGIACIAEoAhIQCgdza2V3X3UyGIMCIAEoAhIQCgdza2V3X3UzGIYCIAEo",
            "AhIQCgdza2V3X3U0GIkCIAEoAhIQCgdza2V3X3U1GIwCIAEoAhIQCgdza2V3",
            "X3U2GI8CIAEoAhIQCgdza2V3X3U3GJICIAEoAhIQCgdza2V3X3U4GJUCIAEo",
            "AhIQCgdza2V3X3U5GJgCIAEoAhIRCghza2V3X3UxMBibAiABKAISEQoIc2tl",
            "d191MTEYngIgASgCEhAKB3NkaXZfZDMYoQIgASgCEhAKB3NkaXZfZDIYpAIg",
            "ASgCEhAKB3NkaXZfZDEYpwIgASgCEhAKB3NkaXZfdTEYqgIgASgCEhAKB3Nk",
            "aXZfdTIYrQIgASgCEhAKB3NkaXZfdTMYsAIgASgCEg8KBnB3aWR0aBizAiAB",
            "KAISDwoGdndpZHRoGLYCIAEoAhIOCgVjX2NudBi5AiABKAUSDgoFcF9jbnQY",
            "vAIgASgFEhMKCmNfYmlkX21pc3MYvwIgASgFEhMKCmNfYXNrX21pc3MYwgIg",
            "ASgFEhMKCnBfYmlkX21pc3MYxQIgASgFEhMKCnBfYXNrX21pc3MYyAIgASgF",
            "EhQKC2ZpdF9hdmdfZXJyGMsCIAEoAhIYCg9maXRfYXZnX2Fic19lcnIYzgIg",
            "ASgCEhgKD2ZpdF9tYXhfcHJjX2VychjRAiABKAISEwoKZml0X2Vycl94WBjU",
            "AiABKAISMQoKZml0X2Vycl9jUBjXAiABKA4yHC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkNhbGxQdXQSEwoKZml0X2Vycl9kZRjaAiABKAISFAoLZml0X2Vycl9i",
            "aWQY3QIgASgCEhQKC2ZpdF9lcnJfYXNrGOACIAEoAhIUCgtmaXRfZXJyX3By",
            "YxjjAiABKAISFAoLZml0X2Vycl92b2wY5gIgASgCEhAKB2NvdW50ZXIY6QIg",
            "ASgFEhUKDHNrZXdfY291bnRlchjsAiABKAUSFQoMc2Rpdl9jb3VudGVyGO8C",
            "IAEoBRI9Cg90cmFkaW5nX3Nlc3Npb24Y/AIgASgOMiMuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5UcmFkaW5nU2Vzc2lvbhI/ChB0cmFkZWFibGVfc3RhdHVzGPUC",
            "IAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuVHJhZGVhYmxlU3RhdHVzEjsK",
            "DnN1cmZhY2VfcmVzdWx0GPgCIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3VyZmFjZVJlc3VsdBIuCgl0aW1lc3RhbXAY+wIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBo0CgRQS2V5EiwKBGVrZXkYCiABKAsyHi5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceAtm), global::Spiderrock.Protobuf.LiveSurfaceAtm.Parser, new[]{ "Meta", "Pkey", "Ticker", "Fkey", "UBid", "UAsk", "Years", "Rate", "Sdiv", "Ddiv", "ExType", "ModelType", "EarnCnt", "EarnCntAdj", "AxisVolRT", "AxisFUPrc", "MoneynessType", "UnderlierMode", "PriceQuoteType", "AtmVol", "AtmCen", "AtmVolHist", "AtmCenHist", "MinAtmVol", "MaxAtmVol", "EMove", "EMoveHist", "AtmMove", "AtmCenMove", "AtmPhi", "AtmVega", "Slope", "VarSwapFV", "GridType", "MinXAxis", "MaxXAxis", "MinCurvValue", "MinCurvXAxis", "MaxCurvValue", "MaxCurvXAxis", "SkewMinX", "SkewMinY", "SkewD11", "SkewD10", "SkewD9", "SkewD8", "SkewD7", "SkewD6", "SkewD5", "SkewD4", "SkewD3", "SkewD2", "SkewD1", "SkewC0", "SkewU1", "SkewU2", "SkewU3", "SkewU4", "SkewU5", "SkewU6", "SkewU7", "SkewU8", "SkewU9", "SkewU10", "SkewU11", "SdivD3", "SdivD2", "SdivD1", "SdivU1", "SdivU2", "SdivU3", "Pwidth", "Vwidth", "CCnt", "PCnt", "CBidMiss", "CAskMiss", "PBidMiss", "PAskMiss", "FitAvgErr", "FitAvgAbsErr", "FitMaxPrcErr", "FitErrXX", "FitErrCP", "FitErrDe", "FitErrBid", "FitErrAsk", "FitErrPrc", "FitErrVol", "Counter", "SkewCounter", "SdivCounter", "TradingSession", "TradeableStatus", "SurfaceResult", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey), global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey.Parser, new[]{ "Ekey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LiveSurfaceAtm : pb::IMessage<LiveSurfaceAtm>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveSurfaceAtm> _parser = new pb::MessageParser<LiveSurfaceAtm>(() => new LiveSurfaceAtm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveSurfaceAtm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveSurfaceAtmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceAtm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceAtm(LiveSurfaceAtm other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      years_ = other.years_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      exType_ = other.exType_;
      modelType_ = other.modelType_;
      earnCnt_ = other.earnCnt_;
      earnCntAdj_ = other.earnCntAdj_;
      axisVolRT_ = other.axisVolRT_;
      axisFUPrc_ = other.axisFUPrc_;
      moneynessType_ = other.moneynessType_;
      underlierMode_ = other.underlierMode_;
      priceQuoteType_ = other.priceQuoteType_;
      atmVol_ = other.atmVol_;
      atmCen_ = other.atmCen_;
      atmVolHist_ = other.atmVolHist_;
      atmCenHist_ = other.atmCenHist_;
      minAtmVol_ = other.minAtmVol_;
      maxAtmVol_ = other.maxAtmVol_;
      eMove_ = other.eMove_;
      eMoveHist_ = other.eMoveHist_;
      atmMove_ = other.atmMove_;
      atmCenMove_ = other.atmCenMove_;
      atmPhi_ = other.atmPhi_;
      atmVega_ = other.atmVega_;
      slope_ = other.slope_;
      varSwapFV_ = other.varSwapFV_;
      gridType_ = other.gridType_;
      minXAxis_ = other.minXAxis_;
      maxXAxis_ = other.maxXAxis_;
      minCurvValue_ = other.minCurvValue_;
      minCurvXAxis_ = other.minCurvXAxis_;
      maxCurvValue_ = other.maxCurvValue_;
      maxCurvXAxis_ = other.maxCurvXAxis_;
      skewMinX_ = other.skewMinX_;
      skewMinY_ = other.skewMinY_;
      skewD11_ = other.skewD11_;
      skewD10_ = other.skewD10_;
      skewD9_ = other.skewD9_;
      skewD8_ = other.skewD8_;
      skewD7_ = other.skewD7_;
      skewD6_ = other.skewD6_;
      skewD5_ = other.skewD5_;
      skewD4_ = other.skewD4_;
      skewD3_ = other.skewD3_;
      skewD2_ = other.skewD2_;
      skewD1_ = other.skewD1_;
      skewC0_ = other.skewC0_;
      skewU1_ = other.skewU1_;
      skewU2_ = other.skewU2_;
      skewU3_ = other.skewU3_;
      skewU4_ = other.skewU4_;
      skewU5_ = other.skewU5_;
      skewU6_ = other.skewU6_;
      skewU7_ = other.skewU7_;
      skewU8_ = other.skewU8_;
      skewU9_ = other.skewU9_;
      skewU10_ = other.skewU10_;
      skewU11_ = other.skewU11_;
      sdivD3_ = other.sdivD3_;
      sdivD2_ = other.sdivD2_;
      sdivD1_ = other.sdivD1_;
      sdivU1_ = other.sdivU1_;
      sdivU2_ = other.sdivU2_;
      sdivU3_ = other.sdivU3_;
      pwidth_ = other.pwidth_;
      vwidth_ = other.vwidth_;
      cCnt_ = other.cCnt_;
      pCnt_ = other.pCnt_;
      cBidMiss_ = other.cBidMiss_;
      cAskMiss_ = other.cAskMiss_;
      pBidMiss_ = other.pBidMiss_;
      pAskMiss_ = other.pAskMiss_;
      fitAvgErr_ = other.fitAvgErr_;
      fitAvgAbsErr_ = other.fitAvgAbsErr_;
      fitMaxPrcErr_ = other.fitMaxPrcErr_;
      fitErrXX_ = other.fitErrXX_;
      fitErrCP_ = other.fitErrCP_;
      fitErrDe_ = other.fitErrDe_;
      fitErrBid_ = other.fitErrBid_;
      fitErrAsk_ = other.fitErrAsk_;
      fitErrPrc_ = other.fitErrPrc_;
      fitErrVol_ = other.fitErrVol_;
      counter_ = other.counter_;
      skewCounter_ = other.skewCounter_;
      sdivCounter_ = other.sdivCounter_;
      tradingSession_ = other.tradingSession_;
      tradeableStatus_ = other.tradeableStatus_;
      surfaceResult_ = other.surfaceResult_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceAtm Clone() {
      return new LiveSurfaceAtm(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying stock key that this option expiration attaches to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "fkey" field.</summary>
    public const int FkeyFieldNumber = 103;
    private global::Spiderrock.Protobuf.ExpiryKey fkey_;
    /// <summary>
    /// future that this option expiration month written on (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey Fkey {
      get { return fkey_; }
      set {
        fkey_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 106;
    private double uBid_;
    /// <summary>
    /// underlier bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 109;
    private double uAsk_;
    /// <summary>
    /// underlier ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 112;
    private float years_;
    /// <summary>
    /// time to expiration (in years)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 115;
    private float rate_;
    /// <summary>
    /// interest rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 118;
    private float sdiv_;
    /// <summary>
    /// stock dividend (borrow rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 121;
    private float ddiv_;
    /// <summary>
    /// present value of discrete dividend stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 124;
    private int exType_;
    /// <summary>
    /// exercise type of the options used to compute this surface
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 127;
    private int modelType_;
    /// <summary>
    /// option pricing model used for price calcs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt" field.</summary>
    public const int EarnCntFieldNumber = 130;
    private float earnCnt_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCnt {
      get { return earnCnt_; }
      set {
        earnCnt_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt_adj" field.</summary>
    public const int EarnCntAdjFieldNumber = 133;
    private float earnCntAdj_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCntAdj {
      get { return earnCntAdj_; }
      set {
        earnCntAdj_ = value;
      }
    }

    /// <summary>Field number for the "axis_vol_rT" field.</summary>
    public const int AxisVolRTFieldNumber = 136;
    private float axisVolRT_;
    /// <summary>
    /// axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisVolRT {
      get { return axisVolRT_; }
      set {
        axisVolRT_ = value;
      }
    }

    /// <summary>Field number for the "axis_fUPrc" field.</summary>
    public const int AxisFUPrcFieldNumber = 139;
    private float axisFUPrc_;
    /// <summary>
    /// axis FwdUPrc (fwd underlying price used to compute xAxis)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisFUPrc {
      get { return axisFUPrc_; }
      set {
        axisFUPrc_ = value;
      }
    }

    /// <summary>Field number for the "moneyness_type" field.</summary>
    public const int MoneynessTypeFieldNumber = 142;
    private global::Spiderrock.Protobuf.MoneynessType moneynessType_ = global::Spiderrock.Protobuf.MoneynessType.Unspecified;
    /// <summary>
    /// moneyness (xAxis) convention
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MoneynessType MoneynessType {
      get { return moneynessType_; }
      set {
        moneynessType_ = value;
      }
    }

    /// <summary>Field number for the "underlier_mode" field.</summary>
    public const int UnderlierModeFieldNumber = 145;
    private global::Spiderrock.Protobuf.UnderlierMode underlierMode_ = global::Spiderrock.Protobuf.UnderlierMode.Unspecified;
    /// <summary>
    /// underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market * uPrcRatio; Actual = use actual underlier future market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierMode UnderlierMode {
      get { return underlierMode_; }
      set {
        underlierMode_ = value;
      }
    }

    /// <summary>Field number for the "price_quote_type" field.</summary>
    public const int PriceQuoteTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.PriceQuoteType priceQuoteType_ = global::Spiderrock.Protobuf.PriceQuoteType.Unspecified;
    /// <summary>
    /// Price or Vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceQuoteType PriceQuoteType {
      get { return priceQuoteType_; }
      set {
        priceQuoteType_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 151;
    private float atmVol_;
    /// <summary>
    /// atm vol (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen" field.</summary>
    public const int AtmCenFieldNumber = 154;
    private float atmCen_;
    /// <summary>
    /// atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCen {
      get { return atmCen_; }
      set {
        atmCen_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol_hist" field.</summary>
    public const int AtmVolHistFieldNumber = 157;
    private float atmVolHist_;
    /// <summary>
    /// historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVolHist {
      get { return atmVolHist_; }
      set {
        atmVolHist_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen_hist" field.</summary>
    public const int AtmCenHistFieldNumber = 160;
    private float atmCenHist_;
    /// <summary>
    /// censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCenHist {
      get { return atmCenHist_; }
      set {
        atmCenHist_ = value;
      }
    }

    /// <summary>Field number for the "min_atm_vol" field.</summary>
    public const int MinAtmVolFieldNumber = 163;
    private float minAtmVol_;
    /// <summary>
    /// minimum estimated atm vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinAtmVol {
      get { return minAtmVol_; }
      set {
        minAtmVol_ = value;
      }
    }

    /// <summary>Field number for the "max_atm_vol" field.</summary>
    public const int MaxAtmVolFieldNumber = 166;
    private float maxAtmVol_;
    /// <summary>
    /// maximum estimated atm vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxAtmVol {
      get { return maxAtmVol_; }
      set {
        maxAtmVol_ = value;
      }
    }

    /// <summary>Field number for the "e_move" field.</summary>
    public const int EMoveFieldNumber = 169;
    private float eMove_;
    /// <summary>
    /// implied earnings move (from LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMove {
      get { return eMove_; }
      set {
        eMove_ = value;
      }
    }

    /// <summary>Field number for the "e_move_hist" field.</summary>
    public const int EMoveHistFieldNumber = 172;
    private float eMoveHist_;
    /// <summary>
    /// historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMoveHist {
      get { return eMoveHist_; }
      set {
        eMoveHist_ = value;
      }
    }

    /// <summary>Field number for the "atm_move" field.</summary>
    public const int AtmMoveFieldNumber = 175;
    private float atmMove_;
    /// <summary>
    /// fixed strike atm move from prior period
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmMove {
      get { return atmMove_; }
      set {
        atmMove_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen_move" field.</summary>
    public const int AtmCenMoveFieldNumber = 178;
    private float atmCenMove_;
    /// <summary>
    /// fixed strike atm (censored) move from prior period
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCenMove {
      get { return atmCenMove_; }
      set {
        atmCenMove_ = value;
      }
    }

    /// <summary>Field number for the "atm_phi" field.</summary>
    public const int AtmPhiFieldNumber = 181;
    private float atmPhi_;
    /// <summary>
    /// surface phi @ xAxis = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmPhi {
      get { return atmPhi_; }
      set {
        atmPhi_ = value;
      }
    }

    /// <summary>Field number for the "atm_vega" field.</summary>
    public const int AtmVegaFieldNumber = 184;
    private float atmVega_;
    /// <summary>
    /// surface vega @ xAxis = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVega {
      get { return atmVega_; }
      set {
        atmVega_ = value;
      }
    }

    /// <summary>Field number for the "slope" field.</summary>
    public const int SlopeFieldNumber = 187;
    private float slope_;
    /// <summary>
    /// volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Slope {
      get { return slope_; }
      set {
        slope_ = value;
      }
    }

    /// <summary>Field number for the "var_swap_fV" field.</summary>
    public const int VarSwapFVFieldNumber = 190;
    private float varSwapFV_;
    /// <summary>
    /// variance swap fair value (estimated by numerical integration over OTM price surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VarSwapFV {
      get { return varSwapFV_; }
      set {
        varSwapFV_ = value;
      }
    }

    /// <summary>Field number for the "grid_type" field.</summary>
    public const int GridTypeFieldNumber = 193;
    private global::Spiderrock.Protobuf.GridType gridType_ = global::Spiderrock.Protobuf.GridType.Unspecified;
    /// <summary>
    /// gridType defines D11 - U12 xAxis points + spline type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.GridType GridType {
      get { return gridType_; }
      set {
        gridType_ = value;
      }
    }

    /// <summary>Field number for the "min_xAxis" field.</summary>
    public const int MinXAxisFieldNumber = 196;
    private float minXAxis_;
    /// <summary>
    /// minimum xAxis value; xAxis values to the left extrapolate horizontally
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinXAxis {
      get { return minXAxis_; }
      set {
        minXAxis_ = value;
      }
    }

    /// <summary>Field number for the "max_xAxis" field.</summary>
    public const int MaxXAxisFieldNumber = 199;
    private float maxXAxis_;
    /// <summary>
    /// maximum xAxis value; xAxis values to the right extrapolate horizontally
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxXAxis {
      get { return maxXAxis_; }
      set {
        maxXAxis_ = value;
      }
    }

    /// <summary>Field number for the "min_curv_value" field.</summary>
    public const int MinCurvValueFieldNumber = 202;
    private float minCurvValue_;
    /// <summary>
    /// minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinCurvValue {
      get { return minCurvValue_; }
      set {
        minCurvValue_ = value;
      }
    }

    /// <summary>Field number for the "min_curv_xAxis" field.</summary>
    public const int MinCurvXAxisFieldNumber = 205;
    private float minCurvXAxis_;
    /// <summary>
    /// xAxis of minimum curvature point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinCurvXAxis {
      get { return minCurvXAxis_; }
      set {
        minCurvXAxis_ = value;
      }
    }

    /// <summary>Field number for the "max_curv_value" field.</summary>
    public const int MaxCurvValueFieldNumber = 208;
    private float maxCurvValue_;
    /// <summary>
    /// maximum curvature (2nd derivative) of skew curve
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxCurvValue {
      get { return maxCurvValue_; }
      set {
        maxCurvValue_ = value;
      }
    }

    /// <summary>Field number for the "max_curv_xAxis" field.</summary>
    public const int MaxCurvXAxisFieldNumber = 211;
    private float maxCurvXAxis_;
    /// <summary>
    /// xAxis of maximum curvature point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxCurvXAxis {
      get { return maxCurvXAxis_; }
      set {
        maxCurvXAxis_ = value;
      }
    }

    /// <summary>Field number for the "skew_min_x" field.</summary>
    public const int SkewMinXFieldNumber = 214;
    private float skewMinX_;
    /// <summary>
    /// xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewMinX {
      get { return skewMinX_; }
      set {
        skewMinX_ = value;
      }
    }

    /// <summary>Field number for the "skew_min_y" field.</summary>
    public const int SkewMinYFieldNumber = 217;
    private float skewMinY_;
    /// <summary>
    /// skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewMinY {
      get { return skewMinY_; }
      set {
        skewMinY_ = value;
      }
    }

    /// <summary>Field number for the "skew_d11" field.</summary>
    public const int SkewD11FieldNumber = 220;
    private float skewD11_;
    /// <summary>
    /// skew @ D11 point (volatility skew curve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD11 {
      get { return skewD11_; }
      set {
        skewD11_ = value;
      }
    }

    /// <summary>Field number for the "skew_d10" field.</summary>
    public const int SkewD10FieldNumber = 223;
    private float skewD10_;
    /// <summary>
    /// skew @ D10 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD10 {
      get { return skewD10_; }
      set {
        skewD10_ = value;
      }
    }

    /// <summary>Field number for the "skew_d9" field.</summary>
    public const int SkewD9FieldNumber = 226;
    private float skewD9_;
    /// <summary>
    /// skew @ D9 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD9 {
      get { return skewD9_; }
      set {
        skewD9_ = value;
      }
    }

    /// <summary>Field number for the "skew_d8" field.</summary>
    public const int SkewD8FieldNumber = 229;
    private float skewD8_;
    /// <summary>
    /// skew @ D8 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD8 {
      get { return skewD8_; }
      set {
        skewD8_ = value;
      }
    }

    /// <summary>Field number for the "skew_d7" field.</summary>
    public const int SkewD7FieldNumber = 232;
    private float skewD7_;
    /// <summary>
    /// skew @ D7 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD7 {
      get { return skewD7_; }
      set {
        skewD7_ = value;
      }
    }

    /// <summary>Field number for the "skew_d6" field.</summary>
    public const int SkewD6FieldNumber = 235;
    private float skewD6_;
    /// <summary>
    /// skew @ D6 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD6 {
      get { return skewD6_; }
      set {
        skewD6_ = value;
      }
    }

    /// <summary>Field number for the "skew_d5" field.</summary>
    public const int SkewD5FieldNumber = 238;
    private float skewD5_;
    /// <summary>
    /// skew @ D5 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD5 {
      get { return skewD5_; }
      set {
        skewD5_ = value;
      }
    }

    /// <summary>Field number for the "skew_d4" field.</summary>
    public const int SkewD4FieldNumber = 241;
    private float skewD4_;
    /// <summary>
    /// skew @ D4 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD4 {
      get { return skewD4_; }
      set {
        skewD4_ = value;
      }
    }

    /// <summary>Field number for the "skew_d3" field.</summary>
    public const int SkewD3FieldNumber = 244;
    private float skewD3_;
    /// <summary>
    /// skew @ D3 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD3 {
      get { return skewD3_; }
      set {
        skewD3_ = value;
      }
    }

    /// <summary>Field number for the "skew_d2" field.</summary>
    public const int SkewD2FieldNumber = 247;
    private float skewD2_;
    /// <summary>
    /// skew @ D2 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD2 {
      get { return skewD2_; }
      set {
        skewD2_ = value;
      }
    }

    /// <summary>Field number for the "skew_d1" field.</summary>
    public const int SkewD1FieldNumber = 250;
    private float skewD1_;
    /// <summary>
    /// skew @ D1 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewD1 {
      get { return skewD1_; }
      set {
        skewD1_ = value;
      }
    }

    /// <summary>Field number for the "skew_c0" field.</summary>
    public const int SkewC0FieldNumber = 253;
    private float skewC0_;
    /// <summary>
    /// central value (@xAxis = 0) [usually zero]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC0 {
      get { return skewC0_; }
      set {
        skewC0_ = value;
      }
    }

    /// <summary>Field number for the "skew_u1" field.</summary>
    public const int SkewU1FieldNumber = 256;
    private float skewU1_;
    /// <summary>
    /// skew @ U1 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU1 {
      get { return skewU1_; }
      set {
        skewU1_ = value;
      }
    }

    /// <summary>Field number for the "skew_u2" field.</summary>
    public const int SkewU2FieldNumber = 259;
    private float skewU2_;
    /// <summary>
    /// skew @ U2 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU2 {
      get { return skewU2_; }
      set {
        skewU2_ = value;
      }
    }

    /// <summary>Field number for the "skew_u3" field.</summary>
    public const int SkewU3FieldNumber = 262;
    private float skewU3_;
    /// <summary>
    /// skew @ U3 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU3 {
      get { return skewU3_; }
      set {
        skewU3_ = value;
      }
    }

    /// <summary>Field number for the "skew_u4" field.</summary>
    public const int SkewU4FieldNumber = 265;
    private float skewU4_;
    /// <summary>
    /// skew @ U4 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU4 {
      get { return skewU4_; }
      set {
        skewU4_ = value;
      }
    }

    /// <summary>Field number for the "skew_u5" field.</summary>
    public const int SkewU5FieldNumber = 268;
    private float skewU5_;
    /// <summary>
    /// skew @ U5 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU5 {
      get { return skewU5_; }
      set {
        skewU5_ = value;
      }
    }

    /// <summary>Field number for the "skew_u6" field.</summary>
    public const int SkewU6FieldNumber = 271;
    private float skewU6_;
    /// <summary>
    /// skew @ U6 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU6 {
      get { return skewU6_; }
      set {
        skewU6_ = value;
      }
    }

    /// <summary>Field number for the "skew_u7" field.</summary>
    public const int SkewU7FieldNumber = 274;
    private float skewU7_;
    /// <summary>
    /// skew @ U7 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU7 {
      get { return skewU7_; }
      set {
        skewU7_ = value;
      }
    }

    /// <summary>Field number for the "skew_u8" field.</summary>
    public const int SkewU8FieldNumber = 277;
    private float skewU8_;
    /// <summary>
    /// skew @ U8 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU8 {
      get { return skewU8_; }
      set {
        skewU8_ = value;
      }
    }

    /// <summary>Field number for the "skew_u9" field.</summary>
    public const int SkewU9FieldNumber = 280;
    private float skewU9_;
    /// <summary>
    /// skew @ U9 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU9 {
      get { return skewU9_; }
      set {
        skewU9_ = value;
      }
    }

    /// <summary>Field number for the "skew_u10" field.</summary>
    public const int SkewU10FieldNumber = 283;
    private float skewU10_;
    /// <summary>
    /// skew @ U10 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU10 {
      get { return skewU10_; }
      set {
        skewU10_ = value;
      }
    }

    /// <summary>Field number for the "skew_u11" field.</summary>
    public const int SkewU11FieldNumber = 286;
    private float skewU11_;
    /// <summary>
    /// skew @ U11 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewU11 {
      get { return skewU11_; }
      set {
        skewU11_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_d3" field.</summary>
    public const int SdivD3FieldNumber = 289;
    private float sdivD3_;
    /// <summary>
    /// sdiv @ D3 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivD3 {
      get { return sdivD3_; }
      set {
        sdivD3_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_d2" field.</summary>
    public const int SdivD2FieldNumber = 292;
    private float sdivD2_;
    /// <summary>
    /// sdiv @ D2 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivD2 {
      get { return sdivD2_; }
      set {
        sdivD2_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_d1" field.</summary>
    public const int SdivD1FieldNumber = 295;
    private float sdivD1_;
    /// <summary>
    /// sdiv @ D1 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivD1 {
      get { return sdivD1_; }
      set {
        sdivD1_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_u1" field.</summary>
    public const int SdivU1FieldNumber = 298;
    private float sdivU1_;
    /// <summary>
    /// sdiv @ U1 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivU1 {
      get { return sdivU1_; }
      set {
        sdivU1_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_u2" field.</summary>
    public const int SdivU2FieldNumber = 301;
    private float sdivU2_;
    /// <summary>
    /// sdiv @ U2 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivU2 {
      get { return sdivU2_; }
      set {
        sdivU2_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_u3" field.</summary>
    public const int SdivU3FieldNumber = 304;
    private float sdivU3_;
    /// <summary>
    /// sdiv @ U3 point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivU3 {
      get { return sdivU3_; }
      set {
        sdivU3_ = value;
      }
    }

    /// <summary>Field number for the "pwidth" field.</summary>
    public const int PwidthFieldNumber = 307;
    private float pwidth_;
    /// <summary>
    /// minimum mkt premium width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pwidth {
      get { return pwidth_; }
      set {
        pwidth_ = value;
      }
    }

    /// <summary>Field number for the "vwidth" field.</summary>
    public const int VwidthFieldNumber = 310;
    private float vwidth_;
    /// <summary>
    /// minimum mkt volatility width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vwidth {
      get { return vwidth_; }
      set {
        vwidth_ = value;
      }
    }

    /// <summary>Field number for the "c_cnt" field.</summary>
    public const int CCntFieldNumber = 313;
    private int cCnt_;
    /// <summary>
    /// num call strikes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CCnt {
      get { return cCnt_; }
      set {
        cCnt_ = value;
      }
    }

    /// <summary>Field number for the "p_cnt" field.</summary>
    public const int PCntFieldNumber = 316;
    private int pCnt_;
    /// <summary>
    /// num put strikes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PCnt {
      get { return pCnt_; }
      set {
        pCnt_ = value;
      }
    }

    /// <summary>Field number for the "c_bid_miss" field.</summary>
    public const int CBidMissFieldNumber = 319;
    private int cBidMiss_;
    /// <summary>
    /// number of call bid violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CBidMiss {
      get { return cBidMiss_; }
      set {
        cBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "c_ask_miss" field.</summary>
    public const int CAskMissFieldNumber = 322;
    private int cAskMiss_;
    /// <summary>
    /// number of call ask violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CAskMiss {
      get { return cAskMiss_; }
      set {
        cAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_bid_miss" field.</summary>
    public const int PBidMissFieldNumber = 325;
    private int pBidMiss_;
    /// <summary>
    /// number of put bid violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PBidMiss {
      get { return pBidMiss_; }
      set {
        pBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_ask_miss" field.</summary>
    public const int PAskMissFieldNumber = 328;
    private int pAskMiss_;
    /// <summary>
    /// number of put ask violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PAskMiss {
      get { return pAskMiss_; }
      set {
        pAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "fit_avg_err" field.</summary>
    public const int FitAvgErrFieldNumber = 331;
    private float fitAvgErr_;
    /// <summary>
    /// surface fit R2 (mid-market values)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitAvgErr {
      get { return fitAvgErr_; }
      set {
        fitAvgErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_avg_abs_err" field.</summary>
    public const int FitAvgAbsErrFieldNumber = 334;
    private float fitAvgAbsErr_;
    /// <summary>
    /// mean square error (mid-market values)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitAvgAbsErr {
      get { return fitAvgAbsErr_; }
      set {
        fitAvgAbsErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_max_prc_err" field.</summary>
    public const int FitMaxPrcErrFieldNumber = 337;
    private float fitMaxPrcErr_;
    /// <summary>
    /// worst case surface premium violation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitMaxPrcErr {
      get { return fitMaxPrcErr_; }
      set {
        fitMaxPrcErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_xX" field.</summary>
    public const int FitErrXXFieldNumber = 340;
    private float fitErrXX_;
    /// <summary>
    /// okey_xx of the option with the largest fit error in this expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrXX {
      get { return fitErrXX_; }
      set {
        fitErrXX_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_cP" field.</summary>
    public const int FitErrCPFieldNumber = 343;
    private global::Spiderrock.Protobuf.CallPut fitErrCP_ = global::Spiderrock.Protobuf.CallPut.Unspecified;
    /// <summary>
    /// okey_cp of the option with the largest fit error in this expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CallPut FitErrCP {
      get { return fitErrCP_; }
      set {
        fitErrCP_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_de" field.</summary>
    public const int FitErrDeFieldNumber = 346;
    private float fitErrDe_;
    /// <summary>
    /// delta of fixErrXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrDe {
      get { return fitErrDe_; }
      set {
        fitErrDe_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_bid" field.</summary>
    public const int FitErrBidFieldNumber = 349;
    private float fitErrBid_;
    /// <summary>
    /// bid of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrBid {
      get { return fitErrBid_; }
      set {
        fitErrBid_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_ask" field.</summary>
    public const int FitErrAskFieldNumber = 352;
    private float fitErrAsk_;
    /// <summary>
    /// ask of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrAsk {
      get { return fitErrAsk_; }
      set {
        fitErrAsk_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_prc" field.</summary>
    public const int FitErrPrcFieldNumber = 355;
    private float fitErrPrc_;
    /// <summary>
    /// surface prc of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrPrc {
      get { return fitErrPrc_; }
      set {
        fitErrPrc_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_vol" field.</summary>
    public const int FitErrVolFieldNumber = 358;
    private float fitErrVol_;
    /// <summary>
    /// surface vol of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrVol {
      get { return fitErrVol_; }
      set {
        fitErrVol_ = value;
      }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 361;
    private int counter_;
    /// <summary>
    /// message counter - number of surface fits today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "skew_counter" field.</summary>
    public const int SkewCounterFieldNumber = 364;
    private int skewCounter_;
    /// <summary>
    /// skew surface fit counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkewCounter {
      get { return skewCounter_; }
      set {
        skewCounter_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_counter" field.</summary>
    public const int SdivCounterFieldNumber = 367;
    private int sdivCounter_;
    /// <summary>
    /// sdiv surface fit counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SdivCounter {
      get { return sdivCounter_; }
      set {
        sdivCounter_ = value;
      }
    }

    /// <summary>Field number for the "trading_session" field.</summary>
    public const int TradingSessionFieldNumber = 380;
    private global::Spiderrock.Protobuf.TradingSession tradingSession_ = global::Spiderrock.Protobuf.TradingSession.Unspecified;
    /// <summary>
    /// trading session this surface is from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradingSession TradingSession {
      get { return tradingSession_; }
      set {
        tradingSession_ = value;
      }
    }

    /// <summary>Field number for the "tradeable_status" field.</summary>
    public const int TradeableStatusFieldNumber = 373;
    private global::Spiderrock.Protobuf.TradeableStatus tradeableStatus_ = global::Spiderrock.Protobuf.TradeableStatus.Unspecified;
    /// <summary>
    /// indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradeableStatus TradeableStatus {
      get { return tradeableStatus_; }
      set {
        tradeableStatus_ = value;
      }
    }

    /// <summary>Field number for the "surface_result" field.</summary>
    public const int SurfaceResultFieldNumber = 376;
    private global::Spiderrock.Protobuf.SurfaceResult surfaceResult_ = global::Spiderrock.Protobuf.SurfaceResult.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SurfaceResult SurfaceResult {
      get { return surfaceResult_; }
      set {
        surfaceResult_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 379;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveSurfaceAtm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveSurfaceAtm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(Fkey, other.Fkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (ExType != other.ExType) return false;
      if (ModelType != other.ModelType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCnt, other.EarnCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCntAdj, other.EarnCntAdj)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisVolRT, other.AxisVolRT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisFUPrc, other.AxisFUPrc)) return false;
      if (MoneynessType != other.MoneynessType) return false;
      if (UnderlierMode != other.UnderlierMode) return false;
      if (PriceQuoteType != other.PriceQuoteType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCen, other.AtmCen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVolHist, other.AtmVolHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCenHist, other.AtmCenHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinAtmVol, other.MinAtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAtmVol, other.MaxAtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMove, other.EMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMoveHist, other.EMoveHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmMove, other.AtmMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCenMove, other.AtmCenMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmPhi, other.AtmPhi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVega, other.AtmVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Slope, other.Slope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VarSwapFV, other.VarSwapFV)) return false;
      if (GridType != other.GridType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinXAxis, other.MinXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxXAxis, other.MaxXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinCurvValue, other.MinCurvValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinCurvXAxis, other.MinCurvXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxCurvValue, other.MaxCurvValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxCurvXAxis, other.MaxCurvXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewMinX, other.SkewMinX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewMinY, other.SkewMinY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD11, other.SkewD11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD10, other.SkewD10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD9, other.SkewD9)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD8, other.SkewD8)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD7, other.SkewD7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD6, other.SkewD6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD5, other.SkewD5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD4, other.SkewD4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD3, other.SkewD3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD2, other.SkewD2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewD1, other.SkewD1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC0, other.SkewC0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU1, other.SkewU1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU2, other.SkewU2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU3, other.SkewU3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU4, other.SkewU4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU5, other.SkewU5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU6, other.SkewU6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU7, other.SkewU7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU8, other.SkewU8)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU9, other.SkewU9)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU10, other.SkewU10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewU11, other.SkewU11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivD3, other.SdivD3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivD2, other.SdivD2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivD1, other.SdivD1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivU1, other.SdivU1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivU2, other.SdivU2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivU3, other.SdivU3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pwidth, other.Pwidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vwidth, other.Vwidth)) return false;
      if (CCnt != other.CCnt) return false;
      if (PCnt != other.PCnt) return false;
      if (CBidMiss != other.CBidMiss) return false;
      if (CAskMiss != other.CAskMiss) return false;
      if (PBidMiss != other.PBidMiss) return false;
      if (PAskMiss != other.PAskMiss) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitAvgErr, other.FitAvgErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitAvgAbsErr, other.FitAvgAbsErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitMaxPrcErr, other.FitMaxPrcErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrXX, other.FitErrXX)) return false;
      if (FitErrCP != other.FitErrCP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrDe, other.FitErrDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrBid, other.FitErrBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrAsk, other.FitErrAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrPrc, other.FitErrPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrVol, other.FitErrVol)) return false;
      if (Counter != other.Counter) return false;
      if (SkewCounter != other.SkewCounter) return false;
      if (SdivCounter != other.SdivCounter) return false;
      if (TradingSession != other.TradingSession) return false;
      if (TradeableStatus != other.TradeableStatus) return false;
      if (SurfaceResult != other.SurfaceResult) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (fkey_ != null) hash ^= Fkey.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (ExType != 0) hash ^= ExType.GetHashCode();
      if (ModelType != 0) hash ^= ModelType.GetHashCode();
      if (EarnCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCnt);
      if (EarnCntAdj != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCntAdj);
      if (AxisVolRT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisVolRT);
      if (AxisFUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisFUPrc);
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) hash ^= MoneynessType.GetHashCode();
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) hash ^= UnderlierMode.GetHashCode();
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) hash ^= PriceQuoteType.GetHashCode();
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (AtmCen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCen);
      if (AtmVolHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVolHist);
      if (AtmCenHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCenHist);
      if (MinAtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinAtmVol);
      if (MaxAtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAtmVol);
      if (EMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMove);
      if (EMoveHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMoveHist);
      if (AtmMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmMove);
      if (AtmCenMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCenMove);
      if (AtmPhi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmPhi);
      if (AtmVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVega);
      if (Slope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Slope);
      if (VarSwapFV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VarSwapFV);
      if (GridType != global::Spiderrock.Protobuf.GridType.Unspecified) hash ^= GridType.GetHashCode();
      if (MinXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinXAxis);
      if (MaxXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxXAxis);
      if (MinCurvValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinCurvValue);
      if (MinCurvXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinCurvXAxis);
      if (MaxCurvValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxCurvValue);
      if (MaxCurvXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxCurvXAxis);
      if (SkewMinX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewMinX);
      if (SkewMinY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewMinY);
      if (SkewD11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD11);
      if (SkewD10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD10);
      if (SkewD9 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD9);
      if (SkewD8 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD8);
      if (SkewD7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD7);
      if (SkewD6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD6);
      if (SkewD5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD5);
      if (SkewD4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD4);
      if (SkewD3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD3);
      if (SkewD2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD2);
      if (SkewD1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewD1);
      if (SkewC0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC0);
      if (SkewU1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU1);
      if (SkewU2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU2);
      if (SkewU3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU3);
      if (SkewU4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU4);
      if (SkewU5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU5);
      if (SkewU6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU6);
      if (SkewU7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU7);
      if (SkewU8 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU8);
      if (SkewU9 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU9);
      if (SkewU10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU10);
      if (SkewU11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewU11);
      if (SdivD3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivD3);
      if (SdivD2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivD2);
      if (SdivD1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivD1);
      if (SdivU1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivU1);
      if (SdivU2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivU2);
      if (SdivU3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivU3);
      if (Pwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pwidth);
      if (Vwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vwidth);
      if (CCnt != 0) hash ^= CCnt.GetHashCode();
      if (PCnt != 0) hash ^= PCnt.GetHashCode();
      if (CBidMiss != 0) hash ^= CBidMiss.GetHashCode();
      if (CAskMiss != 0) hash ^= CAskMiss.GetHashCode();
      if (PBidMiss != 0) hash ^= PBidMiss.GetHashCode();
      if (PAskMiss != 0) hash ^= PAskMiss.GetHashCode();
      if (FitAvgErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitAvgErr);
      if (FitAvgAbsErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitAvgAbsErr);
      if (FitMaxPrcErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitMaxPrcErr);
      if (FitErrXX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrXX);
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) hash ^= FitErrCP.GetHashCode();
      if (FitErrDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrDe);
      if (FitErrBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrBid);
      if (FitErrAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrAsk);
      if (FitErrPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrPrc);
      if (FitErrVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrVol);
      if (Counter != 0) hash ^= Counter.GetHashCode();
      if (SkewCounter != 0) hash ^= SkewCounter.GetHashCode();
      if (SdivCounter != 0) hash ^= SdivCounter.GetHashCode();
      if (TradingSession != global::Spiderrock.Protobuf.TradingSession.Unspecified) hash ^= TradingSession.GetHashCode();
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) hash ^= TradeableStatus.GetHashCode();
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) hash ^= SurfaceResult.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Fkey);
      }
      if (UBid != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(UAsk);
      }
      if (Years != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Ddiv);
      }
      if (ExType != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ExType);
      }
      if (ModelType != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(ModelType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(EarnCntAdj);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(AxisVolRT);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(AxisFUPrc);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) MoneynessType);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) UnderlierMode);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(AtmVol);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(AtmCen);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AtmCenHist);
      }
      if (MinAtmVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(MinAtmVol);
      }
      if (MaxAtmVol != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(MaxAtmVol);
      }
      if (EMove != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(EMoveHist);
      }
      if (AtmMove != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(AtmMove);
      }
      if (AtmCenMove != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(AtmCenMove);
      }
      if (AtmPhi != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(AtmPhi);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(AtmVega);
      }
      if (Slope != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Slope);
      }
      if (VarSwapFV != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(VarSwapFV);
      }
      if (GridType != global::Spiderrock.Protobuf.GridType.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) GridType);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(MaxXAxis);
      }
      if (MinCurvValue != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MinCurvValue);
      }
      if (MinCurvXAxis != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(MinCurvXAxis);
      }
      if (MaxCurvValue != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(MaxCurvValue);
      }
      if (MaxCurvXAxis != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MaxCurvXAxis);
      }
      if (SkewMinX != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(SkewMinX);
      }
      if (SkewMinY != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(SkewMinY);
      }
      if (SkewD11 != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(SkewD11);
      }
      if (SkewD10 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(SkewD10);
      }
      if (SkewD9 != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(SkewD9);
      }
      if (SkewD8 != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(SkewD8);
      }
      if (SkewD7 != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(SkewD7);
      }
      if (SkewD6 != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(SkewD6);
      }
      if (SkewD5 != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(SkewD5);
      }
      if (SkewD4 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(SkewD4);
      }
      if (SkewD3 != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SkewD3);
      }
      if (SkewD2 != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(SkewD2);
      }
      if (SkewD1 != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SkewD1);
      }
      if (SkewC0 != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(SkewC0);
      }
      if (SkewU1 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(SkewU1);
      }
      if (SkewU2 != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SkewU2);
      }
      if (SkewU3 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SkewU3);
      }
      if (SkewU4 != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SkewU4);
      }
      if (SkewU5 != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SkewU5);
      }
      if (SkewU6 != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SkewU6);
      }
      if (SkewU7 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SkewU7);
      }
      if (SkewU8 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SkewU8);
      }
      if (SkewU9 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SkewU9);
      }
      if (SkewU10 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(SkewU10);
      }
      if (SkewU11 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(SkewU11);
      }
      if (SdivD3 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(SdivD3);
      }
      if (SdivD2 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(SdivD2);
      }
      if (SdivD1 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(SdivD1);
      }
      if (SdivU1 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(SdivU1);
      }
      if (SdivU2 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(SdivU2);
      }
      if (SdivU3 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SdivU3);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(Vwidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(200, 19);
        output.WriteInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(PCnt);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(248, 19);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(144, 20);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(FitAvgErr);
      }
      if (FitAvgAbsErr != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(FitAvgAbsErr);
      }
      if (FitMaxPrcErr != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(FitMaxPrcErr);
      }
      if (FitErrXX != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(FitErrXX);
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(FitErrDe);
      }
      if (FitErrBid != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(FitErrBid);
      }
      if (FitErrAsk != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(FitErrAsk);
      }
      if (FitErrPrc != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(FitErrPrc);
      }
      if (FitErrVol != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(FitErrVol);
      }
      if (Counter != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(Counter);
      }
      if (SkewCounter != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(SkewCounter);
      }
      if (SdivCounter != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(SdivCounter);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        output.WriteRawTag(192, 23);
        output.WriteEnum((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 23);
        output.WriteMessage(Timestamp);
      }
      if (TradingSession != global::Spiderrock.Protobuf.TradingSession.Unspecified) {
        output.WriteRawTag(224, 23);
        output.WriteEnum((int) TradingSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Fkey);
      }
      if (UBid != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(UAsk);
      }
      if (Years != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Ddiv);
      }
      if (ExType != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ExType);
      }
      if (ModelType != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(ModelType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(EarnCntAdj);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(AxisVolRT);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(AxisFUPrc);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) MoneynessType);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) UnderlierMode);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(AtmVol);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(AtmCen);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AtmCenHist);
      }
      if (MinAtmVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(MinAtmVol);
      }
      if (MaxAtmVol != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(MaxAtmVol);
      }
      if (EMove != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(EMoveHist);
      }
      if (AtmMove != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(AtmMove);
      }
      if (AtmCenMove != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(AtmCenMove);
      }
      if (AtmPhi != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(AtmPhi);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(AtmVega);
      }
      if (Slope != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Slope);
      }
      if (VarSwapFV != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(VarSwapFV);
      }
      if (GridType != global::Spiderrock.Protobuf.GridType.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) GridType);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(MaxXAxis);
      }
      if (MinCurvValue != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MinCurvValue);
      }
      if (MinCurvXAxis != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(MinCurvXAxis);
      }
      if (MaxCurvValue != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(MaxCurvValue);
      }
      if (MaxCurvXAxis != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MaxCurvXAxis);
      }
      if (SkewMinX != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(SkewMinX);
      }
      if (SkewMinY != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(SkewMinY);
      }
      if (SkewD11 != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(SkewD11);
      }
      if (SkewD10 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(SkewD10);
      }
      if (SkewD9 != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(SkewD9);
      }
      if (SkewD8 != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(SkewD8);
      }
      if (SkewD7 != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(SkewD7);
      }
      if (SkewD6 != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(SkewD6);
      }
      if (SkewD5 != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(SkewD5);
      }
      if (SkewD4 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(SkewD4);
      }
      if (SkewD3 != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SkewD3);
      }
      if (SkewD2 != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(SkewD2);
      }
      if (SkewD1 != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SkewD1);
      }
      if (SkewC0 != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(SkewC0);
      }
      if (SkewU1 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(SkewU1);
      }
      if (SkewU2 != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SkewU2);
      }
      if (SkewU3 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SkewU3);
      }
      if (SkewU4 != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SkewU4);
      }
      if (SkewU5 != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SkewU5);
      }
      if (SkewU6 != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SkewU6);
      }
      if (SkewU7 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SkewU7);
      }
      if (SkewU8 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SkewU8);
      }
      if (SkewU9 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SkewU9);
      }
      if (SkewU10 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(SkewU10);
      }
      if (SkewU11 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(SkewU11);
      }
      if (SdivD3 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(SdivD3);
      }
      if (SdivD2 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(SdivD2);
      }
      if (SdivD1 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(SdivD1);
      }
      if (SdivU1 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(SdivU1);
      }
      if (SdivU2 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(SdivU2);
      }
      if (SdivU3 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SdivU3);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(Vwidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(200, 19);
        output.WriteInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(PCnt);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(248, 19);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(144, 20);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(FitAvgErr);
      }
      if (FitAvgAbsErr != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(FitAvgAbsErr);
      }
      if (FitMaxPrcErr != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(FitMaxPrcErr);
      }
      if (FitErrXX != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(FitErrXX);
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(FitErrDe);
      }
      if (FitErrBid != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(FitErrBid);
      }
      if (FitErrAsk != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(FitErrAsk);
      }
      if (FitErrPrc != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(FitErrPrc);
      }
      if (FitErrVol != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(FitErrVol);
      }
      if (Counter != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(Counter);
      }
      if (SkewCounter != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(SkewCounter);
      }
      if (SdivCounter != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(SdivCounter);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        output.WriteRawTag(192, 23);
        output.WriteEnum((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 23);
        output.WriteMessage(Timestamp);
      }
      if (TradingSession != global::Spiderrock.Protobuf.TradingSession.Unspecified) {
        output.WriteRawTag(224, 23);
        output.WriteEnum((int) TradingSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (fkey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (ExType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExType);
      }
      if (ModelType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModelType);
      }
      if (EarnCnt != 0F) {
        size += 2 + 4;
      }
      if (EarnCntAdj != 0F) {
        size += 2 + 4;
      }
      if (AxisVolRT != 0F) {
        size += 2 + 4;
      }
      if (AxisFUPrc != 0F) {
        size += 2 + 4;
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MoneynessType);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierMode);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (AtmCen != 0F) {
        size += 2 + 4;
      }
      if (AtmVolHist != 0F) {
        size += 2 + 4;
      }
      if (AtmCenHist != 0F) {
        size += 2 + 4;
      }
      if (MinAtmVol != 0F) {
        size += 2 + 4;
      }
      if (MaxAtmVol != 0F) {
        size += 2 + 4;
      }
      if (EMove != 0F) {
        size += 2 + 4;
      }
      if (EMoveHist != 0F) {
        size += 2 + 4;
      }
      if (AtmMove != 0F) {
        size += 2 + 4;
      }
      if (AtmCenMove != 0F) {
        size += 2 + 4;
      }
      if (AtmPhi != 0F) {
        size += 2 + 4;
      }
      if (AtmVega != 0F) {
        size += 2 + 4;
      }
      if (Slope != 0F) {
        size += 2 + 4;
      }
      if (VarSwapFV != 0F) {
        size += 2 + 4;
      }
      if (GridType != global::Spiderrock.Protobuf.GridType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GridType);
      }
      if (MinXAxis != 0F) {
        size += 2 + 4;
      }
      if (MaxXAxis != 0F) {
        size += 2 + 4;
      }
      if (MinCurvValue != 0F) {
        size += 2 + 4;
      }
      if (MinCurvXAxis != 0F) {
        size += 2 + 4;
      }
      if (MaxCurvValue != 0F) {
        size += 2 + 4;
      }
      if (MaxCurvXAxis != 0F) {
        size += 2 + 4;
      }
      if (SkewMinX != 0F) {
        size += 2 + 4;
      }
      if (SkewMinY != 0F) {
        size += 2 + 4;
      }
      if (SkewD11 != 0F) {
        size += 2 + 4;
      }
      if (SkewD10 != 0F) {
        size += 2 + 4;
      }
      if (SkewD9 != 0F) {
        size += 2 + 4;
      }
      if (SkewD8 != 0F) {
        size += 2 + 4;
      }
      if (SkewD7 != 0F) {
        size += 2 + 4;
      }
      if (SkewD6 != 0F) {
        size += 2 + 4;
      }
      if (SkewD5 != 0F) {
        size += 2 + 4;
      }
      if (SkewD4 != 0F) {
        size += 2 + 4;
      }
      if (SkewD3 != 0F) {
        size += 2 + 4;
      }
      if (SkewD2 != 0F) {
        size += 2 + 4;
      }
      if (SkewD1 != 0F) {
        size += 2 + 4;
      }
      if (SkewC0 != 0F) {
        size += 2 + 4;
      }
      if (SkewU1 != 0F) {
        size += 2 + 4;
      }
      if (SkewU2 != 0F) {
        size += 2 + 4;
      }
      if (SkewU3 != 0F) {
        size += 2 + 4;
      }
      if (SkewU4 != 0F) {
        size += 2 + 4;
      }
      if (SkewU5 != 0F) {
        size += 2 + 4;
      }
      if (SkewU6 != 0F) {
        size += 2 + 4;
      }
      if (SkewU7 != 0F) {
        size += 2 + 4;
      }
      if (SkewU8 != 0F) {
        size += 2 + 4;
      }
      if (SkewU9 != 0F) {
        size += 2 + 4;
      }
      if (SkewU10 != 0F) {
        size += 2 + 4;
      }
      if (SkewU11 != 0F) {
        size += 2 + 4;
      }
      if (SdivD3 != 0F) {
        size += 2 + 4;
      }
      if (SdivD2 != 0F) {
        size += 2 + 4;
      }
      if (SdivD1 != 0F) {
        size += 2 + 4;
      }
      if (SdivU1 != 0F) {
        size += 2 + 4;
      }
      if (SdivU2 != 0F) {
        size += 2 + 4;
      }
      if (SdivU3 != 0F) {
        size += 2 + 4;
      }
      if (Pwidth != 0F) {
        size += 2 + 4;
      }
      if (Vwidth != 0F) {
        size += 2 + 4;
      }
      if (CCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CCnt);
      }
      if (PCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PCnt);
      }
      if (CBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CBidMiss);
      }
      if (CAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CAskMiss);
      }
      if (PBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PBidMiss);
      }
      if (PAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        size += 2 + 4;
      }
      if (FitAvgAbsErr != 0F) {
        size += 2 + 4;
      }
      if (FitMaxPrcErr != 0F) {
        size += 2 + 4;
      }
      if (FitErrXX != 0F) {
        size += 2 + 4;
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        size += 2 + 4;
      }
      if (FitErrBid != 0F) {
        size += 2 + 4;
      }
      if (FitErrAsk != 0F) {
        size += 2 + 4;
      }
      if (FitErrPrc != 0F) {
        size += 2 + 4;
      }
      if (FitErrVol != 0F) {
        size += 2 + 4;
      }
      if (Counter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      if (SkewCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkewCounter);
      }
      if (SdivCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SdivCounter);
      }
      if (TradingSession != global::Spiderrock.Protobuf.TradingSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingSession);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveSurfaceAtm other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.fkey_ != null) {
        if (fkey_ == null) {
          Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        Fkey.MergeFrom(other.Fkey);
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.ExType != 0) {
        ExType = other.ExType;
      }
      if (other.ModelType != 0) {
        ModelType = other.ModelType;
      }
      if (other.EarnCnt != 0F) {
        EarnCnt = other.EarnCnt;
      }
      if (other.EarnCntAdj != 0F) {
        EarnCntAdj = other.EarnCntAdj;
      }
      if (other.AxisVolRT != 0F) {
        AxisVolRT = other.AxisVolRT;
      }
      if (other.AxisFUPrc != 0F) {
        AxisFUPrc = other.AxisFUPrc;
      }
      if (other.MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        MoneynessType = other.MoneynessType;
      }
      if (other.UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        UnderlierMode = other.UnderlierMode;
      }
      if (other.PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        PriceQuoteType = other.PriceQuoteType;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmCen != 0F) {
        AtmCen = other.AtmCen;
      }
      if (other.AtmVolHist != 0F) {
        AtmVolHist = other.AtmVolHist;
      }
      if (other.AtmCenHist != 0F) {
        AtmCenHist = other.AtmCenHist;
      }
      if (other.MinAtmVol != 0F) {
        MinAtmVol = other.MinAtmVol;
      }
      if (other.MaxAtmVol != 0F) {
        MaxAtmVol = other.MaxAtmVol;
      }
      if (other.EMove != 0F) {
        EMove = other.EMove;
      }
      if (other.EMoveHist != 0F) {
        EMoveHist = other.EMoveHist;
      }
      if (other.AtmMove != 0F) {
        AtmMove = other.AtmMove;
      }
      if (other.AtmCenMove != 0F) {
        AtmCenMove = other.AtmCenMove;
      }
      if (other.AtmPhi != 0F) {
        AtmPhi = other.AtmPhi;
      }
      if (other.AtmVega != 0F) {
        AtmVega = other.AtmVega;
      }
      if (other.Slope != 0F) {
        Slope = other.Slope;
      }
      if (other.VarSwapFV != 0F) {
        VarSwapFV = other.VarSwapFV;
      }
      if (other.GridType != global::Spiderrock.Protobuf.GridType.Unspecified) {
        GridType = other.GridType;
      }
      if (other.MinXAxis != 0F) {
        MinXAxis = other.MinXAxis;
      }
      if (other.MaxXAxis != 0F) {
        MaxXAxis = other.MaxXAxis;
      }
      if (other.MinCurvValue != 0F) {
        MinCurvValue = other.MinCurvValue;
      }
      if (other.MinCurvXAxis != 0F) {
        MinCurvXAxis = other.MinCurvXAxis;
      }
      if (other.MaxCurvValue != 0F) {
        MaxCurvValue = other.MaxCurvValue;
      }
      if (other.MaxCurvXAxis != 0F) {
        MaxCurvXAxis = other.MaxCurvXAxis;
      }
      if (other.SkewMinX != 0F) {
        SkewMinX = other.SkewMinX;
      }
      if (other.SkewMinY != 0F) {
        SkewMinY = other.SkewMinY;
      }
      if (other.SkewD11 != 0F) {
        SkewD11 = other.SkewD11;
      }
      if (other.SkewD10 != 0F) {
        SkewD10 = other.SkewD10;
      }
      if (other.SkewD9 != 0F) {
        SkewD9 = other.SkewD9;
      }
      if (other.SkewD8 != 0F) {
        SkewD8 = other.SkewD8;
      }
      if (other.SkewD7 != 0F) {
        SkewD7 = other.SkewD7;
      }
      if (other.SkewD6 != 0F) {
        SkewD6 = other.SkewD6;
      }
      if (other.SkewD5 != 0F) {
        SkewD5 = other.SkewD5;
      }
      if (other.SkewD4 != 0F) {
        SkewD4 = other.SkewD4;
      }
      if (other.SkewD3 != 0F) {
        SkewD3 = other.SkewD3;
      }
      if (other.SkewD2 != 0F) {
        SkewD2 = other.SkewD2;
      }
      if (other.SkewD1 != 0F) {
        SkewD1 = other.SkewD1;
      }
      if (other.SkewC0 != 0F) {
        SkewC0 = other.SkewC0;
      }
      if (other.SkewU1 != 0F) {
        SkewU1 = other.SkewU1;
      }
      if (other.SkewU2 != 0F) {
        SkewU2 = other.SkewU2;
      }
      if (other.SkewU3 != 0F) {
        SkewU3 = other.SkewU3;
      }
      if (other.SkewU4 != 0F) {
        SkewU4 = other.SkewU4;
      }
      if (other.SkewU5 != 0F) {
        SkewU5 = other.SkewU5;
      }
      if (other.SkewU6 != 0F) {
        SkewU6 = other.SkewU6;
      }
      if (other.SkewU7 != 0F) {
        SkewU7 = other.SkewU7;
      }
      if (other.SkewU8 != 0F) {
        SkewU8 = other.SkewU8;
      }
      if (other.SkewU9 != 0F) {
        SkewU9 = other.SkewU9;
      }
      if (other.SkewU10 != 0F) {
        SkewU10 = other.SkewU10;
      }
      if (other.SkewU11 != 0F) {
        SkewU11 = other.SkewU11;
      }
      if (other.SdivD3 != 0F) {
        SdivD3 = other.SdivD3;
      }
      if (other.SdivD2 != 0F) {
        SdivD2 = other.SdivD2;
      }
      if (other.SdivD1 != 0F) {
        SdivD1 = other.SdivD1;
      }
      if (other.SdivU1 != 0F) {
        SdivU1 = other.SdivU1;
      }
      if (other.SdivU2 != 0F) {
        SdivU2 = other.SdivU2;
      }
      if (other.SdivU3 != 0F) {
        SdivU3 = other.SdivU3;
      }
      if (other.Pwidth != 0F) {
        Pwidth = other.Pwidth;
      }
      if (other.Vwidth != 0F) {
        Vwidth = other.Vwidth;
      }
      if (other.CCnt != 0) {
        CCnt = other.CCnt;
      }
      if (other.PCnt != 0) {
        PCnt = other.PCnt;
      }
      if (other.CBidMiss != 0) {
        CBidMiss = other.CBidMiss;
      }
      if (other.CAskMiss != 0) {
        CAskMiss = other.CAskMiss;
      }
      if (other.PBidMiss != 0) {
        PBidMiss = other.PBidMiss;
      }
      if (other.PAskMiss != 0) {
        PAskMiss = other.PAskMiss;
      }
      if (other.FitAvgErr != 0F) {
        FitAvgErr = other.FitAvgErr;
      }
      if (other.FitAvgAbsErr != 0F) {
        FitAvgAbsErr = other.FitAvgAbsErr;
      }
      if (other.FitMaxPrcErr != 0F) {
        FitMaxPrcErr = other.FitMaxPrcErr;
      }
      if (other.FitErrXX != 0F) {
        FitErrXX = other.FitErrXX;
      }
      if (other.FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        FitErrCP = other.FitErrCP;
      }
      if (other.FitErrDe != 0F) {
        FitErrDe = other.FitErrDe;
      }
      if (other.FitErrBid != 0F) {
        FitErrBid = other.FitErrBid;
      }
      if (other.FitErrAsk != 0F) {
        FitErrAsk = other.FitErrAsk;
      }
      if (other.FitErrPrc != 0F) {
        FitErrPrc = other.FitErrPrc;
      }
      if (other.FitErrVol != 0F) {
        FitErrVol = other.FitErrVol;
      }
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
      if (other.SkewCounter != 0) {
        SkewCounter = other.SkewCounter;
      }
      if (other.SdivCounter != 0) {
        SdivCounter = other.SdivCounter;
      }
      if (other.TradingSession != global::Spiderrock.Protobuf.TradingSession.Unspecified) {
        TradingSession = other.TradingSession;
      }
      if (other.TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        TradeableStatus = other.TradeableStatus;
      }
      if (other.SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        SurfaceResult = other.SurfaceResult;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 849: {
            UBid = input.ReadDouble();
            break;
          }
          case 873: {
            UAsk = input.ReadDouble();
            break;
          }
          case 901: {
            Years = input.ReadFloat();
            break;
          }
          case 925: {
            Rate = input.ReadFloat();
            break;
          }
          case 949: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 973: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 992: {
            ExType = input.ReadInt32();
            break;
          }
          case 1016: {
            ModelType = input.ReadInt32();
            break;
          }
          case 1045: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1069: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1093: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 1117: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1136: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1160: {
            UnderlierMode = (global::Spiderrock.Protobuf.UnderlierMode) input.ReadEnum();
            break;
          }
          case 1184: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1213: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1237: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1261: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1285: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1309: {
            MinAtmVol = input.ReadFloat();
            break;
          }
          case 1333: {
            MaxAtmVol = input.ReadFloat();
            break;
          }
          case 1357: {
            EMove = input.ReadFloat();
            break;
          }
          case 1381: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1405: {
            AtmMove = input.ReadFloat();
            break;
          }
          case 1429: {
            AtmCenMove = input.ReadFloat();
            break;
          }
          case 1453: {
            AtmPhi = input.ReadFloat();
            break;
          }
          case 1477: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 1501: {
            Slope = input.ReadFloat();
            break;
          }
          case 1525: {
            VarSwapFV = input.ReadFloat();
            break;
          }
          case 1544: {
            GridType = (global::Spiderrock.Protobuf.GridType) input.ReadEnum();
            break;
          }
          case 1573: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1597: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1621: {
            MinCurvValue = input.ReadFloat();
            break;
          }
          case 1645: {
            MinCurvXAxis = input.ReadFloat();
            break;
          }
          case 1669: {
            MaxCurvValue = input.ReadFloat();
            break;
          }
          case 1693: {
            MaxCurvXAxis = input.ReadFloat();
            break;
          }
          case 1717: {
            SkewMinX = input.ReadFloat();
            break;
          }
          case 1741: {
            SkewMinY = input.ReadFloat();
            break;
          }
          case 1765: {
            SkewD11 = input.ReadFloat();
            break;
          }
          case 1789: {
            SkewD10 = input.ReadFloat();
            break;
          }
          case 1813: {
            SkewD9 = input.ReadFloat();
            break;
          }
          case 1837: {
            SkewD8 = input.ReadFloat();
            break;
          }
          case 1861: {
            SkewD7 = input.ReadFloat();
            break;
          }
          case 1885: {
            SkewD6 = input.ReadFloat();
            break;
          }
          case 1909: {
            SkewD5 = input.ReadFloat();
            break;
          }
          case 1933: {
            SkewD4 = input.ReadFloat();
            break;
          }
          case 1957: {
            SkewD3 = input.ReadFloat();
            break;
          }
          case 1981: {
            SkewD2 = input.ReadFloat();
            break;
          }
          case 2005: {
            SkewD1 = input.ReadFloat();
            break;
          }
          case 2029: {
            SkewC0 = input.ReadFloat();
            break;
          }
          case 2053: {
            SkewU1 = input.ReadFloat();
            break;
          }
          case 2077: {
            SkewU2 = input.ReadFloat();
            break;
          }
          case 2101: {
            SkewU3 = input.ReadFloat();
            break;
          }
          case 2125: {
            SkewU4 = input.ReadFloat();
            break;
          }
          case 2149: {
            SkewU5 = input.ReadFloat();
            break;
          }
          case 2173: {
            SkewU6 = input.ReadFloat();
            break;
          }
          case 2197: {
            SkewU7 = input.ReadFloat();
            break;
          }
          case 2221: {
            SkewU8 = input.ReadFloat();
            break;
          }
          case 2245: {
            SkewU9 = input.ReadFloat();
            break;
          }
          case 2269: {
            SkewU10 = input.ReadFloat();
            break;
          }
          case 2293: {
            SkewU11 = input.ReadFloat();
            break;
          }
          case 2317: {
            SdivD3 = input.ReadFloat();
            break;
          }
          case 2341: {
            SdivD2 = input.ReadFloat();
            break;
          }
          case 2365: {
            SdivD1 = input.ReadFloat();
            break;
          }
          case 2389: {
            SdivU1 = input.ReadFloat();
            break;
          }
          case 2413: {
            SdivU2 = input.ReadFloat();
            break;
          }
          case 2437: {
            SdivU3 = input.ReadFloat();
            break;
          }
          case 2461: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 2485: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 2504: {
            CCnt = input.ReadInt32();
            break;
          }
          case 2528: {
            PCnt = input.ReadInt32();
            break;
          }
          case 2552: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 2576: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 2600: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 2624: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 2653: {
            FitAvgErr = input.ReadFloat();
            break;
          }
          case 2677: {
            FitAvgAbsErr = input.ReadFloat();
            break;
          }
          case 2701: {
            FitMaxPrcErr = input.ReadFloat();
            break;
          }
          case 2725: {
            FitErrXX = input.ReadFloat();
            break;
          }
          case 2744: {
            FitErrCP = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 2773: {
            FitErrDe = input.ReadFloat();
            break;
          }
          case 2797: {
            FitErrBid = input.ReadFloat();
            break;
          }
          case 2821: {
            FitErrAsk = input.ReadFloat();
            break;
          }
          case 2845: {
            FitErrPrc = input.ReadFloat();
            break;
          }
          case 2869: {
            FitErrVol = input.ReadFloat();
            break;
          }
          case 2888: {
            Counter = input.ReadInt32();
            break;
          }
          case 2912: {
            SkewCounter = input.ReadInt32();
            break;
          }
          case 2936: {
            SdivCounter = input.ReadInt32();
            break;
          }
          case 2984: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 3008: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceResult) input.ReadEnum();
            break;
          }
          case 3034: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 3040: {
            TradingSession = (global::Spiderrock.Protobuf.TradingSession) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceAtm.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 849: {
            UBid = input.ReadDouble();
            break;
          }
          case 873: {
            UAsk = input.ReadDouble();
            break;
          }
          case 901: {
            Years = input.ReadFloat();
            break;
          }
          case 925: {
            Rate = input.ReadFloat();
            break;
          }
          case 949: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 973: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 992: {
            ExType = input.ReadInt32();
            break;
          }
          case 1016: {
            ModelType = input.ReadInt32();
            break;
          }
          case 1045: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1069: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1093: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 1117: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1136: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1160: {
            UnderlierMode = (global::Spiderrock.Protobuf.UnderlierMode) input.ReadEnum();
            break;
          }
          case 1184: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1213: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1237: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1261: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1285: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1309: {
            MinAtmVol = input.ReadFloat();
            break;
          }
          case 1333: {
            MaxAtmVol = input.ReadFloat();
            break;
          }
          case 1357: {
            EMove = input.ReadFloat();
            break;
          }
          case 1381: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1405: {
            AtmMove = input.ReadFloat();
            break;
          }
          case 1429: {
            AtmCenMove = input.ReadFloat();
            break;
          }
          case 1453: {
            AtmPhi = input.ReadFloat();
            break;
          }
          case 1477: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 1501: {
            Slope = input.ReadFloat();
            break;
          }
          case 1525: {
            VarSwapFV = input.ReadFloat();
            break;
          }
          case 1544: {
            GridType = (global::Spiderrock.Protobuf.GridType) input.ReadEnum();
            break;
          }
          case 1573: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1597: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1621: {
            MinCurvValue = input.ReadFloat();
            break;
          }
          case 1645: {
            MinCurvXAxis = input.ReadFloat();
            break;
          }
          case 1669: {
            MaxCurvValue = input.ReadFloat();
            break;
          }
          case 1693: {
            MaxCurvXAxis = input.ReadFloat();
            break;
          }
          case 1717: {
            SkewMinX = input.ReadFloat();
            break;
          }
          case 1741: {
            SkewMinY = input.ReadFloat();
            break;
          }
          case 1765: {
            SkewD11 = input.ReadFloat();
            break;
          }
          case 1789: {
            SkewD10 = input.ReadFloat();
            break;
          }
          case 1813: {
            SkewD9 = input.ReadFloat();
            break;
          }
          case 1837: {
            SkewD8 = input.ReadFloat();
            break;
          }
          case 1861: {
            SkewD7 = input.ReadFloat();
            break;
          }
          case 1885: {
            SkewD6 = input.ReadFloat();
            break;
          }
          case 1909: {
            SkewD5 = input.ReadFloat();
            break;
          }
          case 1933: {
            SkewD4 = input.ReadFloat();
            break;
          }
          case 1957: {
            SkewD3 = input.ReadFloat();
            break;
          }
          case 1981: {
            SkewD2 = input.ReadFloat();
            break;
          }
          case 2005: {
            SkewD1 = input.ReadFloat();
            break;
          }
          case 2029: {
            SkewC0 = input.ReadFloat();
            break;
          }
          case 2053: {
            SkewU1 = input.ReadFloat();
            break;
          }
          case 2077: {
            SkewU2 = input.ReadFloat();
            break;
          }
          case 2101: {
            SkewU3 = input.ReadFloat();
            break;
          }
          case 2125: {
            SkewU4 = input.ReadFloat();
            break;
          }
          case 2149: {
            SkewU5 = input.ReadFloat();
            break;
          }
          case 2173: {
            SkewU6 = input.ReadFloat();
            break;
          }
          case 2197: {
            SkewU7 = input.ReadFloat();
            break;
          }
          case 2221: {
            SkewU8 = input.ReadFloat();
            break;
          }
          case 2245: {
            SkewU9 = input.ReadFloat();
            break;
          }
          case 2269: {
            SkewU10 = input.ReadFloat();
            break;
          }
          case 2293: {
            SkewU11 = input.ReadFloat();
            break;
          }
          case 2317: {
            SdivD3 = input.ReadFloat();
            break;
          }
          case 2341: {
            SdivD2 = input.ReadFloat();
            break;
          }
          case 2365: {
            SdivD1 = input.ReadFloat();
            break;
          }
          case 2389: {
            SdivU1 = input.ReadFloat();
            break;
          }
          case 2413: {
            SdivU2 = input.ReadFloat();
            break;
          }
          case 2437: {
            SdivU3 = input.ReadFloat();
            break;
          }
          case 2461: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 2485: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 2504: {
            CCnt = input.ReadInt32();
            break;
          }
          case 2528: {
            PCnt = input.ReadInt32();
            break;
          }
          case 2552: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 2576: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 2600: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 2624: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 2653: {
            FitAvgErr = input.ReadFloat();
            break;
          }
          case 2677: {
            FitAvgAbsErr = input.ReadFloat();
            break;
          }
          case 2701: {
            FitMaxPrcErr = input.ReadFloat();
            break;
          }
          case 2725: {
            FitErrXX = input.ReadFloat();
            break;
          }
          case 2744: {
            FitErrCP = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 2773: {
            FitErrDe = input.ReadFloat();
            break;
          }
          case 2797: {
            FitErrBid = input.ReadFloat();
            break;
          }
          case 2821: {
            FitErrAsk = input.ReadFloat();
            break;
          }
          case 2845: {
            FitErrPrc = input.ReadFloat();
            break;
          }
          case 2869: {
            FitErrVol = input.ReadFloat();
            break;
          }
          case 2888: {
            Counter = input.ReadInt32();
            break;
          }
          case 2912: {
            SkewCounter = input.ReadInt32();
            break;
          }
          case 2936: {
            SdivCounter = input.ReadInt32();
            break;
          }
          case 2984: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 3008: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceResult) input.ReadEnum();
            break;
          }
          case 3034: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 3040: {
            TradingSession = (global::Spiderrock.Protobuf.TradingSession) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveSurfaceAtm message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveSurfaceAtm.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
