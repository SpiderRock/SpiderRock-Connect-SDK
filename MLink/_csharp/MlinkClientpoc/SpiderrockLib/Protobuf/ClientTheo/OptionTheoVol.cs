// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTheo/OptionTheoVol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTheo/OptionTheoVol.proto</summary>
  public static partial class OptionTheoVolReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTheo/OptionTheoVol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionTheoVolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidQcm90b2J1Zi9DbGllbnRUaGVvL09wdGlvblRoZW9Wb2wucHJvdG8SE3Nw",
            "aWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnByb3RvGh9n",
            "b29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIt8HCg1PcHRpb25UaGVv",
            "Vm9sEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5NZXNz",
            "YWdlTWV0YWRhdGESNQoEcGtleRgCIAEoCzInLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuT3B0aW9uVGhlb1ZvbC5QS2V5EhIKCnRoZW9fbW9kZWwYZCABKAkSFwoP",
            "Y2xpZW50X2Zpcm1fb3V0GGcgASgJEg0KBXllYXJzGGogASgCEi4KBnRpY2tl",
            "chhtIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EgwKBHVw",
            "cmMYcCABKAISDAoEdWJpZBhzIAEoAhIMCgR1YXNrGHYgASgCEgwKBG9iaWQY",
            "eSABKAISDAoEb2Fzaxh8IAEoAhIMCgR0dm9sGH8gASgCEhIKCXR2b2xfYk9w",
            "bhiCASABKAISEgoJdHZvbF9zT3BuGIUBIAEoAhINCgR0cHJjGIgBIAEoAhIP",
            "CgZ0Yl9wcmMYiwEgASgCEg8KBnRzX3ByYxiOASABKAISEwoKdGJfY2xzX3By",
            "YxiRASABKAISEwoKdHNfY2xzX3ByYxiUASABKAISEQoIdmVfc2xvcGUYlwEg",
            "ASgCEgsKAmRlGJoBIAEoAhILCgJnYRidASABKAISCwoCdGgYoAEgASgCEgsK",
            "AnZlGKMBIAEoAhILCgJ2bximASABKAISCwoCdmEYqQEgASgCEhEKCGRlX2Rl",
            "Y2F5GKwBIAEoAhILCgJybxivASABKAISCwoCcGgYsgEgASgCEg8KBnNkaXZf",
            "Yhi1ASABKAISDwoGc2Rpdl9zGLgBIAEoAhIPCgZ4X2F4aXMYuwEgASgCEhEK",
            "CHR2b2xfYXRtGL4BIAEoAhIRCghpdm9sX2F0bRjBASABKAISDQoEc3ZvbBjE",
            "ASABKAISDQoEc3ByYxjHASABKAISDQoEc19kZRjKASABKAISDQoEc192ZRjN",
            "ASABKAISDQoEcmF0ZRjQASABKAISDQoEc2RpdhjTASABKAISDQoEZGRpdhjW",
            "ASABKAISDAoDZXJyGNkBIAEoBRIRCgh0aGVvX2VychjcASABKAkSEQoIY2Fs",
            "Y19lcnIY3wEgASgJEjUKC3RoZW9fc3RhdHVzGOIBIAEoDjIfLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuVGhlb1N0YXR1cxIuCgl0aW1lc3RhbXAY5QEgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBo0CgRQS2V5EiwKBG9rZXkYCiAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionTheoVol), global::Spiderrock.Protobuf.OptionTheoVol.Parser, new[]{ "Meta", "Pkey", "TheoModel", "ClientFirmOut", "Years", "Ticker", "Uprc", "Ubid", "Uask", "Obid", "Oask", "Tvol", "TvolBOpn", "TvolSOpn", "Tprc", "TbPrc", "TsPrc", "TbClsPrc", "TsClsPrc", "VeSlope", "De", "Ga", "Th", "Ve", "Vo", "Va", "DeDecay", "Ro", "Ph", "SdivB", "SdivS", "XAxis", "TvolAtm", "IvolAtm", "Svol", "Sprc", "SDe", "SVe", "Rate", "Sdiv", "Ddiv", "Err", "TheoErr", "CalcErr", "TheoStatus", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey), global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey.Parser, new[]{ "Okey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///OptionTheoVol records contain client supplied theoretical volatility surface information resolved at the level if individual strikes.  Strike volatilities, prices, greeks and SpiderRock surface volatilites and prices are all available.  Values are computed on the fly using fast/accurate calculation methods as records are returned.
  /// </summary>
  public sealed partial class OptionTheoVol : pb::IMessage<OptionTheoVol>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionTheoVol> _parser = new pb::MessageParser<OptionTheoVol>(() => new OptionTheoVol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionTheoVol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.OptionTheoVolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheoVol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheoVol(OptionTheoVol other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      theoModel_ = other.theoModel_;
      clientFirmOut_ = other.clientFirmOut_;
      years_ = other.years_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      uprc_ = other.uprc_;
      ubid_ = other.ubid_;
      uask_ = other.uask_;
      obid_ = other.obid_;
      oask_ = other.oask_;
      tvol_ = other.tvol_;
      tvolBOpn_ = other.tvolBOpn_;
      tvolSOpn_ = other.tvolSOpn_;
      tprc_ = other.tprc_;
      tbPrc_ = other.tbPrc_;
      tsPrc_ = other.tsPrc_;
      tbClsPrc_ = other.tbClsPrc_;
      tsClsPrc_ = other.tsClsPrc_;
      veSlope_ = other.veSlope_;
      de_ = other.de_;
      ga_ = other.ga_;
      th_ = other.th_;
      ve_ = other.ve_;
      vo_ = other.vo_;
      va_ = other.va_;
      deDecay_ = other.deDecay_;
      ro_ = other.ro_;
      ph_ = other.ph_;
      sdivB_ = other.sdivB_;
      sdivS_ = other.sdivS_;
      xAxis_ = other.xAxis_;
      tvolAtm_ = other.tvolAtm_;
      ivolAtm_ = other.ivolAtm_;
      svol_ = other.svol_;
      sprc_ = other.sprc_;
      sDe_ = other.sDe_;
      sVe_ = other.sVe_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      err_ = other.err_;
      theoErr_ = other.theoErr_;
      calcErr_ = other.calcErr_;
      theoStatus_ = other.theoStatus_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheoVol Clone() {
      return new OptionTheoVol(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "theo_model" field.</summary>
    public const int TheoModelFieldNumber = 100;
    private string theoModel_ = "";
    /// <summary>
    /// required in where clause (theo model must be associated with an accnt that is visible)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoModel {
      get { return theoModel_; }
      set {
        theoModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm_out" field.</summary>
    public const int ClientFirmOutFieldNumber = 103;
    private string clientFirmOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirmOut {
      get { return clientFirmOut_; }
      set {
        clientFirmOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 106;
    private float years_;
    /// <summary>
    /// volatility years to expiration (variable time metric; SR holiday calendar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 109;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "uprc" field.</summary>
    public const int UprcFieldNumber = 112;
    private float uprc_;
    /// <summary>
    /// underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Uprc {
      get { return uprc_; }
      set {
        uprc_ = value;
      }
    }

    /// <summary>Field number for the "ubid" field.</summary>
    public const int UbidFieldNumber = 115;
    private float ubid_;
    /// <summary>
    /// underlier bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ubid {
      get { return ubid_; }
      set {
        ubid_ = value;
      }
    }

    /// <summary>Field number for the "uask" field.</summary>
    public const int UaskFieldNumber = 118;
    private float uask_;
    /// <summary>
    /// underlier ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Uask {
      get { return uask_; }
      set {
        uask_ = value;
      }
    }

    /// <summary>Field number for the "obid" field.</summary>
    public const int ObidFieldNumber = 121;
    private float obid_;
    /// <summary>
    /// option market bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Obid {
      get { return obid_; }
      set {
        obid_ = value;
      }
    }

    /// <summary>Field number for the "oask" field.</summary>
    public const int OaskFieldNumber = 124;
    private float oask_;
    /// <summary>
    /// option market ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Oask {
      get { return oask_; }
      set {
        oask_ = value;
      }
    }

    /// <summary>Field number for the "tvol" field.</summary>
    public const int TvolFieldNumber = 127;
    private float tvol_;
    /// <summary>
    /// theo vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Tvol {
      get { return tvol_; }
      set {
        tvol_ = value;
      }
    }

    /// <summary>Field number for the "tvol_bOpn" field.</summary>
    public const int TvolBOpnFieldNumber = 130;
    private float tvolBOpn_;
    /// <summary>
    /// theo buy/open vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TvolBOpn {
      get { return tvolBOpn_; }
      set {
        tvolBOpn_ = value;
      }
    }

    /// <summary>Field number for the "tvol_sOpn" field.</summary>
    public const int TvolSOpnFieldNumber = 133;
    private float tvolSOpn_;
    /// <summary>
    /// theo sell/open vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TvolSOpn {
      get { return tvolSOpn_; }
      set {
        tvolSOpn_ = value;
      }
    }

    /// <summary>Field number for the "tprc" field.</summary>
    public const int TprcFieldNumber = 136;
    private float tprc_;
    /// <summary>
    /// theo vol price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Tprc {
      get { return tprc_; }
      set {
        tprc_ = value;
      }
    }

    /// <summary>Field number for the "tb_prc" field.</summary>
    public const int TbPrcFieldNumber = 139;
    private float tbPrc_;
    /// <summary>
    /// theo buy (open) price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TbPrc {
      get { return tbPrc_; }
      set {
        tbPrc_ = value;
      }
    }

    /// <summary>Field number for the "ts_prc" field.</summary>
    public const int TsPrcFieldNumber = 142;
    private float tsPrc_;
    /// <summary>
    /// theo sell (open) price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TsPrc {
      get { return tsPrc_; }
      set {
        tsPrc_ = value;
      }
    }

    /// <summary>Field number for the "tb_cls_prc" field.</summary>
    public const int TbClsPrcFieldNumber = 145;
    private float tbClsPrc_;
    /// <summary>
    /// theo buy (close) price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TbClsPrc {
      get { return tbClsPrc_; }
      set {
        tbClsPrc_ = value;
      }
    }

    /// <summary>Field number for the "ts_cls_prc" field.</summary>
    public const int TsClsPrcFieldNumber = 148;
    private float tsClsPrc_;
    /// <summary>
    /// theo sell (close) price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TsClsPrc {
      get { return tsClsPrc_; }
      set {
        tsClsPrc_ = value;
      }
    }

    /// <summary>Field number for the "ve_slope" field.</summary>
    public const int VeSlopeFieldNumber = 151;
    private float veSlope_;
    /// <summary>
    /// veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant);hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VeSlope {
      get { return veSlope_; }
      set {
        veSlope_ = value;
      }
    }

    /// <summary>Field number for the "de" field.</summary>
    public const int DeFieldNumber = 154;
    private float de_;
    /// <summary>
    /// implied greeks (from theo surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float De {
      get { return de_; }
      set {
        de_ = value;
      }
    }

    /// <summary>Field number for the "ga" field.</summary>
    public const int GaFieldNumber = 157;
    private float ga_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ga {
      get { return ga_; }
      set {
        ga_ = value;
      }
    }

    /// <summary>Field number for the "th" field.</summary>
    public const int ThFieldNumber = 160;
    private float th_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Th {
      get { return th_; }
      set {
        th_ = value;
      }
    }

    /// <summary>Field number for the "ve" field.</summary>
    public const int VeFieldNumber = 163;
    private float ve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ve {
      get { return ve_; }
      set {
        ve_ = value;
      }
    }

    /// <summary>Field number for the "vo" field.</summary>
    public const int VoFieldNumber = 166;
    private float vo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vo {
      get { return vo_; }
      set {
        vo_ = value;
      }
    }

    /// <summary>Field number for the "va" field.</summary>
    public const int VaFieldNumber = 169;
    private float va_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Va {
      get { return va_; }
      set {
        va_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 172;
    private float deDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "ro" field.</summary>
    public const int RoFieldNumber = 175;
    private float ro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ro {
      get { return ro_; }
      set {
        ro_ = value;
      }
    }

    /// <summary>Field number for the "ph" field.</summary>
    public const int PhFieldNumber = 178;
    private float ph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ph {
      get { return ph_; }
      set {
        ph_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_b" field.</summary>
    public const int SdivBFieldNumber = 181;
    private float sdivB_;
    /// <summary>
    /// normalized sdiv when buying
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivB {
      get { return sdivB_; }
      set {
        sdivB_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_s" field.</summary>
    public const int SdivSFieldNumber = 184;
    private float sdivS_;
    /// <summary>
    /// normalized sdiv when selling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivS {
      get { return sdivS_; }
      set {
        sdivS_ = value;
      }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 187;
    private float xAxis_;
    /// <summary>
    /// xAxis value (depends on xAxis definition in TheoExpSurface record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "tvol_atm" field.</summary>
    public const int TvolAtmFieldNumber = 190;
    private float tvolAtm_;
    /// <summary>
    /// theo model volatility (atm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TvolAtm {
      get { return tvolAtm_; }
      set {
        tvolAtm_ = value;
      }
    }

    /// <summary>Field number for the "ivol_atm" field.</summary>
    public const int IvolAtmFieldNumber = 193;
    private float ivolAtm_;
    /// <summary>
    /// SR Surface Volatility (atm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolAtm {
      get { return ivolAtm_; }
      set {
        ivolAtm_ = value;
      }
    }

    /// <summary>Field number for the "svol" field.</summary>
    public const int SvolFieldNumber = 196;
    private float svol_;
    /// <summary>
    /// SR Surface Volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Svol {
      get { return svol_; }
      set {
        svol_ = value;
      }
    }

    /// <summary>Field number for the "sprc" field.</summary>
    public const int SprcFieldNumber = 199;
    private float sprc_;
    /// <summary>
    /// SR Surface Price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sprc {
      get { return sprc_; }
      set {
        sprc_ = value;
      }
    }

    /// <summary>Field number for the "s_de" field.</summary>
    public const int SDeFieldNumber = 202;
    private float sDe_;
    /// <summary>
    /// SR Surface Delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SDe {
      get { return sDe_; }
      set {
        sDe_ = value;
      }
    }

    /// <summary>Field number for the "s_ve" field.</summary>
    public const int SVeFieldNumber = 205;
    private float sVe_;
    /// <summary>
    /// SR Surface Vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVe {
      get { return sVe_; }
      set {
        sVe_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 208;
    private float rate_;
    /// <summary>
    /// SR Rate (average interest rate to expiration)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 211;
    private float sdiv_;
    /// <summary>
    /// SR SDiv (continuous dividend;accretive with discrete dividends)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 214;
    private float ddiv_;
    /// <summary>
    /// SR DDiv (sum of discrete dividend amounts prior to expiration)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 217;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "theo_err" field.</summary>
    public const int TheoErrFieldNumber = 220;
    private string theoErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoErr {
      get { return theoErr_; }
      set {
        theoErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calc_err" field.</summary>
    public const int CalcErrFieldNumber = 223;
    private string calcErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CalcErr {
      get { return calcErr_; }
      set {
        calcErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "theo_status" field.</summary>
    public const int TheoStatusFieldNumber = 226;
    private global::Spiderrock.Protobuf.TheoStatus theoStatus_ = global::Spiderrock.Protobuf.TheoStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TheoStatus TheoStatus {
      get { return theoStatus_; }
      set {
        theoStatus_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 229;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionTheoVol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionTheoVol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (TheoModel != other.TheoModel) return false;
      if (ClientFirmOut != other.ClientFirmOut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Uprc, other.Uprc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ubid, other.Ubid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Uask, other.Uask)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Obid, other.Obid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Oask, other.Oask)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tvol, other.Tvol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TvolBOpn, other.TvolBOpn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TvolSOpn, other.TvolSOpn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tprc, other.Tprc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TbPrc, other.TbPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TsPrc, other.TsPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TbClsPrc, other.TbClsPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TsClsPrc, other.TsClsPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VeSlope, other.VeSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vo, other.Vo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Va, other.Va)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ro, other.Ro)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ph, other.Ph)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivB, other.SdivB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivS, other.SdivS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TvolAtm, other.TvolAtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolAtm, other.IvolAtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Svol, other.Svol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sprc, other.Sprc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDe, other.SDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVe, other.SVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (Err != other.Err) return false;
      if (TheoErr != other.TheoErr) return false;
      if (CalcErr != other.CalcErr) return false;
      if (TheoStatus != other.TheoStatus) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (TheoModel.Length != 0) hash ^= TheoModel.GetHashCode();
      if (ClientFirmOut.Length != 0) hash ^= ClientFirmOut.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Uprc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Uprc);
      if (Ubid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ubid);
      if (Uask != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Uask);
      if (Obid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Obid);
      if (Oask != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Oask);
      if (Tvol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tvol);
      if (TvolBOpn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TvolBOpn);
      if (TvolSOpn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TvolSOpn);
      if (Tprc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tprc);
      if (TbPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TbPrc);
      if (TsPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TsPrc);
      if (TbClsPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TbClsPrc);
      if (TsClsPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TsClsPrc);
      if (VeSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VeSlope);
      if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
      if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
      if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
      if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
      if (Vo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vo);
      if (Va != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Va);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (Ro != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ro);
      if (Ph != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ph);
      if (SdivB != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivB);
      if (SdivS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivS);
      if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
      if (TvolAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TvolAtm);
      if (IvolAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolAtm);
      if (Svol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Svol);
      if (Sprc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sprc);
      if (SDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDe);
      if (SVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVe);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (Err != 0) hash ^= Err.GetHashCode();
      if (TheoErr.Length != 0) hash ^= TheoErr.GetHashCode();
      if (CalcErr.Length != 0) hash ^= CalcErr.GetHashCode();
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) hash ^= TheoStatus.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(TheoModel);
      }
      if (ClientFirmOut.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientFirmOut);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (ticker_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Ticker);
      }
      if (Uprc != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Uprc);
      }
      if (Ubid != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Ubid);
      }
      if (Uask != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Uask);
      }
      if (Obid != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Obid);
      }
      if (Oask != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Oask);
      }
      if (Tvol != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Tvol);
      }
      if (TvolBOpn != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(TvolBOpn);
      }
      if (TvolSOpn != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(TvolSOpn);
      }
      if (Tprc != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(Tprc);
      }
      if (TbPrc != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(TbPrc);
      }
      if (TsPrc != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(TsPrc);
      }
      if (TbClsPrc != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(TbClsPrc);
      }
      if (TsClsPrc != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(TsClsPrc);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(VeSlope);
      }
      if (De != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Ve);
      }
      if (Vo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Va);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(DeDecay);
      }
      if (Ro != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Ro);
      }
      if (Ph != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Ph);
      }
      if (SdivB != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SdivB);
      }
      if (SdivS != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SdivS);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(XAxis);
      }
      if (TvolAtm != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(TvolAtm);
      }
      if (IvolAtm != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(IvolAtm);
      }
      if (Svol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(Svol);
      }
      if (Sprc != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(Sprc);
      }
      if (SDe != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SDe);
      }
      if (SVe != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SVe);
      }
      if (Rate != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(Ddiv);
      }
      if (Err != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(Err);
      }
      if (TheoErr.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(TheoErr);
      }
      if (CalcErr.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(CalcErr);
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) TheoStatus);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(TheoModel);
      }
      if (ClientFirmOut.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientFirmOut);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (ticker_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Ticker);
      }
      if (Uprc != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Uprc);
      }
      if (Ubid != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Ubid);
      }
      if (Uask != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Uask);
      }
      if (Obid != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Obid);
      }
      if (Oask != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Oask);
      }
      if (Tvol != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Tvol);
      }
      if (TvolBOpn != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(TvolBOpn);
      }
      if (TvolSOpn != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(TvolSOpn);
      }
      if (Tprc != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(Tprc);
      }
      if (TbPrc != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(TbPrc);
      }
      if (TsPrc != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(TsPrc);
      }
      if (TbClsPrc != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(TbClsPrc);
      }
      if (TsClsPrc != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(TsClsPrc);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(VeSlope);
      }
      if (De != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Ve);
      }
      if (Vo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Va);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(DeDecay);
      }
      if (Ro != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Ro);
      }
      if (Ph != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Ph);
      }
      if (SdivB != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SdivB);
      }
      if (SdivS != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SdivS);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(XAxis);
      }
      if (TvolAtm != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(TvolAtm);
      }
      if (IvolAtm != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(IvolAtm);
      }
      if (Svol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(Svol);
      }
      if (Sprc != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(Sprc);
      }
      if (SDe != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SDe);
      }
      if (SVe != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SVe);
      }
      if (Rate != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(Ddiv);
      }
      if (Err != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(Err);
      }
      if (TheoErr.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(TheoErr);
      }
      if (CalcErr.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(CalcErr);
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) TheoStatus);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (TheoModel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoModel);
      }
      if (ClientFirmOut.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirmOut);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Uprc != 0F) {
        size += 2 + 4;
      }
      if (Ubid != 0F) {
        size += 2 + 4;
      }
      if (Uask != 0F) {
        size += 2 + 4;
      }
      if (Obid != 0F) {
        size += 2 + 4;
      }
      if (Oask != 0F) {
        size += 2 + 4;
      }
      if (Tvol != 0F) {
        size += 2 + 4;
      }
      if (TvolBOpn != 0F) {
        size += 2 + 4;
      }
      if (TvolSOpn != 0F) {
        size += 2 + 4;
      }
      if (Tprc != 0F) {
        size += 2 + 4;
      }
      if (TbPrc != 0F) {
        size += 2 + 4;
      }
      if (TsPrc != 0F) {
        size += 2 + 4;
      }
      if (TbClsPrc != 0F) {
        size += 2 + 4;
      }
      if (TsClsPrc != 0F) {
        size += 2 + 4;
      }
      if (VeSlope != 0F) {
        size += 2 + 4;
      }
      if (De != 0F) {
        size += 2 + 4;
      }
      if (Ga != 0F) {
        size += 2 + 4;
      }
      if (Th != 0F) {
        size += 2 + 4;
      }
      if (Ve != 0F) {
        size += 2 + 4;
      }
      if (Vo != 0F) {
        size += 2 + 4;
      }
      if (Va != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (Ro != 0F) {
        size += 2 + 4;
      }
      if (Ph != 0F) {
        size += 2 + 4;
      }
      if (SdivB != 0F) {
        size += 2 + 4;
      }
      if (SdivS != 0F) {
        size += 2 + 4;
      }
      if (XAxis != 0F) {
        size += 2 + 4;
      }
      if (TvolAtm != 0F) {
        size += 2 + 4;
      }
      if (IvolAtm != 0F) {
        size += 2 + 4;
      }
      if (Svol != 0F) {
        size += 2 + 4;
      }
      if (Sprc != 0F) {
        size += 2 + 4;
      }
      if (SDe != 0F) {
        size += 2 + 4;
      }
      if (SVe != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (Err != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (TheoErr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoErr);
      }
      if (CalcErr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalcErr);
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TheoStatus);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionTheoVol other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.TheoModel.Length != 0) {
        TheoModel = other.TheoModel;
      }
      if (other.ClientFirmOut.Length != 0) {
        ClientFirmOut = other.ClientFirmOut;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Uprc != 0F) {
        Uprc = other.Uprc;
      }
      if (other.Ubid != 0F) {
        Ubid = other.Ubid;
      }
      if (other.Uask != 0F) {
        Uask = other.Uask;
      }
      if (other.Obid != 0F) {
        Obid = other.Obid;
      }
      if (other.Oask != 0F) {
        Oask = other.Oask;
      }
      if (other.Tvol != 0F) {
        Tvol = other.Tvol;
      }
      if (other.TvolBOpn != 0F) {
        TvolBOpn = other.TvolBOpn;
      }
      if (other.TvolSOpn != 0F) {
        TvolSOpn = other.TvolSOpn;
      }
      if (other.Tprc != 0F) {
        Tprc = other.Tprc;
      }
      if (other.TbPrc != 0F) {
        TbPrc = other.TbPrc;
      }
      if (other.TsPrc != 0F) {
        TsPrc = other.TsPrc;
      }
      if (other.TbClsPrc != 0F) {
        TbClsPrc = other.TbClsPrc;
      }
      if (other.TsClsPrc != 0F) {
        TsClsPrc = other.TsClsPrc;
      }
      if (other.VeSlope != 0F) {
        VeSlope = other.VeSlope;
      }
      if (other.De != 0F) {
        De = other.De;
      }
      if (other.Ga != 0F) {
        Ga = other.Ga;
      }
      if (other.Th != 0F) {
        Th = other.Th;
      }
      if (other.Ve != 0F) {
        Ve = other.Ve;
      }
      if (other.Vo != 0F) {
        Vo = other.Vo;
      }
      if (other.Va != 0F) {
        Va = other.Va;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.Ro != 0F) {
        Ro = other.Ro;
      }
      if (other.Ph != 0F) {
        Ph = other.Ph;
      }
      if (other.SdivB != 0F) {
        SdivB = other.SdivB;
      }
      if (other.SdivS != 0F) {
        SdivS = other.SdivS;
      }
      if (other.XAxis != 0F) {
        XAxis = other.XAxis;
      }
      if (other.TvolAtm != 0F) {
        TvolAtm = other.TvolAtm;
      }
      if (other.IvolAtm != 0F) {
        IvolAtm = other.IvolAtm;
      }
      if (other.Svol != 0F) {
        Svol = other.Svol;
      }
      if (other.Sprc != 0F) {
        Sprc = other.Sprc;
      }
      if (other.SDe != 0F) {
        SDe = other.SDe;
      }
      if (other.SVe != 0F) {
        SVe = other.SVe;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.TheoErr.Length != 0) {
        TheoErr = other.TheoErr;
      }
      if (other.CalcErr.Length != 0) {
        CalcErr = other.CalcErr;
      }
      if (other.TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        TheoStatus = other.TheoStatus;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            TheoModel = input.ReadString();
            break;
          }
          case 826: {
            ClientFirmOut = input.ReadString();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 874: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 901: {
            Uprc = input.ReadFloat();
            break;
          }
          case 925: {
            Ubid = input.ReadFloat();
            break;
          }
          case 949: {
            Uask = input.ReadFloat();
            break;
          }
          case 973: {
            Obid = input.ReadFloat();
            break;
          }
          case 997: {
            Oask = input.ReadFloat();
            break;
          }
          case 1021: {
            Tvol = input.ReadFloat();
            break;
          }
          case 1045: {
            TvolBOpn = input.ReadFloat();
            break;
          }
          case 1069: {
            TvolSOpn = input.ReadFloat();
            break;
          }
          case 1093: {
            Tprc = input.ReadFloat();
            break;
          }
          case 1117: {
            TbPrc = input.ReadFloat();
            break;
          }
          case 1141: {
            TsPrc = input.ReadFloat();
            break;
          }
          case 1165: {
            TbClsPrc = input.ReadFloat();
            break;
          }
          case 1189: {
            TsClsPrc = input.ReadFloat();
            break;
          }
          case 1213: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 1237: {
            De = input.ReadFloat();
            break;
          }
          case 1261: {
            Ga = input.ReadFloat();
            break;
          }
          case 1285: {
            Th = input.ReadFloat();
            break;
          }
          case 1309: {
            Ve = input.ReadFloat();
            break;
          }
          case 1333: {
            Vo = input.ReadFloat();
            break;
          }
          case 1357: {
            Va = input.ReadFloat();
            break;
          }
          case 1381: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1405: {
            Ro = input.ReadFloat();
            break;
          }
          case 1429: {
            Ph = input.ReadFloat();
            break;
          }
          case 1453: {
            SdivB = input.ReadFloat();
            break;
          }
          case 1477: {
            SdivS = input.ReadFloat();
            break;
          }
          case 1501: {
            XAxis = input.ReadFloat();
            break;
          }
          case 1525: {
            TvolAtm = input.ReadFloat();
            break;
          }
          case 1549: {
            IvolAtm = input.ReadFloat();
            break;
          }
          case 1573: {
            Svol = input.ReadFloat();
            break;
          }
          case 1597: {
            Sprc = input.ReadFloat();
            break;
          }
          case 1621: {
            SDe = input.ReadFloat();
            break;
          }
          case 1645: {
            SVe = input.ReadFloat();
            break;
          }
          case 1669: {
            Rate = input.ReadFloat();
            break;
          }
          case 1693: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1717: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1736: {
            Err = input.ReadInt32();
            break;
          }
          case 1762: {
            TheoErr = input.ReadString();
            break;
          }
          case 1786: {
            CalcErr = input.ReadString();
            break;
          }
          case 1808: {
            TheoStatus = (global::Spiderrock.Protobuf.TheoStatus) input.ReadEnum();
            break;
          }
          case 1834: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionTheoVol.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            TheoModel = input.ReadString();
            break;
          }
          case 826: {
            ClientFirmOut = input.ReadString();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 874: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 901: {
            Uprc = input.ReadFloat();
            break;
          }
          case 925: {
            Ubid = input.ReadFloat();
            break;
          }
          case 949: {
            Uask = input.ReadFloat();
            break;
          }
          case 973: {
            Obid = input.ReadFloat();
            break;
          }
          case 997: {
            Oask = input.ReadFloat();
            break;
          }
          case 1021: {
            Tvol = input.ReadFloat();
            break;
          }
          case 1045: {
            TvolBOpn = input.ReadFloat();
            break;
          }
          case 1069: {
            TvolSOpn = input.ReadFloat();
            break;
          }
          case 1093: {
            Tprc = input.ReadFloat();
            break;
          }
          case 1117: {
            TbPrc = input.ReadFloat();
            break;
          }
          case 1141: {
            TsPrc = input.ReadFloat();
            break;
          }
          case 1165: {
            TbClsPrc = input.ReadFloat();
            break;
          }
          case 1189: {
            TsClsPrc = input.ReadFloat();
            break;
          }
          case 1213: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 1237: {
            De = input.ReadFloat();
            break;
          }
          case 1261: {
            Ga = input.ReadFloat();
            break;
          }
          case 1285: {
            Th = input.ReadFloat();
            break;
          }
          case 1309: {
            Ve = input.ReadFloat();
            break;
          }
          case 1333: {
            Vo = input.ReadFloat();
            break;
          }
          case 1357: {
            Va = input.ReadFloat();
            break;
          }
          case 1381: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1405: {
            Ro = input.ReadFloat();
            break;
          }
          case 1429: {
            Ph = input.ReadFloat();
            break;
          }
          case 1453: {
            SdivB = input.ReadFloat();
            break;
          }
          case 1477: {
            SdivS = input.ReadFloat();
            break;
          }
          case 1501: {
            XAxis = input.ReadFloat();
            break;
          }
          case 1525: {
            TvolAtm = input.ReadFloat();
            break;
          }
          case 1549: {
            IvolAtm = input.ReadFloat();
            break;
          }
          case 1573: {
            Svol = input.ReadFloat();
            break;
          }
          case 1597: {
            Sprc = input.ReadFloat();
            break;
          }
          case 1621: {
            SDe = input.ReadFloat();
            break;
          }
          case 1645: {
            SVe = input.ReadFloat();
            break;
          }
          case 1669: {
            Rate = input.ReadFloat();
            break;
          }
          case 1693: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1717: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1736: {
            Err = input.ReadInt32();
            break;
          }
          case 1762: {
            TheoErr = input.ReadString();
            break;
          }
          case 1786: {
            CalcErr = input.ReadString();
            break;
          }
          case 1808: {
            TheoStatus = (global::Spiderrock.Protobuf.TheoStatus) input.ReadEnum();
            break;
          }
          case 1834: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OptionTheoVol message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.OptionTheoVol.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
