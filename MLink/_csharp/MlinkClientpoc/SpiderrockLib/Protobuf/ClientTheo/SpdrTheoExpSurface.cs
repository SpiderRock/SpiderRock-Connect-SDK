// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTheo/SpdrTheoExpSurface.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTheo/SpdrTheoExpSurface.proto</summary>
  public static partial class SpdrTheoExpSurfaceReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTheo/SpdrTheoExpSurface.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrTheoExpSurfaceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRUaGVvL1NwZHJUaGVvRXhwU3VyZmFjZS5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ilwwKElNwZHJU",
            "aGVvRXhwU3VyZmFjZRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJUaGVvRXhwU3VyZmFjZS5QS2V5Ei4KBnRpY2tl",
            "chhkIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EjAKCXNr",
            "ZXdfZnVuYxhnIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuU2tld0Z1bmMS",
            "OQoOdm9sX3RpbWVfdW5pdHMYaiABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlZvbFRpbWVVbml0cxI4Cg51X3ByY19yZWZfcnVsZRhtIAEoDjIgLnNwaWRl",
            "cnJvY2sucHJvdG9idWYudVByY1JlZlJ1bGUSEAoIcmVmX3VQcmMYcCABKAIS",
            "FwoPcmVmX3VQcmNfd2VpZ2h0GHMgASgCEhEKCXJlZl9zUkF0bRh2IAEoAhIY",
            "ChByZWZfc1JBdG1fd2VpZ2h0GHkgASgCEg8KB3BhcmFtX2EYfCABKAISDwoH",
            "cGFyYW1fYhh/IAEoAhIQCgdwYXJhbV9jGIIBIAEoAhIQCgdwYXJhbV9kGIUB",
            "IAEoAhIQCgdwYXJhbV9lGIgBIAEoAhIQCgdwYXJhbV9mGIsBIAEoAhIQCgdw",
            "YXJhbV9nGI4BIAEoAhIQCgdwYXJhbV9oGJEBIAEoAhIQCgdwYXJhbV9pGJQB",
            "IAEoAhIQCgdwYXJhbV9qGJcBIAEoAhIRCgh0aGVvX3ZvbBiaASABKAISEgoJ",
            "Yl9vcG5fdm9sGJ0BIAEoAhISCgliX2Nsc192b2wYoAEgASgCEhIKCXNfb3Bu",
            "X3ZvbBijASABKAISEgoJc19jbHNfdm9sGKYBIAEoAhITCgpiX29wbl9lZGdl",
            "GKkBIAEoAhITCgpiX2Nsc19lZGdlGKwBIAEoAhITCgpzX29wbl9lZGdlGK8B",
            "IAEoAhITCgpzX2Nsc19lZGdlGLIBIAEoAhJEChNidXlfc2VsbF9jb252ZW50",
            "aW9uGLUBIAEoDjImLnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbENvbnZl",
            "bnRpb24SEAoHbG5fZERpdhi4ASABKAISEAoHc2hfZERpdhi7ASABKAISEAoH",
            "bG5fc0Rpdhi+ASABKAISEAoHc2hfc0RpdhjBASABKAISEQoIdHZfc2xvcGUY",
            "xAEgASgCEi8KCGRpdl9ydWxlGMcBIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuRGl2UnVsZRI3ChJ1c2VyX3JhdGVfb3ZlcnJpZGUYygEgASgOMhouc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5ZZXNObxI3ChJ1c2VyX3NEaXZfb3ZlcnJpZGUY",
            "zQEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxI3ChJ1c2VyX2RE",
            "aXZfb3ZlcnJpZGUY0AEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNO",
            "bxIRCghtaW5fdUJpZBjTASABKAISEQoIbWF4X3VBc2sY1gEgASgCEjUKC3Ro",
            "ZW9fc3RhdHVzGNkBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuVGhlb1N0",
            "YXR1cxIQCgdjb21tZW50GNwBIAEoCRIsCgd1cGRhdGVkGN8BIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFAoLbW9kaWZpZWRfYnkY4gEgASgJ",
            "EjkKC21vZGlmaWVkX2luGOUBIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3lzRW52aXJvbm1lbnQSLgoJdGltZXN0YW1wGOgBIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXAaXQoEUEtleRIsCgRla2V5GAogASgLMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5FeHBpcnlLZXkSEgoKdGhlb19tb2RlbBgLIAEo",
            "CRITCgtjbGllbnRfZmlybRgMIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrTheoExpSurface), global::Spiderrock.Protobuf.SpdrTheoExpSurface.Parser, new[]{ "Meta", "Pkey", "Ticker", "SkewFunc", "VolTimeUnits", "UPrcRefRule", "RefUPrc", "RefUPrcWeight", "RefSRAtm", "RefSRAtmWeight", "ParamA", "ParamB", "ParamC", "ParamD", "ParamE", "ParamF", "ParamG", "ParamH", "ParamI", "ParamJ", "TheoVol", "BOpnVol", "BClsVol", "SOpnVol", "SClsVol", "BOpnEdge", "BClsEdge", "SOpnEdge", "SClsEdge", "BuySellConvention", "LnDDiv", "ShDDiv", "LnSDiv", "ShSDiv", "TvSlope", "DivRule", "UserRateOverride", "UserSDivOverride", "UserDDivOverride", "MinUBid", "MaxUAsk", "TheoStatus", "Comment", "Updated", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey), global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey.Parser, new[]{ "Ekey", "TheoModel", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpdrTheoExpSurface : pb::IMessage<SpdrTheoExpSurface>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrTheoExpSurface> _parser = new pb::MessageParser<SpdrTheoExpSurface>(() => new SpdrTheoExpSurface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrTheoExpSurface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrTheoExpSurfaceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrTheoExpSurface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrTheoExpSurface(SpdrTheoExpSurface other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      skewFunc_ = other.skewFunc_;
      volTimeUnits_ = other.volTimeUnits_;
      uPrcRefRule_ = other.uPrcRefRule_;
      refUPrc_ = other.refUPrc_;
      refUPrcWeight_ = other.refUPrcWeight_;
      refSRAtm_ = other.refSRAtm_;
      refSRAtmWeight_ = other.refSRAtmWeight_;
      paramA_ = other.paramA_;
      paramB_ = other.paramB_;
      paramC_ = other.paramC_;
      paramD_ = other.paramD_;
      paramE_ = other.paramE_;
      paramF_ = other.paramF_;
      paramG_ = other.paramG_;
      paramH_ = other.paramH_;
      paramI_ = other.paramI_;
      paramJ_ = other.paramJ_;
      theoVol_ = other.theoVol_;
      bOpnVol_ = other.bOpnVol_;
      bClsVol_ = other.bClsVol_;
      sOpnVol_ = other.sOpnVol_;
      sClsVol_ = other.sClsVol_;
      bOpnEdge_ = other.bOpnEdge_;
      bClsEdge_ = other.bClsEdge_;
      sOpnEdge_ = other.sOpnEdge_;
      sClsEdge_ = other.sClsEdge_;
      buySellConvention_ = other.buySellConvention_;
      lnDDiv_ = other.lnDDiv_;
      shDDiv_ = other.shDDiv_;
      lnSDiv_ = other.lnSDiv_;
      shSDiv_ = other.shSDiv_;
      tvSlope_ = other.tvSlope_;
      divRule_ = other.divRule_;
      userRateOverride_ = other.userRateOverride_;
      userSDivOverride_ = other.userSDivOverride_;
      userDDivOverride_ = other.userDDivOverride_;
      minUBid_ = other.minUBid_;
      maxUAsk_ = other.maxUAsk_;
      theoStatus_ = other.theoStatus_;
      comment_ = other.comment_;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrTheoExpSurface Clone() {
      return new SpdrTheoExpSurface(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "skew_func" field.</summary>
    public const int SkewFuncFieldNumber = 103;
    private global::Spiderrock.Protobuf.SkewFunc skewFunc_ = global::Spiderrock.Protobuf.SkewFunc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SkewFunc SkewFunc {
      get { return skewFunc_; }
      set {
        skewFunc_ = value;
      }
    }

    /// <summary>Field number for the "vol_time_units" field.</summary>
    public const int VolTimeUnitsFieldNumber = 106;
    private global::Spiderrock.Protobuf.VolTimeUnits volTimeUnits_ = global::Spiderrock.Protobuf.VolTimeUnits.Unspecified;
    /// <summary>
    /// default uses the SR native time metric (trading minutes); V6 is a prior SR metric (trading days)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.VolTimeUnits VolTimeUnits {
      get { return volTimeUnits_; }
      set {
        volTimeUnits_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ref_rule" field.</summary>
    public const int UPrcRefRuleFieldNumber = 109;
    private global::Spiderrock.Protobuf.uPrcRefRule uPrcRefRule_ = global::Spiderrock.Protobuf.uPrcRefRule.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.uPrcRefRule UPrcRefRule {
      get { return uPrcRefRule_; }
      set {
        uPrcRefRule_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc" field.</summary>
    public const int RefUPrcFieldNumber = 112;
    private float refUPrc_;
    /// <summary>
    /// -1 = use SR uPrc @ record insert
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefUPrc {
      get { return refUPrc_; }
      set {
        refUPrc_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc_weight" field.</summary>
    public const int RefUPrcWeightFieldNumber = 115;
    private float refUPrcWeight_;
    /// <summary>
    /// w: [0,1];adjRefUPrc = w * refUPrc + (1 - w) * uPrc;note: w=1 implies sticky strike behavior;w=0 implies sticky delta behavior
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefUPrcWeight {
      get { return refUPrcWeight_; }
      set {
        refUPrcWeight_ = value;
      }
    }

    /// <summary>Field number for the "ref_sRAtm" field.</summary>
    public const int RefSRAtmFieldNumber = 118;
    private float refSRAtm_;
    /// <summary>
    /// -1 = use SR surface atm @ record insert
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefSRAtm {
      get { return refSRAtm_; }
      set {
        refSRAtm_ = value;
      }
    }

    /// <summary>Field number for the "ref_sRAtm_weight" field.</summary>
    public const int RefSRAtmWeightFieldNumber = 121;
    private float refSRAtmWeight_;
    /// <summary>
    /// w: [0,1];theoVolAdj = theoVol + tvSlope * (uPrc - refUPrc) + w * (liveSRAtm - refSRAtm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefSRAtmWeight {
      get { return refSRAtmWeight_; }
      set {
        refSRAtmWeight_ = value;
      }
    }

    /// <summary>Field number for the "param_a" field.</summary>
    public const int ParamAFieldNumber = 124;
    private float paramA_;
    /// <summary>
    /// param A - J are inputs to the skewFunc model selected above
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamA {
      get { return paramA_; }
      set {
        paramA_ = value;
      }
    }

    /// <summary>Field number for the "param_b" field.</summary>
    public const int ParamBFieldNumber = 127;
    private float paramB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamB {
      get { return paramB_; }
      set {
        paramB_ = value;
      }
    }

    /// <summary>Field number for the "param_c" field.</summary>
    public const int ParamCFieldNumber = 130;
    private float paramC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamC {
      get { return paramC_; }
      set {
        paramC_ = value;
      }
    }

    /// <summary>Field number for the "param_d" field.</summary>
    public const int ParamDFieldNumber = 133;
    private float paramD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamD {
      get { return paramD_; }
      set {
        paramD_ = value;
      }
    }

    /// <summary>Field number for the "param_e" field.</summary>
    public const int ParamEFieldNumber = 136;
    private float paramE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamE {
      get { return paramE_; }
      set {
        paramE_ = value;
      }
    }

    /// <summary>Field number for the "param_f" field.</summary>
    public const int ParamFFieldNumber = 139;
    private float paramF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamF {
      get { return paramF_; }
      set {
        paramF_ = value;
      }
    }

    /// <summary>Field number for the "param_g" field.</summary>
    public const int ParamGFieldNumber = 142;
    private float paramG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamG {
      get { return paramG_; }
      set {
        paramG_ = value;
      }
    }

    /// <summary>Field number for the "param_h" field.</summary>
    public const int ParamHFieldNumber = 145;
    private float paramH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamH {
      get { return paramH_; }
      set {
        paramH_ = value;
      }
    }

    /// <summary>Field number for the "param_i" field.</summary>
    public const int ParamIFieldNumber = 148;
    private float paramI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamI {
      get { return paramI_; }
      set {
        paramI_ = value;
      }
    }

    /// <summary>Field number for the "param_j" field.</summary>
    public const int ParamJFieldNumber = 151;
    private float paramJ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParamJ {
      get { return paramJ_; }
      set {
        paramJ_ = value;
      }
    }

    /// <summary>Field number for the "theo_vol" field.</summary>
    public const int TheoVolFieldNumber = 154;
    private float theoVol_;
    /// <summary>
    /// theo volatility @ hypothetical atm strike (note: hypothetical atm strike depends on the definition of xAxis implied by the skewFunc model;usually the strike where xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoVol {
      get { return theoVol_; }
      set {
        theoVol_ = value;
      }
    }

    /// <summary>Field number for the "b_opn_vol" field.</summary>
    public const int BOpnVolFieldNumber = 157;
    private float bOpnVol_;
    /// <summary>
    /// buy open vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BOpnVol {
      get { return bOpnVol_; }
      set {
        bOpnVol_ = value;
      }
    }

    /// <summary>Field number for the "b_cls_vol" field.</summary>
    public const int BClsVolFieldNumber = 160;
    private float bClsVol_;
    /// <summary>
    /// buy close vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BClsVol {
      get { return bClsVol_; }
      set {
        bClsVol_ = value;
      }
    }

    /// <summary>Field number for the "s_opn_vol" field.</summary>
    public const int SOpnVolFieldNumber = 163;
    private float sOpnVol_;
    /// <summary>
    /// sell open vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SOpnVol {
      get { return sOpnVol_; }
      set {
        sOpnVol_ = value;
      }
    }

    /// <summary>Field number for the "s_cls_vol" field.</summary>
    public const int SClsVolFieldNumber = 166;
    private float sClsVol_;
    /// <summary>
    /// sell close vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SClsVol {
      get { return sClsVol_; }
      set {
        sClsVol_ = value;
      }
    }

    /// <summary>Field number for the "b_opn_edge" field.</summary>
    public const int BOpnEdgeFieldNumber = 169;
    private float bOpnEdge_;
    /// <summary>
    /// edge spread to open when buying
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BOpnEdge {
      get { return bOpnEdge_; }
      set {
        bOpnEdge_ = value;
      }
    }

    /// <summary>Field number for the "b_cls_edge" field.</summary>
    public const int BClsEdgeFieldNumber = 172;
    private float bClsEdge_;
    /// <summary>
    /// edge spread to close when buying
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BClsEdge {
      get { return bClsEdge_; }
      set {
        bClsEdge_ = value;
      }
    }

    /// <summary>Field number for the "s_opn_edge" field.</summary>
    public const int SOpnEdgeFieldNumber = 175;
    private float sOpnEdge_;
    /// <summary>
    /// edge spread to open when selling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SOpnEdge {
      get { return sOpnEdge_; }
      set {
        sOpnEdge_ = value;
      }
    }

    /// <summary>Field number for the "s_cls_edge" field.</summary>
    public const int SClsEdgeFieldNumber = 178;
    private float sClsEdge_;
    /// <summary>
    /// edge spread to close when selling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SClsEdge {
      get { return sClsEdge_; }
      set {
        sClsEdge_ = value;
      }
    }

    /// <summary>Field number for the "buy_sell_convention" field.</summary>
    public const int BuySellConventionFieldNumber = 181;
    private global::Spiderrock.Protobuf.BuySellConvention buySellConvention_ = global::Spiderrock.Protobuf.BuySellConvention.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySellConvention BuySellConvention {
      get { return buySellConvention_; }
      set {
        buySellConvention_ = value;
      }
    }

    /// <summary>Field number for the "ln_dDiv" field.</summary>
    public const int LnDDivFieldNumber = 184;
    private float lnDDiv_;
    /// <summary>
    /// (depricated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LnDDiv {
      get { return lnDDiv_; }
      set {
        lnDDiv_ = value;
      }
    }

    /// <summary>Field number for the "sh_dDiv" field.</summary>
    public const int ShDDivFieldNumber = 187;
    private float shDDiv_;
    /// <summary>
    /// (depricated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ShDDiv {
      get { return shDDiv_; }
      set {
        shDDiv_ = value;
      }
    }

    /// <summary>Field number for the "ln_sDiv" field.</summary>
    public const int LnSDivFieldNumber = 190;
    private float lnSDiv_;
    /// <summary>
    /// long sdiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LnSDiv {
      get { return lnSDiv_; }
      set {
        lnSDiv_ = value;
      }
    }

    /// <summary>Field number for the "sh_sDiv" field.</summary>
    public const int ShSDivFieldNumber = 193;
    private float shSDiv_;
    /// <summary>
    /// short sdiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ShSDiv {
      get { return shSDiv_; }
      set {
        shSDiv_ = value;
      }
    }

    /// <summary>Field number for the "tv_slope" field.</summary>
    public const int TvSlopeFieldNumber = 196;
    private float tvSlope_;
    /// <summary>
    /// tvSlope = dTheoVol / dUPrc;theoVolAdj = theoVol + tvSlope * (uPrc - refUPrc).  Note: tvSlope affects the calculation of theoSurface veSlope values which in turn affect hedgeDelta calculations when account.hedgeType = 'TvS'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TvSlope {
      get { return tvSlope_; }
      set {
        tvSlope_ = value;
      }
    }

    /// <summary>Field number for the "div_rule" field.</summary>
    public const int DivRuleFieldNumber = 199;
    private global::Spiderrock.Protobuf.DivRule divRule_ = global::Spiderrock.Protobuf.DivRule.Unspecified;
    /// <summary>
    /// specifies how DDiv and SDiv values will be incorporated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DivRule DivRule {
      get { return divRule_; }
      set {
        divRule_ = value;
      }
    }

    /// <summary>Field number for the "user_rate_override" field.</summary>
    public const int UserRateOverrideFieldNumber = 202;
    private global::Spiderrock.Protobuf.YesNo userRateOverride_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// use rate from the UserRateOverride table instead of SR Rate curve
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UserRateOverride {
      get { return userRateOverride_; }
      set {
        userRateOverride_ = value;
      }
    }

    /// <summary>Field number for the "user_sDiv_override" field.</summary>
    public const int UserSDivOverrideFieldNumber = 205;
    private global::Spiderrock.Protobuf.YesNo userSDivOverride_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// use sdiv from the UserSDivOverride table instead of SR SDiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UserSDivOverride {
      get { return userSDivOverride_; }
      set {
        userSDivOverride_ = value;
      }
    }

    /// <summary>Field number for the "user_dDiv_override" field.</summary>
    public const int UserDDivOverrideFieldNumber = 208;
    private global::Spiderrock.Protobuf.YesNo userDDivOverride_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// use dividends from the UserDividendOverride table instead of SR Dividends
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UserDDivOverride {
      get { return userDDivOverride_; }
      set {
        userDDivOverride_ = value;
      }
    }

    /// <summary>Field number for the "min_uBid" field.</summary>
    public const int MinUBidFieldNumber = 211;
    private float minUBid_;
    /// <summary>
    /// any non-hold status will revert to markup if live uMid is outside of [minUBid, maxUAsk]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinUBid {
      get { return minUBid_; }
      set {
        minUBid_ = value;
      }
    }

    /// <summary>Field number for the "max_uAsk" field.</summary>
    public const int MaxUAskFieldNumber = 214;
    private float maxUAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxUAsk {
      get { return maxUAsk_; }
      set {
        maxUAsk_ = value;
      }
    }

    /// <summary>Field number for the "theo_status" field.</summary>
    public const int TheoStatusFieldNumber = 217;
    private global::Spiderrock.Protobuf.TheoStatus theoStatus_ = global::Spiderrock.Protobuf.TheoStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TheoStatus TheoStatus {
      get { return theoStatus_; }
      set {
        theoStatus_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 220;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 223;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// datetime of last record update.  will default to current datetime on record load of not supplied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 226;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 229;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 232;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrTheoExpSurface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrTheoExpSurface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SkewFunc != other.SkewFunc) return false;
      if (VolTimeUnits != other.VolTimeUnits) return false;
      if (UPrcRefRule != other.UPrcRefRule) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefUPrc, other.RefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefUPrcWeight, other.RefUPrcWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefSRAtm, other.RefSRAtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefSRAtmWeight, other.RefSRAtmWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamA, other.ParamA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamB, other.ParamB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamC, other.ParamC)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamD, other.ParamD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamE, other.ParamE)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamF, other.ParamF)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamG, other.ParamG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamH, other.ParamH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamI, other.ParamI)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParamJ, other.ParamJ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoVol, other.TheoVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BOpnVol, other.BOpnVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BClsVol, other.BClsVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SOpnVol, other.SOpnVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SClsVol, other.SClsVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BOpnEdge, other.BOpnEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BClsEdge, other.BClsEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SOpnEdge, other.SOpnEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SClsEdge, other.SClsEdge)) return false;
      if (BuySellConvention != other.BuySellConvention) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LnDDiv, other.LnDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShDDiv, other.ShDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LnSDiv, other.LnSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShSDiv, other.ShSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TvSlope, other.TvSlope)) return false;
      if (DivRule != other.DivRule) return false;
      if (UserRateOverride != other.UserRateOverride) return false;
      if (UserSDivOverride != other.UserSDivOverride) return false;
      if (UserDDivOverride != other.UserDDivOverride) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinUBid, other.MinUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxUAsk, other.MaxUAsk)) return false;
      if (TheoStatus != other.TheoStatus) return false;
      if (Comment != other.Comment) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SkewFunc != global::Spiderrock.Protobuf.SkewFunc.Unspecified) hash ^= SkewFunc.GetHashCode();
      if (VolTimeUnits != global::Spiderrock.Protobuf.VolTimeUnits.Unspecified) hash ^= VolTimeUnits.GetHashCode();
      if (UPrcRefRule != global::Spiderrock.Protobuf.uPrcRefRule.Unspecified) hash ^= UPrcRefRule.GetHashCode();
      if (RefUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefUPrc);
      if (RefUPrcWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefUPrcWeight);
      if (RefSRAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefSRAtm);
      if (RefSRAtmWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefSRAtmWeight);
      if (ParamA != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamA);
      if (ParamB != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamB);
      if (ParamC != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamC);
      if (ParamD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamD);
      if (ParamE != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamE);
      if (ParamF != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamF);
      if (ParamG != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamG);
      if (ParamH != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamH);
      if (ParamI != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamI);
      if (ParamJ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParamJ);
      if (TheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoVol);
      if (BOpnVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BOpnVol);
      if (BClsVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BClsVol);
      if (SOpnVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SOpnVol);
      if (SClsVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SClsVol);
      if (BOpnEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BOpnEdge);
      if (BClsEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BClsEdge);
      if (SOpnEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SOpnEdge);
      if (SClsEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SClsEdge);
      if (BuySellConvention != global::Spiderrock.Protobuf.BuySellConvention.Unspecified) hash ^= BuySellConvention.GetHashCode();
      if (LnDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LnDDiv);
      if (ShDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShDDiv);
      if (LnSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LnSDiv);
      if (ShSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShSDiv);
      if (TvSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TvSlope);
      if (DivRule != global::Spiderrock.Protobuf.DivRule.Unspecified) hash ^= DivRule.GetHashCode();
      if (UserRateOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UserRateOverride.GetHashCode();
      if (UserSDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UserSDivOverride.GetHashCode();
      if (UserDDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UserDDivOverride.GetHashCode();
      if (MinUBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinUBid);
      if (MaxUAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxUAsk);
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) hash ^= TheoStatus.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SkewFunc != global::Spiderrock.Protobuf.SkewFunc.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SkewFunc);
      }
      if (VolTimeUnits != global::Spiderrock.Protobuf.VolTimeUnits.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) VolTimeUnits);
      }
      if (UPrcRefRule != global::Spiderrock.Protobuf.uPrcRefRule.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcRefRule);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(RefUPrc);
      }
      if (RefUPrcWeight != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(RefUPrcWeight);
      }
      if (RefSRAtm != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(RefSRAtm);
      }
      if (RefSRAtmWeight != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(RefSRAtmWeight);
      }
      if (ParamA != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(ParamA);
      }
      if (ParamB != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(ParamB);
      }
      if (ParamC != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(ParamC);
      }
      if (ParamD != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(ParamD);
      }
      if (ParamE != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(ParamE);
      }
      if (ParamF != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(ParamF);
      }
      if (ParamG != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(ParamG);
      }
      if (ParamH != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ParamH);
      }
      if (ParamI != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ParamI);
      }
      if (ParamJ != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(ParamJ);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(TheoVol);
      }
      if (BOpnVol != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(BOpnVol);
      }
      if (BClsVol != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(BClsVol);
      }
      if (SOpnVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(SOpnVol);
      }
      if (SClsVol != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(SClsVol);
      }
      if (BOpnEdge != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(BOpnEdge);
      }
      if (BClsEdge != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(BClsEdge);
      }
      if (SOpnEdge != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(SOpnEdge);
      }
      if (SClsEdge != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(SClsEdge);
      }
      if (BuySellConvention != global::Spiderrock.Protobuf.BuySellConvention.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) BuySellConvention);
      }
      if (LnDDiv != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(LnDDiv);
      }
      if (ShDDiv != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(ShDDiv);
      }
      if (LnSDiv != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(LnSDiv);
      }
      if (ShSDiv != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(ShSDiv);
      }
      if (TvSlope != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(TvSlope);
      }
      if (DivRule != global::Spiderrock.Protobuf.DivRule.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) DivRule);
      }
      if (UserRateOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) UserRateOverride);
      }
      if (UserSDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) UserSDivOverride);
      }
      if (UserDDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) UserDDivOverride);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(MaxUAsk);
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) TheoStatus);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(Comment);
      }
      if (updated_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Updated);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SkewFunc != global::Spiderrock.Protobuf.SkewFunc.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SkewFunc);
      }
      if (VolTimeUnits != global::Spiderrock.Protobuf.VolTimeUnits.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) VolTimeUnits);
      }
      if (UPrcRefRule != global::Spiderrock.Protobuf.uPrcRefRule.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcRefRule);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(RefUPrc);
      }
      if (RefUPrcWeight != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(RefUPrcWeight);
      }
      if (RefSRAtm != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(RefSRAtm);
      }
      if (RefSRAtmWeight != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(RefSRAtmWeight);
      }
      if (ParamA != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(ParamA);
      }
      if (ParamB != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(ParamB);
      }
      if (ParamC != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(ParamC);
      }
      if (ParamD != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(ParamD);
      }
      if (ParamE != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(ParamE);
      }
      if (ParamF != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(ParamF);
      }
      if (ParamG != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(ParamG);
      }
      if (ParamH != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ParamH);
      }
      if (ParamI != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ParamI);
      }
      if (ParamJ != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(ParamJ);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(TheoVol);
      }
      if (BOpnVol != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(BOpnVol);
      }
      if (BClsVol != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(BClsVol);
      }
      if (SOpnVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(SOpnVol);
      }
      if (SClsVol != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(SClsVol);
      }
      if (BOpnEdge != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(BOpnEdge);
      }
      if (BClsEdge != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(BClsEdge);
      }
      if (SOpnEdge != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(SOpnEdge);
      }
      if (SClsEdge != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(SClsEdge);
      }
      if (BuySellConvention != global::Spiderrock.Protobuf.BuySellConvention.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) BuySellConvention);
      }
      if (LnDDiv != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(LnDDiv);
      }
      if (ShDDiv != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(ShDDiv);
      }
      if (LnSDiv != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(LnSDiv);
      }
      if (ShSDiv != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(ShSDiv);
      }
      if (TvSlope != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(TvSlope);
      }
      if (DivRule != global::Spiderrock.Protobuf.DivRule.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) DivRule);
      }
      if (UserRateOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) UserRateOverride);
      }
      if (UserSDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) UserSDivOverride);
      }
      if (UserDDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) UserDDivOverride);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(MaxUAsk);
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) TheoStatus);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(Comment);
      }
      if (updated_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Updated);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SkewFunc != global::Spiderrock.Protobuf.SkewFunc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SkewFunc);
      }
      if (VolTimeUnits != global::Spiderrock.Protobuf.VolTimeUnits.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VolTimeUnits);
      }
      if (UPrcRefRule != global::Spiderrock.Protobuf.uPrcRefRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcRefRule);
      }
      if (RefUPrc != 0F) {
        size += 2 + 4;
      }
      if (RefUPrcWeight != 0F) {
        size += 2 + 4;
      }
      if (RefSRAtm != 0F) {
        size += 2 + 4;
      }
      if (RefSRAtmWeight != 0F) {
        size += 2 + 4;
      }
      if (ParamA != 0F) {
        size += 2 + 4;
      }
      if (ParamB != 0F) {
        size += 2 + 4;
      }
      if (ParamC != 0F) {
        size += 2 + 4;
      }
      if (ParamD != 0F) {
        size += 2 + 4;
      }
      if (ParamE != 0F) {
        size += 2 + 4;
      }
      if (ParamF != 0F) {
        size += 2 + 4;
      }
      if (ParamG != 0F) {
        size += 2 + 4;
      }
      if (ParamH != 0F) {
        size += 2 + 4;
      }
      if (ParamI != 0F) {
        size += 2 + 4;
      }
      if (ParamJ != 0F) {
        size += 2 + 4;
      }
      if (TheoVol != 0F) {
        size += 2 + 4;
      }
      if (BOpnVol != 0F) {
        size += 2 + 4;
      }
      if (BClsVol != 0F) {
        size += 2 + 4;
      }
      if (SOpnVol != 0F) {
        size += 2 + 4;
      }
      if (SClsVol != 0F) {
        size += 2 + 4;
      }
      if (BOpnEdge != 0F) {
        size += 2 + 4;
      }
      if (BClsEdge != 0F) {
        size += 2 + 4;
      }
      if (SOpnEdge != 0F) {
        size += 2 + 4;
      }
      if (SClsEdge != 0F) {
        size += 2 + 4;
      }
      if (BuySellConvention != global::Spiderrock.Protobuf.BuySellConvention.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BuySellConvention);
      }
      if (LnDDiv != 0F) {
        size += 2 + 4;
      }
      if (ShDDiv != 0F) {
        size += 2 + 4;
      }
      if (LnSDiv != 0F) {
        size += 2 + 4;
      }
      if (ShSDiv != 0F) {
        size += 2 + 4;
      }
      if (TvSlope != 0F) {
        size += 2 + 4;
      }
      if (DivRule != global::Spiderrock.Protobuf.DivRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DivRule);
      }
      if (UserRateOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserRateOverride);
      }
      if (UserSDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserSDivOverride);
      }
      if (UserDDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserDDivOverride);
      }
      if (MinUBid != 0F) {
        size += 2 + 4;
      }
      if (MaxUAsk != 0F) {
        size += 2 + 4;
      }
      if (TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TheoStatus);
      }
      if (Comment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrTheoExpSurface other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SkewFunc != global::Spiderrock.Protobuf.SkewFunc.Unspecified) {
        SkewFunc = other.SkewFunc;
      }
      if (other.VolTimeUnits != global::Spiderrock.Protobuf.VolTimeUnits.Unspecified) {
        VolTimeUnits = other.VolTimeUnits;
      }
      if (other.UPrcRefRule != global::Spiderrock.Protobuf.uPrcRefRule.Unspecified) {
        UPrcRefRule = other.UPrcRefRule;
      }
      if (other.RefUPrc != 0F) {
        RefUPrc = other.RefUPrc;
      }
      if (other.RefUPrcWeight != 0F) {
        RefUPrcWeight = other.RefUPrcWeight;
      }
      if (other.RefSRAtm != 0F) {
        RefSRAtm = other.RefSRAtm;
      }
      if (other.RefSRAtmWeight != 0F) {
        RefSRAtmWeight = other.RefSRAtmWeight;
      }
      if (other.ParamA != 0F) {
        ParamA = other.ParamA;
      }
      if (other.ParamB != 0F) {
        ParamB = other.ParamB;
      }
      if (other.ParamC != 0F) {
        ParamC = other.ParamC;
      }
      if (other.ParamD != 0F) {
        ParamD = other.ParamD;
      }
      if (other.ParamE != 0F) {
        ParamE = other.ParamE;
      }
      if (other.ParamF != 0F) {
        ParamF = other.ParamF;
      }
      if (other.ParamG != 0F) {
        ParamG = other.ParamG;
      }
      if (other.ParamH != 0F) {
        ParamH = other.ParamH;
      }
      if (other.ParamI != 0F) {
        ParamI = other.ParamI;
      }
      if (other.ParamJ != 0F) {
        ParamJ = other.ParamJ;
      }
      if (other.TheoVol != 0F) {
        TheoVol = other.TheoVol;
      }
      if (other.BOpnVol != 0F) {
        BOpnVol = other.BOpnVol;
      }
      if (other.BClsVol != 0F) {
        BClsVol = other.BClsVol;
      }
      if (other.SOpnVol != 0F) {
        SOpnVol = other.SOpnVol;
      }
      if (other.SClsVol != 0F) {
        SClsVol = other.SClsVol;
      }
      if (other.BOpnEdge != 0F) {
        BOpnEdge = other.BOpnEdge;
      }
      if (other.BClsEdge != 0F) {
        BClsEdge = other.BClsEdge;
      }
      if (other.SOpnEdge != 0F) {
        SOpnEdge = other.SOpnEdge;
      }
      if (other.SClsEdge != 0F) {
        SClsEdge = other.SClsEdge;
      }
      if (other.BuySellConvention != global::Spiderrock.Protobuf.BuySellConvention.Unspecified) {
        BuySellConvention = other.BuySellConvention;
      }
      if (other.LnDDiv != 0F) {
        LnDDiv = other.LnDDiv;
      }
      if (other.ShDDiv != 0F) {
        ShDDiv = other.ShDDiv;
      }
      if (other.LnSDiv != 0F) {
        LnSDiv = other.LnSDiv;
      }
      if (other.ShSDiv != 0F) {
        ShSDiv = other.ShSDiv;
      }
      if (other.TvSlope != 0F) {
        TvSlope = other.TvSlope;
      }
      if (other.DivRule != global::Spiderrock.Protobuf.DivRule.Unspecified) {
        DivRule = other.DivRule;
      }
      if (other.UserRateOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UserRateOverride = other.UserRateOverride;
      }
      if (other.UserSDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UserSDivOverride = other.UserSDivOverride;
      }
      if (other.UserDDivOverride != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UserDDivOverride = other.UserDDivOverride;
      }
      if (other.MinUBid != 0F) {
        MinUBid = other.MinUBid;
      }
      if (other.MaxUAsk != 0F) {
        MaxUAsk = other.MaxUAsk;
      }
      if (other.TheoStatus != global::Spiderrock.Protobuf.TheoStatus.Unspecified) {
        TheoStatus = other.TheoStatus;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 824: {
            SkewFunc = (global::Spiderrock.Protobuf.SkewFunc) input.ReadEnum();
            break;
          }
          case 848: {
            VolTimeUnits = (global::Spiderrock.Protobuf.VolTimeUnits) input.ReadEnum();
            break;
          }
          case 872: {
            UPrcRefRule = (global::Spiderrock.Protobuf.uPrcRefRule) input.ReadEnum();
            break;
          }
          case 901: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 925: {
            RefUPrcWeight = input.ReadFloat();
            break;
          }
          case 949: {
            RefSRAtm = input.ReadFloat();
            break;
          }
          case 973: {
            RefSRAtmWeight = input.ReadFloat();
            break;
          }
          case 997: {
            ParamA = input.ReadFloat();
            break;
          }
          case 1021: {
            ParamB = input.ReadFloat();
            break;
          }
          case 1045: {
            ParamC = input.ReadFloat();
            break;
          }
          case 1069: {
            ParamD = input.ReadFloat();
            break;
          }
          case 1093: {
            ParamE = input.ReadFloat();
            break;
          }
          case 1117: {
            ParamF = input.ReadFloat();
            break;
          }
          case 1141: {
            ParamG = input.ReadFloat();
            break;
          }
          case 1165: {
            ParamH = input.ReadFloat();
            break;
          }
          case 1189: {
            ParamI = input.ReadFloat();
            break;
          }
          case 1213: {
            ParamJ = input.ReadFloat();
            break;
          }
          case 1237: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 1261: {
            BOpnVol = input.ReadFloat();
            break;
          }
          case 1285: {
            BClsVol = input.ReadFloat();
            break;
          }
          case 1309: {
            SOpnVol = input.ReadFloat();
            break;
          }
          case 1333: {
            SClsVol = input.ReadFloat();
            break;
          }
          case 1357: {
            BOpnEdge = input.ReadFloat();
            break;
          }
          case 1381: {
            BClsEdge = input.ReadFloat();
            break;
          }
          case 1405: {
            SOpnEdge = input.ReadFloat();
            break;
          }
          case 1429: {
            SClsEdge = input.ReadFloat();
            break;
          }
          case 1448: {
            BuySellConvention = (global::Spiderrock.Protobuf.BuySellConvention) input.ReadEnum();
            break;
          }
          case 1477: {
            LnDDiv = input.ReadFloat();
            break;
          }
          case 1501: {
            ShDDiv = input.ReadFloat();
            break;
          }
          case 1525: {
            LnSDiv = input.ReadFloat();
            break;
          }
          case 1549: {
            ShSDiv = input.ReadFloat();
            break;
          }
          case 1573: {
            TvSlope = input.ReadFloat();
            break;
          }
          case 1592: {
            DivRule = (global::Spiderrock.Protobuf.DivRule) input.ReadEnum();
            break;
          }
          case 1616: {
            UserRateOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1640: {
            UserSDivOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            UserDDivOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1693: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 1717: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 1736: {
            TheoStatus = (global::Spiderrock.Protobuf.TheoStatus) input.ReadEnum();
            break;
          }
          case 1762: {
            Comment = input.ReadString();
            break;
          }
          case 1786: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 1810: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1832: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1858: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrTheoExpSurface.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 824: {
            SkewFunc = (global::Spiderrock.Protobuf.SkewFunc) input.ReadEnum();
            break;
          }
          case 848: {
            VolTimeUnits = (global::Spiderrock.Protobuf.VolTimeUnits) input.ReadEnum();
            break;
          }
          case 872: {
            UPrcRefRule = (global::Spiderrock.Protobuf.uPrcRefRule) input.ReadEnum();
            break;
          }
          case 901: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 925: {
            RefUPrcWeight = input.ReadFloat();
            break;
          }
          case 949: {
            RefSRAtm = input.ReadFloat();
            break;
          }
          case 973: {
            RefSRAtmWeight = input.ReadFloat();
            break;
          }
          case 997: {
            ParamA = input.ReadFloat();
            break;
          }
          case 1021: {
            ParamB = input.ReadFloat();
            break;
          }
          case 1045: {
            ParamC = input.ReadFloat();
            break;
          }
          case 1069: {
            ParamD = input.ReadFloat();
            break;
          }
          case 1093: {
            ParamE = input.ReadFloat();
            break;
          }
          case 1117: {
            ParamF = input.ReadFloat();
            break;
          }
          case 1141: {
            ParamG = input.ReadFloat();
            break;
          }
          case 1165: {
            ParamH = input.ReadFloat();
            break;
          }
          case 1189: {
            ParamI = input.ReadFloat();
            break;
          }
          case 1213: {
            ParamJ = input.ReadFloat();
            break;
          }
          case 1237: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 1261: {
            BOpnVol = input.ReadFloat();
            break;
          }
          case 1285: {
            BClsVol = input.ReadFloat();
            break;
          }
          case 1309: {
            SOpnVol = input.ReadFloat();
            break;
          }
          case 1333: {
            SClsVol = input.ReadFloat();
            break;
          }
          case 1357: {
            BOpnEdge = input.ReadFloat();
            break;
          }
          case 1381: {
            BClsEdge = input.ReadFloat();
            break;
          }
          case 1405: {
            SOpnEdge = input.ReadFloat();
            break;
          }
          case 1429: {
            SClsEdge = input.ReadFloat();
            break;
          }
          case 1448: {
            BuySellConvention = (global::Spiderrock.Protobuf.BuySellConvention) input.ReadEnum();
            break;
          }
          case 1477: {
            LnDDiv = input.ReadFloat();
            break;
          }
          case 1501: {
            ShDDiv = input.ReadFloat();
            break;
          }
          case 1525: {
            LnSDiv = input.ReadFloat();
            break;
          }
          case 1549: {
            ShSDiv = input.ReadFloat();
            break;
          }
          case 1573: {
            TvSlope = input.ReadFloat();
            break;
          }
          case 1592: {
            DivRule = (global::Spiderrock.Protobuf.DivRule) input.ReadEnum();
            break;
          }
          case 1616: {
            UserRateOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1640: {
            UserSDivOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            UserDDivOverride = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1693: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 1717: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 1736: {
            TheoStatus = (global::Spiderrock.Protobuf.TheoStatus) input.ReadEnum();
            break;
          }
          case 1762: {
            Comment = input.ReadString();
            break;
          }
          case 1786: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 1810: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1832: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1858: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrTheoExpSurface message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrTheoExpSurface.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          theoModel_ = other.theoModel_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "theo_model" field.</summary>
        public const int TheoModelFieldNumber = 11;
        private string theoModel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string TheoModel {
          get { return theoModel_; }
          set {
            theoModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 12;
        private string clientFirm_ = "";
        /// <summary>
        /// client firm this theo model is associated with (controls visibility)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (TheoModel != other.TheoModel) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (TheoModel.Length != 0) hash ^= TheoModel.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (TheoModel.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (TheoModel.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (TheoModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.TheoModel.Length != 0) {
            TheoModel = other.TheoModel;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 90: {
                TheoModel = input.ReadString();
                break;
              }
              case 98: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 90: {
                TheoModel = input.ReadString();
                break;
              }
              case 98: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
