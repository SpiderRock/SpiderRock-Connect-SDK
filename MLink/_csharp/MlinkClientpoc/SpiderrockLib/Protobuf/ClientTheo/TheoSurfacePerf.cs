// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTheo/TheoSurfacePerf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTheo/TheoSurfacePerf.proto</summary>
  public static partial class TheoSurfacePerfReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTheo/TheoSurfacePerf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TheoSurfacePerfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilQcm90b2J1Zi9DbGllbnRUaGVvL1RoZW9TdXJmYWNlUGVyZi5wcm90bxIT",
            "c3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iwwUKD1RoZW9TdXJm",
            "YWNlUGVyZhIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "TWVzc2FnZU1ldGFkYXRhEjcKBHBrZXkYAiABKAsyKS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlRoZW9TdXJmYWNlUGVyZi5QS2V5EgwKBGRhdGUYZCABKAkSDAoE",
            "dGltZRhnIAEoCRIuCgZ0aWNrZXIYaiABKAsyHi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlRpY2tlcktleRIOCgZzdHJpa2UYbSABKAISDwoHdF9lTW92ZRhwIAEo",
            "AhIOCgZjX3RWb2wYcyABKAISDgoGcF90Vm9sGHYgASgCEg4KBmNfdE9weBh5",
            "IAEoAhIOCgZwX3RPcHgYfCABKAISEQoJZml4X2NUVm9sGH8gASgCEhIKCWZp",
            "eF9wVFZvbBiCASABKAISEgoJZml4X2NUT3B4GIUBIAEoAhISCglmaXhfcFRP",
            "cHgYiAEgASgCEhMKCnBydl9zdHJpa2UYiwEgASgCEhMKCnBydl90RU1vdmUY",
            "jgEgASgCEhIKCXBydl9jVFZvbBiRASABKAISEgoJcHJ2X3BUVm9sGJQBIAEo",
            "AhISCglwcnZfY1RPcHgYlwEgASgCEhIKCXBydl9wVE9weBiaASABKAISLgoJ",
            "dGltZXN0YW1wGJ0BIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAa",
            "mwEKBFBLZXkSLAoEZWtleRgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "RXhwaXJ5S2V5EhIKCnRoZW9fbW9kZWwYCyABKAkSEwoLY2xpZW50X2Zpcm0Y",
            "DCABKAkSPAoOcGVyZl9zdXJmX3R5cGUYDSABKA4yJC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlBlcmZTdXJmYWNlVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TheoSurfacePerf), global::Spiderrock.Protobuf.TheoSurfacePerf.Parser, new[]{ "Meta", "Pkey", "Date", "Time", "Ticker", "Strike", "TEMove", "CTVol", "PTVol", "CTOpx", "PTOpx", "FixCTVol", "FixPTVol", "FixCTOpx", "FixPTOpx", "PrvStrike", "PrvTEMove", "PrvCTVol", "PrvPTVol", "PrvCTOpx", "PrvPTOpx", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey), global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey.Parser, new[]{ "Ekey", "TheoModel", "ClientFirm", "PerfSurfType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///TheoSurfacePerf records are published throughout he day for each active client theoretical model in the SpiderRock system.  They are suitable for tracking performance of a theoretical model surface whether or not it is being traded.
  ///TheoSurfacePerf records are published to the SpiderRock elastic cluster at the end of each day.
  /// </summary>
  public sealed partial class TheoSurfacePerf : pb::IMessage<TheoSurfacePerf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TheoSurfacePerf> _parser = new pb::MessageParser<TheoSurfacePerf>(() => new TheoSurfacePerf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TheoSurfacePerf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.TheoSurfacePerfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TheoSurfacePerf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TheoSurfacePerf(TheoSurfacePerf other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      date_ = other.date_;
      time_ = other.time_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      strike_ = other.strike_;
      tEMove_ = other.tEMove_;
      cTVol_ = other.cTVol_;
      pTVol_ = other.pTVol_;
      cTOpx_ = other.cTOpx_;
      pTOpx_ = other.pTOpx_;
      fixCTVol_ = other.fixCTVol_;
      fixPTVol_ = other.fixPTVol_;
      fixCTOpx_ = other.fixCTOpx_;
      fixPTOpx_ = other.fixPTOpx_;
      prvStrike_ = other.prvStrike_;
      prvTEMove_ = other.prvTEMove_;
      prvCTVol_ = other.prvCTVol_;
      prvPTVol_ = other.prvPTVol_;
      prvCTOpx_ = other.prvCTOpx_;
      prvPTOpx_ = other.prvPTOpx_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TheoSurfacePerf Clone() {
      return new TheoSurfacePerf(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 100;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 103;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 106;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SpiderRock underlier stock key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 109;
    private float strike_;
    /// <summary>
    /// atm strike (fwd uPrc);from LiveSurfacePerf record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "t_eMove" field.</summary>
    public const int TEMoveFieldNumber = 112;
    private float tEMove_;
    /// <summary>
    /// theoretical event move (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEMove {
      get { return tEMove_; }
      set {
        tEMove_ = value;
      }
    }

    /// <summary>Field number for the "c_tVol" field.</summary>
    public const int CTVolFieldNumber = 115;
    private float cTVol_;
    /// <summary>
    /// theo call volatility (from theoModel @ strike = strike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CTVol {
      get { return cTVol_; }
      set {
        cTVol_ = value;
      }
    }

    /// <summary>Field number for the "p_tVol" field.</summary>
    public const int PTVolFieldNumber = 118;
    private float pTVol_;
    /// <summary>
    /// theo put volatility (from theoModel @ strike = strike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PTVol {
      get { return pTVol_; }
      set {
        pTVol_ = value;
      }
    }

    /// <summary>Field number for the "c_tOpx" field.</summary>
    public const int CTOpxFieldNumber = 121;
    private float cTOpx_;
    /// <summary>
    /// theo call price @ (cTVol, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CTOpx {
      get { return cTOpx_; }
      set {
        cTOpx_ = value;
      }
    }

    /// <summary>Field number for the "p_tOpx" field.</summary>
    public const int PTOpxFieldNumber = 124;
    private float pTOpx_;
    /// <summary>
    /// theo put price @ (pTVol, uMark, years, sdiv, rate, ddiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PTOpx {
      get { return pTOpx_; }
      set {
        pTOpx_ = value;
      }
    }

    /// <summary>Field number for the "fix_cTVol" field.</summary>
    public const int FixCTVolFieldNumber = 127;
    private float fixCTVol_;
    /// <summary>
    /// fixed strike theo call volatility (from theoModel @ strike = prvStrike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixCTVol {
      get { return fixCTVol_; }
      set {
        fixCTVol_ = value;
      }
    }

    /// <summary>Field number for the "fix_pTVol" field.</summary>
    public const int FixPTVolFieldNumber = 130;
    private float fixPTVol_;
    /// <summary>
    /// fixed strike theo put volatility (from theoModel @ strike = prvStrike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixPTVol {
      get { return fixPTVol_; }
      set {
        fixPTVol_ = value;
      }
    }

    /// <summary>Field number for the "fix_cTOpx" field.</summary>
    public const int FixCTOpxFieldNumber = 133;
    private float fixCTOpx_;
    /// <summary>
    /// fixed strike theo call price @ (fixTVol, uMark, years, sdiv, rate, ddiv);strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixCTOpx {
      get { return fixCTOpx_; }
      set {
        fixCTOpx_ = value;
      }
    }

    /// <summary>Field number for the "fix_pTOpx" field.</summary>
    public const int FixPTOpxFieldNumber = 136;
    private float fixPTOpx_;
    /// <summary>
    /// fixed strike theo put price @ (fixTVol, uMark, years, sdiv, rate, ddiv);strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FixPTOpx {
      get { return fixPTOpx_; }
      set {
        fixPTOpx_ = value;
      }
    }

    /// <summary>Field number for the "prv_strike" field.</summary>
    public const int PrvStrikeFieldNumber = 139;
    private float prvStrike_;
    /// <summary>
    /// prior period atm strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvStrike {
      get { return prvStrike_; }
      set {
        prvStrike_ = value;
      }
    }

    /// <summary>Field number for the "prv_tEMove" field.</summary>
    public const int PrvTEMoveFieldNumber = 142;
    private float prvTEMove_;
    /// <summary>
    /// prior period theoretical event move (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvTEMove {
      get { return prvTEMove_; }
      set {
        prvTEMove_ = value;
      }
    }

    /// <summary>Field number for the "prv_cTVol" field.</summary>
    public const int PrvCTVolFieldNumber = 145;
    private float prvCTVol_;
    /// <summary>
    /// prior period theo call volatility @ strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCTVol {
      get { return prvCTVol_; }
      set {
        prvCTVol_ = value;
      }
    }

    /// <summary>Field number for the "prv_pTVol" field.</summary>
    public const int PrvPTVolFieldNumber = 148;
    private float prvPTVol_;
    /// <summary>
    /// prior period theo put volatility @ strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPTVol {
      get { return prvPTVol_; }
      set {
        prvPTVol_ = value;
      }
    }

    /// <summary>Field number for the "prv_cTOpx" field.</summary>
    public const int PrvCTOpxFieldNumber = 151;
    private float prvCTOpx_;
    /// <summary>
    /// prior period theo call price @ strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvCTOpx {
      get { return prvCTOpx_; }
      set {
        prvCTOpx_ = value;
      }
    }

    /// <summary>Field number for the "prv_pTOpx" field.</summary>
    public const int PrvPTOpxFieldNumber = 154;
    private float prvPTOpx_;
    /// <summary>
    /// prior period theo call price @ strike = prvStrike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrvPTOpx {
      get { return prvPTOpx_; }
      set {
        prvPTOpx_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 157;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TheoSurfacePerf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TheoSurfacePerf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (Date != other.Date) return false;
      if (Time != other.Time) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEMove, other.TEMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTVol, other.CTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PTVol, other.PTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTOpx, other.CTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PTOpx, other.PTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixCTVol, other.FixCTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixPTVol, other.FixPTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixCTOpx, other.FixCTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixPTOpx, other.FixPTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvStrike, other.PrvStrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvTEMove, other.PrvTEMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCTVol, other.PrvCTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPTVol, other.PrvPTVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvCTOpx, other.PrvCTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrvPTOpx, other.PrvPTOpx)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Strike != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Strike);
      if (TEMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEMove);
      if (CTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTVol);
      if (PTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PTVol);
      if (CTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTOpx);
      if (PTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PTOpx);
      if (FixCTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixCTVol);
      if (FixPTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixPTVol);
      if (FixCTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixCTOpx);
      if (FixPTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixPTOpx);
      if (PrvStrike != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvStrike);
      if (PrvTEMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvTEMove);
      if (PrvCTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCTVol);
      if (PrvPTVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPTVol);
      if (PrvCTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvCTOpx);
      if (PrvPTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrvPTOpx);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (Strike != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Strike);
      }
      if (TEMove != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(TEMove);
      }
      if (CTVol != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(CTVol);
      }
      if (PTVol != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PTVol);
      }
      if (CTOpx != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(CTOpx);
      }
      if (PTOpx != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(PTOpx);
      }
      if (FixCTVol != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(FixCTVol);
      }
      if (FixPTVol != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(FixPTVol);
      }
      if (FixCTOpx != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(FixCTOpx);
      }
      if (FixPTOpx != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(FixPTOpx);
      }
      if (PrvStrike != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(PrvStrike);
      }
      if (PrvTEMove != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(PrvTEMove);
      }
      if (PrvCTVol != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(PrvCTVol);
      }
      if (PrvPTVol != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(PrvPTVol);
      }
      if (PrvCTOpx != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(PrvCTOpx);
      }
      if (PrvPTOpx != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(PrvPTOpx);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (Strike != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Strike);
      }
      if (TEMove != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(TEMove);
      }
      if (CTVol != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(CTVol);
      }
      if (PTVol != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PTVol);
      }
      if (CTOpx != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(CTOpx);
      }
      if (PTOpx != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(PTOpx);
      }
      if (FixCTVol != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(FixCTVol);
      }
      if (FixPTVol != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(FixPTVol);
      }
      if (FixCTOpx != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(FixCTOpx);
      }
      if (FixPTOpx != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(FixPTOpx);
      }
      if (PrvStrike != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(PrvStrike);
      }
      if (PrvTEMove != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(PrvTEMove);
      }
      if (PrvCTVol != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(PrvCTVol);
      }
      if (PrvPTVol != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(PrvPTVol);
      }
      if (PrvCTOpx != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(PrvCTOpx);
      }
      if (PrvPTOpx != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(PrvPTOpx);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (Date.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Time.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Strike != 0F) {
        size += 2 + 4;
      }
      if (TEMove != 0F) {
        size += 2 + 4;
      }
      if (CTVol != 0F) {
        size += 2 + 4;
      }
      if (PTVol != 0F) {
        size += 2 + 4;
      }
      if (CTOpx != 0F) {
        size += 2 + 4;
      }
      if (PTOpx != 0F) {
        size += 2 + 4;
      }
      if (FixCTVol != 0F) {
        size += 2 + 4;
      }
      if (FixPTVol != 0F) {
        size += 2 + 4;
      }
      if (FixCTOpx != 0F) {
        size += 2 + 4;
      }
      if (FixPTOpx != 0F) {
        size += 2 + 4;
      }
      if (PrvStrike != 0F) {
        size += 2 + 4;
      }
      if (PrvTEMove != 0F) {
        size += 2 + 4;
      }
      if (PrvCTVol != 0F) {
        size += 2 + 4;
      }
      if (PrvPTVol != 0F) {
        size += 2 + 4;
      }
      if (PrvCTOpx != 0F) {
        size += 2 + 4;
      }
      if (PrvPTOpx != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TheoSurfacePerf other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Strike != 0F) {
        Strike = other.Strike;
      }
      if (other.TEMove != 0F) {
        TEMove = other.TEMove;
      }
      if (other.CTVol != 0F) {
        CTVol = other.CTVol;
      }
      if (other.PTVol != 0F) {
        PTVol = other.PTVol;
      }
      if (other.CTOpx != 0F) {
        CTOpx = other.CTOpx;
      }
      if (other.PTOpx != 0F) {
        PTOpx = other.PTOpx;
      }
      if (other.FixCTVol != 0F) {
        FixCTVol = other.FixCTVol;
      }
      if (other.FixPTVol != 0F) {
        FixPTVol = other.FixPTVol;
      }
      if (other.FixCTOpx != 0F) {
        FixCTOpx = other.FixCTOpx;
      }
      if (other.FixPTOpx != 0F) {
        FixPTOpx = other.FixPTOpx;
      }
      if (other.PrvStrike != 0F) {
        PrvStrike = other.PrvStrike;
      }
      if (other.PrvTEMove != 0F) {
        PrvTEMove = other.PrvTEMove;
      }
      if (other.PrvCTVol != 0F) {
        PrvCTVol = other.PrvCTVol;
      }
      if (other.PrvPTVol != 0F) {
        PrvPTVol = other.PrvPTVol;
      }
      if (other.PrvCTOpx != 0F) {
        PrvCTOpx = other.PrvCTOpx;
      }
      if (other.PrvPTOpx != 0F) {
        PrvPTOpx = other.PrvPTOpx;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 877: {
            Strike = input.ReadFloat();
            break;
          }
          case 901: {
            TEMove = input.ReadFloat();
            break;
          }
          case 925: {
            CTVol = input.ReadFloat();
            break;
          }
          case 949: {
            PTVol = input.ReadFloat();
            break;
          }
          case 973: {
            CTOpx = input.ReadFloat();
            break;
          }
          case 997: {
            PTOpx = input.ReadFloat();
            break;
          }
          case 1021: {
            FixCTVol = input.ReadFloat();
            break;
          }
          case 1045: {
            FixPTVol = input.ReadFloat();
            break;
          }
          case 1069: {
            FixCTOpx = input.ReadFloat();
            break;
          }
          case 1093: {
            FixPTOpx = input.ReadFloat();
            break;
          }
          case 1117: {
            PrvStrike = input.ReadFloat();
            break;
          }
          case 1141: {
            PrvTEMove = input.ReadFloat();
            break;
          }
          case 1165: {
            PrvCTVol = input.ReadFloat();
            break;
          }
          case 1189: {
            PrvPTVol = input.ReadFloat();
            break;
          }
          case 1213: {
            PrvCTOpx = input.ReadFloat();
            break;
          }
          case 1237: {
            PrvPTOpx = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TheoSurfacePerf.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 877: {
            Strike = input.ReadFloat();
            break;
          }
          case 901: {
            TEMove = input.ReadFloat();
            break;
          }
          case 925: {
            CTVol = input.ReadFloat();
            break;
          }
          case 949: {
            PTVol = input.ReadFloat();
            break;
          }
          case 973: {
            CTOpx = input.ReadFloat();
            break;
          }
          case 997: {
            PTOpx = input.ReadFloat();
            break;
          }
          case 1021: {
            FixCTVol = input.ReadFloat();
            break;
          }
          case 1045: {
            FixPTVol = input.ReadFloat();
            break;
          }
          case 1069: {
            FixCTOpx = input.ReadFloat();
            break;
          }
          case 1093: {
            FixPTOpx = input.ReadFloat();
            break;
          }
          case 1117: {
            PrvStrike = input.ReadFloat();
            break;
          }
          case 1141: {
            PrvTEMove = input.ReadFloat();
            break;
          }
          case 1165: {
            PrvCTVol = input.ReadFloat();
            break;
          }
          case 1189: {
            PrvPTVol = input.ReadFloat();
            break;
          }
          case 1213: {
            PrvCTOpx = input.ReadFloat();
            break;
          }
          case 1237: {
            PrvPTOpx = input.ReadFloat();
            break;
          }
          case 1258: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TheoSurfacePerf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.TheoSurfacePerf.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          theoModel_ = other.theoModel_;
          clientFirm_ = other.clientFirm_;
          perfSurfType_ = other.perfSurfType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "theo_model" field.</summary>
        public const int TheoModelFieldNumber = 11;
        private string theoModel_ = "";
        /// <summary>
        /// theo model
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string TheoModel {
          get { return theoModel_; }
          set {
            theoModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 12;
        private string clientFirm_ = "";
        /// <summary>
        /// client firm this theo model is associated with (controls visibility)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "perf_surf_type" field.</summary>
        public const int PerfSurfTypeFieldNumber = 13;
        private global::Spiderrock.Protobuf.PerfSurfaceType perfSurfType_ = global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PerfSurfaceType PerfSurfType {
          get { return perfSurfType_; }
          set {
            perfSurfType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (TheoModel != other.TheoModel) return false;
          if (ClientFirm != other.ClientFirm) return false;
          if (PerfSurfType != other.PerfSurfType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (TheoModel.Length != 0) hash ^= TheoModel.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) hash ^= PerfSurfType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (TheoModel.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(ClientFirm);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (TheoModel.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(ClientFirm);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (TheoModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TheoModel);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfSurfType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.TheoModel.Length != 0) {
            TheoModel = other.TheoModel;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.PerfSurfType != global::Spiderrock.Protobuf.PerfSurfaceType.Unspecified) {
            PerfSurfType = other.PerfSurfType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 90: {
                TheoModel = input.ReadString();
                break;
              }
              case 98: {
                ClientFirm = input.ReadString();
                break;
              }
              case 104: {
                PerfSurfType = (global::Spiderrock.Protobuf.PerfSurfaceType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 90: {
                TheoModel = input.ReadString();
                break;
              }
              case 98: {
                ClientFirm = input.ReadString();
                break;
              }
              case 104: {
                PerfSurfType = (global::Spiderrock.Protobuf.PerfSurfaceType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
