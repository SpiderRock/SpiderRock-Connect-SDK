// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptAnalytics/LiveRevConQuote.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptAnalytics/LiveRevConQuote.proto</summary>
  public static partial class LiveRevConQuoteReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptAnalytics/LiveRevConQuote.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveRevConQuoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9PcHRBbmFseXRpY3MvTGl2ZVJldkNvblF1b3RlLnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byL6BgoPTGl2ZVJl",
            "dkNvblF1b3RlEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NZXNzYWdlTWV0YWRhdGESNwoEcGtleRgCIAEoCzIpLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuTGl2ZVJldkNvblF1b3RlLlBLZXkSLgoGdGlja2VyGGQgASgL",
            "Mh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDgoGeF9heGlzGGUg",
            "ASgCEgwKBGNfZGUYZiABKAISDAoEcF9kZRhnIAEoAhINCgV1X3ByYxhoIAEo",
            "ARIPCgdhdG1fdm9sGGkgASgCEg0KBXllYXJzGGogASgCEhMKC2dsb2JhbF9y",
            "YXRlGGsgASgCEgwKBGRkaXYYbCABKAISDwoHZGRpdl9wdhhtIAEoAhI0Cgtk",
            "ZGl2X3NvdXJjZRhuIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRERpdlNv",
            "dXJjZRIOCgZpX2RheXMYbyABKAUSEgoJZGRpdl9kaXNjGIIBIAEoAhIRCglz",
            "dHJpa2VfcHYYcCABKAISEQoJZmFpcl9zVm9sGHEgASgCEhEKCWZhaXJfc0Rp",
            "dhhyIAEoAhIVCg1mYWlyX2NhbGxfcHJjGHMgASgCEhcKD2ZhaXJfY2FsbF9w",
            "cmNfZRh0IAEoAhIUCgxmYWlyX3B1dF9wcmMYdSABKAISFgoOZmFpcl9wdXRf",
            "cHJjX2UYdiABKAISEwoLcmNfZmFpcl9wcmMYdyABKAISEwoLcmNfZUV4X3By",
            "ZW0YeCABKAISFAoMZmFpcl9sb2FuX3B2GHkgASgCEhYKDmZhaXJfbG9hbl9y",
            "YXRlGHogASgCEhIKCnJjX2JpZF9wcmMYeyABKAISEgoKcmNfYXNrX3ByYxh8",
            "IAEoAhISCgpjYWxjX2Vycm9yGH0gASgJEg0KBWNwX29JGH4gASgFEg4KBmNw",
            "X3ZsbRh/IAEoBRIuCgl0aW1lc3RhbXAYgAEgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBpmCgRQS2V5EiwKBG9rZXkYCiABKAsyHi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk9wdGlvbktleRIwCgp0cmFkZV9kYXRlGAsgASgLMhwu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveRevConQuote), global::Spiderrock.Protobuf.LiveRevConQuote.Parser, new[]{ "Meta", "Pkey", "Ticker", "XAxis", "CDe", "PDe", "UPrc", "AtmVol", "Years", "GlobalRate", "Ddiv", "DdivPv", "DdivSource", "IDays", "DdivDisc", "StrikePv", "FairSVol", "FairSDiv", "FairCallPrc", "FairCallPrcE", "FairPutPrc", "FairPutPrcE", "RcFairPrc", "RcEExPrem", "FairLoanPv", "FairLoanRate", "RcBidPrc", "RcAskPrc", "CalcError", "CpOI", "CpVlm", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey), global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey.Parser, new[]{ "Okey", "TradeDate" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LiveRevConQuote : pb::IMessage<LiveRevConQuote>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveRevConQuote> _parser = new pb::MessageParser<LiveRevConQuote>(() => new LiveRevConQuote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveRevConQuote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveRevConQuoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveRevConQuote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveRevConQuote(LiveRevConQuote other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      xAxis_ = other.xAxis_;
      cDe_ = other.cDe_;
      pDe_ = other.pDe_;
      uPrc_ = other.uPrc_;
      atmVol_ = other.atmVol_;
      years_ = other.years_;
      globalRate_ = other.globalRate_;
      ddiv_ = other.ddiv_;
      ddivPv_ = other.ddivPv_;
      ddivSource_ = other.ddivSource_;
      iDays_ = other.iDays_;
      ddivDisc_ = other.ddivDisc_;
      strikePv_ = other.strikePv_;
      fairSVol_ = other.fairSVol_;
      fairSDiv_ = other.fairSDiv_;
      fairCallPrc_ = other.fairCallPrc_;
      fairCallPrcE_ = other.fairCallPrcE_;
      fairPutPrc_ = other.fairPutPrc_;
      fairPutPrcE_ = other.fairPutPrcE_;
      rcFairPrc_ = other.rcFairPrc_;
      rcEExPrem_ = other.rcEExPrem_;
      fairLoanPv_ = other.fairLoanPv_;
      fairLoanRate_ = other.fairLoanRate_;
      rcBidPrc_ = other.rcBidPrc_;
      rcAskPrc_ = other.rcAskPrc_;
      calcError_ = other.calcError_;
      cpOI_ = other.cpOI_;
      cpVlm_ = other.cpVlm_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveRevConQuote Clone() {
      return new LiveRevConQuote(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SR Ticker (Product Group)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 101;
    private float xAxis_;
    /// <summary>
    /// xAxis = Moneyness
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "c_de" field.</summary>
    public const int CDeFieldNumber = 102;
    private float cDe_;
    /// <summary>
    /// call delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CDe {
      get { return cDe_; }
      set {
        cDe_ = value;
      }
    }

    /// <summary>Field number for the "p_de" field.</summary>
    public const int PDeFieldNumber = 103;
    private float pDe_;
    /// <summary>
    /// put delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PDe {
      get { return pDe_; }
      set {
        pDe_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 104;
    private double uPrc_;
    /// <summary>
    /// live underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 105;
    private float atmVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 106;
    private float years_;
    /// <summary>
    /// number of volatility years to exiry date (volatility time metric)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "global_rate" field.</summary>
    public const int GlobalRateFieldNumber = 107;
    private float globalRate_;
    /// <summary>
    /// global rate (average discount rate) to expiry date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GlobalRate {
      get { return globalRate_; }
      set {
        globalRate_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 108;
    private float ddiv_;
    /// <summary>
    /// sum of estimated discrete dividend stream to expiry date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 109;
    private float ddivPv_;
    /// <summary>
    /// present value of estimated discrete dividend stream to expiry date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_source" field.</summary>
    public const int DdivSourceFieldNumber = 110;
    private global::Spiderrock.Protobuf.DDivSource ddivSource_ = global::Spiderrock.Protobuf.DDivSource.Unspecified;
    /// <summary>
    /// present value of estimated discrete dividend stream to expiry date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DDivSource DdivSource {
      get { return ddivSource_; }
      set {
        ddivSource_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 111;
    private int iDays_;
    /// <summary>
    /// number of interest (calendar) days to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_disc" field.</summary>
    public const int DdivDiscFieldNumber = 130;
    private float ddivDisc_;
    /// <summary>
    /// dividend discount factor: SUM(div * iDays / 365.0 - divYrs) due to dividends being paid (thereby lowering the uPrc basis) prior to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivDisc {
      get { return ddivDisc_; }
      set {
        ddivDisc_ = value;
      }
    }

    /// <summary>Field number for the "strike_pv" field.</summary>
    public const int StrikePvFieldNumber = 112;
    private float strikePv_;
    /// <summary>
    /// strike * EXP(-globalRate * iDays / 365)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StrikePv {
      get { return strikePv_; }
      set {
        strikePv_ = value;
      }
    }

    /// <summary>Field number for the "fair_sVol" field.</summary>
    public const int FairSVolFieldNumber = 113;
    private float fairSVol_;
    /// <summary>
    /// call/put surface volatility value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairSVol {
      get { return fairSVol_; }
      set {
        fairSVol_ = value;
      }
    }

    /// <summary>Field number for the "fair_sDiv" field.</summary>
    public const int FairSDivFieldNumber = 114;
    private float fairSDiv_;
    /// <summary>
    /// call/put surface alignment sdiv value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairSDiv {
      get { return fairSDiv_; }
      set {
        fairSDiv_ = value;
      }
    }

    /// <summary>Field number for the "fair_call_prc" field.</summary>
    public const int FairCallPrcFieldNumber = 115;
    private float fairCallPrc_;
    /// <summary>
    /// fairPrice = PRICE.AMERICAN(uPrc, years, fairVol, fairSDiv, globalRate, {ddivStream})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairCallPrc {
      get { return fairCallPrc_; }
      set {
        fairCallPrc_ = value;
      }
    }

    /// <summary>Field number for the "fair_call_prc_e" field.</summary>
    public const int FairCallPrcEFieldNumber = 116;
    private float fairCallPrcE_;
    /// <summary>
    /// fairPrice = PRICE.EUROPEAN(uPrc, years, fairVol, fairSDiv, globalRate, {ddivStream})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairCallPrcE {
      get { return fairCallPrcE_; }
      set {
        fairCallPrcE_ = value;
      }
    }

    /// <summary>Field number for the "fair_put_prc" field.</summary>
    public const int FairPutPrcFieldNumber = 117;
    private float fairPutPrc_;
    /// <summary>
    /// fairPrice = PRICE.AMERICAN(uPrc, years, fairVol, fairSDiv, globalRate, {ddivStream})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairPutPrc {
      get { return fairPutPrc_; }
      set {
        fairPutPrc_ = value;
      }
    }

    /// <summary>Field number for the "fair_put_prc_e" field.</summary>
    public const int FairPutPrcEFieldNumber = 118;
    private float fairPutPrcE_;
    /// <summary>
    /// fairPrice = PRICE.EUROPEAN(uPrc, years, fairVol, fairSDiv, globalRate, {ddivStream})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairPutPrcE {
      get { return fairPutPrcE_; }
      set {
        fairPutPrcE_ = value;
      }
    }

    /// <summary>Field number for the "rc_fair_prc" field.</summary>
    public const int RcFairPrcFieldNumber = 119;
    private float rcFairPrc_;
    /// <summary>
    /// fairCallPrc - fairPutPrc - uPrc + strike  (revCon fairMid price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RcFairPrc {
      get { return rcFairPrc_; }
      set {
        rcFairPrc_ = value;
      }
    }

    /// <summary>Field number for the "rc_eEx_prem" field.</summary>
    public const int RcEExPremFieldNumber = 120;
    private float rcEExPrem_;
    /// <summary>
    /// (fairPutPrc - fairPutPrcE) - (fairCallPrc - fairCallPrcE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RcEExPrem {
      get { return rcEExPrem_; }
      set {
        rcEExPrem_ = value;
      }
    }

    /// <summary>Field number for the "fair_loan_pv" field.</summary>
    public const int FairLoanPvFieldNumber = 121;
    private float fairLoanPv_;
    /// <summary>
    /// fairCallPrc - fairPutPrc - uPrc + strike + strikePv + ddivPv  (total present value of letting out shares) (term to expiry) (per share)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairLoanPv {
      get { return fairLoanPv_; }
      set {
        fairLoanPv_ = value;
      }
    }

    /// <summary>Field number for the "fair_loan_rate" field.</summary>
    public const int FairLoanRateFieldNumber = 122;
    private float fairLoanRate_;
    /// <summary>
    /// fairLoanPv / (uPrc * iDays / 365.0 - ddivDisc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FairLoanRate {
      get { return fairLoanRate_; }
      set {
        fairLoanRate_ = value;
      }
    }

    /// <summary>Field number for the "rc_bid_prc" field.</summary>
    public const int RcBidPrcFieldNumber = 123;
    private float rcBidPrc_;
    /// <summary>
    /// callBid - putAsk - uPrc + strike (best way) (join markets)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RcBidPrc {
      get { return rcBidPrc_; }
      set {
        rcBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "rc_ask_prc" field.</summary>
    public const int RcAskPrcFieldNumber = 124;
    private float rcAskPrc_;
    /// <summary>
    /// callAsk - putBid - uPrc + strike (worst way) (cross markets)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RcAskPrc {
      get { return rcAskPrc_; }
      set {
        rcAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "calc_error" field.</summary>
    public const int CalcErrorFieldNumber = 125;
    private string calcError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CalcError {
      get { return calcError_; }
      set {
        calcError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cp_oI" field.</summary>
    public const int CpOIFieldNumber = 126;
    private int cpOI_;
    /// <summary>
    /// c/p open interest (market) [upper bound]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CpOI {
      get { return cpOI_; }
      set {
        cpOI_ = value;
      }
    }

    /// <summary>Field number for the "cp_vlm" field.</summary>
    public const int CpVlmFieldNumber = 127;
    private int cpVlm_;
    /// <summary>
    /// c/p print volume (this exchange) [upper bound]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CpVlm {
      get { return cpVlm_; }
      set {
        cpVlm_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 128;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// last update time (Date)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveRevConQuote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveRevConQuote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CDe, other.CDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PDe, other.PDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GlobalRate, other.GlobalRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (DdivSource != other.DdivSource) return false;
      if (IDays != other.IDays) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivDisc, other.DdivDisc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrikePv, other.StrikePv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairSVol, other.FairSVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairSDiv, other.FairSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairCallPrc, other.FairCallPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairCallPrcE, other.FairCallPrcE)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairPutPrc, other.FairPutPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairPutPrcE, other.FairPutPrcE)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RcFairPrc, other.RcFairPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RcEExPrem, other.RcEExPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairLoanPv, other.FairLoanPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FairLoanRate, other.FairLoanRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RcBidPrc, other.RcBidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RcAskPrc, other.RcAskPrc)) return false;
      if (CalcError != other.CalcError) return false;
      if (CpOI != other.CpOI) return false;
      if (CpVlm != other.CpVlm) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
      if (CDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CDe);
      if (PDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PDe);
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (GlobalRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GlobalRate);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) hash ^= DdivSource.GetHashCode();
      if (IDays != 0) hash ^= IDays.GetHashCode();
      if (DdivDisc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivDisc);
      if (StrikePv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrikePv);
      if (FairSVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairSVol);
      if (FairSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairSDiv);
      if (FairCallPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairCallPrc);
      if (FairCallPrcE != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairCallPrcE);
      if (FairPutPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairPutPrc);
      if (FairPutPrcE != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairPutPrcE);
      if (RcFairPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RcFairPrc);
      if (RcEExPrem != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RcEExPrem);
      if (FairLoanPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairLoanPv);
      if (FairLoanRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FairLoanRate);
      if (RcBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RcBidPrc);
      if (RcAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RcAskPrc);
      if (CalcError.Length != 0) hash ^= CalcError.GetHashCode();
      if (CpOI != 0) hash ^= CpOI.GetHashCode();
      if (CpVlm != 0) hash ^= CpVlm.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(XAxis);
      }
      if (CDe != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(CDe);
      }
      if (PDe != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(PDe);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(UPrc);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(AtmVol);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (GlobalRate != 0F) {
        output.WriteRawTag(221, 6);
        output.WriteFloat(GlobalRate);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(229, 6);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) DdivSource);
      }
      if (IDays != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(IDays);
      }
      if (StrikePv != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(StrikePv);
      }
      if (FairSVol != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(FairSVol);
      }
      if (FairSDiv != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(FairSDiv);
      }
      if (FairCallPrc != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(FairCallPrc);
      }
      if (FairCallPrcE != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(FairCallPrcE);
      }
      if (FairPutPrc != 0F) {
        output.WriteRawTag(173, 7);
        output.WriteFloat(FairPutPrc);
      }
      if (FairPutPrcE != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(FairPutPrcE);
      }
      if (RcFairPrc != 0F) {
        output.WriteRawTag(189, 7);
        output.WriteFloat(RcFairPrc);
      }
      if (RcEExPrem != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(RcEExPrem);
      }
      if (FairLoanPv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(FairLoanPv);
      }
      if (FairLoanRate != 0F) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(FairLoanRate);
      }
      if (RcBidPrc != 0F) {
        output.WriteRawTag(221, 7);
        output.WriteFloat(RcBidPrc);
      }
      if (RcAskPrc != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(RcAskPrc);
      }
      if (CalcError.Length != 0) {
        output.WriteRawTag(234, 7);
        output.WriteString(CalcError);
      }
      if (CpOI != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(CpOI);
      }
      if (CpVlm != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(CpVlm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(Timestamp);
      }
      if (DdivDisc != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(DdivDisc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(XAxis);
      }
      if (CDe != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(CDe);
      }
      if (PDe != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(PDe);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(UPrc);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(AtmVol);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (GlobalRate != 0F) {
        output.WriteRawTag(221, 6);
        output.WriteFloat(GlobalRate);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(229, 6);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) DdivSource);
      }
      if (IDays != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(IDays);
      }
      if (StrikePv != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(StrikePv);
      }
      if (FairSVol != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(FairSVol);
      }
      if (FairSDiv != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(FairSDiv);
      }
      if (FairCallPrc != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(FairCallPrc);
      }
      if (FairCallPrcE != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(FairCallPrcE);
      }
      if (FairPutPrc != 0F) {
        output.WriteRawTag(173, 7);
        output.WriteFloat(FairPutPrc);
      }
      if (FairPutPrcE != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(FairPutPrcE);
      }
      if (RcFairPrc != 0F) {
        output.WriteRawTag(189, 7);
        output.WriteFloat(RcFairPrc);
      }
      if (RcEExPrem != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(RcEExPrem);
      }
      if (FairLoanPv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(FairLoanPv);
      }
      if (FairLoanRate != 0F) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(FairLoanRate);
      }
      if (RcBidPrc != 0F) {
        output.WriteRawTag(221, 7);
        output.WriteFloat(RcBidPrc);
      }
      if (RcAskPrc != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(RcAskPrc);
      }
      if (CalcError.Length != 0) {
        output.WriteRawTag(234, 7);
        output.WriteString(CalcError);
      }
      if (CpOI != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(CpOI);
      }
      if (CpVlm != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(CpVlm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(Timestamp);
      }
      if (DdivDisc != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(DdivDisc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (XAxis != 0F) {
        size += 2 + 4;
      }
      if (CDe != 0F) {
        size += 2 + 4;
      }
      if (PDe != 0F) {
        size += 2 + 4;
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (GlobalRate != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (DdivPv != 0F) {
        size += 2 + 4;
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DdivSource);
      }
      if (IDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IDays);
      }
      if (DdivDisc != 0F) {
        size += 2 + 4;
      }
      if (StrikePv != 0F) {
        size += 2 + 4;
      }
      if (FairSVol != 0F) {
        size += 2 + 4;
      }
      if (FairSDiv != 0F) {
        size += 2 + 4;
      }
      if (FairCallPrc != 0F) {
        size += 2 + 4;
      }
      if (FairCallPrcE != 0F) {
        size += 2 + 4;
      }
      if (FairPutPrc != 0F) {
        size += 2 + 4;
      }
      if (FairPutPrcE != 0F) {
        size += 2 + 4;
      }
      if (RcFairPrc != 0F) {
        size += 2 + 4;
      }
      if (RcEExPrem != 0F) {
        size += 2 + 4;
      }
      if (FairLoanPv != 0F) {
        size += 2 + 4;
      }
      if (FairLoanRate != 0F) {
        size += 2 + 4;
      }
      if (RcBidPrc != 0F) {
        size += 2 + 4;
      }
      if (RcAskPrc != 0F) {
        size += 2 + 4;
      }
      if (CalcError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalcError);
      }
      if (CpOI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CpOI);
      }
      if (CpVlm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CpVlm);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveRevConQuote other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.XAxis != 0F) {
        XAxis = other.XAxis;
      }
      if (other.CDe != 0F) {
        CDe = other.CDe;
      }
      if (other.PDe != 0F) {
        PDe = other.PDe;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.GlobalRate != 0F) {
        GlobalRate = other.GlobalRate;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.DdivPv != 0F) {
        DdivPv = other.DdivPv;
      }
      if (other.DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        DdivSource = other.DdivSource;
      }
      if (other.IDays != 0) {
        IDays = other.IDays;
      }
      if (other.DdivDisc != 0F) {
        DdivDisc = other.DdivDisc;
      }
      if (other.StrikePv != 0F) {
        StrikePv = other.StrikePv;
      }
      if (other.FairSVol != 0F) {
        FairSVol = other.FairSVol;
      }
      if (other.FairSDiv != 0F) {
        FairSDiv = other.FairSDiv;
      }
      if (other.FairCallPrc != 0F) {
        FairCallPrc = other.FairCallPrc;
      }
      if (other.FairCallPrcE != 0F) {
        FairCallPrcE = other.FairCallPrcE;
      }
      if (other.FairPutPrc != 0F) {
        FairPutPrc = other.FairPutPrc;
      }
      if (other.FairPutPrcE != 0F) {
        FairPutPrcE = other.FairPutPrcE;
      }
      if (other.RcFairPrc != 0F) {
        RcFairPrc = other.RcFairPrc;
      }
      if (other.RcEExPrem != 0F) {
        RcEExPrem = other.RcEExPrem;
      }
      if (other.FairLoanPv != 0F) {
        FairLoanPv = other.FairLoanPv;
      }
      if (other.FairLoanRate != 0F) {
        FairLoanRate = other.FairLoanRate;
      }
      if (other.RcBidPrc != 0F) {
        RcBidPrc = other.RcBidPrc;
      }
      if (other.RcAskPrc != 0F) {
        RcAskPrc = other.RcAskPrc;
      }
      if (other.CalcError.Length != 0) {
        CalcError = other.CalcError;
      }
      if (other.CpOI != 0) {
        CpOI = other.CpOI;
      }
      if (other.CpVlm != 0) {
        CpVlm = other.CpVlm;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 813: {
            XAxis = input.ReadFloat();
            break;
          }
          case 821: {
            CDe = input.ReadFloat();
            break;
          }
          case 829: {
            PDe = input.ReadFloat();
            break;
          }
          case 833: {
            UPrc = input.ReadDouble();
            break;
          }
          case 845: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 861: {
            GlobalRate = input.ReadFloat();
            break;
          }
          case 869: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 877: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 880: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 888: {
            IDays = input.ReadInt32();
            break;
          }
          case 901: {
            StrikePv = input.ReadFloat();
            break;
          }
          case 909: {
            FairSVol = input.ReadFloat();
            break;
          }
          case 917: {
            FairSDiv = input.ReadFloat();
            break;
          }
          case 925: {
            FairCallPrc = input.ReadFloat();
            break;
          }
          case 933: {
            FairCallPrcE = input.ReadFloat();
            break;
          }
          case 941: {
            FairPutPrc = input.ReadFloat();
            break;
          }
          case 949: {
            FairPutPrcE = input.ReadFloat();
            break;
          }
          case 957: {
            RcFairPrc = input.ReadFloat();
            break;
          }
          case 965: {
            RcEExPrem = input.ReadFloat();
            break;
          }
          case 973: {
            FairLoanPv = input.ReadFloat();
            break;
          }
          case 981: {
            FairLoanRate = input.ReadFloat();
            break;
          }
          case 989: {
            RcBidPrc = input.ReadFloat();
            break;
          }
          case 997: {
            RcAskPrc = input.ReadFloat();
            break;
          }
          case 1002: {
            CalcError = input.ReadString();
            break;
          }
          case 1008: {
            CpOI = input.ReadInt32();
            break;
          }
          case 1016: {
            CpVlm = input.ReadInt32();
            break;
          }
          case 1026: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1045: {
            DdivDisc = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveRevConQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 813: {
            XAxis = input.ReadFloat();
            break;
          }
          case 821: {
            CDe = input.ReadFloat();
            break;
          }
          case 829: {
            PDe = input.ReadFloat();
            break;
          }
          case 833: {
            UPrc = input.ReadDouble();
            break;
          }
          case 845: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 861: {
            GlobalRate = input.ReadFloat();
            break;
          }
          case 869: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 877: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 880: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 888: {
            IDays = input.ReadInt32();
            break;
          }
          case 901: {
            StrikePv = input.ReadFloat();
            break;
          }
          case 909: {
            FairSVol = input.ReadFloat();
            break;
          }
          case 917: {
            FairSDiv = input.ReadFloat();
            break;
          }
          case 925: {
            FairCallPrc = input.ReadFloat();
            break;
          }
          case 933: {
            FairCallPrcE = input.ReadFloat();
            break;
          }
          case 941: {
            FairPutPrc = input.ReadFloat();
            break;
          }
          case 949: {
            FairPutPrcE = input.ReadFloat();
            break;
          }
          case 957: {
            RcFairPrc = input.ReadFloat();
            break;
          }
          case 965: {
            RcEExPrem = input.ReadFloat();
            break;
          }
          case 973: {
            FairLoanPv = input.ReadFloat();
            break;
          }
          case 981: {
            FairLoanRate = input.ReadFloat();
            break;
          }
          case 989: {
            RcBidPrc = input.ReadFloat();
            break;
          }
          case 997: {
            RcAskPrc = input.ReadFloat();
            break;
          }
          case 1002: {
            CalcError = input.ReadString();
            break;
          }
          case 1008: {
            CpOI = input.ReadInt32();
            break;
          }
          case 1016: {
            CpVlm = input.ReadInt32();
            break;
          }
          case 1026: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1045: {
            DdivDisc = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveRevConQuote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveRevConQuote.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        /// <summary>
        /// cp = Both
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 11;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(TradeDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(TradeDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 90: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 90: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
