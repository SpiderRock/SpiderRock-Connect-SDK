// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptAnalytics/OptionPrintSet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptAnalytics/OptionPrintSet.proto</summary>
  public static partial class OptionPrintSetReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptAnalytics/OptionPrintSet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionPrintSetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipQcm90b2J1Zi9PcHRBbmFseXRpY3MvT3B0aW9uUHJpbnRTZXQucHJvdG8S",
            "E3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnByb3Rv",
            "Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIr4TCg5PcHRpb25Q",
            "cmludFNldBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "TWVzc2FnZU1ldGFkYXRhEjYKBHBrZXkYAiABKAsyKC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk9wdGlvblByaW50U2V0LlBLZXkSLAoEZmtleRhkIAEoCzIeLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5Ei4KBnRpY2tlchhnIAEoCzIe",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5Ei4KCHBydF9leGNoGGog",
            "ASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5PcHRFeGNoEhAKCHBydF9zaXpl",
            "GG0gASgFEhEKCXBydF9wcmljZRhwIAEoAhIuCghwcnRfdHlwZRhzIAEoDjIc",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuUHJ0VHlwZRISCgpwcnRfb3JkZXJzGHYg",
            "ASgNEhcKD3BydF9jbHVzdGVyX251bRh5IAEoBRIYChBwcnRfY2x1c3Rlcl9z",
            "aXplGHwgASgFEhIKCnBydF92b2x1bWUYfyABKAUSEwoKY3hsX3ZvbHVtZRiC",
            "ASABKAUSEgoJYmlkX2NvdW50GIUBIAEoDRISCglhc2tfY291bnQYiAEgASgN",
            "EhMKCmJpZF92b2x1bWUYiwEgASgFEhMKCmFza192b2x1bWUYjgEgASgFEg0K",
            "BGViaWQYkQEgASgCEg0KBGVhc2sYlAEgASgCEg0KBGVic3oYlwEgASgFEg0K",
            "BGVhc3oYmgEgASgFEg0KBGVhZ2UYnQEgASgCEi8KCHBydF9zaWRlGKABIAEo",
            "DjIcLnNwaWRlcnJvY2sucHJvdG9idWYuUHJ0U2lkZRIWCg1wcnRfdGltZXN0",
            "YW1wGKMBIAEoAxIWCg1uZXRfdGltZXN0YW1wGKYBIAEoAxIuCgl0aW1lc3Rh",
            "bXAYqQEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIOCgVvX2Jp",
            "ZBisASABKAISDgoFb19hc2sYrwEgASgCEhEKCG9fYmlkX3N6GLIBIAEoBRIR",
            "CghvX2Fza19zehi1ASABKAUSLwoIb19iaWRfZXgYuAEgASgOMhwuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5PcHRFeGNoEi8KCG9fYXNrX2V4GLsBIAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuT3B0RXhjaBIUCgtvX2JpZF9leF9zehi+ASAB",
            "KAUSFAoLb19hc2tfZXhfc3oYwQEgASgFEhIKCW9fYmlkX2NudBjEASABKAUS",
            "EgoJb19hc2tfY250GMcBIAEoBRIPCgZvX2JpZDIYygEgASgCEg8KBm9fYXNr",
            "MhjNASABKAISEgoJb19iaWRfc3oyGNABIAEoBRISCglvX2Fza19zejIY0wEg",
            "ASgFEhEKCG9fYmlkX2l2GOECIAEoARIRCghvX2Fza19pdhjiAiABKAESDgoF",
            "dV9iaWQY1gEgASgBEg4KBXVfYXNrGNkBIAEoARIOCgV1X3ByYxjcASABKAES",
            "DAoDeXJzGN8BIAEoAhINCgRyYXRlGOIBIAEoAhINCgRzZGl2GOUBIAEoAhIN",
            "CgRkZGl2GOgBIAEoAhINCgR4X2RlGOsBIAEoAhIPCgZ4X2F4aXMY7gEgASgC",
            "EjQKCm11bHRpaGVkZ2UY8QEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "dWx0aWhlZGdlEjEKCWZsZXhfdHlwZRj0ASABKA4yHS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkZsZXhUeXBlEhIKCWZsZXhfcm9vdBj3ASABKAkSDwoGcHJ0X2l2",
            "GPoBIAEoAhIPCgZwcnRfZGUY/QEgASgCEg8KBnBydF9nYRiAAiABKAISDwoG",
            "cHJ0X3RoGIMCIAEoAhIPCgZwcnRfdmUYhgIgASgCEg8KBnBydF9ybxiJAiAB",
            "KAISEQoIY2FsY19lcnIYjAIgASgJEhEKCHN1cmZfdm9sGI8CIAEoAhIRCghz",
            "dXJmX29weBiSAiABKAISEQoIc3VyZl9hdG0YlQIgASgCEhgKD3BydF9wcm9i",
            "YWJpbGl0eRiYAiABKAISGwoScHJ0X3Byb2JhYmlsaXR5X20yGJsCIAEoAhIb",
            "ChJwcnRfcHJvYmFiaWxpdHlfbTMYngIgASgCEhEKCG9fYmlkX20xGKECIAEo",
            "AhIRCghvX2Fza19tMRikAiABKAISEQoIdV9iaWRfbTEYpwIgASgBEhEKCHVf",
            "YXNrX20xGKoCIAEoARIRCgh1X3ByY19tMRitAiABKAESEQoIc192b2xfbTEY",
            "sAIgASgCEhEKCHNfb3B4X20xGLMCIAEoAhIRCghzX2Rpdl9tMRi2AiABKAIS",
            "EQoIc19lcnJfbTEYuQIgASgJEg8KBnBubF9tMRi8AiABKAISLwoKcG5sX20x",
            "X2Vychi/AiABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEhIKCW9f",
            "YmlkX20xMBjCAiABKAISEgoJb19hc2tfbTEwGMUCIAEoAhISCgl1X2JpZF9t",
            "MTAYyAIgASgBEhIKCXVfYXNrX20xMBjLAiABKAESEgoJdV9wcmNfbTEwGM4C",
            "IAEoARISCglzX3ZvbF9tMTAY0QIgASgCEhIKCXNfb3B4X20xMBjUAiABKAIS",
            "EgoJc19kaXZfbTEwGNcCIAEoAhISCglzX2Vycl9tMTAY2gIgASgJEhAKB3Bu",
            "bF9tMTAY3QIgASgCEjAKC3BubF9tMTBfZXJyGOACIAEoDjIaLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuWWVzTm8SEQoIb19iaWRfczEY4wIgASgCEhEKCG9fYXNr",
            "X3MxGOQCIAEoAhIRCgh1X2JpZF9zMRjlAiABKAESEQoIdV9hc2tfczEY5gIg",
            "ASgBEhEKCHVfcHJjX3MxGOcCIAEoARIRCghzX3ZvbF9zMRjoAiABKAISEQoI",
            "c19vcHhfczEY6QIgASgCEhEKCHNfZGl2X3MxGOoCIAEoAhIRCghzX2Vycl9z",
            "MRjrAiABKAkSDwoGcG5sX3MxGOwCIAEoAhIvCgpwbmxfczFfZXJyGO0CIAEo",
            "DjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SEwoKb19iaWRfbmV4dBju",
            "AiABKAISEwoKb19hc2tfbmV4dBjvAiABKAIaSAoEUEtleRIsCgRva2V5GAog",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSEgoKcHJ0X251",
            "bWJlchgLIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionPrintSet), global::Spiderrock.Protobuf.OptionPrintSet.Parser, new[]{ "Meta", "Pkey", "Fkey", "Ticker", "PrtExch", "PrtSize", "PrtPrice", "PrtType", "PrtOrders", "PrtClusterNum", "PrtClusterSize", "PrtVolume", "CxlVolume", "BidCount", "AskCount", "BidVolume", "AskVolume", "Ebid", "Eask", "Ebsz", "Easz", "Eage", "PrtSide", "PrtTimestamp", "NetTimestamp", "Timestamp", "OBid", "OAsk", "OBidSz", "OAskSz", "OBidEx", "OAskEx", "OBidExSz", "OAskExSz", "OBidCnt", "OAskCnt", "OBid2", "OAsk2", "OBidSz2", "OAskSz2", "OBidIv", "OAskIv", "UBid", "UAsk", "UPrc", "Yrs", "Rate", "Sdiv", "Ddiv", "XDe", "XAxis", "Multihedge", "FlexType", "FlexRoot", "PrtIv", "PrtDe", "PrtGa", "PrtTh", "PrtVe", "PrtRo", "CalcErr", "SurfVol", "SurfOpx", "SurfAtm", "PrtProbability", "PrtProbabilityM2", "PrtProbabilityM3", "OBidM1", "OAskM1", "UBidM1", "UAskM1", "UPrcM1", "SVolM1", "SOpxM1", "SDivM1", "SErrM1", "PnlM1", "PnlM1Err", "OBidM10", "OAskM10", "UBidM10", "UAskM10", "UPrcM10", "SVolM10", "SOpxM10", "SDivM10", "SErrM10", "PnlM10", "PnlM10Err", "OBidS1", "OAskS1", "UBidS1", "UAskS1", "UPrcS1", "SVolS1", "SOpxS1", "SDivS1", "SErrS1", "PnlS1", "PnlS1Err", "OBidNext", "OAskNext" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey), global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey.Parser, new[]{ "Okey", "PrtNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///OptionPrintSet records contain every option print along with quote, surface, and SR probability details at print time.  These records also contain T+1M and T+10M forward mark details.   These records are created for every print at the time of print and are published to the SpiderRock elastic cluster 10 minutes later when T + 10M forward marks are available.
  /// </summary>
  public sealed partial class OptionPrintSet : pb::IMessage<OptionPrintSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionPrintSet> _parser = new pb::MessageParser<OptionPrintSet>(() => new OptionPrintSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionPrintSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.OptionPrintSetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPrintSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPrintSet(OptionPrintSet other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      prtExch_ = other.prtExch_;
      prtSize_ = other.prtSize_;
      prtPrice_ = other.prtPrice_;
      prtType_ = other.prtType_;
      prtOrders_ = other.prtOrders_;
      prtClusterNum_ = other.prtClusterNum_;
      prtClusterSize_ = other.prtClusterSize_;
      prtVolume_ = other.prtVolume_;
      cxlVolume_ = other.cxlVolume_;
      bidCount_ = other.bidCount_;
      askCount_ = other.askCount_;
      bidVolume_ = other.bidVolume_;
      askVolume_ = other.askVolume_;
      ebid_ = other.ebid_;
      eask_ = other.eask_;
      ebsz_ = other.ebsz_;
      easz_ = other.easz_;
      eage_ = other.eage_;
      prtSide_ = other.prtSide_;
      prtTimestamp_ = other.prtTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      oBid_ = other.oBid_;
      oAsk_ = other.oAsk_;
      oBidSz_ = other.oBidSz_;
      oAskSz_ = other.oAskSz_;
      oBidEx_ = other.oBidEx_;
      oAskEx_ = other.oAskEx_;
      oBidExSz_ = other.oBidExSz_;
      oAskExSz_ = other.oAskExSz_;
      oBidCnt_ = other.oBidCnt_;
      oAskCnt_ = other.oAskCnt_;
      oBid2_ = other.oBid2_;
      oAsk2_ = other.oAsk2_;
      oBidSz2_ = other.oBidSz2_;
      oAskSz2_ = other.oAskSz2_;
      oBidIv_ = other.oBidIv_;
      oAskIv_ = other.oAskIv_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      uPrc_ = other.uPrc_;
      yrs_ = other.yrs_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      xDe_ = other.xDe_;
      xAxis_ = other.xAxis_;
      multihedge_ = other.multihedge_;
      flexType_ = other.flexType_;
      flexRoot_ = other.flexRoot_;
      prtIv_ = other.prtIv_;
      prtDe_ = other.prtDe_;
      prtGa_ = other.prtGa_;
      prtTh_ = other.prtTh_;
      prtVe_ = other.prtVe_;
      prtRo_ = other.prtRo_;
      calcErr_ = other.calcErr_;
      surfVol_ = other.surfVol_;
      surfOpx_ = other.surfOpx_;
      surfAtm_ = other.surfAtm_;
      prtProbability_ = other.prtProbability_;
      prtProbabilityM2_ = other.prtProbabilityM2_;
      prtProbabilityM3_ = other.prtProbabilityM3_;
      oBidM1_ = other.oBidM1_;
      oAskM1_ = other.oAskM1_;
      uBidM1_ = other.uBidM1_;
      uAskM1_ = other.uAskM1_;
      uPrcM1_ = other.uPrcM1_;
      sVolM1_ = other.sVolM1_;
      sOpxM1_ = other.sOpxM1_;
      sDivM1_ = other.sDivM1_;
      sErrM1_ = other.sErrM1_;
      pnlM1_ = other.pnlM1_;
      pnlM1Err_ = other.pnlM1Err_;
      oBidM10_ = other.oBidM10_;
      oAskM10_ = other.oAskM10_;
      uBidM10_ = other.uBidM10_;
      uAskM10_ = other.uAskM10_;
      uPrcM10_ = other.uPrcM10_;
      sVolM10_ = other.sVolM10_;
      sOpxM10_ = other.sOpxM10_;
      sDivM10_ = other.sDivM10_;
      sErrM10_ = other.sErrM10_;
      pnlM10_ = other.pnlM10_;
      pnlM10Err_ = other.pnlM10Err_;
      oBidS1_ = other.oBidS1_;
      oAskS1_ = other.oAskS1_;
      uBidS1_ = other.uBidS1_;
      uAskS1_ = other.uAskS1_;
      uPrcS1_ = other.uPrcS1_;
      sVolS1_ = other.sVolS1_;
      sOpxS1_ = other.sOpxS1_;
      sDivS1_ = other.sDivS1_;
      sErrS1_ = other.sErrS1_;
      pnlS1_ = other.pnlS1_;
      pnlS1Err_ = other.pnlS1Err_;
      oBidNext_ = other.oBidNext_;
      oAskNext_ = other.oAskNext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPrintSet Clone() {
      return new OptionPrintSet(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "fkey" field.</summary>
    public const int FkeyFieldNumber = 100;
    private global::Spiderrock.Protobuf.ExpiryKey fkey_;
    /// <summary>
    /// underlying fkey (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey Fkey {
      get { return fkey_; }
      set {
        fkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 103;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "prt_exch" field.</summary>
    public const int PrtExchFieldNumber = 106;
    private global::Spiderrock.Protobuf.OptExch prtExch_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// exchange on which print took place
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch PrtExch {
      get { return prtExch_; }
      set {
        prtExch_ = value;
      }
    }

    /// <summary>Field number for the "prt_size" field.</summary>
    public const int PrtSizeFieldNumber = 109;
    private int prtSize_;
    /// <summary>
    /// print size [contracts]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize {
      get { return prtSize_; }
      set {
        prtSize_ = value;
      }
    }

    /// <summary>Field number for the "prt_price" field.</summary>
    public const int PrtPriceFieldNumber = 112;
    private float prtPrice_;
    /// <summary>
    /// print price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtPrice {
      get { return prtPrice_; }
      set {
        prtPrice_ = value;
      }
    }

    /// <summary>Field number for the "prt_type" field.</summary>
    public const int PrtTypeFieldNumber = 115;
    private global::Spiderrock.Protobuf.PrtType prtType_ = global::Spiderrock.Protobuf.PrtType.Unspecified;
    /// <summary>
    /// print type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtType PrtType {
      get { return prtType_; }
      set {
        prtType_ = value;
      }
    }

    /// <summary>Field number for the "prt_orders" field.</summary>
    public const int PrtOrdersFieldNumber = 118;
    private uint prtOrders_;
    /// <summary>
    /// number of participating orders (future exchanges only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PrtOrders {
      get { return prtOrders_; }
      set {
        prtOrders_ = value;
      }
    }

    /// <summary>Field number for the "prt_cluster_num" field.</summary>
    public const int PrtClusterNumFieldNumber = 121;
    private int prtClusterNum_;
    /// <summary>
    /// incremental print cluster counter (one counter per okey; used to group prints into clusters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtClusterNum {
      get { return prtClusterNum_; }
      set {
        prtClusterNum_ = value;
      }
    }

    /// <summary>Field number for the "prt_cluster_size" field.</summary>
    public const int PrtClusterSizeFieldNumber = 124;
    private int prtClusterSize_;
    /// <summary>
    /// cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtClusterSize {
      get { return prtClusterSize_; }
      set {
        prtClusterSize_ = value;
      }
    }

    /// <summary>Field number for the "prt_volume" field.</summary>
    public const int PrtVolumeFieldNumber = 127;
    private int prtVolume_;
    /// <summary>
    /// day print volume in contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtVolume {
      get { return prtVolume_; }
      set {
        prtVolume_ = value;
      }
    }

    /// <summary>Field number for the "cxl_volume" field.</summary>
    public const int CxlVolumeFieldNumber = 130;
    private int cxlVolume_;
    /// <summary>
    /// day print/cancel volume (num of contracts printed and then cancelled)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CxlVolume {
      get { return cxlVolume_; }
      set {
        cxlVolume_ = value;
      }
    }

    /// <summary>Field number for the "bid_count" field.</summary>
    public const int BidCountFieldNumber = 133;
    private uint bidCount_;
    /// <summary>
    /// number of bid prints
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidCount {
      get { return bidCount_; }
      set {
        bidCount_ = value;
      }
    }

    /// <summary>Field number for the "ask_count" field.</summary>
    public const int AskCountFieldNumber = 136;
    private uint askCount_;
    /// <summary>
    /// number of ask prints
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskCount {
      get { return askCount_; }
      set {
        askCount_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume" field.</summary>
    public const int BidVolumeFieldNumber = 139;
    private int bidVolume_;
    /// <summary>
    /// bid print volume in contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "ask_volume" field.</summary>
    public const int AskVolumeFieldNumber = 142;
    private int askVolume_;
    /// <summary>
    /// ask print volume in contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "ebid" field.</summary>
    public const int EbidFieldNumber = 145;
    private float ebid_;
    /// <summary>
    /// exchange bid (@ print time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ebid {
      get { return ebid_; }
      set {
        ebid_ = value;
      }
    }

    /// <summary>Field number for the "eask" field.</summary>
    public const int EaskFieldNumber = 148;
    private float eask_;
    /// <summary>
    /// exchange ask (@ print time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Eask {
      get { return eask_; }
      set {
        eask_ = value;
      }
    }

    /// <summary>Field number for the "ebsz" field.</summary>
    public const int EbszFieldNumber = 151;
    private int ebsz_;
    /// <summary>
    /// exchange bid size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ebsz {
      get { return ebsz_; }
      set {
        ebsz_ = value;
      }
    }

    /// <summary>Field number for the "easz" field.</summary>
    public const int EaszFieldNumber = 154;
    private int easz_;
    /// <summary>
    /// exchange ask size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Easz {
      get { return easz_; }
      set {
        easz_ = value;
      }
    }

    /// <summary>Field number for the "eage" field.</summary>
    public const int EageFieldNumber = 157;
    private float eage_;
    /// <summary>
    /// age of prevailing quote at time of print
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Eage {
      get { return eage_; }
      set {
        eage_ = value;
      }
    }

    /// <summary>Field number for the "prt_side" field.</summary>
    public const int PrtSideFieldNumber = 160;
    private global::Spiderrock.Protobuf.PrtSide prtSide_ = global::Spiderrock.Protobuf.PrtSide.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtSide PrtSide {
      get { return prtSide_; }
      set {
        prtSide_ = value;
      }
    }

    /// <summary>Field number for the "prt_timestamp" field.</summary>
    public const int PrtTimestampFieldNumber = 163;
    private long prtTimestamp_;
    /// <summary>
    /// exchange high precision timestamp (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PrtTimestamp {
      get { return prtTimestamp_; }
      set {
        prtTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 166;
    private long netTimestamp_;
    /// <summary>
    /// inbound packet PTP timestamp from SR gateway switch; usually syncronized with facility grandfather clock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 169;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "o_bid" field.</summary>
    public const int OBidFieldNumber = 172;
    private float oBid_;
    /// <summary>
    /// Option NBBO bid a the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBid {
      get { return oBid_; }
      set {
        oBid_ = value;
      }
    }

    /// <summary>Field number for the "o_ask" field.</summary>
    public const int OAskFieldNumber = 175;
    private float oAsk_;
    /// <summary>
    /// Option NBBO ask a the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAsk {
      get { return oAsk_; }
      set {
        oAsk_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_sz" field.</summary>
    public const int OBidSzFieldNumber = 178;
    private int oBidSz_;
    /// <summary>
    /// Option NBBO cumulative bid size at the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OBidSz {
      get { return oBidSz_; }
      set {
        oBidSz_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_sz" field.</summary>
    public const int OAskSzFieldNumber = 181;
    private int oAskSz_;
    /// <summary>
    /// Option NBBO cumulative ask size at the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OAskSz {
      get { return oAskSz_; }
      set {
        oAskSz_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_ex" field.</summary>
    public const int OBidExFieldNumber = 184;
    private global::Spiderrock.Protobuf.OptExch oBidEx_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// First (or largest) option exchange on the bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch OBidEx {
      get { return oBidEx_; }
      set {
        oBidEx_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_ex" field.</summary>
    public const int OAskExFieldNumber = 187;
    private global::Spiderrock.Protobuf.OptExch oAskEx_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// First (or largest) option exchange on the ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch OAskEx {
      get { return oAskEx_; }
      set {
        oAskEx_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_ex_sz" field.</summary>
    public const int OBidExSzFieldNumber = 190;
    private int oBidExSz_;
    /// <summary>
    /// Option bid size of the largest exchange on the bid at the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OBidExSz {
      get { return oBidExSz_; }
      set {
        oBidExSz_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_ex_sz" field.</summary>
    public const int OAskExSzFieldNumber = 193;
    private int oAskExSz_;
    /// <summary>
    /// Option ask size of the largest exchange on the ask at the time the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OAskExSz {
      get { return oAskExSz_; }
      set {
        oAskExSz_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_cnt" field.</summary>
    public const int OBidCntFieldNumber = 196;
    private int oBidCnt_;
    /// <summary>
    /// Number of exchanges on the NBBO bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OBidCnt {
      get { return oBidCnt_; }
      set {
        oBidCnt_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_cnt" field.</summary>
    public const int OAskCntFieldNumber = 199;
    private int oAskCnt_;
    /// <summary>
    /// Number of exchanges on the NBBO ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OAskCnt {
      get { return oAskCnt_; }
      set {
        oAskCnt_ = value;
      }
    }

    /// <summary>Field number for the "o_bid2" field.</summary>
    public const int OBid2FieldNumber = 202;
    private float oBid2_;
    /// <summary>
    /// Second level bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBid2 {
      get { return oBid2_; }
      set {
        oBid2_ = value;
      }
    }

    /// <summary>Field number for the "o_ask2" field.</summary>
    public const int OAsk2FieldNumber = 205;
    private float oAsk2_;
    /// <summary>
    /// Second level ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAsk2 {
      get { return oAsk2_; }
      set {
        oAsk2_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_sz2" field.</summary>
    public const int OBidSz2FieldNumber = 208;
    private int oBidSz2_;
    /// <summary>
    /// Cumulative size on the second level bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OBidSz2 {
      get { return oBidSz2_; }
      set {
        oBidSz2_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_sz2" field.</summary>
    public const int OAskSz2FieldNumber = 211;
    private int oAskSz2_;
    /// <summary>
    /// Cumulative size on the second level ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OAskSz2 {
      get { return oAskSz2_; }
      set {
        oAskSz2_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_iv" field.</summary>
    public const int OBidIvFieldNumber = 353;
    private double oBidIv_;
    /// <summary>
    /// option bid IV
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OBidIv {
      get { return oBidIv_; }
      set {
        oBidIv_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_iv" field.</summary>
    public const int OAskIvFieldNumber = 354;
    private double oAskIv_;
    /// <summary>
    /// option ask IV
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OAskIv {
      get { return oAskIv_; }
      set {
        oAskIv_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 214;
    private double uBid_;
    /// <summary>
    /// underlier bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 217;
    private double uAsk_;
    /// <summary>
    /// underlier ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 220;
    private double uPrc_;
    /// <summary>
    /// underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "yrs" field.</summary>
    public const int YrsFieldNumber = 223;
    private float yrs_;
    /// <summary>
    /// years to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Yrs {
      get { return yrs_; }
      set {
        yrs_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 226;
    private float rate_;
    /// <summary>
    /// interest rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 229;
    private float sdiv_;
    /// <summary>
    /// continuous stock dividend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 232;
    private float ddiv_;
    /// <summary>
    /// discrete stock dividend value (sum of dividends &lt;= expiration)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "x_de" field.</summary>
    public const int XDeFieldNumber = 235;
    private float xDe_;
    /// <summary>
    /// xDelta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XDe {
      get { return xDe_; }
      set {
        xDe_ = value;
      }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 238;
    private float xAxis_;
    /// <summary>
    /// SR surface xAxis value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "multihedge" field.</summary>
    public const int MultihedgeFieldNumber = 241;
    private global::Spiderrock.Protobuf.Multihedge multihedge_ = global::Spiderrock.Protobuf.Multihedge.Unspecified;
    /// <summary>
    /// Distinguishes options that have a single underlying security from those that are more complex:  multiple securities,cash components, binary options,etc:  'None','Simple','Complex','AllCash','Binary'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Multihedge Multihedge {
      get { return multihedge_; }
      set {
        multihedge_ = value;
      }
    }

    /// <summary>Field number for the "flex_type" field.</summary>
    public const int FlexTypeFieldNumber = 244;
    private global::Spiderrock.Protobuf.FlexType flexType_ = global::Spiderrock.Protobuf.FlexType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FlexType FlexType {
      get { return flexType_; }
      set {
        flexType_ = value;
      }
    }

    /// <summary>Field number for the "flex_root" field.</summary>
    public const int FlexRootFieldNumber = 247;
    private string flexRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FlexRoot {
      get { return flexRoot_; }
      set {
        flexRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prt_iv" field.</summary>
    public const int PrtIvFieldNumber = 250;
    private float prtIv_;
    /// <summary>
    /// print implied vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtIv {
      get { return prtIv_; }
      set {
        prtIv_ = value;
      }
    }

    /// <summary>Field number for the "prt_de" field.</summary>
    public const int PrtDeFieldNumber = 253;
    private float prtDe_;
    /// <summary>
    /// print delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtDe {
      get { return prtDe_; }
      set {
        prtDe_ = value;
      }
    }

    /// <summary>Field number for the "prt_ga" field.</summary>
    public const int PrtGaFieldNumber = 256;
    private float prtGa_;
    /// <summary>
    /// print gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtGa {
      get { return prtGa_; }
      set {
        prtGa_ = value;
      }
    }

    /// <summary>Field number for the "prt_th" field.</summary>
    public const int PrtThFieldNumber = 259;
    private float prtTh_;
    /// <summary>
    /// print theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtTh {
      get { return prtTh_; }
      set {
        prtTh_ = value;
      }
    }

    /// <summary>Field number for the "prt_ve" field.</summary>
    public const int PrtVeFieldNumber = 262;
    private float prtVe_;
    /// <summary>
    /// print vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtVe {
      get { return prtVe_; }
      set {
        prtVe_ = value;
      }
    }

    /// <summary>Field number for the "prt_ro" field.</summary>
    public const int PrtRoFieldNumber = 265;
    private float prtRo_;
    /// <summary>
    /// print rho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtRo {
      get { return prtRo_; }
      set {
        prtRo_ = value;
      }
    }

    /// <summary>Field number for the "calc_err" field.</summary>
    public const int CalcErrFieldNumber = 268;
    private string calcErr_ = "";
    /// <summary>
    /// calc error flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CalcErr {
      get { return calcErr_; }
      set {
        calcErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "surf_vol" field.</summary>
    public const int SurfVolFieldNumber = 271;
    private float surfVol_;
    /// <summary>
    /// SR surface volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVol {
      get { return surfVol_; }
      set {
        surfVol_ = value;
      }
    }

    /// <summary>Field number for the "surf_opx" field.</summary>
    public const int SurfOpxFieldNumber = 274;
    private float surfOpx_;
    /// <summary>
    /// SR surface price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfOpx {
      get { return surfOpx_; }
      set {
        surfOpx_ = value;
      }
    }

    /// <summary>Field number for the "surf_atm" field.</summary>
    public const int SurfAtmFieldNumber = 277;
    private float surfAtm_;
    /// <summary>
    /// SR surface ATM vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfAtm {
      get { return surfAtm_; }
      set {
        surfAtm_ = value;
      }
    }

    /// <summary>Field number for the "prt_probability" field.</summary>
    public const int PrtProbabilityFieldNumber = 280;
    private float prtProbability_;
    /// <summary>
    /// [M1] probability that buying prtSize contracts @ prtPrice will have positive m10 pnl (prtPriceM10 >= prtPrice) [recorded at time of print]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtProbability {
      get { return prtProbability_; }
      set {
        prtProbability_ = value;
      }
    }

    /// <summary>Field number for the "prt_probability_m2" field.</summary>
    public const int PrtProbabilityM2FieldNumber = 283;
    private float prtProbabilityM2_;
    /// <summary>
    /// alternate probability model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtProbabilityM2 {
      get { return prtProbabilityM2_; }
      set {
        prtProbabilityM2_ = value;
      }
    }

    /// <summary>Field number for the "prt_probability_m3" field.</summary>
    public const int PrtProbabilityM3FieldNumber = 286;
    private float prtProbabilityM3_;
    /// <summary>
    /// alternate probability model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtProbabilityM3 {
      get { return prtProbabilityM3_; }
      set {
        prtProbabilityM3_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_m1" field.</summary>
    public const int OBidM1FieldNumber = 289;
    private float oBidM1_;
    /// <summary>
    /// NBBO option bid 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBidM1 {
      get { return oBidM1_; }
      set {
        oBidM1_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_m1" field.</summary>
    public const int OAskM1FieldNumber = 292;
    private float oAskM1_;
    /// <summary>
    /// NBBO option ask 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAskM1 {
      get { return oAskM1_; }
      set {
        oAskM1_ = value;
      }
    }

    /// <summary>Field number for the "u_bid_m1" field.</summary>
    public const int UBidM1FieldNumber = 295;
    private double uBidM1_;
    /// <summary>
    /// NBBO underlying bid 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBidM1 {
      get { return uBidM1_; }
      set {
        uBidM1_ = value;
      }
    }

    /// <summary>Field number for the "u_ask_m1" field.</summary>
    public const int UAskM1FieldNumber = 298;
    private double uAskM1_;
    /// <summary>
    /// NBBO underlying ask 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAskM1 {
      get { return uAskM1_; }
      set {
        uAskM1_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_m1" field.</summary>
    public const int UPrcM1FieldNumber = 301;
    private double uPrcM1_;
    /// <summary>
    /// Underlying price 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcM1 {
      get { return uPrcM1_; }
      set {
        uPrcM1_ = value;
      }
    }

    /// <summary>Field number for the "s_vol_m1" field.</summary>
    public const int SVolM1FieldNumber = 304;
    private float sVolM1_;
    /// <summary>
    /// Suface volatility 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVolM1 {
      get { return sVolM1_; }
      set {
        sVolM1_ = value;
      }
    }

    /// <summary>Field number for the "s_opx_m1" field.</summary>
    public const int SOpxM1FieldNumber = 307;
    private float sOpxM1_;
    /// <summary>
    /// Surface option price 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SOpxM1 {
      get { return sOpxM1_; }
      set {
        sOpxM1_ = value;
      }
    }

    /// <summary>Field number for the "s_div_m1" field.</summary>
    public const int SDivM1FieldNumber = 310;
    private float sDivM1_;
    /// <summary>
    /// sDiv 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SDivM1 {
      get { return sDivM1_; }
      set {
        sDivM1_ = value;
      }
    }

    /// <summary>Field number for the "s_err_m1" field.</summary>
    public const int SErrM1FieldNumber = 313;
    private string sErrM1_ = "";
    /// <summary>
    /// Surface error condition (if any) 1 minute after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SErrM1 {
      get { return sErrM1_; }
      set {
        sErrM1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pnl_m1" field.</summary>
    public const int PnlM1FieldNumber = 316;
    private float pnlM1_;
    /// <summary>
    /// pnl after 1 minute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlM1 {
      get { return pnlM1_; }
      set {
        pnlM1_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m1_err" field.</summary>
    public const int PnlM1ErrFieldNumber = 319;
    private global::Spiderrock.Protobuf.YesNo pnlM1Err_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Error condition for PnL calculated over the first 1 minute after the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo PnlM1Err {
      get { return pnlM1Err_; }
      set {
        pnlM1Err_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_m10" field.</summary>
    public const int OBidM10FieldNumber = 322;
    private float oBidM10_;
    /// <summary>
    /// NBBO option bid 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBidM10 {
      get { return oBidM10_; }
      set {
        oBidM10_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_m10" field.</summary>
    public const int OAskM10FieldNumber = 325;
    private float oAskM10_;
    /// <summary>
    /// NBBO option ask 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAskM10 {
      get { return oAskM10_; }
      set {
        oAskM10_ = value;
      }
    }

    /// <summary>Field number for the "u_bid_m10" field.</summary>
    public const int UBidM10FieldNumber = 328;
    private double uBidM10_;
    /// <summary>
    /// NBBO underlying bid 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBidM10 {
      get { return uBidM10_; }
      set {
        uBidM10_ = value;
      }
    }

    /// <summary>Field number for the "u_ask_m10" field.</summary>
    public const int UAskM10FieldNumber = 331;
    private double uAskM10_;
    /// <summary>
    /// NBBO underlying ask 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAskM10 {
      get { return uAskM10_; }
      set {
        uAskM10_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_m10" field.</summary>
    public const int UPrcM10FieldNumber = 334;
    private double uPrcM10_;
    /// <summary>
    /// Underlying price 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcM10 {
      get { return uPrcM10_; }
      set {
        uPrcM10_ = value;
      }
    }

    /// <summary>Field number for the "s_vol_m10" field.</summary>
    public const int SVolM10FieldNumber = 337;
    private float sVolM10_;
    /// <summary>
    /// Suface volatility 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVolM10 {
      get { return sVolM10_; }
      set {
        sVolM10_ = value;
      }
    }

    /// <summary>Field number for the "s_opx_m10" field.</summary>
    public const int SOpxM10FieldNumber = 340;
    private float sOpxM10_;
    /// <summary>
    /// Surface option price 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SOpxM10 {
      get { return sOpxM10_; }
      set {
        sOpxM10_ = value;
      }
    }

    /// <summary>Field number for the "s_div_m10" field.</summary>
    public const int SDivM10FieldNumber = 343;
    private float sDivM10_;
    /// <summary>
    /// sDiv 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SDivM10 {
      get { return sDivM10_; }
      set {
        sDivM10_ = value;
      }
    }

    /// <summary>Field number for the "s_err_m10" field.</summary>
    public const int SErrM10FieldNumber = 346;
    private string sErrM10_ = "";
    /// <summary>
    /// Surface error condition (if any) 10 minutes after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SErrM10 {
      get { return sErrM10_; }
      set {
        sErrM10_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pnl_m10" field.</summary>
    public const int PnlM10FieldNumber = 349;
    private float pnlM10_;
    /// <summary>
    /// pnl after 10 minutes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlM10 {
      get { return pnlM10_; }
      set {
        pnlM10_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m10_err" field.</summary>
    public const int PnlM10ErrFieldNumber = 352;
    private global::Spiderrock.Protobuf.YesNo pnlM10Err_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Error condition for PnL calculated 10 minutes after the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo PnlM10Err {
      get { return pnlM10Err_; }
      set {
        pnlM10Err_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_s1" field.</summary>
    public const int OBidS1FieldNumber = 355;
    private float oBidS1_;
    /// <summary>
    /// NBBO option bid 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBidS1 {
      get { return oBidS1_; }
      set {
        oBidS1_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_s1" field.</summary>
    public const int OAskS1FieldNumber = 356;
    private float oAskS1_;
    /// <summary>
    /// NBBO option ask 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAskS1 {
      get { return oAskS1_; }
      set {
        oAskS1_ = value;
      }
    }

    /// <summary>Field number for the "u_bid_s1" field.</summary>
    public const int UBidS1FieldNumber = 357;
    private double uBidS1_;
    /// <summary>
    /// NBBO underlying bid 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBidS1 {
      get { return uBidS1_; }
      set {
        uBidS1_ = value;
      }
    }

    /// <summary>Field number for the "u_ask_s1" field.</summary>
    public const int UAskS1FieldNumber = 358;
    private double uAskS1_;
    /// <summary>
    /// NBBO underlying ask 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAskS1 {
      get { return uAskS1_; }
      set {
        uAskS1_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_s1" field.</summary>
    public const int UPrcS1FieldNumber = 359;
    private double uPrcS1_;
    /// <summary>
    /// Underlying price 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcS1 {
      get { return uPrcS1_; }
      set {
        uPrcS1_ = value;
      }
    }

    /// <summary>Field number for the "s_vol_s1" field.</summary>
    public const int SVolS1FieldNumber = 360;
    private float sVolS1_;
    /// <summary>
    /// Suface volatility 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVolS1 {
      get { return sVolS1_; }
      set {
        sVolS1_ = value;
      }
    }

    /// <summary>Field number for the "s_opx_s1" field.</summary>
    public const int SOpxS1FieldNumber = 361;
    private float sOpxS1_;
    /// <summary>
    /// Surface option price 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SOpxS1 {
      get { return sOpxS1_; }
      set {
        sOpxS1_ = value;
      }
    }

    /// <summary>Field number for the "s_div_s1" field.</summary>
    public const int SDivS1FieldNumber = 362;
    private float sDivS1_;
    /// <summary>
    /// sDiv 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SDivS1 {
      get { return sDivS1_; }
      set {
        sDivS1_ = value;
      }
    }

    /// <summary>Field number for the "s_err_s1" field.</summary>
    public const int SErrS1FieldNumber = 363;
    private string sErrS1_ = "";
    /// <summary>
    /// Surface error condition (if any) 1 second after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SErrS1 {
      get { return sErrS1_; }
      set {
        sErrS1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pnl_s1" field.</summary>
    public const int PnlS1FieldNumber = 364;
    private float pnlS1_;
    /// <summary>
    /// pnl after 1 second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlS1 {
      get { return pnlS1_; }
      set {
        pnlS1_ = value;
      }
    }

    /// <summary>Field number for the "pnl_s1_err" field.</summary>
    public const int PnlS1ErrFieldNumber = 365;
    private global::Spiderrock.Protobuf.YesNo pnlS1Err_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Error condition for PnL calculated over the first 1 second after the print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo PnlS1Err {
      get { return pnlS1Err_; }
      set {
        pnlS1Err_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_next" field.</summary>
    public const int OBidNextFieldNumber = 366;
    private float oBidNext_;
    /// <summary>
    /// next NBBO option bid after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBidNext {
      get { return oBidNext_; }
      set {
        oBidNext_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_next" field.</summary>
    public const int OAskNextFieldNumber = 367;
    private float oAskNext_;
    /// <summary>
    /// next NBBO option ask after print was received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAskNext {
      get { return oAskNext_; }
      set {
        oAskNext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionPrintSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionPrintSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Fkey, other.Fkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (PrtExch != other.PrtExch) return false;
      if (PrtSize != other.PrtSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtPrice, other.PrtPrice)) return false;
      if (PrtType != other.PrtType) return false;
      if (PrtOrders != other.PrtOrders) return false;
      if (PrtClusterNum != other.PrtClusterNum) return false;
      if (PrtClusterSize != other.PrtClusterSize) return false;
      if (PrtVolume != other.PrtVolume) return false;
      if (CxlVolume != other.CxlVolume) return false;
      if (BidCount != other.BidCount) return false;
      if (AskCount != other.AskCount) return false;
      if (BidVolume != other.BidVolume) return false;
      if (AskVolume != other.AskVolume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ebid, other.Ebid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Eask, other.Eask)) return false;
      if (Ebsz != other.Ebsz) return false;
      if (Easz != other.Easz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Eage, other.Eage)) return false;
      if (PrtSide != other.PrtSide) return false;
      if (PrtTimestamp != other.PrtTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBid, other.OBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAsk, other.OAsk)) return false;
      if (OBidSz != other.OBidSz) return false;
      if (OAskSz != other.OAskSz) return false;
      if (OBidEx != other.OBidEx) return false;
      if (OAskEx != other.OAskEx) return false;
      if (OBidExSz != other.OBidExSz) return false;
      if (OAskExSz != other.OAskExSz) return false;
      if (OBidCnt != other.OBidCnt) return false;
      if (OAskCnt != other.OAskCnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBid2, other.OBid2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAsk2, other.OAsk2)) return false;
      if (OBidSz2 != other.OBidSz2) return false;
      if (OAskSz2 != other.OAskSz2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OBidIv, other.OBidIv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OAskIv, other.OAskIv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yrs, other.Yrs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XDe, other.XDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
      if (Multihedge != other.Multihedge) return false;
      if (FlexType != other.FlexType) return false;
      if (FlexRoot != other.FlexRoot) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtIv, other.PrtIv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtDe, other.PrtDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtGa, other.PrtGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtTh, other.PrtTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtVe, other.PrtVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtRo, other.PrtRo)) return false;
      if (CalcErr != other.CalcErr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVol, other.SurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfOpx, other.SurfOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfAtm, other.SurfAtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtProbability, other.PrtProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtProbabilityM2, other.PrtProbabilityM2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtProbabilityM3, other.PrtProbabilityM3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBidM1, other.OBidM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAskM1, other.OAskM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBidM1, other.UBidM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAskM1, other.UAskM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcM1, other.UPrcM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVolM1, other.SVolM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SOpxM1, other.SOpxM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDivM1, other.SDivM1)) return false;
      if (SErrM1 != other.SErrM1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlM1, other.PnlM1)) return false;
      if (PnlM1Err != other.PnlM1Err) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBidM10, other.OBidM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAskM10, other.OAskM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBidM10, other.UBidM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAskM10, other.UAskM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcM10, other.UPrcM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVolM10, other.SVolM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SOpxM10, other.SOpxM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDivM10, other.SDivM10)) return false;
      if (SErrM10 != other.SErrM10) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlM10, other.PnlM10)) return false;
      if (PnlM10Err != other.PnlM10Err) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBidS1, other.OBidS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAskS1, other.OAskS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBidS1, other.UBidS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAskS1, other.UAskS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcS1, other.UPrcS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVolS1, other.SVolS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SOpxS1, other.SOpxS1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDivS1, other.SDivS1)) return false;
      if (SErrS1 != other.SErrS1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlS1, other.PnlS1)) return false;
      if (PnlS1Err != other.PnlS1Err) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBidNext, other.OBidNext)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAskNext, other.OAskNext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (fkey_ != null) hash ^= Fkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (PrtExch != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= PrtExch.GetHashCode();
      if (PrtSize != 0) hash ^= PrtSize.GetHashCode();
      if (PrtPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtPrice);
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) hash ^= PrtType.GetHashCode();
      if (PrtOrders != 0) hash ^= PrtOrders.GetHashCode();
      if (PrtClusterNum != 0) hash ^= PrtClusterNum.GetHashCode();
      if (PrtClusterSize != 0) hash ^= PrtClusterSize.GetHashCode();
      if (PrtVolume != 0) hash ^= PrtVolume.GetHashCode();
      if (CxlVolume != 0) hash ^= CxlVolume.GetHashCode();
      if (BidCount != 0) hash ^= BidCount.GetHashCode();
      if (AskCount != 0) hash ^= AskCount.GetHashCode();
      if (BidVolume != 0) hash ^= BidVolume.GetHashCode();
      if (AskVolume != 0) hash ^= AskVolume.GetHashCode();
      if (Ebid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ebid);
      if (Eask != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Eask);
      if (Ebsz != 0) hash ^= Ebsz.GetHashCode();
      if (Easz != 0) hash ^= Easz.GetHashCode();
      if (Eage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Eage);
      if (PrtSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) hash ^= PrtSide.GetHashCode();
      if (PrtTimestamp != 0L) hash ^= PrtTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (OBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBid);
      if (OAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAsk);
      if (OBidSz != 0) hash ^= OBidSz.GetHashCode();
      if (OAskSz != 0) hash ^= OAskSz.GetHashCode();
      if (OBidEx != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= OBidEx.GetHashCode();
      if (OAskEx != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= OAskEx.GetHashCode();
      if (OBidExSz != 0) hash ^= OBidExSz.GetHashCode();
      if (OAskExSz != 0) hash ^= OAskExSz.GetHashCode();
      if (OBidCnt != 0) hash ^= OBidCnt.GetHashCode();
      if (OAskCnt != 0) hash ^= OAskCnt.GetHashCode();
      if (OBid2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBid2);
      if (OAsk2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAsk2);
      if (OBidSz2 != 0) hash ^= OBidSz2.GetHashCode();
      if (OAskSz2 != 0) hash ^= OAskSz2.GetHashCode();
      if (OBidIv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OBidIv);
      if (OAskIv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OAskIv);
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (Yrs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yrs);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (XDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XDe);
      if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) hash ^= Multihedge.GetHashCode();
      if (FlexType != global::Spiderrock.Protobuf.FlexType.Unspecified) hash ^= FlexType.GetHashCode();
      if (FlexRoot.Length != 0) hash ^= FlexRoot.GetHashCode();
      if (PrtIv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtIv);
      if (PrtDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtDe);
      if (PrtGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtGa);
      if (PrtTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtTh);
      if (PrtVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtVe);
      if (PrtRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtRo);
      if (CalcErr.Length != 0) hash ^= CalcErr.GetHashCode();
      if (SurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVol);
      if (SurfOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfOpx);
      if (SurfAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfAtm);
      if (PrtProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtProbability);
      if (PrtProbabilityM2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtProbabilityM2);
      if (PrtProbabilityM3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtProbabilityM3);
      if (OBidM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBidM1);
      if (OAskM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAskM1);
      if (UBidM1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBidM1);
      if (UAskM1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAskM1);
      if (UPrcM1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcM1);
      if (SVolM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVolM1);
      if (SOpxM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SOpxM1);
      if (SDivM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDivM1);
      if (SErrM1.Length != 0) hash ^= SErrM1.GetHashCode();
      if (PnlM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlM1);
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= PnlM1Err.GetHashCode();
      if (OBidM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBidM10);
      if (OAskM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAskM10);
      if (UBidM10 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBidM10);
      if (UAskM10 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAskM10);
      if (UPrcM10 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcM10);
      if (SVolM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVolM10);
      if (SOpxM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SOpxM10);
      if (SDivM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDivM10);
      if (SErrM10.Length != 0) hash ^= SErrM10.GetHashCode();
      if (PnlM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlM10);
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= PnlM10Err.GetHashCode();
      if (OBidS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBidS1);
      if (OAskS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAskS1);
      if (UBidS1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBidS1);
      if (UAskS1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAskS1);
      if (UPrcS1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcS1);
      if (SVolS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVolS1);
      if (SOpxS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SOpxS1);
      if (SDivS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDivS1);
      if (SErrS1.Length != 0) hash ^= SErrS1.GetHashCode();
      if (PnlS1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlS1);
      if (PnlS1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= PnlS1Err.GetHashCode();
      if (OBidNext != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBidNext);
      if (OAskNext != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAskNext);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (fkey_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Fkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Ticker);
      }
      if (PrtExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) PrtExch);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(PrtSize);
      }
      if (PrtPrice != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(PrtPrice);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) PrtType);
      }
      if (PrtOrders != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(PrtOrders);
      }
      if (PrtClusterNum != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(PrtClusterNum);
      }
      if (PrtClusterSize != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PrtClusterSize);
      }
      if (PrtVolume != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(PrtVolume);
      }
      if (CxlVolume != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(CxlVolume);
      }
      if (BidCount != 0) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(BidCount);
      }
      if (AskCount != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(AskCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(BidVolume);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(AskVolume);
      }
      if (Ebid != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(Ebid);
      }
      if (Eask != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Eask);
      }
      if (Ebsz != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(Ebsz);
      }
      if (Easz != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(Easz);
      }
      if (Eage != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Eage);
      }
      if (PrtSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) PrtSide);
      }
      if (PrtTimestamp != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(PrtTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(176, 10);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 10);
        output.WriteMessage(Timestamp);
      }
      if (OBid != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(OBid);
      }
      if (OAsk != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(OAsk);
      }
      if (OBidSz != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(OBidSz);
      }
      if (OAskSz != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(OAskSz);
      }
      if (OBidEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) OBidEx);
      }
      if (OAskEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) OAskEx);
      }
      if (OBidExSz != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(OBidExSz);
      }
      if (OAskExSz != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(OAskExSz);
      }
      if (OBidCnt != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(OBidCnt);
      }
      if (OAskCnt != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OAskCnt);
      }
      if (OBid2 != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(OBid2);
      }
      if (OAsk2 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OAsk2);
      }
      if (OBidSz2 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(OBidSz2);
      }
      if (OAskSz2 != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(OAskSz2);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(UAsk);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(UPrc);
      }
      if (Yrs != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(Yrs);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Ddiv);
      }
      if (XDe != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(XDe);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(XAxis);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) Multihedge);
      }
      if (FlexType != global::Spiderrock.Protobuf.FlexType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) FlexType);
      }
      if (FlexRoot.Length != 0) {
        output.WriteRawTag(186, 15);
        output.WriteString(FlexRoot);
      }
      if (PrtIv != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PrtIv);
      }
      if (PrtDe != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(PrtDe);
      }
      if (PrtGa != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(PrtGa);
      }
      if (PrtTh != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(PrtTh);
      }
      if (PrtVe != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(PrtVe);
      }
      if (PrtRo != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PrtRo);
      }
      if (CalcErr.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(CalcErr);
      }
      if (SurfVol != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SurfVol);
      }
      if (SurfOpx != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SurfOpx);
      }
      if (SurfAtm != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SurfAtm);
      }
      if (PrtProbability != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(PrtProbability);
      }
      if (PrtProbabilityM2 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(PrtProbabilityM2);
      }
      if (PrtProbabilityM3 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(PrtProbabilityM3);
      }
      if (OBidM1 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OBidM1);
      }
      if (OAskM1 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OAskM1);
      }
      if (UBidM1 != 0D) {
        output.WriteRawTag(185, 18);
        output.WriteDouble(UBidM1);
      }
      if (UAskM1 != 0D) {
        output.WriteRawTag(209, 18);
        output.WriteDouble(UAskM1);
      }
      if (UPrcM1 != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(UPrcM1);
      }
      if (SVolM1 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SVolM1);
      }
      if (SOpxM1 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(SOpxM1);
      }
      if (SDivM1 != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(SDivM1);
      }
      if (SErrM1.Length != 0) {
        output.WriteRawTag(202, 19);
        output.WriteString(SErrM1);
      }
      if (PnlM1 != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlM1);
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) PnlM1Err);
      }
      if (OBidM10 != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OBidM10);
      }
      if (OAskM10 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OAskM10);
      }
      if (UBidM10 != 0D) {
        output.WriteRawTag(193, 20);
        output.WriteDouble(UBidM10);
      }
      if (UAskM10 != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(UAskM10);
      }
      if (UPrcM10 != 0D) {
        output.WriteRawTag(241, 20);
        output.WriteDouble(UPrcM10);
      }
      if (SVolM10 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(SVolM10);
      }
      if (SOpxM10 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(SOpxM10);
      }
      if (SDivM10 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(SDivM10);
      }
      if (SErrM10.Length != 0) {
        output.WriteRawTag(210, 21);
        output.WriteString(SErrM10);
      }
      if (PnlM10 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PnlM10);
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) PnlM10Err);
      }
      if (OBidIv != 0D) {
        output.WriteRawTag(137, 22);
        output.WriteDouble(OBidIv);
      }
      if (OAskIv != 0D) {
        output.WriteRawTag(145, 22);
        output.WriteDouble(OAskIv);
      }
      if (OBidS1 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(OBidS1);
      }
      if (OAskS1 != 0F) {
        output.WriteRawTag(165, 22);
        output.WriteFloat(OAskS1);
      }
      if (UBidS1 != 0D) {
        output.WriteRawTag(169, 22);
        output.WriteDouble(UBidS1);
      }
      if (UAskS1 != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(UAskS1);
      }
      if (UPrcS1 != 0D) {
        output.WriteRawTag(185, 22);
        output.WriteDouble(UPrcS1);
      }
      if (SVolS1 != 0F) {
        output.WriteRawTag(197, 22);
        output.WriteFloat(SVolS1);
      }
      if (SOpxS1 != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(SOpxS1);
      }
      if (SDivS1 != 0F) {
        output.WriteRawTag(213, 22);
        output.WriteFloat(SDivS1);
      }
      if (SErrS1.Length != 0) {
        output.WriteRawTag(218, 22);
        output.WriteString(SErrS1);
      }
      if (PnlS1 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(PnlS1);
      }
      if (PnlS1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 22);
        output.WriteEnum((int) PnlS1Err);
      }
      if (OBidNext != 0F) {
        output.WriteRawTag(245, 22);
        output.WriteFloat(OBidNext);
      }
      if (OAskNext != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(OAskNext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (fkey_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Fkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Ticker);
      }
      if (PrtExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) PrtExch);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(PrtSize);
      }
      if (PrtPrice != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(PrtPrice);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) PrtType);
      }
      if (PrtOrders != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(PrtOrders);
      }
      if (PrtClusterNum != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(PrtClusterNum);
      }
      if (PrtClusterSize != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PrtClusterSize);
      }
      if (PrtVolume != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(PrtVolume);
      }
      if (CxlVolume != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(CxlVolume);
      }
      if (BidCount != 0) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(BidCount);
      }
      if (AskCount != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(AskCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(BidVolume);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(AskVolume);
      }
      if (Ebid != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(Ebid);
      }
      if (Eask != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Eask);
      }
      if (Ebsz != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(Ebsz);
      }
      if (Easz != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(Easz);
      }
      if (Eage != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Eage);
      }
      if (PrtSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) PrtSide);
      }
      if (PrtTimestamp != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(PrtTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(176, 10);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 10);
        output.WriteMessage(Timestamp);
      }
      if (OBid != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(OBid);
      }
      if (OAsk != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(OAsk);
      }
      if (OBidSz != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(OBidSz);
      }
      if (OAskSz != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(OAskSz);
      }
      if (OBidEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) OBidEx);
      }
      if (OAskEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) OAskEx);
      }
      if (OBidExSz != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(OBidExSz);
      }
      if (OAskExSz != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(OAskExSz);
      }
      if (OBidCnt != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(OBidCnt);
      }
      if (OAskCnt != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OAskCnt);
      }
      if (OBid2 != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(OBid2);
      }
      if (OAsk2 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OAsk2);
      }
      if (OBidSz2 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(OBidSz2);
      }
      if (OAskSz2 != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(OAskSz2);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(UAsk);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(UPrc);
      }
      if (Yrs != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(Yrs);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Ddiv);
      }
      if (XDe != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(XDe);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(XAxis);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) Multihedge);
      }
      if (FlexType != global::Spiderrock.Protobuf.FlexType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) FlexType);
      }
      if (FlexRoot.Length != 0) {
        output.WriteRawTag(186, 15);
        output.WriteString(FlexRoot);
      }
      if (PrtIv != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PrtIv);
      }
      if (PrtDe != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(PrtDe);
      }
      if (PrtGa != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(PrtGa);
      }
      if (PrtTh != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(PrtTh);
      }
      if (PrtVe != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(PrtVe);
      }
      if (PrtRo != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PrtRo);
      }
      if (CalcErr.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(CalcErr);
      }
      if (SurfVol != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SurfVol);
      }
      if (SurfOpx != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SurfOpx);
      }
      if (SurfAtm != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SurfAtm);
      }
      if (PrtProbability != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(PrtProbability);
      }
      if (PrtProbabilityM2 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(PrtProbabilityM2);
      }
      if (PrtProbabilityM3 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(PrtProbabilityM3);
      }
      if (OBidM1 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OBidM1);
      }
      if (OAskM1 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OAskM1);
      }
      if (UBidM1 != 0D) {
        output.WriteRawTag(185, 18);
        output.WriteDouble(UBidM1);
      }
      if (UAskM1 != 0D) {
        output.WriteRawTag(209, 18);
        output.WriteDouble(UAskM1);
      }
      if (UPrcM1 != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(UPrcM1);
      }
      if (SVolM1 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SVolM1);
      }
      if (SOpxM1 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(SOpxM1);
      }
      if (SDivM1 != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(SDivM1);
      }
      if (SErrM1.Length != 0) {
        output.WriteRawTag(202, 19);
        output.WriteString(SErrM1);
      }
      if (PnlM1 != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlM1);
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) PnlM1Err);
      }
      if (OBidM10 != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OBidM10);
      }
      if (OAskM10 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OAskM10);
      }
      if (UBidM10 != 0D) {
        output.WriteRawTag(193, 20);
        output.WriteDouble(UBidM10);
      }
      if (UAskM10 != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(UAskM10);
      }
      if (UPrcM10 != 0D) {
        output.WriteRawTag(241, 20);
        output.WriteDouble(UPrcM10);
      }
      if (SVolM10 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(SVolM10);
      }
      if (SOpxM10 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(SOpxM10);
      }
      if (SDivM10 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(SDivM10);
      }
      if (SErrM10.Length != 0) {
        output.WriteRawTag(210, 21);
        output.WriteString(SErrM10);
      }
      if (PnlM10 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PnlM10);
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) PnlM10Err);
      }
      if (OBidIv != 0D) {
        output.WriteRawTag(137, 22);
        output.WriteDouble(OBidIv);
      }
      if (OAskIv != 0D) {
        output.WriteRawTag(145, 22);
        output.WriteDouble(OAskIv);
      }
      if (OBidS1 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(OBidS1);
      }
      if (OAskS1 != 0F) {
        output.WriteRawTag(165, 22);
        output.WriteFloat(OAskS1);
      }
      if (UBidS1 != 0D) {
        output.WriteRawTag(169, 22);
        output.WriteDouble(UBidS1);
      }
      if (UAskS1 != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(UAskS1);
      }
      if (UPrcS1 != 0D) {
        output.WriteRawTag(185, 22);
        output.WriteDouble(UPrcS1);
      }
      if (SVolS1 != 0F) {
        output.WriteRawTag(197, 22);
        output.WriteFloat(SVolS1);
      }
      if (SOpxS1 != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(SOpxS1);
      }
      if (SDivS1 != 0F) {
        output.WriteRawTag(213, 22);
        output.WriteFloat(SDivS1);
      }
      if (SErrS1.Length != 0) {
        output.WriteRawTag(218, 22);
        output.WriteString(SErrS1);
      }
      if (PnlS1 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(PnlS1);
      }
      if (PnlS1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 22);
        output.WriteEnum((int) PnlS1Err);
      }
      if (OBidNext != 0F) {
        output.WriteRawTag(245, 22);
        output.WriteFloat(OBidNext);
      }
      if (OAskNext != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(OAskNext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (fkey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (PrtExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtExch);
      }
      if (PrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize);
      }
      if (PrtPrice != 0F) {
        size += 2 + 4;
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtType);
      }
      if (PrtOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrtOrders);
      }
      if (PrtClusterNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtClusterNum);
      }
      if (PrtClusterSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtClusterSize);
      }
      if (PrtVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtVolume);
      }
      if (CxlVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CxlVolume);
      }
      if (BidCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidCount);
      }
      if (AskCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskCount);
      }
      if (BidVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidVolume);
      }
      if (AskVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskVolume);
      }
      if (Ebid != 0F) {
        size += 2 + 4;
      }
      if (Eask != 0F) {
        size += 2 + 4;
      }
      if (Ebsz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ebsz);
      }
      if (Easz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Easz);
      }
      if (Eage != 0F) {
        size += 2 + 4;
      }
      if (PrtSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtSide);
      }
      if (PrtTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PrtTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (OBid != 0F) {
        size += 2 + 4;
      }
      if (OAsk != 0F) {
        size += 2 + 4;
      }
      if (OBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBidSz);
      }
      if (OAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OAskSz);
      }
      if (OBidEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OBidEx);
      }
      if (OAskEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OAskEx);
      }
      if (OBidExSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBidExSz);
      }
      if (OAskExSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OAskExSz);
      }
      if (OBidCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBidCnt);
      }
      if (OAskCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OAskCnt);
      }
      if (OBid2 != 0F) {
        size += 2 + 4;
      }
      if (OAsk2 != 0F) {
        size += 2 + 4;
      }
      if (OBidSz2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBidSz2);
      }
      if (OAskSz2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OAskSz2);
      }
      if (OBidIv != 0D) {
        size += 2 + 8;
      }
      if (OAskIv != 0D) {
        size += 2 + 8;
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (Yrs != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (XDe != 0F) {
        size += 2 + 4;
      }
      if (XAxis != 0F) {
        size += 2 + 4;
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Multihedge);
      }
      if (FlexType != global::Spiderrock.Protobuf.FlexType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FlexType);
      }
      if (FlexRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FlexRoot);
      }
      if (PrtIv != 0F) {
        size += 2 + 4;
      }
      if (PrtDe != 0F) {
        size += 2 + 4;
      }
      if (PrtGa != 0F) {
        size += 2 + 4;
      }
      if (PrtTh != 0F) {
        size += 2 + 4;
      }
      if (PrtVe != 0F) {
        size += 2 + 4;
      }
      if (PrtRo != 0F) {
        size += 2 + 4;
      }
      if (CalcErr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalcErr);
      }
      if (SurfVol != 0F) {
        size += 2 + 4;
      }
      if (SurfOpx != 0F) {
        size += 2 + 4;
      }
      if (SurfAtm != 0F) {
        size += 2 + 4;
      }
      if (PrtProbability != 0F) {
        size += 2 + 4;
      }
      if (PrtProbabilityM2 != 0F) {
        size += 2 + 4;
      }
      if (PrtProbabilityM3 != 0F) {
        size += 2 + 4;
      }
      if (OBidM1 != 0F) {
        size += 2 + 4;
      }
      if (OAskM1 != 0F) {
        size += 2 + 4;
      }
      if (UBidM1 != 0D) {
        size += 2 + 8;
      }
      if (UAskM1 != 0D) {
        size += 2 + 8;
      }
      if (UPrcM1 != 0D) {
        size += 2 + 8;
      }
      if (SVolM1 != 0F) {
        size += 2 + 4;
      }
      if (SOpxM1 != 0F) {
        size += 2 + 4;
      }
      if (SDivM1 != 0F) {
        size += 2 + 4;
      }
      if (SErrM1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SErrM1);
      }
      if (PnlM1 != 0F) {
        size += 2 + 4;
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PnlM1Err);
      }
      if (OBidM10 != 0F) {
        size += 2 + 4;
      }
      if (OAskM10 != 0F) {
        size += 2 + 4;
      }
      if (UBidM10 != 0D) {
        size += 2 + 8;
      }
      if (UAskM10 != 0D) {
        size += 2 + 8;
      }
      if (UPrcM10 != 0D) {
        size += 2 + 8;
      }
      if (SVolM10 != 0F) {
        size += 2 + 4;
      }
      if (SOpxM10 != 0F) {
        size += 2 + 4;
      }
      if (SDivM10 != 0F) {
        size += 2 + 4;
      }
      if (SErrM10.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SErrM10);
      }
      if (PnlM10 != 0F) {
        size += 2 + 4;
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PnlM10Err);
      }
      if (OBidS1 != 0F) {
        size += 2 + 4;
      }
      if (OAskS1 != 0F) {
        size += 2 + 4;
      }
      if (UBidS1 != 0D) {
        size += 2 + 8;
      }
      if (UAskS1 != 0D) {
        size += 2 + 8;
      }
      if (UPrcS1 != 0D) {
        size += 2 + 8;
      }
      if (SVolS1 != 0F) {
        size += 2 + 4;
      }
      if (SOpxS1 != 0F) {
        size += 2 + 4;
      }
      if (SDivS1 != 0F) {
        size += 2 + 4;
      }
      if (SErrS1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SErrS1);
      }
      if (PnlS1 != 0F) {
        size += 2 + 4;
      }
      if (PnlS1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PnlS1Err);
      }
      if (OBidNext != 0F) {
        size += 2 + 4;
      }
      if (OAskNext != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionPrintSet other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.fkey_ != null) {
        if (fkey_ == null) {
          Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        Fkey.MergeFrom(other.Fkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.PrtExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        PrtExch = other.PrtExch;
      }
      if (other.PrtSize != 0) {
        PrtSize = other.PrtSize;
      }
      if (other.PrtPrice != 0F) {
        PrtPrice = other.PrtPrice;
      }
      if (other.PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        PrtType = other.PrtType;
      }
      if (other.PrtOrders != 0) {
        PrtOrders = other.PrtOrders;
      }
      if (other.PrtClusterNum != 0) {
        PrtClusterNum = other.PrtClusterNum;
      }
      if (other.PrtClusterSize != 0) {
        PrtClusterSize = other.PrtClusterSize;
      }
      if (other.PrtVolume != 0) {
        PrtVolume = other.PrtVolume;
      }
      if (other.CxlVolume != 0) {
        CxlVolume = other.CxlVolume;
      }
      if (other.BidCount != 0) {
        BidCount = other.BidCount;
      }
      if (other.AskCount != 0) {
        AskCount = other.AskCount;
      }
      if (other.BidVolume != 0) {
        BidVolume = other.BidVolume;
      }
      if (other.AskVolume != 0) {
        AskVolume = other.AskVolume;
      }
      if (other.Ebid != 0F) {
        Ebid = other.Ebid;
      }
      if (other.Eask != 0F) {
        Eask = other.Eask;
      }
      if (other.Ebsz != 0) {
        Ebsz = other.Ebsz;
      }
      if (other.Easz != 0) {
        Easz = other.Easz;
      }
      if (other.Eage != 0F) {
        Eage = other.Eage;
      }
      if (other.PrtSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        PrtSide = other.PrtSide;
      }
      if (other.PrtTimestamp != 0L) {
        PrtTimestamp = other.PrtTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.OBid != 0F) {
        OBid = other.OBid;
      }
      if (other.OAsk != 0F) {
        OAsk = other.OAsk;
      }
      if (other.OBidSz != 0) {
        OBidSz = other.OBidSz;
      }
      if (other.OAskSz != 0) {
        OAskSz = other.OAskSz;
      }
      if (other.OBidEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        OBidEx = other.OBidEx;
      }
      if (other.OAskEx != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        OAskEx = other.OAskEx;
      }
      if (other.OBidExSz != 0) {
        OBidExSz = other.OBidExSz;
      }
      if (other.OAskExSz != 0) {
        OAskExSz = other.OAskExSz;
      }
      if (other.OBidCnt != 0) {
        OBidCnt = other.OBidCnt;
      }
      if (other.OAskCnt != 0) {
        OAskCnt = other.OAskCnt;
      }
      if (other.OBid2 != 0F) {
        OBid2 = other.OBid2;
      }
      if (other.OAsk2 != 0F) {
        OAsk2 = other.OAsk2;
      }
      if (other.OBidSz2 != 0) {
        OBidSz2 = other.OBidSz2;
      }
      if (other.OAskSz2 != 0) {
        OAskSz2 = other.OAskSz2;
      }
      if (other.OBidIv != 0D) {
        OBidIv = other.OBidIv;
      }
      if (other.OAskIv != 0D) {
        OAskIv = other.OAskIv;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.Yrs != 0F) {
        Yrs = other.Yrs;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.XDe != 0F) {
        XDe = other.XDe;
      }
      if (other.XAxis != 0F) {
        XAxis = other.XAxis;
      }
      if (other.Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        Multihedge = other.Multihedge;
      }
      if (other.FlexType != global::Spiderrock.Protobuf.FlexType.Unspecified) {
        FlexType = other.FlexType;
      }
      if (other.FlexRoot.Length != 0) {
        FlexRoot = other.FlexRoot;
      }
      if (other.PrtIv != 0F) {
        PrtIv = other.PrtIv;
      }
      if (other.PrtDe != 0F) {
        PrtDe = other.PrtDe;
      }
      if (other.PrtGa != 0F) {
        PrtGa = other.PrtGa;
      }
      if (other.PrtTh != 0F) {
        PrtTh = other.PrtTh;
      }
      if (other.PrtVe != 0F) {
        PrtVe = other.PrtVe;
      }
      if (other.PrtRo != 0F) {
        PrtRo = other.PrtRo;
      }
      if (other.CalcErr.Length != 0) {
        CalcErr = other.CalcErr;
      }
      if (other.SurfVol != 0F) {
        SurfVol = other.SurfVol;
      }
      if (other.SurfOpx != 0F) {
        SurfOpx = other.SurfOpx;
      }
      if (other.SurfAtm != 0F) {
        SurfAtm = other.SurfAtm;
      }
      if (other.PrtProbability != 0F) {
        PrtProbability = other.PrtProbability;
      }
      if (other.PrtProbabilityM2 != 0F) {
        PrtProbabilityM2 = other.PrtProbabilityM2;
      }
      if (other.PrtProbabilityM3 != 0F) {
        PrtProbabilityM3 = other.PrtProbabilityM3;
      }
      if (other.OBidM1 != 0F) {
        OBidM1 = other.OBidM1;
      }
      if (other.OAskM1 != 0F) {
        OAskM1 = other.OAskM1;
      }
      if (other.UBidM1 != 0D) {
        UBidM1 = other.UBidM1;
      }
      if (other.UAskM1 != 0D) {
        UAskM1 = other.UAskM1;
      }
      if (other.UPrcM1 != 0D) {
        UPrcM1 = other.UPrcM1;
      }
      if (other.SVolM1 != 0F) {
        SVolM1 = other.SVolM1;
      }
      if (other.SOpxM1 != 0F) {
        SOpxM1 = other.SOpxM1;
      }
      if (other.SDivM1 != 0F) {
        SDivM1 = other.SDivM1;
      }
      if (other.SErrM1.Length != 0) {
        SErrM1 = other.SErrM1;
      }
      if (other.PnlM1 != 0F) {
        PnlM1 = other.PnlM1;
      }
      if (other.PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        PnlM1Err = other.PnlM1Err;
      }
      if (other.OBidM10 != 0F) {
        OBidM10 = other.OBidM10;
      }
      if (other.OAskM10 != 0F) {
        OAskM10 = other.OAskM10;
      }
      if (other.UBidM10 != 0D) {
        UBidM10 = other.UBidM10;
      }
      if (other.UAskM10 != 0D) {
        UAskM10 = other.UAskM10;
      }
      if (other.UPrcM10 != 0D) {
        UPrcM10 = other.UPrcM10;
      }
      if (other.SVolM10 != 0F) {
        SVolM10 = other.SVolM10;
      }
      if (other.SOpxM10 != 0F) {
        SOpxM10 = other.SOpxM10;
      }
      if (other.SDivM10 != 0F) {
        SDivM10 = other.SDivM10;
      }
      if (other.SErrM10.Length != 0) {
        SErrM10 = other.SErrM10;
      }
      if (other.PnlM10 != 0F) {
        PnlM10 = other.PnlM10;
      }
      if (other.PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        PnlM10Err = other.PnlM10Err;
      }
      if (other.OBidS1 != 0F) {
        OBidS1 = other.OBidS1;
      }
      if (other.OAskS1 != 0F) {
        OAskS1 = other.OAskS1;
      }
      if (other.UBidS1 != 0D) {
        UBidS1 = other.UBidS1;
      }
      if (other.UAskS1 != 0D) {
        UAskS1 = other.UAskS1;
      }
      if (other.UPrcS1 != 0D) {
        UPrcS1 = other.UPrcS1;
      }
      if (other.SVolS1 != 0F) {
        SVolS1 = other.SVolS1;
      }
      if (other.SOpxS1 != 0F) {
        SOpxS1 = other.SOpxS1;
      }
      if (other.SDivS1 != 0F) {
        SDivS1 = other.SDivS1;
      }
      if (other.SErrS1.Length != 0) {
        SErrS1 = other.SErrS1;
      }
      if (other.PnlS1 != 0F) {
        PnlS1 = other.PnlS1;
      }
      if (other.PnlS1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        PnlS1Err = other.PnlS1Err;
      }
      if (other.OBidNext != 0F) {
        OBidNext = other.OBidNext;
      }
      if (other.OAskNext != 0F) {
        OAskNext = other.OAskNext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 826: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 848: {
            PrtExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 872: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 901: {
            PrtPrice = input.ReadFloat();
            break;
          }
          case 920: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 944: {
            PrtOrders = input.ReadUInt32();
            break;
          }
          case 968: {
            PrtClusterNum = input.ReadInt32();
            break;
          }
          case 992: {
            PrtClusterSize = input.ReadInt32();
            break;
          }
          case 1016: {
            PrtVolume = input.ReadInt32();
            break;
          }
          case 1040: {
            CxlVolume = input.ReadInt32();
            break;
          }
          case 1064: {
            BidCount = input.ReadUInt32();
            break;
          }
          case 1088: {
            AskCount = input.ReadUInt32();
            break;
          }
          case 1112: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 1136: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1165: {
            Ebid = input.ReadFloat();
            break;
          }
          case 1189: {
            Eask = input.ReadFloat();
            break;
          }
          case 1208: {
            Ebsz = input.ReadInt32();
            break;
          }
          case 1232: {
            Easz = input.ReadInt32();
            break;
          }
          case 1261: {
            Eage = input.ReadFloat();
            break;
          }
          case 1280: {
            PrtSide = (global::Spiderrock.Protobuf.PrtSide) input.ReadEnum();
            break;
          }
          case 1304: {
            PrtTimestamp = input.ReadInt64();
            break;
          }
          case 1328: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1354: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1381: {
            OBid = input.ReadFloat();
            break;
          }
          case 1405: {
            OAsk = input.ReadFloat();
            break;
          }
          case 1424: {
            OBidSz = input.ReadInt32();
            break;
          }
          case 1448: {
            OAskSz = input.ReadInt32();
            break;
          }
          case 1472: {
            OBidEx = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1496: {
            OAskEx = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1520: {
            OBidExSz = input.ReadInt32();
            break;
          }
          case 1544: {
            OAskExSz = input.ReadInt32();
            break;
          }
          case 1568: {
            OBidCnt = input.ReadInt32();
            break;
          }
          case 1592: {
            OAskCnt = input.ReadInt32();
            break;
          }
          case 1621: {
            OBid2 = input.ReadFloat();
            break;
          }
          case 1645: {
            OAsk2 = input.ReadFloat();
            break;
          }
          case 1664: {
            OBidSz2 = input.ReadInt32();
            break;
          }
          case 1688: {
            OAskSz2 = input.ReadInt32();
            break;
          }
          case 1713: {
            UBid = input.ReadDouble();
            break;
          }
          case 1737: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1761: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1789: {
            Yrs = input.ReadFloat();
            break;
          }
          case 1813: {
            Rate = input.ReadFloat();
            break;
          }
          case 1837: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1861: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1885: {
            XDe = input.ReadFloat();
            break;
          }
          case 1909: {
            XAxis = input.ReadFloat();
            break;
          }
          case 1928: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 1952: {
            FlexType = (global::Spiderrock.Protobuf.FlexType) input.ReadEnum();
            break;
          }
          case 1978: {
            FlexRoot = input.ReadString();
            break;
          }
          case 2005: {
            PrtIv = input.ReadFloat();
            break;
          }
          case 2029: {
            PrtDe = input.ReadFloat();
            break;
          }
          case 2053: {
            PrtGa = input.ReadFloat();
            break;
          }
          case 2077: {
            PrtTh = input.ReadFloat();
            break;
          }
          case 2101: {
            PrtVe = input.ReadFloat();
            break;
          }
          case 2125: {
            PrtRo = input.ReadFloat();
            break;
          }
          case 2146: {
            CalcErr = input.ReadString();
            break;
          }
          case 2173: {
            SurfVol = input.ReadFloat();
            break;
          }
          case 2197: {
            SurfOpx = input.ReadFloat();
            break;
          }
          case 2221: {
            SurfAtm = input.ReadFloat();
            break;
          }
          case 2245: {
            PrtProbability = input.ReadFloat();
            break;
          }
          case 2269: {
            PrtProbabilityM2 = input.ReadFloat();
            break;
          }
          case 2293: {
            PrtProbabilityM3 = input.ReadFloat();
            break;
          }
          case 2317: {
            OBidM1 = input.ReadFloat();
            break;
          }
          case 2341: {
            OAskM1 = input.ReadFloat();
            break;
          }
          case 2361: {
            UBidM1 = input.ReadDouble();
            break;
          }
          case 2385: {
            UAskM1 = input.ReadDouble();
            break;
          }
          case 2409: {
            UPrcM1 = input.ReadDouble();
            break;
          }
          case 2437: {
            SVolM1 = input.ReadFloat();
            break;
          }
          case 2461: {
            SOpxM1 = input.ReadFloat();
            break;
          }
          case 2485: {
            SDivM1 = input.ReadFloat();
            break;
          }
          case 2506: {
            SErrM1 = input.ReadString();
            break;
          }
          case 2533: {
            PnlM1 = input.ReadFloat();
            break;
          }
          case 2552: {
            PnlM1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2581: {
            OBidM10 = input.ReadFloat();
            break;
          }
          case 2605: {
            OAskM10 = input.ReadFloat();
            break;
          }
          case 2625: {
            UBidM10 = input.ReadDouble();
            break;
          }
          case 2649: {
            UAskM10 = input.ReadDouble();
            break;
          }
          case 2673: {
            UPrcM10 = input.ReadDouble();
            break;
          }
          case 2701: {
            SVolM10 = input.ReadFloat();
            break;
          }
          case 2725: {
            SOpxM10 = input.ReadFloat();
            break;
          }
          case 2749: {
            SDivM10 = input.ReadFloat();
            break;
          }
          case 2770: {
            SErrM10 = input.ReadString();
            break;
          }
          case 2797: {
            PnlM10 = input.ReadFloat();
            break;
          }
          case 2816: {
            PnlM10Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2825: {
            OBidIv = input.ReadDouble();
            break;
          }
          case 2833: {
            OAskIv = input.ReadDouble();
            break;
          }
          case 2845: {
            OBidS1 = input.ReadFloat();
            break;
          }
          case 2853: {
            OAskS1 = input.ReadFloat();
            break;
          }
          case 2857: {
            UBidS1 = input.ReadDouble();
            break;
          }
          case 2865: {
            UAskS1 = input.ReadDouble();
            break;
          }
          case 2873: {
            UPrcS1 = input.ReadDouble();
            break;
          }
          case 2885: {
            SVolS1 = input.ReadFloat();
            break;
          }
          case 2893: {
            SOpxS1 = input.ReadFloat();
            break;
          }
          case 2901: {
            SDivS1 = input.ReadFloat();
            break;
          }
          case 2906: {
            SErrS1 = input.ReadString();
            break;
          }
          case 2917: {
            PnlS1 = input.ReadFloat();
            break;
          }
          case 2920: {
            PnlS1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2933: {
            OBidNext = input.ReadFloat();
            break;
          }
          case 2941: {
            OAskNext = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionPrintSet.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 826: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 848: {
            PrtExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 872: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 901: {
            PrtPrice = input.ReadFloat();
            break;
          }
          case 920: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 944: {
            PrtOrders = input.ReadUInt32();
            break;
          }
          case 968: {
            PrtClusterNum = input.ReadInt32();
            break;
          }
          case 992: {
            PrtClusterSize = input.ReadInt32();
            break;
          }
          case 1016: {
            PrtVolume = input.ReadInt32();
            break;
          }
          case 1040: {
            CxlVolume = input.ReadInt32();
            break;
          }
          case 1064: {
            BidCount = input.ReadUInt32();
            break;
          }
          case 1088: {
            AskCount = input.ReadUInt32();
            break;
          }
          case 1112: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 1136: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1165: {
            Ebid = input.ReadFloat();
            break;
          }
          case 1189: {
            Eask = input.ReadFloat();
            break;
          }
          case 1208: {
            Ebsz = input.ReadInt32();
            break;
          }
          case 1232: {
            Easz = input.ReadInt32();
            break;
          }
          case 1261: {
            Eage = input.ReadFloat();
            break;
          }
          case 1280: {
            PrtSide = (global::Spiderrock.Protobuf.PrtSide) input.ReadEnum();
            break;
          }
          case 1304: {
            PrtTimestamp = input.ReadInt64();
            break;
          }
          case 1328: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1354: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1381: {
            OBid = input.ReadFloat();
            break;
          }
          case 1405: {
            OAsk = input.ReadFloat();
            break;
          }
          case 1424: {
            OBidSz = input.ReadInt32();
            break;
          }
          case 1448: {
            OAskSz = input.ReadInt32();
            break;
          }
          case 1472: {
            OBidEx = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1496: {
            OAskEx = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1520: {
            OBidExSz = input.ReadInt32();
            break;
          }
          case 1544: {
            OAskExSz = input.ReadInt32();
            break;
          }
          case 1568: {
            OBidCnt = input.ReadInt32();
            break;
          }
          case 1592: {
            OAskCnt = input.ReadInt32();
            break;
          }
          case 1621: {
            OBid2 = input.ReadFloat();
            break;
          }
          case 1645: {
            OAsk2 = input.ReadFloat();
            break;
          }
          case 1664: {
            OBidSz2 = input.ReadInt32();
            break;
          }
          case 1688: {
            OAskSz2 = input.ReadInt32();
            break;
          }
          case 1713: {
            UBid = input.ReadDouble();
            break;
          }
          case 1737: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1761: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1789: {
            Yrs = input.ReadFloat();
            break;
          }
          case 1813: {
            Rate = input.ReadFloat();
            break;
          }
          case 1837: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1861: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1885: {
            XDe = input.ReadFloat();
            break;
          }
          case 1909: {
            XAxis = input.ReadFloat();
            break;
          }
          case 1928: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 1952: {
            FlexType = (global::Spiderrock.Protobuf.FlexType) input.ReadEnum();
            break;
          }
          case 1978: {
            FlexRoot = input.ReadString();
            break;
          }
          case 2005: {
            PrtIv = input.ReadFloat();
            break;
          }
          case 2029: {
            PrtDe = input.ReadFloat();
            break;
          }
          case 2053: {
            PrtGa = input.ReadFloat();
            break;
          }
          case 2077: {
            PrtTh = input.ReadFloat();
            break;
          }
          case 2101: {
            PrtVe = input.ReadFloat();
            break;
          }
          case 2125: {
            PrtRo = input.ReadFloat();
            break;
          }
          case 2146: {
            CalcErr = input.ReadString();
            break;
          }
          case 2173: {
            SurfVol = input.ReadFloat();
            break;
          }
          case 2197: {
            SurfOpx = input.ReadFloat();
            break;
          }
          case 2221: {
            SurfAtm = input.ReadFloat();
            break;
          }
          case 2245: {
            PrtProbability = input.ReadFloat();
            break;
          }
          case 2269: {
            PrtProbabilityM2 = input.ReadFloat();
            break;
          }
          case 2293: {
            PrtProbabilityM3 = input.ReadFloat();
            break;
          }
          case 2317: {
            OBidM1 = input.ReadFloat();
            break;
          }
          case 2341: {
            OAskM1 = input.ReadFloat();
            break;
          }
          case 2361: {
            UBidM1 = input.ReadDouble();
            break;
          }
          case 2385: {
            UAskM1 = input.ReadDouble();
            break;
          }
          case 2409: {
            UPrcM1 = input.ReadDouble();
            break;
          }
          case 2437: {
            SVolM1 = input.ReadFloat();
            break;
          }
          case 2461: {
            SOpxM1 = input.ReadFloat();
            break;
          }
          case 2485: {
            SDivM1 = input.ReadFloat();
            break;
          }
          case 2506: {
            SErrM1 = input.ReadString();
            break;
          }
          case 2533: {
            PnlM1 = input.ReadFloat();
            break;
          }
          case 2552: {
            PnlM1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2581: {
            OBidM10 = input.ReadFloat();
            break;
          }
          case 2605: {
            OAskM10 = input.ReadFloat();
            break;
          }
          case 2625: {
            UBidM10 = input.ReadDouble();
            break;
          }
          case 2649: {
            UAskM10 = input.ReadDouble();
            break;
          }
          case 2673: {
            UPrcM10 = input.ReadDouble();
            break;
          }
          case 2701: {
            SVolM10 = input.ReadFloat();
            break;
          }
          case 2725: {
            SOpxM10 = input.ReadFloat();
            break;
          }
          case 2749: {
            SDivM10 = input.ReadFloat();
            break;
          }
          case 2770: {
            SErrM10 = input.ReadString();
            break;
          }
          case 2797: {
            PnlM10 = input.ReadFloat();
            break;
          }
          case 2816: {
            PnlM10Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2825: {
            OBidIv = input.ReadDouble();
            break;
          }
          case 2833: {
            OAskIv = input.ReadDouble();
            break;
          }
          case 2845: {
            OBidS1 = input.ReadFloat();
            break;
          }
          case 2853: {
            OAskS1 = input.ReadFloat();
            break;
          }
          case 2857: {
            UBidS1 = input.ReadDouble();
            break;
          }
          case 2865: {
            UAskS1 = input.ReadDouble();
            break;
          }
          case 2873: {
            UPrcS1 = input.ReadDouble();
            break;
          }
          case 2885: {
            SVolS1 = input.ReadFloat();
            break;
          }
          case 2893: {
            SOpxS1 = input.ReadFloat();
            break;
          }
          case 2901: {
            SDivS1 = input.ReadFloat();
            break;
          }
          case 2906: {
            SErrS1 = input.ReadString();
            break;
          }
          case 2917: {
            PnlS1 = input.ReadFloat();
            break;
          }
          case 2920: {
            PnlS1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2933: {
            OBidNext = input.ReadFloat();
            break;
          }
          case 2941: {
            OAskNext = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OptionPrintSet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.OptionPrintSet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          prtNumber_ = other.prtNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        /// <summary>Field number for the "prt_number" field.</summary>
        public const int PrtNumberFieldNumber = 11;
        private long prtNumber_;
        /// <summary>
        /// Unique print set identifier, will increment but not guaranteed to be sequential
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long PrtNumber {
          get { return prtNumber_; }
          set {
            prtNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          if (PrtNumber != other.PrtNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (PrtNumber != 0L) hash ^= PrtNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (PrtNumber != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(PrtNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (PrtNumber != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(PrtNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (PrtNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrtNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          if (other.PrtNumber != 0L) {
            PrtNumber = other.PrtNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 88: {
                PrtNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 88: {
                PrtNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
