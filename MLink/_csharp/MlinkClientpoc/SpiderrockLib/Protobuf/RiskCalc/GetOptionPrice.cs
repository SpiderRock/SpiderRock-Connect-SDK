// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/RiskCalc/GetOptionPrice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/RiskCalc/GetOptionPrice.proto</summary>
  public static partial class GetOptionPriceReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/RiskCalc/GetOptionPrice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetOptionPriceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQcm90b2J1Zi9SaXNrQ2FsYy9HZXRPcHRpb25QcmljZS5wcm90bxITc3Bp",
            "ZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8imAgKDkdldE9wdGlvblBy",
            "aWNlEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5NZXNz",
            "YWdlTWV0YWRhdGESLQoEb2tleRjIASABKAsyHi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk9wdGlvbktleRILCgN2b2wYcCABKAESDQoFdV9wcmMYcyABKAESDQoF",
            "eWVhcnMYdiABKAESDAoEc2Rpdhh5IAEoARIMCgRyYXRlGHwgASgBEjIKB2V4",
            "X3R5cGUYfyABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLkV4ZXJjaXNlVHlw",
            "ZRIzCgdleF90aW1lGIIBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuRXhl",
            "cmNpc2VUaW1lEjwKEGhvbGlkYXlfY2FsZW5kYXIYyQEgASgOMiEuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5DYWxlbmRhckNvZGUSNQoLdGltZV9tZXRyaWMYhQEg",
            "ASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5UaW1lTWV0cmljEjcKCm1vZGVs",
            "X3R5cGUYkQEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5DYWxjTW9kZWxU",
            "eXBlEjUKC2NhbGNfZW5naW5lGJQBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQ2FsY0VuZ2luZRIvCgppbmNfZ3JlZWtzGJcBIAEoDjIaLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuWWVzTm8SDgoFcHJpY2UYmgEgASgBEhMKCmVmZl9zdHJp",
            "a2UYnQEgASgBEg8KBmlfZGF5cxjFASABKAUSDQoEZGRpdhjGASABKAISEAoH",
            "ZGRpdl9wVhjHASABKAISDgoFZGVsdGEYowEgASgCEg4KBWdhbW1hGKYBIAEo",
            "AhIOCgV0aGV0YRipASABKAISDQoEdmVnYRisASABKAISDgoFdm9sZ2EYrwEg",
            "ASgCEg4KBXZhbm5hGLIBIAEoAhIRCghkZV9kZWNheRi1ASABKAISDAoDcmhv",
            "GLgBIAEoAhIMCgNwaGkYuwEgASgCEg4KBWVycm9yGL4BIAEoCRIVCgxwcmlj",
            "ZXJfbW9kZWwYwQEgASgJEi4KCXRpbWVzdGFtcBjEASABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wElAKEWRpc2NyZXRlX2RpdmlkZW5kGIgBIAMo",
            "CzI0LnNwaWRlcnJvY2sucHJvdG9idWYuR2V0T3B0aW9uUHJpY2UuRGlzY3Jl",
            "dGVEaXZpZGVuZBpOChBEaXNjcmV0ZURpdmlkZW5kEikKBGRhdGUYiwEgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgZhbW91bnQYjgEgASgC",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.GetOptionPrice), global::Spiderrock.Protobuf.GetOptionPrice.Parser, new[]{ "Meta", "Okey", "Vol", "UPrc", "Years", "Sdiv", "Rate", "ExType", "ExTime", "HolidayCalendar", "TimeMetric", "ModelType", "CalcEngine", "IncGreeks", "Price", "EffStrike", "IDays", "Ddiv", "DdivPV", "Delta", "Gamma", "Theta", "Vega", "Volga", "Vanna", "DeDecay", "Rho", "Phi", "Error", "PricerModel", "Timestamp", "DiscreteDividend" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend), global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend.Parser, new[]{ "Date", "Amount" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetOptionPrice : pb::IMessage<GetOptionPrice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetOptionPrice> _parser = new pb::MessageParser<GetOptionPrice>(() => new GetOptionPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetOptionPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.GetOptionPriceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetOptionPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetOptionPrice(GetOptionPrice other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      okey_ = other.okey_ != null ? other.okey_.Clone() : null;
      vol_ = other.vol_;
      uPrc_ = other.uPrc_;
      years_ = other.years_;
      sdiv_ = other.sdiv_;
      rate_ = other.rate_;
      exType_ = other.exType_;
      exTime_ = other.exTime_;
      holidayCalendar_ = other.holidayCalendar_;
      timeMetric_ = other.timeMetric_;
      modelType_ = other.modelType_;
      calcEngine_ = other.calcEngine_;
      incGreeks_ = other.incGreeks_;
      price_ = other.price_;
      effStrike_ = other.effStrike_;
      iDays_ = other.iDays_;
      ddiv_ = other.ddiv_;
      ddivPV_ = other.ddivPV_;
      delta_ = other.delta_;
      gamma_ = other.gamma_;
      theta_ = other.theta_;
      vega_ = other.vega_;
      volga_ = other.volga_;
      vanna_ = other.vanna_;
      deDecay_ = other.deDecay_;
      rho_ = other.rho_;
      phi_ = other.phi_;
      error_ = other.error_;
      pricerModel_ = other.pricerModel_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      discreteDividend_ = other.discreteDividend_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetOptionPrice Clone() {
      return new GetOptionPrice(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "okey" field.</summary>
    public const int OkeyFieldNumber = 200;
    private global::Spiderrock.Protobuf.OptionKey okey_;
    /// <summary>
    /// can be listed or FLEX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey Okey {
      get { return okey_; }
      set {
        okey_ = value;
      }
    }

    /// <summary>Field number for the "vol" field.</summary>
    public const int VolFieldNumber = 112;
    private double vol_;
    /// <summary>
    /// volatility (will be SR surface volatility if not supplied)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vol {
      get { return vol_; }
      set {
        vol_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 115;
    private double uPrc_;
    /// <summary>
    /// underlying price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 118;
    private double years_;
    /// <summary>
    /// years-to-expiration (default uses SR volatility time value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 121;
    private double sdiv_;
    /// <summary>
    /// continuous stock dividend using for pricing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 124;
    private double rate_;
    /// <summary>
    /// discount rate used for pricing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 127;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// exercise type of the option (American or European)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "ex_time" field.</summary>
    public const int ExTimeFieldNumber = 130;
    private global::Spiderrock.Protobuf.ExerciseTime exTime_ = global::Spiderrock.Protobuf.ExerciseTime.Unspecified;
    /// <summary>
    /// exercise time (AM or PM)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseTime ExTime {
      get { return exTime_; }
      set {
        exTime_ = value;
      }
    }

    /// <summary>Field number for the "holiday_calendar" field.</summary>
    public const int HolidayCalendarFieldNumber = 201;
    private global::Spiderrock.Protobuf.CalendarCode holidayCalendar_ = global::Spiderrock.Protobuf.CalendarCode.Unspecified;
    /// <summary>
    /// holiday calendar code (eg. NYSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalendarCode HolidayCalendar {
      get { return holidayCalendar_; }
      set {
        holidayCalendar_ = value;
      }
    }

    /// <summary>Field number for the "time_metric" field.</summary>
    public const int TimeMetricFieldNumber = 133;
    private global::Spiderrock.Protobuf.TimeMetric timeMetric_ = global::Spiderrock.Protobuf.TimeMetric.Unspecified;
    /// <summary>
    /// time metric (VT70, Y252, Y365, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TimeMetric TimeMetric {
      get { return timeMetric_; }
      set {
        timeMetric_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 145;
    private global::Spiderrock.Protobuf.CalcModelType modelType_ = global::Spiderrock.Protobuf.CalcModelType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "calc_engine" field.</summary>
    public const int CalcEngineFieldNumber = 148;
    private global::Spiderrock.Protobuf.CalcEngine calcEngine_ = global::Spiderrock.Protobuf.CalcEngine.Unspecified;
    /// <summary>
    /// underlying calc engine:  FastHybrid (listed strikes + SR discrtete dividends only).  NumericX works for any strike/expiry + discrete dividend set but is significantly slower.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcEngine CalcEngine {
      get { return calcEngine_; }
      set {
        calcEngine_ = value;
      }
    }

    /// <summary>Field number for the "inc_greeks" field.</summary>
    public const int IncGreeksFieldNumber = 151;
    private global::Spiderrock.Protobuf.YesNo incGreeks_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// default (No)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IncGreeks {
      get { return incGreeks_; }
      set {
        incGreeks_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 154;
    private double price_;
    /// <summary>
    /// price (premium)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "eff_strike" field.</summary>
    public const int EffStrikeFieldNumber = 157;
    private double effStrike_;
    /// <summary>
    /// effective strike used to for pricing calc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStrike {
      get { return effStrike_; }
      set {
        effStrike_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 197;
    private int iDays_;
    /// <summary>
    /// interest days to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 198;
    private float ddiv_;
    /// <summary>
    /// sum of discrete dividend amounts payable prior to exercise (if any) (simple; not net present value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pV" field.</summary>
    public const int DdivPVFieldNumber = 199;
    private float ddivPV_;
    /// <summary>
    /// sum of present value of discrete dividend amounts payable prior to exercise (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPV {
      get { return ddivPV_; }
      set {
        ddivPV_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 163;
    private float delta_;
    /// <summary>
    /// delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 166;
    private float gamma_;
    /// <summary>
    /// gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 169;
    private float theta_;
    /// <summary>
    /// theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 172;
    private float vega_;
    /// <summary>
    /// vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "volga" field.</summary>
    public const int VolgaFieldNumber = 175;
    private float volga_;
    /// <summary>
    /// volga
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volga {
      get { return volga_; }
      set {
        volga_ = value;
      }
    }

    /// <summary>Field number for the "vanna" field.</summary>
    public const int VannaFieldNumber = 178;
    private float vanna_;
    /// <summary>
    /// vanna
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vanna {
      get { return vanna_; }
      set {
        vanna_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 181;
    private float deDecay_;
    /// <summary>
    /// delta decay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 184;
    private float rho_;
    /// <summary>
    /// rho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "phi" field.</summary>
    public const int PhiFieldNumber = 187;
    private float phi_;
    /// <summary>
    /// phi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Phi {
      get { return phi_; }
      set {
        phi_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 190;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pricer_model" field.</summary>
    public const int PricerModelFieldNumber = 193;
    private string pricerModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PricerModel {
      get { return pricerModel_; }
      set {
        pricerModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "discrete_dividend" field.</summary>
    public const int DiscreteDividendFieldNumber = 136;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend> _repeated_discreteDividend_codec
        = pb::FieldCodec.ForMessage(1090, global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend> discreteDividend_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.GetOptionPrice.Types.DiscreteDividend> DiscreteDividend {
      get { return discreteDividend_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetOptionPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetOptionPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Okey, other.Okey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vol, other.Vol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (ExType != other.ExType) return false;
      if (ExTime != other.ExTime) return false;
      if (HolidayCalendar != other.HolidayCalendar) return false;
      if (TimeMetric != other.TimeMetric) return false;
      if (ModelType != other.ModelType) return false;
      if (CalcEngine != other.CalcEngine) return false;
      if (IncGreeks != other.IncGreeks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStrike, other.EffStrike)) return false;
      if (IDays != other.IDays) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPV, other.DdivPV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volga, other.Volga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vanna, other.Vanna)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Phi, other.Phi)) return false;
      if (Error != other.Error) return false;
      if (PricerModel != other.PricerModel) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!discreteDividend_.Equals(other.discreteDividend_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (okey_ != null) hash ^= Okey.GetHashCode();
      if (Vol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vol);
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (Years != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Years);
      if (Sdiv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sdiv);
      if (Rate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rate);
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (ExTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) hash ^= ExTime.GetHashCode();
      if (HolidayCalendar != global::Spiderrock.Protobuf.CalendarCode.Unspecified) hash ^= HolidayCalendar.GetHashCode();
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) hash ^= TimeMetric.GetHashCode();
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) hash ^= ModelType.GetHashCode();
      if (CalcEngine != global::Spiderrock.Protobuf.CalcEngine.Unspecified) hash ^= CalcEngine.GetHashCode();
      if (IncGreeks != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IncGreeks.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (EffStrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStrike);
      if (IDays != 0) hash ^= IDays.GetHashCode();
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (DdivPV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPV);
      if (Delta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delta);
      if (Gamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gamma);
      if (Theta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Theta);
      if (Vega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega);
      if (Volga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volga);
      if (Vanna != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vanna);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (Rho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rho);
      if (Phi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Phi);
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (PricerModel.Length != 0) hash ^= PricerModel.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= discreteDividend_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (Vol != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(Vol);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UPrc);
      }
      if (Years != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(Years);
      }
      if (Sdiv != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(Sdiv);
      }
      if (Rate != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(Rate);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) ExType);
      }
      if (ExTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) ExTime);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) TimeMetric);
      }
      discreteDividend_.WriteTo(output, _repeated_discreteDividend_codec);
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) ModelType);
      }
      if (CalcEngine != global::Spiderrock.Protobuf.CalcEngine.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) CalcEngine);
      }
      if (IncGreeks != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) IncGreeks);
      }
      if (Price != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(Price);
      }
      if (EffStrike != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(EffStrike);
      }
      if (Delta != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Delta);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Gamma);
      }
      if (Theta != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Theta);
      }
      if (Vega != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Vega);
      }
      if (Volga != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Volga);
      }
      if (Vanna != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Vanna);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(DeDecay);
      }
      if (Rho != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Rho);
      }
      if (Phi != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Phi);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(Error);
      }
      if (PricerModel.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(PricerModel);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      if (IDays != 0) {
        output.WriteRawTag(168, 12);
        output.WriteInt32(IDays);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(181, 12);
        output.WriteFloat(Ddiv);
      }
      if (DdivPV != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(DdivPV);
      }
      if (okey_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Okey);
      }
      if (HolidayCalendar != global::Spiderrock.Protobuf.CalendarCode.Unspecified) {
        output.WriteRawTag(200, 12);
        output.WriteEnum((int) HolidayCalendar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (Vol != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(Vol);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UPrc);
      }
      if (Years != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(Years);
      }
      if (Sdiv != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(Sdiv);
      }
      if (Rate != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(Rate);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) ExType);
      }
      if (ExTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) ExTime);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) TimeMetric);
      }
      discreteDividend_.WriteTo(ref output, _repeated_discreteDividend_codec);
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) ModelType);
      }
      if (CalcEngine != global::Spiderrock.Protobuf.CalcEngine.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) CalcEngine);
      }
      if (IncGreeks != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) IncGreeks);
      }
      if (Price != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(Price);
      }
      if (EffStrike != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(EffStrike);
      }
      if (Delta != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Delta);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Gamma);
      }
      if (Theta != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Theta);
      }
      if (Vega != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Vega);
      }
      if (Volga != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(Volga);
      }
      if (Vanna != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Vanna);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(DeDecay);
      }
      if (Rho != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Rho);
      }
      if (Phi != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Phi);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(Error);
      }
      if (PricerModel.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(PricerModel);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      if (IDays != 0) {
        output.WriteRawTag(168, 12);
        output.WriteInt32(IDays);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(181, 12);
        output.WriteFloat(Ddiv);
      }
      if (DdivPV != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(DdivPV);
      }
      if (okey_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Okey);
      }
      if (HolidayCalendar != global::Spiderrock.Protobuf.CalendarCode.Unspecified) {
        output.WriteRawTag(200, 12);
        output.WriteEnum((int) HolidayCalendar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (okey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Okey);
      }
      if (Vol != 0D) {
        size += 2 + 8;
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (Years != 0D) {
        size += 2 + 8;
      }
      if (Sdiv != 0D) {
        size += 2 + 8;
      }
      if (Rate != 0D) {
        size += 2 + 8;
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (ExTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExTime);
      }
      if (HolidayCalendar != global::Spiderrock.Protobuf.CalendarCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HolidayCalendar);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeMetric);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (CalcEngine != global::Spiderrock.Protobuf.CalcEngine.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CalcEngine);
      }
      if (IncGreeks != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncGreeks);
      }
      if (Price != 0D) {
        size += 2 + 8;
      }
      if (EffStrike != 0D) {
        size += 2 + 8;
      }
      if (IDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IDays);
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (DdivPV != 0F) {
        size += 2 + 4;
      }
      if (Delta != 0F) {
        size += 2 + 4;
      }
      if (Gamma != 0F) {
        size += 2 + 4;
      }
      if (Theta != 0F) {
        size += 2 + 4;
      }
      if (Vega != 0F) {
        size += 2 + 4;
      }
      if (Volga != 0F) {
        size += 2 + 4;
      }
      if (Vanna != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (Rho != 0F) {
        size += 2 + 4;
      }
      if (Phi != 0F) {
        size += 2 + 4;
      }
      if (Error.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (PricerModel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PricerModel);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += discreteDividend_.CalculateSize(_repeated_discreteDividend_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetOptionPrice other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.okey_ != null) {
        if (okey_ == null) {
          Okey = new global::Spiderrock.Protobuf.OptionKey();
        }
        Okey.MergeFrom(other.Okey);
      }
      if (other.Vol != 0D) {
        Vol = other.Vol;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.Years != 0D) {
        Years = other.Years;
      }
      if (other.Sdiv != 0D) {
        Sdiv = other.Sdiv;
      }
      if (other.Rate != 0D) {
        Rate = other.Rate;
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.ExTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        ExTime = other.ExTime;
      }
      if (other.HolidayCalendar != global::Spiderrock.Protobuf.CalendarCode.Unspecified) {
        HolidayCalendar = other.HolidayCalendar;
      }
      if (other.TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        TimeMetric = other.TimeMetric;
      }
      if (other.ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      if (other.CalcEngine != global::Spiderrock.Protobuf.CalcEngine.Unspecified) {
        CalcEngine = other.CalcEngine;
      }
      if (other.IncGreeks != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IncGreeks = other.IncGreeks;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.EffStrike != 0D) {
        EffStrike = other.EffStrike;
      }
      if (other.IDays != 0) {
        IDays = other.IDays;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.DdivPV != 0F) {
        DdivPV = other.DdivPV;
      }
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.Theta != 0F) {
        Theta = other.Theta;
      }
      if (other.Vega != 0F) {
        Vega = other.Vega;
      }
      if (other.Volga != 0F) {
        Volga = other.Volga;
      }
      if (other.Vanna != 0F) {
        Vanna = other.Vanna;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.Rho != 0F) {
        Rho = other.Rho;
      }
      if (other.Phi != 0F) {
        Phi = other.Phi;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.PricerModel.Length != 0) {
        PricerModel = other.PricerModel;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      discreteDividend_.Add(other.discreteDividend_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 897: {
            Vol = input.ReadDouble();
            break;
          }
          case 921: {
            UPrc = input.ReadDouble();
            break;
          }
          case 945: {
            Years = input.ReadDouble();
            break;
          }
          case 969: {
            Sdiv = input.ReadDouble();
            break;
          }
          case 993: {
            Rate = input.ReadDouble();
            break;
          }
          case 1016: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1040: {
            ExTime = (global::Spiderrock.Protobuf.ExerciseTime) input.ReadEnum();
            break;
          }
          case 1064: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 1090: {
            discreteDividend_.AddEntriesFrom(input, _repeated_discreteDividend_codec);
            break;
          }
          case 1160: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1184: {
            CalcEngine = (global::Spiderrock.Protobuf.CalcEngine) input.ReadEnum();
            break;
          }
          case 1208: {
            IncGreeks = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1233: {
            Price = input.ReadDouble();
            break;
          }
          case 1257: {
            EffStrike = input.ReadDouble();
            break;
          }
          case 1309: {
            Delta = input.ReadFloat();
            break;
          }
          case 1333: {
            Gamma = input.ReadFloat();
            break;
          }
          case 1357: {
            Theta = input.ReadFloat();
            break;
          }
          case 1381: {
            Vega = input.ReadFloat();
            break;
          }
          case 1405: {
            Volga = input.ReadFloat();
            break;
          }
          case 1429: {
            Vanna = input.ReadFloat();
            break;
          }
          case 1453: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1477: {
            Rho = input.ReadFloat();
            break;
          }
          case 1501: {
            Phi = input.ReadFloat();
            break;
          }
          case 1522: {
            Error = input.ReadString();
            break;
          }
          case 1546: {
            PricerModel = input.ReadString();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1576: {
            IDays = input.ReadInt32();
            break;
          }
          case 1589: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1597: {
            DdivPV = input.ReadFloat();
            break;
          }
          case 1602: {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(Okey);
            break;
          }
          case 1608: {
            HolidayCalendar = (global::Spiderrock.Protobuf.CalendarCode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 897: {
            Vol = input.ReadDouble();
            break;
          }
          case 921: {
            UPrc = input.ReadDouble();
            break;
          }
          case 945: {
            Years = input.ReadDouble();
            break;
          }
          case 969: {
            Sdiv = input.ReadDouble();
            break;
          }
          case 993: {
            Rate = input.ReadDouble();
            break;
          }
          case 1016: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1040: {
            ExTime = (global::Spiderrock.Protobuf.ExerciseTime) input.ReadEnum();
            break;
          }
          case 1064: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 1090: {
            discreteDividend_.AddEntriesFrom(ref input, _repeated_discreteDividend_codec);
            break;
          }
          case 1160: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1184: {
            CalcEngine = (global::Spiderrock.Protobuf.CalcEngine) input.ReadEnum();
            break;
          }
          case 1208: {
            IncGreeks = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1233: {
            Price = input.ReadDouble();
            break;
          }
          case 1257: {
            EffStrike = input.ReadDouble();
            break;
          }
          case 1309: {
            Delta = input.ReadFloat();
            break;
          }
          case 1333: {
            Gamma = input.ReadFloat();
            break;
          }
          case 1357: {
            Theta = input.ReadFloat();
            break;
          }
          case 1381: {
            Vega = input.ReadFloat();
            break;
          }
          case 1405: {
            Volga = input.ReadFloat();
            break;
          }
          case 1429: {
            Vanna = input.ReadFloat();
            break;
          }
          case 1453: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1477: {
            Rho = input.ReadFloat();
            break;
          }
          case 1501: {
            Phi = input.ReadFloat();
            break;
          }
          case 1522: {
            Error = input.ReadString();
            break;
          }
          case 1546: {
            PricerModel = input.ReadString();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1576: {
            IDays = input.ReadInt32();
            break;
          }
          case 1589: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1597: {
            DdivPV = input.ReadFloat();
            break;
          }
          case 1602: {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(Okey);
            break;
          }
          case 1608: {
            HolidayCalendar = (global::Spiderrock.Protobuf.CalendarCode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GetOptionPrice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class DiscreteDividend : pb::IMessage<DiscreteDividend>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DiscreteDividend> _parser = new pb::MessageParser<DiscreteDividend>(() => new DiscreteDividend());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DiscreteDividend> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.GetOptionPrice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscreteDividend() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscreteDividend(DiscreteDividend other) : this() {
          date_ = other.date_ != null ? other.date_.Clone() : null;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscreteDividend Clone() {
          return new DiscreteDividend(this);
        }

        /// <summary>Field number for the "date" field.</summary>
        public const int DateFieldNumber = 139;
        private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
          get { return date_; }
          set {
            date_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 142;
        private float amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DiscreteDividend);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DiscreteDividend other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Date, other.Date)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (date_ != null) hash ^= Date.GetHashCode();
          if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (date_ != null) {
            output.WriteRawTag(218, 8);
            output.WriteMessage(Date);
          }
          if (Amount != 0F) {
            output.WriteRawTag(245, 8);
            output.WriteFloat(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (date_ != null) {
            output.WriteRawTag(218, 8);
            output.WriteMessage(Date);
          }
          if (Amount != 0F) {
            output.WriteRawTag(245, 8);
            output.WriteFloat(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (date_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Date);
          }
          if (Amount != 0F) {
            size += 2 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DiscreteDividend other) {
          if (other == null) {
            return;
          }
          if (other.date_ != null) {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Date.MergeFrom(other.Date);
          }
          if (other.Amount != 0F) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1114: {
                if (date_ == null) {
                  Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(Date);
                break;
              }
              case 1141: {
                Amount = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1114: {
                if (date_ == null) {
                  Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(Date);
                break;
              }
              case 1141: {
                Amount = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
