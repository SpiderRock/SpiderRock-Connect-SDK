// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SpreadMktData/SpreadBookMarkup.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SpreadMktData/SpreadBookMarkup.proto</summary>
  public static partial class SpreadBookMarkupReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SpreadMktData/SpreadBookMarkup.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpreadBookMarkupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1Qcm90b2J1Zi9TcHJlYWRNa3REYXRhL1NwcmVhZEJvb2tNYXJrdXAucHJv",
            "dG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIu0RChBTcHJl",
            "YWRCb29rTWFya3VwEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5NZXNzYWdlTWV0YWRhdGESOAoEcGtleRgCIAEoCzIqLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3ByZWFkQm9va01hcmt1cC5QS2V5Ei4KBnRpY2tlchhk",
            "IAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EhMKC3NSc3By",
            "ZWFkX2lEGGUgASgDEjYKDHByaWNlX2Zvcm1hdBhnIAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuUHJpY2VGb3JtYXQSEgoKYmlkX3ByaWNlMRhqIAEoARI3",
            "ChNpc19iaWRfcHJpY2UxX3ZhbGlkGG0gASgOMhouc3BpZGVycm9jay5wcm90",
            "b2J1Zi5ZZXNObxISCgphc2tfcHJpY2UxGHAgASgBEjcKE2lzX2Fza19wcmlj",
            "ZTFfdmFsaWQYcyABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEhEK",
            "CWJpZF9zaXplMRh2IAEoBRIRCglhc2tfc2l6ZTEYeSABKAUSEQoJYmlkX21h",
            "c2sxGHwgASgNEhEKCWFza19tYXNrMRh/IAEoDRIwCgliaWRfZXhjaDEYggEg",
            "ASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5PcHRFeGNoEjAKCWFza19leGNo",
            "MRiFASABKA4yHC5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdEV4Y2gSLQoIYmlk",
            "X3RpbWUYiAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBItCghh",
            "c2tfdGltZRiLASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUK",
            "C3VwZGF0ZV90eXBlGI4BIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuVXBk",
            "YXRlVHlwZRIVCgxudW1fc3RrX2xlZ3MYkQEgASgFEhUKDG51bV9mdXRfbGVn",
            "cxiUASABKAUSFQoMbnVtX29wdF9sZWdzGJcBIAEoBRIxCgx1c2VyX2RlZmlu",
            "ZWQYnQEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxI7CgxzcHJl",
            "YWRfY2xhc3MYqAIgASgOMiQuc3BpZGVycm9jay5wcm90b2J1Zi5Ub29sU3By",
            "ZWFkQ2xhc3MSMwoOY29udGFpbnNfaGVkZ2UYqQIgASgOMhouc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5ZZXNObxIUCgtsZWdfYmlkX3ByYximASABKAESFAoLbGVn",
            "X2Fza19wcmMYqQEgASgBEhMKCmxlZ19iaWRfc3oYrAEgASgFEhMKCmxlZ19h",
            "c2tfc3oYrwEgASgFEhEKCHN1cmZfcHJjGLIBIAEoARITCgpzdXJmX2RlbHRh",
            "GLUBIAEoAhITCgpzdXJmX2dhbW1hGLgBIAEoAhISCglzdXJmX3ZlZ2EYuwEg",
            "ASgCEhUKDHN1cmZfd3RfdmVnYRi+ASABKAISEwoKc3VyZl9lcnJvchjBASAB",
            "KAUSLwoKbWluX2V4cGlyeRjEASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi8KCm1heF9leHBpcnkYxwEgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBISCgltaW5feWVhcnMYygEgASgCEhIKCW1heF95ZWFycxjN",
            "ASABKAISEQoIcmVmX3VQcmMY0AEgASgCEhQKC3ByaW50X3ByaWNlGNMBIAEo",
            "AhIvCgpwcmludF90aW1lGNYBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASEwoKcHJpbnRfc2l6ZRjZASABKAUSFQoMcHJpbnRfdm9sdW1lGNwB",
            "IAEoBRIQCgdncnBfbnVtGN8BIAEoBRIWCg1zZWN1cml0eV9kZXNjGOIBIAEo",
            "CRISCglmaWx0ZXJfaWQY5QEgASgDEi4KCXRpbWVzdGFtcBjoASABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEkYKC21hcmt1cF9sZWdzGOsBIAMo",
            "CzIwLnNwaWRlcnJvY2sucHJvdG9idWYuU3ByZWFkQm9va01hcmt1cC5NYXJr",
            "dXBMZWdzGmEKBFBLZXkSLAoEc2tleRgKIAEoCzIeLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuVGlja2VyS2V5EisKB2lzX3Rlc3QYCyABKA4yGi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlllc05vGqcECgpNYXJrdXBMZWdzEjQKC2xlZ19zZWNfa2V5",
            "GO4BIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0aW9uS2V5EjcKDGxl",
            "Z19zZWNfdHlwZRjxASABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJL",
            "ZXlUeXBlEjsKEGxlZ19wcmljZV9mb3JtYXQY9AEgASgOMiAuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5QcmljZUZvcm1hdBIaChFsZWdfc2VjdXJpdHlfZGVzYxj3",
            "ASABKAkSLwoIbGVnX3NpZGUY+gEgASgOMhwuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5CdXlTZWxsEhIKCWxlZ19yYXRpbxj9ASABKA0SFgoNbGVnX2JpZF9wcmlj",
            "ZRiAAiABKAESFQoMbGVnX2JpZF9zaXplGIMCIAEoBRIWCg1sZWdfYXNrX3By",
            "aWNlGIYCIAEoARIVCgxsZWdfYXNrX3NpemUYiQIgASgFEhIKCWxlZ195ZWFy",
            "cxiMAiABKAISEQoIbGVnX3VQcmMYjwIgASgBEhUKDGxlZ19zdXJmX3ZvbBiY",
            "AiABKAISFwoObGVnX3N1cmZfcHJpY2UYmwIgASgCEhQKC2xlZ19zdXJmX2Rl",
            "GJ4CIAEoAhIUCgtsZWdfc3VyZl9nYRihAiABKAISFAoLbGVnX3N1cmZfdmUY",
            "pAIgASgCEhUKDGxlZ19zdXJmX2VychinAiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpreadBookMarkup), global::Spiderrock.Protobuf.SpreadBookMarkup.Parser, new[]{ "Meta", "Pkey", "Ticker", "SRspreadID", "PriceFormat", "BidPrice1", "IsBidPrice1Valid", "AskPrice1", "IsAskPrice1Valid", "BidSize1", "AskSize1", "BidMask1", "AskMask1", "BidExch1", "AskExch1", "BidTime", "AskTime", "UpdateType", "NumStkLegs", "NumFutLegs", "NumOptLegs", "UserDefined", "SpreadClass", "ContainsHedge", "LegBidPrc", "LegAskPrc", "LegBidSz", "LegAskSz", "SurfPrc", "SurfDelta", "SurfGamma", "SurfVega", "SurfWtVega", "SurfError", "MinExpiry", "MaxExpiry", "MinYears", "MaxYears", "RefUPrc", "PrintPrice", "PrintTime", "PrintSize", "PrintVolume", "GrpNum", "SecurityDesc", "FilterId", "Timestamp", "MarkupLegs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey), global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey.Parser, new[]{ "Skey", "IsTest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs), global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs.Parser, new[]{ "LegSecKey", "LegSecType", "LegPriceFormat", "LegSecurityDesc", "LegSide", "LegRatio", "LegBidPrice", "LegBidSize", "LegAskPrice", "LegAskSize", "LegYears", "LegUPrc", "LegSurfVol", "LegSurfPrice", "LegSurfDe", "LegSurfGa", "LegSurfVe", "LegSurfErr" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Live spread quotes with SpiderRock markup details for equity and future option spreads.
  /// </summary>
  public sealed partial class SpreadBookMarkup : pb::IMessage<SpreadBookMarkup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpreadBookMarkup> _parser = new pb::MessageParser<SpreadBookMarkup>(() => new SpreadBookMarkup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpreadBookMarkup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpreadBookMarkupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpreadBookMarkup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpreadBookMarkup(SpreadBookMarkup other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      sRspreadID_ = other.sRspreadID_;
      priceFormat_ = other.priceFormat_;
      bidPrice1_ = other.bidPrice1_;
      isBidPrice1Valid_ = other.isBidPrice1Valid_;
      askPrice1_ = other.askPrice1_;
      isAskPrice1Valid_ = other.isAskPrice1Valid_;
      bidSize1_ = other.bidSize1_;
      askSize1_ = other.askSize1_;
      bidMask1_ = other.bidMask1_;
      askMask1_ = other.askMask1_;
      bidExch1_ = other.bidExch1_;
      askExch1_ = other.askExch1_;
      bidTime_ = other.bidTime_ != null ? other.bidTime_.Clone() : null;
      askTime_ = other.askTime_ != null ? other.askTime_.Clone() : null;
      updateType_ = other.updateType_;
      numStkLegs_ = other.numStkLegs_;
      numFutLegs_ = other.numFutLegs_;
      numOptLegs_ = other.numOptLegs_;
      userDefined_ = other.userDefined_;
      spreadClass_ = other.spreadClass_;
      containsHedge_ = other.containsHedge_;
      legBidPrc_ = other.legBidPrc_;
      legAskPrc_ = other.legAskPrc_;
      legBidSz_ = other.legBidSz_;
      legAskSz_ = other.legAskSz_;
      surfPrc_ = other.surfPrc_;
      surfDelta_ = other.surfDelta_;
      surfGamma_ = other.surfGamma_;
      surfVega_ = other.surfVega_;
      surfWtVega_ = other.surfWtVega_;
      surfError_ = other.surfError_;
      minExpiry_ = other.minExpiry_ != null ? other.minExpiry_.Clone() : null;
      maxExpiry_ = other.maxExpiry_ != null ? other.maxExpiry_.Clone() : null;
      minYears_ = other.minYears_;
      maxYears_ = other.maxYears_;
      refUPrc_ = other.refUPrc_;
      printPrice_ = other.printPrice_;
      printTime_ = other.printTime_ != null ? other.printTime_.Clone() : null;
      printSize_ = other.printSize_;
      printVolume_ = other.printVolume_;
      grpNum_ = other.grpNum_;
      securityDesc_ = other.securityDesc_;
      filterId_ = other.filterId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      markupLegs_ = other.markupLegs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpreadBookMarkup Clone() {
      return new SpreadBookMarkup(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// common spread underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "sRspread_iD" field.</summary>
    public const int SRspreadIDFieldNumber = 101;
    private long sRspreadID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SRspreadID {
      get { return sRspreadID_; }
      set {
        sRspreadID_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 103;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "bid_price1" field.</summary>
    public const int BidPrice1FieldNumber = 106;
    private double bidPrice1_;
    /// <summary>
    /// bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPrice1 {
      get { return bidPrice1_; }
      set {
        bidPrice1_ = value;
      }
    }

    /// <summary>Field number for the "is_bid_price1_valid" field.</summary>
    public const int IsBidPrice1ValidFieldNumber = 109;
    private global::Spiderrock.Protobuf.YesNo isBidPrice1Valid_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsBidPrice1Valid {
      get { return isBidPrice1Valid_; }
      set {
        isBidPrice1Valid_ = value;
      }
    }

    /// <summary>Field number for the "ask_price1" field.</summary>
    public const int AskPrice1FieldNumber = 112;
    private double askPrice1_;
    /// <summary>
    /// ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPrice1 {
      get { return askPrice1_; }
      set {
        askPrice1_ = value;
      }
    }

    /// <summary>Field number for the "is_ask_price1_valid" field.</summary>
    public const int IsAskPrice1ValidFieldNumber = 115;
    private global::Spiderrock.Protobuf.YesNo isAskPrice1Valid_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsAskPrice1Valid {
      get { return isAskPrice1Valid_; }
      set {
        isAskPrice1Valid_ = value;
      }
    }

    /// <summary>Field number for the "bid_size1" field.</summary>
    public const int BidSize1FieldNumber = 118;
    private int bidSize1_;
    /// <summary>
    /// cumulative size at bidPrice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSize1 {
      get { return bidSize1_; }
      set {
        bidSize1_ = value;
      }
    }

    /// <summary>Field number for the "ask_size1" field.</summary>
    public const int AskSize1FieldNumber = 121;
    private int askSize1_;
    /// <summary>
    /// cumulative size at askPrice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSize1 {
      get { return askSize1_; }
      set {
        askSize1_ = value;
      }
    }

    /// <summary>Field number for the "bid_mask1" field.</summary>
    public const int BidMask1FieldNumber = 124;
    private uint bidMask1_;
    /// <summary>
    /// exchange bid bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidMask1 {
      get { return bidMask1_; }
      set {
        bidMask1_ = value;
      }
    }

    /// <summary>Field number for the "ask_mask1" field.</summary>
    public const int AskMask1FieldNumber = 127;
    private uint askMask1_;
    /// <summary>
    /// exchange ask bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskMask1 {
      get { return askMask1_; }
      set {
        askMask1_ = value;
      }
    }

    /// <summary>Field number for the "bid_exch1" field.</summary>
    public const int BidExch1FieldNumber = 130;
    private global::Spiderrock.Protobuf.OptExch bidExch1_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// exchange at bid price with the largest size (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch BidExch1 {
      get { return bidExch1_; }
      set {
        bidExch1_ = value;
      }
    }

    /// <summary>Field number for the "ask_exch1" field.</summary>
    public const int AskExch1FieldNumber = 133;
    private global::Spiderrock.Protobuf.OptExch askExch1_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// exchange at ask price with the largest size (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch AskExch1 {
      get { return askExch1_; }
      set {
        askExch1_ = value;
      }
    }

    /// <summary>Field number for the "bid_time" field.</summary>
    public const int BidTimeFieldNumber = 136;
    private global::Google.Protobuf.WellKnownTypes.Timestamp bidTime_;
    /// <summary>
    /// last bid price or size change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp BidTime {
      get { return bidTime_; }
      set {
        bidTime_ = value;
      }
    }

    /// <summary>Field number for the "ask_time" field.</summary>
    public const int AskTimeFieldNumber = 139;
    private global::Google.Protobuf.WellKnownTypes.Timestamp askTime_;
    /// <summary>
    /// last ask price or size change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AskTime {
      get { return askTime_; }
      set {
        askTime_ = value;
      }
    }

    /// <summary>Field number for the "update_type" field.</summary>
    public const int UpdateTypeFieldNumber = 142;
    private global::Spiderrock.Protobuf.UpdateType updateType_ = global::Spiderrock.Protobuf.UpdateType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UpdateType UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "num_stk_legs" field.</summary>
    public const int NumStkLegsFieldNumber = 145;
    private int numStkLegs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumStkLegs {
      get { return numStkLegs_; }
      set {
        numStkLegs_ = value;
      }
    }

    /// <summary>Field number for the "num_fut_legs" field.</summary>
    public const int NumFutLegsFieldNumber = 148;
    private int numFutLegs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumFutLegs {
      get { return numFutLegs_; }
      set {
        numFutLegs_ = value;
      }
    }

    /// <summary>Field number for the "num_opt_legs" field.</summary>
    public const int NumOptLegsFieldNumber = 151;
    private int numOptLegs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptLegs {
      get { return numOptLegs_; }
      set {
        numOptLegs_ = value;
      }
    }

    /// <summary>Field number for the "user_defined" field.</summary>
    public const int UserDefinedFieldNumber = 157;
    private global::Spiderrock.Protobuf.YesNo userDefined_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UserDefined {
      get { return userDefined_; }
      set {
        userDefined_ = value;
      }
    }

    /// <summary>Field number for the "spread_class" field.</summary>
    public const int SpreadClassFieldNumber = 296;
    private global::Spiderrock.Protobuf.ToolSpreadClass spreadClass_ = global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ToolSpreadClass SpreadClass {
      get { return spreadClass_; }
      set {
        spreadClass_ = value;
      }
    }

    /// <summary>Field number for the "contains_hedge" field.</summary>
    public const int ContainsHedgeFieldNumber = 297;
    private global::Spiderrock.Protobuf.YesNo containsHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsHedge {
      get { return containsHedge_; }
      set {
        containsHedge_ = value;
      }
    }

    /// <summary>Field number for the "leg_bid_prc" field.</summary>
    public const int LegBidPrcFieldNumber = 166;
    private double legBidPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LegBidPrc {
      get { return legBidPrc_; }
      set {
        legBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "leg_ask_prc" field.</summary>
    public const int LegAskPrcFieldNumber = 169;
    private double legAskPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LegAskPrc {
      get { return legAskPrc_; }
      set {
        legAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "leg_bid_sz" field.</summary>
    public const int LegBidSzFieldNumber = 172;
    private int legBidSz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegBidSz {
      get { return legBidSz_; }
      set {
        legBidSz_ = value;
      }
    }

    /// <summary>Field number for the "leg_ask_sz" field.</summary>
    public const int LegAskSzFieldNumber = 175;
    private int legAskSz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegAskSz {
      get { return legAskSz_; }
      set {
        legAskSz_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc" field.</summary>
    public const int SurfPrcFieldNumber = 178;
    private double surfPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SurfPrc {
      get { return surfPrc_; }
      set {
        surfPrc_ = value;
      }
    }

    /// <summary>Field number for the "surf_delta" field.</summary>
    public const int SurfDeltaFieldNumber = 181;
    private float surfDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfDelta {
      get { return surfDelta_; }
      set {
        surfDelta_ = value;
      }
    }

    /// <summary>Field number for the "surf_gamma" field.</summary>
    public const int SurfGammaFieldNumber = 184;
    private float surfGamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfGamma {
      get { return surfGamma_; }
      set {
        surfGamma_ = value;
      }
    }

    /// <summary>Field number for the "surf_vega" field.</summary>
    public const int SurfVegaFieldNumber = 187;
    private float surfVega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVega {
      get { return surfVega_; }
      set {
        surfVega_ = value;
      }
    }

    /// <summary>Field number for the "surf_wt_vega" field.</summary>
    public const int SurfWtVegaFieldNumber = 190;
    private float surfWtVega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfWtVega {
      get { return surfWtVega_; }
      set {
        surfWtVega_ = value;
      }
    }

    /// <summary>Field number for the "surf_error" field.</summary>
    public const int SurfErrorFieldNumber = 193;
    private int surfError_;
    /// <summary>
    /// error code from surface price calc (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SurfError {
      get { return surfError_; }
      set {
        surfError_ = value;
      }
    }

    /// <summary>Field number for the "min_expiry" field.</summary>
    public const int MinExpiryFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp minExpiry_;
    /// <summary>
    /// expiry of earliest option leg(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MinExpiry {
      get { return minExpiry_; }
      set {
        minExpiry_ = value;
      }
    }

    /// <summary>Field number for the "max_expiry" field.</summary>
    public const int MaxExpiryFieldNumber = 199;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxExpiry_;
    /// <summary>
    /// expiry of latest option leg(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxExpiry {
      get { return maxExpiry_; }
      set {
        maxExpiry_ = value;
      }
    }

    /// <summary>Field number for the "min_years" field.</summary>
    public const int MinYearsFieldNumber = 202;
    private float minYears_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinYears {
      get { return minYears_; }
      set {
        minYears_ = value;
      }
    }

    /// <summary>Field number for the "max_years" field.</summary>
    public const int MaxYearsFieldNumber = 205;
    private float maxYears_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxYears {
      get { return maxYears_; }
      set {
        maxYears_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc" field.</summary>
    public const int RefUPrcFieldNumber = 208;
    private float refUPrc_;
    /// <summary>
    /// reference underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefUPrc {
      get { return refUPrc_; }
      set {
        refUPrc_ = value;
      }
    }

    /// <summary>Field number for the "print_price" field.</summary>
    public const int PrintPriceFieldNumber = 211;
    private float printPrice_;
    /// <summary>
    /// last spread print price (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrintPrice {
      get { return printPrice_; }
      set {
        printPrice_ = value;
      }
    }

    /// <summary>Field number for the "print_time" field.</summary>
    public const int PrintTimeFieldNumber = 214;
    private global::Google.Protobuf.WellKnownTypes.Timestamp printTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PrintTime {
      get { return printTime_; }
      set {
        printTime_ = value;
      }
    }

    /// <summary>Field number for the "print_size" field.</summary>
    public const int PrintSizeFieldNumber = 217;
    private int printSize_;
    /// <summary>
    /// last spread print size (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrintSize {
      get { return printSize_; }
      set {
        printSize_ = value;
      }
    }

    /// <summary>Field number for the "print_volume" field.</summary>
    public const int PrintVolumeFieldNumber = 220;
    private int printVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrintVolume {
      get { return printVolume_; }
      set {
        printVolume_ = value;
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 223;
    private int grpNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "security_desc" field.</summary>
    public const int SecurityDescFieldNumber = 226;
    private string securityDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityDesc {
      get { return securityDesc_; }
      set {
        securityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter_id" field.</summary>
    public const int FilterIdFieldNumber = 229;
    private long filterId_;
    /// <summary>
    /// tool server filter request ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FilterId {
      get { return filterId_; }
      set {
        filterId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 232;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "markup_legs" field.</summary>
    public const int MarkupLegsFieldNumber = 235;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs> _repeated_markupLegs_codec
        = pb::FieldCodec.ForMessage(1882, global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs> markupLegs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.SpreadBookMarkup.Types.MarkupLegs> MarkupLegs {
      get { return markupLegs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpreadBookMarkup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpreadBookMarkup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SRspreadID != other.SRspreadID) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice1, other.BidPrice1)) return false;
      if (IsBidPrice1Valid != other.IsBidPrice1Valid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice1, other.AskPrice1)) return false;
      if (IsAskPrice1Valid != other.IsAskPrice1Valid) return false;
      if (BidSize1 != other.BidSize1) return false;
      if (AskSize1 != other.AskSize1) return false;
      if (BidMask1 != other.BidMask1) return false;
      if (AskMask1 != other.AskMask1) return false;
      if (BidExch1 != other.BidExch1) return false;
      if (AskExch1 != other.AskExch1) return false;
      if (!object.Equals(BidTime, other.BidTime)) return false;
      if (!object.Equals(AskTime, other.AskTime)) return false;
      if (UpdateType != other.UpdateType) return false;
      if (NumStkLegs != other.NumStkLegs) return false;
      if (NumFutLegs != other.NumFutLegs) return false;
      if (NumOptLegs != other.NumOptLegs) return false;
      if (UserDefined != other.UserDefined) return false;
      if (SpreadClass != other.SpreadClass) return false;
      if (ContainsHedge != other.ContainsHedge) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegBidPrc, other.LegBidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegAskPrc, other.LegAskPrc)) return false;
      if (LegBidSz != other.LegBidSz) return false;
      if (LegAskSz != other.LegAskSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SurfPrc, other.SurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfDelta, other.SurfDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfGamma, other.SurfGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVega, other.SurfVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfWtVega, other.SurfWtVega)) return false;
      if (SurfError != other.SurfError) return false;
      if (!object.Equals(MinExpiry, other.MinExpiry)) return false;
      if (!object.Equals(MaxExpiry, other.MaxExpiry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinYears, other.MinYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxYears, other.MaxYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefUPrc, other.RefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrintPrice, other.PrintPrice)) return false;
      if (!object.Equals(PrintTime, other.PrintTime)) return false;
      if (PrintSize != other.PrintSize) return false;
      if (PrintVolume != other.PrintVolume) return false;
      if (GrpNum != other.GrpNum) return false;
      if (SecurityDesc != other.SecurityDesc) return false;
      if (FilterId != other.FilterId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!markupLegs_.Equals(other.markupLegs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SRspreadID != 0L) hash ^= SRspreadID.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (BidPrice1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice1);
      if (IsBidPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsBidPrice1Valid.GetHashCode();
      if (AskPrice1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice1);
      if (IsAskPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsAskPrice1Valid.GetHashCode();
      if (BidSize1 != 0) hash ^= BidSize1.GetHashCode();
      if (AskSize1 != 0) hash ^= AskSize1.GetHashCode();
      if (BidMask1 != 0) hash ^= BidMask1.GetHashCode();
      if (AskMask1 != 0) hash ^= AskMask1.GetHashCode();
      if (BidExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= BidExch1.GetHashCode();
      if (AskExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= AskExch1.GetHashCode();
      if (bidTime_ != null) hash ^= BidTime.GetHashCode();
      if (askTime_ != null) hash ^= AskTime.GetHashCode();
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) hash ^= UpdateType.GetHashCode();
      if (NumStkLegs != 0) hash ^= NumStkLegs.GetHashCode();
      if (NumFutLegs != 0) hash ^= NumFutLegs.GetHashCode();
      if (NumOptLegs != 0) hash ^= NumOptLegs.GetHashCode();
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UserDefined.GetHashCode();
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) hash ^= SpreadClass.GetHashCode();
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsHedge.GetHashCode();
      if (LegBidPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegBidPrc);
      if (LegAskPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegAskPrc);
      if (LegBidSz != 0) hash ^= LegBidSz.GetHashCode();
      if (LegAskSz != 0) hash ^= LegAskSz.GetHashCode();
      if (SurfPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SurfPrc);
      if (SurfDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfDelta);
      if (SurfGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfGamma);
      if (SurfVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVega);
      if (SurfWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfWtVega);
      if (SurfError != 0) hash ^= SurfError.GetHashCode();
      if (minExpiry_ != null) hash ^= MinExpiry.GetHashCode();
      if (maxExpiry_ != null) hash ^= MaxExpiry.GetHashCode();
      if (MinYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinYears);
      if (MaxYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxYears);
      if (RefUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefUPrc);
      if (PrintPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrintPrice);
      if (printTime_ != null) hash ^= PrintTime.GetHashCode();
      if (PrintSize != 0) hash ^= PrintSize.GetHashCode();
      if (PrintVolume != 0) hash ^= PrintVolume.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (SecurityDesc.Length != 0) hash ^= SecurityDesc.GetHashCode();
      if (FilterId != 0L) hash ^= FilterId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= markupLegs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SRspreadID != 0L) {
        output.WriteRawTag(168, 6);
        output.WriteInt64(SRspreadID);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) PriceFormat);
      }
      if (BidPrice1 != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(BidPrice1);
      }
      if (IsBidPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) IsBidPrice1Valid);
      }
      if (AskPrice1 != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(AskPrice1);
      }
      if (IsAskPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IsAskPrice1Valid);
      }
      if (BidSize1 != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(BidSize1);
      }
      if (AskSize1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AskSize1);
      }
      if (BidMask1 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(BidMask1);
      }
      if (AskMask1 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(AskMask1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) BidExch1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) AskExch1);
      }
      if (bidTime_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(BidTime);
      }
      if (askTime_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(AskTime);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) UpdateType);
      }
      if (NumStkLegs != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NumStkLegs);
      }
      if (NumFutLegs != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(NumFutLegs);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NumOptLegs);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) UserDefined);
      }
      if (LegBidPrc != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(LegBidPrc);
      }
      if (LegAskPrc != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(LegAskPrc);
      }
      if (LegBidSz != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(LegBidSz);
      }
      if (LegAskSz != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(LegAskSz);
      }
      if (SurfPrc != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(SurfPrc);
      }
      if (SurfDelta != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SurfDelta);
      }
      if (SurfGamma != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SurfGamma);
      }
      if (SurfVega != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(SurfVega);
      }
      if (SurfWtVega != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(SurfWtVega);
      }
      if (SurfError != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(SurfError);
      }
      if (minExpiry_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(MinExpiry);
      }
      if (maxExpiry_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(MaxExpiry);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(MaxYears);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(RefUPrc);
      }
      if (PrintPrice != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PrintPrice);
      }
      if (printTime_ != null) {
        output.WriteRawTag(178, 13);
        output.WriteMessage(PrintTime);
      }
      if (PrintSize != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(PrintSize);
      }
      if (PrintVolume != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(PrintVolume);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(GrpNum);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(SecurityDesc);
      }
      if (FilterId != 0L) {
        output.WriteRawTag(168, 14);
        output.WriteInt64(FilterId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(Timestamp);
      }
      markupLegs_.WriteTo(output, _repeated_markupLegs_codec);
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(192, 18);
        output.WriteEnum((int) SpreadClass);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 18);
        output.WriteEnum((int) ContainsHedge);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SRspreadID != 0L) {
        output.WriteRawTag(168, 6);
        output.WriteInt64(SRspreadID);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) PriceFormat);
      }
      if (BidPrice1 != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(BidPrice1);
      }
      if (IsBidPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) IsBidPrice1Valid);
      }
      if (AskPrice1 != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(AskPrice1);
      }
      if (IsAskPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IsAskPrice1Valid);
      }
      if (BidSize1 != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(BidSize1);
      }
      if (AskSize1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AskSize1);
      }
      if (BidMask1 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(BidMask1);
      }
      if (AskMask1 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(AskMask1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) BidExch1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) AskExch1);
      }
      if (bidTime_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(BidTime);
      }
      if (askTime_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(AskTime);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) UpdateType);
      }
      if (NumStkLegs != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NumStkLegs);
      }
      if (NumFutLegs != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(NumFutLegs);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NumOptLegs);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) UserDefined);
      }
      if (LegBidPrc != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(LegBidPrc);
      }
      if (LegAskPrc != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(LegAskPrc);
      }
      if (LegBidSz != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(LegBidSz);
      }
      if (LegAskSz != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(LegAskSz);
      }
      if (SurfPrc != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(SurfPrc);
      }
      if (SurfDelta != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SurfDelta);
      }
      if (SurfGamma != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SurfGamma);
      }
      if (SurfVega != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(SurfVega);
      }
      if (SurfWtVega != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(SurfWtVega);
      }
      if (SurfError != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(SurfError);
      }
      if (minExpiry_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(MinExpiry);
      }
      if (maxExpiry_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(MaxExpiry);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(MaxYears);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(RefUPrc);
      }
      if (PrintPrice != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PrintPrice);
      }
      if (printTime_ != null) {
        output.WriteRawTag(178, 13);
        output.WriteMessage(PrintTime);
      }
      if (PrintSize != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(PrintSize);
      }
      if (PrintVolume != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(PrintVolume);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(GrpNum);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(SecurityDesc);
      }
      if (FilterId != 0L) {
        output.WriteRawTag(168, 14);
        output.WriteInt64(FilterId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(Timestamp);
      }
      markupLegs_.WriteTo(ref output, _repeated_markupLegs_codec);
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(192, 18);
        output.WriteEnum((int) SpreadClass);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 18);
        output.WriteEnum((int) ContainsHedge);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SRspreadID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SRspreadID);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (BidPrice1 != 0D) {
        size += 2 + 8;
      }
      if (IsBidPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsBidPrice1Valid);
      }
      if (AskPrice1 != 0D) {
        size += 2 + 8;
      }
      if (IsAskPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsAskPrice1Valid);
      }
      if (BidSize1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSize1);
      }
      if (AskSize1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSize1);
      }
      if (BidMask1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask1);
      }
      if (AskMask1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BidExch1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AskExch1);
      }
      if (bidTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BidTime);
      }
      if (askTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AskTime);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (NumStkLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumStkLegs);
      }
      if (NumFutLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumFutLegs);
      }
      if (NumOptLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptLegs);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserDefined);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadClass);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsHedge);
      }
      if (LegBidPrc != 0D) {
        size += 2 + 8;
      }
      if (LegAskPrc != 0D) {
        size += 2 + 8;
      }
      if (LegBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegBidSz);
      }
      if (LegAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegAskSz);
      }
      if (SurfPrc != 0D) {
        size += 2 + 8;
      }
      if (SurfDelta != 0F) {
        size += 2 + 4;
      }
      if (SurfGamma != 0F) {
        size += 2 + 4;
      }
      if (SurfVega != 0F) {
        size += 2 + 4;
      }
      if (SurfWtVega != 0F) {
        size += 2 + 4;
      }
      if (SurfError != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SurfError);
      }
      if (minExpiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinExpiry);
      }
      if (maxExpiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxExpiry);
      }
      if (MinYears != 0F) {
        size += 2 + 4;
      }
      if (MaxYears != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc != 0F) {
        size += 2 + 4;
      }
      if (PrintPrice != 0F) {
        size += 2 + 4;
      }
      if (printTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrintTime);
      }
      if (PrintSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrintSize);
      }
      if (PrintVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrintVolume);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (SecurityDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityDesc);
      }
      if (FilterId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FilterId);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += markupLegs_.CalculateSize(_repeated_markupLegs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpreadBookMarkup other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SRspreadID != 0L) {
        SRspreadID = other.SRspreadID;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.BidPrice1 != 0D) {
        BidPrice1 = other.BidPrice1;
      }
      if (other.IsBidPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsBidPrice1Valid = other.IsBidPrice1Valid;
      }
      if (other.AskPrice1 != 0D) {
        AskPrice1 = other.AskPrice1;
      }
      if (other.IsAskPrice1Valid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsAskPrice1Valid = other.IsAskPrice1Valid;
      }
      if (other.BidSize1 != 0) {
        BidSize1 = other.BidSize1;
      }
      if (other.AskSize1 != 0) {
        AskSize1 = other.AskSize1;
      }
      if (other.BidMask1 != 0) {
        BidMask1 = other.BidMask1;
      }
      if (other.AskMask1 != 0) {
        AskMask1 = other.AskMask1;
      }
      if (other.BidExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        BidExch1 = other.BidExch1;
      }
      if (other.AskExch1 != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        AskExch1 = other.AskExch1;
      }
      if (other.bidTime_ != null) {
        if (bidTime_ == null) {
          BidTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        BidTime.MergeFrom(other.BidTime);
      }
      if (other.askTime_ != null) {
        if (askTime_ == null) {
          AskTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AskTime.MergeFrom(other.AskTime);
      }
      if (other.UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        UpdateType = other.UpdateType;
      }
      if (other.NumStkLegs != 0) {
        NumStkLegs = other.NumStkLegs;
      }
      if (other.NumFutLegs != 0) {
        NumFutLegs = other.NumFutLegs;
      }
      if (other.NumOptLegs != 0) {
        NumOptLegs = other.NumOptLegs;
      }
      if (other.UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UserDefined = other.UserDefined;
      }
      if (other.SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        SpreadClass = other.SpreadClass;
      }
      if (other.ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsHedge = other.ContainsHedge;
      }
      if (other.LegBidPrc != 0D) {
        LegBidPrc = other.LegBidPrc;
      }
      if (other.LegAskPrc != 0D) {
        LegAskPrc = other.LegAskPrc;
      }
      if (other.LegBidSz != 0) {
        LegBidSz = other.LegBidSz;
      }
      if (other.LegAskSz != 0) {
        LegAskSz = other.LegAskSz;
      }
      if (other.SurfPrc != 0D) {
        SurfPrc = other.SurfPrc;
      }
      if (other.SurfDelta != 0F) {
        SurfDelta = other.SurfDelta;
      }
      if (other.SurfGamma != 0F) {
        SurfGamma = other.SurfGamma;
      }
      if (other.SurfVega != 0F) {
        SurfVega = other.SurfVega;
      }
      if (other.SurfWtVega != 0F) {
        SurfWtVega = other.SurfWtVega;
      }
      if (other.SurfError != 0) {
        SurfError = other.SurfError;
      }
      if (other.minExpiry_ != null) {
        if (minExpiry_ == null) {
          MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MinExpiry.MergeFrom(other.MinExpiry);
      }
      if (other.maxExpiry_ != null) {
        if (maxExpiry_ == null) {
          MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxExpiry.MergeFrom(other.MaxExpiry);
      }
      if (other.MinYears != 0F) {
        MinYears = other.MinYears;
      }
      if (other.MaxYears != 0F) {
        MaxYears = other.MaxYears;
      }
      if (other.RefUPrc != 0F) {
        RefUPrc = other.RefUPrc;
      }
      if (other.PrintPrice != 0F) {
        PrintPrice = other.PrintPrice;
      }
      if (other.printTime_ != null) {
        if (printTime_ == null) {
          PrintTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PrintTime.MergeFrom(other.PrintTime);
      }
      if (other.PrintSize != 0) {
        PrintSize = other.PrintSize;
      }
      if (other.PrintVolume != 0) {
        PrintVolume = other.PrintVolume;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.SecurityDesc.Length != 0) {
        SecurityDesc = other.SecurityDesc;
      }
      if (other.FilterId != 0L) {
        FilterId = other.FilterId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      markupLegs_.Add(other.markupLegs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            SRspreadID = input.ReadInt64();
            break;
          }
          case 824: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 849: {
            BidPrice1 = input.ReadDouble();
            break;
          }
          case 872: {
            IsBidPrice1Valid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 897: {
            AskPrice1 = input.ReadDouble();
            break;
          }
          case 920: {
            IsAskPrice1Valid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            BidSize1 = input.ReadInt32();
            break;
          }
          case 968: {
            AskSize1 = input.ReadInt32();
            break;
          }
          case 992: {
            BidMask1 = input.ReadUInt32();
            break;
          }
          case 1016: {
            AskMask1 = input.ReadUInt32();
            break;
          }
          case 1040: {
            BidExch1 = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1064: {
            AskExch1 = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1090: {
            if (bidTime_ == null) {
              BidTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(BidTime);
            break;
          }
          case 1114: {
            if (askTime_ == null) {
              AskTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AskTime);
            break;
          }
          case 1136: {
            UpdateType = (global::Spiderrock.Protobuf.UpdateType) input.ReadEnum();
            break;
          }
          case 1160: {
            NumStkLegs = input.ReadInt32();
            break;
          }
          case 1184: {
            NumFutLegs = input.ReadInt32();
            break;
          }
          case 1208: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 1256: {
            UserDefined = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1329: {
            LegBidPrc = input.ReadDouble();
            break;
          }
          case 1353: {
            LegAskPrc = input.ReadDouble();
            break;
          }
          case 1376: {
            LegBidSz = input.ReadInt32();
            break;
          }
          case 1400: {
            LegAskSz = input.ReadInt32();
            break;
          }
          case 1425: {
            SurfPrc = input.ReadDouble();
            break;
          }
          case 1453: {
            SurfDelta = input.ReadFloat();
            break;
          }
          case 1477: {
            SurfGamma = input.ReadFloat();
            break;
          }
          case 1501: {
            SurfVega = input.ReadFloat();
            break;
          }
          case 1525: {
            SurfWtVega = input.ReadFloat();
            break;
          }
          case 1544: {
            SurfError = input.ReadInt32();
            break;
          }
          case 1570: {
            if (minExpiry_ == null) {
              MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MinExpiry);
            break;
          }
          case 1594: {
            if (maxExpiry_ == null) {
              MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExpiry);
            break;
          }
          case 1621: {
            MinYears = input.ReadFloat();
            break;
          }
          case 1645: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 1669: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 1693: {
            PrintPrice = input.ReadFloat();
            break;
          }
          case 1714: {
            if (printTime_ == null) {
              PrintTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrintTime);
            break;
          }
          case 1736: {
            PrintSize = input.ReadInt32();
            break;
          }
          case 1760: {
            PrintVolume = input.ReadInt32();
            break;
          }
          case 1784: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1810: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 1832: {
            FilterId = input.ReadInt64();
            break;
          }
          case 1858: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1882: {
            markupLegs_.AddEntriesFrom(input, _repeated_markupLegs_codec);
            break;
          }
          case 2368: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 2376: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpreadBookMarkup.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            SRspreadID = input.ReadInt64();
            break;
          }
          case 824: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 849: {
            BidPrice1 = input.ReadDouble();
            break;
          }
          case 872: {
            IsBidPrice1Valid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 897: {
            AskPrice1 = input.ReadDouble();
            break;
          }
          case 920: {
            IsAskPrice1Valid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            BidSize1 = input.ReadInt32();
            break;
          }
          case 968: {
            AskSize1 = input.ReadInt32();
            break;
          }
          case 992: {
            BidMask1 = input.ReadUInt32();
            break;
          }
          case 1016: {
            AskMask1 = input.ReadUInt32();
            break;
          }
          case 1040: {
            BidExch1 = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1064: {
            AskExch1 = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1090: {
            if (bidTime_ == null) {
              BidTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(BidTime);
            break;
          }
          case 1114: {
            if (askTime_ == null) {
              AskTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AskTime);
            break;
          }
          case 1136: {
            UpdateType = (global::Spiderrock.Protobuf.UpdateType) input.ReadEnum();
            break;
          }
          case 1160: {
            NumStkLegs = input.ReadInt32();
            break;
          }
          case 1184: {
            NumFutLegs = input.ReadInt32();
            break;
          }
          case 1208: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 1256: {
            UserDefined = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1329: {
            LegBidPrc = input.ReadDouble();
            break;
          }
          case 1353: {
            LegAskPrc = input.ReadDouble();
            break;
          }
          case 1376: {
            LegBidSz = input.ReadInt32();
            break;
          }
          case 1400: {
            LegAskSz = input.ReadInt32();
            break;
          }
          case 1425: {
            SurfPrc = input.ReadDouble();
            break;
          }
          case 1453: {
            SurfDelta = input.ReadFloat();
            break;
          }
          case 1477: {
            SurfGamma = input.ReadFloat();
            break;
          }
          case 1501: {
            SurfVega = input.ReadFloat();
            break;
          }
          case 1525: {
            SurfWtVega = input.ReadFloat();
            break;
          }
          case 1544: {
            SurfError = input.ReadInt32();
            break;
          }
          case 1570: {
            if (minExpiry_ == null) {
              MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MinExpiry);
            break;
          }
          case 1594: {
            if (maxExpiry_ == null) {
              MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExpiry);
            break;
          }
          case 1621: {
            MinYears = input.ReadFloat();
            break;
          }
          case 1645: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 1669: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 1693: {
            PrintPrice = input.ReadFloat();
            break;
          }
          case 1714: {
            if (printTime_ == null) {
              PrintTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrintTime);
            break;
          }
          case 1736: {
            PrintSize = input.ReadInt32();
            break;
          }
          case 1760: {
            PrintVolume = input.ReadInt32();
            break;
          }
          case 1784: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1810: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 1832: {
            FilterId = input.ReadInt64();
            break;
          }
          case 1858: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1882: {
            markupLegs_.AddEntriesFrom(ref input, _repeated_markupLegs_codec);
            break;
          }
          case 2368: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 2376: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpreadBookMarkup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpreadBookMarkup.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          skey_ = other.skey_ != null ? other.skey_.Clone() : null;
          isTest_ = other.isTest_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "skey" field.</summary>
        public const int SkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey skey_;
        /// <summary>
        /// SR Spread Key (should have corresponding ProductDefinition record)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Skey {
          get { return skey_; }
          set {
            skey_ = value;
          }
        }

        /// <summary>Field number for the "is_test" field.</summary>
        public const int IsTestFieldNumber = 11;
        private global::Spiderrock.Protobuf.YesNo isTest_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        /// <summary>
        /// Yes indicates that response is made of entirely of isTest=Yes SpreadExchOrders
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo IsTest {
          get { return isTest_; }
          set {
            isTest_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Skey, other.Skey)) return false;
          if (IsTest != other.IsTest) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (skey_ != null) hash ^= Skey.GetHashCode();
          if (IsTest != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTest.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (skey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Skey);
          }
          if (IsTest != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) IsTest);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (skey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Skey);
          }
          if (IsTest != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) IsTest);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (skey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skey);
          }
          if (IsTest != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsTest);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.skey_ != null) {
            if (skey_ == null) {
              Skey = new global::Spiderrock.Protobuf.TickerKey();
            }
            Skey.MergeFrom(other.Skey);
          }
          if (other.IsTest != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            IsTest = other.IsTest;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (skey_ == null) {
                  Skey = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Skey);
                break;
              }
              case 88: {
                IsTest = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (skey_ == null) {
                  Skey = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Skey);
                break;
              }
              case 88: {
                IsTest = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class MarkupLegs : pb::IMessage<MarkupLegs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MarkupLegs> _parser = new pb::MessageParser<MarkupLegs>(() => new MarkupLegs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<MarkupLegs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpreadBookMarkup.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MarkupLegs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MarkupLegs(MarkupLegs other) : this() {
          legSecKey_ = other.legSecKey_ != null ? other.legSecKey_.Clone() : null;
          legSecType_ = other.legSecType_;
          legPriceFormat_ = other.legPriceFormat_;
          legSecurityDesc_ = other.legSecurityDesc_;
          legSide_ = other.legSide_;
          legRatio_ = other.legRatio_;
          legBidPrice_ = other.legBidPrice_;
          legBidSize_ = other.legBidSize_;
          legAskPrice_ = other.legAskPrice_;
          legAskSize_ = other.legAskSize_;
          legYears_ = other.legYears_;
          legUPrc_ = other.legUPrc_;
          legSurfVol_ = other.legSurfVol_;
          legSurfPrice_ = other.legSurfPrice_;
          legSurfDe_ = other.legSurfDe_;
          legSurfGa_ = other.legSurfGa_;
          legSurfVe_ = other.legSurfVe_;
          legSurfErr_ = other.legSurfErr_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MarkupLegs Clone() {
          return new MarkupLegs(this);
        }

        /// <summary>Field number for the "leg_sec_key" field.</summary>
        public const int LegSecKeyFieldNumber = 238;
        private global::Spiderrock.Protobuf.OptionKey legSecKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey LegSecKey {
          get { return legSecKey_; }
          set {
            legSecKey_ = value;
          }
        }

        /// <summary>Field number for the "leg_sec_type" field.</summary>
        public const int LegSecTypeFieldNumber = 241;
        private global::Spiderrock.Protobuf.SpdrKeyType legSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType LegSecType {
          get { return legSecType_; }
          set {
            legSecType_ = value;
          }
        }

        /// <summary>Field number for the "leg_price_format" field.</summary>
        public const int LegPriceFormatFieldNumber = 244;
        private global::Spiderrock.Protobuf.PriceFormat legPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PriceFormat LegPriceFormat {
          get { return legPriceFormat_; }
          set {
            legPriceFormat_ = value;
          }
        }

        /// <summary>Field number for the "leg_security_desc" field.</summary>
        public const int LegSecurityDescFieldNumber = 247;
        private string legSecurityDesc_ = "";
        /// <summary>
        /// Security description
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string LegSecurityDesc {
          get { return legSecurityDesc_; }
          set {
            legSecurityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "leg_side" field.</summary>
        public const int LegSideFieldNumber = 250;
        private global::Spiderrock.Protobuf.BuySell legSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell LegSide {
          get { return legSide_; }
          set {
            legSide_ = value;
          }
        }

        /// <summary>Field number for the "leg_ratio" field.</summary>
        public const int LegRatioFieldNumber = 253;
        private uint legRatio_;
        /// <summary>
        /// leg ratio (1, 2, etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint LegRatio {
          get { return legRatio_; }
          set {
            legRatio_ = value;
          }
        }

        /// <summary>Field number for the "leg_bid_price" field.</summary>
        public const int LegBidPriceFieldNumber = 256;
        private double legBidPrice_;
        /// <summary>
        /// leg market bid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegBidPrice {
          get { return legBidPrice_; }
          set {
            legBidPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_bid_size" field.</summary>
        public const int LegBidSizeFieldNumber = 259;
        private int legBidSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LegBidSize {
          get { return legBidSize_; }
          set {
            legBidSize_ = value;
          }
        }

        /// <summary>Field number for the "leg_ask_price" field.</summary>
        public const int LegAskPriceFieldNumber = 262;
        private double legAskPrice_;
        /// <summary>
        /// leg market ask
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegAskPrice {
          get { return legAskPrice_; }
          set {
            legAskPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_ask_size" field.</summary>
        public const int LegAskSizeFieldNumber = 265;
        private int legAskSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LegAskSize {
          get { return legAskSize_; }
          set {
            legAskSize_ = value;
          }
        }

        /// <summary>Field number for the "leg_years" field.</summary>
        public const int LegYearsFieldNumber = 268;
        private float legYears_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegYears {
          get { return legYears_; }
          set {
            legYears_ = value;
          }
        }

        /// <summary>Field number for the "leg_uPrc" field.</summary>
        public const int LegUPrcFieldNumber = 271;
        private double legUPrc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegUPrc {
          get { return legUPrc_; }
          set {
            legUPrc_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_vol" field.</summary>
        public const int LegSurfVolFieldNumber = 280;
        private float legSurfVol_;
        /// <summary>
        /// leg surface volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfVol {
          get { return legSurfVol_; }
          set {
            legSurfVol_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_price" field.</summary>
        public const int LegSurfPriceFieldNumber = 283;
        private float legSurfPrice_;
        /// <summary>
        /// surface price as of message arrival
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfPrice {
          get { return legSurfPrice_; }
          set {
            legSurfPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_de" field.</summary>
        public const int LegSurfDeFieldNumber = 286;
        private float legSurfDe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfDe {
          get { return legSurfDe_; }
          set {
            legSurfDe_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_ga" field.</summary>
        public const int LegSurfGaFieldNumber = 289;
        private float legSurfGa_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfGa {
          get { return legSurfGa_; }
          set {
            legSurfGa_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_ve" field.</summary>
        public const int LegSurfVeFieldNumber = 292;
        private float legSurfVe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfVe {
          get { return legSurfVe_; }
          set {
            legSurfVe_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_err" field.</summary>
        public const int LegSurfErrFieldNumber = 295;
        private int legSurfErr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LegSurfErr {
          get { return legSurfErr_; }
          set {
            legSurfErr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as MarkupLegs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(MarkupLegs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LegSecKey, other.LegSecKey)) return false;
          if (LegSecType != other.LegSecType) return false;
          if (LegPriceFormat != other.LegPriceFormat) return false;
          if (LegSecurityDesc != other.LegSecurityDesc) return false;
          if (LegSide != other.LegSide) return false;
          if (LegRatio != other.LegRatio) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegBidPrice, other.LegBidPrice)) return false;
          if (LegBidSize != other.LegBidSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegAskPrice, other.LegAskPrice)) return false;
          if (LegAskSize != other.LegAskSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegYears, other.LegYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegUPrc, other.LegUPrc)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfVol, other.LegSurfVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfPrice, other.LegSurfPrice)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfDe, other.LegSurfDe)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfGa, other.LegSurfGa)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfVe, other.LegSurfVe)) return false;
          if (LegSurfErr != other.LegSurfErr) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (legSecKey_ != null) hash ^= LegSecKey.GetHashCode();
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= LegSecType.GetHashCode();
          if (LegPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= LegPriceFormat.GetHashCode();
          if (LegSecurityDesc.Length != 0) hash ^= LegSecurityDesc.GetHashCode();
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LegSide.GetHashCode();
          if (LegRatio != 0) hash ^= LegRatio.GetHashCode();
          if (LegBidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegBidPrice);
          if (LegBidSize != 0) hash ^= LegBidSize.GetHashCode();
          if (LegAskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegAskPrice);
          if (LegAskSize != 0) hash ^= LegAskSize.GetHashCode();
          if (LegYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegYears);
          if (LegUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegUPrc);
          if (LegSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfVol);
          if (LegSurfPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfPrice);
          if (LegSurfDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfDe);
          if (LegSurfGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfGa);
          if (LegSurfVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfVe);
          if (LegSurfErr != 0) hash ^= LegSurfErr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (legSecKey_ != null) {
            output.WriteRawTag(242, 14);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(136, 15);
            output.WriteEnum((int) LegSecType);
          }
          if (LegPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
            output.WriteRawTag(160, 15);
            output.WriteEnum((int) LegPriceFormat);
          }
          if (LegSecurityDesc.Length != 0) {
            output.WriteRawTag(186, 15);
            output.WriteString(LegSecurityDesc);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(208, 15);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(232, 15);
            output.WriteUInt32(LegRatio);
          }
          if (LegBidPrice != 0D) {
            output.WriteRawTag(129, 16);
            output.WriteDouble(LegBidPrice);
          }
          if (LegBidSize != 0) {
            output.WriteRawTag(152, 16);
            output.WriteInt32(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            output.WriteRawTag(177, 16);
            output.WriteDouble(LegAskPrice);
          }
          if (LegAskSize != 0) {
            output.WriteRawTag(200, 16);
            output.WriteInt32(LegAskSize);
          }
          if (LegYears != 0F) {
            output.WriteRawTag(229, 16);
            output.WriteFloat(LegYears);
          }
          if (LegUPrc != 0D) {
            output.WriteRawTag(249, 16);
            output.WriteDouble(LegUPrc);
          }
          if (LegSurfVol != 0F) {
            output.WriteRawTag(197, 17);
            output.WriteFloat(LegSurfVol);
          }
          if (LegSurfPrice != 0F) {
            output.WriteRawTag(221, 17);
            output.WriteFloat(LegSurfPrice);
          }
          if (LegSurfDe != 0F) {
            output.WriteRawTag(245, 17);
            output.WriteFloat(LegSurfDe);
          }
          if (LegSurfGa != 0F) {
            output.WriteRawTag(141, 18);
            output.WriteFloat(LegSurfGa);
          }
          if (LegSurfVe != 0F) {
            output.WriteRawTag(165, 18);
            output.WriteFloat(LegSurfVe);
          }
          if (LegSurfErr != 0) {
            output.WriteRawTag(184, 18);
            output.WriteInt32(LegSurfErr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (legSecKey_ != null) {
            output.WriteRawTag(242, 14);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(136, 15);
            output.WriteEnum((int) LegSecType);
          }
          if (LegPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
            output.WriteRawTag(160, 15);
            output.WriteEnum((int) LegPriceFormat);
          }
          if (LegSecurityDesc.Length != 0) {
            output.WriteRawTag(186, 15);
            output.WriteString(LegSecurityDesc);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(208, 15);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(232, 15);
            output.WriteUInt32(LegRatio);
          }
          if (LegBidPrice != 0D) {
            output.WriteRawTag(129, 16);
            output.WriteDouble(LegBidPrice);
          }
          if (LegBidSize != 0) {
            output.WriteRawTag(152, 16);
            output.WriteInt32(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            output.WriteRawTag(177, 16);
            output.WriteDouble(LegAskPrice);
          }
          if (LegAskSize != 0) {
            output.WriteRawTag(200, 16);
            output.WriteInt32(LegAskSize);
          }
          if (LegYears != 0F) {
            output.WriteRawTag(229, 16);
            output.WriteFloat(LegYears);
          }
          if (LegUPrc != 0D) {
            output.WriteRawTag(249, 16);
            output.WriteDouble(LegUPrc);
          }
          if (LegSurfVol != 0F) {
            output.WriteRawTag(197, 17);
            output.WriteFloat(LegSurfVol);
          }
          if (LegSurfPrice != 0F) {
            output.WriteRawTag(221, 17);
            output.WriteFloat(LegSurfPrice);
          }
          if (LegSurfDe != 0F) {
            output.WriteRawTag(245, 17);
            output.WriteFloat(LegSurfDe);
          }
          if (LegSurfGa != 0F) {
            output.WriteRawTag(141, 18);
            output.WriteFloat(LegSurfGa);
          }
          if (LegSurfVe != 0F) {
            output.WriteRawTag(165, 18);
            output.WriteFloat(LegSurfVe);
          }
          if (LegSurfErr != 0) {
            output.WriteRawTag(184, 18);
            output.WriteInt32(LegSurfErr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (legSecKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSecType);
          }
          if (LegPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegPriceFormat);
          }
          if (LegSecurityDesc.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(LegSecurityDesc);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSide);
          }
          if (LegRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegRatio);
          }
          if (LegBidPrice != 0D) {
            size += 2 + 8;
          }
          if (LegBidSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            size += 2 + 8;
          }
          if (LegAskSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegAskSize);
          }
          if (LegYears != 0F) {
            size += 2 + 4;
          }
          if (LegUPrc != 0D) {
            size += 2 + 8;
          }
          if (LegSurfVol != 0F) {
            size += 2 + 4;
          }
          if (LegSurfPrice != 0F) {
            size += 2 + 4;
          }
          if (LegSurfDe != 0F) {
            size += 2 + 4;
          }
          if (LegSurfGa != 0F) {
            size += 2 + 4;
          }
          if (LegSurfVe != 0F) {
            size += 2 + 4;
          }
          if (LegSurfErr != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegSurfErr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(MarkupLegs other) {
          if (other == null) {
            return;
          }
          if (other.legSecKey_ != null) {
            if (legSecKey_ == null) {
              LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            LegSecKey.MergeFrom(other.LegSecKey);
          }
          if (other.LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            LegSecType = other.LegSecType;
          }
          if (other.LegPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
            LegPriceFormat = other.LegPriceFormat;
          }
          if (other.LegSecurityDesc.Length != 0) {
            LegSecurityDesc = other.LegSecurityDesc;
          }
          if (other.LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            LegSide = other.LegSide;
          }
          if (other.LegRatio != 0) {
            LegRatio = other.LegRatio;
          }
          if (other.LegBidPrice != 0D) {
            LegBidPrice = other.LegBidPrice;
          }
          if (other.LegBidSize != 0) {
            LegBidSize = other.LegBidSize;
          }
          if (other.LegAskPrice != 0D) {
            LegAskPrice = other.LegAskPrice;
          }
          if (other.LegAskSize != 0) {
            LegAskSize = other.LegAskSize;
          }
          if (other.LegYears != 0F) {
            LegYears = other.LegYears;
          }
          if (other.LegUPrc != 0D) {
            LegUPrc = other.LegUPrc;
          }
          if (other.LegSurfVol != 0F) {
            LegSurfVol = other.LegSurfVol;
          }
          if (other.LegSurfPrice != 0F) {
            LegSurfPrice = other.LegSurfPrice;
          }
          if (other.LegSurfDe != 0F) {
            LegSurfDe = other.LegSurfDe;
          }
          if (other.LegSurfGa != 0F) {
            LegSurfGa = other.LegSurfGa;
          }
          if (other.LegSurfVe != 0F) {
            LegSurfVe = other.LegSurfVe;
          }
          if (other.LegSurfErr != 0) {
            LegSurfErr = other.LegSurfErr;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1906: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1928: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1952: {
                LegPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
                break;
              }
              case 1978: {
                LegSecurityDesc = input.ReadString();
                break;
              }
              case 2000: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 2024: {
                LegRatio = input.ReadUInt32();
                break;
              }
              case 2049: {
                LegBidPrice = input.ReadDouble();
                break;
              }
              case 2072: {
                LegBidSize = input.ReadInt32();
                break;
              }
              case 2097: {
                LegAskPrice = input.ReadDouble();
                break;
              }
              case 2120: {
                LegAskSize = input.ReadInt32();
                break;
              }
              case 2149: {
                LegYears = input.ReadFloat();
                break;
              }
              case 2169: {
                LegUPrc = input.ReadDouble();
                break;
              }
              case 2245: {
                LegSurfVol = input.ReadFloat();
                break;
              }
              case 2269: {
                LegSurfPrice = input.ReadFloat();
                break;
              }
              case 2293: {
                LegSurfDe = input.ReadFloat();
                break;
              }
              case 2317: {
                LegSurfGa = input.ReadFloat();
                break;
              }
              case 2341: {
                LegSurfVe = input.ReadFloat();
                break;
              }
              case 2360: {
                LegSurfErr = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1906: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1928: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1952: {
                LegPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
                break;
              }
              case 1978: {
                LegSecurityDesc = input.ReadString();
                break;
              }
              case 2000: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 2024: {
                LegRatio = input.ReadUInt32();
                break;
              }
              case 2049: {
                LegBidPrice = input.ReadDouble();
                break;
              }
              case 2072: {
                LegBidSize = input.ReadInt32();
                break;
              }
              case 2097: {
                LegAskPrice = input.ReadDouble();
                break;
              }
              case 2120: {
                LegAskSize = input.ReadInt32();
                break;
              }
              case 2149: {
                LegYears = input.ReadFloat();
                break;
              }
              case 2169: {
                LegUPrc = input.ReadDouble();
                break;
              }
              case 2245: {
                LegSurfVol = input.ReadFloat();
                break;
              }
              case 2269: {
                LegSurfPrice = input.ReadFloat();
                break;
              }
              case 2293: {
                LegSurfDe = input.ReadFloat();
                break;
              }
              case 2317: {
                LegSurfGa = input.ReadFloat();
                break;
              }
              case 2341: {
                LegSurfVe = input.ReadFloat();
                break;
              }
              case 2360: {
                LegSurfErr = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
