// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientControl/MarRiskComposite.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientControl/MarRiskComposite.proto</summary>
  public static partial class MarRiskCompositeReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientControl/MarRiskComposite.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarRiskCompositeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1Qcm90b2J1Zi9DbGllbnRDb250cm9sL01hclJpc2tDb21wb3NpdGUucHJv",
            "dG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIt8OChBNYXJS",
            "aXNrQ29tcG9zaXRlEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5NZXNzYWdlTWV0YWRhdGESOAoEcGtleRgCIAEoCzIqLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTWFyUmlza0NvbXBvc2l0ZS5QS2V5EjAKCXN5c19yZWFs",
            "bRhkIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzUmVhbG0SPAoPc3lz",
            "X2Vudmlyb25tZW50GGUgASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5TeXNF",
            "bnZpcm9ubWVudBITCgtyaXNrX2VuZ2luZRhmIAEoCRIXCg9saXZlX21hcmdp",
            "bl9hY2MYZyABKAISFwoPbGl2ZV9tYXJnaW5fZGF5GGggASgCEhoKEmxpdmVf",
            "b3Blbl9leHBvc3VyZRhpIAEoAhIWCg5kYXlfZnV0X2NuX2JvdBhqIAEoBRIW",
            "Cg5kYXlfZnV0X2NuX3NsZBhrIAEoBRIWCg5hY2NfZnV0X2NuX25ldBhsIAEo",
            "BRIaChJkYXlfbWFyZ2luX3VEbl92RG4YbSABKAISGgoSZGF5X21hcmdpbl91",
            "RG5fdlVwGG4gASgCEhoKEmRheV9tYXJnaW5fdVVwX3ZEbhhvIAEoAhIaChJk",
            "YXlfbWFyZ2luX3VVcF92VXAYcCABKAISGgoSYWNjX21hcmdpbl91RG5fdkRu",
            "GHEgASgCEhoKEmFjY19tYXJnaW5fdURuX3ZVcBhyIAEoAhIaChJhY2NfbWFy",
            "Z2luX3VVcF92RG4YcyABKAISGgoSYWNjX21hcmdpbl91VXBfdlVwGHQgASgC",
            "EjIKC3N0a19lbmFibGVkGHUgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "YXJTdGF0ZRIyCgtmdXRfZW5hYmxlZBh2IAEoDjIdLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWFyU3RhdGUSMgoLb3B0X2VuYWJsZWQYdyABKA4yHS5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk1hclN0YXRlEhgKEG1hcmdpbl9saW1pdF9hY2MYeCAB",
            "KAISGAoQbWFyZ2luX2xpbWl0X2RheRh5IAEoAhIbChNvcGVuX2V4cG9zdXJl",
            "X2xpbWl0GHogASgCEhoKEm1heF9hY2NfZnV0X2NuX2Ficxh7IAEoBRIaChJt",
            "YXhfZGF5X2Z1dF9jbl9ib3QYfCABKAUSGgoSbWF4X2RheV9mdXRfY25fc2xk",
            "GH0gASgFEhoKEm1heF9kYXlfZnV0X2NuX2Ficxh+IAEoBRIZChFvcmRlcl9t",
            "YXhfc3RrX3F0eRh/IAEoBRIaChFvcmRlcl9tYXhfZnV0X3F0eRiAASABKAUS",
            "GgoRb3JkZXJfbWF4X29wdF9xdHkYgQEgASgFEh0KFG9yZGVyX21heF9zdGtf",
            "ZERlbHRhGIIBIAEoAhIdChRvcmRlcl9tYXhfZnV0X2REZWx0YRiDASABKAIS",
            "HQoUb3JkZXJfbWF4X29wdF9kRGVsdGEYhAEgASgCEhcKDnN0a19jb2xsYXJf",
            "cGN0GIUBIAEoAhIXCg5mdXRfY29sbGFyX3BjdBiGASABKAISFwoOb3B0X2Nv",
            "bGxhcl9wY3QYhwEgASgCEjcKEmFsbG93X3N0a19vZGRfbG90cxiIASABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjkKFGFsbG93X2xpbWl0X29u",
            "X2Nsb3NlGIkBIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SOgoV",
            "YWxsb3dfbWFya2V0X29uX2Nsb3NlGIoBIAEoDjIaLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuWWVzTm8SPAoXYWxsb3dfc2hvcnRfc2FsZV9leGVtcHQYiwEgASgO",
            "Mhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxI9ChhhbGxvd19pbnRlcl9t",
            "YXJrZXRfc3dlZXAYjAEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNO",
            "bxI2ChFibG9ja19zaG9ydF9zYWxlcxiNASABKA4yGi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlllc05vEhQKC21vZGlmaWVkX2J5GI4BIAEoCRI5Cgttb2RpZmll",
            "ZF9pbhiPASABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlN5c0Vudmlyb25t",
            "ZW50EhAKB2NvdW50ZXIYkAEgASgFEi4KCXRpbWVzdGFtcBiRASABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGpABCgRQS2V5Ei4KBnRpY2tlchgK",
            "IAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EhIKCnJpc2tf",
            "Z3JvdXAYCyABKAkSEQoJcmlza19maXJtGAwgASgJEjEKDWlzX3Rlc3RfYWNj",
            "bnQYDSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.MarRiskComposite), global::Spiderrock.Protobuf.MarRiskComposite.Parser, new[]{ "Meta", "Pkey", "SysRealm", "SysEnvironment", "RiskEngine", "LiveMarginAcc", "LiveMarginDay", "LiveOpenExposure", "DayFutCnBot", "DayFutCnSld", "AccFutCnNet", "DayMarginUDnVDn", "DayMarginUDnVUp", "DayMarginUUpVDn", "DayMarginUUpVUp", "AccMarginUDnVDn", "AccMarginUDnVUp", "AccMarginUUpVDn", "AccMarginUUpVUp", "StkEnabled", "FutEnabled", "OptEnabled", "MarginLimitAcc", "MarginLimitDay", "OpenExposureLimit", "MaxAccFutCnAbs", "MaxDayFutCnBot", "MaxDayFutCnSld", "MaxDayFutCnAbs", "OrderMaxStkQty", "OrderMaxFutQty", "OrderMaxOptQty", "OrderMaxStkDDelta", "OrderMaxFutDDelta", "OrderMaxOptDDelta", "StkCollarPct", "FutCollarPct", "OptCollarPct", "AllowStkOddLots", "AllowLimitOnClose", "AllowMarketOnClose", "AllowShortSaleExempt", "AllowInterMarketSweep", "BlockShortSales", "ModifiedBy", "ModifiedIn", "Counter", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey), global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey.Parser, new[]{ "Ticker", "RiskGroup", "RiskFirm", "IsTestAccnt" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Values in this table represent current (live) SpiderRock MAR risk counters and controls for a risk group/risk firm combination. Values are non-editable.
  /// </summary>
  public sealed partial class MarRiskComposite : pb::IMessage<MarRiskComposite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarRiskComposite> _parser = new pb::MessageParser<MarRiskComposite>(() => new MarRiskComposite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarRiskComposite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.MarRiskCompositeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarRiskComposite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarRiskComposite(MarRiskComposite other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      sysRealm_ = other.sysRealm_;
      sysEnvironment_ = other.sysEnvironment_;
      riskEngine_ = other.riskEngine_;
      liveMarginAcc_ = other.liveMarginAcc_;
      liveMarginDay_ = other.liveMarginDay_;
      liveOpenExposure_ = other.liveOpenExposure_;
      dayFutCnBot_ = other.dayFutCnBot_;
      dayFutCnSld_ = other.dayFutCnSld_;
      accFutCnNet_ = other.accFutCnNet_;
      dayMarginUDnVDn_ = other.dayMarginUDnVDn_;
      dayMarginUDnVUp_ = other.dayMarginUDnVUp_;
      dayMarginUUpVDn_ = other.dayMarginUUpVDn_;
      dayMarginUUpVUp_ = other.dayMarginUUpVUp_;
      accMarginUDnVDn_ = other.accMarginUDnVDn_;
      accMarginUDnVUp_ = other.accMarginUDnVUp_;
      accMarginUUpVDn_ = other.accMarginUUpVDn_;
      accMarginUUpVUp_ = other.accMarginUUpVUp_;
      stkEnabled_ = other.stkEnabled_;
      futEnabled_ = other.futEnabled_;
      optEnabled_ = other.optEnabled_;
      marginLimitAcc_ = other.marginLimitAcc_;
      marginLimitDay_ = other.marginLimitDay_;
      openExposureLimit_ = other.openExposureLimit_;
      maxAccFutCnAbs_ = other.maxAccFutCnAbs_;
      maxDayFutCnBot_ = other.maxDayFutCnBot_;
      maxDayFutCnSld_ = other.maxDayFutCnSld_;
      maxDayFutCnAbs_ = other.maxDayFutCnAbs_;
      orderMaxStkQty_ = other.orderMaxStkQty_;
      orderMaxFutQty_ = other.orderMaxFutQty_;
      orderMaxOptQty_ = other.orderMaxOptQty_;
      orderMaxStkDDelta_ = other.orderMaxStkDDelta_;
      orderMaxFutDDelta_ = other.orderMaxFutDDelta_;
      orderMaxOptDDelta_ = other.orderMaxOptDDelta_;
      stkCollarPct_ = other.stkCollarPct_;
      futCollarPct_ = other.futCollarPct_;
      optCollarPct_ = other.optCollarPct_;
      allowStkOddLots_ = other.allowStkOddLots_;
      allowLimitOnClose_ = other.allowLimitOnClose_;
      allowMarketOnClose_ = other.allowMarketOnClose_;
      allowShortSaleExempt_ = other.allowShortSaleExempt_;
      allowInterMarketSweep_ = other.allowInterMarketSweep_;
      blockShortSales_ = other.blockShortSales_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      counter_ = other.counter_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarRiskComposite Clone() {
      return new MarRiskComposite(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sys_realm" field.</summary>
    public const int SysRealmFieldNumber = 100;
    private global::Spiderrock.Protobuf.SysRealm sysRealm_ = global::Spiderrock.Protobuf.SysRealm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysRealm SysRealm {
      get { return sysRealm_; }
      set {
        sysRealm_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 101;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    /// <summary>
    /// original (source) sys environment [Stable, Current, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "risk_engine" field.</summary>
    public const int RiskEngineFieldNumber = 102;
    private string riskEngine_ = "";
    /// <summary>
    /// EE engine name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskEngine {
      get { return riskEngine_; }
      set {
        riskEngine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "live_margin_acc" field.</summary>
    public const int LiveMarginAccFieldNumber = 103;
    private float liveMarginAcc_;
    /// <summary>
    /// live net (per symbol) total portfolio (start-of-day positions + day trades) margin (can include external sources)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LiveMarginAcc {
      get { return liveMarginAcc_; }
      set {
        liveMarginAcc_ = value;
      }
    }

    /// <summary>Field number for the "live_margin_day" field.</summary>
    public const int LiveMarginDayFieldNumber = 104;
    private float liveMarginDay_;
    /// <summary>
    /// live net (per symbol) day portfolio (day trades only) margin (can include external sources)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LiveMarginDay {
      get { return liveMarginDay_; }
      set {
        liveMarginDay_ = value;
      }
    }

    /// <summary>Field number for the "live_open_exposure" field.</summary>
    public const int LiveOpenExposureFieldNumber = 105;
    private float liveOpenExposure_;
    /// <summary>
    /// live abs open child order $Delta (no netting) (open child orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LiveOpenExposure {
      get { return liveOpenExposure_; }
      set {
        liveOpenExposure_ = value;
      }
    }

    /// <summary>Field number for the "day_fut_cn_bot" field.</summary>
    public const int DayFutCnBotFieldNumber = 106;
    private int dayFutCnBot_;
    /// <summary>
    /// day future contracts bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DayFutCnBot {
      get { return dayFutCnBot_; }
      set {
        dayFutCnBot_ = value;
      }
    }

    /// <summary>Field number for the "day_fut_cn_sld" field.</summary>
    public const int DayFutCnSldFieldNumber = 107;
    private int dayFutCnSld_;
    /// <summary>
    /// day future contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DayFutCnSld {
      get { return dayFutCnSld_; }
      set {
        dayFutCnSld_ = value;
      }
    }

    /// <summary>Field number for the "acc_fut_cn_net" field.</summary>
    public const int AccFutCnNetFieldNumber = 108;
    private int accFutCnNet_;
    /// <summary>
    /// accnt future contracts (net) [can be +/-] (start-of-day positions + day trades)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccFutCnNet {
      get { return accFutCnNet_; }
      set {
        accFutCnNet_ = value;
      }
    }

    /// <summary>Field number for the "day_margin_uDn_vDn" field.</summary>
    public const int DayMarginUDnVDnFieldNumber = 109;
    private float dayMarginUDnVDn_;
    /// <summary>
    /// day margin (UPrcDn/VolDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayMarginUDnVDn {
      get { return dayMarginUDnVDn_; }
      set {
        dayMarginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "day_margin_uDn_vUp" field.</summary>
    public const int DayMarginUDnVUpFieldNumber = 110;
    private float dayMarginUDnVUp_;
    /// <summary>
    /// day margin (UPrcDn/VolUp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayMarginUDnVUp {
      get { return dayMarginUDnVUp_; }
      set {
        dayMarginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "day_margin_uUp_vDn" field.</summary>
    public const int DayMarginUUpVDnFieldNumber = 111;
    private float dayMarginUUpVDn_;
    /// <summary>
    /// day margin (UPrcUp/VolDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayMarginUUpVDn {
      get { return dayMarginUUpVDn_; }
      set {
        dayMarginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "day_margin_uUp_vUp" field.</summary>
    public const int DayMarginUUpVUpFieldNumber = 112;
    private float dayMarginUUpVUp_;
    /// <summary>
    /// day margin (UPrcUp/VolUp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayMarginUUpVUp {
      get { return dayMarginUUpVUp_; }
      set {
        dayMarginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "acc_margin_uDn_vDn" field.</summary>
    public const int AccMarginUDnVDnFieldNumber = 113;
    private float accMarginUDnVDn_;
    /// <summary>
    /// acc margin (UPrcDn/VolDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccMarginUDnVDn {
      get { return accMarginUDnVDn_; }
      set {
        accMarginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "acc_margin_uDn_vUp" field.</summary>
    public const int AccMarginUDnVUpFieldNumber = 114;
    private float accMarginUDnVUp_;
    /// <summary>
    /// acc margin (UPrcDn/VolUp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccMarginUDnVUp {
      get { return accMarginUDnVUp_; }
      set {
        accMarginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "acc_margin_uUp_vDn" field.</summary>
    public const int AccMarginUUpVDnFieldNumber = 115;
    private float accMarginUUpVDn_;
    /// <summary>
    /// acc margin (UPrcUp/VolDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccMarginUUpVDn {
      get { return accMarginUUpVDn_; }
      set {
        accMarginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "acc_margin_uUp_vUp" field.</summary>
    public const int AccMarginUUpVUpFieldNumber = 116;
    private float accMarginUUpVUp_;
    /// <summary>
    /// acc margin (UPrcUp/VolUp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccMarginUUpVUp {
      get { return accMarginUUpVUp_; }
      set {
        accMarginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "stk_enabled" field.</summary>
    public const int StkEnabledFieldNumber = 117;
    private global::Spiderrock.Protobuf.MarState stkEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    /// <summary>
    /// Enabled or not for equities (None=disabled)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState StkEnabled {
      get { return stkEnabled_; }
      set {
        stkEnabled_ = value;
      }
    }

    /// <summary>Field number for the "fut_enabled" field.</summary>
    public const int FutEnabledFieldNumber = 118;
    private global::Spiderrock.Protobuf.MarState futEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    /// <summary>
    /// Enabled or not for futures (None=disabled)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState FutEnabled {
      get { return futEnabled_; }
      set {
        futEnabled_ = value;
      }
    }

    /// <summary>Field number for the "opt_enabled" field.</summary>
    public const int OptEnabledFieldNumber = 119;
    private global::Spiderrock.Protobuf.MarState optEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    /// <summary>
    /// Enabled or not for options (None=disabled)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState OptEnabled {
      get { return optEnabled_; }
      set {
        optEnabled_ = value;
      }
    }

    /// <summary>Field number for the "margin_limit_acc" field.</summary>
    public const int MarginLimitAccFieldNumber = 120;
    private float marginLimitAcc_;
    /// <summary>
    /// Maximum net (per symbol) total portfolio (start-of-day positions + day trades) margin (can include external sources)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginLimitAcc {
      get { return marginLimitAcc_; }
      set {
        marginLimitAcc_ = value;
      }
    }

    /// <summary>Field number for the "margin_limit_day" field.</summary>
    public const int MarginLimitDayFieldNumber = 121;
    private float marginLimitDay_;
    /// <summary>
    /// Maximum net (per symbol/day) day portfolio (day trades only) margin (can include external sources)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginLimitDay {
      get { return marginLimitDay_; }
      set {
        marginLimitDay_ = value;
      }
    }

    /// <summary>Field number for the "open_exposure_limit" field.</summary>
    public const int OpenExposureLimitFieldNumber = 122;
    private float openExposureLimit_;
    /// <summary>
    /// Maximum abs open child order $Delta (no netting) (open child orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpenExposureLimit {
      get { return openExposureLimit_; }
      set {
        openExposureLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_acc_fut_cn_abs" field.</summary>
    public const int MaxAccFutCnAbsFieldNumber = 123;
    private int maxAccFutCnAbs_;
    /// <summary>
    /// Maximum absolute (net) account future contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxAccFutCnAbs {
      get { return maxAccFutCnAbs_; }
      set {
        maxAccFutCnAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_day_fut_cn_bot" field.</summary>
    public const int MaxDayFutCnBotFieldNumber = 124;
    private int maxDayFutCnBot_;
    /// <summary>
    /// Day future contracts bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDayFutCnBot {
      get { return maxDayFutCnBot_; }
      set {
        maxDayFutCnBot_ = value;
      }
    }

    /// <summary>Field number for the "max_day_fut_cn_sld" field.</summary>
    public const int MaxDayFutCnSldFieldNumber = 125;
    private int maxDayFutCnSld_;
    /// <summary>
    /// Day future contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDayFutCnSld {
      get { return maxDayFutCnSld_; }
      set {
        maxDayFutCnSld_ = value;
      }
    }

    /// <summary>Field number for the "max_day_fut_cn_abs" field.</summary>
    public const int MaxDayFutCnAbsFieldNumber = 126;
    private int maxDayFutCnAbs_;
    /// <summary>
    /// Maximum absolute (net) day future contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDayFutCnAbs {
      get { return maxDayFutCnAbs_; }
      set {
        maxDayFutCnAbs_ = value;
      }
    }

    /// <summary>Field number for the "order_max_stk_qty" field.</summary>
    public const int OrderMaxStkQtyFieldNumber = 127;
    private int orderMaxStkQty_;
    /// <summary>
    /// Number of equity shares that can be bought or sold by a single parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderMaxStkQty {
      get { return orderMaxStkQty_; }
      set {
        orderMaxStkQty_ = value;
      }
    }

    /// <summary>Field number for the "order_max_fut_qty" field.</summary>
    public const int OrderMaxFutQtyFieldNumber = 128;
    private int orderMaxFutQty_;
    /// <summary>
    /// Number of futures contracts that can be bought or sold by a single parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderMaxFutQty {
      get { return orderMaxFutQty_; }
      set {
        orderMaxFutQty_ = value;
      }
    }

    /// <summary>Field number for the "order_max_opt_qty" field.</summary>
    public const int OrderMaxOptQtyFieldNumber = 129;
    private int orderMaxOptQty_;
    /// <summary>
    /// Number of option contracts that can be bought or sold by a single parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderMaxOptQty {
      get { return orderMaxOptQty_; }
      set {
        orderMaxOptQty_ = value;
      }
    }

    /// <summary>Field number for the "order_max_stk_dDelta" field.</summary>
    public const int OrderMaxStkDDeltaFieldNumber = 130;
    private float orderMaxStkDDelta_;
    /// <summary>
    /// Maximum (abs) mny per stock parent order; ddelta = 0.01 * shares * pointValue * midPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderMaxStkDDelta {
      get { return orderMaxStkDDelta_; }
      set {
        orderMaxStkDDelta_ = value;
      }
    }

    /// <summary>Field number for the "order_max_fut_dDelta" field.</summary>
    public const int OrderMaxFutDDeltaFieldNumber = 131;
    private float orderMaxFutDDelta_;
    /// <summary>
    /// Maximum (abs) mny per future parent order; ddelta = 0.01 * contracts * pointValue * midPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderMaxFutDDelta {
      get { return orderMaxFutDDelta_; }
      set {
        orderMaxFutDDelta_ = value;
      }
    }

    /// <summary>Field number for the "order_max_opt_dDelta" field.</summary>
    public const int OrderMaxOptDDeltaFieldNumber = 132;
    private float orderMaxOptDDelta_;
    /// <summary>
    /// Maximum (abs) mny per option parent order; ddelta = 0.01 * contracts * pointValue * ABS(de) * uMidPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderMaxOptDDelta {
      get { return orderMaxOptDDelta_; }
      set {
        orderMaxOptDDelta_ = value;
      }
    }

    /// <summary>Field number for the "stk_collar_pct" field.</summary>
    public const int StkCollarPctFieldNumber = 133;
    private float stkCollarPct_;
    /// <summary>
    /// Maximum user limit vs bid/ask price control - percentage as a number between 0 and 1 in decimals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkCollarPct {
      get { return stkCollarPct_; }
      set {
        stkCollarPct_ = value;
      }
    }

    /// <summary>Field number for the "fut_collar_pct" field.</summary>
    public const int FutCollarPctFieldNumber = 134;
    private float futCollarPct_;
    /// <summary>
    /// Maximum user limit vs bid/ask price control - percentage as a number between 0 and 1 in decimals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutCollarPct {
      get { return futCollarPct_; }
      set {
        futCollarPct_ = value;
      }
    }

    /// <summary>Field number for the "opt_collar_pct" field.</summary>
    public const int OptCollarPctFieldNumber = 135;
    private float optCollarPct_;
    /// <summary>
    /// Maximum user limit vs bid/ask price control - percentage as a number between 0 and 1 in decimals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptCollarPct {
      get { return optCollarPct_; }
      set {
        optCollarPct_ = value;
      }
    }

    /// <summary>Field number for the "allow_stk_odd_lots" field.</summary>
    public const int AllowStkOddLotsFieldNumber = 136;
    private global::Spiderrock.Protobuf.YesNo allowStkOddLots_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Allow parent stock orders with an order size below 100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AllowStkOddLots {
      get { return allowStkOddLots_; }
      set {
        allowStkOddLots_ = value;
      }
    }

    /// <summary>Field number for the "allow_limit_on_close" field.</summary>
    public const int AllowLimitOnCloseFieldNumber = 137;
    private global::Spiderrock.Protobuf.YesNo allowLimitOnClose_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Allow limit on close orders - similar to MOC order, with the addition of a price limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AllowLimitOnClose {
      get { return allowLimitOnClose_; }
      set {
        allowLimitOnClose_ = value;
      }
    }

    /// <summary>Field number for the "allow_market_on_close" field.</summary>
    public const int AllowMarketOnCloseFieldNumber = 138;
    private global::Spiderrock.Protobuf.YesNo allowMarketOnClose_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Allow market on close orders - special order type which is executed as close to the close of trading as possible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AllowMarketOnClose {
      get { return allowMarketOnClose_; }
      set {
        allowMarketOnClose_ = value;
      }
    }

    /// <summary>Field number for the "allow_short_sale_exempt" field.</summary>
    public const int AllowShortSaleExemptFieldNumber = 139;
    private global::Spiderrock.Protobuf.YesNo allowShortSaleExempt_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Allow short sale option orders to be marked exempt, as per Rule 201
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AllowShortSaleExempt {
      get { return allowShortSaleExempt_; }
      set {
        allowShortSaleExempt_ = value;
      }
    }

    /// <summary>Field number for the "allow_inter_market_sweep" field.</summary>
    public const int AllowInterMarketSweepFieldNumber = 140;
    private global::Spiderrock.Protobuf.YesNo allowInterMarketSweep_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Allow intermarket sweep orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AllowInterMarketSweep {
      get { return allowInterMarketSweep_; }
      set {
        allowInterMarketSweep_ = value;
      }
    }

    /// <summary>Field number for the "block_short_sales" field.</summary>
    public const int BlockShortSalesFieldNumber = 141;
    private global::Spiderrock.Protobuf.YesNo blockShortSales_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Block all short sales
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo BlockShortSales {
      get { return blockShortSales_; }
      set {
        blockShortSales_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 142;
    private string modifiedBy_ = "";
    /// <summary>
    /// User that last modified corresponding MarRiskControl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 143;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    /// <summary>
    /// Environment corresponding MarRiskControl was last updated in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 144;
    private int counter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 145;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of latest change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarRiskComposite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarRiskComposite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SysRealm != other.SysRealm) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (RiskEngine != other.RiskEngine) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LiveMarginAcc, other.LiveMarginAcc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LiveMarginDay, other.LiveMarginDay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LiveOpenExposure, other.LiveOpenExposure)) return false;
      if (DayFutCnBot != other.DayFutCnBot) return false;
      if (DayFutCnSld != other.DayFutCnSld) return false;
      if (AccFutCnNet != other.AccFutCnNet) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayMarginUDnVDn, other.DayMarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayMarginUDnVUp, other.DayMarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayMarginUUpVDn, other.DayMarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayMarginUUpVUp, other.DayMarginUUpVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccMarginUDnVDn, other.AccMarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccMarginUDnVUp, other.AccMarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccMarginUUpVDn, other.AccMarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccMarginUUpVUp, other.AccMarginUUpVUp)) return false;
      if (StkEnabled != other.StkEnabled) return false;
      if (FutEnabled != other.FutEnabled) return false;
      if (OptEnabled != other.OptEnabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginLimitAcc, other.MarginLimitAcc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginLimitDay, other.MarginLimitDay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenExposureLimit, other.OpenExposureLimit)) return false;
      if (MaxAccFutCnAbs != other.MaxAccFutCnAbs) return false;
      if (MaxDayFutCnBot != other.MaxDayFutCnBot) return false;
      if (MaxDayFutCnSld != other.MaxDayFutCnSld) return false;
      if (MaxDayFutCnAbs != other.MaxDayFutCnAbs) return false;
      if (OrderMaxStkQty != other.OrderMaxStkQty) return false;
      if (OrderMaxFutQty != other.OrderMaxFutQty) return false;
      if (OrderMaxOptQty != other.OrderMaxOptQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderMaxStkDDelta, other.OrderMaxStkDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderMaxFutDDelta, other.OrderMaxFutDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderMaxOptDDelta, other.OrderMaxOptDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkCollarPct, other.StkCollarPct)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutCollarPct, other.FutCollarPct)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptCollarPct, other.OptCollarPct)) return false;
      if (AllowStkOddLots != other.AllowStkOddLots) return false;
      if (AllowLimitOnClose != other.AllowLimitOnClose) return false;
      if (AllowMarketOnClose != other.AllowMarketOnClose) return false;
      if (AllowShortSaleExempt != other.AllowShortSaleExempt) return false;
      if (AllowInterMarketSweep != other.AllowInterMarketSweep) return false;
      if (BlockShortSales != other.BlockShortSales) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (Counter != other.Counter) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) hash ^= SysRealm.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (RiskEngine.Length != 0) hash ^= RiskEngine.GetHashCode();
      if (LiveMarginAcc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LiveMarginAcc);
      if (LiveMarginDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LiveMarginDay);
      if (LiveOpenExposure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LiveOpenExposure);
      if (DayFutCnBot != 0) hash ^= DayFutCnBot.GetHashCode();
      if (DayFutCnSld != 0) hash ^= DayFutCnSld.GetHashCode();
      if (AccFutCnNet != 0) hash ^= AccFutCnNet.GetHashCode();
      if (DayMarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayMarginUDnVDn);
      if (DayMarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayMarginUDnVUp);
      if (DayMarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayMarginUUpVDn);
      if (DayMarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayMarginUUpVUp);
      if (AccMarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccMarginUDnVDn);
      if (AccMarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccMarginUDnVUp);
      if (AccMarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccMarginUUpVDn);
      if (AccMarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccMarginUUpVUp);
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= StkEnabled.GetHashCode();
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= FutEnabled.GetHashCode();
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= OptEnabled.GetHashCode();
      if (MarginLimitAcc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginLimitAcc);
      if (MarginLimitDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginLimitDay);
      if (OpenExposureLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenExposureLimit);
      if (MaxAccFutCnAbs != 0) hash ^= MaxAccFutCnAbs.GetHashCode();
      if (MaxDayFutCnBot != 0) hash ^= MaxDayFutCnBot.GetHashCode();
      if (MaxDayFutCnSld != 0) hash ^= MaxDayFutCnSld.GetHashCode();
      if (MaxDayFutCnAbs != 0) hash ^= MaxDayFutCnAbs.GetHashCode();
      if (OrderMaxStkQty != 0) hash ^= OrderMaxStkQty.GetHashCode();
      if (OrderMaxFutQty != 0) hash ^= OrderMaxFutQty.GetHashCode();
      if (OrderMaxOptQty != 0) hash ^= OrderMaxOptQty.GetHashCode();
      if (OrderMaxStkDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderMaxStkDDelta);
      if (OrderMaxFutDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderMaxFutDDelta);
      if (OrderMaxOptDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderMaxOptDDelta);
      if (StkCollarPct != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkCollarPct);
      if (FutCollarPct != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutCollarPct);
      if (OptCollarPct != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptCollarPct);
      if (AllowStkOddLots != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AllowStkOddLots.GetHashCode();
      if (AllowLimitOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AllowLimitOnClose.GetHashCode();
      if (AllowMarketOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AllowMarketOnClose.GetHashCode();
      if (AllowShortSaleExempt != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AllowShortSaleExempt.GetHashCode();
      if (AllowInterMarketSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AllowInterMarketSweep.GetHashCode();
      if (BlockShortSales != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= BlockShortSales.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (Counter != 0) hash ^= Counter.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RiskEngine.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(RiskEngine);
      }
      if (LiveMarginAcc != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(LiveMarginAcc);
      }
      if (LiveMarginDay != 0F) {
        output.WriteRawTag(197, 6);
        output.WriteFloat(LiveMarginDay);
      }
      if (LiveOpenExposure != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(LiveOpenExposure);
      }
      if (DayFutCnBot != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(DayFutCnBot);
      }
      if (DayFutCnSld != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(DayFutCnSld);
      }
      if (AccFutCnNet != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(AccFutCnNet);
      }
      if (DayMarginUDnVDn != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(DayMarginUDnVDn);
      }
      if (DayMarginUDnVUp != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(DayMarginUDnVUp);
      }
      if (DayMarginUUpVDn != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(DayMarginUUpVDn);
      }
      if (DayMarginUUpVUp != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(DayMarginUUpVUp);
      }
      if (AccMarginUDnVDn != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(AccMarginUDnVDn);
      }
      if (AccMarginUDnVUp != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(AccMarginUDnVUp);
      }
      if (AccMarginUUpVDn != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(AccMarginUUpVDn);
      }
      if (AccMarginUUpVUp != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(AccMarginUUpVUp);
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(184, 7);
        output.WriteEnum((int) OptEnabled);
      }
      if (MarginLimitAcc != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(MarginLimitAcc);
      }
      if (MarginLimitDay != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(MarginLimitDay);
      }
      if (OpenExposureLimit != 0F) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(OpenExposureLimit);
      }
      if (MaxAccFutCnAbs != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(MaxAccFutCnAbs);
      }
      if (MaxDayFutCnBot != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(MaxDayFutCnBot);
      }
      if (MaxDayFutCnSld != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(MaxDayFutCnSld);
      }
      if (MaxDayFutCnAbs != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(MaxDayFutCnAbs);
      }
      if (OrderMaxStkQty != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(OrderMaxStkQty);
      }
      if (OrderMaxFutQty != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(OrderMaxFutQty);
      }
      if (OrderMaxOptQty != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(OrderMaxOptQty);
      }
      if (OrderMaxStkDDelta != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OrderMaxStkDDelta);
      }
      if (OrderMaxFutDDelta != 0F) {
        output.WriteRawTag(157, 8);
        output.WriteFloat(OrderMaxFutDDelta);
      }
      if (OrderMaxOptDDelta != 0F) {
        output.WriteRawTag(165, 8);
        output.WriteFloat(OrderMaxOptDDelta);
      }
      if (StkCollarPct != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StkCollarPct);
      }
      if (FutCollarPct != 0F) {
        output.WriteRawTag(181, 8);
        output.WriteFloat(FutCollarPct);
      }
      if (OptCollarPct != 0F) {
        output.WriteRawTag(189, 8);
        output.WriteFloat(OptCollarPct);
      }
      if (AllowStkOddLots != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) AllowStkOddLots);
      }
      if (AllowLimitOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 8);
        output.WriteEnum((int) AllowLimitOnClose);
      }
      if (AllowMarketOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 8);
        output.WriteEnum((int) AllowMarketOnClose);
      }
      if (AllowShortSaleExempt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) AllowShortSaleExempt);
      }
      if (AllowInterMarketSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 8);
        output.WriteEnum((int) AllowInterMarketSweep);
      }
      if (BlockShortSales != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 8);
        output.WriteEnum((int) BlockShortSales);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(248, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (Counter != 0) {
        output.WriteRawTag(128, 9);
        output.WriteInt32(Counter);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RiskEngine.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(RiskEngine);
      }
      if (LiveMarginAcc != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(LiveMarginAcc);
      }
      if (LiveMarginDay != 0F) {
        output.WriteRawTag(197, 6);
        output.WriteFloat(LiveMarginDay);
      }
      if (LiveOpenExposure != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(LiveOpenExposure);
      }
      if (DayFutCnBot != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(DayFutCnBot);
      }
      if (DayFutCnSld != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(DayFutCnSld);
      }
      if (AccFutCnNet != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(AccFutCnNet);
      }
      if (DayMarginUDnVDn != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(DayMarginUDnVDn);
      }
      if (DayMarginUDnVUp != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(DayMarginUDnVUp);
      }
      if (DayMarginUUpVDn != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(DayMarginUUpVDn);
      }
      if (DayMarginUUpVUp != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(DayMarginUUpVUp);
      }
      if (AccMarginUDnVDn != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(AccMarginUDnVDn);
      }
      if (AccMarginUDnVUp != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(AccMarginUDnVUp);
      }
      if (AccMarginUUpVDn != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(AccMarginUUpVDn);
      }
      if (AccMarginUUpVUp != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(AccMarginUUpVUp);
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(184, 7);
        output.WriteEnum((int) OptEnabled);
      }
      if (MarginLimitAcc != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(MarginLimitAcc);
      }
      if (MarginLimitDay != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(MarginLimitDay);
      }
      if (OpenExposureLimit != 0F) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(OpenExposureLimit);
      }
      if (MaxAccFutCnAbs != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(MaxAccFutCnAbs);
      }
      if (MaxDayFutCnBot != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(MaxDayFutCnBot);
      }
      if (MaxDayFutCnSld != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(MaxDayFutCnSld);
      }
      if (MaxDayFutCnAbs != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(MaxDayFutCnAbs);
      }
      if (OrderMaxStkQty != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(OrderMaxStkQty);
      }
      if (OrderMaxFutQty != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(OrderMaxFutQty);
      }
      if (OrderMaxOptQty != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(OrderMaxOptQty);
      }
      if (OrderMaxStkDDelta != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OrderMaxStkDDelta);
      }
      if (OrderMaxFutDDelta != 0F) {
        output.WriteRawTag(157, 8);
        output.WriteFloat(OrderMaxFutDDelta);
      }
      if (OrderMaxOptDDelta != 0F) {
        output.WriteRawTag(165, 8);
        output.WriteFloat(OrderMaxOptDDelta);
      }
      if (StkCollarPct != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StkCollarPct);
      }
      if (FutCollarPct != 0F) {
        output.WriteRawTag(181, 8);
        output.WriteFloat(FutCollarPct);
      }
      if (OptCollarPct != 0F) {
        output.WriteRawTag(189, 8);
        output.WriteFloat(OptCollarPct);
      }
      if (AllowStkOddLots != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) AllowStkOddLots);
      }
      if (AllowLimitOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 8);
        output.WriteEnum((int) AllowLimitOnClose);
      }
      if (AllowMarketOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 8);
        output.WriteEnum((int) AllowMarketOnClose);
      }
      if (AllowShortSaleExempt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) AllowShortSaleExempt);
      }
      if (AllowInterMarketSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 8);
        output.WriteEnum((int) AllowInterMarketSweep);
      }
      if (BlockShortSales != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 8);
        output.WriteEnum((int) BlockShortSales);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(248, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (Counter != 0) {
        output.WriteRawTag(128, 9);
        output.WriteInt32(Counter);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (RiskEngine.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskEngine);
      }
      if (LiveMarginAcc != 0F) {
        size += 2 + 4;
      }
      if (LiveMarginDay != 0F) {
        size += 2 + 4;
      }
      if (LiveOpenExposure != 0F) {
        size += 2 + 4;
      }
      if (DayFutCnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DayFutCnBot);
      }
      if (DayFutCnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DayFutCnSld);
      }
      if (AccFutCnNet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AccFutCnNet);
      }
      if (DayMarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (DayMarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (DayMarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (DayMarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (AccMarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (AccMarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (AccMarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (AccMarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptEnabled);
      }
      if (MarginLimitAcc != 0F) {
        size += 2 + 4;
      }
      if (MarginLimitDay != 0F) {
        size += 2 + 4;
      }
      if (OpenExposureLimit != 0F) {
        size += 2 + 4;
      }
      if (MaxAccFutCnAbs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxAccFutCnAbs);
      }
      if (MaxDayFutCnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxDayFutCnBot);
      }
      if (MaxDayFutCnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxDayFutCnSld);
      }
      if (MaxDayFutCnAbs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxDayFutCnAbs);
      }
      if (OrderMaxStkQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderMaxStkQty);
      }
      if (OrderMaxFutQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderMaxFutQty);
      }
      if (OrderMaxOptQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderMaxOptQty);
      }
      if (OrderMaxStkDDelta != 0F) {
        size += 2 + 4;
      }
      if (OrderMaxFutDDelta != 0F) {
        size += 2 + 4;
      }
      if (OrderMaxOptDDelta != 0F) {
        size += 2 + 4;
      }
      if (StkCollarPct != 0F) {
        size += 2 + 4;
      }
      if (FutCollarPct != 0F) {
        size += 2 + 4;
      }
      if (OptCollarPct != 0F) {
        size += 2 + 4;
      }
      if (AllowStkOddLots != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowStkOddLots);
      }
      if (AllowLimitOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowLimitOnClose);
      }
      if (AllowMarketOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowMarketOnClose);
      }
      if (AllowShortSaleExempt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowShortSaleExempt);
      }
      if (AllowInterMarketSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowInterMarketSweep);
      }
      if (BlockShortSales != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlockShortSales);
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (Counter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarRiskComposite other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        SysRealm = other.SysRealm;
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.RiskEngine.Length != 0) {
        RiskEngine = other.RiskEngine;
      }
      if (other.LiveMarginAcc != 0F) {
        LiveMarginAcc = other.LiveMarginAcc;
      }
      if (other.LiveMarginDay != 0F) {
        LiveMarginDay = other.LiveMarginDay;
      }
      if (other.LiveOpenExposure != 0F) {
        LiveOpenExposure = other.LiveOpenExposure;
      }
      if (other.DayFutCnBot != 0) {
        DayFutCnBot = other.DayFutCnBot;
      }
      if (other.DayFutCnSld != 0) {
        DayFutCnSld = other.DayFutCnSld;
      }
      if (other.AccFutCnNet != 0) {
        AccFutCnNet = other.AccFutCnNet;
      }
      if (other.DayMarginUDnVDn != 0F) {
        DayMarginUDnVDn = other.DayMarginUDnVDn;
      }
      if (other.DayMarginUDnVUp != 0F) {
        DayMarginUDnVUp = other.DayMarginUDnVUp;
      }
      if (other.DayMarginUUpVDn != 0F) {
        DayMarginUUpVDn = other.DayMarginUUpVDn;
      }
      if (other.DayMarginUUpVUp != 0F) {
        DayMarginUUpVUp = other.DayMarginUUpVUp;
      }
      if (other.AccMarginUDnVDn != 0F) {
        AccMarginUDnVDn = other.AccMarginUDnVDn;
      }
      if (other.AccMarginUDnVUp != 0F) {
        AccMarginUDnVUp = other.AccMarginUDnVUp;
      }
      if (other.AccMarginUUpVDn != 0F) {
        AccMarginUUpVDn = other.AccMarginUUpVDn;
      }
      if (other.AccMarginUUpVUp != 0F) {
        AccMarginUUpVUp = other.AccMarginUUpVUp;
      }
      if (other.StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        StkEnabled = other.StkEnabled;
      }
      if (other.FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        FutEnabled = other.FutEnabled;
      }
      if (other.OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        OptEnabled = other.OptEnabled;
      }
      if (other.MarginLimitAcc != 0F) {
        MarginLimitAcc = other.MarginLimitAcc;
      }
      if (other.MarginLimitDay != 0F) {
        MarginLimitDay = other.MarginLimitDay;
      }
      if (other.OpenExposureLimit != 0F) {
        OpenExposureLimit = other.OpenExposureLimit;
      }
      if (other.MaxAccFutCnAbs != 0) {
        MaxAccFutCnAbs = other.MaxAccFutCnAbs;
      }
      if (other.MaxDayFutCnBot != 0) {
        MaxDayFutCnBot = other.MaxDayFutCnBot;
      }
      if (other.MaxDayFutCnSld != 0) {
        MaxDayFutCnSld = other.MaxDayFutCnSld;
      }
      if (other.MaxDayFutCnAbs != 0) {
        MaxDayFutCnAbs = other.MaxDayFutCnAbs;
      }
      if (other.OrderMaxStkQty != 0) {
        OrderMaxStkQty = other.OrderMaxStkQty;
      }
      if (other.OrderMaxFutQty != 0) {
        OrderMaxFutQty = other.OrderMaxFutQty;
      }
      if (other.OrderMaxOptQty != 0) {
        OrderMaxOptQty = other.OrderMaxOptQty;
      }
      if (other.OrderMaxStkDDelta != 0F) {
        OrderMaxStkDDelta = other.OrderMaxStkDDelta;
      }
      if (other.OrderMaxFutDDelta != 0F) {
        OrderMaxFutDDelta = other.OrderMaxFutDDelta;
      }
      if (other.OrderMaxOptDDelta != 0F) {
        OrderMaxOptDDelta = other.OrderMaxOptDDelta;
      }
      if (other.StkCollarPct != 0F) {
        StkCollarPct = other.StkCollarPct;
      }
      if (other.FutCollarPct != 0F) {
        FutCollarPct = other.FutCollarPct;
      }
      if (other.OptCollarPct != 0F) {
        OptCollarPct = other.OptCollarPct;
      }
      if (other.AllowStkOddLots != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AllowStkOddLots = other.AllowStkOddLots;
      }
      if (other.AllowLimitOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AllowLimitOnClose = other.AllowLimitOnClose;
      }
      if (other.AllowMarketOnClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AllowMarketOnClose = other.AllowMarketOnClose;
      }
      if (other.AllowShortSaleExempt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AllowShortSaleExempt = other.AllowShortSaleExempt;
      }
      if (other.AllowInterMarketSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AllowInterMarketSweep = other.AllowInterMarketSweep;
      }
      if (other.BlockShortSales != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        BlockShortSales = other.BlockShortSales;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 808: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 818: {
            RiskEngine = input.ReadString();
            break;
          }
          case 829: {
            LiveMarginAcc = input.ReadFloat();
            break;
          }
          case 837: {
            LiveMarginDay = input.ReadFloat();
            break;
          }
          case 845: {
            LiveOpenExposure = input.ReadFloat();
            break;
          }
          case 848: {
            DayFutCnBot = input.ReadInt32();
            break;
          }
          case 856: {
            DayFutCnSld = input.ReadInt32();
            break;
          }
          case 864: {
            AccFutCnNet = input.ReadInt32();
            break;
          }
          case 877: {
            DayMarginUDnVDn = input.ReadFloat();
            break;
          }
          case 885: {
            DayMarginUDnVUp = input.ReadFloat();
            break;
          }
          case 893: {
            DayMarginUUpVDn = input.ReadFloat();
            break;
          }
          case 901: {
            DayMarginUUpVUp = input.ReadFloat();
            break;
          }
          case 909: {
            AccMarginUDnVDn = input.ReadFloat();
            break;
          }
          case 917: {
            AccMarginUDnVUp = input.ReadFloat();
            break;
          }
          case 925: {
            AccMarginUUpVDn = input.ReadFloat();
            break;
          }
          case 933: {
            AccMarginUUpVUp = input.ReadFloat();
            break;
          }
          case 936: {
            StkEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 944: {
            FutEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 952: {
            OptEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 965: {
            MarginLimitAcc = input.ReadFloat();
            break;
          }
          case 973: {
            MarginLimitDay = input.ReadFloat();
            break;
          }
          case 981: {
            OpenExposureLimit = input.ReadFloat();
            break;
          }
          case 984: {
            MaxAccFutCnAbs = input.ReadInt32();
            break;
          }
          case 992: {
            MaxDayFutCnBot = input.ReadInt32();
            break;
          }
          case 1000: {
            MaxDayFutCnSld = input.ReadInt32();
            break;
          }
          case 1008: {
            MaxDayFutCnAbs = input.ReadInt32();
            break;
          }
          case 1016: {
            OrderMaxStkQty = input.ReadInt32();
            break;
          }
          case 1024: {
            OrderMaxFutQty = input.ReadInt32();
            break;
          }
          case 1032: {
            OrderMaxOptQty = input.ReadInt32();
            break;
          }
          case 1045: {
            OrderMaxStkDDelta = input.ReadFloat();
            break;
          }
          case 1053: {
            OrderMaxFutDDelta = input.ReadFloat();
            break;
          }
          case 1061: {
            OrderMaxOptDDelta = input.ReadFloat();
            break;
          }
          case 1069: {
            StkCollarPct = input.ReadFloat();
            break;
          }
          case 1077: {
            FutCollarPct = input.ReadFloat();
            break;
          }
          case 1085: {
            OptCollarPct = input.ReadFloat();
            break;
          }
          case 1088: {
            AllowStkOddLots = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1096: {
            AllowLimitOnClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1104: {
            AllowMarketOnClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1112: {
            AllowShortSaleExempt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1120: {
            AllowInterMarketSweep = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1128: {
            BlockShortSales = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1138: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1144: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1152: {
            Counter = input.ReadInt32();
            break;
          }
          case 1162: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.MarRiskComposite.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 808: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 818: {
            RiskEngine = input.ReadString();
            break;
          }
          case 829: {
            LiveMarginAcc = input.ReadFloat();
            break;
          }
          case 837: {
            LiveMarginDay = input.ReadFloat();
            break;
          }
          case 845: {
            LiveOpenExposure = input.ReadFloat();
            break;
          }
          case 848: {
            DayFutCnBot = input.ReadInt32();
            break;
          }
          case 856: {
            DayFutCnSld = input.ReadInt32();
            break;
          }
          case 864: {
            AccFutCnNet = input.ReadInt32();
            break;
          }
          case 877: {
            DayMarginUDnVDn = input.ReadFloat();
            break;
          }
          case 885: {
            DayMarginUDnVUp = input.ReadFloat();
            break;
          }
          case 893: {
            DayMarginUUpVDn = input.ReadFloat();
            break;
          }
          case 901: {
            DayMarginUUpVUp = input.ReadFloat();
            break;
          }
          case 909: {
            AccMarginUDnVDn = input.ReadFloat();
            break;
          }
          case 917: {
            AccMarginUDnVUp = input.ReadFloat();
            break;
          }
          case 925: {
            AccMarginUUpVDn = input.ReadFloat();
            break;
          }
          case 933: {
            AccMarginUUpVUp = input.ReadFloat();
            break;
          }
          case 936: {
            StkEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 944: {
            FutEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 952: {
            OptEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 965: {
            MarginLimitAcc = input.ReadFloat();
            break;
          }
          case 973: {
            MarginLimitDay = input.ReadFloat();
            break;
          }
          case 981: {
            OpenExposureLimit = input.ReadFloat();
            break;
          }
          case 984: {
            MaxAccFutCnAbs = input.ReadInt32();
            break;
          }
          case 992: {
            MaxDayFutCnBot = input.ReadInt32();
            break;
          }
          case 1000: {
            MaxDayFutCnSld = input.ReadInt32();
            break;
          }
          case 1008: {
            MaxDayFutCnAbs = input.ReadInt32();
            break;
          }
          case 1016: {
            OrderMaxStkQty = input.ReadInt32();
            break;
          }
          case 1024: {
            OrderMaxFutQty = input.ReadInt32();
            break;
          }
          case 1032: {
            OrderMaxOptQty = input.ReadInt32();
            break;
          }
          case 1045: {
            OrderMaxStkDDelta = input.ReadFloat();
            break;
          }
          case 1053: {
            OrderMaxFutDDelta = input.ReadFloat();
            break;
          }
          case 1061: {
            OrderMaxOptDDelta = input.ReadFloat();
            break;
          }
          case 1069: {
            StkCollarPct = input.ReadFloat();
            break;
          }
          case 1077: {
            FutCollarPct = input.ReadFloat();
            break;
          }
          case 1085: {
            OptCollarPct = input.ReadFloat();
            break;
          }
          case 1088: {
            AllowStkOddLots = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1096: {
            AllowLimitOnClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1104: {
            AllowMarketOnClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1112: {
            AllowShortSaleExempt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1120: {
            AllowInterMarketSweep = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1128: {
            BlockShortSales = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1138: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1144: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1152: {
            Counter = input.ReadInt32();
            break;
          }
          case 1162: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarRiskComposite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.MarRiskComposite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          riskGroup_ = other.riskGroup_;
          riskFirm_ = other.riskFirm_;
          isTestAccnt_ = other.isTestAccnt_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        /// <summary>
        /// '*-ANY-ANY' represents the entire control group
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "risk_group" field.</summary>
        public const int RiskGroupFieldNumber = 11;
        private string riskGroup_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RiskGroup {
          get { return riskGroup_; }
          set {
            riskGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "risk_firm" field.</summary>
        public const int RiskFirmFieldNumber = 12;
        private string riskFirm_ = "";
        /// <summary>
        /// client firm that can view/edit this record
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RiskFirm {
          get { return riskFirm_; }
          set {
            riskFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_test_accnt" field.</summary>
        public const int IsTestAccntFieldNumber = 13;
        private global::Spiderrock.Protobuf.YesNo isTestAccnt_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo IsTestAccnt {
          get { return isTestAccnt_; }
          set {
            isTestAccnt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (RiskGroup != other.RiskGroup) return false;
          if (RiskFirm != other.RiskFirm) return false;
          if (IsTestAccnt != other.IsTestAccnt) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (RiskGroup.Length != 0) hash ^= RiskGroup.GetHashCode();
          if (RiskFirm.Length != 0) hash ^= RiskFirm.GetHashCode();
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAccnt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (RiskGroup.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(RiskGroup);
          }
          if (RiskFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (RiskGroup.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(RiskGroup);
          }
          if (RiskFirm.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (RiskGroup.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskGroup);
          }
          if (RiskFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.RiskGroup.Length != 0) {
            RiskGroup = other.RiskGroup;
          }
          if (other.RiskFirm.Length != 0) {
            RiskFirm = other.RiskFirm;
          }
          if (other.IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            IsTestAccnt = other.IsTestAccnt;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                RiskGroup = input.ReadString();
                break;
              }
              case 98: {
                RiskFirm = input.ReadString();
                break;
              }
              case 104: {
                IsTestAccnt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                RiskGroup = input.ReadString();
                break;
              }
              case 98: {
                RiskFirm = input.ReadString();
                break;
              }
              case 104: {
                IsTestAccnt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
