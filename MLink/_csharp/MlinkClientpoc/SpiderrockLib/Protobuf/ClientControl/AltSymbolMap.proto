syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message AltSymbolMap {
    message PKey {
        
        TickerKey ticker = 10;
        string src_accnt = 13; // client enter order in this account
        string client_firm = 12; // SR assigned client firm acronym
    }

    message AltClearing {
        
        string exec_brkr_code = 146;
        string ex_dest = 147; // exDest (eg. CBOEOPT, AMEXCOB, NMS$OPT, NMS$STK, NMS$COB, CMX$FUT)
        FlipType clr_flip_type = 148; // type of clearing corp delivery
        string clr_flip_firm = 149; // deliverTo clearing member (eg. OCC#, NSCC#, MPID, or InstitutionID)
        string clr_flip_accnt = 150; // deliverTo client account (eg. OCC AID# or a DVP FBO code)
        string clr_agent = 151; // deliverTo agent (eg. DVP Agent Bank ID)
        string clr_tax_iD = 152; // deliverTo taxID (eg. DVP TaxID)
        string exec_brkr_accnt = 153; // exec broker account (supplied by exec broker) (usually Account<1>) [only used if clrFlipType=BrkrAccnt]
        string exec_brkr_cl_firm = 154; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>) [only used if clrFlipType=BrkrAccnt]
        string exec_brkr_user_name = 155; // exec broker user name (supplied by exec broker)
        string badge = 156; // exchange memembership and badge id
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string accnt = 100; // this accnt will replace accnt on parent order (if exists)
    string alt_accnt = 103; // will replace altAccnt on parent order (if exists)
    string alt_user_name = 106; // will replace altUserName on parent order (if exists)
    string strategy = 109; // will replace strategy on parent order (if exists)
    string user_data1 = 112; // will replace userData1 on parent order (if exists)
    string user_data2 = 115; // will replace userData2 on parent order (if exists)
    string child_data = 118; // will replace childData on parent order (if exists)
    string stk_exec_brkr_code = 141; // will replace execBrkrCode on stk parent orders (if exists)
    string fut_exec_brkr_code = 142; // will replace execBrkrCode on fut parent orders (if exists)
    string eqt_opt_exec_brkr_code = 143; // will replace execBrkrCode on eqt opt/mleg parent orders (if exists)
    string fut_opt_exec_brkr_code = 144; // will replace execBrkrCode on fut opt/mleg parent orders (if exists)
    string modified_by = 133; // user who last modified this record
    SysEnvironment modified_in = 136;
    google.protobuf.Timestamp timestamp = 139; // timestamp of last modification
    repeated AltClearing alt_clearing = 145;
}


