// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientControl/SpdrRiskControl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientControl/SpdrRiskControl.proto</summary>
  public static partial class SpdrRiskControlReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientControl/SpdrRiskControl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrRiskControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRDb250cm9sL1NwZHJSaXNrQ29udHJvbC5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8itQcKD1NwZHJS",
            "aXNrQ29udHJvbBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuTWVzc2FnZU1ldGFkYXRhEjcKBHBrZXkYAiABKAsyKS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJSaXNrQ29udHJvbC5QS2V5EjMKC3N0a19lbmFibGVk",
            "GMUBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuTWFyU3RhdGUSMwoLZnV0",
            "X2VuYWJsZWQYxgEgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5NYXJTdGF0",
            "ZRIzCgtvcHRfZW5hYmxlZBjHASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "Lk1hclN0YXRlEhkKEG1hcmdpbl9saW1pdF9kYXkYyAEgASgCEhwKE29wZW5f",
            "ZXhwb3N1cmVfbGltaXQYyQEgASgCEhkKEW1heF9kYXlfZERlbHRhX2xuGH8g",
            "ASgCEhoKEW1heF9kYXlfZERlbHRhX3NoGIIBIAEoAhIbChJtYXhfZGF5X2RE",
            "ZWx0YV9hYnMYhQEgASgCEhsKEm1heF9kYXlfd3RfdmVnYV9sbhiRASABKAIS",
            "GwoSbWF4X2RheV93dF92ZWdhX3NoGJQBIAEoAhIcChNtYXhfZGF5X3d0X3Zl",
            "Z2FfYWJzGJcBIAEoAhIaChFtYXhfZGF5X25WYWx1ZV9sbhjKASABKAISGgoR",
            "bWF4X2RheV9uVmFsdWVfc2gYywEgASgCEhsKEm1heF9kYXlfblZhbHVlX2Fi",
            "cxjMASABKAISFAoLbW9kaWZpZWRfYnkYrAEgASgJEjkKC21vZGlmaWVkX2lu",
            "GK8BIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzRW52aXJvbm1lbnQS",
            "LgoJdGltZXN0YW1wGLIBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXAa2QEKBFBLZXkSLgoGdGlja2VyGAwgASgLMh4uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5UaWNrZXJLZXkSGAoQcmlza19jb250cm9sX2tleRgNIAEoCRJBChJy",
            "aXNrX2NvbnRyb2xfbGV2ZWwYDiABKA4yJS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlJpc2tDb250cm9sTGV2ZWwSEQoJcmlza19maXJtGA8gASgJEjEKDWlzX3Rl",
            "c3RfYWNjbnQYECABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrRiskControl), global::Spiderrock.Protobuf.SpdrRiskControl.Parser, new[]{ "Meta", "Pkey", "StkEnabled", "FutEnabled", "OptEnabled", "MarginLimitDay", "OpenExposureLimit", "MaxDayDDeltaLn", "MaxDayDDeltaSh", "MaxDayDDeltaAbs", "MaxDayWtVegaLn", "MaxDayWtVegaSh", "MaxDayWtVegaAbs", "MaxDayNValueLn", "MaxDayNValueSh", "MaxDayNValueAbs", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey), global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey.Parser, new[]{ "Ticker", "RiskControlKey", "RiskControlLevel", "RiskFirm", "IsTestAccnt" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrRiskControl records are used to establish supervisory control of equity, and equity option trading in SpiderRock execution engines.  These records are only viewable and editable by RiskAdmin users with access to the control record ClientFirm
  /// </summary>
  public sealed partial class SpdrRiskControl : pb::IMessage<SpdrRiskControl>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrRiskControl> _parser = new pb::MessageParser<SpdrRiskControl>(() => new SpdrRiskControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrRiskControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrRiskControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskControl(SpdrRiskControl other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      stkEnabled_ = other.stkEnabled_;
      futEnabled_ = other.futEnabled_;
      optEnabled_ = other.optEnabled_;
      marginLimitDay_ = other.marginLimitDay_;
      openExposureLimit_ = other.openExposureLimit_;
      maxDayDDeltaLn_ = other.maxDayDDeltaLn_;
      maxDayDDeltaSh_ = other.maxDayDDeltaSh_;
      maxDayDDeltaAbs_ = other.maxDayDDeltaAbs_;
      maxDayWtVegaLn_ = other.maxDayWtVegaLn_;
      maxDayWtVegaSh_ = other.maxDayWtVegaSh_;
      maxDayWtVegaAbs_ = other.maxDayWtVegaAbs_;
      maxDayNValueLn_ = other.maxDayNValueLn_;
      maxDayNValueSh_ = other.maxDayNValueSh_;
      maxDayNValueAbs_ = other.maxDayNValueAbs_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskControl Clone() {
      return new SpdrRiskControl(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "stk_enabled" field.</summary>
    public const int StkEnabledFieldNumber = 197;
    private global::Spiderrock.Protobuf.MarState stkEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState StkEnabled {
      get { return stkEnabled_; }
      set {
        stkEnabled_ = value;
      }
    }

    /// <summary>Field number for the "fut_enabled" field.</summary>
    public const int FutEnabledFieldNumber = 198;
    private global::Spiderrock.Protobuf.MarState futEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState FutEnabled {
      get { return futEnabled_; }
      set {
        futEnabled_ = value;
      }
    }

    /// <summary>Field number for the "opt_enabled" field.</summary>
    public const int OptEnabledFieldNumber = 199;
    private global::Spiderrock.Protobuf.MarState optEnabled_ = global::Spiderrock.Protobuf.MarState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarState OptEnabled {
      get { return optEnabled_; }
      set {
        optEnabled_ = value;
      }
    }

    /// <summary>Field number for the "margin_limit_day" field.</summary>
    public const int MarginLimitDayFieldNumber = 200;
    private float marginLimitDay_;
    /// <summary>
    /// maximum net (per symbol/day) day portfolio (day trades only) margin (can include external sources)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginLimitDay {
      get { return marginLimitDay_; }
      set {
        marginLimitDay_ = value;
      }
    }

    /// <summary>Field number for the "open_exposure_limit" field.</summary>
    public const int OpenExposureLimitFieldNumber = 201;
    private float openExposureLimit_;
    /// <summary>
    /// maximum abs open child order $Delta (no netting) (open child orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpenExposureLimit {
      get { return openExposureLimit_; }
      set {
        openExposureLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_day_dDelta_ln" field.</summary>
    public const int MaxDayDDeltaLnFieldNumber = 127;
    private float maxDayDDeltaLn_;
    /// <summary>
    /// open long $Delta per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayDDeltaLn {
      get { return maxDayDDeltaLn_; }
      set {
        maxDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_day_dDelta_sh" field.</summary>
    public const int MaxDayDDeltaShFieldNumber = 130;
    private float maxDayDDeltaSh_;
    /// <summary>
    /// open short $Delta per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayDDeltaSh {
      get { return maxDayDDeltaSh_; }
      set {
        maxDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_day_dDelta_abs" field.</summary>
    public const int MaxDayDDeltaAbsFieldNumber = 133;
    private float maxDayDDeltaAbs_;
    /// <summary>
    /// absolute $Delta, |ddBot| + |ddSld| position per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayDDeltaAbs {
      get { return maxDayDDeltaAbs_; }
      set {
        maxDayDDeltaAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_day_wt_vega_ln" field.</summary>
    public const int MaxDayWtVegaLnFieldNumber = 145;
    private float maxDayWtVegaLn_;
    /// <summary>
    /// open long WtVega per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayWtVegaLn {
      get { return maxDayWtVegaLn_; }
      set {
        maxDayWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_day_wt_vega_sh" field.</summary>
    public const int MaxDayWtVegaShFieldNumber = 148;
    private float maxDayWtVegaSh_;
    /// <summary>
    /// open short WtVega per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayWtVegaSh {
      get { return maxDayWtVegaSh_; }
      set {
        maxDayWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_day_wt_vega_abs" field.</summary>
    public const int MaxDayWtVegaAbsFieldNumber = 151;
    private float maxDayWtVegaAbs_;
    /// <summary>
    /// open absolute WtVega, |WtVeBot| + |WtVeSld| per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayWtVegaAbs {
      get { return maxDayWtVegaAbs_; }
      set {
        maxDayWtVegaAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_day_nValue_ln" field.</summary>
    public const int MaxDayNValueLnFieldNumber = 202;
    private float maxDayNValueLn_;
    /// <summary>
    /// open long notional value per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayNValueLn {
      get { return maxDayNValueLn_; }
      set {
        maxDayNValueLn_ = value;
      }
    }

    /// <summary>Field number for the "max_day_nValue_sh" field.</summary>
    public const int MaxDayNValueShFieldNumber = 203;
    private float maxDayNValueSh_;
    /// <summary>
    /// open short notional value per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayNValueSh {
      get { return maxDayNValueSh_; }
      set {
        maxDayNValueSh_ = value;
      }
    }

    /// <summary>Field number for the "max_day_nValue_abs" field.</summary>
    public const int MaxDayNValueAbsFieldNumber = 204;
    private float maxDayNValueAbs_;
    /// <summary>
    /// absolute notional value, |NValueBot| + |NValueSld| per trading session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDayNValueAbs {
      get { return maxDayNValueAbs_; }
      set {
        maxDayNValueAbs_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 172;
    private string modifiedBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 175;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 178;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrRiskControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrRiskControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (StkEnabled != other.StkEnabled) return false;
      if (FutEnabled != other.FutEnabled) return false;
      if (OptEnabled != other.OptEnabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginLimitDay, other.MarginLimitDay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenExposureLimit, other.OpenExposureLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayDDeltaLn, other.MaxDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayDDeltaSh, other.MaxDayDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayDDeltaAbs, other.MaxDayDDeltaAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayWtVegaLn, other.MaxDayWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayWtVegaSh, other.MaxDayWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayWtVegaAbs, other.MaxDayWtVegaAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayNValueLn, other.MaxDayNValueLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayNValueSh, other.MaxDayNValueSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDayNValueAbs, other.MaxDayNValueAbs)) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= StkEnabled.GetHashCode();
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= FutEnabled.GetHashCode();
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) hash ^= OptEnabled.GetHashCode();
      if (MarginLimitDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginLimitDay);
      if (OpenExposureLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenExposureLimit);
      if (MaxDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayDDeltaLn);
      if (MaxDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayDDeltaSh);
      if (MaxDayDDeltaAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayDDeltaAbs);
      if (MaxDayWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayWtVegaLn);
      if (MaxDayWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayWtVegaSh);
      if (MaxDayWtVegaAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayWtVegaAbs);
      if (MaxDayNValueLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayNValueLn);
      if (MaxDayNValueSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayNValueSh);
      if (MaxDayNValueAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDayNValueAbs);
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (MaxDayDDeltaLn != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(MaxDayDDeltaLn);
      }
      if (MaxDayDDeltaSh != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(MaxDayDDeltaSh);
      }
      if (MaxDayDDeltaAbs != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(MaxDayDDeltaAbs);
      }
      if (MaxDayWtVegaLn != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(MaxDayWtVegaLn);
      }
      if (MaxDayWtVegaSh != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(MaxDayWtVegaSh);
      }
      if (MaxDayWtVegaAbs != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(MaxDayWtVegaAbs);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(146, 11);
        output.WriteMessage(Timestamp);
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(168, 12);
        output.WriteEnum((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(176, 12);
        output.WriteEnum((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) OptEnabled);
      }
      if (MarginLimitDay != 0F) {
        output.WriteRawTag(197, 12);
        output.WriteFloat(MarginLimitDay);
      }
      if (OpenExposureLimit != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(OpenExposureLimit);
      }
      if (MaxDayNValueLn != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MaxDayNValueLn);
      }
      if (MaxDayNValueSh != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(MaxDayNValueSh);
      }
      if (MaxDayNValueAbs != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(MaxDayNValueAbs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (MaxDayDDeltaLn != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(MaxDayDDeltaLn);
      }
      if (MaxDayDDeltaSh != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(MaxDayDDeltaSh);
      }
      if (MaxDayDDeltaAbs != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(MaxDayDDeltaAbs);
      }
      if (MaxDayWtVegaLn != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(MaxDayWtVegaLn);
      }
      if (MaxDayWtVegaSh != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(MaxDayWtVegaSh);
      }
      if (MaxDayWtVegaAbs != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(MaxDayWtVegaAbs);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(146, 11);
        output.WriteMessage(Timestamp);
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(168, 12);
        output.WriteEnum((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(176, 12);
        output.WriteEnum((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) OptEnabled);
      }
      if (MarginLimitDay != 0F) {
        output.WriteRawTag(197, 12);
        output.WriteFloat(MarginLimitDay);
      }
      if (OpenExposureLimit != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(OpenExposureLimit);
      }
      if (MaxDayNValueLn != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(MaxDayNValueLn);
      }
      if (MaxDayNValueSh != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(MaxDayNValueSh);
      }
      if (MaxDayNValueAbs != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(MaxDayNValueAbs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkEnabled);
      }
      if (FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutEnabled);
      }
      if (OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptEnabled);
      }
      if (MarginLimitDay != 0F) {
        size += 2 + 4;
      }
      if (OpenExposureLimit != 0F) {
        size += 2 + 4;
      }
      if (MaxDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxDayDDeltaAbs != 0F) {
        size += 2 + 4;
      }
      if (MaxDayWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxDayWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxDayWtVegaAbs != 0F) {
        size += 2 + 4;
      }
      if (MaxDayNValueLn != 0F) {
        size += 2 + 4;
      }
      if (MaxDayNValueSh != 0F) {
        size += 2 + 4;
      }
      if (MaxDayNValueAbs != 0F) {
        size += 2 + 4;
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrRiskControl other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.StkEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        StkEnabled = other.StkEnabled;
      }
      if (other.FutEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        FutEnabled = other.FutEnabled;
      }
      if (other.OptEnabled != global::Spiderrock.Protobuf.MarState.Unspecified) {
        OptEnabled = other.OptEnabled;
      }
      if (other.MarginLimitDay != 0F) {
        MarginLimitDay = other.MarginLimitDay;
      }
      if (other.OpenExposureLimit != 0F) {
        OpenExposureLimit = other.OpenExposureLimit;
      }
      if (other.MaxDayDDeltaLn != 0F) {
        MaxDayDDeltaLn = other.MaxDayDDeltaLn;
      }
      if (other.MaxDayDDeltaSh != 0F) {
        MaxDayDDeltaSh = other.MaxDayDDeltaSh;
      }
      if (other.MaxDayDDeltaAbs != 0F) {
        MaxDayDDeltaAbs = other.MaxDayDDeltaAbs;
      }
      if (other.MaxDayWtVegaLn != 0F) {
        MaxDayWtVegaLn = other.MaxDayWtVegaLn;
      }
      if (other.MaxDayWtVegaSh != 0F) {
        MaxDayWtVegaSh = other.MaxDayWtVegaSh;
      }
      if (other.MaxDayWtVegaAbs != 0F) {
        MaxDayWtVegaAbs = other.MaxDayWtVegaAbs;
      }
      if (other.MaxDayNValueLn != 0F) {
        MaxDayNValueLn = other.MaxDayNValueLn;
      }
      if (other.MaxDayNValueSh != 0F) {
        MaxDayNValueSh = other.MaxDayNValueSh;
      }
      if (other.MaxDayNValueAbs != 0F) {
        MaxDayNValueAbs = other.MaxDayNValueAbs;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 1021: {
            MaxDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 1045: {
            MaxDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 1069: {
            MaxDayDDeltaAbs = input.ReadFloat();
            break;
          }
          case 1165: {
            MaxDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 1189: {
            MaxDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 1213: {
            MaxDayWtVegaAbs = input.ReadFloat();
            break;
          }
          case 1378: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1400: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1426: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1576: {
            StkEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1584: {
            FutEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1592: {
            OptEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1605: {
            MarginLimitDay = input.ReadFloat();
            break;
          }
          case 1613: {
            OpenExposureLimit = input.ReadFloat();
            break;
          }
          case 1621: {
            MaxDayNValueLn = input.ReadFloat();
            break;
          }
          case 1629: {
            MaxDayNValueSh = input.ReadFloat();
            break;
          }
          case 1637: {
            MaxDayNValueAbs = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrRiskControl.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 1021: {
            MaxDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 1045: {
            MaxDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 1069: {
            MaxDayDDeltaAbs = input.ReadFloat();
            break;
          }
          case 1165: {
            MaxDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 1189: {
            MaxDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 1213: {
            MaxDayWtVegaAbs = input.ReadFloat();
            break;
          }
          case 1378: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1400: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1426: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1576: {
            StkEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1584: {
            FutEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1592: {
            OptEnabled = (global::Spiderrock.Protobuf.MarState) input.ReadEnum();
            break;
          }
          case 1605: {
            MarginLimitDay = input.ReadFloat();
            break;
          }
          case 1613: {
            OpenExposureLimit = input.ReadFloat();
            break;
          }
          case 1621: {
            MaxDayNValueLn = input.ReadFloat();
            break;
          }
          case 1629: {
            MaxDayNValueSh = input.ReadFloat();
            break;
          }
          case 1637: {
            MaxDayNValueAbs = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrRiskControl message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrRiskControl.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          riskControlKey_ = other.riskControlKey_;
          riskControlLevel_ = other.riskControlLevel_;
          riskFirm_ = other.riskFirm_;
          isTestAccnt_ = other.isTestAccnt_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 12;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        /// <summary>
        /// '*-ANY-ANY' default (if a more precise ticker control does not exist)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "risk_control_key" field.</summary>
        public const int RiskControlKeyFieldNumber = 13;
        private string riskControlKey_ = "";
        /// <summary>
        /// must be an SRClientAccnt if riskControlLevel=Accnt; must be an SRUser if riskControlLevel=User; ignored if riskControlLevel=ClientFirm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RiskControlKey {
          get { return riskControlKey_; }
          set {
            riskControlKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "risk_control_level" field.</summary>
        public const int RiskControlLevelFieldNumber = 14;
        private global::Spiderrock.Protobuf.RiskControlLevel riskControlLevel_ = global::Spiderrock.Protobuf.RiskControlLevel.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskControlLevel RiskControlLevel {
          get { return riskControlLevel_; }
          set {
            riskControlLevel_ = value;
          }
        }

        /// <summary>Field number for the "risk_firm" field.</summary>
        public const int RiskFirmFieldNumber = 15;
        private string riskFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RiskFirm {
          get { return riskFirm_; }
          set {
            riskFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_test_accnt" field.</summary>
        public const int IsTestAccntFieldNumber = 16;
        private global::Spiderrock.Protobuf.YesNo isTestAccnt_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        /// <summary>
        /// if Yes, this control applies only to risk from test accnts
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo IsTestAccnt {
          get { return isTestAccnt_; }
          set {
            isTestAccnt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (RiskControlKey != other.RiskControlKey) return false;
          if (RiskControlLevel != other.RiskControlLevel) return false;
          if (RiskFirm != other.RiskFirm) return false;
          if (IsTestAccnt != other.IsTestAccnt) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (RiskControlKey.Length != 0) hash ^= RiskControlKey.GetHashCode();
          if (RiskControlLevel != global::Spiderrock.Protobuf.RiskControlLevel.Unspecified) hash ^= RiskControlLevel.GetHashCode();
          if (RiskFirm.Length != 0) hash ^= RiskFirm.GetHashCode();
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAccnt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Ticker);
          }
          if (RiskControlKey.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(RiskControlKey);
          }
          if (RiskControlLevel != global::Spiderrock.Protobuf.RiskControlLevel.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RiskControlLevel);
          }
          if (RiskFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(128, 1);
            output.WriteEnum((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Ticker);
          }
          if (RiskControlKey.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(RiskControlKey);
          }
          if (RiskControlLevel != global::Spiderrock.Protobuf.RiskControlLevel.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RiskControlLevel);
          }
          if (RiskFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(128, 1);
            output.WriteEnum((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (RiskControlKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskControlKey);
          }
          if (RiskControlLevel != global::Spiderrock.Protobuf.RiskControlLevel.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskControlLevel);
          }
          if (RiskFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskFirm);
          }
          if (IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAccnt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.RiskControlKey.Length != 0) {
            RiskControlKey = other.RiskControlKey;
          }
          if (other.RiskControlLevel != global::Spiderrock.Protobuf.RiskControlLevel.Unspecified) {
            RiskControlLevel = other.RiskControlLevel;
          }
          if (other.RiskFirm.Length != 0) {
            RiskFirm = other.RiskFirm;
          }
          if (other.IsTestAccnt != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            IsTestAccnt = other.IsTestAccnt;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 98: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 106: {
                RiskControlKey = input.ReadString();
                break;
              }
              case 112: {
                RiskControlLevel = (global::Spiderrock.Protobuf.RiskControlLevel) input.ReadEnum();
                break;
              }
              case 122: {
                RiskFirm = input.ReadString();
                break;
              }
              case 128: {
                IsTestAccnt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 98: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 106: {
                RiskControlKey = input.ReadString();
                break;
              }
              case 112: {
                RiskControlLevel = (global::Spiderrock.Protobuf.RiskControlLevel) input.ReadEnum();
                break;
              }
              case 122: {
                RiskFirm = input.ReadString();
                break;
              }
              case 128: {
                IsTestAccnt = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
