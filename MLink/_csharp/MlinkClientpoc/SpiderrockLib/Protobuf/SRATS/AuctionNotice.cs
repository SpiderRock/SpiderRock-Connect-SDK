// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRATS/AuctionNotice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRATS/AuctionNotice.proto</summary>
  public static partial class AuctionNoticeReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRATS/AuctionNotice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuctionNoticeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJQcm90b2J1Zi9TUkFUUy9BdWN0aW9uTm90aWNlLnByb3RvEhNzcGlkZXJy",
            "b2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90bxofZ29vZ2xl",
            "L3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKLFgoNQXVjdGlvbk5vdGljZRIz",
            "CgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYuTWVzc2FnZU1l",
            "dGFkYXRhEjUKBHBrZXkYAiABKAsyJy5zcGlkZXJyb2NrLnByb3RvYnVmLkF1",
            "Y3Rpb25Ob3RpY2UuUEtleRIuCgZ0aWNrZXIYayABKAsyHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlRpY2tlcktleRIwCgp0cmFkZV9kYXRlGGogASgLMhwuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5EjMKD2lzX3Rlc3RfYXVjdGlvbhho",
            "IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SEwoKc2hvcnRfY29k",
            "ZRi6ASABKAkSNgoMYXVjdGlvbl90eXBlGGQgASgOMiAuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5BdWN0aW9uVHlwZRI4Cg1hdWN0aW9uX2V2ZW50GGUgASgOMiEu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uRXZlbnQSFwoOc3JjX2F1Y3Rp",
            "b25faUQYqQEgASgJEhkKEHNyY19hdWN0aW9uX3R5cGUYqgEgASgJEjoKDmF1",
            "Y3Rpb25fc291cmNlGGcgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5BdWN0",
            "aW9uU291cmNlEhAKCGluZHVzdHJ5GGwgASgJEjQKC3N5bWJvbF90eXBlGG0g",
            "ASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5TeW1ib2xUeXBlEhcKD3VfYXZn",
            "X2RhaWx5X3ZsbRhuIAEoAhIvCgljdXN0X3NpZGUYbyABKA4yHC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLkJ1eVNlbGwSEAoIY3VzdF9xdHkYcCABKAUSEAoIY3Vz",
            "dF9wcmMYcSABKAESMAoMaGFzX2N1c3RfcHJjGHIgASgOMhouc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5ZZXNObxI0Cg1jdXN0X25iYm9fY2FwGLsBIAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuTmJib0NhcBI2Cg5jdXN0X2Zpcm1fdHlwZRii",
            "ASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkZpcm1UeXBlEhgKD2N1c3Rf",
            "YWdlbnRfbVBJRBijASABKAkSGAoQY3VzdF9jbGllbnRfZmlybRhzIAEoCRIY",
            "ChBjb21tX2VuaGFuY2VtZW50GHQgASgCEjQKEGN1c3RfY29tbV9wYXlpbmcY",
            "dSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjcKDWN1c3RfcXR5",
            "X2NvbmQYdiABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLkN1c3RRdHlDb25k",
            "EhgKEGF1Y3Rpb25fZHVyYXRpb24YdyABKAUSFAoMbnVtX29wdF9sZWdzGHgg",
            "ASgFEjcKDHNwcmVhZF9jbGFzcxi8ASABKA4yIC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlNwcmVhZENsYXNzEjcKCmxpbWl0X3R5cGUYqwEgASgOMiIuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyTGltaXRUeXBlEjgKDXNwcmVhZF9mbGF2b3IY",
            "eiABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlNwcmVhZEZsYXZvchIyCg5j",
            "b250YWluc19oZWRnZRh7IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVz",
            "Tm8SMgoNY29udGFpbnNfZmxleBikASABKA4yGi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlllc05vEjkKFGNvbnRhaW5zX211bHRpX2hlZGdlGKUBIAEoDjIaLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuWWVzTm8SDQoFdV9iaWQYfCABKAESDQoFdV9h",
            "c2sYfSABKAESEQoIcmVmX3VQcmMYuAEgASgBEg8KBm5ldF9kZRisASABKAIS",
            "DwoGbmV0X2dhGK0BIAEoAhIPCgZuZXRfdGgYrgEgASgCEg8KBm5ldF92ZRiv",
            "ASABKAISFQoMcGtnX3N1cmZfcHJjGLABIAEoAhIVCgxwa2dfdGhlb19wcmMY",
            "tgEgASgCEhQKC3BrZ19iaWRfcHJjGLEBIAEoAhIUCgtwa2dfYXNrX3ByYxiy",
            "ASABKAISFAoLcG9pbnRfdmFsdWUYswEgASgBEjYKDnBvaW50X2N1cnJlbmN5",
            "GLkBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuQ3VycmVuY3kSFgoNc3Jj",
            "X3RpbWVzdGFtcBi0ASABKAMSFgoNbmV0X3RpbWVzdGFtcBi1ASABKAMSLgoJ",
            "dGltZXN0YW1wGKYBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "QQoRaW5jbHVkZV9zUk5ldHdvcmsYnQEgASgOMiUuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5JbmNsRXhjbERpc2Nsb3NlElgKFmRpcmVjdGVkX2NvdW50ZXJfcGFy",
            "dHkYngEgAygLMjcuc3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uTm90aWNl",
            "LkRpcmVjdGVkQ291bnRlclBhcnR5EkEKCm9yZGVyX2xlZ3MYgwEgAygLMiwu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uTm90aWNlLk9yZGVyTGVncxod",
            "CgRQS2V5EhUKDW5vdGljZV9udW1iZXIYCyABKAManAEKFERpcmVjdGVkQ291",
            "bnRlclBhcnR5EhQKC2NsaWVudF9maXJtGJ8BIAEoCRI5CglpbmNsX2V4Y2wY",
            "oAEgASgOMiUuc3BpZGVycm9jay5wcm90b2J1Zi5JbmNsRXhjbERpc2Nsb3Nl",
            "EjMKDmlzX2NvbW1fcGF5aW5nGKEBIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuWWVzTm8a0gQKCU9yZGVyTGVncxIwCgdzZWNfa2V5GIQBIAEoCzIeLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuT3B0aW9uS2V5EjMKCHNlY190eXBlGIUBIAEo",
            "DjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5cGUSKwoEc2lkZRiG",
            "ASABKA4yHC5zcGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGwSDgoFcmF0aW8Y",
            "hwEgASgNEhMKCnVuZF9wZXJfY24YiAEgASgFEjIKCGV4cF90eXBlGIoBIAEo",
            "DjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5VHlwZRIOCgV5ZWFycxiL",
            "ASABKAISDQoEcmF0ZRiMASABKAISEAoHYXRtX3ZvbBiNASABKAISEAoHZGRp",
            "dl9wdhiOASABKAISDgoFdF92b2wYjwEgASgCEg4KBXRfcHJjGLcBIAEoAhIO",
            "CgVzX3ZvbBiQASABKAISDgoFc19kaXYYkQEgASgCEg4KBXNfcHJjGJIBIAEo",
            "AhILCgJkZRiTASABKAISCwoCZ2EYlAEgASgCEgsKAnRoGJUBIAEoAhILCgJ2",
            "ZRiWASABKAISLQoIc192b2xfb2sYqAEgASgOMhouc3BpZGVycm9jay5wcm90",
            "b2J1Zi5ZZXNObxIMCgNiaWQYvQEgASgCEg8KBmJpZF9zehi+ASABKAUSEQoI",
            "YmlkX21hc2sYvwEgASgNEgwKA2FzaxjAASABKAISDwoGYXNrX3N6GMEBIAEo",
            "BRIRCghhc2tfbWFzaxjCASABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNotice), global::Spiderrock.Protobuf.AuctionNotice.Parser, new[]{ "Meta", "Pkey", "Ticker", "TradeDate", "IsTestAuction", "ShortCode", "AuctionType", "AuctionEvent", "SrcAuctionID", "SrcAuctionType", "AuctionSource", "Industry", "SymbolType", "UAvgDailyVlm", "CustSide", "CustQty", "CustPrc", "HasCustPrc", "CustNbboCap", "CustFirmType", "CustAgentMPID", "CustClientFirm", "CommEnhancement", "CustCommPaying", "CustQtyCond", "AuctionDuration", "NumOptLegs", "SpreadClass", "LimitType", "SpreadFlavor", "ContainsHedge", "ContainsFlex", "ContainsMultiHedge", "UBid", "UAsk", "RefUPrc", "NetDe", "NetGa", "NetTh", "NetVe", "PkgSurfPrc", "PkgTheoPrc", "PkgBidPrc", "PkgAskPrc", "PointValue", "PointCurrency", "SrcTimestamp", "NetTimestamp", "Timestamp", "IncludeSRNetwork", "DirectedCounterParty", "OrderLegs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNotice.Types.PKey), global::Spiderrock.Protobuf.AuctionNotice.Types.PKey.Parser, new[]{ "NoticeNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty), global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty.Parser, new[]{ "ClientFirm", "InclExcl", "IsCommPaying" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs), global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs.Parser, new[]{ "SecKey", "SecType", "Side", "Ratio", "UndPerCn", "ExpType", "Years", "Rate", "AtmVol", "DdivPv", "TVol", "TPrc", "SVol", "SDiv", "SPrc", "De", "Ga", "Th", "Ve", "SVolOk", "Bid", "BidSz", "BidMask", "Ask", "AskSz", "AskMask" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuctionNotice : pb::IMessage<AuctionNotice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuctionNotice> _parser = new pb::MessageParser<AuctionNotice>(() => new AuctionNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuctionNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AuctionNoticeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNotice(AuctionNotice other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      isTestAuction_ = other.isTestAuction_;
      shortCode_ = other.shortCode_;
      auctionType_ = other.auctionType_;
      auctionEvent_ = other.auctionEvent_;
      srcAuctionID_ = other.srcAuctionID_;
      srcAuctionType_ = other.srcAuctionType_;
      auctionSource_ = other.auctionSource_;
      industry_ = other.industry_;
      symbolType_ = other.symbolType_;
      uAvgDailyVlm_ = other.uAvgDailyVlm_;
      custSide_ = other.custSide_;
      custQty_ = other.custQty_;
      custPrc_ = other.custPrc_;
      hasCustPrc_ = other.hasCustPrc_;
      custNbboCap_ = other.custNbboCap_;
      custFirmType_ = other.custFirmType_;
      custAgentMPID_ = other.custAgentMPID_;
      custClientFirm_ = other.custClientFirm_;
      commEnhancement_ = other.commEnhancement_;
      custCommPaying_ = other.custCommPaying_;
      custQtyCond_ = other.custQtyCond_;
      auctionDuration_ = other.auctionDuration_;
      numOptLegs_ = other.numOptLegs_;
      spreadClass_ = other.spreadClass_;
      limitType_ = other.limitType_;
      spreadFlavor_ = other.spreadFlavor_;
      containsHedge_ = other.containsHedge_;
      containsFlex_ = other.containsFlex_;
      containsMultiHedge_ = other.containsMultiHedge_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      refUPrc_ = other.refUPrc_;
      netDe_ = other.netDe_;
      netGa_ = other.netGa_;
      netTh_ = other.netTh_;
      netVe_ = other.netVe_;
      pkgSurfPrc_ = other.pkgSurfPrc_;
      pkgTheoPrc_ = other.pkgTheoPrc_;
      pkgBidPrc_ = other.pkgBidPrc_;
      pkgAskPrc_ = other.pkgAskPrc_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      includeSRNetwork_ = other.includeSRNetwork_;
      directedCounterParty_ = other.directedCounterParty_.Clone();
      orderLegs_ = other.orderLegs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNotice Clone() {
      return new AuctionNotice(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AuctionNotice.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionNotice.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 107;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 106;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "is_test_auction" field.</summary>
    public const int IsTestAuctionFieldNumber = 104;
    private global::Spiderrock.Protobuf.YesNo isTestAuction_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, auction is a test auction (not a prod/live auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTestAuction {
      get { return isTestAuction_; }
      set {
        isTestAuction_ = value;
      }
    }

    /// <summary>Field number for the "short_code" field.</summary>
    public const int ShortCodeFieldNumber = 186;
    private string shortCode_ = "";
    /// <summary>
    /// auction short code (unique per day) (block auctions only) (can be used to find auctions on SR tools)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortCode {
      get { return shortCode_; }
      set {
        shortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 100;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_event" field.</summary>
    public const int AuctionEventFieldNumber = 101;
    private global::Spiderrock.Protobuf.AuctionEvent auctionEvent_ = global::Spiderrock.Protobuf.AuctionEvent.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionEvent AuctionEvent {
      get { return auctionEvent_; }
      set {
        auctionEvent_ = value;
      }
    }

    /// <summary>Field number for the "src_auction_iD" field.</summary>
    public const int SrcAuctionIDFieldNumber = 169;
    private string srcAuctionID_ = "";
    /// <summary>
    /// auction ID as known by the auction source (empty for SRC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcAuctionID {
      get { return srcAuctionID_; }
      set {
        srcAuctionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_auction_type" field.</summary>
    public const int SrcAuctionTypeFieldNumber = 170;
    private string srcAuctionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcAuctionType {
      get { return srcAuctionType_; }
      set {
        srcAuctionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auction_source" field.</summary>
    public const int AuctionSourceFieldNumber = 103;
    private global::Spiderrock.Protobuf.AuctionSource auctionSource_ = global::Spiderrock.Protobuf.AuctionSource.Unspecified;
    /// <summary>
    /// source of the auction notice (eg. SRC, MIAX, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionSource AuctionSource {
      get { return auctionSource_; }
      set {
        auctionSource_ = value;
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 108;
    private string industry_ = "";
    /// <summary>
    /// industry string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 109;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "u_avg_daily_vlm" field.</summary>
    public const int UAvgDailyVlmFieldNumber = 110;
    private float uAvgDailyVlm_;
    /// <summary>
    /// underlier average daily trading volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAvgDailyVlm {
      get { return uAvgDailyVlm_; }
      set {
        uAvgDailyVlm_ = value;
      }
    }

    /// <summary>Field number for the "cust_side" field.</summary>
    public const int CustSideFieldNumber = 111;
    private global::Spiderrock.Protobuf.BuySell custSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// if available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell CustSide {
      get { return custSide_; }
      set {
        custSide_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty" field.</summary>
    public const int CustQtyFieldNumber = 112;
    private int custQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CustQty {
      get { return custQty_; }
      set {
        custQty_ = value;
      }
    }

    /// <summary>Field number for the "cust_prc" field.</summary>
    public const int CustPrcFieldNumber = 113;
    private double custPrc_;
    /// <summary>
    /// public cust price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CustPrc {
      get { return custPrc_; }
      set {
        custPrc_ = value;
      }
    }

    /// <summary>Field number for the "has_cust_prc" field.</summary>
    public const int HasCustPrcFieldNumber = 114;
    private global::Spiderrock.Protobuf.YesNo hasCustPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasCustPrc {
      get { return hasCustPrc_; }
      set {
        hasCustPrc_ = value;
      }
    }

    /// <summary>Field number for the "cust_nbbo_cap" field.</summary>
    public const int CustNbboCapFieldNumber = 187;
    private global::Spiderrock.Protobuf.NbboCap custNbboCap_ = global::Spiderrock.Protobuf.NbboCap.Unspecified;
    /// <summary>
    /// indicates if cust price is capped at NBBO (or 1, 5, 10 pennies through)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.NbboCap CustNbboCap {
      get { return custNbboCap_; }
      set {
        custNbboCap_ = value;
      }
    }

    /// <summary>Field number for the "cust_firm_type" field.</summary>
    public const int CustFirmTypeFieldNumber = 162;
    private global::Spiderrock.Protobuf.FirmType custFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// cust firm type (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType CustFirmType {
      get { return custFirmType_; }
      set {
        custFirmType_ = value;
      }
    }

    /// <summary>Field number for the "cust_agent_mPID" field.</summary>
    public const int CustAgentMPIDFieldNumber = 163;
    private string custAgentMPID_ = "";
    /// <summary>
    /// cust agent exchange member initiating the auction (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustAgentMPID {
      get { return custAgentMPID_; }
      set {
        custAgentMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cust_client_firm" field.</summary>
    public const int CustClientFirmFieldNumber = 115;
    private string custClientFirm_ = "";
    /// <summary>
    /// cust client firm (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustClientFirm {
      get { return custClientFirm_; }
      set {
        custClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comm_enhancement" field.</summary>
    public const int CommEnhancementFieldNumber = 116;
    private float commEnhancement_;
    /// <summary>
    /// additional commission (if any) paid by responder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CommEnhancement {
      get { return commEnhancement_; }
      set {
        commEnhancement_ = value;
      }
    }

    /// <summary>Field number for the "cust_comm_paying" field.</summary>
    public const int CustCommPayingFieldNumber = 117;
    private global::Spiderrock.Protobuf.YesNo custCommPaying_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// client is commission paying (to the responder)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CustCommPaying {
      get { return custCommPaying_; }
      set {
        custCommPaying_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty_cond" field.</summary>
    public const int CustQtyCondFieldNumber = 118;
    private global::Spiderrock.Protobuf.CustQtyCond custQtyCond_ = global::Spiderrock.Protobuf.CustQtyCond.Unspecified;
    /// <summary>
    /// UpToQty, AllOrNone, QtyOrMore
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CustQtyCond CustQtyCond {
      get { return custQtyCond_; }
      set {
        custQtyCond_ = value;
      }
    }

    /// <summary>Field number for the "auction_duration" field.</summary>
    public const int AuctionDurationFieldNumber = 119;
    private int auctionDuration_;
    /// <summary>
    /// [expected] auction duration (in milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionDuration {
      get { return auctionDuration_; }
      set {
        auctionDuration_ = value;
      }
    }

    /// <summary>Field number for the "num_opt_legs" field.</summary>
    public const int NumOptLegsFieldNumber = 120;
    private int numOptLegs_;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptLegs {
      get { return numOptLegs_; }
      set {
        numOptLegs_ = value;
      }
    }

    /// <summary>Field number for the "spread_class" field.</summary>
    public const int SpreadClassFieldNumber = 188;
    private global::Spiderrock.Protobuf.SpreadClass spreadClass_ = global::Spiderrock.Protobuf.SpreadClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadClass SpreadClass {
      get { return spreadClass_; }
      set {
        spreadClass_ = value;
      }
    }

    /// <summary>Field number for the "limit_type" field.</summary>
    public const int LimitTypeFieldNumber = 171;
    private global::Spiderrock.Protobuf.SpdrLimitType limitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "spread_flavor" field.</summary>
    public const int SpreadFlavorFieldNumber = 122;
    private global::Spiderrock.Protobuf.SpreadFlavor spreadFlavor_ = global::Spiderrock.Protobuf.SpreadFlavor.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadFlavor SpreadFlavor {
      get { return spreadFlavor_; }
      set {
        spreadFlavor_ = value;
      }
    }

    /// <summary>Field number for the "contains_hedge" field.</summary>
    public const int ContainsHedgeFieldNumber = 123;
    private global::Spiderrock.Protobuf.YesNo containsHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsHedge {
      get { return containsHedge_; }
      set {
        containsHedge_ = value;
      }
    }

    /// <summary>Field number for the "contains_flex" field.</summary>
    public const int ContainsFlexFieldNumber = 164;
    private global::Spiderrock.Protobuf.YesNo containsFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains FLEX options (not regular listed options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsFlex {
      get { return containsFlex_; }
      set {
        containsFlex_ = value;
      }
    }

    /// <summary>Field number for the "contains_multi_hedge" field.</summary>
    public const int ContainsMultiHedgeFieldNumber = 165;
    private global::Spiderrock.Protobuf.YesNo containsMultiHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains MultiHedge (corp action adjusted) options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsMultiHedge {
      get { return containsMultiHedge_; }
      set {
        containsMultiHedge_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 124;
    private double uBid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 125;
    private double uAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc" field.</summary>
    public const int RefUPrcFieldNumber = 184;
    private double refUPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc {
      get { return refUPrc_; }
      set {
        refUPrc_ = value;
      }
    }

    /// <summary>Field number for the "net_de" field.</summary>
    public const int NetDeFieldNumber = 172;
    private float netDe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetDe {
      get { return netDe_; }
      set {
        netDe_ = value;
      }
    }

    /// <summary>Field number for the "net_ga" field.</summary>
    public const int NetGaFieldNumber = 173;
    private float netGa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetGa {
      get { return netGa_; }
      set {
        netGa_ = value;
      }
    }

    /// <summary>Field number for the "net_th" field.</summary>
    public const int NetThFieldNumber = 174;
    private float netTh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetTh {
      get { return netTh_; }
      set {
        netTh_ = value;
      }
    }

    /// <summary>Field number for the "net_ve" field.</summary>
    public const int NetVeFieldNumber = 175;
    private float netVe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetVe {
      get { return netVe_; }
      set {
        netVe_ = value;
      }
    }

    /// <summary>Field number for the "pkg_surf_prc" field.</summary>
    public const int PkgSurfPrcFieldNumber = 176;
    private float pkgSurfPrc_;
    /// <summary>
    /// SR Surface Price (entire package)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgSurfPrc {
      get { return pkgSurfPrc_; }
      set {
        pkgSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "pkg_theo_prc" field.</summary>
    public const int PkgTheoPrcFieldNumber = 182;
    private float pkgTheoPrc_;
    /// <summary>
    /// Client Theo Price (entire package) (if client surfaces uploaded to SR)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgTheoPrc {
      get { return pkgTheoPrc_; }
      set {
        pkgTheoPrc_ = value;
      }
    }

    /// <summary>Field number for the "pkg_bid_prc" field.</summary>
    public const int PkgBidPrcFieldNumber = 177;
    private float pkgBidPrc_;
    /// <summary>
    /// leg market best way price (pkg bid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgBidPrc {
      get { return pkgBidPrc_; }
      set {
        pkgBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "pkg_ask_prc" field.</summary>
    public const int PkgAskPrcFieldNumber = 178;
    private float pkgAskPrc_;
    /// <summary>
    /// leg market worst way price (pkg ask)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgAskPrc {
      get { return pkgAskPrc_; }
      set {
        pkgAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 179;
    private double pointValue_;
    /// <summary>
    /// money settlement value of one (1.0) point of option premium/strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 185;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 180;
    private long srcTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 181;
    private long netTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 166;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// from ats / exchange net timestamp if possible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "include_sRNetwork" field.</summary>
    public const int IncludeSRNetworkFieldNumber = 157;
    private global::Spiderrock.Protobuf.InclExclDisclose includeSRNetwork_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.InclExclDisclose IncludeSRNetwork {
      get { return includeSRNetwork_; }
      set {
        includeSRNetwork_ = value;
      }
    }

    /// <summary>Field number for the "directed_counter_party" field.</summary>
    public const int DirectedCounterPartyFieldNumber = 158;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty> _repeated_directedCounterParty_codec
        = pb::FieldCodec.ForMessage(1266, global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty> directedCounterParty_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.DirectedCounterParty> DirectedCounterParty {
      get { return directedCounterParty_; }
    }

    /// <summary>Field number for the "order_legs" field.</summary>
    public const int OrderLegsFieldNumber = 131;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs> _repeated_orderLegs_codec
        = pb::FieldCodec.ForMessage(1050, global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs> orderLegs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNotice.Types.OrderLegs> OrderLegs {
      get { return orderLegs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuctionNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuctionNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (IsTestAuction != other.IsTestAuction) return false;
      if (ShortCode != other.ShortCode) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionEvent != other.AuctionEvent) return false;
      if (SrcAuctionID != other.SrcAuctionID) return false;
      if (SrcAuctionType != other.SrcAuctionType) return false;
      if (AuctionSource != other.AuctionSource) return false;
      if (Industry != other.Industry) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAvgDailyVlm, other.UAvgDailyVlm)) return false;
      if (CustSide != other.CustSide) return false;
      if (CustQty != other.CustQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CustPrc, other.CustPrc)) return false;
      if (HasCustPrc != other.HasCustPrc) return false;
      if (CustNbboCap != other.CustNbboCap) return false;
      if (CustFirmType != other.CustFirmType) return false;
      if (CustAgentMPID != other.CustAgentMPID) return false;
      if (CustClientFirm != other.CustClientFirm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommEnhancement, other.CommEnhancement)) return false;
      if (CustCommPaying != other.CustCommPaying) return false;
      if (CustQtyCond != other.CustQtyCond) return false;
      if (AuctionDuration != other.AuctionDuration) return false;
      if (NumOptLegs != other.NumOptLegs) return false;
      if (SpreadClass != other.SpreadClass) return false;
      if (LimitType != other.LimitType) return false;
      if (SpreadFlavor != other.SpreadFlavor) return false;
      if (ContainsHedge != other.ContainsHedge) return false;
      if (ContainsFlex != other.ContainsFlex) return false;
      if (ContainsMultiHedge != other.ContainsMultiHedge) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc, other.RefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetDe, other.NetDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetGa, other.NetGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetTh, other.NetTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetVe, other.NetVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgSurfPrc, other.PkgSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgTheoPrc, other.PkgTheoPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgBidPrc, other.PkgBidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgAskPrc, other.PkgAskPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (IncludeSRNetwork != other.IncludeSRNetwork) return false;
      if(!directedCounterParty_.Equals(other.directedCounterParty_)) return false;
      if(!orderLegs_.Equals(other.orderLegs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAuction.GetHashCode();
      if (ShortCode.Length != 0) hash ^= ShortCode.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) hash ^= AuctionEvent.GetHashCode();
      if (SrcAuctionID.Length != 0) hash ^= SrcAuctionID.GetHashCode();
      if (SrcAuctionType.Length != 0) hash ^= SrcAuctionType.GetHashCode();
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) hash ^= AuctionSource.GetHashCode();
      if (Industry.Length != 0) hash ^= Industry.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (UAvgDailyVlm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAvgDailyVlm);
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= CustSide.GetHashCode();
      if (CustQty != 0) hash ^= CustQty.GetHashCode();
      if (CustPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CustPrc);
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasCustPrc.GetHashCode();
      if (CustNbboCap != global::Spiderrock.Protobuf.NbboCap.Unspecified) hash ^= CustNbboCap.GetHashCode();
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= CustFirmType.GetHashCode();
      if (CustAgentMPID.Length != 0) hash ^= CustAgentMPID.GetHashCode();
      if (CustClientFirm.Length != 0) hash ^= CustClientFirm.GetHashCode();
      if (CommEnhancement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommEnhancement);
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CustCommPaying.GetHashCode();
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) hash ^= CustQtyCond.GetHashCode();
      if (AuctionDuration != 0) hash ^= AuctionDuration.GetHashCode();
      if (NumOptLegs != 0) hash ^= NumOptLegs.GetHashCode();
      if (SpreadClass != global::Spiderrock.Protobuf.SpreadClass.Unspecified) hash ^= SpreadClass.GetHashCode();
      if (LimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= LimitType.GetHashCode();
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) hash ^= SpreadFlavor.GetHashCode();
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsHedge.GetHashCode();
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsFlex.GetHashCode();
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsMultiHedge.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (RefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc);
      if (NetDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetDe);
      if (NetGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetGa);
      if (NetTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetTh);
      if (NetVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetVe);
      if (PkgSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgSurfPrc);
      if (PkgTheoPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgTheoPrc);
      if (PkgBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgBidPrc);
      if (PkgAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgAskPrc);
      if (PointValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= IncludeSRNetwork.GetHashCode();
      hash ^= directedCounterParty_.GetHashCode();
      hash ^= orderLegs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) AuctionEvent);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(TradeDate);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ticker);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(137, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(144, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(CommEnhancement);
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(AuctionDuration);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(208, 7);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 7);
        output.WriteEnum((int) ContainsHedge);
      }
      if (UBid != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(233, 7);
        output.WriteDouble(UAsk);
      }
      orderLegs_.WriteTo(output, _repeated_orderLegs_codec);
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(output, _repeated_directedCounterParty_codec);
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(144, 10);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(CustAgentMPID);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 10);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 10);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(Timestamp);
      }
      if (SrcAuctionID.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        output.WriteRawTag(210, 10);
        output.WriteString(SrcAuctionType);
      }
      if (LimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(216, 10);
        output.WriteEnum((int) LimitType);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(237, 10);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(245, 10);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(NetVe);
      }
      if (PkgSurfPrc != 0F) {
        output.WriteRawTag(133, 11);
        output.WriteFloat(PkgSurfPrc);
      }
      if (PkgBidPrc != 0F) {
        output.WriteRawTag(141, 11);
        output.WriteFloat(PkgBidPrc);
      }
      if (PkgAskPrc != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(PkgAskPrc);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(153, 11);
        output.WriteDouble(PointValue);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(160, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(168, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (PkgTheoPrc != 0F) {
        output.WriteRawTag(181, 11);
        output.WriteFloat(PkgTheoPrc);
      }
      if (RefUPrc != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(RefUPrc);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 11);
        output.WriteEnum((int) PointCurrency);
      }
      if (ShortCode.Length != 0) {
        output.WriteRawTag(210, 11);
        output.WriteString(ShortCode);
      }
      if (CustNbboCap != global::Spiderrock.Protobuf.NbboCap.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) CustNbboCap);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.SpreadClass.Unspecified) {
        output.WriteRawTag(224, 11);
        output.WriteEnum((int) SpreadClass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) AuctionEvent);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(TradeDate);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ticker);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(137, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(144, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(CommEnhancement);
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(AuctionDuration);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(208, 7);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 7);
        output.WriteEnum((int) ContainsHedge);
      }
      if (UBid != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(233, 7);
        output.WriteDouble(UAsk);
      }
      orderLegs_.WriteTo(ref output, _repeated_orderLegs_codec);
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(ref output, _repeated_directedCounterParty_codec);
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(144, 10);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(CustAgentMPID);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 10);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 10);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(Timestamp);
      }
      if (SrcAuctionID.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        output.WriteRawTag(210, 10);
        output.WriteString(SrcAuctionType);
      }
      if (LimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(216, 10);
        output.WriteEnum((int) LimitType);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(237, 10);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(245, 10);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(NetVe);
      }
      if (PkgSurfPrc != 0F) {
        output.WriteRawTag(133, 11);
        output.WriteFloat(PkgSurfPrc);
      }
      if (PkgBidPrc != 0F) {
        output.WriteRawTag(141, 11);
        output.WriteFloat(PkgBidPrc);
      }
      if (PkgAskPrc != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(PkgAskPrc);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(153, 11);
        output.WriteDouble(PointValue);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(160, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(168, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (PkgTheoPrc != 0F) {
        output.WriteRawTag(181, 11);
        output.WriteFloat(PkgTheoPrc);
      }
      if (RefUPrc != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(RefUPrc);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 11);
        output.WriteEnum((int) PointCurrency);
      }
      if (ShortCode.Length != 0) {
        output.WriteRawTag(210, 11);
        output.WriteString(ShortCode);
      }
      if (CustNbboCap != global::Spiderrock.Protobuf.NbboCap.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) CustNbboCap);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.SpreadClass.Unspecified) {
        output.WriteRawTag(224, 11);
        output.WriteEnum((int) SpreadClass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAuction);
      }
      if (ShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShortCode);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionEvent);
      }
      if (SrcAuctionID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcAuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSource);
      }
      if (Industry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        size += 2 + 4;
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustSide);
      }
      if (CustQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustQty);
      }
      if (CustPrc != 0D) {
        size += 2 + 8;
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCustPrc);
      }
      if (CustNbboCap != global::Spiderrock.Protobuf.NbboCap.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustNbboCap);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        size += 2 + 4;
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionDuration);
      }
      if (NumOptLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.SpreadClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadClass);
      }
      if (LimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitType);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsMultiHedge);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (RefUPrc != 0D) {
        size += 2 + 8;
      }
      if (NetDe != 0F) {
        size += 2 + 4;
      }
      if (NetGa != 0F) {
        size += 2 + 4;
      }
      if (NetTh != 0F) {
        size += 2 + 4;
      }
      if (NetVe != 0F) {
        size += 2 + 4;
      }
      if (PkgSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (PkgTheoPrc != 0F) {
        size += 2 + 4;
      }
      if (PkgBidPrc != 0F) {
        size += 2 + 4;
      }
      if (PkgAskPrc != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0D) {
        size += 2 + 8;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncludeSRNetwork);
      }
      size += directedCounterParty_.CalculateSize(_repeated_directedCounterParty_codec);
      size += orderLegs_.CalculateSize(_repeated_orderLegs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuctionNotice other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AuctionNotice.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTestAuction = other.IsTestAuction;
      }
      if (other.ShortCode.Length != 0) {
        ShortCode = other.ShortCode;
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        AuctionEvent = other.AuctionEvent;
      }
      if (other.SrcAuctionID.Length != 0) {
        SrcAuctionID = other.SrcAuctionID;
      }
      if (other.SrcAuctionType.Length != 0) {
        SrcAuctionType = other.SrcAuctionType;
      }
      if (other.AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        AuctionSource = other.AuctionSource;
      }
      if (other.Industry.Length != 0) {
        Industry = other.Industry;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.UAvgDailyVlm != 0F) {
        UAvgDailyVlm = other.UAvgDailyVlm;
      }
      if (other.CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        CustSide = other.CustSide;
      }
      if (other.CustQty != 0) {
        CustQty = other.CustQty;
      }
      if (other.CustPrc != 0D) {
        CustPrc = other.CustPrc;
      }
      if (other.HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasCustPrc = other.HasCustPrc;
      }
      if (other.CustNbboCap != global::Spiderrock.Protobuf.NbboCap.Unspecified) {
        CustNbboCap = other.CustNbboCap;
      }
      if (other.CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        CustFirmType = other.CustFirmType;
      }
      if (other.CustAgentMPID.Length != 0) {
        CustAgentMPID = other.CustAgentMPID;
      }
      if (other.CustClientFirm.Length != 0) {
        CustClientFirm = other.CustClientFirm;
      }
      if (other.CommEnhancement != 0F) {
        CommEnhancement = other.CommEnhancement;
      }
      if (other.CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CustCommPaying = other.CustCommPaying;
      }
      if (other.CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        CustQtyCond = other.CustQtyCond;
      }
      if (other.AuctionDuration != 0) {
        AuctionDuration = other.AuctionDuration;
      }
      if (other.NumOptLegs != 0) {
        NumOptLegs = other.NumOptLegs;
      }
      if (other.SpreadClass != global::Spiderrock.Protobuf.SpreadClass.Unspecified) {
        SpreadClass = other.SpreadClass;
      }
      if (other.LimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        LimitType = other.LimitType;
      }
      if (other.SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        SpreadFlavor = other.SpreadFlavor;
      }
      if (other.ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsHedge = other.ContainsHedge;
      }
      if (other.ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsFlex = other.ContainsFlex;
      }
      if (other.ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsMultiHedge = other.ContainsMultiHedge;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.RefUPrc != 0D) {
        RefUPrc = other.RefUPrc;
      }
      if (other.NetDe != 0F) {
        NetDe = other.NetDe;
      }
      if (other.NetGa != 0F) {
        NetGa = other.NetGa;
      }
      if (other.NetTh != 0F) {
        NetTh = other.NetTh;
      }
      if (other.NetVe != 0F) {
        NetVe = other.NetVe;
      }
      if (other.PkgSurfPrc != 0F) {
        PkgSurfPrc = other.PkgSurfPrc;
      }
      if (other.PkgTheoPrc != 0F) {
        PkgTheoPrc = other.PkgTheoPrc;
      }
      if (other.PkgBidPrc != 0F) {
        PkgBidPrc = other.PkgBidPrc;
      }
      if (other.PkgAskPrc != 0F) {
        PkgAskPrc = other.PkgAskPrc;
      }
      if (other.PointValue != 0D) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        IncludeSRNetwork = other.IncludeSRNetwork;
      }
      directedCounterParty_.Add(other.directedCounterParty_);
      orderLegs_.Add(other.orderLegs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionNotice.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 808: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 824: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 832: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 850: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 858: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 866: {
            Industry = input.ReadString();
            break;
          }
          case 872: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 885: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 888: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 896: {
            CustQty = input.ReadInt32();
            break;
          }
          case 905: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 912: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 922: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 933: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 936: {
            CustCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            CustQtyCond = (global::Spiderrock.Protobuf.CustQtyCond) input.ReadEnum();
            break;
          }
          case 952: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 960: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 976: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 984: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 993: {
            UBid = input.ReadDouble();
            break;
          }
          case 1001: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1050: {
            orderLegs_.AddEntriesFrom(input, _repeated_orderLegs_codec);
            break;
          }
          case 1256: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 1266: {
            directedCounterParty_.AddEntriesFrom(input, _repeated_directedCounterParty_codec);
            break;
          }
          case 1296: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1306: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1312: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1320: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1330: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1354: {
            SrcAuctionID = input.ReadString();
            break;
          }
          case 1362: {
            SrcAuctionType = input.ReadString();
            break;
          }
          case 1368: {
            LimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1381: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1389: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1397: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1405: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1413: {
            PkgSurfPrc = input.ReadFloat();
            break;
          }
          case 1421: {
            PkgBidPrc = input.ReadFloat();
            break;
          }
          case 1429: {
            PkgAskPrc = input.ReadFloat();
            break;
          }
          case 1433: {
            PointValue = input.ReadDouble();
            break;
          }
          case 1440: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1448: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1461: {
            PkgTheoPrc = input.ReadFloat();
            break;
          }
          case 1473: {
            RefUPrc = input.ReadDouble();
            break;
          }
          case 1480: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1490: {
            ShortCode = input.ReadString();
            break;
          }
          case 1496: {
            CustNbboCap = (global::Spiderrock.Protobuf.NbboCap) input.ReadEnum();
            break;
          }
          case 1504: {
            SpreadClass = (global::Spiderrock.Protobuf.SpreadClass) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionNotice.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 808: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 824: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 832: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 850: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 858: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 866: {
            Industry = input.ReadString();
            break;
          }
          case 872: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 885: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 888: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 896: {
            CustQty = input.ReadInt32();
            break;
          }
          case 905: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 912: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 922: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 933: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 936: {
            CustCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 944: {
            CustQtyCond = (global::Spiderrock.Protobuf.CustQtyCond) input.ReadEnum();
            break;
          }
          case 952: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 960: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 976: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 984: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 993: {
            UBid = input.ReadDouble();
            break;
          }
          case 1001: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1050: {
            orderLegs_.AddEntriesFrom(ref input, _repeated_orderLegs_codec);
            break;
          }
          case 1256: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 1266: {
            directedCounterParty_.AddEntriesFrom(ref input, _repeated_directedCounterParty_codec);
            break;
          }
          case 1296: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1306: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1312: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1320: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1330: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1354: {
            SrcAuctionID = input.ReadString();
            break;
          }
          case 1362: {
            SrcAuctionType = input.ReadString();
            break;
          }
          case 1368: {
            LimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1381: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1389: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1397: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1405: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1413: {
            PkgSurfPrc = input.ReadFloat();
            break;
          }
          case 1421: {
            PkgBidPrc = input.ReadFloat();
            break;
          }
          case 1429: {
            PkgAskPrc = input.ReadFloat();
            break;
          }
          case 1433: {
            PointValue = input.ReadDouble();
            break;
          }
          case 1440: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1448: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1461: {
            PkgTheoPrc = input.ReadFloat();
            break;
          }
          case 1473: {
            RefUPrc = input.ReadDouble();
            break;
          }
          case 1480: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1490: {
            ShortCode = input.ReadString();
            break;
          }
          case 1496: {
            CustNbboCap = (global::Spiderrock.Protobuf.NbboCap) input.ReadEnum();
            break;
          }
          case 1504: {
            SpreadClass = (global::Spiderrock.Protobuf.SpreadClass) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AuctionNotice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionNotice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          noticeNumber_ = other.noticeNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "notice_number" field.</summary>
        public const int NoticeNumberFieldNumber = 11;
        private long noticeNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long NoticeNumber {
          get { return noticeNumber_; }
          set {
            noticeNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NoticeNumber != other.NoticeNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (NoticeNumber != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (NoticeNumber != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (NoticeNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.NoticeNumber != 0L) {
            NoticeNumber = other.NoticeNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 88: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 88: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class DirectedCounterParty : pb::IMessage<DirectedCounterParty>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DirectedCounterParty> _parser = new pb::MessageParser<DirectedCounterParty>(() => new DirectedCounterParty());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DirectedCounterParty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionNotice.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty(DirectedCounterParty other) : this() {
          clientFirm_ = other.clientFirm_;
          inclExcl_ = other.inclExcl_;
          isCommPaying_ = other.isCommPaying_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty Clone() {
          return new DirectedCounterParty(this);
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 159;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "incl_excl" field.</summary>
        public const int InclExclFieldNumber = 160;
        private global::Spiderrock.Protobuf.InclExclDisclose inclExcl_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.InclExclDisclose InclExcl {
          get { return inclExcl_; }
          set {
            inclExcl_ = value;
          }
        }

        /// <summary>Field number for the "is_comm_paying" field.</summary>
        public const int IsCommPayingFieldNumber = 161;
        private global::Spiderrock.Protobuf.YesNo isCommPaying_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo IsCommPaying {
          get { return isCommPaying_; }
          set {
            isCommPaying_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DirectedCounterParty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DirectedCounterParty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientFirm != other.ClientFirm) return false;
          if (InclExcl != other.InclExcl) return false;
          if (IsCommPaying != other.IsCommPaying) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= InclExcl.GetHashCode();
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsCommPaying.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(250, 9);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(128, 10);
            output.WriteEnum((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(136, 10);
            output.WriteEnum((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(250, 9);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(128, 10);
            output.WriteEnum((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(136, 10);
            output.WriteEnum((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ClientFirm.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DirectedCounterParty other) {
          if (other == null) {
            return;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            InclExcl = other.InclExcl;
          }
          if (other.IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            IsCommPaying = other.IsCommPaying;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1274: {
                ClientFirm = input.ReadString();
                break;
              }
              case 1280: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
              case 1288: {
                IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1274: {
                ClientFirm = input.ReadString();
                break;
              }
              case 1280: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
              case 1288: {
                IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class OrderLegs : pb::IMessage<OrderLegs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<OrderLegs> _parser = new pb::MessageParser<OrderLegs>(() => new OrderLegs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<OrderLegs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionNotice.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs(OrderLegs other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          side_ = other.side_;
          ratio_ = other.ratio_;
          undPerCn_ = other.undPerCn_;
          expType_ = other.expType_;
          years_ = other.years_;
          rate_ = other.rate_;
          atmVol_ = other.atmVol_;
          ddivPv_ = other.ddivPv_;
          tVol_ = other.tVol_;
          tPrc_ = other.tPrc_;
          sVol_ = other.sVol_;
          sDiv_ = other.sDiv_;
          sPrc_ = other.sPrc_;
          de_ = other.de_;
          ga_ = other.ga_;
          th_ = other.th_;
          ve_ = other.ve_;
          sVolOk_ = other.sVolOk_;
          bid_ = other.bid_;
          bidSz_ = other.bidSz_;
          bidMask_ = other.bidMask_;
          ask_ = other.ask_;
          askSz_ = other.askSz_;
          askMask_ = other.askMask_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs Clone() {
          return new OrderLegs(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 132;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 133;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 134;
        private global::Spiderrock.Protobuf.BuySell side_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "ratio" field.</summary>
        public const int RatioFieldNumber = 135;
        private uint ratio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Ratio {
          get { return ratio_; }
          set {
            ratio_ = value;
          }
        }

        /// <summary>Field number for the "und_per_cn" field.</summary>
        public const int UndPerCnFieldNumber = 136;
        private int undPerCn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UndPerCn {
          get { return undPerCn_; }
          set {
            undPerCn_ = value;
          }
        }

        /// <summary>Field number for the "exp_type" field.</summary>
        public const int ExpTypeFieldNumber = 138;
        private global::Spiderrock.Protobuf.ExpiryType expType_ = global::Spiderrock.Protobuf.ExpiryType.Unspecified;
        /// <summary>
        /// ZDte,Daily,Weekly,Regular,Quarterly,LongTerm,OtherExp
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryType ExpType {
          get { return expType_; }
          set {
            expType_ = value;
          }
        }

        /// <summary>Field number for the "years" field.</summary>
        public const int YearsFieldNumber = 139;
        private float years_;
        /// <summary>
        /// SR volatility years to expiry
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Years {
          get { return years_; }
          set {
            years_ = value;
          }
        }

        /// <summary>Field number for the "rate" field.</summary>
        public const int RateFieldNumber = 140;
        private float rate_;
        /// <summary>
        /// SR global (discount) rate to expiry
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Rate {
          get { return rate_; }
          set {
            rate_ = value;
          }
        }

        /// <summary>Field number for the "atm_vol" field.</summary>
        public const int AtmVolFieldNumber = 141;
        private float atmVol_;
        /// <summary>
        /// ATM (fwd uPrc) SR surface volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float AtmVol {
          get { return atmVol_; }
          set {
            atmVol_ = value;
          }
        }

        /// <summary>Field number for the "ddiv_pv" field.</summary>
        public const int DdivPvFieldNumber = 142;
        private float ddivPv_;
        /// <summary>
        /// SR present value of ddiv stream
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float DdivPv {
          get { return ddivPv_; }
          set {
            ddivPv_ = value;
          }
        }

        /// <summary>Field number for the "t_vol" field.</summary>
        public const int TVolFieldNumber = 143;
        private float tVol_;
        /// <summary>
        /// client theo surface volatility (if client surfaces uploaded to SR)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float TVol {
          get { return tVol_; }
          set {
            tVol_ = value;
          }
        }

        /// <summary>Field number for the "t_prc" field.</summary>
        public const int TPrcFieldNumber = 183;
        private float tPrc_;
        /// <summary>
        /// client theo price (if client surfaces uploaded to SR)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float TPrc {
          get { return tPrc_; }
          set {
            tPrc_ = value;
          }
        }

        /// <summary>Field number for the "s_vol" field.</summary>
        public const int SVolFieldNumber = 144;
        private float sVol_;
        /// <summary>
        /// SR Surface Volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SVol {
          get { return sVol_; }
          set {
            sVol_ = value;
          }
        }

        /// <summary>Field number for the "s_div" field.</summary>
        public const int SDivFieldNumber = 145;
        private float sDiv_;
        /// <summary>
        /// SR Surface SDiv
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SDiv {
          get { return sDiv_; }
          set {
            sDiv_ = value;
          }
        }

        /// <summary>Field number for the "s_prc" field.</summary>
        public const int SPrcFieldNumber = 146;
        private float sPrc_;
        /// <summary>
        /// SR Surface Price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SPrc {
          get { return sPrc_; }
          set {
            sPrc_ = value;
          }
        }

        /// <summary>Field number for the "de" field.</summary>
        public const int DeFieldNumber = 147;
        private float de_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float De {
          get { return de_; }
          set {
            de_ = value;
          }
        }

        /// <summary>Field number for the "ga" field.</summary>
        public const int GaFieldNumber = 148;
        private float ga_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Ga {
          get { return ga_; }
          set {
            ga_ = value;
          }
        }

        /// <summary>Field number for the "th" field.</summary>
        public const int ThFieldNumber = 149;
        private float th_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Th {
          get { return th_; }
          set {
            th_ = value;
          }
        }

        /// <summary>Field number for the "ve" field.</summary>
        public const int VeFieldNumber = 150;
        private float ve_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Ve {
          get { return ve_; }
          set {
            ve_ = value;
          }
        }

        /// <summary>Field number for the "s_vol_ok" field.</summary>
        public const int SVolOkFieldNumber = 168;
        private global::Spiderrock.Protobuf.YesNo sVolOk_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        /// <summary>
        /// Yes if live market and sVol are tracking as expected
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo SVolOk {
          get { return sVolOk_; }
          set {
            sVolOk_ = value;
          }
        }

        /// <summary>Field number for the "bid" field.</summary>
        public const int BidFieldNumber = 189;
        private float bid_;
        /// <summary>
        /// leg bid price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Bid {
          get { return bid_; }
          set {
            bid_ = value;
          }
        }

        /// <summary>Field number for the "bid_sz" field.</summary>
        public const int BidSzFieldNumber = 190;
        private int bidSz_;
        /// <summary>
        /// cumulative leg bid size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int BidSz {
          get { return bidSz_; }
          set {
            bidSz_ = value;
          }
        }

        /// <summary>Field number for the "bid_mask" field.</summary>
        public const int BidMaskFieldNumber = 191;
        private uint bidMask_;
        /// <summary>
        /// bit-mask of participating leg exchanges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint BidMask {
          get { return bidMask_; }
          set {
            bidMask_ = value;
          }
        }

        /// <summary>Field number for the "ask" field.</summary>
        public const int AskFieldNumber = 192;
        private float ask_;
        /// <summary>
        /// leg ask price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Ask {
          get { return ask_; }
          set {
            ask_ = value;
          }
        }

        /// <summary>Field number for the "ask_sz" field.</summary>
        public const int AskSzFieldNumber = 193;
        private int askSz_;
        /// <summary>
        /// cumulative leg ask size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AskSz {
          get { return askSz_; }
          set {
            askSz_ = value;
          }
        }

        /// <summary>Field number for the "ask_mask" field.</summary>
        public const int AskMaskFieldNumber = 194;
        private uint askMask_;
        /// <summary>
        /// bit-mask of participating leg exchanges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint AskMask {
          get { return askMask_; }
          set {
            askMask_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as OrderLegs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(OrderLegs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (Side != other.Side) return false;
          if (Ratio != other.Ratio) return false;
          if (UndPerCn != other.UndPerCn) return false;
          if (ExpType != other.ExpType) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVol, other.TVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TPrc, other.TPrc)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVol, other.SVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDiv, other.SDiv)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SPrc, other.SPrc)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
          if (SVolOk != other.SVolOk) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bid, other.Bid)) return false;
          if (BidSz != other.BidSz) return false;
          if (BidMask != other.BidMask) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ask, other.Ask)) return false;
          if (AskSz != other.AskSz) return false;
          if (AskMask != other.AskMask) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side.GetHashCode();
          if (Ratio != 0) hash ^= Ratio.GetHashCode();
          if (UndPerCn != 0) hash ^= UndPerCn.GetHashCode();
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) hash ^= ExpType.GetHashCode();
          if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
          if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
          if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
          if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
          if (TVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVol);
          if (TPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TPrc);
          if (SVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVol);
          if (SDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDiv);
          if (SPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SPrc);
          if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
          if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
          if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
          if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= SVolOk.GetHashCode();
          if (Bid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bid);
          if (BidSz != 0) hash ^= BidSz.GetHashCode();
          if (BidMask != 0) hash ^= BidMask.GetHashCode();
          if (Ask != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ask);
          if (AskSz != 0) hash ^= AskSz.GetHashCode();
          if (AskMask != 0) hash ^= AskMask.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(162, 8);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(168, 8);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(176, 8);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(184, 8);
            output.WriteUInt32(Ratio);
          }
          if (UndPerCn != 0) {
            output.WriteRawTag(192, 8);
            output.WriteInt32(UndPerCn);
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            output.WriteRawTag(208, 8);
            output.WriteEnum((int) ExpType);
          }
          if (Years != 0F) {
            output.WriteRawTag(221, 8);
            output.WriteFloat(Years);
          }
          if (Rate != 0F) {
            output.WriteRawTag(229, 8);
            output.WriteFloat(Rate);
          }
          if (AtmVol != 0F) {
            output.WriteRawTag(237, 8);
            output.WriteFloat(AtmVol);
          }
          if (DdivPv != 0F) {
            output.WriteRawTag(245, 8);
            output.WriteFloat(DdivPv);
          }
          if (TVol != 0F) {
            output.WriteRawTag(253, 8);
            output.WriteFloat(TVol);
          }
          if (SVol != 0F) {
            output.WriteRawTag(133, 9);
            output.WriteFloat(SVol);
          }
          if (SDiv != 0F) {
            output.WriteRawTag(141, 9);
            output.WriteFloat(SDiv);
          }
          if (SPrc != 0F) {
            output.WriteRawTag(149, 9);
            output.WriteFloat(SPrc);
          }
          if (De != 0F) {
            output.WriteRawTag(157, 9);
            output.WriteFloat(De);
          }
          if (Ga != 0F) {
            output.WriteRawTag(165, 9);
            output.WriteFloat(Ga);
          }
          if (Th != 0F) {
            output.WriteRawTag(173, 9);
            output.WriteFloat(Th);
          }
          if (Ve != 0F) {
            output.WriteRawTag(181, 9);
            output.WriteFloat(Ve);
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(192, 10);
            output.WriteEnum((int) SVolOk);
          }
          if (TPrc != 0F) {
            output.WriteRawTag(189, 11);
            output.WriteFloat(TPrc);
          }
          if (Bid != 0F) {
            output.WriteRawTag(237, 11);
            output.WriteFloat(Bid);
          }
          if (BidSz != 0) {
            output.WriteRawTag(240, 11);
            output.WriteInt32(BidSz);
          }
          if (BidMask != 0) {
            output.WriteRawTag(248, 11);
            output.WriteUInt32(BidMask);
          }
          if (Ask != 0F) {
            output.WriteRawTag(133, 12);
            output.WriteFloat(Ask);
          }
          if (AskSz != 0) {
            output.WriteRawTag(136, 12);
            output.WriteInt32(AskSz);
          }
          if (AskMask != 0) {
            output.WriteRawTag(144, 12);
            output.WriteUInt32(AskMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(162, 8);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(168, 8);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(176, 8);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(184, 8);
            output.WriteUInt32(Ratio);
          }
          if (UndPerCn != 0) {
            output.WriteRawTag(192, 8);
            output.WriteInt32(UndPerCn);
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            output.WriteRawTag(208, 8);
            output.WriteEnum((int) ExpType);
          }
          if (Years != 0F) {
            output.WriteRawTag(221, 8);
            output.WriteFloat(Years);
          }
          if (Rate != 0F) {
            output.WriteRawTag(229, 8);
            output.WriteFloat(Rate);
          }
          if (AtmVol != 0F) {
            output.WriteRawTag(237, 8);
            output.WriteFloat(AtmVol);
          }
          if (DdivPv != 0F) {
            output.WriteRawTag(245, 8);
            output.WriteFloat(DdivPv);
          }
          if (TVol != 0F) {
            output.WriteRawTag(253, 8);
            output.WriteFloat(TVol);
          }
          if (SVol != 0F) {
            output.WriteRawTag(133, 9);
            output.WriteFloat(SVol);
          }
          if (SDiv != 0F) {
            output.WriteRawTag(141, 9);
            output.WriteFloat(SDiv);
          }
          if (SPrc != 0F) {
            output.WriteRawTag(149, 9);
            output.WriteFloat(SPrc);
          }
          if (De != 0F) {
            output.WriteRawTag(157, 9);
            output.WriteFloat(De);
          }
          if (Ga != 0F) {
            output.WriteRawTag(165, 9);
            output.WriteFloat(Ga);
          }
          if (Th != 0F) {
            output.WriteRawTag(173, 9);
            output.WriteFloat(Th);
          }
          if (Ve != 0F) {
            output.WriteRawTag(181, 9);
            output.WriteFloat(Ve);
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(192, 10);
            output.WriteEnum((int) SVolOk);
          }
          if (TPrc != 0F) {
            output.WriteRawTag(189, 11);
            output.WriteFloat(TPrc);
          }
          if (Bid != 0F) {
            output.WriteRawTag(237, 11);
            output.WriteFloat(Bid);
          }
          if (BidSz != 0) {
            output.WriteRawTag(240, 11);
            output.WriteInt32(BidSz);
          }
          if (BidMask != 0) {
            output.WriteRawTag(248, 11);
            output.WriteUInt32(BidMask);
          }
          if (Ask != 0F) {
            output.WriteRawTag(133, 12);
            output.WriteFloat(Ask);
          }
          if (AskSz != 0) {
            output.WriteRawTag(136, 12);
            output.WriteInt32(AskSz);
          }
          if (AskMask != 0) {
            output.WriteRawTag(144, 12);
            output.WriteUInt32(AskMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Ratio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio);
          }
          if (UndPerCn != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UndPerCn);
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpType);
          }
          if (Years != 0F) {
            size += 2 + 4;
          }
          if (Rate != 0F) {
            size += 2 + 4;
          }
          if (AtmVol != 0F) {
            size += 2 + 4;
          }
          if (DdivPv != 0F) {
            size += 2 + 4;
          }
          if (TVol != 0F) {
            size += 2 + 4;
          }
          if (TPrc != 0F) {
            size += 2 + 4;
          }
          if (SVol != 0F) {
            size += 2 + 4;
          }
          if (SDiv != 0F) {
            size += 2 + 4;
          }
          if (SPrc != 0F) {
            size += 2 + 4;
          }
          if (De != 0F) {
            size += 2 + 4;
          }
          if (Ga != 0F) {
            size += 2 + 4;
          }
          if (Th != 0F) {
            size += 2 + 4;
          }
          if (Ve != 0F) {
            size += 2 + 4;
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SVolOk);
          }
          if (Bid != 0F) {
            size += 2 + 4;
          }
          if (BidSz != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSz);
          }
          if (BidMask != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask);
          }
          if (Ask != 0F) {
            size += 2 + 4;
          }
          if (AskSz != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSz);
          }
          if (AskMask != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(OrderLegs other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side = other.Side;
          }
          if (other.Ratio != 0) {
            Ratio = other.Ratio;
          }
          if (other.UndPerCn != 0) {
            UndPerCn = other.UndPerCn;
          }
          if (other.ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            ExpType = other.ExpType;
          }
          if (other.Years != 0F) {
            Years = other.Years;
          }
          if (other.Rate != 0F) {
            Rate = other.Rate;
          }
          if (other.AtmVol != 0F) {
            AtmVol = other.AtmVol;
          }
          if (other.DdivPv != 0F) {
            DdivPv = other.DdivPv;
          }
          if (other.TVol != 0F) {
            TVol = other.TVol;
          }
          if (other.TPrc != 0F) {
            TPrc = other.TPrc;
          }
          if (other.SVol != 0F) {
            SVol = other.SVol;
          }
          if (other.SDiv != 0F) {
            SDiv = other.SDiv;
          }
          if (other.SPrc != 0F) {
            SPrc = other.SPrc;
          }
          if (other.De != 0F) {
            De = other.De;
          }
          if (other.Ga != 0F) {
            Ga = other.Ga;
          }
          if (other.Th != 0F) {
            Th = other.Th;
          }
          if (other.Ve != 0F) {
            Ve = other.Ve;
          }
          if (other.SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            SVolOk = other.SVolOk;
          }
          if (other.Bid != 0F) {
            Bid = other.Bid;
          }
          if (other.BidSz != 0) {
            BidSz = other.BidSz;
          }
          if (other.BidMask != 0) {
            BidMask = other.BidMask;
          }
          if (other.Ask != 0F) {
            Ask = other.Ask;
          }
          if (other.AskSz != 0) {
            AskSz = other.AskSz;
          }
          if (other.AskMask != 0) {
            AskMask = other.AskMask;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1058: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 1064: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1072: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1080: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 1088: {
                UndPerCn = input.ReadInt32();
                break;
              }
              case 1104: {
                ExpType = (global::Spiderrock.Protobuf.ExpiryType) input.ReadEnum();
                break;
              }
              case 1117: {
                Years = input.ReadFloat();
                break;
              }
              case 1125: {
                Rate = input.ReadFloat();
                break;
              }
              case 1133: {
                AtmVol = input.ReadFloat();
                break;
              }
              case 1141: {
                DdivPv = input.ReadFloat();
                break;
              }
              case 1149: {
                TVol = input.ReadFloat();
                break;
              }
              case 1157: {
                SVol = input.ReadFloat();
                break;
              }
              case 1165: {
                SDiv = input.ReadFloat();
                break;
              }
              case 1173: {
                SPrc = input.ReadFloat();
                break;
              }
              case 1181: {
                De = input.ReadFloat();
                break;
              }
              case 1189: {
                Ga = input.ReadFloat();
                break;
              }
              case 1197: {
                Th = input.ReadFloat();
                break;
              }
              case 1205: {
                Ve = input.ReadFloat();
                break;
              }
              case 1344: {
                SVolOk = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
              case 1469: {
                TPrc = input.ReadFloat();
                break;
              }
              case 1517: {
                Bid = input.ReadFloat();
                break;
              }
              case 1520: {
                BidSz = input.ReadInt32();
                break;
              }
              case 1528: {
                BidMask = input.ReadUInt32();
                break;
              }
              case 1541: {
                Ask = input.ReadFloat();
                break;
              }
              case 1544: {
                AskSz = input.ReadInt32();
                break;
              }
              case 1552: {
                AskMask = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1058: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 1064: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1072: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1080: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 1088: {
                UndPerCn = input.ReadInt32();
                break;
              }
              case 1104: {
                ExpType = (global::Spiderrock.Protobuf.ExpiryType) input.ReadEnum();
                break;
              }
              case 1117: {
                Years = input.ReadFloat();
                break;
              }
              case 1125: {
                Rate = input.ReadFloat();
                break;
              }
              case 1133: {
                AtmVol = input.ReadFloat();
                break;
              }
              case 1141: {
                DdivPv = input.ReadFloat();
                break;
              }
              case 1149: {
                TVol = input.ReadFloat();
                break;
              }
              case 1157: {
                SVol = input.ReadFloat();
                break;
              }
              case 1165: {
                SDiv = input.ReadFloat();
                break;
              }
              case 1173: {
                SPrc = input.ReadFloat();
                break;
              }
              case 1181: {
                De = input.ReadFloat();
                break;
              }
              case 1189: {
                Ga = input.ReadFloat();
                break;
              }
              case 1197: {
                Th = input.ReadFloat();
                break;
              }
              case 1205: {
                Ve = input.ReadFloat();
                break;
              }
              case 1344: {
                SVolOk = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
              case 1469: {
                TPrc = input.ReadFloat();
                break;
              }
              case 1517: {
                Bid = input.ReadFloat();
                break;
              }
              case 1520: {
                BidSz = input.ReadInt32();
                break;
              }
              case 1528: {
                BidMask = input.ReadUInt32();
                break;
              }
              case 1541: {
                Ask = input.ReadFloat();
                break;
              }
              case 1544: {
                AskSz = input.ReadInt32();
                break;
              }
              case 1552: {
                AskMask = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
