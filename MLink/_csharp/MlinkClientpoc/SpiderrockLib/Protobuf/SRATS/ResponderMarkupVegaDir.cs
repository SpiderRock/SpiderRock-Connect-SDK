// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRATS/ResponderMarkupVegaDir.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRATS/ResponderMarkupVegaDir.proto</summary>
  public static partial class ResponderMarkupVegaDirReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRATS/ResponderMarkupVegaDir.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResponderMarkupVegaDirReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9TUkFUUy9SZXNwb25kZXJNYXJrdXBWZWdhRGlyLnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byK3DAoWUmVzcG9u",
            "ZGVyTWFya3VwVmVnYURpchIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuTWVzc2FnZU1ldGFkYXRhEj4KBHBrZXkYAiABKAsyMC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlJlc3BvbmRlck1hcmt1cFZlZ2FEaXIuUEtleRIR",
            "Cgl1c2VyX25hbWUYZCABKAkSLwoLaXNfZGlzYWJsZWQYZSABKA4yGi5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlllc05vEjQKEGNhbl9pbmNsdWRlX2ZsZXgYZiAB",
            "KA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjUKEWNhbl9pbmNsdWRl",
            "X3N0b2NrGGcgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxItCgdj",
            "cF9mbGFnGGggASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5DYWxsUHV0EhEK",
            "CW1pbl95ZWFycxhpIAEoAhIRCgltYXhfeWVhcnMYaiABKAISLgoKbWluX2V4",
            "cGlyeRhrIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKbWF4",
            "X2V4cGlyeRhsIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEgoK",
            "bWluX3hEZWx0YRhtIAEoAhISCgptYXhfeERlbHRhGG4gASgCEhIKCm1pbl9z",
            "dHJpa2UYbyABKAESEgoKbWF4X3N0cmlrZRhwIAEoARIaChJtaW5fc3VyZl9l",
            "ZGdlX3ByZW0YcSABKAISGQoRbWluX3N1cmZfZWRnZV92b2wYciABKAISNAoQ",
            "aW5jX2ZlZXNfaW5fcmVzcBhzIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "WWVzTm8SMgoKcm91bmRfcnVsZRh0IAEoDjIeLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuUm91bmRSdWxlEhkKEW1heF9yZXNwb25zZV9zaXplGHUgASgFEhkKEW1h",
            "eF9yZXNwb25zZV92ZWdhGHYgASgCEhsKE3RvdGFsX3Jlc3BvbnNlX3ZlZ2EY",
            "dyABKAISHgoWdG90YWxfcmVzcG9uc2Vfd3RfdmVnYRh4IAEoAhIyCgphdXRv",
            "X2hlZGdlGHkgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BdXRvSGVkZ2US",
            "OAoQaGVkZ2VfaW5zdHJ1bWVudBh6IAEoDjIeLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuSGVkZ2VJbnN0EjUKDWhlZGdlX3NlY19rZXkYeyABKAsyHi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLkV4cGlyeUtleRIYChBoZWRnZV9iZXRhX3JhdGlvGHwg",
            "ASgCEjQKC2hlZGdlX3Njb3BlGH0gASgOMh8uc3BpZGVycm9jay5wcm90b2J1",
            "Zi5IZWRnZVNjb3BlEjkKDWhlZGdlX3Nlc3Npb24YfiABKA4yIi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk1hcmtldFNlc3Npb24SFQoNcmlza19ncm91cF9pZBh/",
            "IAEoAxIUCgtudW1fbm90aWNlcxiBASABKAMSGQoQbnVtX25vdGljZXNfcGFz",
            "cxiCASABKAMSFgoNbnVtX3Jlc3BvbnNlcxiDASABKAMSEwoKcXR5X3RyYWRl",
            "ZBiEASABKAUSFAoLdmVnYV90cmFkZWQYhQEgASgBEhQKC21vZGlmaWVkX2J5",
            "GIYBIAEoCRI5Cgttb2RpZmllZF9pbhiHASABKA4yIy5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlN5c0Vudmlyb25tZW50Ei4KCXRpbWVzdGFtcBiIASABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGqEBCgRQS2V5Eg0KBWFjY250GAog",
            "ASgJEhMKC2NsaWVudF9maXJtGAsgASgJEi4KBnRpY2tlchgMIAEoCzIeLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5Ei8KCXJlc3Bfc2lkZRgNIAEo",
            "DjIcLnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBIUCgxleHBpcnlfZ3Jv",
            "dXAYDiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupVegaDir), global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Parser, new[]{ "Meta", "Pkey", "UserName", "IsDisabled", "CanIncludeFlex", "CanIncludeStock", "CpFlag", "MinYears", "MaxYears", "MinExpiry", "MaxExpiry", "MinXDelta", "MaxXDelta", "MinStrike", "MaxStrike", "MinSurfEdgePrem", "MinSurfEdgeVol", "IncFeesInResp", "RoundRule", "MaxResponseSize", "MaxResponseVega", "TotalResponseVega", "TotalResponseWtVega", "AutoHedge", "HedgeInstrument", "HedgeSecKey", "HedgeBetaRatio", "HedgeScope", "HedgeSession", "RiskGroupId", "NumNotices", "NumNoticesPass", "NumResponses", "QtyTraded", "VegaTraded", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey), global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey.Parser, new[]{ "Accnt", "ClientFirm", "Ticker", "RespSide", "ExpiryGroup" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ResponderMarkupVegaDir : pb::IMessage<ResponderMarkupVegaDir>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResponderMarkupVegaDir> _parser = new pb::MessageParser<ResponderMarkupVegaDir>(() => new ResponderMarkupVegaDir());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResponderMarkupVegaDir> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ResponderMarkupVegaDirReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupVegaDir() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupVegaDir(ResponderMarkupVegaDir other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      userName_ = other.userName_;
      isDisabled_ = other.isDisabled_;
      canIncludeFlex_ = other.canIncludeFlex_;
      canIncludeStock_ = other.canIncludeStock_;
      cpFlag_ = other.cpFlag_;
      minYears_ = other.minYears_;
      maxYears_ = other.maxYears_;
      minExpiry_ = other.minExpiry_ != null ? other.minExpiry_.Clone() : null;
      maxExpiry_ = other.maxExpiry_ != null ? other.maxExpiry_.Clone() : null;
      minXDelta_ = other.minXDelta_;
      maxXDelta_ = other.maxXDelta_;
      minStrike_ = other.minStrike_;
      maxStrike_ = other.maxStrike_;
      minSurfEdgePrem_ = other.minSurfEdgePrem_;
      minSurfEdgeVol_ = other.minSurfEdgeVol_;
      incFeesInResp_ = other.incFeesInResp_;
      roundRule_ = other.roundRule_;
      maxResponseSize_ = other.maxResponseSize_;
      maxResponseVega_ = other.maxResponseVega_;
      totalResponseVega_ = other.totalResponseVega_;
      totalResponseWtVega_ = other.totalResponseWtVega_;
      autoHedge_ = other.autoHedge_;
      hedgeInstrument_ = other.hedgeInstrument_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeBetaRatio_ = other.hedgeBetaRatio_;
      hedgeScope_ = other.hedgeScope_;
      hedgeSession_ = other.hedgeSession_;
      riskGroupId_ = other.riskGroupId_;
      numNotices_ = other.numNotices_;
      numNoticesPass_ = other.numNoticesPass_;
      numResponses_ = other.numResponses_;
      qtyTraded_ = other.qtyTraded_;
      vegaTraded_ = other.vegaTraded_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupVegaDir Clone() {
      return new ResponderMarkupVegaDir(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 100;
    private string userName_ = "";
    /// <summary>
    /// username used for responding to auction notices
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_disabled" field.</summary>
    public const int IsDisabledFieldNumber = 101;
    private global::Spiderrock.Protobuf.YesNo isDisabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if Yes, this auto-responder record is disabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDisabled {
      get { return isDisabled_; }
      set {
        isDisabled_ = value;
      }
    }

    /// <summary>Field number for the "can_include_flex" field.</summary>
    public const int CanIncludeFlexFieldNumber = 102;
    private global::Spiderrock.Protobuf.YesNo canIncludeFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, can respond to auction notices that include flex option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CanIncludeFlex {
      get { return canIncludeFlex_; }
      set {
        canIncludeFlex_ = value;
      }
    }

    /// <summary>Field number for the "can_include_stock" field.</summary>
    public const int CanIncludeStockFieldNumber = 103;
    private global::Spiderrock.Protobuf.YesNo canIncludeStock_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, can respond to auction notices that include a stock leg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CanIncludeStock {
      get { return canIncludeStock_; }
      set {
        canIncludeStock_ = value;
      }
    }

    /// <summary>Field number for the "cp_flag" field.</summary>
    public const int CpFlagFieldNumber = 104;
    private global::Spiderrock.Protobuf.CallPut cpFlag_ = global::Spiderrock.Protobuf.CallPut.Unspecified;
    /// <summary>
    /// if not Pair must match all option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CallPut CpFlag {
      get { return cpFlag_; }
      set {
        cpFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_years" field.</summary>
    public const int MinYearsFieldNumber = 105;
    private float minYears_;
    /// <summary>
    /// both markup.minYears and markup.maxYears must be between [minYears, maxYears]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinYears {
      get { return minYears_; }
      set {
        minYears_ = value;
      }
    }

    /// <summary>Field number for the "max_years" field.</summary>
    public const int MaxYearsFieldNumber = 106;
    private float maxYears_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxYears {
      get { return maxYears_; }
      set {
        maxYears_ = value;
      }
    }

    /// <summary>Field number for the "min_expiry" field.</summary>
    public const int MinExpiryFieldNumber = 107;
    private global::Google.Protobuf.WellKnownTypes.Timestamp minExpiry_;
    /// <summary>
    /// both markup.minExpiry and markup.maxExpiry must be between [minExpiry, maxExpiry]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MinExpiry {
      get { return minExpiry_; }
      set {
        minExpiry_ = value;
      }
    }

    /// <summary>Field number for the "max_expiry" field.</summary>
    public const int MaxExpiryFieldNumber = 108;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxExpiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxExpiry {
      get { return maxExpiry_; }
      set {
        maxExpiry_ = value;
      }
    }

    /// <summary>Field number for the "min_xDelta" field.</summary>
    public const int MinXDeltaFieldNumber = 109;
    private float minXDelta_;
    /// <summary>
    /// all leg xDelta must be between [minXDelta, maxXDelta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinXDelta {
      get { return minXDelta_; }
      set {
        minXDelta_ = value;
      }
    }

    /// <summary>Field number for the "max_xDelta" field.</summary>
    public const int MaxXDeltaFieldNumber = 110;
    private float maxXDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxXDelta {
      get { return maxXDelta_; }
      set {
        maxXDelta_ = value;
      }
    }

    /// <summary>Field number for the "min_strike" field.</summary>
    public const int MinStrikeFieldNumber = 111;
    private double minStrike_;
    /// <summary>
    /// all leg strikes must be between [minStrike, maxStrike]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinStrike {
      get { return minStrike_; }
      set {
        minStrike_ = value;
      }
    }

    /// <summary>Field number for the "max_strike" field.</summary>
    public const int MaxStrikeFieldNumber = 112;
    private double maxStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxStrike {
      get { return maxStrike_; }
      set {
        maxStrike_ = value;
      }
    }

    /// <summary>Field number for the "min_surf_edge_prem" field.</summary>
    public const int MinSurfEdgePremFieldNumber = 113;
    private float minSurfEdgePrem_;
    /// <summary>
    /// spread surface edge (in premium) (+ = through surface; - = behind surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSurfEdgePrem {
      get { return minSurfEdgePrem_; }
      set {
        minSurfEdgePrem_ = value;
      }
    }

    /// <summary>Field number for the "min_surf_edge_vol" field.</summary>
    public const int MinSurfEdgeVolFieldNumber = 114;
    private float minSurfEdgeVol_;
    /// <summary>
    /// spread surface edge (in vol) (0.01 = 1.0 vol pts) (+ = through surface; - = behind surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSurfEdgeVol {
      get { return minSurfEdgeVol_; }
      set {
        minSurfEdgeVol_ = value;
      }
    }

    /// <summary>Field number for the "inc_fees_in_resp" field.</summary>
    public const int IncFeesInRespFieldNumber = 115;
    private global::Spiderrock.Protobuf.YesNo incFeesInResp_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// include all estimated responder fees in final response price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IncFeesInResp {
      get { return incFeesInResp_; }
      set {
        incFeesInResp_ = value;
      }
    }

    /// <summary>Field number for the "round_rule" field.</summary>
    public const int RoundRuleFieldNumber = 116;
    private global::Spiderrock.Protobuf.RoundRule roundRule_ = global::Spiderrock.Protobuf.RoundRule.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RoundRule RoundRule {
      get { return roundRule_; }
      set {
        roundRule_ = value;
      }
    }

    /// <summary>Field number for the "max_response_size" field.</summary>
    public const int MaxResponseSizeFieldNumber = 117;
    private int maxResponseSize_;
    /// <summary>
    /// maximum number of contracts per response (will respond for 100% if auction size &lt;= maxResponseSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxResponseSize {
      get { return maxResponseSize_; }
      set {
        maxResponseSize_ = value;
      }
    }

    /// <summary>Field number for the "max_response_vega" field.</summary>
    public const int MaxResponseVegaFieldNumber = 118;
    private float maxResponseVega_;
    /// <summary>
    /// maximum total vega per response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxResponseVega {
      get { return maxResponseVega_; }
      set {
        maxResponseVega_ = value;
      }
    }

    /// <summary>Field number for the "total_response_vega" field.</summary>
    public const int TotalResponseVegaFieldNumber = 119;
    private float totalResponseVega_;
    /// <summary>
    /// maximum vega (filled) all day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TotalResponseVega {
      get { return totalResponseVega_; }
      set {
        totalResponseVega_ = value;
      }
    }

    /// <summary>Field number for the "total_response_wt_vega" field.</summary>
    public const int TotalResponseWtVegaFieldNumber = 120;
    private float totalResponseWtVega_;
    /// <summary>
    /// maximum wtVega (filled) all day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TotalResponseWtVega {
      get { return totalResponseWtVega_; }
      set {
        totalResponseWtVega_ = value;
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 121;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_instrument" field.</summary>
    public const int HedgeInstrumentFieldNumber = 122;
    private global::Spiderrock.Protobuf.HedgeInst hedgeInstrument_ = global::Spiderrock.Protobuf.HedgeInst.Unspecified;
    /// <summary>
    /// Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeInst HedgeInstrument {
      get { return hedgeInstrument_; }
      set {
        hedgeInstrument_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 123;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_beta_ratio" field.</summary>
    public const int HedgeBetaRatioFieldNumber = 124;
    private float hedgeBetaRatio_;
    /// <summary>
    /// portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeBetaRatio {
      get { return hedgeBetaRatio_; }
      set {
        hedgeBetaRatio_ = value;
      }
    }

    /// <summary>Field number for the "hedge_scope" field.</summary>
    public const int HedgeScopeFieldNumber = 125;
    private global::Spiderrock.Protobuf.HedgeScope hedgeScope_ = global::Spiderrock.Protobuf.HedgeScope.Unspecified;
    /// <summary>
    /// hedge group scope [RiskGroup or Accnt]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeScope HedgeScope {
      get { return hedgeScope_; }
      set {
        hedgeScope_ = value;
      }
    }

    /// <summary>Field number for the "hedge_session" field.</summary>
    public const int HedgeSessionFieldNumber = 126;
    private global::Spiderrock.Protobuf.MarketSession hedgeSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    /// <summary>
    /// time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession HedgeSession {
      get { return hedgeSession_; }
      set {
        hedgeSession_ = value;
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 127;
    private long riskGroupId_;
    /// <summary>
    /// Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "num_notices" field.</summary>
    public const int NumNoticesFieldNumber = 129;
    private long numNotices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNotices {
      get { return numNotices_; }
      set {
        numNotices_ = value;
      }
    }

    /// <summary>Field number for the "num_notices_pass" field.</summary>
    public const int NumNoticesPassFieldNumber = 130;
    private long numNoticesPass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticesPass {
      get { return numNoticesPass_; }
      set {
        numNoticesPass_ = value;
      }
    }

    /// <summary>Field number for the "num_responses" field.</summary>
    public const int NumResponsesFieldNumber = 131;
    private long numResponses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumResponses {
      get { return numResponses_; }
      set {
        numResponses_ = value;
      }
    }

    /// <summary>Field number for the "qty_traded" field.</summary>
    public const int QtyTradedFieldNumber = 132;
    private int qtyTraded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QtyTraded {
      get { return qtyTraded_; }
      set {
        qtyTraded_ = value;
      }
    }

    /// <summary>Field number for the "vega_traded" field.</summary>
    public const int VegaTradedFieldNumber = 133;
    private double vegaTraded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VegaTraded {
      get { return vegaTraded_; }
      set {
        vegaTraded_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 134;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 135;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 136;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResponderMarkupVegaDir);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResponderMarkupVegaDir other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (UserName != other.UserName) return false;
      if (IsDisabled != other.IsDisabled) return false;
      if (CanIncludeFlex != other.CanIncludeFlex) return false;
      if (CanIncludeStock != other.CanIncludeStock) return false;
      if (CpFlag != other.CpFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinYears, other.MinYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxYears, other.MaxYears)) return false;
      if (!object.Equals(MinExpiry, other.MinExpiry)) return false;
      if (!object.Equals(MaxExpiry, other.MaxExpiry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinXDelta, other.MinXDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxXDelta, other.MaxXDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinStrike, other.MinStrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxStrike, other.MaxStrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSurfEdgePrem, other.MinSurfEdgePrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSurfEdgeVol, other.MinSurfEdgeVol)) return false;
      if (IncFeesInResp != other.IncFeesInResp) return false;
      if (RoundRule != other.RoundRule) return false;
      if (MaxResponseSize != other.MaxResponseSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxResponseVega, other.MaxResponseVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalResponseVega, other.TotalResponseVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalResponseWtVega, other.TotalResponseWtVega)) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (HedgeInstrument != other.HedgeInstrument) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeBetaRatio, other.HedgeBetaRatio)) return false;
      if (HedgeScope != other.HedgeScope) return false;
      if (HedgeSession != other.HedgeSession) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (NumNotices != other.NumNotices) return false;
      if (NumNoticesPass != other.NumNoticesPass) return false;
      if (NumResponses != other.NumResponses) return false;
      if (QtyTraded != other.QtyTraded) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VegaTraded, other.VegaTraded)) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDisabled.GetHashCode();
      if (CanIncludeFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CanIncludeFlex.GetHashCode();
      if (CanIncludeStock != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CanIncludeStock.GetHashCode();
      if (CpFlag != global::Spiderrock.Protobuf.CallPut.Unspecified) hash ^= CpFlag.GetHashCode();
      if (MinYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinYears);
      if (MaxYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxYears);
      if (minExpiry_ != null) hash ^= MinExpiry.GetHashCode();
      if (maxExpiry_ != null) hash ^= MaxExpiry.GetHashCode();
      if (MinXDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinXDelta);
      if (MaxXDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxXDelta);
      if (MinStrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinStrike);
      if (MaxStrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxStrike);
      if (MinSurfEdgePrem != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSurfEdgePrem);
      if (MinSurfEdgeVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSurfEdgeVol);
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IncFeesInResp.GetHashCode();
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) hash ^= RoundRule.GetHashCode();
      if (MaxResponseSize != 0) hash ^= MaxResponseSize.GetHashCode();
      if (MaxResponseVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxResponseVega);
      if (TotalResponseVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalResponseVega);
      if (TotalResponseWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalResponseWtVega);
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) hash ^= HedgeInstrument.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeBetaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeBetaRatio);
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) hash ^= HedgeScope.GetHashCode();
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= HedgeSession.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (NumNotices != 0L) hash ^= NumNotices.GetHashCode();
      if (NumNoticesPass != 0L) hash ^= NumNoticesPass.GetHashCode();
      if (NumResponses != 0L) hash ^= NumResponses.GetHashCode();
      if (QtyTraded != 0) hash ^= QtyTraded.GetHashCode();
      if (VegaTraded != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VegaTraded);
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(UserName);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (CanIncludeFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 6);
        output.WriteEnum((int) CanIncludeFlex);
      }
      if (CanIncludeStock != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) CanIncludeStock);
      }
      if (CpFlag != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) CpFlag);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(MaxYears);
      }
      if (minExpiry_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(MinExpiry);
      }
      if (maxExpiry_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(MaxExpiry);
      }
      if (MinXDelta != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(MinXDelta);
      }
      if (MaxXDelta != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(MaxXDelta);
      }
      if (MinStrike != 0D) {
        output.WriteRawTag(249, 6);
        output.WriteDouble(MinStrike);
      }
      if (MaxStrike != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MaxStrike);
      }
      if (MinSurfEdgePrem != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(MinSurfEdgePrem);
      }
      if (MinSurfEdgeVol != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(MinSurfEdgeVol);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) RoundRule);
      }
      if (MaxResponseSize != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(MaxResponseSize);
      }
      if (MaxResponseVega != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(MaxResponseVega);
      }
      if (TotalResponseVega != 0F) {
        output.WriteRawTag(189, 7);
        output.WriteFloat(TotalResponseVega);
      }
      if (TotalResponseWtVega != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(TotalResponseWtVega);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(208, 7);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(232, 7);
        output.WriteEnum((int) HedgeScope);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(240, 7);
        output.WriteEnum((int) HedgeSession);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(RiskGroupId);
      }
      if (NumNotices != 0L) {
        output.WriteRawTag(136, 8);
        output.WriteInt64(NumNotices);
      }
      if (NumNoticesPass != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NumNoticesPass);
      }
      if (NumResponses != 0L) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(NumResponses);
      }
      if (QtyTraded != 0) {
        output.WriteRawTag(160, 8);
        output.WriteInt32(QtyTraded);
      }
      if (VegaTraded != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(VegaTraded);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(178, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(UserName);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (CanIncludeFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 6);
        output.WriteEnum((int) CanIncludeFlex);
      }
      if (CanIncludeStock != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) CanIncludeStock);
      }
      if (CpFlag != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) CpFlag);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(MaxYears);
      }
      if (minExpiry_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(MinExpiry);
      }
      if (maxExpiry_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(MaxExpiry);
      }
      if (MinXDelta != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(MinXDelta);
      }
      if (MaxXDelta != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(MaxXDelta);
      }
      if (MinStrike != 0D) {
        output.WriteRawTag(249, 6);
        output.WriteDouble(MinStrike);
      }
      if (MaxStrike != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MaxStrike);
      }
      if (MinSurfEdgePrem != 0F) {
        output.WriteRawTag(141, 7);
        output.WriteFloat(MinSurfEdgePrem);
      }
      if (MinSurfEdgeVol != 0F) {
        output.WriteRawTag(149, 7);
        output.WriteFloat(MinSurfEdgeVol);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) RoundRule);
      }
      if (MaxResponseSize != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(MaxResponseSize);
      }
      if (MaxResponseVega != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(MaxResponseVega);
      }
      if (TotalResponseVega != 0F) {
        output.WriteRawTag(189, 7);
        output.WriteFloat(TotalResponseVega);
      }
      if (TotalResponseWtVega != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(TotalResponseWtVega);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(208, 7);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(232, 7);
        output.WriteEnum((int) HedgeScope);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(240, 7);
        output.WriteEnum((int) HedgeSession);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(RiskGroupId);
      }
      if (NumNotices != 0L) {
        output.WriteRawTag(136, 8);
        output.WriteInt64(NumNotices);
      }
      if (NumNoticesPass != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NumNoticesPass);
      }
      if (NumResponses != 0L) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(NumResponses);
      }
      if (QtyTraded != 0) {
        output.WriteRawTag(160, 8);
        output.WriteInt32(QtyTraded);
      }
      if (VegaTraded != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(VegaTraded);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(178, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDisabled);
      }
      if (CanIncludeFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CanIncludeFlex);
      }
      if (CanIncludeStock != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CanIncludeStock);
      }
      if (CpFlag != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CpFlag);
      }
      if (MinYears != 0F) {
        size += 2 + 4;
      }
      if (MaxYears != 0F) {
        size += 2 + 4;
      }
      if (minExpiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinExpiry);
      }
      if (maxExpiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxExpiry);
      }
      if (MinXDelta != 0F) {
        size += 2 + 4;
      }
      if (MaxXDelta != 0F) {
        size += 2 + 4;
      }
      if (MinStrike != 0D) {
        size += 2 + 8;
      }
      if (MaxStrike != 0D) {
        size += 2 + 8;
      }
      if (MinSurfEdgePrem != 0F) {
        size += 2 + 4;
      }
      if (MinSurfEdgeVol != 0F) {
        size += 2 + 4;
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoundRule);
      }
      if (MaxResponseSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxResponseSize);
      }
      if (MaxResponseVega != 0F) {
        size += 2 + 4;
      }
      if (TotalResponseVega != 0F) {
        size += 2 + 4;
      }
      if (TotalResponseWtVega != 0F) {
        size += 2 + 4;
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        size += 2 + 4;
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeScope);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSession);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (NumNotices != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNotices);
      }
      if (NumNoticesPass != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticesPass);
      }
      if (NumResponses != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumResponses);
      }
      if (QtyTraded != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QtyTraded);
      }
      if (VegaTraded != 0D) {
        size += 2 + 8;
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResponderMarkupVegaDir other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDisabled = other.IsDisabled;
      }
      if (other.CanIncludeFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CanIncludeFlex = other.CanIncludeFlex;
      }
      if (other.CanIncludeStock != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CanIncludeStock = other.CanIncludeStock;
      }
      if (other.CpFlag != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        CpFlag = other.CpFlag;
      }
      if (other.MinYears != 0F) {
        MinYears = other.MinYears;
      }
      if (other.MaxYears != 0F) {
        MaxYears = other.MaxYears;
      }
      if (other.minExpiry_ != null) {
        if (minExpiry_ == null) {
          MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MinExpiry.MergeFrom(other.MinExpiry);
      }
      if (other.maxExpiry_ != null) {
        if (maxExpiry_ == null) {
          MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxExpiry.MergeFrom(other.MaxExpiry);
      }
      if (other.MinXDelta != 0F) {
        MinXDelta = other.MinXDelta;
      }
      if (other.MaxXDelta != 0F) {
        MaxXDelta = other.MaxXDelta;
      }
      if (other.MinStrike != 0D) {
        MinStrike = other.MinStrike;
      }
      if (other.MaxStrike != 0D) {
        MaxStrike = other.MaxStrike;
      }
      if (other.MinSurfEdgePrem != 0F) {
        MinSurfEdgePrem = other.MinSurfEdgePrem;
      }
      if (other.MinSurfEdgeVol != 0F) {
        MinSurfEdgeVol = other.MinSurfEdgeVol;
      }
      if (other.IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IncFeesInResp = other.IncFeesInResp;
      }
      if (other.RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        RoundRule = other.RoundRule;
      }
      if (other.MaxResponseSize != 0) {
        MaxResponseSize = other.MaxResponseSize;
      }
      if (other.MaxResponseVega != 0F) {
        MaxResponseVega = other.MaxResponseVega;
      }
      if (other.TotalResponseVega != 0F) {
        TotalResponseVega = other.TotalResponseVega;
      }
      if (other.TotalResponseWtVega != 0F) {
        TotalResponseWtVega = other.TotalResponseWtVega;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        HedgeInstrument = other.HedgeInstrument;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeBetaRatio != 0F) {
        HedgeBetaRatio = other.HedgeBetaRatio;
      }
      if (other.HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        HedgeScope = other.HedgeScope;
      }
      if (other.HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        HedgeSession = other.HedgeSession;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.NumNotices != 0L) {
        NumNotices = other.NumNotices;
      }
      if (other.NumNoticesPass != 0L) {
        NumNoticesPass = other.NumNoticesPass;
      }
      if (other.NumResponses != 0L) {
        NumResponses = other.NumResponses;
      }
      if (other.QtyTraded != 0) {
        QtyTraded = other.QtyTraded;
      }
      if (other.VegaTraded != 0D) {
        VegaTraded = other.VegaTraded;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            UserName = input.ReadString();
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            CanIncludeFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 824: {
            CanIncludeStock = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 832: {
            CpFlag = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 845: {
            MinYears = input.ReadFloat();
            break;
          }
          case 853: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 858: {
            if (minExpiry_ == null) {
              MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MinExpiry);
            break;
          }
          case 866: {
            if (maxExpiry_ == null) {
              MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExpiry);
            break;
          }
          case 877: {
            MinXDelta = input.ReadFloat();
            break;
          }
          case 885: {
            MaxXDelta = input.ReadFloat();
            break;
          }
          case 889: {
            MinStrike = input.ReadDouble();
            break;
          }
          case 897: {
            MaxStrike = input.ReadDouble();
            break;
          }
          case 909: {
            MinSurfEdgePrem = input.ReadFloat();
            break;
          }
          case 917: {
            MinSurfEdgeVol = input.ReadFloat();
            break;
          }
          case 920: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 928: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 936: {
            MaxResponseSize = input.ReadInt32();
            break;
          }
          case 949: {
            MaxResponseVega = input.ReadFloat();
            break;
          }
          case 957: {
            TotalResponseVega = input.ReadFloat();
            break;
          }
          case 965: {
            TotalResponseWtVega = input.ReadFloat();
            break;
          }
          case 968: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 976: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 986: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 997: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 1000: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 1008: {
            HedgeSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 1016: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1032: {
            NumNotices = input.ReadInt64();
            break;
          }
          case 1040: {
            NumNoticesPass = input.ReadInt64();
            break;
          }
          case 1048: {
            NumResponses = input.ReadInt64();
            break;
          }
          case 1056: {
            QtyTraded = input.ReadInt32();
            break;
          }
          case 1065: {
            VegaTraded = input.ReadDouble();
            break;
          }
          case 1074: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1080: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1090: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            UserName = input.ReadString();
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            CanIncludeFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 824: {
            CanIncludeStock = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 832: {
            CpFlag = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 845: {
            MinYears = input.ReadFloat();
            break;
          }
          case 853: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 858: {
            if (minExpiry_ == null) {
              MinExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MinExpiry);
            break;
          }
          case 866: {
            if (maxExpiry_ == null) {
              MaxExpiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExpiry);
            break;
          }
          case 877: {
            MinXDelta = input.ReadFloat();
            break;
          }
          case 885: {
            MaxXDelta = input.ReadFloat();
            break;
          }
          case 889: {
            MinStrike = input.ReadDouble();
            break;
          }
          case 897: {
            MaxStrike = input.ReadDouble();
            break;
          }
          case 909: {
            MinSurfEdgePrem = input.ReadFloat();
            break;
          }
          case 917: {
            MinSurfEdgeVol = input.ReadFloat();
            break;
          }
          case 920: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 928: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 936: {
            MaxResponseSize = input.ReadInt32();
            break;
          }
          case 949: {
            MaxResponseVega = input.ReadFloat();
            break;
          }
          case 957: {
            TotalResponseVega = input.ReadFloat();
            break;
          }
          case 965: {
            TotalResponseWtVega = input.ReadFloat();
            break;
          }
          case 968: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 976: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 986: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 997: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 1000: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 1008: {
            HedgeSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 1016: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1032: {
            NumNotices = input.ReadInt64();
            break;
          }
          case 1040: {
            NumNoticesPass = input.ReadInt64();
            break;
          }
          case 1048: {
            NumResponses = input.ReadInt64();
            break;
          }
          case 1056: {
            QtyTraded = input.ReadInt32();
            break;
          }
          case 1065: {
            VegaTraded = input.ReadDouble();
            break;
          }
          case 1074: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1080: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1090: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResponderMarkupVegaDir message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ResponderMarkupVegaDir.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          clientFirm_ = other.clientFirm_;
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          respSide_ = other.respSide_;
          expiryGroup_ = other.expiryGroup_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 11;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 12;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "resp_side" field.</summary>
        public const int RespSideFieldNumber = 13;
        private global::Spiderrock.Protobuf.BuySell respSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        /// <summary>
        /// auction responder side (your side)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell RespSide {
          get { return respSide_; }
          set {
            respSide_ = value;
          }
        }

        /// <summary>Field number for the "expiry_group" field.</summary>
        public const int ExpiryGroupFieldNumber = 14;
        private int expiryGroup_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ExpiryGroup {
          get { return expiryGroup_; }
          set {
            expiryGroup_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (ClientFirm != other.ClientFirm) return false;
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (RespSide != other.RespSide) return false;
          if (ExpiryGroup != other.ExpiryGroup) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= RespSide.GetHashCode();
          if (ExpiryGroup != 0) hash ^= ExpiryGroup.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (ticker_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Ticker);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RespSide);
          }
          if (ExpiryGroup != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ExpiryGroup);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (ticker_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Ticker);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RespSide);
          }
          if (ExpiryGroup != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ExpiryGroup);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RespSide);
          }
          if (ExpiryGroup != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpiryGroup);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            RespSide = other.RespSide;
          }
          if (other.ExpiryGroup != 0) {
            ExpiryGroup = other.ExpiryGroup;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 98: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 104: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 112: {
                ExpiryGroup = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 98: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 104: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 112: {
                ExpiryGroup = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
