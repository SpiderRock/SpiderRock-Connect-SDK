// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRATS/ResponderMarkupRC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRATS/ResponderMarkupRC.proto</summary>
  public static partial class ResponderMarkupRCReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRATS/ResponderMarkupRC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResponderMarkupRCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQcm90b2J1Zi9TUkFUUy9SZXNwb25kZXJNYXJrdXBSQy5wcm90bxITc3Bp",
            "ZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8isgoKEVJlc3BvbmRlck1h",
            "cmt1cFJDEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "ZXNzYWdlTWV0YWRhdGESOQoEcGtleRgCIAEoCzIrLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuUmVzcG9uZGVyTWFya3VwUkMuUEtleRIuCgZ0aWNrZXIYZCABKAsy",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIvCgtpc19kaXNhYmxl",
            "ZBhlIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SGAoQZXhwaXJ5",
            "X3F0eV9hdmFpbBhmIAEoBRIYChB0aWNrZXJfcXR5X2F2YWlsGGcgASgFEhQK",
            "DHRyYW5zYWN0X2ZlZRhoIAEoARISCgpzdG9ja19yYXRlGGkgASgBEhIKCm1v",
            "bmV5X3JhdGUYaiABKAESDwoHZGRpdl9wdhhrIAEoARI0CgtkaXZfY29udHJv",
            "bBhsIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRGl2Q29udHJvbBIwCgxy",
            "ZXNwb25kX2ZsZXgYbSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05v",
            "EjQKEGluY19mZWVzX2luX3Jlc3AYbiABKA4yGi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlllc05vEjIKCnJvdW5kX3J1bGUYbyABKA4yHi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlJvdW5kUnVsZRIXCg9vcGVuX2V4cGlyeV9xdHkYcCABKAUSFwoP",
            "b3Blbl90aWNrZXJfcXR5GHEgASgFEhQKDGN1bV9maWxsX3F0eRhyIAEoBRIW",
            "Cg5jdW1fZmlsbF9tb25leRhzIAEoARIVCg1hdmdfZmlsbF9yYXRlGHQgASgB",
            "EjsKF2lzX2Rpdl9jb250cm9sX2Rpc2FibGVkGHUgASgOMhouc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5ZZXNObxINCgV1X2JpZBh2IAEoARINCgV1X2Fzaxh3IAEo",
            "ARIOCgZpX2RheXMYeCABKAESDwoHaV95ZWFycxh5IAEoARIOCgZzdHJpa2UY",
            "eiABKAESEwoLcmNfZUV4X3ByZW0YeyABKAESEQoJc3RyaWtlX3B2GHwgASgB",
            "EhUKDXN0b2NrX2xlbmRfcHYYfSABKAESFAoMcmV2X2Nvbl9wcmVtGH4gASgB",
            "EhkKEWVmZl9yZXZfY29uX2xpbWl0GH8gASgBEhQKC2xpbWl0X3ByaWNlGIAB",
            "IAEoARIaChFlZmZfc3RvY2tfbGVuZF9wdhiBASABKAESFwoOZWZmX3N0b2Nr",
            "X3JhdGUYggEgASgBEhQKC21vZGlmaWVkX2J5GIMBIAEoCRI5Cgttb2RpZmll",
            "ZF9pbhiEASABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlN5c0Vudmlyb25t",
            "ZW50Ei4KCXRpbWVzdGFtcBiFASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wGrcBCgRQS2V5Eg0KBWFjY250GAogASgJEhMKC2NsaWVudF9maXJt",
            "GAsgASgJEiwKBHJvb3QYDCABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRp",
            "Y2tlcktleRIsCgZleHBpcnkYDSABKAsyHC5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkRhdGVLZXkSLwoJcmVzcF9zaWRlGA4gASgOMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5CdXlTZWxsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupRC), global::Spiderrock.Protobuf.ResponderMarkupRC.Parser, new[]{ "Meta", "Pkey", "Ticker", "IsDisabled", "ExpiryQtyAvail", "TickerQtyAvail", "TransactFee", "StockRate", "MoneyRate", "DdivPv", "DivControl", "RespondFlex", "IncFeesInResp", "RoundRule", "OpenExpiryQty", "OpenTickerQty", "CumFillQty", "CumFillMoney", "AvgFillRate", "IsDivControlDisabled", "UBid", "UAsk", "IDays", "IYears", "Strike", "RcEExPrem", "StrikePv", "StockLendPv", "RevConPrem", "EffRevConLimit", "LimitPrice", "EffStockLendPv", "EffStockRate", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey), global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey.Parser, new[]{ "Accnt", "ClientFirm", "Root", "Expiry", "RespSide" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ResponderMarkupRC : pb::IMessage<ResponderMarkupRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResponderMarkupRC> _parser = new pb::MessageParser<ResponderMarkupRC>(() => new ResponderMarkupRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResponderMarkupRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ResponderMarkupRCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupRC(ResponderMarkupRC other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      isDisabled_ = other.isDisabled_;
      expiryQtyAvail_ = other.expiryQtyAvail_;
      tickerQtyAvail_ = other.tickerQtyAvail_;
      transactFee_ = other.transactFee_;
      stockRate_ = other.stockRate_;
      moneyRate_ = other.moneyRate_;
      ddivPv_ = other.ddivPv_;
      divControl_ = other.divControl_;
      respondFlex_ = other.respondFlex_;
      incFeesInResp_ = other.incFeesInResp_;
      roundRule_ = other.roundRule_;
      openExpiryQty_ = other.openExpiryQty_;
      openTickerQty_ = other.openTickerQty_;
      cumFillQty_ = other.cumFillQty_;
      cumFillMoney_ = other.cumFillMoney_;
      avgFillRate_ = other.avgFillRate_;
      isDivControlDisabled_ = other.isDivControlDisabled_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      iDays_ = other.iDays_;
      iYears_ = other.iYears_;
      strike_ = other.strike_;
      rcEExPrem_ = other.rcEExPrem_;
      strikePv_ = other.strikePv_;
      stockLendPv_ = other.stockLendPv_;
      revConPrem_ = other.revConPrem_;
      effRevConLimit_ = other.effRevConLimit_;
      limitPrice_ = other.limitPrice_;
      effStockLendPv_ = other.effStockLendPv_;
      effStockRate_ = other.effStockRate_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupRC Clone() {
      return new ResponderMarkupRC(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "is_disabled" field.</summary>
    public const int IsDisabledFieldNumber = 101;
    private global::Spiderrock.Protobuf.YesNo isDisabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if Yes, this auto-responder record is disabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDisabled {
      get { return isDisabled_; }
      set {
        isDisabled_ = value;
      }
    }

    /// <summary>Field number for the "expiry_qty_avail" field.</summary>
    public const int ExpiryQtyAvailFieldNumber = 102;
    private int expiryQtyAvail_;
    /// <summary>
    /// revcons (contracts) available for responding (day total; this ticker/expiry; all strikes) [note: 1 contract = undPerCn underlier units]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExpiryQtyAvail {
      get { return expiryQtyAvail_; }
      set {
        expiryQtyAvail_ = value;
      }
    }

    /// <summary>Field number for the "ticker_qty_avail" field.</summary>
    public const int TickerQtyAvailFieldNumber = 103;
    private int tickerQtyAvail_;
    /// <summary>
    /// revcons (contracts) available for responding (day total; this ticker; all strikes) [note: 1 contract = undPerCn underlier units]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TickerQtyAvail {
      get { return tickerQtyAvail_; }
      set {
        tickerQtyAvail_ = value;
      }
    }

    /// <summary>Field number for the "transact_fee" field.</summary>
    public const int TransactFeeFieldNumber = 104;
    private double transactFee_;
    /// <summary>
    /// (+ = you pay) / (- = you receive)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TransactFee {
      get { return transactFee_; }
      set {
        transactFee_ = value;
      }
    }

    /// <summary>Field number for the "stock_rate" field.</summary>
    public const int StockRateFieldNumber = 105;
    private double stockRate_;
    /// <summary>
    /// 0.00 = no effective lend/borrow value  (360 day convention)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockRate {
      get { return stockRate_; }
      set {
        stockRate_ = value;
      }
    }

    /// <summary>Field number for the "money_rate" field.</summary>
    public const int MoneyRateFieldNumber = 106;
    private double moneyRate_;
    /// <summary>
    /// effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MoneyRate {
      get { return moneyRate_; }
      set {
        moneyRate_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 107;
    private double ddivPv_;
    /// <summary>
    /// present value of any expected dividends to expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "div_control" field.</summary>
    public const int DivControlFieldNumber = 108;
    private global::Spiderrock.Protobuf.DivControl divControl_ = global::Spiderrock.Protobuf.DivControl.Unspecified;
    /// <summary>
    /// disable this auto-responder record if SR Dividends exist or are estimates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DivControl DivControl {
      get { return divControl_; }
      set {
        divControl_ = value;
      }
    }

    /// <summary>Field number for the "respond_flex" field.</summary>
    public const int RespondFlexFieldNumber = 109;
    private global::Spiderrock.Protobuf.YesNo respondFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if not None, much match auction notice containsFlex field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo RespondFlex {
      get { return respondFlex_; }
      set {
        respondFlex_ = value;
      }
    }

    /// <summary>Field number for the "inc_fees_in_resp" field.</summary>
    public const int IncFeesInRespFieldNumber = 110;
    private global::Spiderrock.Protobuf.YesNo incFeesInResp_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// include all estimated responder fees in final response price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IncFeesInResp {
      get { return incFeesInResp_; }
      set {
        incFeesInResp_ = value;
      }
    }

    /// <summary>Field number for the "round_rule" field.</summary>
    public const int RoundRuleFieldNumber = 111;
    private global::Spiderrock.Protobuf.RoundRule roundRule_ = global::Spiderrock.Protobuf.RoundRule.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RoundRule RoundRule {
      get { return roundRule_; }
      set {
        roundRule_ = value;
      }
    }

    /// <summary>Field number for the "open_expiry_qty" field.</summary>
    public const int OpenExpiryQtyFieldNumber = 112;
    private int openExpiryQty_;
    /// <summary>
    /// remaining revcons (100 share units) available for responding (day total; this ticker/expiry; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenExpiryQty {
      get { return openExpiryQty_; }
      set {
        openExpiryQty_ = value;
      }
    }

    /// <summary>Field number for the "open_ticker_qty" field.</summary>
    public const int OpenTickerQtyFieldNumber = 113;
    private int openTickerQty_;
    /// <summary>
    /// remaining revcons (100 share units) available for responding (day total; ticker; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenTickerQty {
      get { return openTickerQty_; }
      set {
        openTickerQty_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_qty" field.</summary>
    public const int CumFillQtyFieldNumber = 114;
    private int cumFillQty_;
    /// <summary>
    /// revcons (100 share units) traded (day total; this expiry; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQty {
      get { return cumFillQty_; }
      set {
        cumFillQty_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_money" field.</summary>
    public const int CumFillMoneyFieldNumber = 115;
    private double cumFillMoney_;
    /// <summary>
    /// cumulative fill money (credit/debit) (this expiry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CumFillMoney {
      get { return cumFillMoney_; }
      set {
        cumFillMoney_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_rate" field.</summary>
    public const int AvgFillRateFieldNumber = 116;
    private double avgFillRate_;
    /// <summary>
    /// avg fill effective stock rate (this expiry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillRate {
      get { return avgFillRate_; }
      set {
        avgFillRate_ = value;
      }
    }

    /// <summary>Field number for the "is_div_control_disabled" field.</summary>
    public const int IsDivControlDisabledFieldNumber = 117;
    private global::Spiderrock.Protobuf.YesNo isDivControlDisabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// yes if dividend control above is triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDivControlDisabled {
      get { return isDivControlDisabled_; }
      set {
        isDivControlDisabled_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 118;
    private double uBid_;
    /// <summary>
    /// live stock nbbo bid price [SR Supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 119;
    private double uAsk_;
    /// <summary>
    /// live stock nbbo ask price [SR Supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 120;
    private double iDays_;
    /// <summary>
    /// iDays = effective interest days [SR supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "i_years" field.</summary>
    public const int IYearsFieldNumber = 121;
    private double iYears_;
    /// <summary>
    /// iYears = iDays / 360.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IYears {
      get { return iYears_; }
      set {
        iYears_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 122;
    private double strike_;
    /// <summary>
    /// SR selected strike (standard day strike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "rc_eEx_prem" field.</summary>
    public const int RcEExPremFieldNumber = 123;
    private double rcEExPrem_;
    /// <summary>
    /// rcEExPrem = (pRv.price - pRvE.price) - (cRv.price - cRvE.price) [american price - european price] (same model parameters; SR supplied parameters including DDivs; is zero for flex revcons)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RcEExPrem {
      get { return rcEExPrem_; }
      set {
        rcEExPrem_ = value;
      }
    }

    /// <summary>Field number for the "strike_pv" field.</summary>
    public const int StrikePvFieldNumber = 124;
    private double strikePv_;
    /// <summary>
    /// strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikePv {
      get { return strikePv_; }
      set {
        strikePv_ = value;
      }
    }

    /// <summary>Field number for the "stock_lend_pv" field.</summary>
    public const int StockLendPvFieldNumber = 125;
    private double stockLendPv_;
    /// <summary>
    /// stockLendPv = uPrc * stockRate * iYears [stockRate supplied above]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockLendPv {
      get { return stockLendPv_; }
      set {
        stockLendPv_ = value;
      }
    }

    /// <summary>Field number for the "rev_con_prem" field.</summary>
    public const int RevConPremFieldNumber = 126;
    private double revConPrem_;
    /// <summary>
    /// revConPrem = stockLendPv + strikePv + ddivPv + rcEExPrem (if any) [uPrc + pRv.price - cRv.price] [ddivPv supplied above]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RevConPrem {
      get { return revConPrem_; }
      set {
        revConPrem_ = value;
      }
    }

    /// <summary>Field number for the "eff_rev_con_limit" field.</summary>
    public const int EffRevConLimitFieldNumber = 127;
    private double effRevConLimit_;
    /// <summary>
    /// effRevConLimit = refConPrem +/- transactFee [lend/borrow]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffRevConLimit {
      get { return effRevConLimit_; }
      set {
        effRevConLimit_ = value;
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 128;
    private double limitPrice_;
    /// <summary>
    /// limitPrice = ROUND(effRevConLimit) [this is your response limit]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_lend_pv" field.</summary>
    public const int EffStockLendPvFieldNumber = 129;
    private double effStockLendPv_;
    /// <summary>
    /// effStockLendPv = limitPrice - strikePv - ddivPv - rcEExPrem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockLendPv {
      get { return effStockLendPv_; }
      set {
        effStockLendPv_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_rate" field.</summary>
    public const int EffStockRateFieldNumber = 130;
    private double effStockRate_;
    /// <summary>
    /// effStockRate = effStockLendPv / (uPrc * iYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockRate {
      get { return effStockRate_; }
      set {
        effStockRate_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 131;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 132;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 133;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResponderMarkupRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResponderMarkupRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (IsDisabled != other.IsDisabled) return false;
      if (ExpiryQtyAvail != other.ExpiryQtyAvail) return false;
      if (TickerQtyAvail != other.TickerQtyAvail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TransactFee, other.TransactFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockRate, other.StockRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoneyRate, other.MoneyRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (DivControl != other.DivControl) return false;
      if (RespondFlex != other.RespondFlex) return false;
      if (IncFeesInResp != other.IncFeesInResp) return false;
      if (RoundRule != other.RoundRule) return false;
      if (OpenExpiryQty != other.OpenExpiryQty) return false;
      if (OpenTickerQty != other.OpenTickerQty) return false;
      if (CumFillQty != other.CumFillQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CumFillMoney, other.CumFillMoney)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillRate, other.AvgFillRate)) return false;
      if (IsDivControlDisabled != other.IsDivControlDisabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IDays, other.IDays)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IYears, other.IYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RcEExPrem, other.RcEExPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePv, other.StrikePv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockLendPv, other.StockLendPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevConPrem, other.RevConPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffRevConLimit, other.EffRevConLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockLendPv, other.EffStockLendPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockRate, other.EffStockRate)) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDisabled.GetHashCode();
      if (ExpiryQtyAvail != 0) hash ^= ExpiryQtyAvail.GetHashCode();
      if (TickerQtyAvail != 0) hash ^= TickerQtyAvail.GetHashCode();
      if (TransactFee != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TransactFee);
      if (StockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockRate);
      if (MoneyRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoneyRate);
      if (DdivPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DdivPv);
      if (DivControl != global::Spiderrock.Protobuf.DivControl.Unspecified) hash ^= DivControl.GetHashCode();
      if (RespondFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= RespondFlex.GetHashCode();
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IncFeesInResp.GetHashCode();
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) hash ^= RoundRule.GetHashCode();
      if (OpenExpiryQty != 0) hash ^= OpenExpiryQty.GetHashCode();
      if (OpenTickerQty != 0) hash ^= OpenTickerQty.GetHashCode();
      if (CumFillQty != 0) hash ^= CumFillQty.GetHashCode();
      if (CumFillMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CumFillMoney);
      if (AvgFillRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillRate);
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDivControlDisabled.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (IDays != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IDays);
      if (IYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IYears);
      if (Strike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (RcEExPrem != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RcEExPrem);
      if (StrikePv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePv);
      if (StockLendPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockLendPv);
      if (RevConPrem != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevConPrem);
      if (EffRevConLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffRevConLimit);
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (EffStockLendPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockLendPv);
      if (EffStockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockRate);
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (ExpiryQtyAvail != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(ExpiryQtyAvail);
      }
      if (TickerQtyAvail != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(TickerQtyAvail);
      }
      if (TransactFee != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(TransactFee);
      }
      if (StockRate != 0D) {
        output.WriteRawTag(201, 6);
        output.WriteDouble(StockRate);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(217, 6);
        output.WriteDouble(DdivPv);
      }
      if (DivControl != global::Spiderrock.Protobuf.DivControl.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) DivControl);
      }
      if (RespondFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) RespondFlex);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) RoundRule);
      }
      if (OpenExpiryQty != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(OpenExpiryQty);
      }
      if (OpenTickerQty != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(OpenTickerQty);
      }
      if (CumFillQty != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(CumFillQty);
      }
      if (CumFillMoney != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(CumFillMoney);
      }
      if (AvgFillRate != 0D) {
        output.WriteRawTag(161, 7);
        output.WriteDouble(AvgFillRate);
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) IsDivControlDisabled);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(185, 7);
        output.WriteDouble(UAsk);
      }
      if (IDays != 0D) {
        output.WriteRawTag(193, 7);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(IYears);
      }
      if (Strike != 0D) {
        output.WriteRawTag(209, 7);
        output.WriteDouble(Strike);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(217, 7);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(StrikePv);
      }
      if (StockLendPv != 0D) {
        output.WriteRawTag(233, 7);
        output.WriteDouble(StockLendPv);
      }
      if (RevConPrem != 0D) {
        output.WriteRawTag(241, 7);
        output.WriteDouble(RevConPrem);
      }
      if (EffRevConLimit != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(EffRevConLimit);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(LimitPrice);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(EffStockRate);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (ExpiryQtyAvail != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(ExpiryQtyAvail);
      }
      if (TickerQtyAvail != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(TickerQtyAvail);
      }
      if (TransactFee != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(TransactFee);
      }
      if (StockRate != 0D) {
        output.WriteRawTag(201, 6);
        output.WriteDouble(StockRate);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(217, 6);
        output.WriteDouble(DdivPv);
      }
      if (DivControl != global::Spiderrock.Protobuf.DivControl.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) DivControl);
      }
      if (RespondFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) RespondFlex);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) RoundRule);
      }
      if (OpenExpiryQty != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(OpenExpiryQty);
      }
      if (OpenTickerQty != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(OpenTickerQty);
      }
      if (CumFillQty != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(CumFillQty);
      }
      if (CumFillMoney != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(CumFillMoney);
      }
      if (AvgFillRate != 0D) {
        output.WriteRawTag(161, 7);
        output.WriteDouble(AvgFillRate);
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 7);
        output.WriteEnum((int) IsDivControlDisabled);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(185, 7);
        output.WriteDouble(UAsk);
      }
      if (IDays != 0D) {
        output.WriteRawTag(193, 7);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(IYears);
      }
      if (Strike != 0D) {
        output.WriteRawTag(209, 7);
        output.WriteDouble(Strike);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(217, 7);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(StrikePv);
      }
      if (StockLendPv != 0D) {
        output.WriteRawTag(233, 7);
        output.WriteDouble(StockLendPv);
      }
      if (RevConPrem != 0D) {
        output.WriteRawTag(241, 7);
        output.WriteDouble(RevConPrem);
      }
      if (EffRevConLimit != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(EffRevConLimit);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(LimitPrice);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(EffStockRate);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 8);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDisabled);
      }
      if (ExpiryQtyAvail != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExpiryQtyAvail);
      }
      if (TickerQtyAvail != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TickerQtyAvail);
      }
      if (TransactFee != 0D) {
        size += 2 + 8;
      }
      if (StockRate != 0D) {
        size += 2 + 8;
      }
      if (MoneyRate != 0D) {
        size += 2 + 8;
      }
      if (DdivPv != 0D) {
        size += 2 + 8;
      }
      if (DivControl != global::Spiderrock.Protobuf.DivControl.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DivControl);
      }
      if (RespondFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RespondFlex);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoundRule);
      }
      if (OpenExpiryQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenExpiryQty);
      }
      if (OpenTickerQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenTickerQty);
      }
      if (CumFillQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQty);
      }
      if (CumFillMoney != 0D) {
        size += 2 + 8;
      }
      if (AvgFillRate != 0D) {
        size += 2 + 8;
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDivControlDisabled);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (IDays != 0D) {
        size += 2 + 8;
      }
      if (IYears != 0D) {
        size += 2 + 8;
      }
      if (Strike != 0D) {
        size += 2 + 8;
      }
      if (RcEExPrem != 0D) {
        size += 2 + 8;
      }
      if (StrikePv != 0D) {
        size += 2 + 8;
      }
      if (StockLendPv != 0D) {
        size += 2 + 8;
      }
      if (RevConPrem != 0D) {
        size += 2 + 8;
      }
      if (EffRevConLimit != 0D) {
        size += 2 + 8;
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (EffStockLendPv != 0D) {
        size += 2 + 8;
      }
      if (EffStockRate != 0D) {
        size += 2 + 8;
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResponderMarkupRC other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDisabled = other.IsDisabled;
      }
      if (other.ExpiryQtyAvail != 0) {
        ExpiryQtyAvail = other.ExpiryQtyAvail;
      }
      if (other.TickerQtyAvail != 0) {
        TickerQtyAvail = other.TickerQtyAvail;
      }
      if (other.TransactFee != 0D) {
        TransactFee = other.TransactFee;
      }
      if (other.StockRate != 0D) {
        StockRate = other.StockRate;
      }
      if (other.MoneyRate != 0D) {
        MoneyRate = other.MoneyRate;
      }
      if (other.DdivPv != 0D) {
        DdivPv = other.DdivPv;
      }
      if (other.DivControl != global::Spiderrock.Protobuf.DivControl.Unspecified) {
        DivControl = other.DivControl;
      }
      if (other.RespondFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        RespondFlex = other.RespondFlex;
      }
      if (other.IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IncFeesInResp = other.IncFeesInResp;
      }
      if (other.RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        RoundRule = other.RoundRule;
      }
      if (other.OpenExpiryQty != 0) {
        OpenExpiryQty = other.OpenExpiryQty;
      }
      if (other.OpenTickerQty != 0) {
        OpenTickerQty = other.OpenTickerQty;
      }
      if (other.CumFillQty != 0) {
        CumFillQty = other.CumFillQty;
      }
      if (other.CumFillMoney != 0D) {
        CumFillMoney = other.CumFillMoney;
      }
      if (other.AvgFillRate != 0D) {
        AvgFillRate = other.AvgFillRate;
      }
      if (other.IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDivControlDisabled = other.IsDivControlDisabled;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.IDays != 0D) {
        IDays = other.IDays;
      }
      if (other.IYears != 0D) {
        IYears = other.IYears;
      }
      if (other.Strike != 0D) {
        Strike = other.Strike;
      }
      if (other.RcEExPrem != 0D) {
        RcEExPrem = other.RcEExPrem;
      }
      if (other.StrikePv != 0D) {
        StrikePv = other.StrikePv;
      }
      if (other.StockLendPv != 0D) {
        StockLendPv = other.StockLendPv;
      }
      if (other.RevConPrem != 0D) {
        RevConPrem = other.RevConPrem;
      }
      if (other.EffRevConLimit != 0D) {
        EffRevConLimit = other.EffRevConLimit;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.EffStockLendPv != 0D) {
        EffStockLendPv = other.EffStockLendPv;
      }
      if (other.EffStockRate != 0D) {
        EffStockRate = other.EffStockRate;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            ExpiryQtyAvail = input.ReadInt32();
            break;
          }
          case 824: {
            TickerQtyAvail = input.ReadInt32();
            break;
          }
          case 833: {
            TransactFee = input.ReadDouble();
            break;
          }
          case 841: {
            StockRate = input.ReadDouble();
            break;
          }
          case 849: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 857: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 864: {
            DivControl = (global::Spiderrock.Protobuf.DivControl) input.ReadEnum();
            break;
          }
          case 872: {
            RespondFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 880: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 888: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 896: {
            OpenExpiryQty = input.ReadInt32();
            break;
          }
          case 904: {
            OpenTickerQty = input.ReadInt32();
            break;
          }
          case 912: {
            CumFillQty = input.ReadInt32();
            break;
          }
          case 921: {
            CumFillMoney = input.ReadDouble();
            break;
          }
          case 929: {
            AvgFillRate = input.ReadDouble();
            break;
          }
          case 936: {
            IsDivControlDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 945: {
            UBid = input.ReadDouble();
            break;
          }
          case 953: {
            UAsk = input.ReadDouble();
            break;
          }
          case 961: {
            IDays = input.ReadDouble();
            break;
          }
          case 969: {
            IYears = input.ReadDouble();
            break;
          }
          case 977: {
            Strike = input.ReadDouble();
            break;
          }
          case 985: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 993: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1001: {
            StockLendPv = input.ReadDouble();
            break;
          }
          case 1009: {
            RevConPrem = input.ReadDouble();
            break;
          }
          case 1017: {
            EffRevConLimit = input.ReadDouble();
            break;
          }
          case 1025: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 1033: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1041: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1050: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1056: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1066: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            ExpiryQtyAvail = input.ReadInt32();
            break;
          }
          case 824: {
            TickerQtyAvail = input.ReadInt32();
            break;
          }
          case 833: {
            TransactFee = input.ReadDouble();
            break;
          }
          case 841: {
            StockRate = input.ReadDouble();
            break;
          }
          case 849: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 857: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 864: {
            DivControl = (global::Spiderrock.Protobuf.DivControl) input.ReadEnum();
            break;
          }
          case 872: {
            RespondFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 880: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 888: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 896: {
            OpenExpiryQty = input.ReadInt32();
            break;
          }
          case 904: {
            OpenTickerQty = input.ReadInt32();
            break;
          }
          case 912: {
            CumFillQty = input.ReadInt32();
            break;
          }
          case 921: {
            CumFillMoney = input.ReadDouble();
            break;
          }
          case 929: {
            AvgFillRate = input.ReadDouble();
            break;
          }
          case 936: {
            IsDivControlDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 945: {
            UBid = input.ReadDouble();
            break;
          }
          case 953: {
            UAsk = input.ReadDouble();
            break;
          }
          case 961: {
            IDays = input.ReadDouble();
            break;
          }
          case 969: {
            IYears = input.ReadDouble();
            break;
          }
          case 977: {
            Strike = input.ReadDouble();
            break;
          }
          case 985: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 993: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1001: {
            StockLendPv = input.ReadDouble();
            break;
          }
          case 1009: {
            RevConPrem = input.ReadDouble();
            break;
          }
          case 1017: {
            EffRevConLimit = input.ReadDouble();
            break;
          }
          case 1025: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 1033: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1041: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1050: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 1056: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 1066: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResponderMarkupRC message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ResponderMarkupRC.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          clientFirm_ = other.clientFirm_;
          root_ = other.root_ != null ? other.root_.Clone() : null;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          respSide_ = other.respSide_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 11;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "root" field.</summary>
        public const int RootFieldNumber = 12;
        private global::Spiderrock.Protobuf.TickerKey root_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Root {
          get { return root_; }
          set {
            root_ = value;
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 13;
        private global::Spiderrock.Protobuf.DateKey expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "resp_side" field.</summary>
        public const int RespSideFieldNumber = 14;
        private global::Spiderrock.Protobuf.BuySell respSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        /// <summary>
        /// auction responder side (your side); Buy = Buy Synthetic (Sell Shares)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell RespSide {
          get { return respSide_; }
          set {
            respSide_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (ClientFirm != other.ClientFirm) return false;
          if (!object.Equals(Root, other.Root)) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (RespSide != other.RespSide) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (root_ != null) hash ^= Root.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= RespSide.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (root_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Root);
          }
          if (expiry_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(Expiry);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RespSide);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (root_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Root);
          }
          if (expiry_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(Expiry);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RespSide);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (root_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RespSide);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.root_ != null) {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            Root.MergeFrom(other.Root);
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              Expiry = new global::Spiderrock.Protobuf.DateKey();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            RespSide = other.RespSide;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 98: {
                if (root_ == null) {
                  Root = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Root);
                break;
              }
              case 106: {
                if (expiry_ == null) {
                  Expiry = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Expiry);
                break;
              }
              case 112: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 98: {
                if (root_ == null) {
                  Root = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Root);
                break;
              }
              case 106: {
                if (expiry_ == null) {
                  Expiry = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Expiry);
                break;
              }
              case 112: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
