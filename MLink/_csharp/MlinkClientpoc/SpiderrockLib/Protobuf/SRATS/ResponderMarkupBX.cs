// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRATS/ResponderMarkupBX.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRATS/ResponderMarkupBX.proto</summary>
  public static partial class ResponderMarkupBXReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRATS/ResponderMarkupBX.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResponderMarkupBXReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQcm90b2J1Zi9TUkFUUy9SZXNwb25kZXJNYXJrdXBCWC5wcm90bxITc3Bp",
            "ZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8isQ0KEVJlc3BvbmRlck1h",
            "cmt1cEJYEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "ZXNzYWdlTWV0YWRhdGESOQoEcGtleRgCIAEoCzIrLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuUmVzcG9uZGVyTWFya3VwQlguUEtleRIuCgZ0aWNrZXIYZCABKAsy",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIvCgtpc19kaXNhYmxl",
            "ZBhlIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SGgoSZXhwaXJ5",
            "X21vbmV5X2F2YWlsGGYgASgDEhoKEnRpY2tlcl9tb25leV9hdmFpbBhnIAEo",
            "AxIUCgx0cmFuc2FjdF9mZWUYaCABKAESEgoKbW9uZXlfcmF0ZRhpIAEoARI0",
            "ChBpbmNfZmVlc19pbl9yZXNwGGogASgOMhouc3BpZGVycm9jay5wcm90b2J1",
            "Zi5ZZXNObxIyCgpyb3VuZF9ydWxlGGsgASgOMh4uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5Sb3VuZFJ1bGUSGQoRb3Blbl9leHBpcnlfbW9uZXkYbCABKAUSGQoR",
            "b3Blbl90aWNrZXJfbW9uZXkYbSABKAUSFgoOY3VtX2ZpbGxfbW9uZXkYbiAB",
            "KAESFQoNYXZnX2ZpbGxfcmF0ZRhvIAEoARI7Chdpc19kaXZfY29udHJvbF9k",
            "aXNhYmxlZBhwIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SDgoG",
            "aV9kYXlzGHEgASgBEg8KB2lfeWVhcnMYciABKAESEwoLbnVtX25vdGljZXMY",
            "diABKAMSFQoNbnVtX25vdGljZV9zUhh3IAEoAxIXCg9udW1fbm90aWNlX2FN",
            "RVgYeCABKAMSFwoPbnVtX25vdGljZV9iQVRTGHkgASgDEhYKDm51bV9ub3Rp",
            "Y2VfYk9YGHogASgDEhcKD251bV9ub3RpY2VfY0JPRRh7IAEoAxIVCg1udW1f",
            "bm90aWNlX2MyGHwgASgDEhcKD251bV9ub3RpY2VfZURHTxh9IAEoAxIXCg9u",
            "dW1fbm90aWNlX2VNTEQYfiABKAMSFwoPbnVtX25vdGljZV9nTU5JGH8gASgD",
            "EhcKDm51bV9ub3RpY2VfaVNFGIABIAEoAxIYCg9udW1fbm90aWNlX21DUlkY",
            "gQEgASgDEhgKD251bV9ub3RpY2VfbUVNWBiCASABKAMSGAoPbnVtX25vdGlj",
            "ZV9tSUFYGIMBIAEoAxIYCg9udW1fbm90aWNlX21QUkwYhAEgASgDEhgKD251",
            "bV9ub3RpY2VfbllTRRiFASABKAMSGAoPbnVtX25vdGljZV9uUUJYGIYBIAEo",
            "AxIYCg9udW1fbm90aWNlX25TRFEYhwEgASgDEhgKD251bV9ub3RpY2VfcEhM",
            "WBiIASABKAMSGAoPbnVtX25vdGljZV9zUEhSGIkBIAEoAxIVCgxudW1fZGlz",
            "YWJsZWQYigEgASgDEh0KFG51bV9saXN0ZWRfZmxleF9taXNzGIsBIAEoAxIe",
            "ChVudW1fbm90aWNlX3ByaWNlX21pc3MYjAEgASgDEhsKEm51bV9hZ2dfc2l6",
            "ZV9saW1pdBiNASABKAMSHQoUbnVtX3Jpc2tfZ3JvdXBfbGltaXQYjgEgASgD",
            "EhYKDW51bV9yZXNwb25zZXMYjwEgASgDEhYKDW51bV9mdWxsX3NpemUYkAEg",
            "ASgDEhcKDm51bV9hbGxvY19zaXplGJEBIAEoAxIXCg5udW1fcHJpY2VfbWlz",
            "cxiSASABKAMSFQoMbnVtX3Rvb19sYXRlGJMBIAEoAxIXCg5udW1fb3RoZXJf",
            "bWlzcxiUASABKAMSGgoRbnVtX2RpZF9ub3RfdHJhZGUYlQEgASgDEhMKC21v",
            "ZGlmaWVkX2J5GHMgASgJEjgKC21vZGlmaWVkX2luGHQgASgOMiMuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TeXNFbnZpcm9ubWVudBItCgl0aW1lc3RhbXAYdSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGokBCgRQS2V5Eg0KBWFj",
            "Y250GAogASgJEhMKC2NsaWVudF9maXJtGAsgASgJEiwKBGVrZXkYDyABKAsy",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRIvCglyZXNwX3NpZGUY",
            "DiABKA4yHC5zcGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupBX), global::Spiderrock.Protobuf.ResponderMarkupBX.Parser, new[]{ "Meta", "Pkey", "Ticker", "IsDisabled", "ExpiryMoneyAvail", "TickerMoneyAvail", "TransactFee", "MoneyRate", "IncFeesInResp", "RoundRule", "OpenExpiryMoney", "OpenTickerMoney", "CumFillMoney", "AvgFillRate", "IsDivControlDisabled", "IDays", "IYears", "NumNotices", "NumNoticeSR", "NumNoticeAMEX", "NumNoticeBATS", "NumNoticeBOX", "NumNoticeCBOE", "NumNoticeC2", "NumNoticeEDGO", "NumNoticeEMLD", "NumNoticeGMNI", "NumNoticeISE", "NumNoticeMCRY", "NumNoticeMEMX", "NumNoticeMIAX", "NumNoticeMPRL", "NumNoticeNYSE", "NumNoticeNQBX", "NumNoticeNSDQ", "NumNoticePHLX", "NumNoticeSPHR", "NumDisabled", "NumListedFlexMiss", "NumNoticePriceMiss", "NumAggSizeLimit", "NumRiskGroupLimit", "NumResponses", "NumFullSize", "NumAllocSize", "NumPriceMiss", "NumTooLate", "NumOtherMiss", "NumDidNotTrade", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey), global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey.Parser, new[]{ "Accnt", "ClientFirm", "Ekey", "RespSide" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ResponderMarkupBX : pb::IMessage<ResponderMarkupBX>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResponderMarkupBX> _parser = new pb::MessageParser<ResponderMarkupBX>(() => new ResponderMarkupBX());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResponderMarkupBX> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ResponderMarkupBXReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupBX() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupBX(ResponderMarkupBX other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      isDisabled_ = other.isDisabled_;
      expiryMoneyAvail_ = other.expiryMoneyAvail_;
      tickerMoneyAvail_ = other.tickerMoneyAvail_;
      transactFee_ = other.transactFee_;
      moneyRate_ = other.moneyRate_;
      incFeesInResp_ = other.incFeesInResp_;
      roundRule_ = other.roundRule_;
      openExpiryMoney_ = other.openExpiryMoney_;
      openTickerMoney_ = other.openTickerMoney_;
      cumFillMoney_ = other.cumFillMoney_;
      avgFillRate_ = other.avgFillRate_;
      isDivControlDisabled_ = other.isDivControlDisabled_;
      iDays_ = other.iDays_;
      iYears_ = other.iYears_;
      numNotices_ = other.numNotices_;
      numNoticeSR_ = other.numNoticeSR_;
      numNoticeAMEX_ = other.numNoticeAMEX_;
      numNoticeBATS_ = other.numNoticeBATS_;
      numNoticeBOX_ = other.numNoticeBOX_;
      numNoticeCBOE_ = other.numNoticeCBOE_;
      numNoticeC2_ = other.numNoticeC2_;
      numNoticeEDGO_ = other.numNoticeEDGO_;
      numNoticeEMLD_ = other.numNoticeEMLD_;
      numNoticeGMNI_ = other.numNoticeGMNI_;
      numNoticeISE_ = other.numNoticeISE_;
      numNoticeMCRY_ = other.numNoticeMCRY_;
      numNoticeMEMX_ = other.numNoticeMEMX_;
      numNoticeMIAX_ = other.numNoticeMIAX_;
      numNoticeMPRL_ = other.numNoticeMPRL_;
      numNoticeNYSE_ = other.numNoticeNYSE_;
      numNoticeNQBX_ = other.numNoticeNQBX_;
      numNoticeNSDQ_ = other.numNoticeNSDQ_;
      numNoticePHLX_ = other.numNoticePHLX_;
      numNoticeSPHR_ = other.numNoticeSPHR_;
      numDisabled_ = other.numDisabled_;
      numListedFlexMiss_ = other.numListedFlexMiss_;
      numNoticePriceMiss_ = other.numNoticePriceMiss_;
      numAggSizeLimit_ = other.numAggSizeLimit_;
      numRiskGroupLimit_ = other.numRiskGroupLimit_;
      numResponses_ = other.numResponses_;
      numFullSize_ = other.numFullSize_;
      numAllocSize_ = other.numAllocSize_;
      numPriceMiss_ = other.numPriceMiss_;
      numTooLate_ = other.numTooLate_;
      numOtherMiss_ = other.numOtherMiss_;
      numDidNotTrade_ = other.numDidNotTrade_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponderMarkupBX Clone() {
      return new ResponderMarkupBX(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "is_disabled" field.</summary>
    public const int IsDisabledFieldNumber = 101;
    private global::Spiderrock.Protobuf.YesNo isDisabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if Yes, this auto-responder record is disabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDisabled {
      get { return isDisabled_; }
      set {
        isDisabled_ = value;
      }
    }

    /// <summary>Field number for the "expiry_money_avail" field.</summary>
    public const int ExpiryMoneyAvailFieldNumber = 102;
    private long expiryMoneyAvail_;
    /// <summary>
    /// money available for responding (day total; this ticker/expiry; all strikes) [note: money = (hiStrike - loStrike) * pointValue per BX spread]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpiryMoneyAvail {
      get { return expiryMoneyAvail_; }
      set {
        expiryMoneyAvail_ = value;
      }
    }

    /// <summary>Field number for the "ticker_money_avail" field.</summary>
    public const int TickerMoneyAvailFieldNumber = 103;
    private long tickerMoneyAvail_;
    /// <summary>
    /// money available for responding (day total; this ticker; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TickerMoneyAvail {
      get { return tickerMoneyAvail_; }
      set {
        tickerMoneyAvail_ = value;
      }
    }

    /// <summary>Field number for the "transact_fee" field.</summary>
    public const int TransactFeeFieldNumber = 104;
    private double transactFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TransactFee {
      get { return transactFee_; }
      set {
        transactFee_ = value;
      }
    }

    /// <summary>Field number for the "money_rate" field.</summary>
    public const int MoneyRateFieldNumber = 105;
    private double moneyRate_;
    /// <summary>
    /// 0.00 = no effective lend/borrow value (360 day convention)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MoneyRate {
      get { return moneyRate_; }
      set {
        moneyRate_ = value;
      }
    }

    /// <summary>Field number for the "inc_fees_in_resp" field.</summary>
    public const int IncFeesInRespFieldNumber = 106;
    private global::Spiderrock.Protobuf.YesNo incFeesInResp_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// include all estimated responder fees in final response price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IncFeesInResp {
      get { return incFeesInResp_; }
      set {
        incFeesInResp_ = value;
      }
    }

    /// <summary>Field number for the "round_rule" field.</summary>
    public const int RoundRuleFieldNumber = 107;
    private global::Spiderrock.Protobuf.RoundRule roundRule_ = global::Spiderrock.Protobuf.RoundRule.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RoundRule RoundRule {
      get { return roundRule_; }
      set {
        roundRule_ = value;
      }
    }

    /// <summary>Field number for the "open_expiry_money" field.</summary>
    public const int OpenExpiryMoneyFieldNumber = 108;
    private int openExpiryMoney_;
    /// <summary>
    /// remaining synthetics (100 share units) available for responding (day total; this ticker/expiry; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenExpiryMoney {
      get { return openExpiryMoney_; }
      set {
        openExpiryMoney_ = value;
      }
    }

    /// <summary>Field number for the "open_ticker_money" field.</summary>
    public const int OpenTickerMoneyFieldNumber = 109;
    private int openTickerMoney_;
    /// <summary>
    /// remaining synthetics (100 share units) available for responding (day total; this ticker; all strikes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenTickerMoney {
      get { return openTickerMoney_; }
      set {
        openTickerMoney_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_money" field.</summary>
    public const int CumFillMoneyFieldNumber = 110;
    private double cumFillMoney_;
    /// <summary>
    /// cumulative fill money (credit/debit) (this expiry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CumFillMoney {
      get { return cumFillMoney_; }
      set {
        cumFillMoney_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_rate" field.</summary>
    public const int AvgFillRateFieldNumber = 111;
    private double avgFillRate_;
    /// <summary>
    /// avg fill effective moneyRate (this expiry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillRate {
      get { return avgFillRate_; }
      set {
        avgFillRate_ = value;
      }
    }

    /// <summary>Field number for the "is_div_control_disabled" field.</summary>
    public const int IsDivControlDisabledFieldNumber = 112;
    private global::Spiderrock.Protobuf.YesNo isDivControlDisabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// yes if dividend control above is triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDivControlDisabled {
      get { return isDivControlDisabled_; }
      set {
        isDivControlDisabled_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 113;
    private double iDays_;
    /// <summary>
    /// iDays = effective interest days [SR supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "i_years" field.</summary>
    public const int IYearsFieldNumber = 114;
    private double iYears_;
    /// <summary>
    /// iYears = iDays / 360.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IYears {
      get { return iYears_; }
      set {
        iYears_ = value;
      }
    }

    /// <summary>Field number for the "num_notices" field.</summary>
    public const int NumNoticesFieldNumber = 118;
    private long numNotices_;
    /// <summary>
    /// number of notices that match response bucket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNotices {
      get { return numNotices_; }
      set {
        numNotices_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_sR" field.</summary>
    public const int NumNoticeSRFieldNumber = 119;
    private long numNoticeSR_;
    /// <summary>
    /// number of SR auction numNotices
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeSR {
      get { return numNoticeSR_; }
      set {
        numNoticeSR_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_aMEX" field.</summary>
    public const int NumNoticeAMEXFieldNumber = 120;
    private long numNoticeAMEX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeAMEX {
      get { return numNoticeAMEX_; }
      set {
        numNoticeAMEX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_bATS" field.</summary>
    public const int NumNoticeBATSFieldNumber = 121;
    private long numNoticeBATS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeBATS {
      get { return numNoticeBATS_; }
      set {
        numNoticeBATS_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_bOX" field.</summary>
    public const int NumNoticeBOXFieldNumber = 122;
    private long numNoticeBOX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeBOX {
      get { return numNoticeBOX_; }
      set {
        numNoticeBOX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_cBOE" field.</summary>
    public const int NumNoticeCBOEFieldNumber = 123;
    private long numNoticeCBOE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeCBOE {
      get { return numNoticeCBOE_; }
      set {
        numNoticeCBOE_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_c2" field.</summary>
    public const int NumNoticeC2FieldNumber = 124;
    private long numNoticeC2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeC2 {
      get { return numNoticeC2_; }
      set {
        numNoticeC2_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_eDGO" field.</summary>
    public const int NumNoticeEDGOFieldNumber = 125;
    private long numNoticeEDGO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeEDGO {
      get { return numNoticeEDGO_; }
      set {
        numNoticeEDGO_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_eMLD" field.</summary>
    public const int NumNoticeEMLDFieldNumber = 126;
    private long numNoticeEMLD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeEMLD {
      get { return numNoticeEMLD_; }
      set {
        numNoticeEMLD_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_gMNI" field.</summary>
    public const int NumNoticeGMNIFieldNumber = 127;
    private long numNoticeGMNI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeGMNI {
      get { return numNoticeGMNI_; }
      set {
        numNoticeGMNI_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_iSE" field.</summary>
    public const int NumNoticeISEFieldNumber = 128;
    private long numNoticeISE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeISE {
      get { return numNoticeISE_; }
      set {
        numNoticeISE_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_mCRY" field.</summary>
    public const int NumNoticeMCRYFieldNumber = 129;
    private long numNoticeMCRY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeMCRY {
      get { return numNoticeMCRY_; }
      set {
        numNoticeMCRY_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_mEMX" field.</summary>
    public const int NumNoticeMEMXFieldNumber = 130;
    private long numNoticeMEMX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeMEMX {
      get { return numNoticeMEMX_; }
      set {
        numNoticeMEMX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_mIAX" field.</summary>
    public const int NumNoticeMIAXFieldNumber = 131;
    private long numNoticeMIAX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeMIAX {
      get { return numNoticeMIAX_; }
      set {
        numNoticeMIAX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_mPRL" field.</summary>
    public const int NumNoticeMPRLFieldNumber = 132;
    private long numNoticeMPRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeMPRL {
      get { return numNoticeMPRL_; }
      set {
        numNoticeMPRL_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_nYSE" field.</summary>
    public const int NumNoticeNYSEFieldNumber = 133;
    private long numNoticeNYSE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeNYSE {
      get { return numNoticeNYSE_; }
      set {
        numNoticeNYSE_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_nQBX" field.</summary>
    public const int NumNoticeNQBXFieldNumber = 134;
    private long numNoticeNQBX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeNQBX {
      get { return numNoticeNQBX_; }
      set {
        numNoticeNQBX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_nSDQ" field.</summary>
    public const int NumNoticeNSDQFieldNumber = 135;
    private long numNoticeNSDQ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeNSDQ {
      get { return numNoticeNSDQ_; }
      set {
        numNoticeNSDQ_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_pHLX" field.</summary>
    public const int NumNoticePHLXFieldNumber = 136;
    private long numNoticePHLX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticePHLX {
      get { return numNoticePHLX_; }
      set {
        numNoticePHLX_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_sPHR" field.</summary>
    public const int NumNoticeSPHRFieldNumber = 137;
    private long numNoticeSPHR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticeSPHR {
      get { return numNoticeSPHR_; }
      set {
        numNoticeSPHR_ = value;
      }
    }

    /// <summary>Field number for the "num_disabled" field.</summary>
    public const int NumDisabledFieldNumber = 138;
    private long numDisabled_;
    /// <summary>
    /// number skipped from isDisabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumDisabled {
      get { return numDisabled_; }
      set {
        numDisabled_ = value;
      }
    }

    /// <summary>Field number for the "num_listed_flex_miss" field.</summary>
    public const int NumListedFlexMissFieldNumber = 139;
    private long numListedFlexMiss_;
    /// <summary>
    /// number skipped from flex/listed filter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumListedFlexMiss {
      get { return numListedFlexMiss_; }
      set {
        numListedFlexMiss_ = value;
      }
    }

    /// <summary>Field number for the "num_notice_price_miss" field.</summary>
    public const int NumNoticePriceMissFieldNumber = 140;
    private long numNoticePriceMiss_;
    /// <summary>
    /// number skipped from limit price filter (exchange only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumNoticePriceMiss {
      get { return numNoticePriceMiss_; }
      set {
        numNoticePriceMiss_ = value;
      }
    }

    /// <summary>Field number for the "num_agg_size_limit" field.</summary>
    public const int NumAggSizeLimitFieldNumber = 141;
    private long numAggSizeLimit_;
    /// <summary>
    /// number skipped from aggregate contract/vega size limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumAggSizeLimit {
      get { return numAggSizeLimit_; }
      set {
        numAggSizeLimit_ = value;
      }
    }

    /// <summary>Field number for the "num_risk_group_limit" field.</summary>
    public const int NumRiskGroupLimitFieldNumber = 142;
    private long numRiskGroupLimit_;
    /// <summary>
    /// number skipped from riskGroup limits
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumRiskGroupLimit {
      get { return numRiskGroupLimit_; }
      set {
        numRiskGroupLimit_ = value;
      }
    }

    /// <summary>Field number for the "num_responses" field.</summary>
    public const int NumResponsesFieldNumber = 143;
    private long numResponses_;
    /// <summary>
    /// number of response attempts (number of parentOrders/NoticeExecReports)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumResponses {
      get { return numResponses_; }
      set {
        numResponses_ = value;
      }
    }

    /// <summary>Field number for the "num_full_size" field.</summary>
    public const int NumFullSizeFieldNumber = 144;
    private long numFullSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumFullSize {
      get { return numFullSize_; }
      set {
        numFullSize_ = value;
      }
    }

    /// <summary>Field number for the "num_alloc_size" field.</summary>
    public const int NumAllocSizeFieldNumber = 145;
    private long numAllocSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumAllocSize {
      get { return numAllocSize_; }
      set {
        numAllocSize_ = value;
      }
    }

    /// <summary>Field number for the "num_price_miss" field.</summary>
    public const int NumPriceMissFieldNumber = 146;
    private long numPriceMiss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumPriceMiss {
      get { return numPriceMiss_; }
      set {
        numPriceMiss_ = value;
      }
    }

    /// <summary>Field number for the "num_too_late" field.</summary>
    public const int NumTooLateFieldNumber = 147;
    private long numTooLate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumTooLate {
      get { return numTooLate_; }
      set {
        numTooLate_ = value;
      }
    }

    /// <summary>Field number for the "num_other_miss" field.</summary>
    public const int NumOtherMissFieldNumber = 148;
    private long numOtherMiss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumOtherMiss {
      get { return numOtherMiss_; }
      set {
        numOtherMiss_ = value;
      }
    }

    /// <summary>Field number for the "num_did_not_trade" field.</summary>
    public const int NumDidNotTradeFieldNumber = 149;
    private long numDidNotTrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumDidNotTrade {
      get { return numDidNotTrade_; }
      set {
        numDidNotTrade_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 115;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 116;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 117;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResponderMarkupBX);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResponderMarkupBX other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (IsDisabled != other.IsDisabled) return false;
      if (ExpiryMoneyAvail != other.ExpiryMoneyAvail) return false;
      if (TickerMoneyAvail != other.TickerMoneyAvail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TransactFee, other.TransactFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoneyRate, other.MoneyRate)) return false;
      if (IncFeesInResp != other.IncFeesInResp) return false;
      if (RoundRule != other.RoundRule) return false;
      if (OpenExpiryMoney != other.OpenExpiryMoney) return false;
      if (OpenTickerMoney != other.OpenTickerMoney) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CumFillMoney, other.CumFillMoney)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillRate, other.AvgFillRate)) return false;
      if (IsDivControlDisabled != other.IsDivControlDisabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IDays, other.IDays)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IYears, other.IYears)) return false;
      if (NumNotices != other.NumNotices) return false;
      if (NumNoticeSR != other.NumNoticeSR) return false;
      if (NumNoticeAMEX != other.NumNoticeAMEX) return false;
      if (NumNoticeBATS != other.NumNoticeBATS) return false;
      if (NumNoticeBOX != other.NumNoticeBOX) return false;
      if (NumNoticeCBOE != other.NumNoticeCBOE) return false;
      if (NumNoticeC2 != other.NumNoticeC2) return false;
      if (NumNoticeEDGO != other.NumNoticeEDGO) return false;
      if (NumNoticeEMLD != other.NumNoticeEMLD) return false;
      if (NumNoticeGMNI != other.NumNoticeGMNI) return false;
      if (NumNoticeISE != other.NumNoticeISE) return false;
      if (NumNoticeMCRY != other.NumNoticeMCRY) return false;
      if (NumNoticeMEMX != other.NumNoticeMEMX) return false;
      if (NumNoticeMIAX != other.NumNoticeMIAX) return false;
      if (NumNoticeMPRL != other.NumNoticeMPRL) return false;
      if (NumNoticeNYSE != other.NumNoticeNYSE) return false;
      if (NumNoticeNQBX != other.NumNoticeNQBX) return false;
      if (NumNoticeNSDQ != other.NumNoticeNSDQ) return false;
      if (NumNoticePHLX != other.NumNoticePHLX) return false;
      if (NumNoticeSPHR != other.NumNoticeSPHR) return false;
      if (NumDisabled != other.NumDisabled) return false;
      if (NumListedFlexMiss != other.NumListedFlexMiss) return false;
      if (NumNoticePriceMiss != other.NumNoticePriceMiss) return false;
      if (NumAggSizeLimit != other.NumAggSizeLimit) return false;
      if (NumRiskGroupLimit != other.NumRiskGroupLimit) return false;
      if (NumResponses != other.NumResponses) return false;
      if (NumFullSize != other.NumFullSize) return false;
      if (NumAllocSize != other.NumAllocSize) return false;
      if (NumPriceMiss != other.NumPriceMiss) return false;
      if (NumTooLate != other.NumTooLate) return false;
      if (NumOtherMiss != other.NumOtherMiss) return false;
      if (NumDidNotTrade != other.NumDidNotTrade) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDisabled.GetHashCode();
      if (ExpiryMoneyAvail != 0L) hash ^= ExpiryMoneyAvail.GetHashCode();
      if (TickerMoneyAvail != 0L) hash ^= TickerMoneyAvail.GetHashCode();
      if (TransactFee != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TransactFee);
      if (MoneyRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoneyRate);
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IncFeesInResp.GetHashCode();
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) hash ^= RoundRule.GetHashCode();
      if (OpenExpiryMoney != 0) hash ^= OpenExpiryMoney.GetHashCode();
      if (OpenTickerMoney != 0) hash ^= OpenTickerMoney.GetHashCode();
      if (CumFillMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CumFillMoney);
      if (AvgFillRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillRate);
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDivControlDisabled.GetHashCode();
      if (IDays != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IDays);
      if (IYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IYears);
      if (NumNotices != 0L) hash ^= NumNotices.GetHashCode();
      if (NumNoticeSR != 0L) hash ^= NumNoticeSR.GetHashCode();
      if (NumNoticeAMEX != 0L) hash ^= NumNoticeAMEX.GetHashCode();
      if (NumNoticeBATS != 0L) hash ^= NumNoticeBATS.GetHashCode();
      if (NumNoticeBOX != 0L) hash ^= NumNoticeBOX.GetHashCode();
      if (NumNoticeCBOE != 0L) hash ^= NumNoticeCBOE.GetHashCode();
      if (NumNoticeC2 != 0L) hash ^= NumNoticeC2.GetHashCode();
      if (NumNoticeEDGO != 0L) hash ^= NumNoticeEDGO.GetHashCode();
      if (NumNoticeEMLD != 0L) hash ^= NumNoticeEMLD.GetHashCode();
      if (NumNoticeGMNI != 0L) hash ^= NumNoticeGMNI.GetHashCode();
      if (NumNoticeISE != 0L) hash ^= NumNoticeISE.GetHashCode();
      if (NumNoticeMCRY != 0L) hash ^= NumNoticeMCRY.GetHashCode();
      if (NumNoticeMEMX != 0L) hash ^= NumNoticeMEMX.GetHashCode();
      if (NumNoticeMIAX != 0L) hash ^= NumNoticeMIAX.GetHashCode();
      if (NumNoticeMPRL != 0L) hash ^= NumNoticeMPRL.GetHashCode();
      if (NumNoticeNYSE != 0L) hash ^= NumNoticeNYSE.GetHashCode();
      if (NumNoticeNQBX != 0L) hash ^= NumNoticeNQBX.GetHashCode();
      if (NumNoticeNSDQ != 0L) hash ^= NumNoticeNSDQ.GetHashCode();
      if (NumNoticePHLX != 0L) hash ^= NumNoticePHLX.GetHashCode();
      if (NumNoticeSPHR != 0L) hash ^= NumNoticeSPHR.GetHashCode();
      if (NumDisabled != 0L) hash ^= NumDisabled.GetHashCode();
      if (NumListedFlexMiss != 0L) hash ^= NumListedFlexMiss.GetHashCode();
      if (NumNoticePriceMiss != 0L) hash ^= NumNoticePriceMiss.GetHashCode();
      if (NumAggSizeLimit != 0L) hash ^= NumAggSizeLimit.GetHashCode();
      if (NumRiskGroupLimit != 0L) hash ^= NumRiskGroupLimit.GetHashCode();
      if (NumResponses != 0L) hash ^= NumResponses.GetHashCode();
      if (NumFullSize != 0L) hash ^= NumFullSize.GetHashCode();
      if (NumAllocSize != 0L) hash ^= NumAllocSize.GetHashCode();
      if (NumPriceMiss != 0L) hash ^= NumPriceMiss.GetHashCode();
      if (NumTooLate != 0L) hash ^= NumTooLate.GetHashCode();
      if (NumOtherMiss != 0L) hash ^= NumOtherMiss.GetHashCode();
      if (NumDidNotTrade != 0L) hash ^= NumDidNotTrade.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (ExpiryMoneyAvail != 0L) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(ExpiryMoneyAvail);
      }
      if (TickerMoneyAvail != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(TickerMoneyAvail);
      }
      if (TransactFee != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(TransactFee);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(201, 6);
        output.WriteDouble(MoneyRate);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) RoundRule);
      }
      if (OpenExpiryMoney != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(OpenExpiryMoney);
      }
      if (OpenTickerMoney != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(OpenTickerMoney);
      }
      if (CumFillMoney != 0D) {
        output.WriteRawTag(241, 6);
        output.WriteDouble(CumFillMoney);
      }
      if (AvgFillRate != 0D) {
        output.WriteRawTag(249, 6);
        output.WriteDouble(AvgFillRate);
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) IsDivControlDisabled);
      }
      if (IDays != 0D) {
        output.WriteRawTag(137, 7);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(145, 7);
        output.WriteDouble(IYears);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(Timestamp);
      }
      if (NumNotices != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(NumNotices);
      }
      if (NumNoticeSR != 0L) {
        output.WriteRawTag(184, 7);
        output.WriteInt64(NumNoticeSR);
      }
      if (NumNoticeAMEX != 0L) {
        output.WriteRawTag(192, 7);
        output.WriteInt64(NumNoticeAMEX);
      }
      if (NumNoticeBATS != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(NumNoticeBATS);
      }
      if (NumNoticeBOX != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(NumNoticeBOX);
      }
      if (NumNoticeCBOE != 0L) {
        output.WriteRawTag(216, 7);
        output.WriteInt64(NumNoticeCBOE);
      }
      if (NumNoticeC2 != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(NumNoticeC2);
      }
      if (NumNoticeEDGO != 0L) {
        output.WriteRawTag(232, 7);
        output.WriteInt64(NumNoticeEDGO);
      }
      if (NumNoticeEMLD != 0L) {
        output.WriteRawTag(240, 7);
        output.WriteInt64(NumNoticeEMLD);
      }
      if (NumNoticeGMNI != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(NumNoticeGMNI);
      }
      if (NumNoticeISE != 0L) {
        output.WriteRawTag(128, 8);
        output.WriteInt64(NumNoticeISE);
      }
      if (NumNoticeMCRY != 0L) {
        output.WriteRawTag(136, 8);
        output.WriteInt64(NumNoticeMCRY);
      }
      if (NumNoticeMEMX != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NumNoticeMEMX);
      }
      if (NumNoticeMIAX != 0L) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(NumNoticeMIAX);
      }
      if (NumNoticeMPRL != 0L) {
        output.WriteRawTag(160, 8);
        output.WriteInt64(NumNoticeMPRL);
      }
      if (NumNoticeNYSE != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(NumNoticeNYSE);
      }
      if (NumNoticeNQBX != 0L) {
        output.WriteRawTag(176, 8);
        output.WriteInt64(NumNoticeNQBX);
      }
      if (NumNoticeNSDQ != 0L) {
        output.WriteRawTag(184, 8);
        output.WriteInt64(NumNoticeNSDQ);
      }
      if (NumNoticePHLX != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(NumNoticePHLX);
      }
      if (NumNoticeSPHR != 0L) {
        output.WriteRawTag(200, 8);
        output.WriteInt64(NumNoticeSPHR);
      }
      if (NumDisabled != 0L) {
        output.WriteRawTag(208, 8);
        output.WriteInt64(NumDisabled);
      }
      if (NumListedFlexMiss != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(NumListedFlexMiss);
      }
      if (NumNoticePriceMiss != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(NumNoticePriceMiss);
      }
      if (NumAggSizeLimit != 0L) {
        output.WriteRawTag(232, 8);
        output.WriteInt64(NumAggSizeLimit);
      }
      if (NumRiskGroupLimit != 0L) {
        output.WriteRawTag(240, 8);
        output.WriteInt64(NumRiskGroupLimit);
      }
      if (NumResponses != 0L) {
        output.WriteRawTag(248, 8);
        output.WriteInt64(NumResponses);
      }
      if (NumFullSize != 0L) {
        output.WriteRawTag(128, 9);
        output.WriteInt64(NumFullSize);
      }
      if (NumAllocSize != 0L) {
        output.WriteRawTag(136, 9);
        output.WriteInt64(NumAllocSize);
      }
      if (NumPriceMiss != 0L) {
        output.WriteRawTag(144, 9);
        output.WriteInt64(NumPriceMiss);
      }
      if (NumTooLate != 0L) {
        output.WriteRawTag(152, 9);
        output.WriteInt64(NumTooLate);
      }
      if (NumOtherMiss != 0L) {
        output.WriteRawTag(160, 9);
        output.WriteInt64(NumOtherMiss);
      }
      if (NumDidNotTrade != 0L) {
        output.WriteRawTag(168, 9);
        output.WriteInt64(NumDidNotTrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) IsDisabled);
      }
      if (ExpiryMoneyAvail != 0L) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(ExpiryMoneyAvail);
      }
      if (TickerMoneyAvail != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(TickerMoneyAvail);
      }
      if (TransactFee != 0D) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(TransactFee);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(201, 6);
        output.WriteDouble(MoneyRate);
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) RoundRule);
      }
      if (OpenExpiryMoney != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(OpenExpiryMoney);
      }
      if (OpenTickerMoney != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(OpenTickerMoney);
      }
      if (CumFillMoney != 0D) {
        output.WriteRawTag(241, 6);
        output.WriteDouble(CumFillMoney);
      }
      if (AvgFillRate != 0D) {
        output.WriteRawTag(249, 6);
        output.WriteDouble(AvgFillRate);
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) IsDivControlDisabled);
      }
      if (IDays != 0D) {
        output.WriteRawTag(137, 7);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(145, 7);
        output.WriteDouble(IYears);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(Timestamp);
      }
      if (NumNotices != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(NumNotices);
      }
      if (NumNoticeSR != 0L) {
        output.WriteRawTag(184, 7);
        output.WriteInt64(NumNoticeSR);
      }
      if (NumNoticeAMEX != 0L) {
        output.WriteRawTag(192, 7);
        output.WriteInt64(NumNoticeAMEX);
      }
      if (NumNoticeBATS != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(NumNoticeBATS);
      }
      if (NumNoticeBOX != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(NumNoticeBOX);
      }
      if (NumNoticeCBOE != 0L) {
        output.WriteRawTag(216, 7);
        output.WriteInt64(NumNoticeCBOE);
      }
      if (NumNoticeC2 != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(NumNoticeC2);
      }
      if (NumNoticeEDGO != 0L) {
        output.WriteRawTag(232, 7);
        output.WriteInt64(NumNoticeEDGO);
      }
      if (NumNoticeEMLD != 0L) {
        output.WriteRawTag(240, 7);
        output.WriteInt64(NumNoticeEMLD);
      }
      if (NumNoticeGMNI != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(NumNoticeGMNI);
      }
      if (NumNoticeISE != 0L) {
        output.WriteRawTag(128, 8);
        output.WriteInt64(NumNoticeISE);
      }
      if (NumNoticeMCRY != 0L) {
        output.WriteRawTag(136, 8);
        output.WriteInt64(NumNoticeMCRY);
      }
      if (NumNoticeMEMX != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NumNoticeMEMX);
      }
      if (NumNoticeMIAX != 0L) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(NumNoticeMIAX);
      }
      if (NumNoticeMPRL != 0L) {
        output.WriteRawTag(160, 8);
        output.WriteInt64(NumNoticeMPRL);
      }
      if (NumNoticeNYSE != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(NumNoticeNYSE);
      }
      if (NumNoticeNQBX != 0L) {
        output.WriteRawTag(176, 8);
        output.WriteInt64(NumNoticeNQBX);
      }
      if (NumNoticeNSDQ != 0L) {
        output.WriteRawTag(184, 8);
        output.WriteInt64(NumNoticeNSDQ);
      }
      if (NumNoticePHLX != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(NumNoticePHLX);
      }
      if (NumNoticeSPHR != 0L) {
        output.WriteRawTag(200, 8);
        output.WriteInt64(NumNoticeSPHR);
      }
      if (NumDisabled != 0L) {
        output.WriteRawTag(208, 8);
        output.WriteInt64(NumDisabled);
      }
      if (NumListedFlexMiss != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(NumListedFlexMiss);
      }
      if (NumNoticePriceMiss != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(NumNoticePriceMiss);
      }
      if (NumAggSizeLimit != 0L) {
        output.WriteRawTag(232, 8);
        output.WriteInt64(NumAggSizeLimit);
      }
      if (NumRiskGroupLimit != 0L) {
        output.WriteRawTag(240, 8);
        output.WriteInt64(NumRiskGroupLimit);
      }
      if (NumResponses != 0L) {
        output.WriteRawTag(248, 8);
        output.WriteInt64(NumResponses);
      }
      if (NumFullSize != 0L) {
        output.WriteRawTag(128, 9);
        output.WriteInt64(NumFullSize);
      }
      if (NumAllocSize != 0L) {
        output.WriteRawTag(136, 9);
        output.WriteInt64(NumAllocSize);
      }
      if (NumPriceMiss != 0L) {
        output.WriteRawTag(144, 9);
        output.WriteInt64(NumPriceMiss);
      }
      if (NumTooLate != 0L) {
        output.WriteRawTag(152, 9);
        output.WriteInt64(NumTooLate);
      }
      if (NumOtherMiss != 0L) {
        output.WriteRawTag(160, 9);
        output.WriteInt64(NumOtherMiss);
      }
      if (NumDidNotTrade != 0L) {
        output.WriteRawTag(168, 9);
        output.WriteInt64(NumDidNotTrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDisabled);
      }
      if (ExpiryMoneyAvail != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExpiryMoneyAvail);
      }
      if (TickerMoneyAvail != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TickerMoneyAvail);
      }
      if (TransactFee != 0D) {
        size += 2 + 8;
      }
      if (MoneyRate != 0D) {
        size += 2 + 8;
      }
      if (IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncFeesInResp);
      }
      if (RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoundRule);
      }
      if (OpenExpiryMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenExpiryMoney);
      }
      if (OpenTickerMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenTickerMoney);
      }
      if (CumFillMoney != 0D) {
        size += 2 + 8;
      }
      if (AvgFillRate != 0D) {
        size += 2 + 8;
      }
      if (IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDivControlDisabled);
      }
      if (IDays != 0D) {
        size += 2 + 8;
      }
      if (IYears != 0D) {
        size += 2 + 8;
      }
      if (NumNotices != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNotices);
      }
      if (NumNoticeSR != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeSR);
      }
      if (NumNoticeAMEX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeAMEX);
      }
      if (NumNoticeBATS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeBATS);
      }
      if (NumNoticeBOX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeBOX);
      }
      if (NumNoticeCBOE != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeCBOE);
      }
      if (NumNoticeC2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeC2);
      }
      if (NumNoticeEDGO != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeEDGO);
      }
      if (NumNoticeEMLD != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeEMLD);
      }
      if (NumNoticeGMNI != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeGMNI);
      }
      if (NumNoticeISE != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeISE);
      }
      if (NumNoticeMCRY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeMCRY);
      }
      if (NumNoticeMEMX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeMEMX);
      }
      if (NumNoticeMIAX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeMIAX);
      }
      if (NumNoticeMPRL != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeMPRL);
      }
      if (NumNoticeNYSE != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeNYSE);
      }
      if (NumNoticeNQBX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeNQBX);
      }
      if (NumNoticeNSDQ != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeNSDQ);
      }
      if (NumNoticePHLX != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticePHLX);
      }
      if (NumNoticeSPHR != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticeSPHR);
      }
      if (NumDisabled != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumDisabled);
      }
      if (NumListedFlexMiss != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumListedFlexMiss);
      }
      if (NumNoticePriceMiss != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumNoticePriceMiss);
      }
      if (NumAggSizeLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumAggSizeLimit);
      }
      if (NumRiskGroupLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumRiskGroupLimit);
      }
      if (NumResponses != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumResponses);
      }
      if (NumFullSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumFullSize);
      }
      if (NumAllocSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumAllocSize);
      }
      if (NumPriceMiss != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumPriceMiss);
      }
      if (NumTooLate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumTooLate);
      }
      if (NumOtherMiss != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumOtherMiss);
      }
      if (NumDidNotTrade != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumDidNotTrade);
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResponderMarkupBX other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.IsDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDisabled = other.IsDisabled;
      }
      if (other.ExpiryMoneyAvail != 0L) {
        ExpiryMoneyAvail = other.ExpiryMoneyAvail;
      }
      if (other.TickerMoneyAvail != 0L) {
        TickerMoneyAvail = other.TickerMoneyAvail;
      }
      if (other.TransactFee != 0D) {
        TransactFee = other.TransactFee;
      }
      if (other.MoneyRate != 0D) {
        MoneyRate = other.MoneyRate;
      }
      if (other.IncFeesInResp != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IncFeesInResp = other.IncFeesInResp;
      }
      if (other.RoundRule != global::Spiderrock.Protobuf.RoundRule.Unspecified) {
        RoundRule = other.RoundRule;
      }
      if (other.OpenExpiryMoney != 0) {
        OpenExpiryMoney = other.OpenExpiryMoney;
      }
      if (other.OpenTickerMoney != 0) {
        OpenTickerMoney = other.OpenTickerMoney;
      }
      if (other.CumFillMoney != 0D) {
        CumFillMoney = other.CumFillMoney;
      }
      if (other.AvgFillRate != 0D) {
        AvgFillRate = other.AvgFillRate;
      }
      if (other.IsDivControlDisabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDivControlDisabled = other.IsDivControlDisabled;
      }
      if (other.IDays != 0D) {
        IDays = other.IDays;
      }
      if (other.IYears != 0D) {
        IYears = other.IYears;
      }
      if (other.NumNotices != 0L) {
        NumNotices = other.NumNotices;
      }
      if (other.NumNoticeSR != 0L) {
        NumNoticeSR = other.NumNoticeSR;
      }
      if (other.NumNoticeAMEX != 0L) {
        NumNoticeAMEX = other.NumNoticeAMEX;
      }
      if (other.NumNoticeBATS != 0L) {
        NumNoticeBATS = other.NumNoticeBATS;
      }
      if (other.NumNoticeBOX != 0L) {
        NumNoticeBOX = other.NumNoticeBOX;
      }
      if (other.NumNoticeCBOE != 0L) {
        NumNoticeCBOE = other.NumNoticeCBOE;
      }
      if (other.NumNoticeC2 != 0L) {
        NumNoticeC2 = other.NumNoticeC2;
      }
      if (other.NumNoticeEDGO != 0L) {
        NumNoticeEDGO = other.NumNoticeEDGO;
      }
      if (other.NumNoticeEMLD != 0L) {
        NumNoticeEMLD = other.NumNoticeEMLD;
      }
      if (other.NumNoticeGMNI != 0L) {
        NumNoticeGMNI = other.NumNoticeGMNI;
      }
      if (other.NumNoticeISE != 0L) {
        NumNoticeISE = other.NumNoticeISE;
      }
      if (other.NumNoticeMCRY != 0L) {
        NumNoticeMCRY = other.NumNoticeMCRY;
      }
      if (other.NumNoticeMEMX != 0L) {
        NumNoticeMEMX = other.NumNoticeMEMX;
      }
      if (other.NumNoticeMIAX != 0L) {
        NumNoticeMIAX = other.NumNoticeMIAX;
      }
      if (other.NumNoticeMPRL != 0L) {
        NumNoticeMPRL = other.NumNoticeMPRL;
      }
      if (other.NumNoticeNYSE != 0L) {
        NumNoticeNYSE = other.NumNoticeNYSE;
      }
      if (other.NumNoticeNQBX != 0L) {
        NumNoticeNQBX = other.NumNoticeNQBX;
      }
      if (other.NumNoticeNSDQ != 0L) {
        NumNoticeNSDQ = other.NumNoticeNSDQ;
      }
      if (other.NumNoticePHLX != 0L) {
        NumNoticePHLX = other.NumNoticePHLX;
      }
      if (other.NumNoticeSPHR != 0L) {
        NumNoticeSPHR = other.NumNoticeSPHR;
      }
      if (other.NumDisabled != 0L) {
        NumDisabled = other.NumDisabled;
      }
      if (other.NumListedFlexMiss != 0L) {
        NumListedFlexMiss = other.NumListedFlexMiss;
      }
      if (other.NumNoticePriceMiss != 0L) {
        NumNoticePriceMiss = other.NumNoticePriceMiss;
      }
      if (other.NumAggSizeLimit != 0L) {
        NumAggSizeLimit = other.NumAggSizeLimit;
      }
      if (other.NumRiskGroupLimit != 0L) {
        NumRiskGroupLimit = other.NumRiskGroupLimit;
      }
      if (other.NumResponses != 0L) {
        NumResponses = other.NumResponses;
      }
      if (other.NumFullSize != 0L) {
        NumFullSize = other.NumFullSize;
      }
      if (other.NumAllocSize != 0L) {
        NumAllocSize = other.NumAllocSize;
      }
      if (other.NumPriceMiss != 0L) {
        NumPriceMiss = other.NumPriceMiss;
      }
      if (other.NumTooLate != 0L) {
        NumTooLate = other.NumTooLate;
      }
      if (other.NumOtherMiss != 0L) {
        NumOtherMiss = other.NumOtherMiss;
      }
      if (other.NumDidNotTrade != 0L) {
        NumDidNotTrade = other.NumDidNotTrade;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            ExpiryMoneyAvail = input.ReadInt64();
            break;
          }
          case 824: {
            TickerMoneyAvail = input.ReadInt64();
            break;
          }
          case 833: {
            TransactFee = input.ReadDouble();
            break;
          }
          case 841: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 848: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 856: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 864: {
            OpenExpiryMoney = input.ReadInt32();
            break;
          }
          case 872: {
            OpenTickerMoney = input.ReadInt32();
            break;
          }
          case 881: {
            CumFillMoney = input.ReadDouble();
            break;
          }
          case 889: {
            AvgFillRate = input.ReadDouble();
            break;
          }
          case 896: {
            IsDivControlDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 905: {
            IDays = input.ReadDouble();
            break;
          }
          case 913: {
            IYears = input.ReadDouble();
            break;
          }
          case 922: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 928: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 938: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 944: {
            NumNotices = input.ReadInt64();
            break;
          }
          case 952: {
            NumNoticeSR = input.ReadInt64();
            break;
          }
          case 960: {
            NumNoticeAMEX = input.ReadInt64();
            break;
          }
          case 968: {
            NumNoticeBATS = input.ReadInt64();
            break;
          }
          case 976: {
            NumNoticeBOX = input.ReadInt64();
            break;
          }
          case 984: {
            NumNoticeCBOE = input.ReadInt64();
            break;
          }
          case 992: {
            NumNoticeC2 = input.ReadInt64();
            break;
          }
          case 1000: {
            NumNoticeEDGO = input.ReadInt64();
            break;
          }
          case 1008: {
            NumNoticeEMLD = input.ReadInt64();
            break;
          }
          case 1016: {
            NumNoticeGMNI = input.ReadInt64();
            break;
          }
          case 1024: {
            NumNoticeISE = input.ReadInt64();
            break;
          }
          case 1032: {
            NumNoticeMCRY = input.ReadInt64();
            break;
          }
          case 1040: {
            NumNoticeMEMX = input.ReadInt64();
            break;
          }
          case 1048: {
            NumNoticeMIAX = input.ReadInt64();
            break;
          }
          case 1056: {
            NumNoticeMPRL = input.ReadInt64();
            break;
          }
          case 1064: {
            NumNoticeNYSE = input.ReadInt64();
            break;
          }
          case 1072: {
            NumNoticeNQBX = input.ReadInt64();
            break;
          }
          case 1080: {
            NumNoticeNSDQ = input.ReadInt64();
            break;
          }
          case 1088: {
            NumNoticePHLX = input.ReadInt64();
            break;
          }
          case 1096: {
            NumNoticeSPHR = input.ReadInt64();
            break;
          }
          case 1104: {
            NumDisabled = input.ReadInt64();
            break;
          }
          case 1112: {
            NumListedFlexMiss = input.ReadInt64();
            break;
          }
          case 1120: {
            NumNoticePriceMiss = input.ReadInt64();
            break;
          }
          case 1128: {
            NumAggSizeLimit = input.ReadInt64();
            break;
          }
          case 1136: {
            NumRiskGroupLimit = input.ReadInt64();
            break;
          }
          case 1144: {
            NumResponses = input.ReadInt64();
            break;
          }
          case 1152: {
            NumFullSize = input.ReadInt64();
            break;
          }
          case 1160: {
            NumAllocSize = input.ReadInt64();
            break;
          }
          case 1168: {
            NumPriceMiss = input.ReadInt64();
            break;
          }
          case 1176: {
            NumTooLate = input.ReadInt64();
            break;
          }
          case 1184: {
            NumOtherMiss = input.ReadInt64();
            break;
          }
          case 1192: {
            NumDidNotTrade = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ResponderMarkupBX.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 808: {
            IsDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 816: {
            ExpiryMoneyAvail = input.ReadInt64();
            break;
          }
          case 824: {
            TickerMoneyAvail = input.ReadInt64();
            break;
          }
          case 833: {
            TransactFee = input.ReadDouble();
            break;
          }
          case 841: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 848: {
            IncFeesInResp = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 856: {
            RoundRule = (global::Spiderrock.Protobuf.RoundRule) input.ReadEnum();
            break;
          }
          case 864: {
            OpenExpiryMoney = input.ReadInt32();
            break;
          }
          case 872: {
            OpenTickerMoney = input.ReadInt32();
            break;
          }
          case 881: {
            CumFillMoney = input.ReadDouble();
            break;
          }
          case 889: {
            AvgFillRate = input.ReadDouble();
            break;
          }
          case 896: {
            IsDivControlDisabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 905: {
            IDays = input.ReadDouble();
            break;
          }
          case 913: {
            IYears = input.ReadDouble();
            break;
          }
          case 922: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 928: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 938: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 944: {
            NumNotices = input.ReadInt64();
            break;
          }
          case 952: {
            NumNoticeSR = input.ReadInt64();
            break;
          }
          case 960: {
            NumNoticeAMEX = input.ReadInt64();
            break;
          }
          case 968: {
            NumNoticeBATS = input.ReadInt64();
            break;
          }
          case 976: {
            NumNoticeBOX = input.ReadInt64();
            break;
          }
          case 984: {
            NumNoticeCBOE = input.ReadInt64();
            break;
          }
          case 992: {
            NumNoticeC2 = input.ReadInt64();
            break;
          }
          case 1000: {
            NumNoticeEDGO = input.ReadInt64();
            break;
          }
          case 1008: {
            NumNoticeEMLD = input.ReadInt64();
            break;
          }
          case 1016: {
            NumNoticeGMNI = input.ReadInt64();
            break;
          }
          case 1024: {
            NumNoticeISE = input.ReadInt64();
            break;
          }
          case 1032: {
            NumNoticeMCRY = input.ReadInt64();
            break;
          }
          case 1040: {
            NumNoticeMEMX = input.ReadInt64();
            break;
          }
          case 1048: {
            NumNoticeMIAX = input.ReadInt64();
            break;
          }
          case 1056: {
            NumNoticeMPRL = input.ReadInt64();
            break;
          }
          case 1064: {
            NumNoticeNYSE = input.ReadInt64();
            break;
          }
          case 1072: {
            NumNoticeNQBX = input.ReadInt64();
            break;
          }
          case 1080: {
            NumNoticeNSDQ = input.ReadInt64();
            break;
          }
          case 1088: {
            NumNoticePHLX = input.ReadInt64();
            break;
          }
          case 1096: {
            NumNoticeSPHR = input.ReadInt64();
            break;
          }
          case 1104: {
            NumDisabled = input.ReadInt64();
            break;
          }
          case 1112: {
            NumListedFlexMiss = input.ReadInt64();
            break;
          }
          case 1120: {
            NumNoticePriceMiss = input.ReadInt64();
            break;
          }
          case 1128: {
            NumAggSizeLimit = input.ReadInt64();
            break;
          }
          case 1136: {
            NumRiskGroupLimit = input.ReadInt64();
            break;
          }
          case 1144: {
            NumResponses = input.ReadInt64();
            break;
          }
          case 1152: {
            NumFullSize = input.ReadInt64();
            break;
          }
          case 1160: {
            NumAllocSize = input.ReadInt64();
            break;
          }
          case 1168: {
            NumPriceMiss = input.ReadInt64();
            break;
          }
          case 1176: {
            NumTooLate = input.ReadInt64();
            break;
          }
          case 1184: {
            NumOtherMiss = input.ReadInt64();
            break;
          }
          case 1192: {
            NumDidNotTrade = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResponderMarkupBX message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ResponderMarkupBX.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          clientFirm_ = other.clientFirm_;
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          respSide_ = other.respSide_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 11;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 15;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "resp_side" field.</summary>
        public const int RespSideFieldNumber = 14;
        private global::Spiderrock.Protobuf.BuySell respSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        /// <summary>
        /// auction responder side (your side) (Buy = Buy/Borrow Cash)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell RespSide {
          get { return respSide_; }
          set {
            respSide_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (ClientFirm != other.ClientFirm) return false;
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (RespSide != other.RespSide) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= RespSide.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RespSide);
          }
          if (ekey_ != null) {
            output.WriteRawTag(122);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ClientFirm);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RespSide);
          }
          if (ekey_ != null) {
            output.WriteRawTag(122);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RespSide);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.RespSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            RespSide = other.RespSide;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 112: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 122: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                ClientFirm = input.ReadString();
                break;
              }
              case 112: {
                RespSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 122: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
