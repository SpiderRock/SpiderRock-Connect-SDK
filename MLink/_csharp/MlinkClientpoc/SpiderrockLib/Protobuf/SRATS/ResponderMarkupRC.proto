syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message ResponderMarkupRC {
    message PKey {
        
        string accnt = 10;
        string client_firm = 11;
        TickerKey root = 12;
        DateKey expiry = 13;
        BuySell resp_side = 14; // auction responder side (your side); Buy = Buy Synthetic (Sell Shares)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    YesNo is_disabled = 101; // if Yes, this auto-responder record is disabled
    int32 expiry_qty_avail = 102; // revcons (contracts) available for responding (day total; this ticker/expiry; all strikes) [note: 1 contract = undPerCn underlier units]
    int32 ticker_qty_avail = 103; // revcons (contracts) available for responding (day total; this ticker; all strikes) [note: 1 contract = undPerCn underlier units]
    double transact_fee = 104; // (+ = you pay) / (- = you receive)
    double stock_rate = 105; // 0.00 = no effective lend/borrow value  (360 day convention)
    double money_rate = 106; // effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365]
    double ddiv_pv = 107; // present value of any expected dividends to expiry
    DivControl div_control = 108; // disable this auto-responder record if SR Dividends exist or are estimates
    YesNo respond_flex = 109; // if not None, much match auction notice containsFlex field
    YesNo inc_fees_in_resp = 110; // include all estimated responder fees in final response price
    RoundRule round_rule = 111;
    int32 open_expiry_qty = 112; // remaining revcons (100 share units) available for responding (day total; this ticker/expiry; all strikes)
    int32 open_ticker_qty = 113; // remaining revcons (100 share units) available for responding (day total; ticker; all strikes)
    int32 cum_fill_qty = 114; // revcons (100 share units) traded (day total; this expiry; all strikes)
    double cum_fill_money = 115; // cumulative fill money (credit/debit) (this expiry)
    double avg_fill_rate = 116; // avg fill effective stock rate (this expiry)
    YesNo is_div_control_disabled = 117; // yes if dividend control above is triggered
    double u_bid = 118; // live stock nbbo bid price [SR Supplied]
    double u_ask = 119; // live stock nbbo ask price [SR Supplied]
    double i_days = 120; // iDays = effective interest days [SR supplied]
    double i_years = 121; // iYears = iDays / 360.0
    double strike = 122; // SR selected strike (standard day strike)
    double rc_eEx_prem = 123; // rcEExPrem = (pRv.price - pRvE.price) - (cRv.price - cRvE.price) [american price - european price] (same model parameters; SR supplied parameters including DDivs; is zero for flex revcons)
    double strike_pv = 124; // strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    double stock_lend_pv = 125; // stockLendPv = uPrc * stockRate * iYears [stockRate supplied above]
    double rev_con_prem = 126; // revConPrem = stockLendPv + strikePv + ddivPv + rcEExPrem (if any) [uPrc + pRv.price - cRv.price] [ddivPv supplied above]
    double eff_rev_con_limit = 127; // effRevConLimit = refConPrem +/- transactFee [lend/borrow]
    double limit_price = 128; // limitPrice = ROUND(effRevConLimit) [this is your response limit]
    double eff_stock_lend_pv = 129; // effStockLendPv = limitPrice - strikePv - ddivPv - rcEExPrem
    double eff_stock_rate = 130; // effStockRate = effStockLendPv / (uPrc * iYears)
    string modified_by = 131; // user who last modified this record
    SysEnvironment modified_in = 132;
    google.protobuf.Timestamp timestamp = 133; // timestamp of last modification
}


