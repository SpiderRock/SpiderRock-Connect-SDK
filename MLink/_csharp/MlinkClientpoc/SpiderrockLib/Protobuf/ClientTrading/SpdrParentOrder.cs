// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrParentOrder.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrParentOrder.proto</summary>
  public static partial class SpdrParentOrderReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrParentOrder.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrParentOrderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJQYXJlbnRPcmRlci5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ip08KD1NwZHJQ",
            "YXJlbnRPcmRlchIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuTWVzc2FnZU1ldGFkYXRhEjcKBHBrZXkYAiABKAsyKS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJQYXJlbnRPcmRlci5QS2V5EjwKD3N5c19lbnZpcm9u",
            "bWVudBhkIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzRW52aXJvbm1l",
            "bnQSMgoKcnVuX3N0YXR1cxhnIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "UnVuU3RhdHVzEj0KEHNwZHJfYWN0aW9uX3R5cGUYaiABKA4yIy5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJBY3Rpb25UeXBlEjkKDHBhcmVudF9zaGFwZRht",
            "IAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck9yZGVyU2hhcGUSGQoR",
            "Y2xpZW50X3NlcV9udW1faW4YcCABKAUSFAoMYWx0X29yZGVyX2lkGHMgASgJ",
            "EhkKEWFsdF9wcmV2X29yZGVyX2lkGHYgASgJEhkKEWFsdF9hdXRvX2hlZGdl",
            "X2lkGHwgASgJEhEKCWFsdF9hY2NudBh/IAEoCRIWCg1hbHRfdXNlcl9uYW1l",
            "GIIBIAEoCRIZChBzcmNfcm91dGluZ19jb2RlGIUBIAEoCRITCgpwYWNrYWdl",
            "X2lkGIgBIAEoAxIwCgdzZWNfa2V5GIsBIAEoCzIeLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuT3B0aW9uS2V5EjMKCHNlY190eXBlGI4BIAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3BkcktleVR5cGUSFgoNc2VjdXJpdHlfZGVzYxiRASAB",
            "KAkSDgoFYWNjbnQYlAEgASgJEhQKC2NsaWVudF9maXJtGJcBIAEoCRI1Cgtz",
            "cGRyX3NvdXJjZRiaASABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJT",
            "b3VyY2USFgoNZ3JvdXBpbmdfY29kZRidASABKAMSFwoOZXhlY19icmtyX2Nv",
            "ZGUYoAEgASgJEhcKDmV4dGVybl9leF9kZXN0GKMBIAEoCRIWCg1leHRlcm5f",
            "cGFyYW1zGKYBIAEoCRIRCghzdHJhdGVneRipASABKAkSEgoJdXNlcl9uYW1l",
            "GKwBIAEoCRI1Cgt1c2VyX3NvdXJjZRiKCCABKA4yHy5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlNwZHJTb3VyY2USLwoKb3JkZXJfZHR0bRiyASABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEjEKCm9yZGVyX3NpZGUYtQEgASgOMhwu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5CdXlTZWxsEhMKCm9yZGVyX3NpemUYuAEg",
            "ASgFEhoKEW9yZGVyX2FjdGl2ZV9zaXplGLsBIAEoBRIeChVjdXJfY3VtX2Zp",
            "bGxfcXVhbnRpdHkYvgEgASgFEjoKFWFkZF9jdW1fZmlsbF9xdWFudGl0eRjB",
            "ASABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEhoKEW1heF9leHBv",
            "c3VyZV9zaXplGMQBIAEoBRIbChJudW1fbWFrZV9leGNoYW5nZXMYxwEgASgF",
            "Ej0KC3B1YmxpY19zaXplGMoBIAEoDjInLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "UHVibGljU2l6ZUhhbmRsaW5nEjkKFGNhbl9vdmVybGFwX2N4bF9yZXBsGM0B",
            "IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SOQoNcHJvZ3Jlc3Nf",
            "cnVsZRjQASABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlByb2dyZXNzUnVs",
            "ZRI/ChBibG9ja192aXNpYmlsaXR5GNMBIAEoDjIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQmxvY2tWaXNpYmlsaXR5EhsKEnByb2dyZXNzX3NsaWNlX2NudBjW",
            "ASABKAUSHQoUcHJvZ3Jlc3NfZXhwb3NlX3RpbWUY2QEgASgFEhsKEnZ3YXBf",
            "cGFydGljaXBhdGlvbhjcASABKAISHQoUbWluX21rdF9vbl9jbG9zZV9wY3QY",
            "3wEgASgFEjcKDHRyaWdnZXJfdHlwZRjiASABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlRyaWdnZXJUeXBlEhYKDXRyaWdnZXJfbGV2ZWwY5QEgASgCEkEK",
            "EWF1Y3Rpb25fcmVzcG9uZGVyGOgBIAEoDjIlLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQXVjdGlvblJlc3BvbmRlchIaChFtYXhfbWFrZV9leGNoX2ZlZRjrASAB",
            "KAISGgoRbWF4X3Rha2VfZXhjaF9mZWUY7gEgASgCEjsKEWluY190YWtlX2V4",
            "Y2hfZmVlGPEBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuSW5jRXhjaEZl",
            "ZRI7ChFpbmNfbWFrZV9leGNoX2ZlZRj0ASABKA4yHy5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkluY0V4Y2hGZWUSOgoObWFrZV9leGNoX3J1bGUY9wEgASgOMiEu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5NYWtlRXhjaFJ1bGUSNQoOY3hsX3VQcmNf",
            "cmFuZ2UY+gEgASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5VUHJjQ3hsEhEK",
            "CG1pbl91QmlkGP0BIAEoAhIRCghtYXhfdUFzaxiAAiABKAISNgoMbWluX21h",
            "eF90eXBlGIMCIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTWluTWF4VHlw",
            "ZRIWCg1taW5fb3B0aW9uX3B4GIYCIAEoAhIZChBtYXhfY2hpbGRfb3JkZXJz",
            "GIkCIAEoBRISCglleGNoX21hc2sYjAIgASgNEjwKD3NwZHJfc3RhZ2VfdHlw",
            "ZRiPAiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJTdGFnZVR5cGUS",
            "OwoObWFya2V0X3Nlc3Npb24YiwggASgOMiIuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NYXJrZXRTZXNzaW9uEi8KCnN0YXJ0X2R0dG0YlQIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIXCg5vcmRlcl9kdXJhdGlvbhiYAiABKAUS",
            "GAoPYWN0aXZlX2R1cmF0aW9uGIwIIAEoBRIzCg5nb29kX3RpbGxfZHR0bRib",
            "AiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKCnN0YXJ0X3R5",
            "cGUYngIgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5TdGFydFR5cGUSGQoQ",
            "dHJpZ2dlcl9ncm91cF9pZBihAiABKAMSGgoRdHJpZ2dlcl90aW1lc3RhbXAY",
            "pAIgASgDEkgKFXBhcmVudF9vcmRlcl9oYW5kbGluZxiqAiABKA4yKC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlBhcmVudE9yZGVySGFuZGxpbmcSTAoXcGFyZW50",
            "X2JhbGFuY2VfaGFuZGxpbmcYrQIgASgOMiouc3BpZGVycm9jay5wcm90b2J1",
            "Zi5QYXJlbnRCYWxhbmNlSGFuZGxpbmcSPQoQb3JkZXJfbGltaXRfdHlwZRiw",
            "AiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJMaW1pdFR5cGUSPgoQ",
            "dGFrZV9saW1pdF9jbGFzcxizAiABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlNwZHJMaW1pdENsYXNzEj4KEG1ha2VfbGltaXRfY2xhc3MYtgIgASgOMiMu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5TcGRyTGltaXRDbGFzcxI4Cg90YWtlX3Jl",
            "YWNoX3J1bGUYuQIgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5SZWFjaFJ1",
            "bGUSGAoPb3JkZXJfcHJjX2xpbWl0GLwCIAEoARIXCg5vcmRlcl9yZWZfdVBy",
            "Yxi/AiABKAESGAoPb3JkZXJfcmVmX2RlbHRhGMICIAEoAhIYCg9vcmRlcl9y",
            "ZWZfZ2FtbWEYxQIgASgCEhgKD29yZGVyX3ZvbF9saW1pdBjIAiABKAISFgoN",
            "cmF0ZV9vdmVycmlkZRjLAiABKAISFgoNc2Rpdl9vdmVycmlkZRjOAiABKAIS",
            "FgoNZGRpdl9vdmVycmlkZRjRAiABKAkSOQoNb3ZlcnJpZGVfY29kZRjUAiAB",
            "KA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLk92ZXJyaWRlQ29kZRIZChBvcmRl",
            "cl9wcmNfb2Zmc2V0GNcCIAEoARI1CgtzdGF0ZV9tb2RlbBjaAiABKA4yHy5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlN0YXRlTW9kZWwSNwoNdV9zdGF0ZV9tb2Rl",
            "bBjdAiABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLlN0YXRlTW9kZWwSOAoP",
            "dGFrZV9hbHBoYV90eXBlGOACIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QWxwaGFUeXBlEjgKD21ha2VfYWxwaGFfdHlwZRjjAiABKA4yHi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLkFscGhhVHlwZRIaChF0YWtlX2FscGhhX2ZhY3Rvchjm",
            "AiABKAISGgoRbWFrZV9hbHBoYV9mYWN0b3IY6QIgASgCEhkKEHRha2VfcHJv",
            "YmFiaWxpdHkY7AIgASgCEhkKEG1ha2VfcHJvYmFiaWxpdHkY7wIgASgCEh0K",
            "FHRha2Vfc3VyZl9wcmNfb2Zmc2V0GPICIAEoARIdChR0YWtlX3N1cmZfdm9s",
            "X29mZnNldBj1AiABKAISHwoWdGFrZV9zdXJmX3dpZHRoX29mZnNldBj4AiAB",
            "KAISHQoUbWFrZV9zdXJmX3ByY19vZmZzZXQY+wIgASgBEh0KFG1ha2Vfc3Vy",
            "Zl92b2xfb2Zmc2V0GP4CIAEoAhIfChZtYWtlX3N1cmZfd2lkdGhfb2Zmc2V0",
            "GIEDIAEoAhIdChRvcmRlcl9yZWZfZXZlbnRfbXVsdBiEAyABKAISOQoUb3Jk",
            "ZXJfcmVmX2V2ZW50X2R0dG0YhwMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBIzCgphdXRvX2hlZGdlGIoDIAEoDjIeLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQXV0b0hlZGdlEjkKEGhlZGdlX2luc3RydW1lbnQYjQMgASgOMh4u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5IZWRnZUluc3QSNgoNaGVkZ2Vfc2VjX2tl",
            "eRiQAyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRIZChBo",
            "ZWRnZV9iZXRhX3JhdGlvGJMDIAEoAhI1CgtoZWRnZV9zY29wZRiWAyABKA4y",
            "Hy5zcGlkZXJyb2NrLnByb3RvYnVmLkhlZGdlU2NvcGUSOgoNaGVkZ2Vfc2Vz",
            "c2lvbhiNCCABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLk1hcmtldFNlc3Np",
            "b24SHQoUZXh0ZXJuX2hlZGdlX2V4X2Rlc3QYnAMgASgJEhwKE2V4dGVybl9o",
            "ZWRnZV9wYXJhbXMYnwMgASgJEjEKCWZpcm1fdHlwZRiiAyABKA4yHS5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkZpcm1UeXBlEjsKDm9yZGVyX2NhcGFjaXR5GKUD",
            "IAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuT3JkZXJDYXBhY2l0eRI5Cg1w",
            "b3NpdGlvbl90eXBlGKgDIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuUG9z",
            "aXRpb25UeXBlEjcKCnNzYWxlX2ZsYWcYqwMgASgOMiIuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TaG9ydFNhbGVGbGFnEhcKDm5vX2Nyb3NzX2dyb3VwGK4DIAEo",
            "CRIXCg5leGNoX3RyYWRlcl9pZBixAyABKAkSGAoPbGFyZ2VfdHJhZGVyX2lk",
            "GLQDIAEoCRIZChB0cmFkaW5nX2xvY2F0aW9uGLcDIAEoCRIwCglsZWFkX3Np",
            "ZGUY5AMgASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5CdXlTZWxsEiAKF21h",
            "eF9jb21wbGV0aW9uX3NsaXBwYWdlGOcDIAEoARIaChFvcmRlcl9yZWZfcHJl",
            "bWl1bRjqAyABKAISFgoNbm90aWNlX251bWJlchiICCABKAMSEQoIdGhlb192",
            "b2wY8AMgASgCEhcKDmNsX2Fycml2ZV9tYXJrGPMDIAEoAhIWCg1yaXNrX2dy",
            "b3VwX2lkGPYDIAEoAxI8ChdyZXFfYXV4X3Jpc2tfZ3JvdXBfY3RybBiJCCAB",
            "KA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEj0KEHJlZl9yTWV0cmlj",
            "MV9zcmMYugMgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5STWV0cmljU291",
            "cmNlEj0KEHJlZl9yTWV0cmljMl9zcmMYvQMgASgOMiIuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5STWV0cmljU291cmNlEj0KEHJlZl9yTWV0cmljM19zcmMYwAMg",
            "ASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5STWV0cmljU291cmNlEj0KEHJl",
            "Zl9yTWV0cmljNF9zcmMYwwMgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5S",
            "TWV0cmljU291cmNlEj0KEHJlZl9yTWV0cmljNV9zcmMYxgMgASgOMiIuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5STWV0cmljU291cmNlEj0KEHJlZl9yTWV0cmlj",
            "Nl9zcmMYyQMgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5STWV0cmljU291",
            "cmNlEj0KEHJlZl9yTWV0cmljN19zcmMYzAMgASgOMiIuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5STWV0cmljU291cmNlEhsKEm9yZGVyX3JlZl9yTWV0cmljMRjP",
            "AyABKAISGwoSb3JkZXJfcmVmX3JNZXRyaWMyGNIDIAEoAhIbChJvcmRlcl9y",
            "ZWZfck1ldHJpYzMY1QMgASgCEhsKEm9yZGVyX3JlZl9yTWV0cmljNBjYAyAB",
            "KAISGwoSb3JkZXJfcmVmX3JNZXRyaWM1GNsDIAEoAhIbChJvcmRlcl9yZWZf",
            "ck1ldHJpYzYY3gMgASgCEhsKEm9yZGVyX3JlZl9yTWV0cmljNxjhAyABKAIS",
            "HwoWZXhwX2RheV93dF92ZWdhX29mZnNldBiRBCABKAISHwoWbWF4X2V4cF9k",
            "YXlfd3RfdmVnYV9sbhiLBCABKAISHwoWbWF4X2V4cF9kYXlfd3RfdmVnYV9z",
            "aBiOBCABKAISIAoXbWF4X2V4cF9kYXlfck1ldHJpYzZfbG4YrwQgASgCEiAK",
            "F21heF9leHBfZGF5X3JNZXRyaWM2X3NoGLIEIAEoAhIeChVzeW1fZGF5X2RE",
            "ZWx0YV9vZmZzZXQYrAQgASgCEh4KFW1heF9zeW1fZGF5X2REZWx0YV9sbhim",
            "BCABKAISHgoVbWF4X3N5bV9kYXlfZERlbHRhX3NoGKkEIAEoAhIcChNzeW1f",
            "ZGF5X3ZlZ2Ffb2Zmc2V0GJoEIAEoAhIcChNtYXhfc3ltX2RheV92ZWdhX2xu",
            "GJQEIAEoAhIcChNtYXhfc3ltX2RheV92ZWdhX3NoGJcEIAEoAhIfChZzeW1f",
            "ZGF5X3d0X3ZlZ2Ffb2Zmc2V0GKMEIAEoAhIfChZtYXhfc3ltX2RheV93dF92",
            "ZWdhX2xuGJ0EIAEoAhIfChZtYXhfc3ltX2RheV93dF92ZWdhX3NoGKAEIAEo",
            "AhIgChdtYXhfc3ltX2RheV9yTWV0cmljN19sbhi4BCABKAISIAoXbWF4X3N5",
            "bV9kYXlfck1ldHJpYzdfc2gYuwQgASgCEh4KFW1heF9ncnBfZGF5X2REZWx0",
            "YV9sbhjBBCABKAISHgoVbWF4X2dycF9kYXlfZERlbHRhX3NoGMQEIAEoAhIc",
            "ChNtYXhfZ3JwX2RheV92ZWdhX2xuGMoEIAEoAhIcChNtYXhfZ3JwX2RheV92",
            "ZWdhX3NoGM0EIAEoAhIdChRtYXhfZ3JwX2RheV92ZWdhX2FicxjQBCABKAIS",
            "GwoSZ3JwX2RheV92ZWdhX3JhdGlvGNMEIAEoAhIhChhtYXhfZ3JwX2RheV9j",
            "b250cmFjdHNfbG4YhgUgASgFEiEKGG1heF9ncnBfZGF5X2NvbnRyYWN0c19z",
            "aBiJBSABKAUSIgoZbWF4X2dycF9kYXlfY29udHJhY3RzX2FicxiMBSABKAUS",
            "IAoXbWF4X2dycF9kYXlfck1ldHJpYzFfbG4Y4gQgASgCEiAKF21heF9ncnBf",
            "ZGF5X3JNZXRyaWMxX3NoGOUEIAEoAhIhChhtYXhfZ3JwX2RheV9yTWV0cmlj",
            "MV9hYnMY6AQgASgCEh8KFmdycF9kYXlfck1ldHJpYzFfcmF0aW8Y6wQgASgC",
            "EiAKF21heF9ncnBfZGF5X3JNZXRyaWMyX2xuGO4EIAEoAhIgChdtYXhfZ3Jw",
            "X2RheV9yTWV0cmljMl9zaBjxBCABKAISIAoXbWF4X2dycF9kYXlfck1ldHJp",
            "YzNfbG4Y9AQgASgCEiAKF21heF9ncnBfZGF5X3JNZXRyaWMzX3NoGPcEIAEo",
            "AhIgChdtYXhfZ3JwX2RheV9yTWV0cmljNF9sbhj6BCABKAISIAoXbWF4X2dy",
            "cF9kYXlfck1ldHJpYzRfc2gY/QQgASgCEiAKF21heF9ncnBfZGF5X3JNZXRy",
            "aWM1X2xuGIAFIAEoAhIgChdtYXhfZ3JwX2RheV9yTWV0cmljNV9zaBiDBSAB",
            "KAISHgoVc3ltX2VtYV9jeGxfZERlbHRhX2xuGI8FIAEoAhIeChVzeW1fZW1h",
            "X2N4bF9kRGVsdGFfc2gYkgUgASgCEh8KFnN5bV9lbWFfY3hsX3d0X3ZlZ2Ff",
            "bG4YlQUgASgCEh8KFnN5bV9lbWFfY3hsX3d0X3ZlZ2Ffc2gYmAUgASgCEjMK",
            "Dmxhc3RfZmlsbF9kdHRtGJsFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASEwoKdXNlcl9kYXRhMRieBSABKAkSEwoKdXNlcl9kYXRhMhihBSAB",
            "KAkSEwoKY2hpbGRfZGF0YRikBSABKAkSFgoNc3JjX3RpbWVzdGFtcBinBSAB",
            "KAMSFgoNc2d3X3RpbWVzdGFtcBiqBSABKAMSLgoJdGltZXN0YW1wGK0FIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASQQoRaW5jbHVkZV9zUk5l",
            "dHdvcmsYswUgASgOMiUuc3BpZGVycm9jay5wcm90b2J1Zi5JbmNsRXhjbERp",
            "c2Nsb3NlEloKFmRpcmVjdGVkX2NvdW50ZXJfcGFydHkYtgUgAygLMjkuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TcGRyUGFyZW50T3JkZXIuRGlyZWN0ZWRDb3Vu",
            "dGVyUGFydHkSQwoKb3JkZXJfbGVncxjvBSADKAsyLi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlNwZHJQYXJlbnRPcmRlci5PcmRlckxlZ3MaHQoEUEtleRIVCg1w",
            "YXJlbnRfbnVtYmVyGAogASgDGmcKFERpcmVjdGVkQ291bnRlclBhcnR5EhQK",
            "C2NsaWVudF9maXJtGLkFIAEoCRI5CglpbmNsX2V4Y2wYvAUgASgOMiUuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5JbmNsRXhjbERpc2Nsb3NlGvsUCglPcmRlckxl",
            "Z3MSLwoGdGlja2VyGPIFIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlj",
            "a2VyS2V5EjEKCnN0b2NrX3NpZGUY9QUgASgOMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5CdXlTZWxsEhUKDHN0b2NrX3NoYXJlcxj4BSABKAUSFQoMc3RvY2tf",
            "bGVnX2lkGPsFIAEoAxIXCg5hbHRfc3RrX2xlZ19pZBj+BSABKAkSNwoKc3Nh",
            "bGVfZmxhZxiBBiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2Fs",
            "ZUZsYWcSEQoIcmVmX3VQcmMYhwYgASgCEhEKCG51bV9sZWdzGIoGIAEoBRIx",
            "CghzZWNfa2V5MRiNBiABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlv",
            "bktleRI0CglzZWNfdHlwZTEYkAYgASgOMiAuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5TcGRyS2V5VHlwZRIOCgVtdWx0MRiTBiABKA0SLAoFc2lkZTEYlgYgASgO",
            "Mhwuc3BpZGVycm9jay5wcm90b2J1Zi5CdXlTZWxsEhAKB2xlZ19pZDEYmQYg",
            "ASgDEhQKC2FsdF9sZWdfaWQxGJwGIAEoCRI1Cglwb3NfdHlwZTEYnwYgASgO",
            "MiEuc3BpZGVycm9jay5wcm90b2J1Zi5Qb3NpdGlvblR5cGUSOAoLc3NhbGVf",
            "ZmxhZzEYpQYgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5TaG9ydFNhbGVG",
            "bGFnEg4KBXZlZ2ExGKsGIAEoAhISCglyZWZfdVByYzEYrgYgASgBEhMKCnJl",
            "Zl9kZWx0YTEYsQYgASgCEhYKDXJlZl9lYXJuX2NudDEYtAYgASgFEjEKCHNl",
            "Y19rZXkyGLcGIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0aW9uS2V5",
            "EjQKCXNlY190eXBlMhi6BiABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNw",
            "ZHJLZXlUeXBlEg4KBW11bHQyGL0GIAEoDRIsCgVzaWRlMhjABiABKA4yHC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGwSEAoHbGVnX2lkMhjDBiABKAMS",
            "FAoLYWx0X2xlZ19pZDIYxgYgASgJEjUKCXBvc190eXBlMhjJBiABKA4yIS5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRI4Cgtzc2FsZV9mbGFn",
            "MhjPBiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2FsZUZsYWcS",
            "DgoFdmVnYTIY1QYgASgCEhIKCXJlZl91UHJjMhjYBiABKAESEwoKcmVmX2Rl",
            "bHRhMhjbBiABKAISFgoNcmVmX2Vhcm5fY250MhjeBiABKAUSMQoIc2VjX2tl",
            "eTMY4QYgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSNAoJ",
            "c2VjX3R5cGUzGOQGIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkcktl",
            "eVR5cGUSDgoFbXVsdDMY5wYgASgNEiwKBXNpZGUzGOoGIAEoDjIcLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuQnV5U2VsbBIQCgdsZWdfaWQzGO0GIAEoAxIUCgth",
            "bHRfbGVnX2lkMxjwBiABKAkSNQoJcG9zX3R5cGUzGPMGIAEoDjIhLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuUG9zaXRpb25UeXBlEjgKC3NzYWxlX2ZsYWczGPkG",
            "IAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU2hvcnRTYWxlRmxhZxIOCgV2",
            "ZWdhMxj/BiABKAISEgoJcmVmX3VQcmMzGIIHIAEoARITCgpyZWZfZGVsdGEz",
            "GIUHIAEoAhIWCg1yZWZfZWFybl9jbnQzGIgHIAEoBRIxCghzZWNfa2V5NBiL",
            "ByABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRI0CglzZWNf",
            "dHlwZTQYjgcgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyS2V5VHlw",
            "ZRIOCgVtdWx0NBiRByABKA0SLAoFc2lkZTQYlAcgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5CdXlTZWxsEhAKB2xlZ19pZDQYlwcgASgDEhQKC2FsdF9s",
            "ZWdfaWQ0GJoHIAEoCRI1Cglwb3NfdHlwZTQYnQcgASgOMiEuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5Qb3NpdGlvblR5cGUSOAoLc3NhbGVfZmxhZzQYowcgASgO",
            "MiIuc3BpZGVycm9jay5wcm90b2J1Zi5TaG9ydFNhbGVGbGFnEg4KBXZlZ2E0",
            "GKkHIAEoAhISCglyZWZfdVByYzQYrAcgASgBEhMKCnJlZl9kZWx0YTQYrwcg",
            "ASgCEhYKDXJlZl9lYXJuX2NudDQYsgcgASgFEjEKCHNlY19rZXk1GLUHIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0aW9uS2V5EjQKCXNlY190eXBl",
            "NRi4ByABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEg4K",
            "BW11bHQ1GLsHIAEoDRIsCgVzaWRlNRi+ByABKA4yHC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkJ1eVNlbGwSEAoHbGVnX2lkNRjBByABKAMSFAoLYWx0X2xlZ19p",
            "ZDUYxAcgASgJEjUKCXBvc190eXBlNRjHByABKA4yIS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlBvc2l0aW9uVHlwZRI4Cgtzc2FsZV9mbGFnNRjNByABKA4yIi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2FsZUZsYWcSDgoFdmVnYTUY0wcg",
            "ASgCEhIKCXJlZl91UHJjNRjWByABKAESEwoKcmVmX2RlbHRhNRjZByABKAIS",
            "FgoNcmVmX2Vhcm5fY250NRjcByABKAUSMQoIc2VjX2tleTYY3wcgASgLMh4u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSNAoJc2VjX3R5cGU2GOIH",
            "IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5cGUSDgoFbXVs",
            "dDYY5QcgASgNEiwKBXNpZGU2GOgHIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQnV5U2VsbBIQCgdsZWdfaWQ2GOsHIAEoAxIUCgthbHRfbGVnX2lkNhju",
            "ByABKAkSNQoJcG9zX3R5cGU2GPEHIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuUG9zaXRpb25UeXBlEjgKC3NzYWxlX2ZsYWc2GPcHIAEoDjIiLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuU2hvcnRTYWxlRmxhZxIOCgV2ZWdhNhj9ByABKAIS",
            "EgoJcmVmX3VQcmM2GIAIIAEoARITCgpyZWZfZGVsdGE2GIMIIAEoAhIWCg1y",
            "ZWZfZWFybl9jbnQ2GIYIIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentOrder), global::Spiderrock.Protobuf.SpdrParentOrder.Parser, new[]{ "Meta", "Pkey", "SysEnvironment", "RunStatus", "SpdrActionType", "ParentShape", "ClientSeqNumIn", "AltOrderId", "AltPrevOrderId", "AltAutoHedgeId", "AltAccnt", "AltUserName", "SrcRoutingCode", "PackageId", "SecKey", "SecType", "SecurityDesc", "Accnt", "ClientFirm", "SpdrSource", "GroupingCode", "ExecBrkrCode", "ExternExDest", "ExternParams", "Strategy", "UserName", "UserSource", "OrderDttm", "OrderSide", "OrderSize", "OrderActiveSize", "CurCumFillQuantity", "AddCumFillQuantity", "MaxExposureSize", "NumMakeExchanges", "PublicSize", "CanOverlapCxlRepl", "ProgressRule", "BlockVisibility", "ProgressSliceCnt", "ProgressExposeTime", "VwapParticipation", "MinMktOnClosePct", "TriggerType", "TriggerLevel", "AuctionResponder", "MaxMakeExchFee", "MaxTakeExchFee", "IncTakeExchFee", "IncMakeExchFee", "MakeExchRule", "CxlUPrcRange", "MinUBid", "MaxUAsk", "MinMaxType", "MinOptionPx", "MaxChildOrders", "ExchMask", "SpdrStageType", "MarketSession", "StartDttm", "OrderDuration", "ActiveDuration", "GoodTillDttm", "StartType", "TriggerGroupId", "TriggerTimestamp", "ParentOrderHandling", "ParentBalanceHandling", "OrderLimitType", "TakeLimitClass", "MakeLimitClass", "TakeReachRule", "OrderPrcLimit", "OrderRefUPrc", "OrderRefDelta", "OrderRefGamma", "OrderVolLimit", "RateOverride", "SdivOverride", "DdivOverride", "OverrideCode", "OrderPrcOffset", "StateModel", "UStateModel", "TakeAlphaType", "MakeAlphaType", "TakeAlphaFactor", "MakeAlphaFactor", "TakeProbability", "MakeProbability", "TakeSurfPrcOffset", "TakeSurfVolOffset", "TakeSurfWidthOffset", "MakeSurfPrcOffset", "MakeSurfVolOffset", "MakeSurfWidthOffset", "OrderRefEventMult", "OrderRefEventDttm", "AutoHedge", "HedgeInstrument", "HedgeSecKey", "HedgeBetaRatio", "HedgeScope", "HedgeSession", "ExternHedgeExDest", "ExternHedgeParams", "FirmType", "OrderCapacity", "PositionType", "SsaleFlag", "NoCrossGroup", "ExchTraderId", "LargeTraderId", "TradingLocation", "LeadSide", "MaxCompletionSlippage", "OrderRefPremium", "NoticeNumber", "TheoVol", "ClArriveMark", "RiskGroupId", "ReqAuxRiskGroupCtrl", "RefRMetric1Src", "RefRMetric2Src", "RefRMetric3Src", "RefRMetric4Src", "RefRMetric5Src", "RefRMetric6Src", "RefRMetric7Src", "OrderRefRMetric1", "OrderRefRMetric2", "OrderRefRMetric3", "OrderRefRMetric4", "OrderRefRMetric5", "OrderRefRMetric6", "OrderRefRMetric7", "ExpDayWtVegaOffset", "MaxExpDayWtVegaLn", "MaxExpDayWtVegaSh", "MaxExpDayRMetric6Ln", "MaxExpDayRMetric6Sh", "SymDayDDeltaOffset", "MaxSymDayDDeltaLn", "MaxSymDayDDeltaSh", "SymDayVegaOffset", "MaxSymDayVegaLn", "MaxSymDayVegaSh", "SymDayWtVegaOffset", "MaxSymDayWtVegaLn", "MaxSymDayWtVegaSh", "MaxSymDayRMetric7Ln", "MaxSymDayRMetric7Sh", "MaxGrpDayDDeltaLn", "MaxGrpDayDDeltaSh", "MaxGrpDayVegaLn", "MaxGrpDayVegaSh", "MaxGrpDayVegaAbs", "GrpDayVegaRatio", "MaxGrpDayContractsLn", "MaxGrpDayContractsSh", "MaxGrpDayContractsAbs", "MaxGrpDayRMetric1Ln", "MaxGrpDayRMetric1Sh", "MaxGrpDayRMetric1Abs", "GrpDayRMetric1Ratio", "MaxGrpDayRMetric2Ln", "MaxGrpDayRMetric2Sh", "MaxGrpDayRMetric3Ln", "MaxGrpDayRMetric3Sh", "MaxGrpDayRMetric4Ln", "MaxGrpDayRMetric4Sh", "MaxGrpDayRMetric5Ln", "MaxGrpDayRMetric5Sh", "SymEmaCxlDDeltaLn", "SymEmaCxlDDeltaSh", "SymEmaCxlWtVegaLn", "SymEmaCxlWtVegaSh", "LastFillDttm", "UserData1", "UserData2", "ChildData", "SrcTimestamp", "SgwTimestamp", "Timestamp", "IncludeSRNetwork", "DirectedCounterParty", "OrderLegs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey), global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey.Parser, new[]{ "ParentNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty), global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty.Parser, new[]{ "ClientFirm", "InclExcl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs), global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs.Parser, new[]{ "Ticker", "StockSide", "StockShares", "StockLegId", "AltStkLegId", "SsaleFlag", "RefUPrc", "NumLegs", "SecKey1", "SecType1", "Mult1", "Side1", "LegId1", "AltLegId1", "PosType1", "SsaleFlag1", "Vega1", "RefUPrc1", "RefDelta1", "RefEarnCnt1", "SecKey2", "SecType2", "Mult2", "Side2", "LegId2", "AltLegId2", "PosType2", "SsaleFlag2", "Vega2", "RefUPrc2", "RefDelta2", "RefEarnCnt2", "SecKey3", "SecType3", "Mult3", "Side3", "LegId3", "AltLegId3", "PosType3", "SsaleFlag3", "Vega3", "RefUPrc3", "RefDelta3", "RefEarnCnt3", "SecKey4", "SecType4", "Mult4", "Side4", "LegId4", "AltLegId4", "PosType4", "SsaleFlag4", "Vega4", "RefUPrc4", "RefDelta4", "RefEarnCnt4", "SecKey5", "SecType5", "Mult5", "Side5", "LegId5", "AltLegId5", "PosType5", "SsaleFlag5", "Vega5", "RefUPrc5", "RefDelta5", "RefEarnCnt5", "SecKey6", "SecType6", "Mult6", "Side6", "LegId6", "AltLegId6", "PosType6", "SsaleFlag6", "Vega6", "RefUPrc6", "RefDelta6", "RefEarnCnt6" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrParentOrder records are visible in SRSE immediately after receipt.  Parent orders received via FIX, SRSE or SpiderRock GUI tools, or 3rd party vendor systems are all visible in this table.
  ///Parent orders can be for stocks, futures, options or spreads.  And they can be one-sided (agency) or two-sided (facilitation) orders.  Parent order records should be immutable and not update.
  ///SpdrParentOrder records are published to the SpiderRock elatic cluster on arrival.
  /// </summary>
  public sealed partial class SpdrParentOrder : pb::IMessage<SpdrParentOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrParentOrder> _parser = new pb::MessageParser<SpdrParentOrder>(() => new SpdrParentOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrParentOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrParentOrderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentOrder(SpdrParentOrder other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      sysEnvironment_ = other.sysEnvironment_;
      runStatus_ = other.runStatus_;
      spdrActionType_ = other.spdrActionType_;
      parentShape_ = other.parentShape_;
      clientSeqNumIn_ = other.clientSeqNumIn_;
      altOrderId_ = other.altOrderId_;
      altPrevOrderId_ = other.altPrevOrderId_;
      altAutoHedgeId_ = other.altAutoHedgeId_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      srcRoutingCode_ = other.srcRoutingCode_;
      packageId_ = other.packageId_;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      securityDesc_ = other.securityDesc_;
      accnt_ = other.accnt_;
      clientFirm_ = other.clientFirm_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      execBrkrCode_ = other.execBrkrCode_;
      externExDest_ = other.externExDest_;
      externParams_ = other.externParams_;
      strategy_ = other.strategy_;
      userName_ = other.userName_;
      userSource_ = other.userSource_;
      orderDttm_ = other.orderDttm_ != null ? other.orderDttm_.Clone() : null;
      orderSide_ = other.orderSide_;
      orderSize_ = other.orderSize_;
      orderActiveSize_ = other.orderActiveSize_;
      curCumFillQuantity_ = other.curCumFillQuantity_;
      addCumFillQuantity_ = other.addCumFillQuantity_;
      maxExposureSize_ = other.maxExposureSize_;
      numMakeExchanges_ = other.numMakeExchanges_;
      publicSize_ = other.publicSize_;
      canOverlapCxlRepl_ = other.canOverlapCxlRepl_;
      progressRule_ = other.progressRule_;
      blockVisibility_ = other.blockVisibility_;
      progressSliceCnt_ = other.progressSliceCnt_;
      progressExposeTime_ = other.progressExposeTime_;
      vwapParticipation_ = other.vwapParticipation_;
      minMktOnClosePct_ = other.minMktOnClosePct_;
      triggerType_ = other.triggerType_;
      triggerLevel_ = other.triggerLevel_;
      auctionResponder_ = other.auctionResponder_;
      maxMakeExchFee_ = other.maxMakeExchFee_;
      maxTakeExchFee_ = other.maxTakeExchFee_;
      incTakeExchFee_ = other.incTakeExchFee_;
      incMakeExchFee_ = other.incMakeExchFee_;
      makeExchRule_ = other.makeExchRule_;
      cxlUPrcRange_ = other.cxlUPrcRange_;
      minUBid_ = other.minUBid_;
      maxUAsk_ = other.maxUAsk_;
      minMaxType_ = other.minMaxType_;
      minOptionPx_ = other.minOptionPx_;
      maxChildOrders_ = other.maxChildOrders_;
      exchMask_ = other.exchMask_;
      spdrStageType_ = other.spdrStageType_;
      marketSession_ = other.marketSession_;
      startDttm_ = other.startDttm_ != null ? other.startDttm_.Clone() : null;
      orderDuration_ = other.orderDuration_;
      activeDuration_ = other.activeDuration_;
      goodTillDttm_ = other.goodTillDttm_ != null ? other.goodTillDttm_.Clone() : null;
      startType_ = other.startType_;
      triggerGroupId_ = other.triggerGroupId_;
      triggerTimestamp_ = other.triggerTimestamp_;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      orderLimitType_ = other.orderLimitType_;
      takeLimitClass_ = other.takeLimitClass_;
      makeLimitClass_ = other.makeLimitClass_;
      takeReachRule_ = other.takeReachRule_;
      orderPrcLimit_ = other.orderPrcLimit_;
      orderRefUPrc_ = other.orderRefUPrc_;
      orderRefDelta_ = other.orderRefDelta_;
      orderRefGamma_ = other.orderRefGamma_;
      orderVolLimit_ = other.orderVolLimit_;
      rateOverride_ = other.rateOverride_;
      sdivOverride_ = other.sdivOverride_;
      ddivOverride_ = other.ddivOverride_;
      overrideCode_ = other.overrideCode_;
      orderPrcOffset_ = other.orderPrcOffset_;
      stateModel_ = other.stateModel_;
      uStateModel_ = other.uStateModel_;
      takeAlphaType_ = other.takeAlphaType_;
      makeAlphaType_ = other.makeAlphaType_;
      takeAlphaFactor_ = other.takeAlphaFactor_;
      makeAlphaFactor_ = other.makeAlphaFactor_;
      takeProbability_ = other.takeProbability_;
      makeProbability_ = other.makeProbability_;
      takeSurfPrcOffset_ = other.takeSurfPrcOffset_;
      takeSurfVolOffset_ = other.takeSurfVolOffset_;
      takeSurfWidthOffset_ = other.takeSurfWidthOffset_;
      makeSurfPrcOffset_ = other.makeSurfPrcOffset_;
      makeSurfVolOffset_ = other.makeSurfVolOffset_;
      makeSurfWidthOffset_ = other.makeSurfWidthOffset_;
      orderRefEventMult_ = other.orderRefEventMult_;
      orderRefEventDttm_ = other.orderRefEventDttm_ != null ? other.orderRefEventDttm_.Clone() : null;
      autoHedge_ = other.autoHedge_;
      hedgeInstrument_ = other.hedgeInstrument_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeBetaRatio_ = other.hedgeBetaRatio_;
      hedgeScope_ = other.hedgeScope_;
      hedgeSession_ = other.hedgeSession_;
      externHedgeExDest_ = other.externHedgeExDest_;
      externHedgeParams_ = other.externHedgeParams_;
      firmType_ = other.firmType_;
      orderCapacity_ = other.orderCapacity_;
      positionType_ = other.positionType_;
      ssaleFlag_ = other.ssaleFlag_;
      noCrossGroup_ = other.noCrossGroup_;
      exchTraderId_ = other.exchTraderId_;
      largeTraderId_ = other.largeTraderId_;
      tradingLocation_ = other.tradingLocation_;
      leadSide_ = other.leadSide_;
      maxCompletionSlippage_ = other.maxCompletionSlippage_;
      orderRefPremium_ = other.orderRefPremium_;
      noticeNumber_ = other.noticeNumber_;
      theoVol_ = other.theoVol_;
      clArriveMark_ = other.clArriveMark_;
      riskGroupId_ = other.riskGroupId_;
      reqAuxRiskGroupCtrl_ = other.reqAuxRiskGroupCtrl_;
      refRMetric1Src_ = other.refRMetric1Src_;
      refRMetric2Src_ = other.refRMetric2Src_;
      refRMetric3Src_ = other.refRMetric3Src_;
      refRMetric4Src_ = other.refRMetric4Src_;
      refRMetric5Src_ = other.refRMetric5Src_;
      refRMetric6Src_ = other.refRMetric6Src_;
      refRMetric7Src_ = other.refRMetric7Src_;
      orderRefRMetric1_ = other.orderRefRMetric1_;
      orderRefRMetric2_ = other.orderRefRMetric2_;
      orderRefRMetric3_ = other.orderRefRMetric3_;
      orderRefRMetric4_ = other.orderRefRMetric4_;
      orderRefRMetric5_ = other.orderRefRMetric5_;
      orderRefRMetric6_ = other.orderRefRMetric6_;
      orderRefRMetric7_ = other.orderRefRMetric7_;
      expDayWtVegaOffset_ = other.expDayWtVegaOffset_;
      maxExpDayWtVegaLn_ = other.maxExpDayWtVegaLn_;
      maxExpDayWtVegaSh_ = other.maxExpDayWtVegaSh_;
      maxExpDayRMetric6Ln_ = other.maxExpDayRMetric6Ln_;
      maxExpDayRMetric6Sh_ = other.maxExpDayRMetric6Sh_;
      symDayDDeltaOffset_ = other.symDayDDeltaOffset_;
      maxSymDayDDeltaLn_ = other.maxSymDayDDeltaLn_;
      maxSymDayDDeltaSh_ = other.maxSymDayDDeltaSh_;
      symDayVegaOffset_ = other.symDayVegaOffset_;
      maxSymDayVegaLn_ = other.maxSymDayVegaLn_;
      maxSymDayVegaSh_ = other.maxSymDayVegaSh_;
      symDayWtVegaOffset_ = other.symDayWtVegaOffset_;
      maxSymDayWtVegaLn_ = other.maxSymDayWtVegaLn_;
      maxSymDayWtVegaSh_ = other.maxSymDayWtVegaSh_;
      maxSymDayRMetric7Ln_ = other.maxSymDayRMetric7Ln_;
      maxSymDayRMetric7Sh_ = other.maxSymDayRMetric7Sh_;
      maxGrpDayDDeltaLn_ = other.maxGrpDayDDeltaLn_;
      maxGrpDayDDeltaSh_ = other.maxGrpDayDDeltaSh_;
      maxGrpDayVegaLn_ = other.maxGrpDayVegaLn_;
      maxGrpDayVegaSh_ = other.maxGrpDayVegaSh_;
      maxGrpDayVegaAbs_ = other.maxGrpDayVegaAbs_;
      grpDayVegaRatio_ = other.grpDayVegaRatio_;
      maxGrpDayContractsLn_ = other.maxGrpDayContractsLn_;
      maxGrpDayContractsSh_ = other.maxGrpDayContractsSh_;
      maxGrpDayContractsAbs_ = other.maxGrpDayContractsAbs_;
      maxGrpDayRMetric1Ln_ = other.maxGrpDayRMetric1Ln_;
      maxGrpDayRMetric1Sh_ = other.maxGrpDayRMetric1Sh_;
      maxGrpDayRMetric1Abs_ = other.maxGrpDayRMetric1Abs_;
      grpDayRMetric1Ratio_ = other.grpDayRMetric1Ratio_;
      maxGrpDayRMetric2Ln_ = other.maxGrpDayRMetric2Ln_;
      maxGrpDayRMetric2Sh_ = other.maxGrpDayRMetric2Sh_;
      maxGrpDayRMetric3Ln_ = other.maxGrpDayRMetric3Ln_;
      maxGrpDayRMetric3Sh_ = other.maxGrpDayRMetric3Sh_;
      maxGrpDayRMetric4Ln_ = other.maxGrpDayRMetric4Ln_;
      maxGrpDayRMetric4Sh_ = other.maxGrpDayRMetric4Sh_;
      maxGrpDayRMetric5Ln_ = other.maxGrpDayRMetric5Ln_;
      maxGrpDayRMetric5Sh_ = other.maxGrpDayRMetric5Sh_;
      symEmaCxlDDeltaLn_ = other.symEmaCxlDDeltaLn_;
      symEmaCxlDDeltaSh_ = other.symEmaCxlDDeltaSh_;
      symEmaCxlWtVegaLn_ = other.symEmaCxlWtVegaLn_;
      symEmaCxlWtVegaSh_ = other.symEmaCxlWtVegaSh_;
      lastFillDttm_ = other.lastFillDttm_ != null ? other.lastFillDttm_.Clone() : null;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      childData_ = other.childData_;
      srcTimestamp_ = other.srcTimestamp_;
      sgwTimestamp_ = other.sgwTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      includeSRNetwork_ = other.includeSRNetwork_;
      directedCounterParty_ = other.directedCounterParty_.Clone();
      orderLegs_ = other.orderLegs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentOrder Clone() {
      return new SpdrParentOrder(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 100;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    /// <summary>
    /// original (source) sys environment [Stable, Current, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "run_status" field.</summary>
    public const int RunStatusFieldNumber = 103;
    private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
    /// <summary>
    /// original (source) run status [Prod,Beta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RunStatus RunStatus {
      get { return runStatus_; }
      set {
        runStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_action_type" field.</summary>
    public const int SpdrActionTypeFieldNumber = 106;
    private global::Spiderrock.Protobuf.SpdrActionType spdrActionType_ = global::Spiderrock.Protobuf.SpdrActionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrActionType SpdrActionType {
      get { return spdrActionType_; }
      set {
        spdrActionType_ = value;
      }
    }

    /// <summary>Field number for the "parent_shape" field.</summary>
    public const int ParentShapeFieldNumber = 109;
    private global::Spiderrock.Protobuf.SpdrOrderShape parentShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ParentShape {
      get { return parentShape_; }
      set {
        parentShape_ = value;
      }
    }

    /// <summary>Field number for the "client_seq_num_in" field.</summary>
    public const int ClientSeqNumInFieldNumber = 112;
    private int clientSeqNumIn_;
    /// <summary>
    /// inbound client seq number (FIX orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientSeqNumIn {
      get { return clientSeqNumIn_; }
      set {
        clientSeqNumIn_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 115;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_prev_order_id" field.</summary>
    public const int AltPrevOrderIdFieldNumber = 118;
    private string altPrevOrderId_ = "";
    /// <summary>
    /// alternate prev order ID (usually origClOrdId from client during cxl/replace)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltPrevOrderId {
      get { return altPrevOrderId_; }
      set {
        altPrevOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_auto_hedge_id" field.</summary>
    public const int AltAutoHedgeIdFieldNumber = 124;
    private string altAutoHedgeId_ = "";
    /// <summary>
    /// alternate order ID for child autohedge orders (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAutoHedgeId {
      get { return altAutoHedgeId_; }
      set {
        altAutoHedgeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 127;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 130;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_routing_code" field.</summary>
    public const int SrcRoutingCodeFieldNumber = 133;
    private string srcRoutingCode_ = "";
    /// <summary>
    /// inbound FIX routing code or SRSE/tool server appID (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcRoutingCode {
      get { return srcRoutingCode_; }
      set {
        srcRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 136;
    private long packageId_;
    /// <summary>
    /// references spread orderNumber, if a legged spread order or auto-hedge order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 139;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    /// <summary>
    /// Composite Security Key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 142;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// Security Type [Stock, Future, Option]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "security_desc" field.</summary>
    public const int SecurityDescFieldNumber = 145;
    private string securityDesc_ = "";
    /// <summary>
    /// additional security description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityDesc {
      get { return securityDesc_; }
      set {
        securityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 148;
    private string accnt_ = "";
    /// <summary>
    /// SR trading account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 151;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 154;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 157;
    private long groupingCode_;
    /// <summary>
    /// unique broker code;broker.pkey = (key + accnt + spdrSource + groupingCode)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 160;
    private string execBrkrCode_ = "";
    /// <summary>
    /// overrides the default executing broker for this parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_ex_dest" field.</summary>
    public const int ExternExDestFieldNumber = 163;
    private string externExDest_ = "";
    /// <summary>
    /// routing code for orders directed to an external order router (default = null); must match an exDest associated with a RouteDefinition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternExDest {
      get { return externExDest_; }
      set {
        externExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_params" field.</summary>
    public const int ExternParamsFieldNumber = 166;
    private string externParams_ = "";
    /// <summary>
    /// external algo names/parameters (usually just an algo name)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternParams {
      get { return externParams_; }
      set {
        externParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 169;
    private string strategy_ = "";
    /// <summary>
    /// client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 172;
    private string userName_ = "";
    /// <summary>
    /// name of the user entering the order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_source" field.</summary>
    public const int UserSourceFieldNumber = 1034;
    private global::Spiderrock.Protobuf.SpdrSource userSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    /// <summary>
    /// SpdrSource of this order (assumed to be the same as spdrSource if None)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource UserSource {
      get { return userSource_; }
      set {
        userSource_ = value;
      }
    }

    /// <summary>Field number for the "order_dttm" field.</summary>
    public const int OrderDttmFieldNumber = 178;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderDttm_;
    /// <summary>
    /// order entry time (from client;if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderDttm {
      get { return orderDttm_; }
      set {
        orderDttm_ = value;
      }
    }

    /// <summary>Field number for the "order_side" field.</summary>
    public const int OrderSideFieldNumber = 181;
    private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell OrderSide {
      get { return orderSide_; }
      set {
        orderSide_ = value;
      }
    }

    /// <summary>Field number for the "order_size" field.</summary>
    public const int OrderSizeFieldNumber = 184;
    private int orderSize_;
    /// <summary>
    /// maximum fill size (contracts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderSize {
      get { return orderSize_; }
      set {
        orderSize_ = value;
      }
    }

    /// <summary>Field number for the "order_active_size" field.</summary>
    public const int OrderActiveSizeFieldNumber = 187;
    private int orderActiveSize_;
    /// <summary>
    /// total activated size (total size released for execution) (-1 = all available size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderActiveSize {
      get { return orderActiveSize_; }
      set {
        orderActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "cur_cum_fill_quantity" field.</summary>
    public const int CurCumFillQuantityFieldNumber = 190;
    private int curCumFillQuantity_;
    /// <summary>
    /// set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurCumFillQuantity {
      get { return curCumFillQuantity_; }
      set {
        curCumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "add_cum_fill_quantity" field.</summary>
    public const int AddCumFillQuantityFieldNumber = 193;
    private global::Spiderrock.Protobuf.YesNo addCumFillQuantity_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AddCumFillQuantity {
      get { return addCumFillQuantity_; }
      set {
        addCumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "max_exposure_size" field.</summary>
    public const int MaxExposureSizeFieldNumber = 196;
    private int maxExposureSize_;
    /// <summary>
    /// maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxExposureSize {
      get { return maxExposureSize_; }
      set {
        maxExposureSize_ = value;
      }
    }

    /// <summary>Field number for the "num_make_exchanges" field.</summary>
    public const int NumMakeExchangesFieldNumber = 199;
    private int numMakeExchanges_;
    /// <summary>
    /// number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMakeExchanges {
      get { return numMakeExchanges_; }
      set {
        numMakeExchanges_ = value;
      }
    }

    /// <summary>Field number for the "public_size" field.</summary>
    public const int PublicSizeFieldNumber = 202;
    private global::Spiderrock.Protobuf.PublicSizeHandling publicSize_ = global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified;
    /// <summary>
    /// public order size handling: None=algo default; Randomize=randomize public size; MktSize=expose typical market size; FullSize=expose entire order size where possible; FullSizeR=randomize full size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PublicSizeHandling PublicSize {
      get { return publicSize_; }
      set {
        publicSize_ = value;
      }
    }

    /// <summary>Field number for the "can_overlap_cxl_repl" field.</summary>
    public const int CanOverlapCxlReplFieldNumber = 205;
    private global::Spiderrock.Protobuf.YesNo canOverlapCxlRepl_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CanOverlapCxlRepl {
      get { return canOverlapCxlRepl_; }
      set {
        canOverlapCxlRepl_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule" field.</summary>
    public const int ProgressRuleFieldNumber = 208;
    private global::Spiderrock.Protobuf.ProgressRule progressRule_ = global::Spiderrock.Protobuf.ProgressRule.Unspecified;
    /// <summary>
    /// Immediate = all size immediately available; TWAP = work from arrival to expiration; VWAP = work order not faster than participation rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProgressRule ProgressRule {
      get { return progressRule_; }
      set {
        progressRule_ = value;
      }
    }

    /// <summary>Field number for the "block_visibility" field.</summary>
    public const int BlockVisibilityFieldNumber = 211;
    private global::Spiderrock.Protobuf.BlockVisibility blockVisibility_ = global::Spiderrock.Protobuf.BlockVisibility.Unspecified;
    /// <summary>
    /// for BlockAuction orders, visibility (to responders) is neither, side only, or side + price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BlockVisibility BlockVisibility {
      get { return blockVisibility_; }
      set {
        blockVisibility_ = value;
      }
    }

    /// <summary>Field number for the "progress_slice_cnt" field.</summary>
    public const int ProgressSliceCntFieldNumber = 214;
    private int progressSliceCnt_;
    /// <summary>
    /// number of slices to use (default = 4 or 8) [max 20]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressSliceCnt {
      get { return progressSliceCnt_; }
      set {
        progressSliceCnt_ = value;
      }
    }

    /// <summary>Field number for the "progress_expose_time" field.</summary>
    public const int ProgressExposeTimeFieldNumber = 217;
    private int progressExposeTime_;
    /// <summary>
    /// minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressExposeTime {
      get { return progressExposeTime_; }
      set {
        progressExposeTime_ = value;
      }
    }

    /// <summary>Field number for the "vwap_participation" field.</summary>
    public const int VwapParticipationFieldNumber = 220;
    private float vwapParticipation_;
    /// <summary>
    /// target vwap participation rate (target % of trade activity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VwapParticipation {
      get { return vwapParticipation_; }
      set {
        vwapParticipation_ = value;
      }
    }

    /// <summary>Field number for the "min_mkt_on_close_pct" field.</summary>
    public const int MinMktOnClosePctFieldNumber = 223;
    private int minMktOnClosePct_;
    /// <summary>
    /// Minimum pct [0 - 100] of order reserved for the on-close (MOC) auction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinMktOnClosePct {
      get { return minMktOnClosePct_; }
      set {
        minMktOnClosePct_ = value;
      }
    }

    /// <summary>Field number for the "trigger_type" field.</summary>
    public const int TriggerTypeFieldNumber = 226;
    private global::Spiderrock.Protobuf.TriggerType triggerType_ = global::Spiderrock.Protobuf.TriggerType.Unspecified;
    /// <summary>
    /// type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "trigger_level" field.</summary>
    public const int TriggerLevelFieldNumber = 229;
    private float triggerLevel_;
    /// <summary>
    /// stop/trigger level for parent order to go active (can be either a price or vol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TriggerLevel {
      get { return triggerLevel_; }
      set {
        triggerLevel_ = value;
      }
    }

    /// <summary>Field number for the "auction_responder" field.</summary>
    public const int AuctionResponderFieldNumber = 232;
    private global::Spiderrock.Protobuf.AuctionResponder auctionResponder_ = global::Spiderrock.Protobuf.AuctionResponder.Unspecified;
    /// <summary>
    /// if set, parent order can be an auction responder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionResponder AuctionResponder {
      get { return auctionResponder_; }
      set {
        auctionResponder_ = value;
      }
    }

    /// <summary>Field number for the "max_make_exch_fee" field.</summary>
    public const int MaxMakeExchFeeFieldNumber = 235;
    private float maxMakeExchFee_;
    /// <summary>
    /// maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMakeExchFee {
      get { return maxMakeExchFee_; }
      set {
        maxMakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "max_take_exch_fee" field.</summary>
    public const int MaxTakeExchFeeFieldNumber = 238;
    private float maxTakeExchFee_;
    /// <summary>
    /// maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxTakeExchFee {
      get { return maxTakeExchFee_; }
      set {
        maxTakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "inc_take_exch_fee" field.</summary>
    public const int IncTakeExchFeeFieldNumber = 241;
    private global::Spiderrock.Protobuf.IncExchFee incTakeExchFee_ = global::Spiderrock.Protobuf.IncExchFee.Unspecified;
    /// <summary>
    /// include exchange fee in probability and surface based take limit calculations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.IncExchFee IncTakeExchFee {
      get { return incTakeExchFee_; }
      set {
        incTakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "inc_make_exch_fee" field.</summary>
    public const int IncMakeExchFeeFieldNumber = 244;
    private global::Spiderrock.Protobuf.IncExchFee incMakeExchFee_ = global::Spiderrock.Protobuf.IncExchFee.Unspecified;
    /// <summary>
    /// include exchange fee in probability and surface based make limit calculations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.IncExchFee IncMakeExchFee {
      get { return incMakeExchFee_; }
      set {
        incMakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "make_exch_rule" field.</summary>
    public const int MakeExchRuleFieldNumber = 247;
    private global::Spiderrock.Protobuf.MakeExchRule makeExchRule_ = global::Spiderrock.Protobuf.MakeExchRule.Unspecified;
    /// <summary>
    /// ActiveMaker exch preference: 'MaxPart' = max participation; 'FeeOrder' = minimize fees [max rebates]; 'ImprvOnly' will only make when improving NBBO; 'RoundRobin' will rotate through exch list; 'ProRataOptim' will post on pro-rata only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MakeExchRule MakeExchRule {
      get { return makeExchRule_; }
      set {
        makeExchRule_ = value;
      }
    }

    /// <summary>Field number for the "cxl_uPrc_range" field.</summary>
    public const int CxlUPrcRangeFieldNumber = 250;
    private global::Spiderrock.Protobuf.UPrcCxl cxlUPrcRange_ = global::Spiderrock.Protobuf.UPrcCxl.Unspecified;
    /// <summary>
    /// cancel parent order if/when outside the uPrice range [ _Halt = also cancel if halted ]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UPrcCxl CxlUPrcRange {
      get { return cxlUPrcRange_; }
      set {
        cxlUPrcRange_ = value;
      }
    }

    /// <summary>Field number for the "min_uBid" field.</summary>
    public const int MinUBidFieldNumber = 253;
    private float minUBid_;
    /// <summary>
    /// [optional]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinUBid {
      get { return minUBid_; }
      set {
        minUBid_ = value;
      }
    }

    /// <summary>Field number for the "max_uAsk" field.</summary>
    public const int MaxUAskFieldNumber = 256;
    private float maxUAsk_;
    /// <summary>
    /// [optional] (&lt; $0.01 = none)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxUAsk {
      get { return maxUAsk_; }
      set {
        maxUAsk_ = value;
      }
    }

    /// <summary>Field number for the "min_max_type" field.</summary>
    public const int MinMaxTypeFieldNumber = 259;
    private global::Spiderrock.Protobuf.MinMaxType minMaxType_ = global::Spiderrock.Protobuf.MinMaxType.Unspecified;
    /// <summary>
    /// if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MinMaxType MinMaxType {
      get { return minMaxType_; }
      set {
        minMaxType_ = value;
      }
    }

    /// <summary>Field number for the "min_option_px" field.</summary>
    public const int MinOptionPxFieldNumber = 262;
    private float minOptionPx_;
    /// <summary>
    /// [optional] option price floor for tied to stock orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinOptionPx {
      get { return minOptionPx_; }
      set {
        minOptionPx_ = value;
      }
    }

    /// <summary>Field number for the "max_child_orders" field.</summary>
    public const int MaxChildOrdersFieldNumber = 265;
    private int maxChildOrders_;
    /// <summary>
    /// maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxChildOrders {
      get { return maxChildOrders_; }
      set {
        maxChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "exch_mask" field.</summary>
    public const int ExchMaskFieldNumber = 268;
    private uint exchMask_;
    /// <summary>
    /// eligible exchanges (0 = all)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExchMask {
      get { return exchMask_; }
      set {
        exchMask_ = value;
      }
    }

    /// <summary>Field number for the "spdr_stage_type" field.</summary>
    public const int SpdrStageTypeFieldNumber = 271;
    private global::Spiderrock.Protobuf.SpdrStageType spdrStageType_ = global::Spiderrock.Protobuf.SpdrStageType.Unspecified;
    /// <summary>
    /// note: stageType != None implies both KeepAlive behavior and makes the order visible on tools
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrStageType SpdrStageType {
      get { return spdrStageType_; }
      set {
        spdrStageType_ = value;
      }
    }

    /// <summary>Field number for the "market_session" field.</summary>
    public const int MarketSessionFieldNumber = 1035;
    private global::Spiderrock.Protobuf.MarketSession marketSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession MarketSession {
      get { return marketSession_; }
      set {
        marketSession_ = value;
      }
    }

    /// <summary>Field number for the "start_dttm" field.</summary>
    public const int StartDttmFieldNumber = 277;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDttm_;
    /// <summary>
    /// [optional] (parent order start time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDttm {
      get { return startDttm_; }
      set {
        startDttm_ = value;
      }
    }

    /// <summary>Field number for the "order_duration" field.</summary>
    public const int OrderDurationFieldNumber = 280;
    private int orderDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderDuration {
      get { return orderDuration_; }
      set {
        orderDuration_ = value;
      }
    }

    /// <summary>Field number for the "active_duration" field.</summary>
    public const int ActiveDurationFieldNumber = 1036;
    private int activeDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveDuration {
      get { return activeDuration_; }
      set {
        activeDuration_ = value;
      }
    }

    /// <summary>Field number for the "good_till_dttm" field.</summary>
    public const int GoodTillDttmFieldNumber = 283;
    private global::Google.Protobuf.WellKnownTypes.Timestamp goodTillDttm_;
    /// <summary>
    /// [optional] (default: 2099-01-01)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp GoodTillDttm {
      get { return goodTillDttm_; }
      set {
        goodTillDttm_ = value;
      }
    }

    /// <summary>Field number for the "start_type" field.</summary>
    public const int StartTypeFieldNumber = 286;
    private global::Spiderrock.Protobuf.StartType startType_ = global::Spiderrock.Protobuf.StartType.Unspecified;
    /// <summary>
    /// WaitTrigger associates this order with a triggerGroupId.  The initial wave of child orders from the TriggerGroup will be send when a (final) parent order with startType=TriggerAll or when an external trigger signal is received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StartType StartType {
      get { return startType_; }
      set {
        startType_ = value;
      }
    }

    /// <summary>Field number for the "trigger_group_id" field.</summary>
    public const int TriggerGroupIdFieldNumber = 289;
    private long triggerGroupId_;
    /// <summary>
    /// triggerGroupId is required if startType=WaitTrigger; note that child orders from all parent orders in the trigger group will be organized and released optimally when the triggerGroup is released
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerGroupId {
      get { return triggerGroupId_; }
      set {
        triggerGroupId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_timestamp" field.</summary>
    public const int TriggerTimestampFieldNumber = 292;
    private long triggerTimestamp_;
    /// <summary>
    /// WaitTrigger trigger timestamp (nanoseconds since epoch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerTimestamp {
      get { return triggerTimestamp_; }
      set {
        triggerTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 298;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 301;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 304;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_class" field.</summary>
    public const int TakeLimitClassFieldNumber = 307;
    private global::Spiderrock.Protobuf.SpdrLimitClass takeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice +/- offset, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass TakeLimitClass {
      get { return takeLimitClass_; }
      set {
        takeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_class" field.</summary>
    public const int MakeLimitClassFieldNumber = 310;
    private global::Spiderrock.Protobuf.SpdrLimitClass makeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice +/- offset, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass MakeLimitClass {
      get { return makeLimitClass_; }
      set {
        makeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "take_reach_rule" field.</summary>
    public const int TakeReachRuleFieldNumber = 313;
    private global::Spiderrock.Protobuf.ReachRule takeReachRule_ = global::Spiderrock.Protobuf.ReachRule.Unspecified;
    /// <summary>
    /// None = size immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size &lt; avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ReachRule TakeReachRule {
      get { return takeReachRule_; }
      set {
        takeReachRule_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_limit" field.</summary>
    public const int OrderPrcLimitFieldNumber = 316;
    private double orderPrcLimit_;
    /// <summary>
    /// Applies if LimitType = Prc[]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcLimit {
      get { return orderPrcLimit_; }
      set {
        orderPrcLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_uPrc" field.</summary>
    public const int OrderRefUPrcFieldNumber = 319;
    private double orderRefUPrc_;
    /// <summary>
    /// default=underlier.mid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderRefUPrc {
      get { return orderRefUPrc_; }
      set {
        orderRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_delta" field.</summary>
    public const int OrderRefDeltaFieldNumber = 322;
    private float orderRefDelta_;
    /// <summary>
    /// default=option.delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefDelta {
      get { return orderRefDelta_; }
      set {
        orderRefDelta_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_gamma" field.</summary>
    public const int OrderRefGammaFieldNumber = 325;
    private float orderRefGamma_;
    /// <summary>
    /// default=option.gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefGamma {
      get { return orderRefGamma_; }
      set {
        orderRefGamma_ = value;
      }
    }

    /// <summary>Field number for the "order_vol_limit" field.</summary>
    public const int OrderVolLimitFieldNumber = 328;
    private float orderVolLimit_;
    /// <summary>
    /// Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderVolLimit {
      get { return orderVolLimit_; }
      set {
        orderVolLimit_ = value;
      }
    }

    /// <summary>Field number for the "rate_override" field.</summary>
    public const int RateOverrideFieldNumber = 331;
    private float rateOverride_;
    /// <summary>
    /// zero = ignore; > zero = override
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RateOverride {
      get { return rateOverride_; }
      set {
        rateOverride_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_override" field.</summary>
    public const int SdivOverrideFieldNumber = 334;
    private float sdivOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivOverride {
      get { return sdivOverride_; }
      set {
        sdivOverride_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_override" field.</summary>
    public const int DdivOverrideFieldNumber = 337;
    private string ddivOverride_ = "";
    /// <summary>
    /// discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DdivOverride {
      get { return ddivOverride_; }
      set {
        ddivOverride_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "override_code" field.</summary>
    public const int OverrideCodeFieldNumber = 340;
    private global::Spiderrock.Protobuf.OverrideCode overrideCode_ = global::Spiderrock.Protobuf.OverrideCode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OverrideCode OverrideCode {
      get { return overrideCode_; }
      set {
        overrideCode_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_offset" field.</summary>
    public const int OrderPrcOffsetFieldNumber = 343;
    private double orderPrcOffset_;
    /// <summary>
    /// default=0 [surface, relX and pegX limit offsets]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcOffset {
      get { return orderPrcOffset_; }
      set {
        orderPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "state_model" field.</summary>
    public const int StateModelFieldNumber = 346;
    private global::Spiderrock.Protobuf.StateModel stateModel_ = global::Spiderrock.Protobuf.StateModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StateModel StateModel {
      get { return stateModel_; }
      set {
        stateModel_ = value;
      }
    }

    /// <summary>Field number for the "u_state_model" field.</summary>
    public const int UStateModelFieldNumber = 349;
    private global::Spiderrock.Protobuf.StateModel uStateModel_ = global::Spiderrock.Protobuf.StateModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StateModel UStateModel {
      get { return uStateModel_; }
      set {
        uStateModel_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_type" field.</summary>
    public const int TakeAlphaTypeFieldNumber = 352;
    private global::Spiderrock.Protobuf.AlphaType takeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if takeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType TakeAlphaType {
      get { return takeAlphaType_; }
      set {
        takeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_type" field.</summary>
    public const int MakeAlphaTypeFieldNumber = 355;
    private global::Spiderrock.Protobuf.AlphaType makeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if makeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType MakeAlphaType {
      get { return makeAlphaType_; }
      set {
        makeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_factor" field.</summary>
    public const int TakeAlphaFactorFieldNumber = 358;
    private float takeAlphaFactor_;
    /// <summary>
    /// [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeAlphaFactor {
      get { return takeAlphaFactor_; }
      set {
        takeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_factor" field.</summary>
    public const int MakeAlphaFactorFieldNumber = 361;
    private float makeAlphaFactor_;
    /// <summary>
    /// [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeAlphaFactor {
      get { return makeAlphaFactor_; }
      set {
        makeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "take_probability" field.</summary>
    public const int TakeProbabilityFieldNumber = 364;
    private float takeProbability_;
    /// <summary>
    /// takeProbLimit = takeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeProbability {
      get { return takeProbability_; }
      set {
        takeProbability_ = value;
      }
    }

    /// <summary>Field number for the "make_probability" field.</summary>
    public const int MakeProbabilityFieldNumber = 367;
    private float makeProbability_;
    /// <summary>
    /// makeProbLimit = makeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeProbability {
      get { return makeProbability_; }
      set {
        makeProbability_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_prc_offset" field.</summary>
    public const int TakeSurfPrcOffsetFieldNumber = 370;
    private double takeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeSurfPrcOffset {
      get { return takeSurfPrcOffset_; }
      set {
        takeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_vol_offset" field.</summary>
    public const int TakeSurfVolOffsetFieldNumber = 373;
    private float takeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfVolOffset {
      get { return takeSurfVolOffset_; }
      set {
        takeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_width_offset" field.</summary>
    public const int TakeSurfWidthOffsetFieldNumber = 376;
    private float takeSurfWidthOffset_;
    /// <summary>
    /// [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfWidthOffset {
      get { return takeSurfWidthOffset_; }
      set {
        takeSurfWidthOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_prc_offset" field.</summary>
    public const int MakeSurfPrcOffsetFieldNumber = 379;
    private double makeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeSurfPrcOffset {
      get { return makeSurfPrcOffset_; }
      set {
        makeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_vol_offset" field.</summary>
    public const int MakeSurfVolOffsetFieldNumber = 382;
    private float makeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfVolOffset {
      get { return makeSurfVolOffset_; }
      set {
        makeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_width_offset" field.</summary>
    public const int MakeSurfWidthOffsetFieldNumber = 385;
    private float makeSurfWidthOffset_;
    /// <summary>
    /// [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfWidthOffset {
      get { return makeSurfWidthOffset_; }
      set {
        makeSurfWidthOffset_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_mult" field.</summary>
    public const int OrderRefEventMultFieldNumber = 388;
    private float orderRefEventMult_;
    /// <summary>
    /// expected underlier abs move (0.01 = 1%) @ orderRefEventDttm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefEventMult {
      get { return orderRefEventMult_; }
      set {
        orderRefEventMult_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_dttm" field.</summary>
    public const int OrderRefEventDttmFieldNumber = 391;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderRefEventDttm_;
    /// <summary>
    /// Date/time of the next event.  Note that events are usually earnings but are not required to be.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderRefEventDttm {
      get { return orderRefEventDttm_; }
      set {
        orderRefEventDttm_ = value;
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 394;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_instrument" field.</summary>
    public const int HedgeInstrumentFieldNumber = 397;
    private global::Spiderrock.Protobuf.HedgeInst hedgeInstrument_ = global::Spiderrock.Protobuf.HedgeInst.Unspecified;
    /// <summary>
    /// Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeInst HedgeInstrument {
      get { return hedgeInstrument_; }
      set {
        hedgeInstrument_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 400;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_beta_ratio" field.</summary>
    public const int HedgeBetaRatioFieldNumber = 403;
    private float hedgeBetaRatio_;
    /// <summary>
    /// portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeBetaRatio {
      get { return hedgeBetaRatio_; }
      set {
        hedgeBetaRatio_ = value;
      }
    }

    /// <summary>Field number for the "hedge_scope" field.</summary>
    public const int HedgeScopeFieldNumber = 406;
    private global::Spiderrock.Protobuf.HedgeScope hedgeScope_ = global::Spiderrock.Protobuf.HedgeScope.Unspecified;
    /// <summary>
    /// hedge group scope [RiskGroup or Accnt]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeScope HedgeScope {
      get { return hedgeScope_; }
      set {
        hedgeScope_ = value;
      }
    }

    /// <summary>Field number for the "hedge_session" field.</summary>
    public const int HedgeSessionFieldNumber = 1037;
    private global::Spiderrock.Protobuf.MarketSession hedgeSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    /// <summary>
    /// market session for the autohedge order [defaults to pOrder.marketSession]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession HedgeSession {
      get { return hedgeSession_; }
      set {
        hedgeSession_ = value;
      }
    }

    /// <summary>Field number for the "extern_hedge_ex_dest" field.</summary>
    public const int ExternHedgeExDestFieldNumber = 412;
    private string externHedgeExDest_ = "";
    /// <summary>
    /// external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeExDest {
      get { return externHedgeExDest_; }
      set {
        externHedgeExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_hedge_params" field.</summary>
    public const int ExternHedgeParamsFieldNumber = 415;
    private string externHedgeParams_ = "";
    /// <summary>
    /// external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeParams {
      get { return externHedgeParams_; }
      set {
        externHedgeParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 418;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// used to override firmType in account config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "order_capacity" field.</summary>
    public const int OrderCapacityFieldNumber = 421;
    private global::Spiderrock.Protobuf.OrderCapacity orderCapacity_ = global::Spiderrock.Protobuf.OrderCapacity.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OrderCapacity OrderCapacity {
      get { return orderCapacity_; }
      set {
        orderCapacity_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 424;
    private global::Spiderrock.Protobuf.PositionType positionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "ssale_flag" field.</summary>
    public const int SsaleFlagFieldNumber = 427;
    private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// used to determine stock auto-hedge flags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
      get { return ssaleFlag_; }
      set {
        ssaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "no_cross_group" field.</summary>
    public const int NoCrossGroupFieldNumber = 430;
    private string noCrossGroup_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NoCrossGroup {
      get { return noCrossGroup_; }
      set {
        noCrossGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exch_trader_id" field.</summary>
    public const int ExchTraderIdFieldNumber = 433;
    private string exchTraderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchTraderId {
      get { return exchTraderId_; }
      set {
        exchTraderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "large_trader_id" field.</summary>
    public const int LargeTraderIdFieldNumber = 436;
    private string largeTraderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LargeTraderId {
      get { return largeTraderId_; }
      set {
        largeTraderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_location" field.</summary>
    public const int TradingLocationFieldNumber = 439;
    private string tradingLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradingLocation {
      get { return tradingLocation_; }
      set {
        tradingLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lead_side" field.</summary>
    public const int LeadSideFieldNumber = 484;
    private global::Spiderrock.Protobuf.BuySell leadSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// for legged orders, which side to lead with.  (optional, None ok)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell LeadSide {
      get { return leadSide_; }
      set {
        leadSide_ = value;
      }
    }

    /// <summary>Field number for the "max_completion_slippage" field.</summary>
    public const int MaxCompletionSlippageFieldNumber = 487;
    private double maxCompletionSlippage_;
    /// <summary>
    /// maximum price slippage to complete an open basket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxCompletionSlippage {
      get { return maxCompletionSlippage_; }
      set {
        maxCompletionSlippage_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_premium" field.</summary>
    public const int OrderRefPremiumFieldNumber = 490;
    private float orderRefPremium_;
    /// <summary>
    /// reference premium (mleg orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefPremium {
      get { return orderRefPremium_; }
      set {
        orderRefPremium_ = value;
      }
    }

    /// <summary>Field number for the "notice_number" field.</summary>
    public const int NoticeNumberFieldNumber = 1032;
    private long noticeNumber_;
    /// <summary>
    /// required when parentOrderHandling = BlockResponse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NoticeNumber {
      get { return noticeNumber_; }
      set {
        noticeNumber_ = value;
      }
    }

    /// <summary>Field number for the "theo_vol" field.</summary>
    public const int TheoVolFieldNumber = 496;
    private float theoVol_;
    /// <summary>
    /// client supplied theoretical volatility (used for markup only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoVol {
      get { return theoVol_; }
      set {
        theoVol_ = value;
      }
    }

    /// <summary>Field number for the "cl_arrive_mark" field.</summary>
    public const int ClArriveMarkFieldNumber = 499;
    private float clArriveMark_;
    /// <summary>
    /// client specified arrival mark (passed through to ParentExecution; markup only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClArriveMark {
      get { return clArriveMark_; }
      set {
        clArriveMark_ = value;
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 502;
    private long riskGroupId_;
    /// <summary>
    /// all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "req_aux_risk_group_ctrl" field.</summary>
    public const int ReqAuxRiskGroupCtrlFieldNumber = 1033;
    private global::Spiderrock.Protobuf.YesNo reqAuxRiskGroupCtrl_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ReqAuxRiskGroupCtrl {
      get { return reqAuxRiskGroupCtrl_; }
      set {
        reqAuxRiskGroupCtrl_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric1_src" field.</summary>
    public const int RefRMetric1SrcFieldNumber = 442;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric1Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric1Src {
      get { return refRMetric1Src_; }
      set {
        refRMetric1Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric2_src" field.</summary>
    public const int RefRMetric2SrcFieldNumber = 445;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric2Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric2Src {
      get { return refRMetric2Src_; }
      set {
        refRMetric2Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric3_src" field.</summary>
    public const int RefRMetric3SrcFieldNumber = 448;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric3Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric3Src {
      get { return refRMetric3Src_; }
      set {
        refRMetric3Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric4_src" field.</summary>
    public const int RefRMetric4SrcFieldNumber = 451;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric4Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric4Src {
      get { return refRMetric4Src_; }
      set {
        refRMetric4Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric5_src" field.</summary>
    public const int RefRMetric5SrcFieldNumber = 454;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric5Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric5Src {
      get { return refRMetric5Src_; }
      set {
        refRMetric5Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric6_src" field.</summary>
    public const int RefRMetric6SrcFieldNumber = 457;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric6Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric6Src {
      get { return refRMetric6Src_; }
      set {
        refRMetric6Src_ = value;
      }
    }

    /// <summary>Field number for the "ref_rMetric7_src" field.</summary>
    public const int RefRMetric7SrcFieldNumber = 460;
    private global::Spiderrock.Protobuf.RMetricSource refRMetric7Src_ = global::Spiderrock.Protobuf.RMetricSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RMetricSource RefRMetric7Src {
      get { return refRMetric7Src_; }
      set {
        refRMetric7Src_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric1" field.</summary>
    public const int OrderRefRMetric1FieldNumber = 463;
    private float orderRefRMetric1_;
    /// <summary>
    /// user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric1 {
      get { return orderRefRMetric1_; }
      set {
        orderRefRMetric1_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric2" field.</summary>
    public const int OrderRefRMetric2FieldNumber = 466;
    private float orderRefRMetric2_;
    /// <summary>
    /// user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric2 {
      get { return orderRefRMetric2_; }
      set {
        orderRefRMetric2_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric3" field.</summary>
    public const int OrderRefRMetric3FieldNumber = 469;
    private float orderRefRMetric3_;
    /// <summary>
    /// user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric3 {
      get { return orderRefRMetric3_; }
      set {
        orderRefRMetric3_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric4" field.</summary>
    public const int OrderRefRMetric4FieldNumber = 472;
    private float orderRefRMetric4_;
    /// <summary>
    /// user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric4 {
      get { return orderRefRMetric4_; }
      set {
        orderRefRMetric4_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric5" field.</summary>
    public const int OrderRefRMetric5FieldNumber = 475;
    private float orderRefRMetric5_;
    /// <summary>
    /// user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric5 {
      get { return orderRefRMetric5_; }
      set {
        orderRefRMetric5_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric6" field.</summary>
    public const int OrderRefRMetric6FieldNumber = 478;
    private float orderRefRMetric6_;
    /// <summary>
    /// user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric6 {
      get { return orderRefRMetric6_; }
      set {
        orderRefRMetric6_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_rMetric7" field.</summary>
    public const int OrderRefRMetric7FieldNumber = 481;
    private float orderRefRMetric7_;
    /// <summary>
    /// user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefRMetric7 {
      get { return orderRefRMetric7_; }
      set {
        orderRefRMetric7_ = value;
      }
    }

    /// <summary>Field number for the "exp_day_wt_vega_offset" field.</summary>
    public const int ExpDayWtVegaOffsetFieldNumber = 529;
    private float expDayWtVegaOffset_;
    /// <summary>
    /// max acct+symbol day wtVega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExpDayWtVegaOffset {
      get { return expDayWtVegaOffset_; }
      set {
        expDayWtVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_wt_vega_ln" field.</summary>
    public const int MaxExpDayWtVegaLnFieldNumber = 523;
    private float maxExpDayWtVegaLn_;
    /// <summary>
    /// max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayWtVegaLn {
      get { return maxExpDayWtVegaLn_; }
      set {
        maxExpDayWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_wt_vega_sh" field.</summary>
    public const int MaxExpDayWtVegaShFieldNumber = 526;
    private float maxExpDayWtVegaSh_;
    /// <summary>
    /// max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayWtVegaSh {
      get { return maxExpDayWtVegaSh_; }
      set {
        maxExpDayWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_rMetric6_ln" field.</summary>
    public const int MaxExpDayRMetric6LnFieldNumber = 559;
    private float maxExpDayRMetric6Ln_;
    /// <summary>
    /// max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayRMetric6Ln {
      get { return maxExpDayRMetric6Ln_; }
      set {
        maxExpDayRMetric6Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_rMetric6_sh" field.</summary>
    public const int MaxExpDayRMetric6ShFieldNumber = 562;
    private float maxExpDayRMetric6Sh_;
    /// <summary>
    /// max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayRMetric6Sh {
      get { return maxExpDayRMetric6Sh_; }
      set {
        maxExpDayRMetric6Sh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_dDelta_offset" field.</summary>
    public const int SymDayDDeltaOffsetFieldNumber = 556;
    private float symDayDDeltaOffset_;
    /// <summary>
    /// max acct+symbol day $delta offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayDDeltaOffset {
      get { return symDayDDeltaOffset_; }
      set {
        symDayDDeltaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_dDelta_ln" field.</summary>
    public const int MaxSymDayDDeltaLnFieldNumber = 550;
    private float maxSymDayDDeltaLn_;
    /// <summary>
    /// max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayDDeltaLn {
      get { return maxSymDayDDeltaLn_; }
      set {
        maxSymDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_dDelta_sh" field.</summary>
    public const int MaxSymDayDDeltaShFieldNumber = 553;
    private float maxSymDayDDeltaSh_;
    /// <summary>
    /// max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayDDeltaSh {
      get { return maxSymDayDDeltaSh_; }
      set {
        maxSymDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_vega_offset" field.</summary>
    public const int SymDayVegaOffsetFieldNumber = 538;
    private float symDayVegaOffset_;
    /// <summary>
    /// max acct+symbol day vega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayVegaOffset {
      get { return symDayVegaOffset_; }
      set {
        symDayVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_vega_ln" field.</summary>
    public const int MaxSymDayVegaLnFieldNumber = 532;
    private float maxSymDayVegaLn_;
    /// <summary>
    /// max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayVegaLn {
      get { return maxSymDayVegaLn_; }
      set {
        maxSymDayVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_vega_sh" field.</summary>
    public const int MaxSymDayVegaShFieldNumber = 535;
    private float maxSymDayVegaSh_;
    /// <summary>
    /// max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayVegaSh {
      get { return maxSymDayVegaSh_; }
      set {
        maxSymDayVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_wt_vega_offset" field.</summary>
    public const int SymDayWtVegaOffsetFieldNumber = 547;
    private float symDayWtVegaOffset_;
    /// <summary>
    /// max acct+symbol day wtVega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayWtVegaOffset {
      get { return symDayWtVegaOffset_; }
      set {
        symDayWtVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_wt_vega_ln" field.</summary>
    public const int MaxSymDayWtVegaLnFieldNumber = 541;
    private float maxSymDayWtVegaLn_;
    /// <summary>
    /// max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayWtVegaLn {
      get { return maxSymDayWtVegaLn_; }
      set {
        maxSymDayWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_wt_vega_sh" field.</summary>
    public const int MaxSymDayWtVegaShFieldNumber = 544;
    private float maxSymDayWtVegaSh_;
    /// <summary>
    /// max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayWtVegaSh {
      get { return maxSymDayWtVegaSh_; }
      set {
        maxSymDayWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_rMetric7_ln" field.</summary>
    public const int MaxSymDayRMetric7LnFieldNumber = 568;
    private float maxSymDayRMetric7Ln_;
    /// <summary>
    /// max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayRMetric7Ln {
      get { return maxSymDayRMetric7Ln_; }
      set {
        maxSymDayRMetric7Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_rMetric7_sh" field.</summary>
    public const int MaxSymDayRMetric7ShFieldNumber = 571;
    private float maxSymDayRMetric7Sh_;
    /// <summary>
    /// max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayRMetric7Sh {
      get { return maxSymDayRMetric7Sh_; }
      set {
        maxSymDayRMetric7Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_ln" field.</summary>
    public const int MaxGrpDayDDeltaLnFieldNumber = 577;
    private float maxGrpDayDDeltaLn_;
    /// <summary>
    /// max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaLn {
      get { return maxGrpDayDDeltaLn_; }
      set {
        maxGrpDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_sh" field.</summary>
    public const int MaxGrpDayDDeltaShFieldNumber = 580;
    private float maxGrpDayDDeltaSh_;
    /// <summary>
    /// max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaSh {
      get { return maxGrpDayDDeltaSh_; }
      set {
        maxGrpDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_ln" field.</summary>
    public const int MaxGrpDayVegaLnFieldNumber = 586;
    private float maxGrpDayVegaLn_;
    /// <summary>
    /// max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaLn {
      get { return maxGrpDayVegaLn_; }
      set {
        maxGrpDayVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_sh" field.</summary>
    public const int MaxGrpDayVegaShFieldNumber = 589;
    private float maxGrpDayVegaSh_;
    /// <summary>
    /// max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaSh {
      get { return maxGrpDayVegaSh_; }
      set {
        maxGrpDayVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_abs" field.</summary>
    public const int MaxGrpDayVegaAbsFieldNumber = 592;
    private float maxGrpDayVegaAbs_;
    /// <summary>
    /// max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaAbs {
      get { return maxGrpDayVegaAbs_; }
      set {
        maxGrpDayVegaAbs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_vega_ratio" field.</summary>
    public const int GrpDayVegaRatioFieldNumber = 595;
    private float grpDayVegaRatio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayVegaRatio {
      get { return grpDayVegaRatio_; }
      set {
        grpDayVegaRatio_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_ln" field.</summary>
    public const int MaxGrpDayContractsLnFieldNumber = 646;
    private int maxGrpDayContractsLn_;
    /// <summary>
    /// max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsLn {
      get { return maxGrpDayContractsLn_; }
      set {
        maxGrpDayContractsLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_sh" field.</summary>
    public const int MaxGrpDayContractsShFieldNumber = 649;
    private int maxGrpDayContractsSh_;
    /// <summary>
    /// max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsSh {
      get { return maxGrpDayContractsSh_; }
      set {
        maxGrpDayContractsSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_abs" field.</summary>
    public const int MaxGrpDayContractsAbsFieldNumber = 652;
    private int maxGrpDayContractsAbs_;
    /// <summary>
    /// max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsAbs {
      get { return maxGrpDayContractsAbs_; }
      set {
        maxGrpDayContractsAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_ln" field.</summary>
    public const int MaxGrpDayRMetric1LnFieldNumber = 610;
    private float maxGrpDayRMetric1Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Ln {
      get { return maxGrpDayRMetric1Ln_; }
      set {
        maxGrpDayRMetric1Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_sh" field.</summary>
    public const int MaxGrpDayRMetric1ShFieldNumber = 613;
    private float maxGrpDayRMetric1Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Sh {
      get { return maxGrpDayRMetric1Sh_; }
      set {
        maxGrpDayRMetric1Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_abs" field.</summary>
    public const int MaxGrpDayRMetric1AbsFieldNumber = 616;
    private float maxGrpDayRMetric1Abs_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Abs {
      get { return maxGrpDayRMetric1Abs_; }
      set {
        maxGrpDayRMetric1Abs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_rMetric1_ratio" field.</summary>
    public const int GrpDayRMetric1RatioFieldNumber = 619;
    private float grpDayRMetric1Ratio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayRMetric1Ratio {
      get { return grpDayRMetric1Ratio_; }
      set {
        grpDayRMetric1Ratio_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric2_ln" field.</summary>
    public const int MaxGrpDayRMetric2LnFieldNumber = 622;
    private float maxGrpDayRMetric2Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric2Ln {
      get { return maxGrpDayRMetric2Ln_; }
      set {
        maxGrpDayRMetric2Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric2_sh" field.</summary>
    public const int MaxGrpDayRMetric2ShFieldNumber = 625;
    private float maxGrpDayRMetric2Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric2Sh {
      get { return maxGrpDayRMetric2Sh_; }
      set {
        maxGrpDayRMetric2Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric3_ln" field.</summary>
    public const int MaxGrpDayRMetric3LnFieldNumber = 628;
    private float maxGrpDayRMetric3Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric3Ln {
      get { return maxGrpDayRMetric3Ln_; }
      set {
        maxGrpDayRMetric3Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric3_sh" field.</summary>
    public const int MaxGrpDayRMetric3ShFieldNumber = 631;
    private float maxGrpDayRMetric3Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric3Sh {
      get { return maxGrpDayRMetric3Sh_; }
      set {
        maxGrpDayRMetric3Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric4_ln" field.</summary>
    public const int MaxGrpDayRMetric4LnFieldNumber = 634;
    private float maxGrpDayRMetric4Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric4Ln {
      get { return maxGrpDayRMetric4Ln_; }
      set {
        maxGrpDayRMetric4Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric4_sh" field.</summary>
    public const int MaxGrpDayRMetric4ShFieldNumber = 637;
    private float maxGrpDayRMetric4Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric4Sh {
      get { return maxGrpDayRMetric4Sh_; }
      set {
        maxGrpDayRMetric4Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric5_ln" field.</summary>
    public const int MaxGrpDayRMetric5LnFieldNumber = 640;
    private float maxGrpDayRMetric5Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric5Ln {
      get { return maxGrpDayRMetric5Ln_; }
      set {
        maxGrpDayRMetric5Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric5_sh" field.</summary>
    public const int MaxGrpDayRMetric5ShFieldNumber = 643;
    private float maxGrpDayRMetric5Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric5Sh {
      get { return maxGrpDayRMetric5Sh_; }
      set {
        maxGrpDayRMetric5Sh_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_dDelta_ln" field.</summary>
    public const int SymEmaCxlDDeltaLnFieldNumber = 655;
    private float symEmaCxlDDeltaLn_;
    /// <summary>
    /// max acct+symbol 60s EMA $delta long (positive number; &lt;= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlDDeltaLn {
      get { return symEmaCxlDDeltaLn_; }
      set {
        symEmaCxlDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_dDelta_sh" field.</summary>
    public const int SymEmaCxlDDeltaShFieldNumber = 658;
    private float symEmaCxlDDeltaSh_;
    /// <summary>
    /// max acct+symbol 60s EMA $delta short (positive number; &lt;= 0 is no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlDDeltaSh {
      get { return symEmaCxlDDeltaSh_; }
      set {
        symEmaCxlDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_wt_vega_ln" field.</summary>
    public const int SymEmaCxlWtVegaLnFieldNumber = 661;
    private float symEmaCxlWtVegaLn_;
    /// <summary>
    /// max acct+symbol 60s EMA wtVega long (positive number; &lt;= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlWtVegaLn {
      get { return symEmaCxlWtVegaLn_; }
      set {
        symEmaCxlWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_wt_vega_sh" field.</summary>
    public const int SymEmaCxlWtVegaShFieldNumber = 664;
    private float symEmaCxlWtVegaSh_;
    /// <summary>
    /// max acct+symbol 60s EMA wtVega short (positive number; &lt;= 0 is no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlWtVegaSh {
      get { return symEmaCxlWtVegaSh_; }
      set {
        symEmaCxlWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "last_fill_dttm" field.</summary>
    public const int LastFillDttmFieldNumber = 667;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastFillDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastFillDttm {
      get { return lastFillDttm_; }
      set {
        lastFillDttm_ = value;
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 670;
    private string userData1_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 673;
    private string userData2_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_data" field.</summary>
    public const int ChildDataFieldNumber = 676;
    private string childData_ = "";
    /// <summary>
    /// client supplied data field; passes through to down stream child orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildData {
      get { return childData_; }
      set {
        childData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 679;
    private long srcTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "sgw_timestamp" field.</summary>
    public const int SgwTimestampFieldNumber = 682;
    private long sgwTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SgwTimestamp {
      get { return sgwTimestamp_; }
      set {
        sgwTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 685;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "include_sRNetwork" field.</summary>
    public const int IncludeSRNetworkFieldNumber = 691;
    private global::Spiderrock.Protobuf.InclExclDisclose includeSRNetwork_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.InclExclDisclose IncludeSRNetwork {
      get { return includeSRNetwork_; }
      set {
        includeSRNetwork_ = value;
      }
    }

    /// <summary>Field number for the "directed_counter_party" field.</summary>
    public const int DirectedCounterPartyFieldNumber = 694;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty> _repeated_directedCounterParty_codec
        = pb::FieldCodec.ForMessage(5554, global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty> directedCounterParty_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.DirectedCounterParty> DirectedCounterParty {
      get { return directedCounterParty_; }
    }

    /// <summary>Field number for the "order_legs" field.</summary>
    public const int OrderLegsFieldNumber = 751;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs> _repeated_orderLegs_codec
        = pb::FieldCodec.ForMessage(6010, global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs> orderLegs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrParentOrder.Types.OrderLegs> OrderLegs {
      get { return orderLegs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrParentOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrParentOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (RunStatus != other.RunStatus) return false;
      if (SpdrActionType != other.SpdrActionType) return false;
      if (ParentShape != other.ParentShape) return false;
      if (ClientSeqNumIn != other.ClientSeqNumIn) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (AltPrevOrderId != other.AltPrevOrderId) return false;
      if (AltAutoHedgeId != other.AltAutoHedgeId) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (SrcRoutingCode != other.SrcRoutingCode) return false;
      if (PackageId != other.PackageId) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (SecurityDesc != other.SecurityDesc) return false;
      if (Accnt != other.Accnt) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ExternExDest != other.ExternExDest) return false;
      if (ExternParams != other.ExternParams) return false;
      if (Strategy != other.Strategy) return false;
      if (UserName != other.UserName) return false;
      if (UserSource != other.UserSource) return false;
      if (!object.Equals(OrderDttm, other.OrderDttm)) return false;
      if (OrderSide != other.OrderSide) return false;
      if (OrderSize != other.OrderSize) return false;
      if (OrderActiveSize != other.OrderActiveSize) return false;
      if (CurCumFillQuantity != other.CurCumFillQuantity) return false;
      if (AddCumFillQuantity != other.AddCumFillQuantity) return false;
      if (MaxExposureSize != other.MaxExposureSize) return false;
      if (NumMakeExchanges != other.NumMakeExchanges) return false;
      if (PublicSize != other.PublicSize) return false;
      if (CanOverlapCxlRepl != other.CanOverlapCxlRepl) return false;
      if (ProgressRule != other.ProgressRule) return false;
      if (BlockVisibility != other.BlockVisibility) return false;
      if (ProgressSliceCnt != other.ProgressSliceCnt) return false;
      if (ProgressExposeTime != other.ProgressExposeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VwapParticipation, other.VwapParticipation)) return false;
      if (MinMktOnClosePct != other.MinMktOnClosePct) return false;
      if (TriggerType != other.TriggerType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerLevel, other.TriggerLevel)) return false;
      if (AuctionResponder != other.AuctionResponder) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMakeExchFee, other.MaxMakeExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTakeExchFee, other.MaxTakeExchFee)) return false;
      if (IncTakeExchFee != other.IncTakeExchFee) return false;
      if (IncMakeExchFee != other.IncMakeExchFee) return false;
      if (MakeExchRule != other.MakeExchRule) return false;
      if (CxlUPrcRange != other.CxlUPrcRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinUBid, other.MinUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxUAsk, other.MaxUAsk)) return false;
      if (MinMaxType != other.MinMaxType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinOptionPx, other.MinOptionPx)) return false;
      if (MaxChildOrders != other.MaxChildOrders) return false;
      if (ExchMask != other.ExchMask) return false;
      if (SpdrStageType != other.SpdrStageType) return false;
      if (MarketSession != other.MarketSession) return false;
      if (!object.Equals(StartDttm, other.StartDttm)) return false;
      if (OrderDuration != other.OrderDuration) return false;
      if (ActiveDuration != other.ActiveDuration) return false;
      if (!object.Equals(GoodTillDttm, other.GoodTillDttm)) return false;
      if (StartType != other.StartType) return false;
      if (TriggerGroupId != other.TriggerGroupId) return false;
      if (TriggerTimestamp != other.TriggerTimestamp) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (TakeLimitClass != other.TakeLimitClass) return false;
      if (MakeLimitClass != other.MakeLimitClass) return false;
      if (TakeReachRule != other.TakeReachRule) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcLimit, other.OrderPrcLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderRefUPrc, other.OrderRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefDelta, other.OrderRefDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefGamma, other.OrderRefGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderVolLimit, other.OrderVolLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RateOverride, other.RateOverride)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivOverride, other.SdivOverride)) return false;
      if (DdivOverride != other.DdivOverride) return false;
      if (OverrideCode != other.OverrideCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcOffset, other.OrderPrcOffset)) return false;
      if (StateModel != other.StateModel) return false;
      if (UStateModel != other.UStateModel) return false;
      if (TakeAlphaType != other.TakeAlphaType) return false;
      if (MakeAlphaType != other.MakeAlphaType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeAlphaFactor, other.TakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeAlphaFactor, other.MakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeProbability, other.TakeProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeProbability, other.MakeProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeSurfPrcOffset, other.TakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfVolOffset, other.TakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfWidthOffset, other.TakeSurfWidthOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeSurfPrcOffset, other.MakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfVolOffset, other.MakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfWidthOffset, other.MakeSurfWidthOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefEventMult, other.OrderRefEventMult)) return false;
      if (!object.Equals(OrderRefEventDttm, other.OrderRefEventDttm)) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (HedgeInstrument != other.HedgeInstrument) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeBetaRatio, other.HedgeBetaRatio)) return false;
      if (HedgeScope != other.HedgeScope) return false;
      if (HedgeSession != other.HedgeSession) return false;
      if (ExternHedgeExDest != other.ExternHedgeExDest) return false;
      if (ExternHedgeParams != other.ExternHedgeParams) return false;
      if (FirmType != other.FirmType) return false;
      if (OrderCapacity != other.OrderCapacity) return false;
      if (PositionType != other.PositionType) return false;
      if (SsaleFlag != other.SsaleFlag) return false;
      if (NoCrossGroup != other.NoCrossGroup) return false;
      if (ExchTraderId != other.ExchTraderId) return false;
      if (LargeTraderId != other.LargeTraderId) return false;
      if (TradingLocation != other.TradingLocation) return false;
      if (LeadSide != other.LeadSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCompletionSlippage, other.MaxCompletionSlippage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefPremium, other.OrderRefPremium)) return false;
      if (NoticeNumber != other.NoticeNumber) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoVol, other.TheoVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClArriveMark, other.ClArriveMark)) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (ReqAuxRiskGroupCtrl != other.ReqAuxRiskGroupCtrl) return false;
      if (RefRMetric1Src != other.RefRMetric1Src) return false;
      if (RefRMetric2Src != other.RefRMetric2Src) return false;
      if (RefRMetric3Src != other.RefRMetric3Src) return false;
      if (RefRMetric4Src != other.RefRMetric4Src) return false;
      if (RefRMetric5Src != other.RefRMetric5Src) return false;
      if (RefRMetric6Src != other.RefRMetric6Src) return false;
      if (RefRMetric7Src != other.RefRMetric7Src) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric1, other.OrderRefRMetric1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric2, other.OrderRefRMetric2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric3, other.OrderRefRMetric3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric4, other.OrderRefRMetric4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric5, other.OrderRefRMetric5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric6, other.OrderRefRMetric6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefRMetric7, other.OrderRefRMetric7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpDayWtVegaOffset, other.ExpDayWtVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayWtVegaLn, other.MaxExpDayWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayWtVegaSh, other.MaxExpDayWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayRMetric6Ln, other.MaxExpDayRMetric6Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayRMetric6Sh, other.MaxExpDayRMetric6Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayDDeltaOffset, other.SymDayDDeltaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayDDeltaLn, other.MaxSymDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayDDeltaSh, other.MaxSymDayDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayVegaOffset, other.SymDayVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayVegaLn, other.MaxSymDayVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayVegaSh, other.MaxSymDayVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayWtVegaOffset, other.SymDayWtVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayWtVegaLn, other.MaxSymDayWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayWtVegaSh, other.MaxSymDayWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayRMetric7Ln, other.MaxSymDayRMetric7Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayRMetric7Sh, other.MaxSymDayRMetric7Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaLn, other.MaxGrpDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaSh, other.MaxGrpDayDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaLn, other.MaxGrpDayVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaSh, other.MaxGrpDayVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaAbs, other.MaxGrpDayVegaAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayVegaRatio, other.GrpDayVegaRatio)) return false;
      if (MaxGrpDayContractsLn != other.MaxGrpDayContractsLn) return false;
      if (MaxGrpDayContractsSh != other.MaxGrpDayContractsSh) return false;
      if (MaxGrpDayContractsAbs != other.MaxGrpDayContractsAbs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Ln, other.MaxGrpDayRMetric1Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Sh, other.MaxGrpDayRMetric1Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Abs, other.MaxGrpDayRMetric1Abs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayRMetric1Ratio, other.GrpDayRMetric1Ratio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric2Ln, other.MaxGrpDayRMetric2Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric2Sh, other.MaxGrpDayRMetric2Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric3Ln, other.MaxGrpDayRMetric3Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric3Sh, other.MaxGrpDayRMetric3Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric4Ln, other.MaxGrpDayRMetric4Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric4Sh, other.MaxGrpDayRMetric4Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric5Ln, other.MaxGrpDayRMetric5Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric5Sh, other.MaxGrpDayRMetric5Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlDDeltaLn, other.SymEmaCxlDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlDDeltaSh, other.SymEmaCxlDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlWtVegaLn, other.SymEmaCxlWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlWtVegaSh, other.SymEmaCxlWtVegaSh)) return false;
      if (!object.Equals(LastFillDttm, other.LastFillDttm)) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (ChildData != other.ChildData) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (SgwTimestamp != other.SgwTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (IncludeSRNetwork != other.IncludeSRNetwork) return false;
      if(!directedCounterParty_.Equals(other.directedCounterParty_)) return false;
      if(!orderLegs_.Equals(other.orderLegs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
      if (SpdrActionType != global::Spiderrock.Protobuf.SpdrActionType.Unspecified) hash ^= SpdrActionType.GetHashCode();
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ParentShape.GetHashCode();
      if (ClientSeqNumIn != 0) hash ^= ClientSeqNumIn.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (AltPrevOrderId.Length != 0) hash ^= AltPrevOrderId.GetHashCode();
      if (AltAutoHedgeId.Length != 0) hash ^= AltAutoHedgeId.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (SrcRoutingCode.Length != 0) hash ^= SrcRoutingCode.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (SecurityDesc.Length != 0) hash ^= SecurityDesc.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ExternExDest.Length != 0) hash ^= ExternExDest.GetHashCode();
      if (ExternParams.Length != 0) hash ^= ExternParams.GetHashCode();
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= UserSource.GetHashCode();
      if (orderDttm_ != null) hash ^= OrderDttm.GetHashCode();
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
      if (OrderSize != 0) hash ^= OrderSize.GetHashCode();
      if (OrderActiveSize != 0) hash ^= OrderActiveSize.GetHashCode();
      if (CurCumFillQuantity != 0) hash ^= CurCumFillQuantity.GetHashCode();
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AddCumFillQuantity.GetHashCode();
      if (MaxExposureSize != 0) hash ^= MaxExposureSize.GetHashCode();
      if (NumMakeExchanges != 0) hash ^= NumMakeExchanges.GetHashCode();
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) hash ^= PublicSize.GetHashCode();
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CanOverlapCxlRepl.GetHashCode();
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) hash ^= ProgressRule.GetHashCode();
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) hash ^= BlockVisibility.GetHashCode();
      if (ProgressSliceCnt != 0) hash ^= ProgressSliceCnt.GetHashCode();
      if (ProgressExposeTime != 0) hash ^= ProgressExposeTime.GetHashCode();
      if (VwapParticipation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VwapParticipation);
      if (MinMktOnClosePct != 0) hash ^= MinMktOnClosePct.GetHashCode();
      if (TriggerType != global::Spiderrock.Protobuf.TriggerType.Unspecified) hash ^= TriggerType.GetHashCode();
      if (TriggerLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerLevel);
      if (AuctionResponder != global::Spiderrock.Protobuf.AuctionResponder.Unspecified) hash ^= AuctionResponder.GetHashCode();
      if (MaxMakeExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMakeExchFee);
      if (MaxTakeExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTakeExchFee);
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) hash ^= IncTakeExchFee.GetHashCode();
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) hash ^= IncMakeExchFee.GetHashCode();
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) hash ^= MakeExchRule.GetHashCode();
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) hash ^= CxlUPrcRange.GetHashCode();
      if (MinUBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinUBid);
      if (MaxUAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxUAsk);
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) hash ^= MinMaxType.GetHashCode();
      if (MinOptionPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinOptionPx);
      if (MaxChildOrders != 0) hash ^= MaxChildOrders.GetHashCode();
      if (ExchMask != 0) hash ^= ExchMask.GetHashCode();
      if (SpdrStageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) hash ^= SpdrStageType.GetHashCode();
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= MarketSession.GetHashCode();
      if (startDttm_ != null) hash ^= StartDttm.GetHashCode();
      if (OrderDuration != 0) hash ^= OrderDuration.GetHashCode();
      if (ActiveDuration != 0) hash ^= ActiveDuration.GetHashCode();
      if (goodTillDttm_ != null) hash ^= GoodTillDttm.GetHashCode();
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) hash ^= StartType.GetHashCode();
      if (TriggerGroupId != 0L) hash ^= TriggerGroupId.GetHashCode();
      if (TriggerTimestamp != 0L) hash ^= TriggerTimestamp.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= TakeLimitClass.GetHashCode();
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= MakeLimitClass.GetHashCode();
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) hash ^= TakeReachRule.GetHashCode();
      if (OrderPrcLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcLimit);
      if (OrderRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderRefUPrc);
      if (OrderRefDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefDelta);
      if (OrderRefGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefGamma);
      if (OrderVolLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderVolLimit);
      if (RateOverride != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RateOverride);
      if (SdivOverride != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivOverride);
      if (DdivOverride.Length != 0) hash ^= DdivOverride.GetHashCode();
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) hash ^= OverrideCode.GetHashCode();
      if (OrderPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcOffset);
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) hash ^= StateModel.GetHashCode();
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) hash ^= UStateModel.GetHashCode();
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= TakeAlphaType.GetHashCode();
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= MakeAlphaType.GetHashCode();
      if (TakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeAlphaFactor);
      if (MakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeAlphaFactor);
      if (TakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeProbability);
      if (MakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeProbability);
      if (TakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeSurfPrcOffset);
      if (TakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfVolOffset);
      if (TakeSurfWidthOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfWidthOffset);
      if (MakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeSurfPrcOffset);
      if (MakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfVolOffset);
      if (MakeSurfWidthOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfWidthOffset);
      if (OrderRefEventMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefEventMult);
      if (orderRefEventDttm_ != null) hash ^= OrderRefEventDttm.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) hash ^= HedgeInstrument.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeBetaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeBetaRatio);
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) hash ^= HedgeScope.GetHashCode();
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= HedgeSession.GetHashCode();
      if (ExternHedgeExDest.Length != 0) hash ^= ExternHedgeExDest.GetHashCode();
      if (ExternHedgeParams.Length != 0) hash ^= ExternHedgeParams.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (OrderCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) hash ^= OrderCapacity.GetHashCode();
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType.GetHashCode();
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
      if (NoCrossGroup.Length != 0) hash ^= NoCrossGroup.GetHashCode();
      if (ExchTraderId.Length != 0) hash ^= ExchTraderId.GetHashCode();
      if (LargeTraderId.Length != 0) hash ^= LargeTraderId.GetHashCode();
      if (TradingLocation.Length != 0) hash ^= TradingLocation.GetHashCode();
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LeadSide.GetHashCode();
      if (MaxCompletionSlippage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCompletionSlippage);
      if (OrderRefPremium != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefPremium);
      if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
      if (TheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoVol);
      if (ClArriveMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClArriveMark);
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (ReqAuxRiskGroupCtrl != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ReqAuxRiskGroupCtrl.GetHashCode();
      if (RefRMetric1Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric1Src.GetHashCode();
      if (RefRMetric2Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric2Src.GetHashCode();
      if (RefRMetric3Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric3Src.GetHashCode();
      if (RefRMetric4Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric4Src.GetHashCode();
      if (RefRMetric5Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric5Src.GetHashCode();
      if (RefRMetric6Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric6Src.GetHashCode();
      if (RefRMetric7Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) hash ^= RefRMetric7Src.GetHashCode();
      if (OrderRefRMetric1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric1);
      if (OrderRefRMetric2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric2);
      if (OrderRefRMetric3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric3);
      if (OrderRefRMetric4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric4);
      if (OrderRefRMetric5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric5);
      if (OrderRefRMetric6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric6);
      if (OrderRefRMetric7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefRMetric7);
      if (ExpDayWtVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpDayWtVegaOffset);
      if (MaxExpDayWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayWtVegaLn);
      if (MaxExpDayWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayWtVegaSh);
      if (MaxExpDayRMetric6Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayRMetric6Ln);
      if (MaxExpDayRMetric6Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayRMetric6Sh);
      if (SymDayDDeltaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayDDeltaOffset);
      if (MaxSymDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayDDeltaLn);
      if (MaxSymDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayDDeltaSh);
      if (SymDayVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayVegaOffset);
      if (MaxSymDayVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayVegaLn);
      if (MaxSymDayVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayVegaSh);
      if (SymDayWtVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayWtVegaOffset);
      if (MaxSymDayWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayWtVegaLn);
      if (MaxSymDayWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayWtVegaSh);
      if (MaxSymDayRMetric7Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayRMetric7Ln);
      if (MaxSymDayRMetric7Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayRMetric7Sh);
      if (MaxGrpDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaLn);
      if (MaxGrpDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaSh);
      if (MaxGrpDayVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaLn);
      if (MaxGrpDayVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaSh);
      if (MaxGrpDayVegaAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaAbs);
      if (GrpDayVegaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayVegaRatio);
      if (MaxGrpDayContractsLn != 0) hash ^= MaxGrpDayContractsLn.GetHashCode();
      if (MaxGrpDayContractsSh != 0) hash ^= MaxGrpDayContractsSh.GetHashCode();
      if (MaxGrpDayContractsAbs != 0) hash ^= MaxGrpDayContractsAbs.GetHashCode();
      if (MaxGrpDayRMetric1Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Ln);
      if (MaxGrpDayRMetric1Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Sh);
      if (MaxGrpDayRMetric1Abs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Abs);
      if (GrpDayRMetric1Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayRMetric1Ratio);
      if (MaxGrpDayRMetric2Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric2Ln);
      if (MaxGrpDayRMetric2Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric2Sh);
      if (MaxGrpDayRMetric3Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric3Ln);
      if (MaxGrpDayRMetric3Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric3Sh);
      if (MaxGrpDayRMetric4Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric4Ln);
      if (MaxGrpDayRMetric4Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric4Sh);
      if (MaxGrpDayRMetric5Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric5Ln);
      if (MaxGrpDayRMetric5Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric5Sh);
      if (SymEmaCxlDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlDDeltaLn);
      if (SymEmaCxlDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlDDeltaSh);
      if (SymEmaCxlWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlWtVegaLn);
      if (SymEmaCxlWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlWtVegaSh);
      if (lastFillDttm_ != null) hash ^= LastFillDttm.GetHashCode();
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (ChildData.Length != 0) hash ^= ChildData.GetHashCode();
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (SgwTimestamp != 0L) hash ^= SgwTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= IncludeSRNetwork.GetHashCode();
      hash ^= directedCounterParty_.GetHashCode();
      hash ^= orderLegs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (SpdrActionType != global::Spiderrock.Protobuf.SpdrActionType.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpdrActionType);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ParentShape);
      }
      if (ClientSeqNumIn != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(ClientSeqNumIn);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(AltOrderId);
      }
      if (AltPrevOrderId.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltPrevOrderId);
      }
      if (AltAutoHedgeId.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(AltAutoHedgeId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(SrcRoutingCode);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(PackageId);
      }
      if (secKey_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) SecType);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(SecurityDesc);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(GroupingCode);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(ExternExDest);
      }
      if (ExternParams.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(ExternParams);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(UserName);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(146, 11);
        output.WriteMessage(OrderDttm);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) OrderSide);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(OrderActiveSize);
      }
      if (CurCumFillQuantity != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(CurCumFillQuantity);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) AddCumFillQuantity);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ProgressRule);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) BlockVisibility);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(VwapParticipation);
      }
      if (MinMktOnClosePct != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(MinMktOnClosePct);
      }
      if (TriggerType != global::Spiderrock.Protobuf.TriggerType.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) TriggerType);
      }
      if (TriggerLevel != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(TriggerLevel);
      }
      if (AuctionResponder != global::Spiderrock.Protobuf.AuctionResponder.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) AuctionResponder);
      }
      if (MaxMakeExchFee != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(MaxMakeExchFee);
      }
      if (MaxTakeExchFee != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(MaxTakeExchFee);
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) MakeExchRule);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(152, 16);
        output.WriteEnum((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(MinOptionPx);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(224, 16);
        output.WriteUInt32(ExchMask);
      }
      if (SpdrStageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) SpdrStageType);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(170, 17);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(GoodTillDttm);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) StartType);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(136, 18);
        output.WriteInt64(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        output.WriteRawTag(160, 18);
        output.WriteInt64(TriggerTimestamp);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(152, 19);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) TakeReachRule);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(225, 19);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDelta != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OrderRefDelta);
      }
      if (OrderRefGamma != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OrderRefGamma);
      }
      if (OrderVolLimit != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(OrderVolLimit);
      }
      if (RateOverride != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(RateOverride);
      }
      if (SdivOverride != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(SdivOverride);
      }
      if (DdivOverride.Length != 0) {
        output.WriteRawTag(138, 21);
        output.WriteString(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(185, 21);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(MakeProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(145, 23);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidthOffset != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(TakeSurfWidthOffset);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(217, 23);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidthOffset != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(MakeSurfWidthOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(186, 24);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(176, 25);
        output.WriteEnum((int) HedgeScope);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(226, 25);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(250, 25);
        output.WriteString(ExternHedgeParams);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(144, 26);
        output.WriteEnum((int) FirmType);
      }
      if (OrderCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) OrderCapacity);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) PositionType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) SsaleFlag);
      }
      if (NoCrossGroup.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(NoCrossGroup);
      }
      if (ExchTraderId.Length != 0) {
        output.WriteRawTag(138, 27);
        output.WriteString(ExchTraderId);
      }
      if (LargeTraderId.Length != 0) {
        output.WriteRawTag(162, 27);
        output.WriteString(LargeTraderId);
      }
      if (TradingLocation.Length != 0) {
        output.WriteRawTag(186, 27);
        output.WriteString(TradingLocation);
      }
      if (RefRMetric1Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(208, 27);
        output.WriteEnum((int) RefRMetric1Src);
      }
      if (RefRMetric2Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) RefRMetric2Src);
      }
      if (RefRMetric3Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) RefRMetric3Src);
      }
      if (RefRMetric4Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(152, 28);
        output.WriteEnum((int) RefRMetric4Src);
      }
      if (RefRMetric5Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(176, 28);
        output.WriteEnum((int) RefRMetric5Src);
      }
      if (RefRMetric6Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(200, 28);
        output.WriteEnum((int) RefRMetric6Src);
      }
      if (RefRMetric7Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(224, 28);
        output.WriteEnum((int) RefRMetric7Src);
      }
      if (OrderRefRMetric1 != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(OrderRefRMetric1);
      }
      if (OrderRefRMetric2 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(OrderRefRMetric2);
      }
      if (OrderRefRMetric3 != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(OrderRefRMetric3);
      }
      if (OrderRefRMetric4 != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(OrderRefRMetric4);
      }
      if (OrderRefRMetric5 != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(OrderRefRMetric5);
      }
      if (OrderRefRMetric6 != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(OrderRefRMetric6);
      }
      if (OrderRefRMetric7 != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(OrderRefRMetric7);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 30);
        output.WriteEnum((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        output.WriteRawTag(185, 30);
        output.WriteDouble(MaxCompletionSlippage);
      }
      if (OrderRefPremium != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(OrderRefPremium);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(TheoVol);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(ClArriveMark);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(176, 31);
        output.WriteInt64(RiskGroupId);
      }
      if (MaxExpDayWtVegaLn != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(MaxExpDayWtVegaLn);
      }
      if (MaxExpDayWtVegaSh != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(MaxExpDayWtVegaSh);
      }
      if (ExpDayWtVegaOffset != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(ExpDayWtVegaOffset);
      }
      if (MaxSymDayVegaLn != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(MaxSymDayVegaLn);
      }
      if (MaxSymDayVegaSh != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(MaxSymDayVegaSh);
      }
      if (SymDayVegaOffset != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(SymDayVegaOffset);
      }
      if (MaxSymDayWtVegaLn != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(MaxSymDayWtVegaLn);
      }
      if (MaxSymDayWtVegaSh != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(MaxSymDayWtVegaSh);
      }
      if (SymDayWtVegaOffset != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(SymDayWtVegaOffset);
      }
      if (MaxSymDayDDeltaLn != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(MaxSymDayDDeltaLn);
      }
      if (MaxSymDayDDeltaSh != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(MaxSymDayDDeltaSh);
      }
      if (SymDayDDeltaOffset != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(SymDayDDeltaOffset);
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(MaxExpDayRMetric6Ln);
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(MaxExpDayRMetric6Sh);
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        output.WriteRawTag(197, 35);
        output.WriteFloat(MaxSymDayRMetric7Ln);
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        output.WriteRawTag(221, 35);
        output.WriteFloat(MaxSymDayRMetric7Sh);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(213, 36);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(133, 37);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(157, 37);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(149, 38);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(173, 38);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(197, 38);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(221, 38);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        output.WriteRawTag(245, 38);
        output.WriteFloat(MaxGrpDayRMetric2Ln);
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        output.WriteRawTag(141, 39);
        output.WriteFloat(MaxGrpDayRMetric2Sh);
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        output.WriteRawTag(165, 39);
        output.WriteFloat(MaxGrpDayRMetric3Ln);
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        output.WriteRawTag(189, 39);
        output.WriteFloat(MaxGrpDayRMetric3Sh);
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(MaxGrpDayRMetric4Ln);
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        output.WriteRawTag(237, 39);
        output.WriteFloat(MaxGrpDayRMetric4Sh);
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(MaxGrpDayRMetric5Ln);
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        output.WriteRawTag(157, 40);
        output.WriteFloat(MaxGrpDayRMetric5Sh);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(176, 40);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(200, 40);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(224, 40);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        output.WriteRawTag(253, 40);
        output.WriteFloat(SymEmaCxlDDeltaLn);
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(SymEmaCxlDDeltaSh);
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(SymEmaCxlWtVegaLn);
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(SymEmaCxlWtVegaSh);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(218, 41);
        output.WriteMessage(LastFillDttm);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(242, 41);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(138, 42);
        output.WriteString(UserData2);
      }
      if (ChildData.Length != 0) {
        output.WriteRawTag(162, 42);
        output.WriteString(ChildData);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(184, 42);
        output.WriteInt64(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        output.WriteRawTag(208, 42);
        output.WriteInt64(SgwTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 42);
        output.WriteMessage(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(output, _repeated_directedCounterParty_codec);
      orderLegs_.WriteTo(output, _repeated_orderLegs_codec);
      if (NoticeNumber != 0L) {
        output.WriteRawTag(192, 64);
        output.WriteInt64(NoticeNumber);
      }
      if (ReqAuxRiskGroupCtrl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 64);
        output.WriteEnum((int) ReqAuxRiskGroupCtrl);
      }
      if (UserSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 64);
        output.WriteEnum((int) UserSource);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(216, 64);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(224, 64);
        output.WriteInt32(ActiveDuration);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(232, 64);
        output.WriteEnum((int) HedgeSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (SpdrActionType != global::Spiderrock.Protobuf.SpdrActionType.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpdrActionType);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) ParentShape);
      }
      if (ClientSeqNumIn != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(ClientSeqNumIn);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(AltOrderId);
      }
      if (AltPrevOrderId.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltPrevOrderId);
      }
      if (AltAutoHedgeId.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(AltAutoHedgeId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(SrcRoutingCode);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(PackageId);
      }
      if (secKey_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) SecType);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(SecurityDesc);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(GroupingCode);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(ExternExDest);
      }
      if (ExternParams.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(ExternParams);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(UserName);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(146, 11);
        output.WriteMessage(OrderDttm);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) OrderSide);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(OrderActiveSize);
      }
      if (CurCumFillQuantity != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(CurCumFillQuantity);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) AddCumFillQuantity);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ProgressRule);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) BlockVisibility);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(VwapParticipation);
      }
      if (MinMktOnClosePct != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(MinMktOnClosePct);
      }
      if (TriggerType != global::Spiderrock.Protobuf.TriggerType.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) TriggerType);
      }
      if (TriggerLevel != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(TriggerLevel);
      }
      if (AuctionResponder != global::Spiderrock.Protobuf.AuctionResponder.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) AuctionResponder);
      }
      if (MaxMakeExchFee != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(MaxMakeExchFee);
      }
      if (MaxTakeExchFee != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(MaxTakeExchFee);
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) MakeExchRule);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(152, 16);
        output.WriteEnum((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(MinOptionPx);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(224, 16);
        output.WriteUInt32(ExchMask);
      }
      if (SpdrStageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) SpdrStageType);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(170, 17);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(GoodTillDttm);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) StartType);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(136, 18);
        output.WriteInt64(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        output.WriteRawTag(160, 18);
        output.WriteInt64(TriggerTimestamp);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(152, 19);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) TakeReachRule);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(225, 19);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDelta != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OrderRefDelta);
      }
      if (OrderRefGamma != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OrderRefGamma);
      }
      if (OrderVolLimit != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(OrderVolLimit);
      }
      if (RateOverride != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(RateOverride);
      }
      if (SdivOverride != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(SdivOverride);
      }
      if (DdivOverride.Length != 0) {
        output.WriteRawTag(138, 21);
        output.WriteString(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(185, 21);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(MakeProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(145, 23);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidthOffset != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(TakeSurfWidthOffset);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(217, 23);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidthOffset != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(MakeSurfWidthOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(186, 24);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(176, 25);
        output.WriteEnum((int) HedgeScope);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(226, 25);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(250, 25);
        output.WriteString(ExternHedgeParams);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(144, 26);
        output.WriteEnum((int) FirmType);
      }
      if (OrderCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) OrderCapacity);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) PositionType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) SsaleFlag);
      }
      if (NoCrossGroup.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(NoCrossGroup);
      }
      if (ExchTraderId.Length != 0) {
        output.WriteRawTag(138, 27);
        output.WriteString(ExchTraderId);
      }
      if (LargeTraderId.Length != 0) {
        output.WriteRawTag(162, 27);
        output.WriteString(LargeTraderId);
      }
      if (TradingLocation.Length != 0) {
        output.WriteRawTag(186, 27);
        output.WriteString(TradingLocation);
      }
      if (RefRMetric1Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(208, 27);
        output.WriteEnum((int) RefRMetric1Src);
      }
      if (RefRMetric2Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) RefRMetric2Src);
      }
      if (RefRMetric3Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) RefRMetric3Src);
      }
      if (RefRMetric4Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(152, 28);
        output.WriteEnum((int) RefRMetric4Src);
      }
      if (RefRMetric5Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(176, 28);
        output.WriteEnum((int) RefRMetric5Src);
      }
      if (RefRMetric6Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(200, 28);
        output.WriteEnum((int) RefRMetric6Src);
      }
      if (RefRMetric7Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        output.WriteRawTag(224, 28);
        output.WriteEnum((int) RefRMetric7Src);
      }
      if (OrderRefRMetric1 != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(OrderRefRMetric1);
      }
      if (OrderRefRMetric2 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(OrderRefRMetric2);
      }
      if (OrderRefRMetric3 != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(OrderRefRMetric3);
      }
      if (OrderRefRMetric4 != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(OrderRefRMetric4);
      }
      if (OrderRefRMetric5 != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(OrderRefRMetric5);
      }
      if (OrderRefRMetric6 != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(OrderRefRMetric6);
      }
      if (OrderRefRMetric7 != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(OrderRefRMetric7);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 30);
        output.WriteEnum((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        output.WriteRawTag(185, 30);
        output.WriteDouble(MaxCompletionSlippage);
      }
      if (OrderRefPremium != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(OrderRefPremium);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(TheoVol);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(ClArriveMark);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(176, 31);
        output.WriteInt64(RiskGroupId);
      }
      if (MaxExpDayWtVegaLn != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(MaxExpDayWtVegaLn);
      }
      if (MaxExpDayWtVegaSh != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(MaxExpDayWtVegaSh);
      }
      if (ExpDayWtVegaOffset != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(ExpDayWtVegaOffset);
      }
      if (MaxSymDayVegaLn != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(MaxSymDayVegaLn);
      }
      if (MaxSymDayVegaSh != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(MaxSymDayVegaSh);
      }
      if (SymDayVegaOffset != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(SymDayVegaOffset);
      }
      if (MaxSymDayWtVegaLn != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(MaxSymDayWtVegaLn);
      }
      if (MaxSymDayWtVegaSh != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(MaxSymDayWtVegaSh);
      }
      if (SymDayWtVegaOffset != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(SymDayWtVegaOffset);
      }
      if (MaxSymDayDDeltaLn != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(MaxSymDayDDeltaLn);
      }
      if (MaxSymDayDDeltaSh != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(MaxSymDayDDeltaSh);
      }
      if (SymDayDDeltaOffset != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(SymDayDDeltaOffset);
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(MaxExpDayRMetric6Ln);
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(MaxExpDayRMetric6Sh);
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        output.WriteRawTag(197, 35);
        output.WriteFloat(MaxSymDayRMetric7Ln);
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        output.WriteRawTag(221, 35);
        output.WriteFloat(MaxSymDayRMetric7Sh);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(213, 36);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(133, 37);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(157, 37);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(149, 38);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(173, 38);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(197, 38);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(221, 38);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        output.WriteRawTag(245, 38);
        output.WriteFloat(MaxGrpDayRMetric2Ln);
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        output.WriteRawTag(141, 39);
        output.WriteFloat(MaxGrpDayRMetric2Sh);
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        output.WriteRawTag(165, 39);
        output.WriteFloat(MaxGrpDayRMetric3Ln);
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        output.WriteRawTag(189, 39);
        output.WriteFloat(MaxGrpDayRMetric3Sh);
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(MaxGrpDayRMetric4Ln);
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        output.WriteRawTag(237, 39);
        output.WriteFloat(MaxGrpDayRMetric4Sh);
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(MaxGrpDayRMetric5Ln);
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        output.WriteRawTag(157, 40);
        output.WriteFloat(MaxGrpDayRMetric5Sh);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(176, 40);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(200, 40);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(224, 40);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        output.WriteRawTag(253, 40);
        output.WriteFloat(SymEmaCxlDDeltaLn);
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(SymEmaCxlDDeltaSh);
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(SymEmaCxlWtVegaLn);
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(SymEmaCxlWtVegaSh);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(218, 41);
        output.WriteMessage(LastFillDttm);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(242, 41);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(138, 42);
        output.WriteString(UserData2);
      }
      if (ChildData.Length != 0) {
        output.WriteRawTag(162, 42);
        output.WriteString(ChildData);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(184, 42);
        output.WriteInt64(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        output.WriteRawTag(208, 42);
        output.WriteInt64(SgwTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 42);
        output.WriteMessage(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(ref output, _repeated_directedCounterParty_codec);
      orderLegs_.WriteTo(ref output, _repeated_orderLegs_codec);
      if (NoticeNumber != 0L) {
        output.WriteRawTag(192, 64);
        output.WriteInt64(NoticeNumber);
      }
      if (ReqAuxRiskGroupCtrl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 64);
        output.WriteEnum((int) ReqAuxRiskGroupCtrl);
      }
      if (UserSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 64);
        output.WriteEnum((int) UserSource);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(216, 64);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(224, 64);
        output.WriteInt32(ActiveDuration);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(232, 64);
        output.WriteEnum((int) HedgeSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
      }
      if (SpdrActionType != global::Spiderrock.Protobuf.SpdrActionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrActionType);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentShape);
      }
      if (ClientSeqNumIn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientSeqNumIn);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (AltPrevOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltPrevOrderId);
      }
      if (AltAutoHedgeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAutoHedgeId);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcRoutingCode);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (SecurityDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityDesc);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternExDest);
      }
      if (ExternParams.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternParams);
      }
      if (Strategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserSource);
      }
      if (orderDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderDttm);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
      }
      if (OrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderSize);
      }
      if (OrderActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderActiveSize);
      }
      if (CurCumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurCumFillQuantity);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AddCumFillQuantity);
      }
      if (MaxExposureSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProgressRule);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlockVisibility);
      }
      if (ProgressSliceCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        size += 2 + 4;
      }
      if (MinMktOnClosePct != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinMktOnClosePct);
      }
      if (TriggerType != global::Spiderrock.Protobuf.TriggerType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (TriggerLevel != 0F) {
        size += 2 + 4;
      }
      if (AuctionResponder != global::Spiderrock.Protobuf.AuctionResponder.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionResponder);
      }
      if (MaxMakeExchFee != 0F) {
        size += 2 + 4;
      }
      if (MaxTakeExchFee != 0F) {
        size += 2 + 4;
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeExchRule);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        size += 2 + 4;
      }
      if (MaxUAsk != 0F) {
        size += 2 + 4;
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        size += 2 + 4;
      }
      if (MaxChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxChildOrders);
      }
      if (ExchMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExchMask);
      }
      if (SpdrStageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrStageType);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketSession);
      }
      if (startDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartDttm);
      }
      if (OrderDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderDuration);
      }
      if (ActiveDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveDuration);
      }
      if (goodTillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodTillDttm);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StartType);
      }
      if (TriggerGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerTimestamp);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeReachRule);
      }
      if (OrderPrcLimit != 0D) {
        size += 2 + 8;
      }
      if (OrderRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (OrderRefDelta != 0F) {
        size += 2 + 4;
      }
      if (OrderRefGamma != 0F) {
        size += 2 + 4;
      }
      if (OrderVolLimit != 0F) {
        size += 2 + 4;
      }
      if (RateOverride != 0F) {
        size += 2 + 4;
      }
      if (SdivOverride != 0F) {
        size += 2 + 4;
      }
      if (DdivOverride.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (MakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (TakeProbability != 0F) {
        size += 2 + 4;
      }
      if (MakeProbability != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (TakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfWidthOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (MakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfWidthOffset != 0F) {
        size += 2 + 4;
      }
      if (OrderRefEventMult != 0F) {
        size += 2 + 4;
      }
      if (orderRefEventDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderRefEventDttm);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeBetaRatio != 0F) {
        size += 2 + 4;
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeScope);
      }
      if (HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSession);
      }
      if (ExternHedgeExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeParams);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (OrderCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderCapacity);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
      }
      if (NoCrossGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NoCrossGroup);
      }
      if (ExchTraderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchTraderId);
      }
      if (LargeTraderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LargeTraderId);
      }
      if (TradingLocation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradingLocation);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        size += 2 + 8;
      }
      if (OrderRefPremium != 0F) {
        size += 2 + 4;
      }
      if (NoticeNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
      }
      if (TheoVol != 0F) {
        size += 2 + 4;
      }
      if (ClArriveMark != 0F) {
        size += 2 + 4;
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (ReqAuxRiskGroupCtrl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ReqAuxRiskGroupCtrl);
      }
      if (RefRMetric1Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric1Src);
      }
      if (RefRMetric2Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric2Src);
      }
      if (RefRMetric3Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric3Src);
      }
      if (RefRMetric4Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric4Src);
      }
      if (RefRMetric5Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric5Src);
      }
      if (RefRMetric6Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric6Src);
      }
      if (RefRMetric7Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RefRMetric7Src);
      }
      if (OrderRefRMetric1 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric2 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric3 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric4 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric5 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric6 != 0F) {
        size += 2 + 4;
      }
      if (OrderRefRMetric7 != 0F) {
        size += 2 + 4;
      }
      if (ExpDayWtVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        size += 2 + 4;
      }
      if (SymDayDDeltaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (SymDayVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayVegaSh != 0F) {
        size += 2 + 4;
      }
      if (SymDayWtVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaAbs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayVegaRatio != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayContractsLn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsAbs);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayRMetric1Ratio != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (lastFillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastFillDttm);
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (ChildData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildData);
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SgwTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncludeSRNetwork);
      }
      size += directedCounterParty_.CalculateSize(_repeated_directedCounterParty_codec);
      size += orderLegs_.CalculateSize(_repeated_orderLegs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrParentOrder other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        RunStatus = other.RunStatus;
      }
      if (other.SpdrActionType != global::Spiderrock.Protobuf.SpdrActionType.Unspecified) {
        SpdrActionType = other.SpdrActionType;
      }
      if (other.ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ParentShape = other.ParentShape;
      }
      if (other.ClientSeqNumIn != 0) {
        ClientSeqNumIn = other.ClientSeqNumIn;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.AltPrevOrderId.Length != 0) {
        AltPrevOrderId = other.AltPrevOrderId;
      }
      if (other.AltAutoHedgeId.Length != 0) {
        AltAutoHedgeId = other.AltAutoHedgeId;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.SrcRoutingCode.Length != 0) {
        SrcRoutingCode = other.SrcRoutingCode;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.SecurityDesc.Length != 0) {
        SecurityDesc = other.SecurityDesc;
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ExternExDest.Length != 0) {
        ExternExDest = other.ExternExDest;
      }
      if (other.ExternParams.Length != 0) {
        ExternParams = other.ExternParams;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        UserSource = other.UserSource;
      }
      if (other.orderDttm_ != null) {
        if (orderDttm_ == null) {
          OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderDttm.MergeFrom(other.OrderDttm);
      }
      if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        OrderSide = other.OrderSide;
      }
      if (other.OrderSize != 0) {
        OrderSize = other.OrderSize;
      }
      if (other.OrderActiveSize != 0) {
        OrderActiveSize = other.OrderActiveSize;
      }
      if (other.CurCumFillQuantity != 0) {
        CurCumFillQuantity = other.CurCumFillQuantity;
      }
      if (other.AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AddCumFillQuantity = other.AddCumFillQuantity;
      }
      if (other.MaxExposureSize != 0) {
        MaxExposureSize = other.MaxExposureSize;
      }
      if (other.NumMakeExchanges != 0) {
        NumMakeExchanges = other.NumMakeExchanges;
      }
      if (other.PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        PublicSize = other.PublicSize;
      }
      if (other.CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CanOverlapCxlRepl = other.CanOverlapCxlRepl;
      }
      if (other.ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        ProgressRule = other.ProgressRule;
      }
      if (other.BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        BlockVisibility = other.BlockVisibility;
      }
      if (other.ProgressSliceCnt != 0) {
        ProgressSliceCnt = other.ProgressSliceCnt;
      }
      if (other.ProgressExposeTime != 0) {
        ProgressExposeTime = other.ProgressExposeTime;
      }
      if (other.VwapParticipation != 0F) {
        VwapParticipation = other.VwapParticipation;
      }
      if (other.MinMktOnClosePct != 0) {
        MinMktOnClosePct = other.MinMktOnClosePct;
      }
      if (other.TriggerType != global::Spiderrock.Protobuf.TriggerType.Unspecified) {
        TriggerType = other.TriggerType;
      }
      if (other.TriggerLevel != 0F) {
        TriggerLevel = other.TriggerLevel;
      }
      if (other.AuctionResponder != global::Spiderrock.Protobuf.AuctionResponder.Unspecified) {
        AuctionResponder = other.AuctionResponder;
      }
      if (other.MaxMakeExchFee != 0F) {
        MaxMakeExchFee = other.MaxMakeExchFee;
      }
      if (other.MaxTakeExchFee != 0F) {
        MaxTakeExchFee = other.MaxTakeExchFee;
      }
      if (other.IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        IncTakeExchFee = other.IncTakeExchFee;
      }
      if (other.IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        IncMakeExchFee = other.IncMakeExchFee;
      }
      if (other.MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        MakeExchRule = other.MakeExchRule;
      }
      if (other.CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        CxlUPrcRange = other.CxlUPrcRange;
      }
      if (other.MinUBid != 0F) {
        MinUBid = other.MinUBid;
      }
      if (other.MaxUAsk != 0F) {
        MaxUAsk = other.MaxUAsk;
      }
      if (other.MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        MinMaxType = other.MinMaxType;
      }
      if (other.MinOptionPx != 0F) {
        MinOptionPx = other.MinOptionPx;
      }
      if (other.MaxChildOrders != 0) {
        MaxChildOrders = other.MaxChildOrders;
      }
      if (other.ExchMask != 0) {
        ExchMask = other.ExchMask;
      }
      if (other.SpdrStageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        SpdrStageType = other.SpdrStageType;
      }
      if (other.MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        MarketSession = other.MarketSession;
      }
      if (other.startDttm_ != null) {
        if (startDttm_ == null) {
          StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDttm.MergeFrom(other.StartDttm);
      }
      if (other.OrderDuration != 0) {
        OrderDuration = other.OrderDuration;
      }
      if (other.ActiveDuration != 0) {
        ActiveDuration = other.ActiveDuration;
      }
      if (other.goodTillDttm_ != null) {
        if (goodTillDttm_ == null) {
          GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        GoodTillDttm.MergeFrom(other.GoodTillDttm);
      }
      if (other.StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        StartType = other.StartType;
      }
      if (other.TriggerGroupId != 0L) {
        TriggerGroupId = other.TriggerGroupId;
      }
      if (other.TriggerTimestamp != 0L) {
        TriggerTimestamp = other.TriggerTimestamp;
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        TakeLimitClass = other.TakeLimitClass;
      }
      if (other.MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        MakeLimitClass = other.MakeLimitClass;
      }
      if (other.TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        TakeReachRule = other.TakeReachRule;
      }
      if (other.OrderPrcLimit != 0D) {
        OrderPrcLimit = other.OrderPrcLimit;
      }
      if (other.OrderRefUPrc != 0D) {
        OrderRefUPrc = other.OrderRefUPrc;
      }
      if (other.OrderRefDelta != 0F) {
        OrderRefDelta = other.OrderRefDelta;
      }
      if (other.OrderRefGamma != 0F) {
        OrderRefGamma = other.OrderRefGamma;
      }
      if (other.OrderVolLimit != 0F) {
        OrderVolLimit = other.OrderVolLimit;
      }
      if (other.RateOverride != 0F) {
        RateOverride = other.RateOverride;
      }
      if (other.SdivOverride != 0F) {
        SdivOverride = other.SdivOverride;
      }
      if (other.DdivOverride.Length != 0) {
        DdivOverride = other.DdivOverride;
      }
      if (other.OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        OverrideCode = other.OverrideCode;
      }
      if (other.OrderPrcOffset != 0D) {
        OrderPrcOffset = other.OrderPrcOffset;
      }
      if (other.StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        StateModel = other.StateModel;
      }
      if (other.UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        UStateModel = other.UStateModel;
      }
      if (other.TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        TakeAlphaType = other.TakeAlphaType;
      }
      if (other.MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        MakeAlphaType = other.MakeAlphaType;
      }
      if (other.TakeAlphaFactor != 0F) {
        TakeAlphaFactor = other.TakeAlphaFactor;
      }
      if (other.MakeAlphaFactor != 0F) {
        MakeAlphaFactor = other.MakeAlphaFactor;
      }
      if (other.TakeProbability != 0F) {
        TakeProbability = other.TakeProbability;
      }
      if (other.MakeProbability != 0F) {
        MakeProbability = other.MakeProbability;
      }
      if (other.TakeSurfPrcOffset != 0D) {
        TakeSurfPrcOffset = other.TakeSurfPrcOffset;
      }
      if (other.TakeSurfVolOffset != 0F) {
        TakeSurfVolOffset = other.TakeSurfVolOffset;
      }
      if (other.TakeSurfWidthOffset != 0F) {
        TakeSurfWidthOffset = other.TakeSurfWidthOffset;
      }
      if (other.MakeSurfPrcOffset != 0D) {
        MakeSurfPrcOffset = other.MakeSurfPrcOffset;
      }
      if (other.MakeSurfVolOffset != 0F) {
        MakeSurfVolOffset = other.MakeSurfVolOffset;
      }
      if (other.MakeSurfWidthOffset != 0F) {
        MakeSurfWidthOffset = other.MakeSurfWidthOffset;
      }
      if (other.OrderRefEventMult != 0F) {
        OrderRefEventMult = other.OrderRefEventMult;
      }
      if (other.orderRefEventDttm_ != null) {
        if (orderRefEventDttm_ == null) {
          OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderRefEventDttm.MergeFrom(other.OrderRefEventDttm);
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        HedgeInstrument = other.HedgeInstrument;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeBetaRatio != 0F) {
        HedgeBetaRatio = other.HedgeBetaRatio;
      }
      if (other.HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        HedgeScope = other.HedgeScope;
      }
      if (other.HedgeSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        HedgeSession = other.HedgeSession;
      }
      if (other.ExternHedgeExDest.Length != 0) {
        ExternHedgeExDest = other.ExternHedgeExDest;
      }
      if (other.ExternHedgeParams.Length != 0) {
        ExternHedgeParams = other.ExternHedgeParams;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.OrderCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        OrderCapacity = other.OrderCapacity;
      }
      if (other.PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType = other.PositionType;
      }
      if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SsaleFlag = other.SsaleFlag;
      }
      if (other.NoCrossGroup.Length != 0) {
        NoCrossGroup = other.NoCrossGroup;
      }
      if (other.ExchTraderId.Length != 0) {
        ExchTraderId = other.ExchTraderId;
      }
      if (other.LargeTraderId.Length != 0) {
        LargeTraderId = other.LargeTraderId;
      }
      if (other.TradingLocation.Length != 0) {
        TradingLocation = other.TradingLocation;
      }
      if (other.LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        LeadSide = other.LeadSide;
      }
      if (other.MaxCompletionSlippage != 0D) {
        MaxCompletionSlippage = other.MaxCompletionSlippage;
      }
      if (other.OrderRefPremium != 0F) {
        OrderRefPremium = other.OrderRefPremium;
      }
      if (other.NoticeNumber != 0L) {
        NoticeNumber = other.NoticeNumber;
      }
      if (other.TheoVol != 0F) {
        TheoVol = other.TheoVol;
      }
      if (other.ClArriveMark != 0F) {
        ClArriveMark = other.ClArriveMark;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.ReqAuxRiskGroupCtrl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ReqAuxRiskGroupCtrl = other.ReqAuxRiskGroupCtrl;
      }
      if (other.RefRMetric1Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric1Src = other.RefRMetric1Src;
      }
      if (other.RefRMetric2Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric2Src = other.RefRMetric2Src;
      }
      if (other.RefRMetric3Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric3Src = other.RefRMetric3Src;
      }
      if (other.RefRMetric4Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric4Src = other.RefRMetric4Src;
      }
      if (other.RefRMetric5Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric5Src = other.RefRMetric5Src;
      }
      if (other.RefRMetric6Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric6Src = other.RefRMetric6Src;
      }
      if (other.RefRMetric7Src != global::Spiderrock.Protobuf.RMetricSource.Unspecified) {
        RefRMetric7Src = other.RefRMetric7Src;
      }
      if (other.OrderRefRMetric1 != 0F) {
        OrderRefRMetric1 = other.OrderRefRMetric1;
      }
      if (other.OrderRefRMetric2 != 0F) {
        OrderRefRMetric2 = other.OrderRefRMetric2;
      }
      if (other.OrderRefRMetric3 != 0F) {
        OrderRefRMetric3 = other.OrderRefRMetric3;
      }
      if (other.OrderRefRMetric4 != 0F) {
        OrderRefRMetric4 = other.OrderRefRMetric4;
      }
      if (other.OrderRefRMetric5 != 0F) {
        OrderRefRMetric5 = other.OrderRefRMetric5;
      }
      if (other.OrderRefRMetric6 != 0F) {
        OrderRefRMetric6 = other.OrderRefRMetric6;
      }
      if (other.OrderRefRMetric7 != 0F) {
        OrderRefRMetric7 = other.OrderRefRMetric7;
      }
      if (other.ExpDayWtVegaOffset != 0F) {
        ExpDayWtVegaOffset = other.ExpDayWtVegaOffset;
      }
      if (other.MaxExpDayWtVegaLn != 0F) {
        MaxExpDayWtVegaLn = other.MaxExpDayWtVegaLn;
      }
      if (other.MaxExpDayWtVegaSh != 0F) {
        MaxExpDayWtVegaSh = other.MaxExpDayWtVegaSh;
      }
      if (other.MaxExpDayRMetric6Ln != 0F) {
        MaxExpDayRMetric6Ln = other.MaxExpDayRMetric6Ln;
      }
      if (other.MaxExpDayRMetric6Sh != 0F) {
        MaxExpDayRMetric6Sh = other.MaxExpDayRMetric6Sh;
      }
      if (other.SymDayDDeltaOffset != 0F) {
        SymDayDDeltaOffset = other.SymDayDDeltaOffset;
      }
      if (other.MaxSymDayDDeltaLn != 0F) {
        MaxSymDayDDeltaLn = other.MaxSymDayDDeltaLn;
      }
      if (other.MaxSymDayDDeltaSh != 0F) {
        MaxSymDayDDeltaSh = other.MaxSymDayDDeltaSh;
      }
      if (other.SymDayVegaOffset != 0F) {
        SymDayVegaOffset = other.SymDayVegaOffset;
      }
      if (other.MaxSymDayVegaLn != 0F) {
        MaxSymDayVegaLn = other.MaxSymDayVegaLn;
      }
      if (other.MaxSymDayVegaSh != 0F) {
        MaxSymDayVegaSh = other.MaxSymDayVegaSh;
      }
      if (other.SymDayWtVegaOffset != 0F) {
        SymDayWtVegaOffset = other.SymDayWtVegaOffset;
      }
      if (other.MaxSymDayWtVegaLn != 0F) {
        MaxSymDayWtVegaLn = other.MaxSymDayWtVegaLn;
      }
      if (other.MaxSymDayWtVegaSh != 0F) {
        MaxSymDayWtVegaSh = other.MaxSymDayWtVegaSh;
      }
      if (other.MaxSymDayRMetric7Ln != 0F) {
        MaxSymDayRMetric7Ln = other.MaxSymDayRMetric7Ln;
      }
      if (other.MaxSymDayRMetric7Sh != 0F) {
        MaxSymDayRMetric7Sh = other.MaxSymDayRMetric7Sh;
      }
      if (other.MaxGrpDayDDeltaLn != 0F) {
        MaxGrpDayDDeltaLn = other.MaxGrpDayDDeltaLn;
      }
      if (other.MaxGrpDayDDeltaSh != 0F) {
        MaxGrpDayDDeltaSh = other.MaxGrpDayDDeltaSh;
      }
      if (other.MaxGrpDayVegaLn != 0F) {
        MaxGrpDayVegaLn = other.MaxGrpDayVegaLn;
      }
      if (other.MaxGrpDayVegaSh != 0F) {
        MaxGrpDayVegaSh = other.MaxGrpDayVegaSh;
      }
      if (other.MaxGrpDayVegaAbs != 0F) {
        MaxGrpDayVegaAbs = other.MaxGrpDayVegaAbs;
      }
      if (other.GrpDayVegaRatio != 0F) {
        GrpDayVegaRatio = other.GrpDayVegaRatio;
      }
      if (other.MaxGrpDayContractsLn != 0) {
        MaxGrpDayContractsLn = other.MaxGrpDayContractsLn;
      }
      if (other.MaxGrpDayContractsSh != 0) {
        MaxGrpDayContractsSh = other.MaxGrpDayContractsSh;
      }
      if (other.MaxGrpDayContractsAbs != 0) {
        MaxGrpDayContractsAbs = other.MaxGrpDayContractsAbs;
      }
      if (other.MaxGrpDayRMetric1Ln != 0F) {
        MaxGrpDayRMetric1Ln = other.MaxGrpDayRMetric1Ln;
      }
      if (other.MaxGrpDayRMetric1Sh != 0F) {
        MaxGrpDayRMetric1Sh = other.MaxGrpDayRMetric1Sh;
      }
      if (other.MaxGrpDayRMetric1Abs != 0F) {
        MaxGrpDayRMetric1Abs = other.MaxGrpDayRMetric1Abs;
      }
      if (other.GrpDayRMetric1Ratio != 0F) {
        GrpDayRMetric1Ratio = other.GrpDayRMetric1Ratio;
      }
      if (other.MaxGrpDayRMetric2Ln != 0F) {
        MaxGrpDayRMetric2Ln = other.MaxGrpDayRMetric2Ln;
      }
      if (other.MaxGrpDayRMetric2Sh != 0F) {
        MaxGrpDayRMetric2Sh = other.MaxGrpDayRMetric2Sh;
      }
      if (other.MaxGrpDayRMetric3Ln != 0F) {
        MaxGrpDayRMetric3Ln = other.MaxGrpDayRMetric3Ln;
      }
      if (other.MaxGrpDayRMetric3Sh != 0F) {
        MaxGrpDayRMetric3Sh = other.MaxGrpDayRMetric3Sh;
      }
      if (other.MaxGrpDayRMetric4Ln != 0F) {
        MaxGrpDayRMetric4Ln = other.MaxGrpDayRMetric4Ln;
      }
      if (other.MaxGrpDayRMetric4Sh != 0F) {
        MaxGrpDayRMetric4Sh = other.MaxGrpDayRMetric4Sh;
      }
      if (other.MaxGrpDayRMetric5Ln != 0F) {
        MaxGrpDayRMetric5Ln = other.MaxGrpDayRMetric5Ln;
      }
      if (other.MaxGrpDayRMetric5Sh != 0F) {
        MaxGrpDayRMetric5Sh = other.MaxGrpDayRMetric5Sh;
      }
      if (other.SymEmaCxlDDeltaLn != 0F) {
        SymEmaCxlDDeltaLn = other.SymEmaCxlDDeltaLn;
      }
      if (other.SymEmaCxlDDeltaSh != 0F) {
        SymEmaCxlDDeltaSh = other.SymEmaCxlDDeltaSh;
      }
      if (other.SymEmaCxlWtVegaLn != 0F) {
        SymEmaCxlWtVegaLn = other.SymEmaCxlWtVegaLn;
      }
      if (other.SymEmaCxlWtVegaSh != 0F) {
        SymEmaCxlWtVegaSh = other.SymEmaCxlWtVegaSh;
      }
      if (other.lastFillDttm_ != null) {
        if (lastFillDttm_ == null) {
          LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastFillDttm.MergeFrom(other.LastFillDttm);
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.ChildData.Length != 0) {
        ChildData = other.ChildData;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.SgwTimestamp != 0L) {
        SgwTimestamp = other.SgwTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        IncludeSRNetwork = other.IncludeSRNetwork;
      }
      directedCounterParty_.Add(other.directedCounterParty_);
      orderLegs_.Add(other.orderLegs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 824: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 848: {
            SpdrActionType = (global::Spiderrock.Protobuf.SpdrActionType) input.ReadEnum();
            break;
          }
          case 872: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 896: {
            ClientSeqNumIn = input.ReadInt32();
            break;
          }
          case 922: {
            AltOrderId = input.ReadString();
            break;
          }
          case 946: {
            AltPrevOrderId = input.ReadString();
            break;
          }
          case 994: {
            AltAutoHedgeId = input.ReadString();
            break;
          }
          case 1018: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1042: {
            AltUserName = input.ReadString();
            break;
          }
          case 1066: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1088: {
            PackageId = input.ReadInt64();
            break;
          }
          case 1114: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1136: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1162: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 1186: {
            Accnt = input.ReadString();
            break;
          }
          case 1210: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1232: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1256: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1282: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 1306: {
            ExternExDest = input.ReadString();
            break;
          }
          case 1330: {
            ExternParams = input.ReadString();
            break;
          }
          case 1354: {
            Strategy = input.ReadString();
            break;
          }
          case 1378: {
            UserName = input.ReadString();
            break;
          }
          case 1426: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 1448: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1472: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1496: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 1520: {
            CurCumFillQuantity = input.ReadInt32();
            break;
          }
          case 1544: {
            AddCumFillQuantity = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1568: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 1592: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 1616: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 1640: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 1688: {
            BlockVisibility = (global::Spiderrock.Protobuf.BlockVisibility) input.ReadEnum();
            break;
          }
          case 1712: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 1736: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1765: {
            VwapParticipation = input.ReadFloat();
            break;
          }
          case 1784: {
            MinMktOnClosePct = input.ReadInt32();
            break;
          }
          case 1808: {
            TriggerType = (global::Spiderrock.Protobuf.TriggerType) input.ReadEnum();
            break;
          }
          case 1837: {
            TriggerLevel = input.ReadFloat();
            break;
          }
          case 1856: {
            AuctionResponder = (global::Spiderrock.Protobuf.AuctionResponder) input.ReadEnum();
            break;
          }
          case 1885: {
            MaxMakeExchFee = input.ReadFloat();
            break;
          }
          case 1909: {
            MaxTakeExchFee = input.ReadFloat();
            break;
          }
          case 1928: {
            IncTakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1952: {
            IncMakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1976: {
            MakeExchRule = (global::Spiderrock.Protobuf.MakeExchRule) input.ReadEnum();
            break;
          }
          case 2000: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 2029: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 2053: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 2072: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 2101: {
            MinOptionPx = input.ReadFloat();
            break;
          }
          case 2120: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 2144: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 2168: {
            SpdrStageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 2218: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 2240: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 2266: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 2288: {
            StartType = (global::Spiderrock.Protobuf.StartType) input.ReadEnum();
            break;
          }
          case 2312: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 2336: {
            TriggerTimestamp = input.ReadInt64();
            break;
          }
          case 2384: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 2408: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 2432: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 2456: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2480: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2504: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 2529: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 2553: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 2581: {
            OrderRefDelta = input.ReadFloat();
            break;
          }
          case 2605: {
            OrderRefGamma = input.ReadFloat();
            break;
          }
          case 2629: {
            OrderVolLimit = input.ReadFloat();
            break;
          }
          case 2653: {
            RateOverride = input.ReadFloat();
            break;
          }
          case 2677: {
            SdivOverride = input.ReadFloat();
            break;
          }
          case 2698: {
            DdivOverride = input.ReadString();
            break;
          }
          case 2720: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 2745: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 2768: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 2792: {
            UStateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 2816: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 2840: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 2869: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 2893: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 2917: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 2941: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 2961: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 2989: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 3013: {
            TakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 3033: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 3061: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 3085: {
            MakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 3109: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 3130: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 3152: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 3176: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 3202: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 3229: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 3248: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 3298: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 3322: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 3344: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 3368: {
            OrderCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 3392: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3416: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 3442: {
            NoCrossGroup = input.ReadString();
            break;
          }
          case 3466: {
            ExchTraderId = input.ReadString();
            break;
          }
          case 3490: {
            LargeTraderId = input.ReadString();
            break;
          }
          case 3514: {
            TradingLocation = input.ReadString();
            break;
          }
          case 3536: {
            RefRMetric1Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3560: {
            RefRMetric2Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3584: {
            RefRMetric3Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3608: {
            RefRMetric4Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3632: {
            RefRMetric5Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3656: {
            RefRMetric6Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3680: {
            RefRMetric7Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3709: {
            OrderRefRMetric1 = input.ReadFloat();
            break;
          }
          case 3733: {
            OrderRefRMetric2 = input.ReadFloat();
            break;
          }
          case 3757: {
            OrderRefRMetric3 = input.ReadFloat();
            break;
          }
          case 3781: {
            OrderRefRMetric4 = input.ReadFloat();
            break;
          }
          case 3805: {
            OrderRefRMetric5 = input.ReadFloat();
            break;
          }
          case 3829: {
            OrderRefRMetric6 = input.ReadFloat();
            break;
          }
          case 3853: {
            OrderRefRMetric7 = input.ReadFloat();
            break;
          }
          case 3872: {
            LeadSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3897: {
            MaxCompletionSlippage = input.ReadDouble();
            break;
          }
          case 3925: {
            OrderRefPremium = input.ReadFloat();
            break;
          }
          case 3973: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3997: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 4016: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 4189: {
            MaxExpDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 4213: {
            MaxExpDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 4237: {
            ExpDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 4261: {
            MaxSymDayVegaLn = input.ReadFloat();
            break;
          }
          case 4285: {
            MaxSymDayVegaSh = input.ReadFloat();
            break;
          }
          case 4309: {
            SymDayVegaOffset = input.ReadFloat();
            break;
          }
          case 4333: {
            MaxSymDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 4357: {
            MaxSymDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 4381: {
            SymDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 4405: {
            MaxSymDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 4429: {
            MaxSymDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 4453: {
            SymDayDDeltaOffset = input.ReadFloat();
            break;
          }
          case 4477: {
            MaxExpDayRMetric6Ln = input.ReadFloat();
            break;
          }
          case 4501: {
            MaxExpDayRMetric6Sh = input.ReadFloat();
            break;
          }
          case 4549: {
            MaxSymDayRMetric7Ln = input.ReadFloat();
            break;
          }
          case 4573: {
            MaxSymDayRMetric7Sh = input.ReadFloat();
            break;
          }
          case 4621: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 4645: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 4693: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 4717: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 4741: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 4765: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 4885: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 4909: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 4933: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 4957: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 4981: {
            MaxGrpDayRMetric2Ln = input.ReadFloat();
            break;
          }
          case 5005: {
            MaxGrpDayRMetric2Sh = input.ReadFloat();
            break;
          }
          case 5029: {
            MaxGrpDayRMetric3Ln = input.ReadFloat();
            break;
          }
          case 5053: {
            MaxGrpDayRMetric3Sh = input.ReadFloat();
            break;
          }
          case 5077: {
            MaxGrpDayRMetric4Ln = input.ReadFloat();
            break;
          }
          case 5101: {
            MaxGrpDayRMetric4Sh = input.ReadFloat();
            break;
          }
          case 5125: {
            MaxGrpDayRMetric5Ln = input.ReadFloat();
            break;
          }
          case 5149: {
            MaxGrpDayRMetric5Sh = input.ReadFloat();
            break;
          }
          case 5168: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 5192: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 5216: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 5245: {
            SymEmaCxlDDeltaLn = input.ReadFloat();
            break;
          }
          case 5269: {
            SymEmaCxlDDeltaSh = input.ReadFloat();
            break;
          }
          case 5293: {
            SymEmaCxlWtVegaLn = input.ReadFloat();
            break;
          }
          case 5317: {
            SymEmaCxlWtVegaSh = input.ReadFloat();
            break;
          }
          case 5338: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 5362: {
            UserData1 = input.ReadString();
            break;
          }
          case 5386: {
            UserData2 = input.ReadString();
            break;
          }
          case 5410: {
            ChildData = input.ReadString();
            break;
          }
          case 5432: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 5456: {
            SgwTimestamp = input.ReadInt64();
            break;
          }
          case 5482: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 5528: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 5554: {
            directedCounterParty_.AddEntriesFrom(input, _repeated_directedCounterParty_codec);
            break;
          }
          case 6010: {
            orderLegs_.AddEntriesFrom(input, _repeated_orderLegs_codec);
            break;
          }
          case 8256: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 8264: {
            ReqAuxRiskGroupCtrl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 8272: {
            UserSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 8280: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 8288: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 8296: {
            HedgeSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentOrder.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 824: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 848: {
            SpdrActionType = (global::Spiderrock.Protobuf.SpdrActionType) input.ReadEnum();
            break;
          }
          case 872: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 896: {
            ClientSeqNumIn = input.ReadInt32();
            break;
          }
          case 922: {
            AltOrderId = input.ReadString();
            break;
          }
          case 946: {
            AltPrevOrderId = input.ReadString();
            break;
          }
          case 994: {
            AltAutoHedgeId = input.ReadString();
            break;
          }
          case 1018: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1042: {
            AltUserName = input.ReadString();
            break;
          }
          case 1066: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1088: {
            PackageId = input.ReadInt64();
            break;
          }
          case 1114: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1136: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1162: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 1186: {
            Accnt = input.ReadString();
            break;
          }
          case 1210: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1232: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1256: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1282: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 1306: {
            ExternExDest = input.ReadString();
            break;
          }
          case 1330: {
            ExternParams = input.ReadString();
            break;
          }
          case 1354: {
            Strategy = input.ReadString();
            break;
          }
          case 1378: {
            UserName = input.ReadString();
            break;
          }
          case 1426: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 1448: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1472: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1496: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 1520: {
            CurCumFillQuantity = input.ReadInt32();
            break;
          }
          case 1544: {
            AddCumFillQuantity = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1568: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 1592: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 1616: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 1640: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 1688: {
            BlockVisibility = (global::Spiderrock.Protobuf.BlockVisibility) input.ReadEnum();
            break;
          }
          case 1712: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 1736: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1765: {
            VwapParticipation = input.ReadFloat();
            break;
          }
          case 1784: {
            MinMktOnClosePct = input.ReadInt32();
            break;
          }
          case 1808: {
            TriggerType = (global::Spiderrock.Protobuf.TriggerType) input.ReadEnum();
            break;
          }
          case 1837: {
            TriggerLevel = input.ReadFloat();
            break;
          }
          case 1856: {
            AuctionResponder = (global::Spiderrock.Protobuf.AuctionResponder) input.ReadEnum();
            break;
          }
          case 1885: {
            MaxMakeExchFee = input.ReadFloat();
            break;
          }
          case 1909: {
            MaxTakeExchFee = input.ReadFloat();
            break;
          }
          case 1928: {
            IncTakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1952: {
            IncMakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1976: {
            MakeExchRule = (global::Spiderrock.Protobuf.MakeExchRule) input.ReadEnum();
            break;
          }
          case 2000: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 2029: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 2053: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 2072: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 2101: {
            MinOptionPx = input.ReadFloat();
            break;
          }
          case 2120: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 2144: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 2168: {
            SpdrStageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 2218: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 2240: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 2266: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 2288: {
            StartType = (global::Spiderrock.Protobuf.StartType) input.ReadEnum();
            break;
          }
          case 2312: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 2336: {
            TriggerTimestamp = input.ReadInt64();
            break;
          }
          case 2384: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 2408: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 2432: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 2456: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2480: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2504: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 2529: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 2553: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 2581: {
            OrderRefDelta = input.ReadFloat();
            break;
          }
          case 2605: {
            OrderRefGamma = input.ReadFloat();
            break;
          }
          case 2629: {
            OrderVolLimit = input.ReadFloat();
            break;
          }
          case 2653: {
            RateOverride = input.ReadFloat();
            break;
          }
          case 2677: {
            SdivOverride = input.ReadFloat();
            break;
          }
          case 2698: {
            DdivOverride = input.ReadString();
            break;
          }
          case 2720: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 2745: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 2768: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 2792: {
            UStateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 2816: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 2840: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 2869: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 2893: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 2917: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 2941: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 2961: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 2989: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 3013: {
            TakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 3033: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 3061: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 3085: {
            MakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 3109: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 3130: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 3152: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 3176: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 3202: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 3229: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 3248: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 3298: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 3322: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 3344: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 3368: {
            OrderCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 3392: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3416: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 3442: {
            NoCrossGroup = input.ReadString();
            break;
          }
          case 3466: {
            ExchTraderId = input.ReadString();
            break;
          }
          case 3490: {
            LargeTraderId = input.ReadString();
            break;
          }
          case 3514: {
            TradingLocation = input.ReadString();
            break;
          }
          case 3536: {
            RefRMetric1Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3560: {
            RefRMetric2Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3584: {
            RefRMetric3Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3608: {
            RefRMetric4Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3632: {
            RefRMetric5Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3656: {
            RefRMetric6Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3680: {
            RefRMetric7Src = (global::Spiderrock.Protobuf.RMetricSource) input.ReadEnum();
            break;
          }
          case 3709: {
            OrderRefRMetric1 = input.ReadFloat();
            break;
          }
          case 3733: {
            OrderRefRMetric2 = input.ReadFloat();
            break;
          }
          case 3757: {
            OrderRefRMetric3 = input.ReadFloat();
            break;
          }
          case 3781: {
            OrderRefRMetric4 = input.ReadFloat();
            break;
          }
          case 3805: {
            OrderRefRMetric5 = input.ReadFloat();
            break;
          }
          case 3829: {
            OrderRefRMetric6 = input.ReadFloat();
            break;
          }
          case 3853: {
            OrderRefRMetric7 = input.ReadFloat();
            break;
          }
          case 3872: {
            LeadSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3897: {
            MaxCompletionSlippage = input.ReadDouble();
            break;
          }
          case 3925: {
            OrderRefPremium = input.ReadFloat();
            break;
          }
          case 3973: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3997: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 4016: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 4189: {
            MaxExpDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 4213: {
            MaxExpDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 4237: {
            ExpDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 4261: {
            MaxSymDayVegaLn = input.ReadFloat();
            break;
          }
          case 4285: {
            MaxSymDayVegaSh = input.ReadFloat();
            break;
          }
          case 4309: {
            SymDayVegaOffset = input.ReadFloat();
            break;
          }
          case 4333: {
            MaxSymDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 4357: {
            MaxSymDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 4381: {
            SymDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 4405: {
            MaxSymDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 4429: {
            MaxSymDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 4453: {
            SymDayDDeltaOffset = input.ReadFloat();
            break;
          }
          case 4477: {
            MaxExpDayRMetric6Ln = input.ReadFloat();
            break;
          }
          case 4501: {
            MaxExpDayRMetric6Sh = input.ReadFloat();
            break;
          }
          case 4549: {
            MaxSymDayRMetric7Ln = input.ReadFloat();
            break;
          }
          case 4573: {
            MaxSymDayRMetric7Sh = input.ReadFloat();
            break;
          }
          case 4621: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 4645: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 4693: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 4717: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 4741: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 4765: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 4885: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 4909: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 4933: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 4957: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 4981: {
            MaxGrpDayRMetric2Ln = input.ReadFloat();
            break;
          }
          case 5005: {
            MaxGrpDayRMetric2Sh = input.ReadFloat();
            break;
          }
          case 5029: {
            MaxGrpDayRMetric3Ln = input.ReadFloat();
            break;
          }
          case 5053: {
            MaxGrpDayRMetric3Sh = input.ReadFloat();
            break;
          }
          case 5077: {
            MaxGrpDayRMetric4Ln = input.ReadFloat();
            break;
          }
          case 5101: {
            MaxGrpDayRMetric4Sh = input.ReadFloat();
            break;
          }
          case 5125: {
            MaxGrpDayRMetric5Ln = input.ReadFloat();
            break;
          }
          case 5149: {
            MaxGrpDayRMetric5Sh = input.ReadFloat();
            break;
          }
          case 5168: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 5192: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 5216: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 5245: {
            SymEmaCxlDDeltaLn = input.ReadFloat();
            break;
          }
          case 5269: {
            SymEmaCxlDDeltaSh = input.ReadFloat();
            break;
          }
          case 5293: {
            SymEmaCxlWtVegaLn = input.ReadFloat();
            break;
          }
          case 5317: {
            SymEmaCxlWtVegaSh = input.ReadFloat();
            break;
          }
          case 5338: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 5362: {
            UserData1 = input.ReadString();
            break;
          }
          case 5386: {
            UserData2 = input.ReadString();
            break;
          }
          case 5410: {
            ChildData = input.ReadString();
            break;
          }
          case 5432: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 5456: {
            SgwTimestamp = input.ReadInt64();
            break;
          }
          case 5482: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 5528: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 5554: {
            directedCounterParty_.AddEntriesFrom(ref input, _repeated_directedCounterParty_codec);
            break;
          }
          case 6010: {
            orderLegs_.AddEntriesFrom(ref input, _repeated_orderLegs_codec);
            break;
          }
          case 8256: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 8264: {
            ReqAuxRiskGroupCtrl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 8272: {
            UserSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 8280: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 8288: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 8296: {
            HedgeSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrParentOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentOrder.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          parentNumber_ = other.parentNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "parent_number" field.</summary>
        public const int ParentNumberFieldNumber = 10;
        private long parentNumber_;
        /// <summary>
        /// SPDR order number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ParentNumber {
          get { return parentNumber_; }
          set {
            parentNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParentNumber != other.ParentNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ParentNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ParentNumber != 0L) {
            ParentNumber = other.ParentNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class DirectedCounterParty : pb::IMessage<DirectedCounterParty>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DirectedCounterParty> _parser = new pb::MessageParser<DirectedCounterParty>(() => new DirectedCounterParty());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DirectedCounterParty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentOrder.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty(DirectedCounterParty other) : this() {
          clientFirm_ = other.clientFirm_;
          inclExcl_ = other.inclExcl_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty Clone() {
          return new DirectedCounterParty(this);
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 697;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "incl_excl" field.</summary>
        public const int InclExclFieldNumber = 700;
        private global::Spiderrock.Protobuf.InclExclDisclose inclExcl_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.InclExclDisclose InclExcl {
          get { return inclExcl_; }
          set {
            inclExcl_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DirectedCounterParty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DirectedCounterParty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientFirm != other.ClientFirm) return false;
          if (InclExcl != other.InclExcl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= InclExcl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(202, 43);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(224, 43);
            output.WriteEnum((int) InclExcl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(202, 43);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(224, 43);
            output.WriteEnum((int) InclExcl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ClientFirm.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InclExcl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DirectedCounterParty other) {
          if (other == null) {
            return;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            InclExcl = other.InclExcl;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 5578: {
                ClientFirm = input.ReadString();
                break;
              }
              case 5600: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 5578: {
                ClientFirm = input.ReadString();
                break;
              }
              case 5600: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class OrderLegs : pb::IMessage<OrderLegs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<OrderLegs> _parser = new pb::MessageParser<OrderLegs>(() => new OrderLegs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<OrderLegs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentOrder.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs(OrderLegs other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          stockSide_ = other.stockSide_;
          stockShares_ = other.stockShares_;
          stockLegId_ = other.stockLegId_;
          altStkLegId_ = other.altStkLegId_;
          ssaleFlag_ = other.ssaleFlag_;
          refUPrc_ = other.refUPrc_;
          numLegs_ = other.numLegs_;
          secKey1_ = other.secKey1_ != null ? other.secKey1_.Clone() : null;
          secType1_ = other.secType1_;
          mult1_ = other.mult1_;
          side1_ = other.side1_;
          legId1_ = other.legId1_;
          altLegId1_ = other.altLegId1_;
          posType1_ = other.posType1_;
          ssaleFlag1_ = other.ssaleFlag1_;
          vega1_ = other.vega1_;
          refUPrc1_ = other.refUPrc1_;
          refDelta1_ = other.refDelta1_;
          refEarnCnt1_ = other.refEarnCnt1_;
          secKey2_ = other.secKey2_ != null ? other.secKey2_.Clone() : null;
          secType2_ = other.secType2_;
          mult2_ = other.mult2_;
          side2_ = other.side2_;
          legId2_ = other.legId2_;
          altLegId2_ = other.altLegId2_;
          posType2_ = other.posType2_;
          ssaleFlag2_ = other.ssaleFlag2_;
          vega2_ = other.vega2_;
          refUPrc2_ = other.refUPrc2_;
          refDelta2_ = other.refDelta2_;
          refEarnCnt2_ = other.refEarnCnt2_;
          secKey3_ = other.secKey3_ != null ? other.secKey3_.Clone() : null;
          secType3_ = other.secType3_;
          mult3_ = other.mult3_;
          side3_ = other.side3_;
          legId3_ = other.legId3_;
          altLegId3_ = other.altLegId3_;
          posType3_ = other.posType3_;
          ssaleFlag3_ = other.ssaleFlag3_;
          vega3_ = other.vega3_;
          refUPrc3_ = other.refUPrc3_;
          refDelta3_ = other.refDelta3_;
          refEarnCnt3_ = other.refEarnCnt3_;
          secKey4_ = other.secKey4_ != null ? other.secKey4_.Clone() : null;
          secType4_ = other.secType4_;
          mult4_ = other.mult4_;
          side4_ = other.side4_;
          legId4_ = other.legId4_;
          altLegId4_ = other.altLegId4_;
          posType4_ = other.posType4_;
          ssaleFlag4_ = other.ssaleFlag4_;
          vega4_ = other.vega4_;
          refUPrc4_ = other.refUPrc4_;
          refDelta4_ = other.refDelta4_;
          refEarnCnt4_ = other.refEarnCnt4_;
          secKey5_ = other.secKey5_ != null ? other.secKey5_.Clone() : null;
          secType5_ = other.secType5_;
          mult5_ = other.mult5_;
          side5_ = other.side5_;
          legId5_ = other.legId5_;
          altLegId5_ = other.altLegId5_;
          posType5_ = other.posType5_;
          ssaleFlag5_ = other.ssaleFlag5_;
          vega5_ = other.vega5_;
          refUPrc5_ = other.refUPrc5_;
          refDelta5_ = other.refDelta5_;
          refEarnCnt5_ = other.refEarnCnt5_;
          secKey6_ = other.secKey6_ != null ? other.secKey6_.Clone() : null;
          secType6_ = other.secType6_;
          mult6_ = other.mult6_;
          side6_ = other.side6_;
          legId6_ = other.legId6_;
          altLegId6_ = other.altLegId6_;
          posType6_ = other.posType6_;
          ssaleFlag6_ = other.ssaleFlag6_;
          vega6_ = other.vega6_;
          refUPrc6_ = other.refUPrc6_;
          refDelta6_ = other.refDelta6_;
          refEarnCnt6_ = other.refEarnCnt6_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs Clone() {
          return new OrderLegs(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 754;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        /// <summary>
        /// stock ticker
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "stock_side" field.</summary>
        public const int StockSideFieldNumber = 757;
        private global::Spiderrock.Protobuf.BuySell stockSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        /// <summary>
        /// [Buy | Sell | None]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell StockSide {
          get { return stockSide_; }
          set {
            stockSide_ = value;
          }
        }

        /// <summary>Field number for the "stock_shares" field.</summary>
        public const int StockSharesFieldNumber = 760;
        private int stockShares_;
        /// <summary>
        /// number of shares included (zero if none)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int StockShares {
          get { return stockShares_; }
          set {
            stockShares_ = value;
          }
        }

        /// <summary>Field number for the "stock_leg_id" field.</summary>
        public const int StockLegIdFieldNumber = 763;
        private long stockLegId_;
        /// <summary>
        /// SR stock leg ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long StockLegId {
          get { return stockLegId_; }
          set {
            stockLegId_ = value;
          }
        }

        /// <summary>Field number for the "alt_stk_leg_id" field.</summary>
        public const int AltStkLegIdFieldNumber = 766;
        private string altStkLegId_ = "";
        /// <summary>
        /// client stock leg ID (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltStkLegId {
          get { return altStkLegId_; }
          set {
            altStkLegId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ssale_flag" field.</summary>
        public const int SsaleFlagFieldNumber = 769;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        /// <summary>
        /// stock short sale flag
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
          get { return ssaleFlag_; }
          set {
            ssaleFlag_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc" field.</summary>
        public const int RefUPrcFieldNumber = 775;
        private float refUPrc_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefUPrc {
          get { return refUPrc_; }
          set {
            refUPrc_ = value;
          }
        }

        /// <summary>Field number for the "num_legs" field.</summary>
        public const int NumLegsFieldNumber = 778;
        private int numLegs_;
        /// <summary>
        /// number of valid legs below
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NumLegs {
          get { return numLegs_; }
          set {
            numLegs_ = value;
          }
        }

        /// <summary>Field number for the "sec_key1" field.</summary>
        public const int SecKey1FieldNumber = 781;
        private global::Spiderrock.Protobuf.OptionKey secKey1_;
        /// <summary>
        /// leg #1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey1 {
          get { return secKey1_; }
          set {
            secKey1_ = value;
          }
        }

        /// <summary>Field number for the "sec_type1" field.</summary>
        public const int SecType1FieldNumber = 784;
        private global::Spiderrock.Protobuf.SpdrKeyType secType1_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType1 {
          get { return secType1_; }
          set {
            secType1_ = value;
          }
        }

        /// <summary>Field number for the "mult1" field.</summary>
        public const int Mult1FieldNumber = 787;
        private uint mult1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult1 {
          get { return mult1_; }
          set {
            mult1_ = value;
          }
        }

        /// <summary>Field number for the "side1" field.</summary>
        public const int Side1FieldNumber = 790;
        private global::Spiderrock.Protobuf.BuySell side1_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side1 {
          get { return side1_; }
          set {
            side1_ = value;
          }
        }

        /// <summary>Field number for the "leg_id1" field.</summary>
        public const int LegId1FieldNumber = 793;
        private long legId1_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId1 {
          get { return legId1_; }
          set {
            legId1_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id1" field.</summary>
        public const int AltLegId1FieldNumber = 796;
        private string altLegId1_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId1 {
          get { return altLegId1_; }
          set {
            altLegId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type1" field.</summary>
        public const int PosType1FieldNumber = 799;
        private global::Spiderrock.Protobuf.PositionType posType1_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType1 {
          get { return posType1_; }
          set {
            posType1_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag1" field.</summary>
        public const int SsaleFlag1FieldNumber = 805;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag1_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag1 {
          get { return ssaleFlag1_; }
          set {
            ssaleFlag1_ = value;
          }
        }

        /// <summary>Field number for the "vega1" field.</summary>
        public const int Vega1FieldNumber = 811;
        private float vega1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega1 {
          get { return vega1_; }
          set {
            vega1_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc1" field.</summary>
        public const int RefUPrc1FieldNumber = 814;
        private double refUPrc1_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc1 {
          get { return refUPrc1_; }
          set {
            refUPrc1_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta1" field.</summary>
        public const int RefDelta1FieldNumber = 817;
        private float refDelta1_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta1 {
          get { return refDelta1_; }
          set {
            refDelta1_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt1" field.</summary>
        public const int RefEarnCnt1FieldNumber = 820;
        private int refEarnCnt1_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt1 {
          get { return refEarnCnt1_; }
          set {
            refEarnCnt1_ = value;
          }
        }

        /// <summary>Field number for the "sec_key2" field.</summary>
        public const int SecKey2FieldNumber = 823;
        private global::Spiderrock.Protobuf.OptionKey secKey2_;
        /// <summary>
        /// leg #2
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey2 {
          get { return secKey2_; }
          set {
            secKey2_ = value;
          }
        }

        /// <summary>Field number for the "sec_type2" field.</summary>
        public const int SecType2FieldNumber = 826;
        private global::Spiderrock.Protobuf.SpdrKeyType secType2_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType2 {
          get { return secType2_; }
          set {
            secType2_ = value;
          }
        }

        /// <summary>Field number for the "mult2" field.</summary>
        public const int Mult2FieldNumber = 829;
        private uint mult2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult2 {
          get { return mult2_; }
          set {
            mult2_ = value;
          }
        }

        /// <summary>Field number for the "side2" field.</summary>
        public const int Side2FieldNumber = 832;
        private global::Spiderrock.Protobuf.BuySell side2_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side2 {
          get { return side2_; }
          set {
            side2_ = value;
          }
        }

        /// <summary>Field number for the "leg_id2" field.</summary>
        public const int LegId2FieldNumber = 835;
        private long legId2_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId2 {
          get { return legId2_; }
          set {
            legId2_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id2" field.</summary>
        public const int AltLegId2FieldNumber = 838;
        private string altLegId2_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId2 {
          get { return altLegId2_; }
          set {
            altLegId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type2" field.</summary>
        public const int PosType2FieldNumber = 841;
        private global::Spiderrock.Protobuf.PositionType posType2_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType2 {
          get { return posType2_; }
          set {
            posType2_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag2" field.</summary>
        public const int SsaleFlag2FieldNumber = 847;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag2_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag2 {
          get { return ssaleFlag2_; }
          set {
            ssaleFlag2_ = value;
          }
        }

        /// <summary>Field number for the "vega2" field.</summary>
        public const int Vega2FieldNumber = 853;
        private float vega2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega2 {
          get { return vega2_; }
          set {
            vega2_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc2" field.</summary>
        public const int RefUPrc2FieldNumber = 856;
        private double refUPrc2_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc2 {
          get { return refUPrc2_; }
          set {
            refUPrc2_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta2" field.</summary>
        public const int RefDelta2FieldNumber = 859;
        private float refDelta2_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta2 {
          get { return refDelta2_; }
          set {
            refDelta2_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt2" field.</summary>
        public const int RefEarnCnt2FieldNumber = 862;
        private int refEarnCnt2_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt2 {
          get { return refEarnCnt2_; }
          set {
            refEarnCnt2_ = value;
          }
        }

        /// <summary>Field number for the "sec_key3" field.</summary>
        public const int SecKey3FieldNumber = 865;
        private global::Spiderrock.Protobuf.OptionKey secKey3_;
        /// <summary>
        /// leg #3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey3 {
          get { return secKey3_; }
          set {
            secKey3_ = value;
          }
        }

        /// <summary>Field number for the "sec_type3" field.</summary>
        public const int SecType3FieldNumber = 868;
        private global::Spiderrock.Protobuf.SpdrKeyType secType3_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType3 {
          get { return secType3_; }
          set {
            secType3_ = value;
          }
        }

        /// <summary>Field number for the "mult3" field.</summary>
        public const int Mult3FieldNumber = 871;
        private uint mult3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult3 {
          get { return mult3_; }
          set {
            mult3_ = value;
          }
        }

        /// <summary>Field number for the "side3" field.</summary>
        public const int Side3FieldNumber = 874;
        private global::Spiderrock.Protobuf.BuySell side3_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side3 {
          get { return side3_; }
          set {
            side3_ = value;
          }
        }

        /// <summary>Field number for the "leg_id3" field.</summary>
        public const int LegId3FieldNumber = 877;
        private long legId3_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId3 {
          get { return legId3_; }
          set {
            legId3_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id3" field.</summary>
        public const int AltLegId3FieldNumber = 880;
        private string altLegId3_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId3 {
          get { return altLegId3_; }
          set {
            altLegId3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type3" field.</summary>
        public const int PosType3FieldNumber = 883;
        private global::Spiderrock.Protobuf.PositionType posType3_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType3 {
          get { return posType3_; }
          set {
            posType3_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag3" field.</summary>
        public const int SsaleFlag3FieldNumber = 889;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag3_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag3 {
          get { return ssaleFlag3_; }
          set {
            ssaleFlag3_ = value;
          }
        }

        /// <summary>Field number for the "vega3" field.</summary>
        public const int Vega3FieldNumber = 895;
        private float vega3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega3 {
          get { return vega3_; }
          set {
            vega3_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc3" field.</summary>
        public const int RefUPrc3FieldNumber = 898;
        private double refUPrc3_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc3 {
          get { return refUPrc3_; }
          set {
            refUPrc3_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta3" field.</summary>
        public const int RefDelta3FieldNumber = 901;
        private float refDelta3_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta3 {
          get { return refDelta3_; }
          set {
            refDelta3_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt3" field.</summary>
        public const int RefEarnCnt3FieldNumber = 904;
        private int refEarnCnt3_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt3 {
          get { return refEarnCnt3_; }
          set {
            refEarnCnt3_ = value;
          }
        }

        /// <summary>Field number for the "sec_key4" field.</summary>
        public const int SecKey4FieldNumber = 907;
        private global::Spiderrock.Protobuf.OptionKey secKey4_;
        /// <summary>
        /// leg #4
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey4 {
          get { return secKey4_; }
          set {
            secKey4_ = value;
          }
        }

        /// <summary>Field number for the "sec_type4" field.</summary>
        public const int SecType4FieldNumber = 910;
        private global::Spiderrock.Protobuf.SpdrKeyType secType4_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType4 {
          get { return secType4_; }
          set {
            secType4_ = value;
          }
        }

        /// <summary>Field number for the "mult4" field.</summary>
        public const int Mult4FieldNumber = 913;
        private uint mult4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult4 {
          get { return mult4_; }
          set {
            mult4_ = value;
          }
        }

        /// <summary>Field number for the "side4" field.</summary>
        public const int Side4FieldNumber = 916;
        private global::Spiderrock.Protobuf.BuySell side4_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side4 {
          get { return side4_; }
          set {
            side4_ = value;
          }
        }

        /// <summary>Field number for the "leg_id4" field.</summary>
        public const int LegId4FieldNumber = 919;
        private long legId4_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId4 {
          get { return legId4_; }
          set {
            legId4_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id4" field.</summary>
        public const int AltLegId4FieldNumber = 922;
        private string altLegId4_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId4 {
          get { return altLegId4_; }
          set {
            altLegId4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type4" field.</summary>
        public const int PosType4FieldNumber = 925;
        private global::Spiderrock.Protobuf.PositionType posType4_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType4 {
          get { return posType4_; }
          set {
            posType4_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag4" field.</summary>
        public const int SsaleFlag4FieldNumber = 931;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag4_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag4 {
          get { return ssaleFlag4_; }
          set {
            ssaleFlag4_ = value;
          }
        }

        /// <summary>Field number for the "vega4" field.</summary>
        public const int Vega4FieldNumber = 937;
        private float vega4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega4 {
          get { return vega4_; }
          set {
            vega4_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc4" field.</summary>
        public const int RefUPrc4FieldNumber = 940;
        private double refUPrc4_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc4 {
          get { return refUPrc4_; }
          set {
            refUPrc4_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta4" field.</summary>
        public const int RefDelta4FieldNumber = 943;
        private float refDelta4_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta4 {
          get { return refDelta4_; }
          set {
            refDelta4_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt4" field.</summary>
        public const int RefEarnCnt4FieldNumber = 946;
        private int refEarnCnt4_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt4 {
          get { return refEarnCnt4_; }
          set {
            refEarnCnt4_ = value;
          }
        }

        /// <summary>Field number for the "sec_key5" field.</summary>
        public const int SecKey5FieldNumber = 949;
        private global::Spiderrock.Protobuf.OptionKey secKey5_;
        /// <summary>
        /// leg #5
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey5 {
          get { return secKey5_; }
          set {
            secKey5_ = value;
          }
        }

        /// <summary>Field number for the "sec_type5" field.</summary>
        public const int SecType5FieldNumber = 952;
        private global::Spiderrock.Protobuf.SpdrKeyType secType5_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType5 {
          get { return secType5_; }
          set {
            secType5_ = value;
          }
        }

        /// <summary>Field number for the "mult5" field.</summary>
        public const int Mult5FieldNumber = 955;
        private uint mult5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult5 {
          get { return mult5_; }
          set {
            mult5_ = value;
          }
        }

        /// <summary>Field number for the "side5" field.</summary>
        public const int Side5FieldNumber = 958;
        private global::Spiderrock.Protobuf.BuySell side5_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side5 {
          get { return side5_; }
          set {
            side5_ = value;
          }
        }

        /// <summary>Field number for the "leg_id5" field.</summary>
        public const int LegId5FieldNumber = 961;
        private long legId5_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId5 {
          get { return legId5_; }
          set {
            legId5_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id5" field.</summary>
        public const int AltLegId5FieldNumber = 964;
        private string altLegId5_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId5 {
          get { return altLegId5_; }
          set {
            altLegId5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type5" field.</summary>
        public const int PosType5FieldNumber = 967;
        private global::Spiderrock.Protobuf.PositionType posType5_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType5 {
          get { return posType5_; }
          set {
            posType5_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag5" field.</summary>
        public const int SsaleFlag5FieldNumber = 973;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag5_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag5 {
          get { return ssaleFlag5_; }
          set {
            ssaleFlag5_ = value;
          }
        }

        /// <summary>Field number for the "vega5" field.</summary>
        public const int Vega5FieldNumber = 979;
        private float vega5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega5 {
          get { return vega5_; }
          set {
            vega5_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc5" field.</summary>
        public const int RefUPrc5FieldNumber = 982;
        private double refUPrc5_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc5 {
          get { return refUPrc5_; }
          set {
            refUPrc5_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta5" field.</summary>
        public const int RefDelta5FieldNumber = 985;
        private float refDelta5_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta5 {
          get { return refDelta5_; }
          set {
            refDelta5_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt5" field.</summary>
        public const int RefEarnCnt5FieldNumber = 988;
        private int refEarnCnt5_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt5 {
          get { return refEarnCnt5_; }
          set {
            refEarnCnt5_ = value;
          }
        }

        /// <summary>Field number for the "sec_key6" field.</summary>
        public const int SecKey6FieldNumber = 991;
        private global::Spiderrock.Protobuf.OptionKey secKey6_;
        /// <summary>
        /// leg #6
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey6 {
          get { return secKey6_; }
          set {
            secKey6_ = value;
          }
        }

        /// <summary>Field number for the "sec_type6" field.</summary>
        public const int SecType6FieldNumber = 994;
        private global::Spiderrock.Protobuf.SpdrKeyType secType6_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType6 {
          get { return secType6_; }
          set {
            secType6_ = value;
          }
        }

        /// <summary>Field number for the "mult6" field.</summary>
        public const int Mult6FieldNumber = 997;
        private uint mult6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Mult6 {
          get { return mult6_; }
          set {
            mult6_ = value;
          }
        }

        /// <summary>Field number for the "side6" field.</summary>
        public const int Side6FieldNumber = 1000;
        private global::Spiderrock.Protobuf.BuySell side6_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side6 {
          get { return side6_; }
          set {
            side6_ = value;
          }
        }

        /// <summary>Field number for the "leg_id6" field.</summary>
        public const int LegId6FieldNumber = 1003;
        private long legId6_;
        /// <summary>
        /// SR leg Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegId6 {
          get { return legId6_; }
          set {
            legId6_ = value;
          }
        }

        /// <summary>Field number for the "alt_leg_id6" field.</summary>
        public const int AltLegId6FieldNumber = 1006;
        private string altLegId6_ = "";
        /// <summary>
        /// client leg Id (usually from a FIX order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AltLegId6 {
          get { return altLegId6_; }
          set {
            altLegId6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pos_type6" field.</summary>
        public const int PosType6FieldNumber = 1009;
        private global::Spiderrock.Protobuf.PositionType posType6_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PositionType PosType6 {
          get { return posType6_; }
          set {
            posType6_ = value;
          }
        }

        /// <summary>Field number for the "ssale_flag6" field.</summary>
        public const int SsaleFlag6FieldNumber = 1015;
        private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag6_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag6 {
          get { return ssaleFlag6_; }
          set {
            ssaleFlag6_ = value;
          }
        }

        /// <summary>Field number for the "vega6" field.</summary>
        public const int Vega6FieldNumber = 1021;
        private float vega6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Vega6 {
          get { return vega6_; }
          set {
            vega6_ = value;
          }
        }

        /// <summary>Field number for the "ref_uPrc6" field.</summary>
        public const int RefUPrc6FieldNumber = 1024;
        private double refUPrc6_;
        /// <summary>
        /// reference underlier price (PrcDe orders)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefUPrc6 {
          get { return refUPrc6_; }
          set {
            refUPrc6_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta6" field.</summary>
        public const int RefDelta6FieldNumber = 1027;
        private float refDelta6_;
        /// <summary>
        /// reference delta (for PrcDe order handling)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta6 {
          get { return refDelta6_; }
          set {
            refDelta6_ = value;
          }
        }

        /// <summary>Field number for the "ref_earn_cnt6" field.</summary>
        public const int RefEarnCnt6FieldNumber = 1030;
        private int refEarnCnt6_;
        /// <summary>
        /// reference # of earnings moves before expiration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RefEarnCnt6 {
          get { return refEarnCnt6_; }
          set {
            refEarnCnt6_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as OrderLegs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(OrderLegs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (StockSide != other.StockSide) return false;
          if (StockShares != other.StockShares) return false;
          if (StockLegId != other.StockLegId) return false;
          if (AltStkLegId != other.AltStkLegId) return false;
          if (SsaleFlag != other.SsaleFlag) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefUPrc, other.RefUPrc)) return false;
          if (NumLegs != other.NumLegs) return false;
          if (!object.Equals(SecKey1, other.SecKey1)) return false;
          if (SecType1 != other.SecType1) return false;
          if (Mult1 != other.Mult1) return false;
          if (Side1 != other.Side1) return false;
          if (LegId1 != other.LegId1) return false;
          if (AltLegId1 != other.AltLegId1) return false;
          if (PosType1 != other.PosType1) return false;
          if (SsaleFlag1 != other.SsaleFlag1) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega1, other.Vega1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc1, other.RefUPrc1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta1, other.RefDelta1)) return false;
          if (RefEarnCnt1 != other.RefEarnCnt1) return false;
          if (!object.Equals(SecKey2, other.SecKey2)) return false;
          if (SecType2 != other.SecType2) return false;
          if (Mult2 != other.Mult2) return false;
          if (Side2 != other.Side2) return false;
          if (LegId2 != other.LegId2) return false;
          if (AltLegId2 != other.AltLegId2) return false;
          if (PosType2 != other.PosType2) return false;
          if (SsaleFlag2 != other.SsaleFlag2) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega2, other.Vega2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc2, other.RefUPrc2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta2, other.RefDelta2)) return false;
          if (RefEarnCnt2 != other.RefEarnCnt2) return false;
          if (!object.Equals(SecKey3, other.SecKey3)) return false;
          if (SecType3 != other.SecType3) return false;
          if (Mult3 != other.Mult3) return false;
          if (Side3 != other.Side3) return false;
          if (LegId3 != other.LegId3) return false;
          if (AltLegId3 != other.AltLegId3) return false;
          if (PosType3 != other.PosType3) return false;
          if (SsaleFlag3 != other.SsaleFlag3) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega3, other.Vega3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc3, other.RefUPrc3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta3, other.RefDelta3)) return false;
          if (RefEarnCnt3 != other.RefEarnCnt3) return false;
          if (!object.Equals(SecKey4, other.SecKey4)) return false;
          if (SecType4 != other.SecType4) return false;
          if (Mult4 != other.Mult4) return false;
          if (Side4 != other.Side4) return false;
          if (LegId4 != other.LegId4) return false;
          if (AltLegId4 != other.AltLegId4) return false;
          if (PosType4 != other.PosType4) return false;
          if (SsaleFlag4 != other.SsaleFlag4) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega4, other.Vega4)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc4, other.RefUPrc4)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta4, other.RefDelta4)) return false;
          if (RefEarnCnt4 != other.RefEarnCnt4) return false;
          if (!object.Equals(SecKey5, other.SecKey5)) return false;
          if (SecType5 != other.SecType5) return false;
          if (Mult5 != other.Mult5) return false;
          if (Side5 != other.Side5) return false;
          if (LegId5 != other.LegId5) return false;
          if (AltLegId5 != other.AltLegId5) return false;
          if (PosType5 != other.PosType5) return false;
          if (SsaleFlag5 != other.SsaleFlag5) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega5, other.Vega5)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc5, other.RefUPrc5)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta5, other.RefDelta5)) return false;
          if (RefEarnCnt5 != other.RefEarnCnt5) return false;
          if (!object.Equals(SecKey6, other.SecKey6)) return false;
          if (SecType6 != other.SecType6) return false;
          if (Mult6 != other.Mult6) return false;
          if (Side6 != other.Side6) return false;
          if (LegId6 != other.LegId6) return false;
          if (AltLegId6 != other.AltLegId6) return false;
          if (PosType6 != other.PosType6) return false;
          if (SsaleFlag6 != other.SsaleFlag6) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega6, other.Vega6)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc6, other.RefUPrc6)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta6, other.RefDelta6)) return false;
          if (RefEarnCnt6 != other.RefEarnCnt6) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= StockSide.GetHashCode();
          if (StockShares != 0) hash ^= StockShares.GetHashCode();
          if (StockLegId != 0L) hash ^= StockLegId.GetHashCode();
          if (AltStkLegId.Length != 0) hash ^= AltStkLegId.GetHashCode();
          if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
          if (RefUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefUPrc);
          if (NumLegs != 0) hash ^= NumLegs.GetHashCode();
          if (secKey1_ != null) hash ^= SecKey1.GetHashCode();
          if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType1.GetHashCode();
          if (Mult1 != 0) hash ^= Mult1.GetHashCode();
          if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side1.GetHashCode();
          if (LegId1 != 0L) hash ^= LegId1.GetHashCode();
          if (AltLegId1.Length != 0) hash ^= AltLegId1.GetHashCode();
          if (PosType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType1.GetHashCode();
          if (SsaleFlag1 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag1.GetHashCode();
          if (Vega1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega1);
          if (RefUPrc1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc1);
          if (RefDelta1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta1);
          if (RefEarnCnt1 != 0) hash ^= RefEarnCnt1.GetHashCode();
          if (secKey2_ != null) hash ^= SecKey2.GetHashCode();
          if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType2.GetHashCode();
          if (Mult2 != 0) hash ^= Mult2.GetHashCode();
          if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side2.GetHashCode();
          if (LegId2 != 0L) hash ^= LegId2.GetHashCode();
          if (AltLegId2.Length != 0) hash ^= AltLegId2.GetHashCode();
          if (PosType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType2.GetHashCode();
          if (SsaleFlag2 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag2.GetHashCode();
          if (Vega2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega2);
          if (RefUPrc2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc2);
          if (RefDelta2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta2);
          if (RefEarnCnt2 != 0) hash ^= RefEarnCnt2.GetHashCode();
          if (secKey3_ != null) hash ^= SecKey3.GetHashCode();
          if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType3.GetHashCode();
          if (Mult3 != 0) hash ^= Mult3.GetHashCode();
          if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side3.GetHashCode();
          if (LegId3 != 0L) hash ^= LegId3.GetHashCode();
          if (AltLegId3.Length != 0) hash ^= AltLegId3.GetHashCode();
          if (PosType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType3.GetHashCode();
          if (SsaleFlag3 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag3.GetHashCode();
          if (Vega3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega3);
          if (RefUPrc3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc3);
          if (RefDelta3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta3);
          if (RefEarnCnt3 != 0) hash ^= RefEarnCnt3.GetHashCode();
          if (secKey4_ != null) hash ^= SecKey4.GetHashCode();
          if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType4.GetHashCode();
          if (Mult4 != 0) hash ^= Mult4.GetHashCode();
          if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side4.GetHashCode();
          if (LegId4 != 0L) hash ^= LegId4.GetHashCode();
          if (AltLegId4.Length != 0) hash ^= AltLegId4.GetHashCode();
          if (PosType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType4.GetHashCode();
          if (SsaleFlag4 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag4.GetHashCode();
          if (Vega4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega4);
          if (RefUPrc4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc4);
          if (RefDelta4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta4);
          if (RefEarnCnt4 != 0) hash ^= RefEarnCnt4.GetHashCode();
          if (secKey5_ != null) hash ^= SecKey5.GetHashCode();
          if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType5.GetHashCode();
          if (Mult5 != 0) hash ^= Mult5.GetHashCode();
          if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side5.GetHashCode();
          if (LegId5 != 0L) hash ^= LegId5.GetHashCode();
          if (AltLegId5.Length != 0) hash ^= AltLegId5.GetHashCode();
          if (PosType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType5.GetHashCode();
          if (SsaleFlag5 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag5.GetHashCode();
          if (Vega5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega5);
          if (RefUPrc5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc5);
          if (RefDelta5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta5);
          if (RefEarnCnt5 != 0) hash ^= RefEarnCnt5.GetHashCode();
          if (secKey6_ != null) hash ^= SecKey6.GetHashCode();
          if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType6.GetHashCode();
          if (Mult6 != 0) hash ^= Mult6.GetHashCode();
          if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side6.GetHashCode();
          if (LegId6 != 0L) hash ^= LegId6.GetHashCode();
          if (AltLegId6.Length != 0) hash ^= AltLegId6.GetHashCode();
          if (PosType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PosType6.GetHashCode();
          if (SsaleFlag6 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag6.GetHashCode();
          if (Vega6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega6);
          if (RefUPrc6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc6);
          if (RefDelta6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta6);
          if (RefEarnCnt6 != 0) hash ^= RefEarnCnt6.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(146, 47);
            output.WriteMessage(Ticker);
          }
          if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(168, 47);
            output.WriteEnum((int) StockSide);
          }
          if (StockShares != 0) {
            output.WriteRawTag(192, 47);
            output.WriteInt32(StockShares);
          }
          if (StockLegId != 0L) {
            output.WriteRawTag(216, 47);
            output.WriteInt64(StockLegId);
          }
          if (AltStkLegId.Length != 0) {
            output.WriteRawTag(242, 47);
            output.WriteString(AltStkLegId);
          }
          if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(136, 48);
            output.WriteEnum((int) SsaleFlag);
          }
          if (RefUPrc != 0F) {
            output.WriteRawTag(189, 48);
            output.WriteFloat(RefUPrc);
          }
          if (NumLegs != 0) {
            output.WriteRawTag(208, 48);
            output.WriteInt32(NumLegs);
          }
          if (secKey1_ != null) {
            output.WriteRawTag(234, 48);
            output.WriteMessage(SecKey1);
          }
          if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(128, 49);
            output.WriteEnum((int) SecType1);
          }
          if (Mult1 != 0) {
            output.WriteRawTag(152, 49);
            output.WriteUInt32(Mult1);
          }
          if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(176, 49);
            output.WriteEnum((int) Side1);
          }
          if (LegId1 != 0L) {
            output.WriteRawTag(200, 49);
            output.WriteInt64(LegId1);
          }
          if (AltLegId1.Length != 0) {
            output.WriteRawTag(226, 49);
            output.WriteString(AltLegId1);
          }
          if (PosType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(248, 49);
            output.WriteEnum((int) PosType1);
          }
          if (SsaleFlag1 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(168, 50);
            output.WriteEnum((int) SsaleFlag1);
          }
          if (Vega1 != 0F) {
            output.WriteRawTag(221, 50);
            output.WriteFloat(Vega1);
          }
          if (RefUPrc1 != 0D) {
            output.WriteRawTag(241, 50);
            output.WriteDouble(RefUPrc1);
          }
          if (RefDelta1 != 0F) {
            output.WriteRawTag(141, 51);
            output.WriteFloat(RefDelta1);
          }
          if (RefEarnCnt1 != 0) {
            output.WriteRawTag(160, 51);
            output.WriteInt32(RefEarnCnt1);
          }
          if (secKey2_ != null) {
            output.WriteRawTag(186, 51);
            output.WriteMessage(SecKey2);
          }
          if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(208, 51);
            output.WriteEnum((int) SecType2);
          }
          if (Mult2 != 0) {
            output.WriteRawTag(232, 51);
            output.WriteUInt32(Mult2);
          }
          if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(128, 52);
            output.WriteEnum((int) Side2);
          }
          if (LegId2 != 0L) {
            output.WriteRawTag(152, 52);
            output.WriteInt64(LegId2);
          }
          if (AltLegId2.Length != 0) {
            output.WriteRawTag(178, 52);
            output.WriteString(AltLegId2);
          }
          if (PosType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(200, 52);
            output.WriteEnum((int) PosType2);
          }
          if (SsaleFlag2 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(248, 52);
            output.WriteEnum((int) SsaleFlag2);
          }
          if (Vega2 != 0F) {
            output.WriteRawTag(173, 53);
            output.WriteFloat(Vega2);
          }
          if (RefUPrc2 != 0D) {
            output.WriteRawTag(193, 53);
            output.WriteDouble(RefUPrc2);
          }
          if (RefDelta2 != 0F) {
            output.WriteRawTag(221, 53);
            output.WriteFloat(RefDelta2);
          }
          if (RefEarnCnt2 != 0) {
            output.WriteRawTag(240, 53);
            output.WriteInt32(RefEarnCnt2);
          }
          if (secKey3_ != null) {
            output.WriteRawTag(138, 54);
            output.WriteMessage(SecKey3);
          }
          if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(160, 54);
            output.WriteEnum((int) SecType3);
          }
          if (Mult3 != 0) {
            output.WriteRawTag(184, 54);
            output.WriteUInt32(Mult3);
          }
          if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(208, 54);
            output.WriteEnum((int) Side3);
          }
          if (LegId3 != 0L) {
            output.WriteRawTag(232, 54);
            output.WriteInt64(LegId3);
          }
          if (AltLegId3.Length != 0) {
            output.WriteRawTag(130, 55);
            output.WriteString(AltLegId3);
          }
          if (PosType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(152, 55);
            output.WriteEnum((int) PosType3);
          }
          if (SsaleFlag3 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(200, 55);
            output.WriteEnum((int) SsaleFlag3);
          }
          if (Vega3 != 0F) {
            output.WriteRawTag(253, 55);
            output.WriteFloat(Vega3);
          }
          if (RefUPrc3 != 0D) {
            output.WriteRawTag(145, 56);
            output.WriteDouble(RefUPrc3);
          }
          if (RefDelta3 != 0F) {
            output.WriteRawTag(173, 56);
            output.WriteFloat(RefDelta3);
          }
          if (RefEarnCnt3 != 0) {
            output.WriteRawTag(192, 56);
            output.WriteInt32(RefEarnCnt3);
          }
          if (secKey4_ != null) {
            output.WriteRawTag(218, 56);
            output.WriteMessage(SecKey4);
          }
          if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(240, 56);
            output.WriteEnum((int) SecType4);
          }
          if (Mult4 != 0) {
            output.WriteRawTag(136, 57);
            output.WriteUInt32(Mult4);
          }
          if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(160, 57);
            output.WriteEnum((int) Side4);
          }
          if (LegId4 != 0L) {
            output.WriteRawTag(184, 57);
            output.WriteInt64(LegId4);
          }
          if (AltLegId4.Length != 0) {
            output.WriteRawTag(210, 57);
            output.WriteString(AltLegId4);
          }
          if (PosType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(232, 57);
            output.WriteEnum((int) PosType4);
          }
          if (SsaleFlag4 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(152, 58);
            output.WriteEnum((int) SsaleFlag4);
          }
          if (Vega4 != 0F) {
            output.WriteRawTag(205, 58);
            output.WriteFloat(Vega4);
          }
          if (RefUPrc4 != 0D) {
            output.WriteRawTag(225, 58);
            output.WriteDouble(RefUPrc4);
          }
          if (RefDelta4 != 0F) {
            output.WriteRawTag(253, 58);
            output.WriteFloat(RefDelta4);
          }
          if (RefEarnCnt4 != 0) {
            output.WriteRawTag(144, 59);
            output.WriteInt32(RefEarnCnt4);
          }
          if (secKey5_ != null) {
            output.WriteRawTag(170, 59);
            output.WriteMessage(SecKey5);
          }
          if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(192, 59);
            output.WriteEnum((int) SecType5);
          }
          if (Mult5 != 0) {
            output.WriteRawTag(216, 59);
            output.WriteUInt32(Mult5);
          }
          if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(240, 59);
            output.WriteEnum((int) Side5);
          }
          if (LegId5 != 0L) {
            output.WriteRawTag(136, 60);
            output.WriteInt64(LegId5);
          }
          if (AltLegId5.Length != 0) {
            output.WriteRawTag(162, 60);
            output.WriteString(AltLegId5);
          }
          if (PosType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(184, 60);
            output.WriteEnum((int) PosType5);
          }
          if (SsaleFlag5 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(232, 60);
            output.WriteEnum((int) SsaleFlag5);
          }
          if (Vega5 != 0F) {
            output.WriteRawTag(157, 61);
            output.WriteFloat(Vega5);
          }
          if (RefUPrc5 != 0D) {
            output.WriteRawTag(177, 61);
            output.WriteDouble(RefUPrc5);
          }
          if (RefDelta5 != 0F) {
            output.WriteRawTag(205, 61);
            output.WriteFloat(RefDelta5);
          }
          if (RefEarnCnt5 != 0) {
            output.WriteRawTag(224, 61);
            output.WriteInt32(RefEarnCnt5);
          }
          if (secKey6_ != null) {
            output.WriteRawTag(250, 61);
            output.WriteMessage(SecKey6);
          }
          if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(144, 62);
            output.WriteEnum((int) SecType6);
          }
          if (Mult6 != 0) {
            output.WriteRawTag(168, 62);
            output.WriteUInt32(Mult6);
          }
          if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(192, 62);
            output.WriteEnum((int) Side6);
          }
          if (LegId6 != 0L) {
            output.WriteRawTag(216, 62);
            output.WriteInt64(LegId6);
          }
          if (AltLegId6.Length != 0) {
            output.WriteRawTag(242, 62);
            output.WriteString(AltLegId6);
          }
          if (PosType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(136, 63);
            output.WriteEnum((int) PosType6);
          }
          if (SsaleFlag6 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(184, 63);
            output.WriteEnum((int) SsaleFlag6);
          }
          if (Vega6 != 0F) {
            output.WriteRawTag(237, 63);
            output.WriteFloat(Vega6);
          }
          if (RefUPrc6 != 0D) {
            output.WriteRawTag(129, 64);
            output.WriteDouble(RefUPrc6);
          }
          if (RefDelta6 != 0F) {
            output.WriteRawTag(157, 64);
            output.WriteFloat(RefDelta6);
          }
          if (RefEarnCnt6 != 0) {
            output.WriteRawTag(176, 64);
            output.WriteInt32(RefEarnCnt6);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(146, 47);
            output.WriteMessage(Ticker);
          }
          if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(168, 47);
            output.WriteEnum((int) StockSide);
          }
          if (StockShares != 0) {
            output.WriteRawTag(192, 47);
            output.WriteInt32(StockShares);
          }
          if (StockLegId != 0L) {
            output.WriteRawTag(216, 47);
            output.WriteInt64(StockLegId);
          }
          if (AltStkLegId.Length != 0) {
            output.WriteRawTag(242, 47);
            output.WriteString(AltStkLegId);
          }
          if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(136, 48);
            output.WriteEnum((int) SsaleFlag);
          }
          if (RefUPrc != 0F) {
            output.WriteRawTag(189, 48);
            output.WriteFloat(RefUPrc);
          }
          if (NumLegs != 0) {
            output.WriteRawTag(208, 48);
            output.WriteInt32(NumLegs);
          }
          if (secKey1_ != null) {
            output.WriteRawTag(234, 48);
            output.WriteMessage(SecKey1);
          }
          if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(128, 49);
            output.WriteEnum((int) SecType1);
          }
          if (Mult1 != 0) {
            output.WriteRawTag(152, 49);
            output.WriteUInt32(Mult1);
          }
          if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(176, 49);
            output.WriteEnum((int) Side1);
          }
          if (LegId1 != 0L) {
            output.WriteRawTag(200, 49);
            output.WriteInt64(LegId1);
          }
          if (AltLegId1.Length != 0) {
            output.WriteRawTag(226, 49);
            output.WriteString(AltLegId1);
          }
          if (PosType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(248, 49);
            output.WriteEnum((int) PosType1);
          }
          if (SsaleFlag1 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(168, 50);
            output.WriteEnum((int) SsaleFlag1);
          }
          if (Vega1 != 0F) {
            output.WriteRawTag(221, 50);
            output.WriteFloat(Vega1);
          }
          if (RefUPrc1 != 0D) {
            output.WriteRawTag(241, 50);
            output.WriteDouble(RefUPrc1);
          }
          if (RefDelta1 != 0F) {
            output.WriteRawTag(141, 51);
            output.WriteFloat(RefDelta1);
          }
          if (RefEarnCnt1 != 0) {
            output.WriteRawTag(160, 51);
            output.WriteInt32(RefEarnCnt1);
          }
          if (secKey2_ != null) {
            output.WriteRawTag(186, 51);
            output.WriteMessage(SecKey2);
          }
          if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(208, 51);
            output.WriteEnum((int) SecType2);
          }
          if (Mult2 != 0) {
            output.WriteRawTag(232, 51);
            output.WriteUInt32(Mult2);
          }
          if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(128, 52);
            output.WriteEnum((int) Side2);
          }
          if (LegId2 != 0L) {
            output.WriteRawTag(152, 52);
            output.WriteInt64(LegId2);
          }
          if (AltLegId2.Length != 0) {
            output.WriteRawTag(178, 52);
            output.WriteString(AltLegId2);
          }
          if (PosType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(200, 52);
            output.WriteEnum((int) PosType2);
          }
          if (SsaleFlag2 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(248, 52);
            output.WriteEnum((int) SsaleFlag2);
          }
          if (Vega2 != 0F) {
            output.WriteRawTag(173, 53);
            output.WriteFloat(Vega2);
          }
          if (RefUPrc2 != 0D) {
            output.WriteRawTag(193, 53);
            output.WriteDouble(RefUPrc2);
          }
          if (RefDelta2 != 0F) {
            output.WriteRawTag(221, 53);
            output.WriteFloat(RefDelta2);
          }
          if (RefEarnCnt2 != 0) {
            output.WriteRawTag(240, 53);
            output.WriteInt32(RefEarnCnt2);
          }
          if (secKey3_ != null) {
            output.WriteRawTag(138, 54);
            output.WriteMessage(SecKey3);
          }
          if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(160, 54);
            output.WriteEnum((int) SecType3);
          }
          if (Mult3 != 0) {
            output.WriteRawTag(184, 54);
            output.WriteUInt32(Mult3);
          }
          if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(208, 54);
            output.WriteEnum((int) Side3);
          }
          if (LegId3 != 0L) {
            output.WriteRawTag(232, 54);
            output.WriteInt64(LegId3);
          }
          if (AltLegId3.Length != 0) {
            output.WriteRawTag(130, 55);
            output.WriteString(AltLegId3);
          }
          if (PosType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(152, 55);
            output.WriteEnum((int) PosType3);
          }
          if (SsaleFlag3 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(200, 55);
            output.WriteEnum((int) SsaleFlag3);
          }
          if (Vega3 != 0F) {
            output.WriteRawTag(253, 55);
            output.WriteFloat(Vega3);
          }
          if (RefUPrc3 != 0D) {
            output.WriteRawTag(145, 56);
            output.WriteDouble(RefUPrc3);
          }
          if (RefDelta3 != 0F) {
            output.WriteRawTag(173, 56);
            output.WriteFloat(RefDelta3);
          }
          if (RefEarnCnt3 != 0) {
            output.WriteRawTag(192, 56);
            output.WriteInt32(RefEarnCnt3);
          }
          if (secKey4_ != null) {
            output.WriteRawTag(218, 56);
            output.WriteMessage(SecKey4);
          }
          if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(240, 56);
            output.WriteEnum((int) SecType4);
          }
          if (Mult4 != 0) {
            output.WriteRawTag(136, 57);
            output.WriteUInt32(Mult4);
          }
          if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(160, 57);
            output.WriteEnum((int) Side4);
          }
          if (LegId4 != 0L) {
            output.WriteRawTag(184, 57);
            output.WriteInt64(LegId4);
          }
          if (AltLegId4.Length != 0) {
            output.WriteRawTag(210, 57);
            output.WriteString(AltLegId4);
          }
          if (PosType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(232, 57);
            output.WriteEnum((int) PosType4);
          }
          if (SsaleFlag4 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(152, 58);
            output.WriteEnum((int) SsaleFlag4);
          }
          if (Vega4 != 0F) {
            output.WriteRawTag(205, 58);
            output.WriteFloat(Vega4);
          }
          if (RefUPrc4 != 0D) {
            output.WriteRawTag(225, 58);
            output.WriteDouble(RefUPrc4);
          }
          if (RefDelta4 != 0F) {
            output.WriteRawTag(253, 58);
            output.WriteFloat(RefDelta4);
          }
          if (RefEarnCnt4 != 0) {
            output.WriteRawTag(144, 59);
            output.WriteInt32(RefEarnCnt4);
          }
          if (secKey5_ != null) {
            output.WriteRawTag(170, 59);
            output.WriteMessage(SecKey5);
          }
          if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(192, 59);
            output.WriteEnum((int) SecType5);
          }
          if (Mult5 != 0) {
            output.WriteRawTag(216, 59);
            output.WriteUInt32(Mult5);
          }
          if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(240, 59);
            output.WriteEnum((int) Side5);
          }
          if (LegId5 != 0L) {
            output.WriteRawTag(136, 60);
            output.WriteInt64(LegId5);
          }
          if (AltLegId5.Length != 0) {
            output.WriteRawTag(162, 60);
            output.WriteString(AltLegId5);
          }
          if (PosType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(184, 60);
            output.WriteEnum((int) PosType5);
          }
          if (SsaleFlag5 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(232, 60);
            output.WriteEnum((int) SsaleFlag5);
          }
          if (Vega5 != 0F) {
            output.WriteRawTag(157, 61);
            output.WriteFloat(Vega5);
          }
          if (RefUPrc5 != 0D) {
            output.WriteRawTag(177, 61);
            output.WriteDouble(RefUPrc5);
          }
          if (RefDelta5 != 0F) {
            output.WriteRawTag(205, 61);
            output.WriteFloat(RefDelta5);
          }
          if (RefEarnCnt5 != 0) {
            output.WriteRawTag(224, 61);
            output.WriteInt32(RefEarnCnt5);
          }
          if (secKey6_ != null) {
            output.WriteRawTag(250, 61);
            output.WriteMessage(SecKey6);
          }
          if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(144, 62);
            output.WriteEnum((int) SecType6);
          }
          if (Mult6 != 0) {
            output.WriteRawTag(168, 62);
            output.WriteUInt32(Mult6);
          }
          if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(192, 62);
            output.WriteEnum((int) Side6);
          }
          if (LegId6 != 0L) {
            output.WriteRawTag(216, 62);
            output.WriteInt64(LegId6);
          }
          if (AltLegId6.Length != 0) {
            output.WriteRawTag(242, 62);
            output.WriteString(AltLegId6);
          }
          if (PosType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            output.WriteRawTag(136, 63);
            output.WriteEnum((int) PosType6);
          }
          if (SsaleFlag6 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            output.WriteRawTag(184, 63);
            output.WriteEnum((int) SsaleFlag6);
          }
          if (Vega6 != 0F) {
            output.WriteRawTag(237, 63);
            output.WriteFloat(Vega6);
          }
          if (RefUPrc6 != 0D) {
            output.WriteRawTag(129, 64);
            output.WriteDouble(RefUPrc6);
          }
          if (RefDelta6 != 0F) {
            output.WriteRawTag(157, 64);
            output.WriteFloat(RefDelta6);
          }
          if (RefEarnCnt6 != 0) {
            output.WriteRawTag(176, 64);
            output.WriteInt32(RefEarnCnt6);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StockSide);
          }
          if (StockShares != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(StockShares);
          }
          if (StockLegId != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(StockLegId);
          }
          if (AltStkLegId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltStkLegId);
          }
          if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
          }
          if (RefUPrc != 0F) {
            size += 2 + 4;
          }
          if (NumLegs != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumLegs);
          }
          if (secKey1_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey1);
          }
          if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType1);
          }
          if (Mult1 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult1);
          }
          if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side1);
          }
          if (LegId1 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId1);
          }
          if (AltLegId1.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId1);
          }
          if (PosType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType1);
          }
          if (SsaleFlag1 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag1);
          }
          if (Vega1 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc1 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta1 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt1 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt1);
          }
          if (secKey2_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey2);
          }
          if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType2);
          }
          if (Mult2 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult2);
          }
          if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side2);
          }
          if (LegId2 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId2);
          }
          if (AltLegId2.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId2);
          }
          if (PosType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType2);
          }
          if (SsaleFlag2 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag2);
          }
          if (Vega2 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc2 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta2 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt2 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt2);
          }
          if (secKey3_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey3);
          }
          if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType3);
          }
          if (Mult3 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult3);
          }
          if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side3);
          }
          if (LegId3 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId3);
          }
          if (AltLegId3.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId3);
          }
          if (PosType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType3);
          }
          if (SsaleFlag3 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag3);
          }
          if (Vega3 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc3 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta3 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt3 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt3);
          }
          if (secKey4_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey4);
          }
          if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType4);
          }
          if (Mult4 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult4);
          }
          if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side4);
          }
          if (LegId4 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId4);
          }
          if (AltLegId4.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId4);
          }
          if (PosType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType4);
          }
          if (SsaleFlag4 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag4);
          }
          if (Vega4 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc4 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta4 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt4 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt4);
          }
          if (secKey5_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey5);
          }
          if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType5);
          }
          if (Mult5 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult5);
          }
          if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side5);
          }
          if (LegId5 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId5);
          }
          if (AltLegId5.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId5);
          }
          if (PosType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType5);
          }
          if (SsaleFlag5 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag5);
          }
          if (Vega5 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc5 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta5 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt5 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt5);
          }
          if (secKey6_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey6);
          }
          if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType6);
          }
          if (Mult6 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mult6);
          }
          if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side6);
          }
          if (LegId6 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId6);
          }
          if (AltLegId6.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegId6);
          }
          if (PosType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PosType6);
          }
          if (SsaleFlag6 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag6);
          }
          if (Vega6 != 0F) {
            size += 2 + 4;
          }
          if (RefUPrc6 != 0D) {
            size += 2 + 8;
          }
          if (RefDelta6 != 0F) {
            size += 2 + 4;
          }
          if (RefEarnCnt6 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt6);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(OrderLegs other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            StockSide = other.StockSide;
          }
          if (other.StockShares != 0) {
            StockShares = other.StockShares;
          }
          if (other.StockLegId != 0L) {
            StockLegId = other.StockLegId;
          }
          if (other.AltStkLegId.Length != 0) {
            AltStkLegId = other.AltStkLegId;
          }
          if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag = other.SsaleFlag;
          }
          if (other.RefUPrc != 0F) {
            RefUPrc = other.RefUPrc;
          }
          if (other.NumLegs != 0) {
            NumLegs = other.NumLegs;
          }
          if (other.secKey1_ != null) {
            if (secKey1_ == null) {
              SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey1.MergeFrom(other.SecKey1);
          }
          if (other.SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType1 = other.SecType1;
          }
          if (other.Mult1 != 0) {
            Mult1 = other.Mult1;
          }
          if (other.Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side1 = other.Side1;
          }
          if (other.LegId1 != 0L) {
            LegId1 = other.LegId1;
          }
          if (other.AltLegId1.Length != 0) {
            AltLegId1 = other.AltLegId1;
          }
          if (other.PosType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType1 = other.PosType1;
          }
          if (other.SsaleFlag1 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag1 = other.SsaleFlag1;
          }
          if (other.Vega1 != 0F) {
            Vega1 = other.Vega1;
          }
          if (other.RefUPrc1 != 0D) {
            RefUPrc1 = other.RefUPrc1;
          }
          if (other.RefDelta1 != 0F) {
            RefDelta1 = other.RefDelta1;
          }
          if (other.RefEarnCnt1 != 0) {
            RefEarnCnt1 = other.RefEarnCnt1;
          }
          if (other.secKey2_ != null) {
            if (secKey2_ == null) {
              SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey2.MergeFrom(other.SecKey2);
          }
          if (other.SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType2 = other.SecType2;
          }
          if (other.Mult2 != 0) {
            Mult2 = other.Mult2;
          }
          if (other.Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side2 = other.Side2;
          }
          if (other.LegId2 != 0L) {
            LegId2 = other.LegId2;
          }
          if (other.AltLegId2.Length != 0) {
            AltLegId2 = other.AltLegId2;
          }
          if (other.PosType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType2 = other.PosType2;
          }
          if (other.SsaleFlag2 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag2 = other.SsaleFlag2;
          }
          if (other.Vega2 != 0F) {
            Vega2 = other.Vega2;
          }
          if (other.RefUPrc2 != 0D) {
            RefUPrc2 = other.RefUPrc2;
          }
          if (other.RefDelta2 != 0F) {
            RefDelta2 = other.RefDelta2;
          }
          if (other.RefEarnCnt2 != 0) {
            RefEarnCnt2 = other.RefEarnCnt2;
          }
          if (other.secKey3_ != null) {
            if (secKey3_ == null) {
              SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey3.MergeFrom(other.SecKey3);
          }
          if (other.SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType3 = other.SecType3;
          }
          if (other.Mult3 != 0) {
            Mult3 = other.Mult3;
          }
          if (other.Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side3 = other.Side3;
          }
          if (other.LegId3 != 0L) {
            LegId3 = other.LegId3;
          }
          if (other.AltLegId3.Length != 0) {
            AltLegId3 = other.AltLegId3;
          }
          if (other.PosType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType3 = other.PosType3;
          }
          if (other.SsaleFlag3 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag3 = other.SsaleFlag3;
          }
          if (other.Vega3 != 0F) {
            Vega3 = other.Vega3;
          }
          if (other.RefUPrc3 != 0D) {
            RefUPrc3 = other.RefUPrc3;
          }
          if (other.RefDelta3 != 0F) {
            RefDelta3 = other.RefDelta3;
          }
          if (other.RefEarnCnt3 != 0) {
            RefEarnCnt3 = other.RefEarnCnt3;
          }
          if (other.secKey4_ != null) {
            if (secKey4_ == null) {
              SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey4.MergeFrom(other.SecKey4);
          }
          if (other.SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType4 = other.SecType4;
          }
          if (other.Mult4 != 0) {
            Mult4 = other.Mult4;
          }
          if (other.Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side4 = other.Side4;
          }
          if (other.LegId4 != 0L) {
            LegId4 = other.LegId4;
          }
          if (other.AltLegId4.Length != 0) {
            AltLegId4 = other.AltLegId4;
          }
          if (other.PosType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType4 = other.PosType4;
          }
          if (other.SsaleFlag4 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag4 = other.SsaleFlag4;
          }
          if (other.Vega4 != 0F) {
            Vega4 = other.Vega4;
          }
          if (other.RefUPrc4 != 0D) {
            RefUPrc4 = other.RefUPrc4;
          }
          if (other.RefDelta4 != 0F) {
            RefDelta4 = other.RefDelta4;
          }
          if (other.RefEarnCnt4 != 0) {
            RefEarnCnt4 = other.RefEarnCnt4;
          }
          if (other.secKey5_ != null) {
            if (secKey5_ == null) {
              SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey5.MergeFrom(other.SecKey5);
          }
          if (other.SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType5 = other.SecType5;
          }
          if (other.Mult5 != 0) {
            Mult5 = other.Mult5;
          }
          if (other.Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side5 = other.Side5;
          }
          if (other.LegId5 != 0L) {
            LegId5 = other.LegId5;
          }
          if (other.AltLegId5.Length != 0) {
            AltLegId5 = other.AltLegId5;
          }
          if (other.PosType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType5 = other.PosType5;
          }
          if (other.SsaleFlag5 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag5 = other.SsaleFlag5;
          }
          if (other.Vega5 != 0F) {
            Vega5 = other.Vega5;
          }
          if (other.RefUPrc5 != 0D) {
            RefUPrc5 = other.RefUPrc5;
          }
          if (other.RefDelta5 != 0F) {
            RefDelta5 = other.RefDelta5;
          }
          if (other.RefEarnCnt5 != 0) {
            RefEarnCnt5 = other.RefEarnCnt5;
          }
          if (other.secKey6_ != null) {
            if (secKey6_ == null) {
              SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey6.MergeFrom(other.SecKey6);
          }
          if (other.SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType6 = other.SecType6;
          }
          if (other.Mult6 != 0) {
            Mult6 = other.Mult6;
          }
          if (other.Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side6 = other.Side6;
          }
          if (other.LegId6 != 0L) {
            LegId6 = other.LegId6;
          }
          if (other.AltLegId6.Length != 0) {
            AltLegId6 = other.AltLegId6;
          }
          if (other.PosType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
            PosType6 = other.PosType6;
          }
          if (other.SsaleFlag6 != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
            SsaleFlag6 = other.SsaleFlag6;
          }
          if (other.Vega6 != 0F) {
            Vega6 = other.Vega6;
          }
          if (other.RefUPrc6 != 0D) {
            RefUPrc6 = other.RefUPrc6;
          }
          if (other.RefDelta6 != 0F) {
            RefDelta6 = other.RefDelta6;
          }
          if (other.RefEarnCnt6 != 0) {
            RefEarnCnt6 = other.RefEarnCnt6;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 6034: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 6056: {
                StockSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6080: {
                StockShares = input.ReadInt32();
                break;
              }
              case 6104: {
                StockLegId = input.ReadInt64();
                break;
              }
              case 6130: {
                AltStkLegId = input.ReadString();
                break;
              }
              case 6152: {
                SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6205: {
                RefUPrc = input.ReadFloat();
                break;
              }
              case 6224: {
                NumLegs = input.ReadInt32();
                break;
              }
              case 6250: {
                if (secKey1_ == null) {
                  SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey1);
                break;
              }
              case 6272: {
                SecType1 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6296: {
                Mult1 = input.ReadUInt32();
                break;
              }
              case 6320: {
                Side1 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6344: {
                LegId1 = input.ReadInt64();
                break;
              }
              case 6370: {
                AltLegId1 = input.ReadString();
                break;
              }
              case 6392: {
                PosType1 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 6440: {
                SsaleFlag1 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6493: {
                Vega1 = input.ReadFloat();
                break;
              }
              case 6513: {
                RefUPrc1 = input.ReadDouble();
                break;
              }
              case 6541: {
                RefDelta1 = input.ReadFloat();
                break;
              }
              case 6560: {
                RefEarnCnt1 = input.ReadInt32();
                break;
              }
              case 6586: {
                if (secKey2_ == null) {
                  SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey2);
                break;
              }
              case 6608: {
                SecType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6632: {
                Mult2 = input.ReadUInt32();
                break;
              }
              case 6656: {
                Side2 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6680: {
                LegId2 = input.ReadInt64();
                break;
              }
              case 6706: {
                AltLegId2 = input.ReadString();
                break;
              }
              case 6728: {
                PosType2 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 6776: {
                SsaleFlag2 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6829: {
                Vega2 = input.ReadFloat();
                break;
              }
              case 6849: {
                RefUPrc2 = input.ReadDouble();
                break;
              }
              case 6877: {
                RefDelta2 = input.ReadFloat();
                break;
              }
              case 6896: {
                RefEarnCnt2 = input.ReadInt32();
                break;
              }
              case 6922: {
                if (secKey3_ == null) {
                  SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey3);
                break;
              }
              case 6944: {
                SecType3 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6968: {
                Mult3 = input.ReadUInt32();
                break;
              }
              case 6992: {
                Side3 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7016: {
                LegId3 = input.ReadInt64();
                break;
              }
              case 7042: {
                AltLegId3 = input.ReadString();
                break;
              }
              case 7064: {
                PosType3 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7112: {
                SsaleFlag3 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7165: {
                Vega3 = input.ReadFloat();
                break;
              }
              case 7185: {
                RefUPrc3 = input.ReadDouble();
                break;
              }
              case 7213: {
                RefDelta3 = input.ReadFloat();
                break;
              }
              case 7232: {
                RefEarnCnt3 = input.ReadInt32();
                break;
              }
              case 7258: {
                if (secKey4_ == null) {
                  SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey4);
                break;
              }
              case 7280: {
                SecType4 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7304: {
                Mult4 = input.ReadUInt32();
                break;
              }
              case 7328: {
                Side4 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7352: {
                LegId4 = input.ReadInt64();
                break;
              }
              case 7378: {
                AltLegId4 = input.ReadString();
                break;
              }
              case 7400: {
                PosType4 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7448: {
                SsaleFlag4 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7501: {
                Vega4 = input.ReadFloat();
                break;
              }
              case 7521: {
                RefUPrc4 = input.ReadDouble();
                break;
              }
              case 7549: {
                RefDelta4 = input.ReadFloat();
                break;
              }
              case 7568: {
                RefEarnCnt4 = input.ReadInt32();
                break;
              }
              case 7594: {
                if (secKey5_ == null) {
                  SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey5);
                break;
              }
              case 7616: {
                SecType5 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7640: {
                Mult5 = input.ReadUInt32();
                break;
              }
              case 7664: {
                Side5 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7688: {
                LegId5 = input.ReadInt64();
                break;
              }
              case 7714: {
                AltLegId5 = input.ReadString();
                break;
              }
              case 7736: {
                PosType5 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7784: {
                SsaleFlag5 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7837: {
                Vega5 = input.ReadFloat();
                break;
              }
              case 7857: {
                RefUPrc5 = input.ReadDouble();
                break;
              }
              case 7885: {
                RefDelta5 = input.ReadFloat();
                break;
              }
              case 7904: {
                RefEarnCnt5 = input.ReadInt32();
                break;
              }
              case 7930: {
                if (secKey6_ == null) {
                  SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey6);
                break;
              }
              case 7952: {
                SecType6 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7976: {
                Mult6 = input.ReadUInt32();
                break;
              }
              case 8000: {
                Side6 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 8024: {
                LegId6 = input.ReadInt64();
                break;
              }
              case 8050: {
                AltLegId6 = input.ReadString();
                break;
              }
              case 8072: {
                PosType6 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 8120: {
                SsaleFlag6 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 8173: {
                Vega6 = input.ReadFloat();
                break;
              }
              case 8193: {
                RefUPrc6 = input.ReadDouble();
                break;
              }
              case 8221: {
                RefDelta6 = input.ReadFloat();
                break;
              }
              case 8240: {
                RefEarnCnt6 = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 6034: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 6056: {
                StockSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6080: {
                StockShares = input.ReadInt32();
                break;
              }
              case 6104: {
                StockLegId = input.ReadInt64();
                break;
              }
              case 6130: {
                AltStkLegId = input.ReadString();
                break;
              }
              case 6152: {
                SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6205: {
                RefUPrc = input.ReadFloat();
                break;
              }
              case 6224: {
                NumLegs = input.ReadInt32();
                break;
              }
              case 6250: {
                if (secKey1_ == null) {
                  SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey1);
                break;
              }
              case 6272: {
                SecType1 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6296: {
                Mult1 = input.ReadUInt32();
                break;
              }
              case 6320: {
                Side1 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6344: {
                LegId1 = input.ReadInt64();
                break;
              }
              case 6370: {
                AltLegId1 = input.ReadString();
                break;
              }
              case 6392: {
                PosType1 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 6440: {
                SsaleFlag1 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6493: {
                Vega1 = input.ReadFloat();
                break;
              }
              case 6513: {
                RefUPrc1 = input.ReadDouble();
                break;
              }
              case 6541: {
                RefDelta1 = input.ReadFloat();
                break;
              }
              case 6560: {
                RefEarnCnt1 = input.ReadInt32();
                break;
              }
              case 6586: {
                if (secKey2_ == null) {
                  SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey2);
                break;
              }
              case 6608: {
                SecType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6632: {
                Mult2 = input.ReadUInt32();
                break;
              }
              case 6656: {
                Side2 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 6680: {
                LegId2 = input.ReadInt64();
                break;
              }
              case 6706: {
                AltLegId2 = input.ReadString();
                break;
              }
              case 6728: {
                PosType2 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 6776: {
                SsaleFlag2 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 6829: {
                Vega2 = input.ReadFloat();
                break;
              }
              case 6849: {
                RefUPrc2 = input.ReadDouble();
                break;
              }
              case 6877: {
                RefDelta2 = input.ReadFloat();
                break;
              }
              case 6896: {
                RefEarnCnt2 = input.ReadInt32();
                break;
              }
              case 6922: {
                if (secKey3_ == null) {
                  SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey3);
                break;
              }
              case 6944: {
                SecType3 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 6968: {
                Mult3 = input.ReadUInt32();
                break;
              }
              case 6992: {
                Side3 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7016: {
                LegId3 = input.ReadInt64();
                break;
              }
              case 7042: {
                AltLegId3 = input.ReadString();
                break;
              }
              case 7064: {
                PosType3 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7112: {
                SsaleFlag3 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7165: {
                Vega3 = input.ReadFloat();
                break;
              }
              case 7185: {
                RefUPrc3 = input.ReadDouble();
                break;
              }
              case 7213: {
                RefDelta3 = input.ReadFloat();
                break;
              }
              case 7232: {
                RefEarnCnt3 = input.ReadInt32();
                break;
              }
              case 7258: {
                if (secKey4_ == null) {
                  SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey4);
                break;
              }
              case 7280: {
                SecType4 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7304: {
                Mult4 = input.ReadUInt32();
                break;
              }
              case 7328: {
                Side4 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7352: {
                LegId4 = input.ReadInt64();
                break;
              }
              case 7378: {
                AltLegId4 = input.ReadString();
                break;
              }
              case 7400: {
                PosType4 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7448: {
                SsaleFlag4 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7501: {
                Vega4 = input.ReadFloat();
                break;
              }
              case 7521: {
                RefUPrc4 = input.ReadDouble();
                break;
              }
              case 7549: {
                RefDelta4 = input.ReadFloat();
                break;
              }
              case 7568: {
                RefEarnCnt4 = input.ReadInt32();
                break;
              }
              case 7594: {
                if (secKey5_ == null) {
                  SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey5);
                break;
              }
              case 7616: {
                SecType5 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7640: {
                Mult5 = input.ReadUInt32();
                break;
              }
              case 7664: {
                Side5 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 7688: {
                LegId5 = input.ReadInt64();
                break;
              }
              case 7714: {
                AltLegId5 = input.ReadString();
                break;
              }
              case 7736: {
                PosType5 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 7784: {
                SsaleFlag5 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 7837: {
                Vega5 = input.ReadFloat();
                break;
              }
              case 7857: {
                RefUPrc5 = input.ReadDouble();
                break;
              }
              case 7885: {
                RefDelta5 = input.ReadFloat();
                break;
              }
              case 7904: {
                RefEarnCnt5 = input.ReadInt32();
                break;
              }
              case 7930: {
                if (secKey6_ == null) {
                  SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey6);
                break;
              }
              case 7952: {
                SecType6 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 7976: {
                Mult6 = input.ReadUInt32();
                break;
              }
              case 8000: {
                Side6 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 8024: {
                LegId6 = input.ReadInt64();
                break;
              }
              case 8050: {
                AltLegId6 = input.ReadString();
                break;
              }
              case 8072: {
                PosType6 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
                break;
              }
              case 8120: {
                SsaleFlag6 = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
                break;
              }
              case 8173: {
                Vega6 = input.ReadFloat();
                break;
              }
              case 8193: {
                RefUPrc6 = input.ReadDouble();
                break;
              }
              case 8221: {
                RefDelta6 = input.ReadFloat();
                break;
              }
              case 8240: {
                RefEarnCnt6 = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
