// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrMLegBrkrEvent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrMLegBrkrEvent.proto</summary>
  public static partial class SpdrMLegBrkrEventReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrMLegBrkrEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrMLegBrkrEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJNTGVnQnJrckV2ZW50LnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKJEAoRU3Bk",
            "ck1MZWdCcmtyRXZlbnQSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgLMisuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyTUxlZ0Jya3JFdmVudC5QS2V5Ei4KBnRpY2tl",
            "chhkIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5Eg0KBWFj",
            "Y250GGcgASgJEjQKC3NwZHJfc291cmNlGGogASgOMh8uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TcGRyU291cmNlEhUKDWdyb3VwaW5nX2NvZGUYbSABKAMSMAoK",
            "b3JkZXJfc2lkZRhwIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2Vs",
            "bBITCgtjbGllbnRfZmlybRhzIAEoCRIRCglhbHRfYWNjbnQYdiABKAkSFQoN",
            "YWx0X3VzZXJfbmFtZRh5IAEoCRIUCgxldmVudF9udW1iZXIYfCABKA0SNgoK",
            "c3RhZ2VfdHlwZRh/IAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkclN0",
            "YWdlVHlwZRI3CgxzdGFnZV9yZXZpZXcYhwIgASgOMiAuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TdGFnZVJldmlldxIbChJiYXNlX3BhcmVudF9udW1iZXIYggEg",
            "ASgDEhsKEnByZXZfcGFyZW50X251bWJlchiFASABKAMSFAoLZW5naW5lX25h",
            "bWUYhQIgASgJEkIKEnNwZHJfYnJva2VyX3N0YXR1cxiLASABKA4yJS5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlNwZHJCcm9rZXJTdGF0dXMSQAoRc3Bkcl9vcmRl",
            "cl9zdGF0dXMYjgEgASgOMiQuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyT3Jk",
            "ZXJTdGF0dXMSQAoRc3Bkcl9jbG9zZV9yZWFzb24YkQEgASgOMiQuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyQ2xvc2VSZWFzb24SQgoSc3Bkcl9yZWplY3Rf",
            "cmVhc29uGJQBIAEoDjIlLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkclJlamVj",
            "dFJlYXNvbhIVCgxzcGRyX2NvbW1lbnQYlwEgASgJEhcKDmN1bV9zcXVhcmVf",
            "cXR5GKwBIAEoBRIXCg5hdmdfc3F1YXJlX3ByYxivASABKAESGAoPY3VtX3Bh",
            "cnRpYWxfcXR5GLIBIAEoBRIOCgV1X2JpZBi1ASABKAESDgoFdV9hc2sYuAEg",
            "ASgBEhAKB2JpZF9wcmMYuwEgASgCEhAKB2Fza19wcmMYvgEgASgCEhEKCGJp",
            "ZF9zaXplGMEBIAEoBRIRCghhc2tfc2l6ZRjEASABKAUSGAoPb3Blbl9vcmRl",
            "cl9zaXplGMcBIAEoBRI2Cg1oZWRnZV9zZWNfa2V5GMoBIAEoCzIeLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5EjkKDmhlZGdlX3NlY190eXBlGM0B",
            "IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5cGUSGAoPcmlz",
            "a19saW1pdF9zaXplGNABIAEoBRI3Cg9yaXNrX2xpbWl0X2Rlc2MY0wEgASgO",
            "Mh0uc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyUmlzaxI9ChByaXNrX2xpbWl0",
            "X2xldmVsGIYCIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkclJpc2tM",
            "ZXZlbBIaChFyaXNrX2xpbWl0X2RldGFpbBjWASABKAkSFAoLbGltaXRfcHJp",
            "Y2UY2QEgASgBEjMKCWxpbWl0X2VychjcASABKA4yHy5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkxpbWl0RXJyb3ISFwoObGltaXRfZXJyX2Rlc2MY3wEgASgJEjMK",
            "CmFsZ29fc3RhdGUY4gEgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BbGdv",
            "U3RhdGUSFQoMYWxnb19jb3VudGVyGOUBIAEoBRIzCgptYWtlX3N0YXRlGOgB",
            "IAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYuQWxnb1N0YXRlEhUKDG1ha2Vf",
            "Y291bnRlchjrASABKAUSNwoMYnJva2VyX3N0YXRlGO4BIAEoDjIgLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuQnJva2VyU3RhdGUSPQoOc3Bkcl9ta3Rfc3RhdGUY",
            "8QEgASgOMiQuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyTWFya2V0U3RhdGUS",
            "GQoQY2hpbGRfb3JkZXJfbWFzaxj0ASABKA0SGQoQbnVtX2NoaWxkX29yZGVy",
            "cxj3ASABKA0SHQoUbnVtX2RheV9jaGlsZF9vcmRlcnMY+gEgASgNEhQKC21v",
            "ZGlmaWVkX2J5GP0BIAEoCRI5Cgttb2RpZmllZF9pbhiAAiABKA4yIy5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlN5c0Vudmlyb25tZW50Ei4KCXRpbWVzdGFtcBiD",
            "AiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGlIKBFBLZXkSFQoN",
            "cGFyZW50X251bWJlchgKIAEoAxIzCghyZWNfdHlwZRgLIAEoDjIhLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuRXZlbnRSZWNUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrMLegBrkrEvent), global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Parser, new[]{ "Meta", "Pkey", "Ticker", "Accnt", "SpdrSource", "GroupingCode", "OrderSide", "ClientFirm", "AltAccnt", "AltUserName", "EventNumber", "StageType", "StageReview", "BaseParentNumber", "PrevParentNumber", "EngineName", "SpdrBrokerStatus", "SpdrOrderStatus", "SpdrCloseReason", "SpdrRejectReason", "SpdrComment", "CumSquareQty", "AvgSquarePrc", "CumPartialQty", "UBid", "UAsk", "BidPrc", "AskPrc", "BidSize", "AskSize", "OpenOrderSize", "HedgeSecKey", "HedgeSecType", "RiskLimitSize", "RiskLimitDesc", "RiskLimitLevel", "RiskLimitDetail", "LimitPrice", "LimitErr", "LimitErrDesc", "AlgoState", "AlgoCounter", "MakeState", "MakeCounter", "BrokerState", "SpdrMktState", "ChildOrderMask", "NumChildOrders", "NumDayChildOrders", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey), global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey.Parser, new[]{ "ParentNumber", "RecType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrMLegBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
  /// </summary>
  public sealed partial class SpdrMLegBrkrEvent : pb::IMessage<SpdrMLegBrkrEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrMLegBrkrEvent> _parser = new pb::MessageParser<SpdrMLegBrkrEvent>(() => new SpdrMLegBrkrEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrMLegBrkrEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrMLegBrkrEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrEvent(SpdrMLegBrkrEvent other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      accnt_ = other.accnt_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      orderSide_ = other.orderSide_;
      clientFirm_ = other.clientFirm_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      eventNumber_ = other.eventNumber_;
      stageType_ = other.stageType_;
      stageReview_ = other.stageReview_;
      baseParentNumber_ = other.baseParentNumber_;
      prevParentNumber_ = other.prevParentNumber_;
      engineName_ = other.engineName_;
      spdrBrokerStatus_ = other.spdrBrokerStatus_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      spdrRejectReason_ = other.spdrRejectReason_;
      spdrComment_ = other.spdrComment_;
      cumSquareQty_ = other.cumSquareQty_;
      avgSquarePrc_ = other.avgSquarePrc_;
      cumPartialQty_ = other.cumPartialQty_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      bidPrc_ = other.bidPrc_;
      askPrc_ = other.askPrc_;
      bidSize_ = other.bidSize_;
      askSize_ = other.askSize_;
      openOrderSize_ = other.openOrderSize_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeSecType_ = other.hedgeSecType_;
      riskLimitSize_ = other.riskLimitSize_;
      riskLimitDesc_ = other.riskLimitDesc_;
      riskLimitLevel_ = other.riskLimitLevel_;
      riskLimitDetail_ = other.riskLimitDetail_;
      limitPrice_ = other.limitPrice_;
      limitErr_ = other.limitErr_;
      limitErrDesc_ = other.limitErrDesc_;
      algoState_ = other.algoState_;
      algoCounter_ = other.algoCounter_;
      makeState_ = other.makeState_;
      makeCounter_ = other.makeCounter_;
      brokerState_ = other.brokerState_;
      spdrMktState_ = other.spdrMktState_;
      childOrderMask_ = other.childOrderMask_;
      numChildOrders_ = other.numChildOrders_;
      numDayChildOrders_ = other.numDayChildOrders_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrEvent Clone() {
      return new SpdrMLegBrkrEvent(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 103;
    private string accnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 106;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 109;
    private long groupingCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "order_side" field.</summary>
    public const int OrderSideFieldNumber = 112;
    private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell OrderSide {
      get { return orderSide_; }
      set {
        orderSide_ = value;
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 115;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 118;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 121;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 124;
    private uint eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 127;
    private global::Spiderrock.Protobuf.SpdrStageType stageType_ = global::Spiderrock.Protobuf.SpdrStageType.Unspecified;
    /// <summary>
    /// parent is a staged order [ToolVisible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrStageType StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "stage_review" field.</summary>
    public const int StageReviewFieldNumber = 263;
    private global::Spiderrock.Protobuf.StageReview stageReview_ = global::Spiderrock.Protobuf.StageReview.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StageReview StageReview {
      get { return stageReview_; }
      set {
        stageReview_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 130;
    private long baseParentNumber_;
    /// <summary>
    /// SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "prev_parent_number" field.</summary>
    public const int PrevParentNumberFieldNumber = 133;
    private long prevParentNumber_;
    /// <summary>
    /// SPDR order number (order being cancelled/replaced) (zero if none)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PrevParentNumber {
      get { return prevParentNumber_; }
      set {
        prevParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 261;
    private string engineName_ = "";
    /// <summary>
    /// server stripe
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_broker_status" field.</summary>
    public const int SpdrBrokerStatusFieldNumber = 139;
    private global::Spiderrock.Protobuf.SpdrBrokerStatus spdrBrokerStatus_ = global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrBrokerStatus SpdrBrokerStatus {
      get { return spdrBrokerStatus_; }
      set {
        spdrBrokerStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 142;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 145;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_reject_reason" field.</summary>
    public const int SpdrRejectReasonFieldNumber = 148;
    private global::Spiderrock.Protobuf.SpdrRejectReason spdrRejectReason_ = global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRejectReason SpdrRejectReason {
      get { return spdrRejectReason_; }
      set {
        spdrRejectReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_comment" field.</summary>
    public const int SpdrCommentFieldNumber = 151;
    private string spdrComment_ = "";
    /// <summary>
    /// additional detail if parent closed or rejected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrComment {
      get { return spdrComment_; }
      set {
        spdrComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cum_square_qty" field.</summary>
    public const int CumSquareQtyFieldNumber = 172;
    private int cumSquareQty_;
    /// <summary>
    /// cum spread quantity filled (all legs received)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumSquareQty {
      get { return cumSquareQty_; }
      set {
        cumSquareQty_ = value;
      }
    }

    /// <summary>Field number for the "avg_square_prc" field.</summary>
    public const int AvgSquarePrcFieldNumber = 175;
    private double avgSquarePrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgSquarePrc {
      get { return avgSquarePrc_; }
      set {
        avgSquarePrc_ = value;
      }
    }

    /// <summary>Field number for the "cum_partial_qty" field.</summary>
    public const int CumPartialQtyFieldNumber = 178;
    private int cumPartialQty_;
    /// <summary>
    /// cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumPartialQty {
      get { return cumPartialQty_; }
      set {
        cumPartialQty_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 181;
    private double uBid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 184;
    private double uAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc" field.</summary>
    public const int BidPrcFieldNumber = 187;
    private float bidPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc {
      get { return bidPrc_; }
      set {
        bidPrc_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc" field.</summary>
    public const int AskPrcFieldNumber = 190;
    private float askPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc {
      get { return askPrc_; }
      set {
        askPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_size" field.</summary>
    public const int BidSizeFieldNumber = 193;
    private int bidSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSize {
      get { return bidSize_; }
      set {
        bidSize_ = value;
      }
    }

    /// <summary>Field number for the "ask_size" field.</summary>
    public const int AskSizeFieldNumber = 196;
    private int askSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSize {
      get { return askSize_; }
      set {
        askSize_ = value;
      }
    }

    /// <summary>Field number for the "open_order_size" field.</summary>
    public const int OpenOrderSizeFieldNumber = 199;
    private int openOrderSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenOrderSize {
      get { return openOrderSize_; }
      set {
        openOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 202;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// auto-hedge sec key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_type" field.</summary>
    public const int HedgeSecTypeFieldNumber = 205;
    private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// auto-hedge sec type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
      get { return hedgeSecType_; }
      set {
        hedgeSecType_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_size" field.</summary>
    public const int RiskLimitSizeFieldNumber = 208;
    private int riskLimitSize_;
    /// <summary>
    /// risk limit size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RiskLimitSize {
      get { return riskLimitSize_; }
      set {
        riskLimitSize_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_desc" field.</summary>
    public const int RiskLimitDescFieldNumber = 211;
    private global::Spiderrock.Protobuf.SpdrRisk riskLimitDesc_ = global::Spiderrock.Protobuf.SpdrRisk.Unspecified;
    /// <summary>
    /// reason for size reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRisk RiskLimitDesc {
      get { return riskLimitDesc_; }
      set {
        riskLimitDesc_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_level" field.</summary>
    public const int RiskLimitLevelFieldNumber = 262;
    private global::Spiderrock.Protobuf.SpdrRiskLevel riskLimitLevel_ = global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified;
    /// <summary>
    /// risk limit level responsible for reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskLevel RiskLimitLevel {
      get { return riskLimitLevel_; }
      set {
        riskLimitLevel_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_detail" field.</summary>
    public const int RiskLimitDetailFieldNumber = 214;
    private string riskLimitDetail_ = "";
    /// <summary>
    /// risk limit detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskLimitDetail {
      get { return riskLimitDetail_; }
      set {
        riskLimitDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 217;
    private double limitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_err" field.</summary>
    public const int LimitErrFieldNumber = 220;
    private global::Spiderrock.Protobuf.LimitError limitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError LimitErr {
      get { return limitErr_; }
      set {
        limitErr_ = value;
      }
    }

    /// <summary>Field number for the "limit_err_desc" field.</summary>
    public const int LimitErrDescFieldNumber = 223;
    private string limitErrDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LimitErrDesc {
      get { return limitErrDesc_; }
      set {
        limitErrDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algo_state" field.</summary>
    public const int AlgoStateFieldNumber = 226;
    private global::Spiderrock.Protobuf.AlgoState algoState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState AlgoState {
      get { return algoState_; }
      set {
        algoState_ = value;
      }
    }

    /// <summary>Field number for the "algo_counter" field.</summary>
    public const int AlgoCounterFieldNumber = 229;
    private int algoCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AlgoCounter {
      get { return algoCounter_; }
      set {
        algoCounter_ = value;
      }
    }

    /// <summary>Field number for the "make_state" field.</summary>
    public const int MakeStateFieldNumber = 232;
    private global::Spiderrock.Protobuf.AlgoState makeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState MakeState {
      get { return makeState_; }
      set {
        makeState_ = value;
      }
    }

    /// <summary>Field number for the "make_counter" field.</summary>
    public const int MakeCounterFieldNumber = 235;
    private int makeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MakeCounter {
      get { return makeCounter_; }
      set {
        makeCounter_ = value;
      }
    }

    /// <summary>Field number for the "broker_state" field.</summary>
    public const int BrokerStateFieldNumber = 238;
    private global::Spiderrock.Protobuf.BrokerState brokerState_ = global::Spiderrock.Protobuf.BrokerState.Unspecified;
    /// <summary>
    /// broker monitor state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BrokerState BrokerState {
      get { return brokerState_; }
      set {
        brokerState_ = value;
      }
    }

    /// <summary>Field number for the "spdr_mkt_state" field.</summary>
    public const int SpdrMktStateFieldNumber = 241;
    private global::Spiderrock.Protobuf.SpdrMarketState spdrMktState_ = global::Spiderrock.Protobuf.SpdrMarketState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMarketState SpdrMktState {
      get { return spdrMktState_; }
      set {
        spdrMktState_ = value;
      }
    }

    /// <summary>Field number for the "child_order_mask" field.</summary>
    public const int ChildOrderMaskFieldNumber = 244;
    private uint childOrderMask_;
    /// <summary>
    /// bit-mask of all exchange for which a child order was generated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChildOrderMask {
      get { return childOrderMask_; }
      set {
        childOrderMask_ = value;
      }
    }

    /// <summary>Field number for the "num_child_orders" field.</summary>
    public const int NumChildOrdersFieldNumber = 247;
    private uint numChildOrders_;
    /// <summary>
    /// total number of child orders generated by this parent broker (parent number)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumChildOrders {
      get { return numChildOrders_; }
      set {
        numChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "num_day_child_orders" field.</summary>
    public const int NumDayChildOrdersFieldNumber = 250;
    private uint numDayChildOrders_;
    /// <summary>
    /// total number of child orders generated by this parent broker (all day; base parent number)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumDayChildOrders {
      get { return numDayChildOrders_; }
      set {
        numDayChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 253;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 256;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 259;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrMLegBrkrEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrMLegBrkrEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (Accnt != other.Accnt) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (OrderSide != other.OrderSide) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (EventNumber != other.EventNumber) return false;
      if (StageType != other.StageType) return false;
      if (StageReview != other.StageReview) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (PrevParentNumber != other.PrevParentNumber) return false;
      if (EngineName != other.EngineName) return false;
      if (SpdrBrokerStatus != other.SpdrBrokerStatus) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (SpdrRejectReason != other.SpdrRejectReason) return false;
      if (SpdrComment != other.SpdrComment) return false;
      if (CumSquareQty != other.CumSquareQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgSquarePrc, other.AvgSquarePrc)) return false;
      if (CumPartialQty != other.CumPartialQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc, other.BidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc, other.AskPrc)) return false;
      if (BidSize != other.BidSize) return false;
      if (AskSize != other.AskSize) return false;
      if (OpenOrderSize != other.OpenOrderSize) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (HedgeSecType != other.HedgeSecType) return false;
      if (RiskLimitSize != other.RiskLimitSize) return false;
      if (RiskLimitDesc != other.RiskLimitDesc) return false;
      if (RiskLimitLevel != other.RiskLimitLevel) return false;
      if (RiskLimitDetail != other.RiskLimitDetail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (LimitErr != other.LimitErr) return false;
      if (LimitErrDesc != other.LimitErrDesc) return false;
      if (AlgoState != other.AlgoState) return false;
      if (AlgoCounter != other.AlgoCounter) return false;
      if (MakeState != other.MakeState) return false;
      if (MakeCounter != other.MakeCounter) return false;
      if (BrokerState != other.BrokerState) return false;
      if (SpdrMktState != other.SpdrMktState) return false;
      if (ChildOrderMask != other.ChildOrderMask) return false;
      if (NumChildOrders != other.NumChildOrders) return false;
      if (NumDayChildOrders != other.NumDayChildOrders) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (EventNumber != 0) hash ^= EventNumber.GetHashCode();
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) hash ^= StageType.GetHashCode();
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) hash ^= StageReview.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (PrevParentNumber != 0L) hash ^= PrevParentNumber.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) hash ^= SpdrBrokerStatus.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) hash ^= SpdrRejectReason.GetHashCode();
      if (SpdrComment.Length != 0) hash ^= SpdrComment.GetHashCode();
      if (CumSquareQty != 0) hash ^= CumSquareQty.GetHashCode();
      if (AvgSquarePrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgSquarePrc);
      if (CumPartialQty != 0) hash ^= CumPartialQty.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (BidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc);
      if (AskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc);
      if (BidSize != 0) hash ^= BidSize.GetHashCode();
      if (AskSize != 0) hash ^= AskSize.GetHashCode();
      if (OpenOrderSize != 0) hash ^= OpenOrderSize.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
      if (RiskLimitSize != 0) hash ^= RiskLimitSize.GetHashCode();
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) hash ^= RiskLimitDesc.GetHashCode();
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) hash ^= RiskLimitLevel.GetHashCode();
      if (RiskLimitDetail.Length != 0) hash ^= RiskLimitDetail.GetHashCode();
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= LimitErr.GetHashCode();
      if (LimitErrDesc.Length != 0) hash ^= LimitErrDesc.GetHashCode();
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= AlgoState.GetHashCode();
      if (AlgoCounter != 0) hash ^= AlgoCounter.GetHashCode();
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= MakeState.GetHashCode();
      if (MakeCounter != 0) hash ^= MakeCounter.GetHashCode();
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) hash ^= BrokerState.GetHashCode();
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) hash ^= SpdrMktState.GetHashCode();
      if (ChildOrderMask != 0) hash ^= ChildOrderMask.GetHashCode();
      if (NumChildOrders != 0) hash ^= NumChildOrders.GetHashCode();
      if (NumDayChildOrders != 0) hash ^= NumDayChildOrders.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltUserName);
      }
      if (EventNumber != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) StageType);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(PrevParentNumber);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(SpdrComment);
      }
      if (CumSquareQty != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(AvgSquarePrc);
      }
      if (CumPartialQty != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CumPartialQty);
      }
      if (UBid != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(UAsk);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(BidPrc);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(AskPrc);
      }
      if (BidSize != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(BidSize);
      }
      if (AskSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(AskSize);
      }
      if (OpenOrderSize != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OpenOrderSize);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) HedgeSecType);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(LimitPrice);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(LimitErrDesc);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        output.WriteRawTag(168, 14);
        output.WriteInt32(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(MakeCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(240, 14);
        output.WriteEnum((int) BrokerState);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) SpdrMktState);
      }
      if (ChildOrderMask != 0) {
        output.WriteRawTag(160, 15);
        output.WriteUInt32(ChildOrderMask);
      }
      if (NumChildOrders != 0) {
        output.WriteRawTag(184, 15);
        output.WriteUInt32(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        output.WriteRawTag(208, 15);
        output.WriteUInt32(NumDayChildOrders);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(234, 15);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(154, 16);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(170, 16);
        output.WriteString(EngineName);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(176, 16);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        output.WriteRawTag(184, 16);
        output.WriteEnum((int) StageReview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltUserName);
      }
      if (EventNumber != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) StageType);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(PrevParentNumber);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(SpdrComment);
      }
      if (CumSquareQty != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(AvgSquarePrc);
      }
      if (CumPartialQty != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CumPartialQty);
      }
      if (UBid != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(UAsk);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(BidPrc);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(AskPrc);
      }
      if (BidSize != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(BidSize);
      }
      if (AskSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(AskSize);
      }
      if (OpenOrderSize != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OpenOrderSize);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) HedgeSecType);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(LimitPrice);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(LimitErrDesc);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        output.WriteRawTag(168, 14);
        output.WriteInt32(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(MakeCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(240, 14);
        output.WriteEnum((int) BrokerState);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) SpdrMktState);
      }
      if (ChildOrderMask != 0) {
        output.WriteRawTag(160, 15);
        output.WriteUInt32(ChildOrderMask);
      }
      if (NumChildOrders != 0) {
        output.WriteRawTag(184, 15);
        output.WriteUInt32(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        output.WriteRawTag(208, 15);
        output.WriteUInt32(NumDayChildOrders);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(234, 15);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(154, 16);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(170, 16);
        output.WriteString(EngineName);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(176, 16);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        output.WriteRawTag(184, 16);
        output.WriteEnum((int) StageReview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (EventNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageReview);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PrevParentNumber);
      }
      if (EngineName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrComment);
      }
      if (CumSquareQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        size += 2 + 8;
      }
      if (CumPartialQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumPartialQty);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (BidPrc != 0F) {
        size += 2 + 4;
      }
      if (AskPrc != 0F) {
        size += 2 + 4;
      }
      if (BidSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSize);
      }
      if (AskSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSize);
      }
      if (OpenOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenOrderSize);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
      }
      if (RiskLimitSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitLevel);
      }
      if (RiskLimitDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LimitErrDesc);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeState);
      }
      if (MakeCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MakeCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BrokerState);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrMktState);
      }
      if (ChildOrderMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ChildOrderMask);
      }
      if (NumChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumDayChildOrders);
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrMLegBrkrEvent other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        OrderSide = other.OrderSide;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.EventNumber != 0) {
        EventNumber = other.EventNumber;
      }
      if (other.StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        StageType = other.StageType;
      }
      if (other.StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        StageReview = other.StageReview;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.PrevParentNumber != 0L) {
        PrevParentNumber = other.PrevParentNumber;
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        SpdrBrokerStatus = other.SpdrBrokerStatus;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        SpdrRejectReason = other.SpdrRejectReason;
      }
      if (other.SpdrComment.Length != 0) {
        SpdrComment = other.SpdrComment;
      }
      if (other.CumSquareQty != 0) {
        CumSquareQty = other.CumSquareQty;
      }
      if (other.AvgSquarePrc != 0D) {
        AvgSquarePrc = other.AvgSquarePrc;
      }
      if (other.CumPartialQty != 0) {
        CumPartialQty = other.CumPartialQty;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.BidPrc != 0F) {
        BidPrc = other.BidPrc;
      }
      if (other.AskPrc != 0F) {
        AskPrc = other.AskPrc;
      }
      if (other.BidSize != 0) {
        BidSize = other.BidSize;
      }
      if (other.AskSize != 0) {
        AskSize = other.AskSize;
      }
      if (other.OpenOrderSize != 0) {
        OpenOrderSize = other.OpenOrderSize;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        HedgeSecType = other.HedgeSecType;
      }
      if (other.RiskLimitSize != 0) {
        RiskLimitSize = other.RiskLimitSize;
      }
      if (other.RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        RiskLimitDesc = other.RiskLimitDesc;
      }
      if (other.RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        RiskLimitLevel = other.RiskLimitLevel;
      }
      if (other.RiskLimitDetail.Length != 0) {
        RiskLimitDetail = other.RiskLimitDetail;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        LimitErr = other.LimitErr;
      }
      if (other.LimitErrDesc.Length != 0) {
        LimitErrDesc = other.LimitErrDesc;
      }
      if (other.AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        AlgoState = other.AlgoState;
      }
      if (other.AlgoCounter != 0) {
        AlgoCounter = other.AlgoCounter;
      }
      if (other.MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        MakeState = other.MakeState;
      }
      if (other.MakeCounter != 0) {
        MakeCounter = other.MakeCounter;
      }
      if (other.BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        BrokerState = other.BrokerState;
      }
      if (other.SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        SpdrMktState = other.SpdrMktState;
      }
      if (other.ChildOrderMask != 0) {
        ChildOrderMask = other.ChildOrderMask;
      }
      if (other.NumChildOrders != 0) {
        NumChildOrders = other.NumChildOrders;
      }
      if (other.NumDayChildOrders != 0) {
        NumDayChildOrders = other.NumDayChildOrders;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            Accnt = input.ReadString();
            break;
          }
          case 848: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 872: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 896: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 922: {
            ClientFirm = input.ReadString();
            break;
          }
          case 946: {
            AltAccnt = input.ReadString();
            break;
          }
          case 970: {
            AltUserName = input.ReadString();
            break;
          }
          case 992: {
            EventNumber = input.ReadUInt32();
            break;
          }
          case 1016: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1040: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1064: {
            PrevParentNumber = input.ReadInt64();
            break;
          }
          case 1112: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1136: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1160: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1184: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1210: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1376: {
            CumSquareQty = input.ReadInt32();
            break;
          }
          case 1401: {
            AvgSquarePrc = input.ReadDouble();
            break;
          }
          case 1424: {
            CumPartialQty = input.ReadInt32();
            break;
          }
          case 1449: {
            UBid = input.ReadDouble();
            break;
          }
          case 1473: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1501: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1525: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1544: {
            BidSize = input.ReadInt32();
            break;
          }
          case 1568: {
            AskSize = input.ReadInt32();
            break;
          }
          case 1592: {
            OpenOrderSize = input.ReadInt32();
            break;
          }
          case 1618: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 1640: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1664: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 1688: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 1714: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 1737: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 1760: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 1786: {
            LimitErrDesc = input.ReadString();
            break;
          }
          case 1808: {
            AlgoState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 1832: {
            AlgoCounter = input.ReadInt32();
            break;
          }
          case 1856: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 1880: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 1904: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 1928: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 1952: {
            ChildOrderMask = input.ReadUInt32();
            break;
          }
          case 1976: {
            NumChildOrders = input.ReadUInt32();
            break;
          }
          case 2000: {
            NumDayChildOrders = input.ReadUInt32();
            break;
          }
          case 2026: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 2048: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 2074: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2090: {
            EngineName = input.ReadString();
            break;
          }
          case 2096: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2104: {
            StageReview = (global::Spiderrock.Protobuf.StageReview) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            Accnt = input.ReadString();
            break;
          }
          case 848: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 872: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 896: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 922: {
            ClientFirm = input.ReadString();
            break;
          }
          case 946: {
            AltAccnt = input.ReadString();
            break;
          }
          case 970: {
            AltUserName = input.ReadString();
            break;
          }
          case 992: {
            EventNumber = input.ReadUInt32();
            break;
          }
          case 1016: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1040: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1064: {
            PrevParentNumber = input.ReadInt64();
            break;
          }
          case 1112: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1136: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1160: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1184: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1210: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1376: {
            CumSquareQty = input.ReadInt32();
            break;
          }
          case 1401: {
            AvgSquarePrc = input.ReadDouble();
            break;
          }
          case 1424: {
            CumPartialQty = input.ReadInt32();
            break;
          }
          case 1449: {
            UBid = input.ReadDouble();
            break;
          }
          case 1473: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1501: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1525: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1544: {
            BidSize = input.ReadInt32();
            break;
          }
          case 1568: {
            AskSize = input.ReadInt32();
            break;
          }
          case 1592: {
            OpenOrderSize = input.ReadInt32();
            break;
          }
          case 1618: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 1640: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1664: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 1688: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 1714: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 1737: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 1760: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 1786: {
            LimitErrDesc = input.ReadString();
            break;
          }
          case 1808: {
            AlgoState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 1832: {
            AlgoCounter = input.ReadInt32();
            break;
          }
          case 1856: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 1880: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 1904: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 1928: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 1952: {
            ChildOrderMask = input.ReadUInt32();
            break;
          }
          case 1976: {
            NumChildOrders = input.ReadUInt32();
            break;
          }
          case 2000: {
            NumDayChildOrders = input.ReadUInt32();
            break;
          }
          case 2026: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 2048: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 2074: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2090: {
            EngineName = input.ReadString();
            break;
          }
          case 2096: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2104: {
            StageReview = (global::Spiderrock.Protobuf.StageReview) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrMLegBrkrEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrMLegBrkrEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          parentNumber_ = other.parentNumber_;
          recType_ = other.recType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "parent_number" field.</summary>
        public const int ParentNumberFieldNumber = 10;
        private long parentNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ParentNumber {
          get { return parentNumber_; }
          set {
            parentNumber_ = value;
          }
        }

        /// <summary>Field number for the "rec_type" field.</summary>
        public const int RecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.EventRecType recType_ = global::Spiderrock.Protobuf.EventRecType.Unspecified;
        /// <summary>
        /// type of record [New,Repl,Close]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.EventRecType RecType {
          get { return recType_; }
          set {
            recType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParentNumber != other.ParentNumber) return false;
          if (RecType != other.RecType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) hash ^= RecType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) RecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) RecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ParentNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ParentNumber != 0L) {
            ParentNumber = other.ParentNumber;
          }
          if (other.RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            RecType = other.RecType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
              case 88: {
                RecType = (global::Spiderrock.Protobuf.EventRecType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
              case 88: {
                RecType = (global::Spiderrock.Protobuf.EventRecType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
