// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrAutoHedgeState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrAutoHedgeState.proto</summary>
  public static partial class SpdrAutoHedgeStateReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrAutoHedgeState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrAutoHedgeStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9Qcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJBdXRvSGVkZ2VTdGF0ZS5w",
            "cm90bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iqA8KElNw",
            "ZHJBdXRvSGVkZ2VTdGF0ZRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlNwZHJBdXRvSGVkZ2VTdGF0ZS5QS2V5EhUKDWdy",
            "b3VwaW5nX2NvZGUYZCABKAMSLgoGdGlja2VyGGogASgLMh4uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5UaWNrZXJLZXkSFQoNc2VjdXJpdHlfZGVzYxhtIAEoCRI2",
            "Cgpzc2FsZV9mbGFnGHAgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5TaG9y",
            "dFNhbGVGbGFnEjkKDXBvc2l0aW9uX3R5cGUYhwIgASgOMiEuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5Qb3NpdGlvblR5cGUSOQoLaGVkZ2Vfc3RhdGUYcyABKA4y",
            "JC5zcGlkZXJyb2NrLnByb3RvYnVmLkhlZGdlR3JvdXBTdGF0ZRISCgpoZWRn",
            "ZV90ZXh0GHYgASgJEg0KBXVfcHJjGHkgASgBEjIKDmlzX2RlbHRhX21peGVk",
            "GHwgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxIZChFhY2N1bXVs",
            "YXRvcl9lcnJvchh/IAEoCRIWCg1ncnBfZGVsdGFfYm90GIIBIAEoARIWCg1n",
            "cnBfZGVsdGFfc2xkGIUBIAEoARIXCg5ncnBfZERlbHRhX2JvdBiIASABKAES",
            "FwoOZ3JwX2REZWx0YV9zbGQYiwEgASgBEjcKEmxhc3RfZ3JwX2ZpbGxfZHR0",
            "bRiOASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhcKDmN0cmxf",
            "ZGVsdGFfYm90GJEBIAEoARIXCg5jdHJsX2RlbHRhX3NsZBiUASABKAESGAoP",
            "Y3RybF9kRGVsdGFfYm90GJcBIAEoARIYCg9jdHJsX2REZWx0YV9zbGQYmgEg",
            "ASgBEjgKE2xhc3RfY3RybF9maWxsX2R0dG0YnQEgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBITCgphYnNfb3B0X2NuGKABIAEoBRISCgluZXRf",
            "ZGVsdGEYowEgASgBEhMKCm5ldF9kRGVsdGEYpgEgASgBEhgKD29wZW5faGVk",
            "Z2VfdGltZRipASABKAISGQoQaGVkZ2VfdGFyZ2V0X3ZvbBisASABKAISGwoS",
            "ZXhwZWN0ZWRfcHJjX3JhbmdlGK8BIAEoAhIWCg1vcG5fZGVsdGFfYm90GLIB",
            "IAEoARIWCg1vcG5fZGVsdGFfc2xkGLUBIAEoARIXCg5vcG5fZERlbHRhX2Jv",
            "dBi4ASABKAESFwoOb3BuX2REZWx0YV9zbGQYuwEgASgBEhYKDWNsc19kZWx0",
            "YV9ib3QYvgEgASgBEhYKDWNsc19kZWx0YV9zbGQYwQEgASgBEhcKDmNsc19k",
            "RGVsdGFfYm90GMQBIAEoARIXCg5jbHNfZERlbHRhX3NsZBjHASABKAESFgoN",
            "c2xpcHBhZ2VfcG5fbBjKASABKAISGwoSc2xpcHBhZ2VfdW5pdF9wbl9sGM0B",
            "IAEoAhIbChJzbGlwcGFnZV9ub3JtX3BuX2wY0AEgASgCEhgKD21pbl9kRGVs",
            "dGFfYmFuZBjTASABKAISGAoPbWF4X2REZWx0YV9iYW5kGNYBIAEoAhIYCg9i",
            "X3BhcmVudF9udW1iZXIY2QEgASgDEhYKDWJfYWN0aXZlX3NpemUY3AEgASgF",
            "EhYKDWJfYnJrcl9zdGF0dXMY3wEgASgJEhUKDGJfYnJrcl9lcnJvchjiASAB",
            "KAkSGAoPc19wYXJlbnRfbnVtYmVyGOUBIAEoAxIWCg1zX2FjdGl2ZV9zaXpl",
            "GOgBIAEoBRIWCg1zX2Jya3Jfc3RhdHVzGOsBIAEoCRIVCgxzX2Jya3JfZXJy",
            "b3IY7gEgASgJEhAKB2RkX211bHQY8QEgASgBEhoKEXVuZGVybGllcnNfcGVy",
            "X2NuGPQBIAEoBRI7Cg51bmRlcmxpZXJfdHlwZRj3ASABKA4yIi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlVuZGVybGllclR5cGUSFAoLcG9pbnRfdmFsdWUY+gEg",
            "ASgBEjYKDnBvaW50X2N1cnJlbmN5GP0BIAEoDjIdLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQ3VycmVuY3kSGAoPbGl2ZV9oZWRnZV9tYXJrGIACIAEoARIUCgt1",
            "cGR0X3JlYXNvbhiDAiABKAkSLgoJdGltZXN0YW1wGIYCIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXAasgEKBFBLZXkSDQoFYWNjbnQYCiABKAkS",
            "FQoNcmlza19ncm91cF9pZBgLIAEoAxI1Cg1oZWRnZV9zZWNfa2V5GAwgASgL",
            "Mh4uc3BpZGVycm9jay5wcm90b2J1Zi5FeHBpcnlLZXkSOAoOaGVkZ2Vfc2Vj",
            "X3R5cGUYDSABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBl",
            "EhMKC2NsaWVudF9maXJtGA4gASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAutoHedgeState), global::Spiderrock.Protobuf.SpdrAutoHedgeState.Parser, new[]{ "Meta", "Pkey", "GroupingCode", "Ticker", "SecurityDesc", "SsaleFlag", "PositionType", "HedgeState", "HedgeText", "UPrc", "IsDeltaMixed", "AccumulatorError", "GrpDeltaBot", "GrpDeltaSld", "GrpDDeltaBot", "GrpDDeltaSld", "LastGrpFillDttm", "CtrlDeltaBot", "CtrlDeltaSld", "CtrlDDeltaBot", "CtrlDDeltaSld", "LastCtrlFillDttm", "AbsOptCn", "NetDelta", "NetDDelta", "OpenHedgeTime", "HedgeTargetVol", "ExpectedPrcRange", "OpnDeltaBot", "OpnDeltaSld", "OpnDDeltaBot", "OpnDDeltaSld", "ClsDeltaBot", "ClsDeltaSld", "ClsDDeltaBot", "ClsDDeltaSld", "SlippagePnL", "SlippageUnitPnL", "SlippageNormPnL", "MinDDeltaBand", "MaxDDeltaBand", "BParentNumber", "BActiveSize", "BBrkrStatus", "BBrkrError", "SParentNumber", "SActiveSize", "SBrkrStatus", "SBrkrError", "DdMult", "UnderliersPerCn", "UnderlierType", "PointValue", "PointCurrency", "LiveHedgeMark", "UpdtReason", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey), global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey.Parser, new[]{ "Accnt", "RiskGroupId", "HedgeSecKey", "HedgeSecType", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrAutoHedgeState records are published by autohedge servers and describe the current state of an autohedge controller that is managing RiskGroup autohedge orders.
  /// </summary>
  public sealed partial class SpdrAutoHedgeState : pb::IMessage<SpdrAutoHedgeState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrAutoHedgeState> _parser = new pb::MessageParser<SpdrAutoHedgeState>(() => new SpdrAutoHedgeState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrAutoHedgeState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrAutoHedgeStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeState(SpdrAutoHedgeState other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      groupingCode_ = other.groupingCode_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      securityDesc_ = other.securityDesc_;
      ssaleFlag_ = other.ssaleFlag_;
      positionType_ = other.positionType_;
      hedgeState_ = other.hedgeState_;
      hedgeText_ = other.hedgeText_;
      uPrc_ = other.uPrc_;
      isDeltaMixed_ = other.isDeltaMixed_;
      accumulatorError_ = other.accumulatorError_;
      grpDeltaBot_ = other.grpDeltaBot_;
      grpDeltaSld_ = other.grpDeltaSld_;
      grpDDeltaBot_ = other.grpDDeltaBot_;
      grpDDeltaSld_ = other.grpDDeltaSld_;
      lastGrpFillDttm_ = other.lastGrpFillDttm_ != null ? other.lastGrpFillDttm_.Clone() : null;
      ctrlDeltaBot_ = other.ctrlDeltaBot_;
      ctrlDeltaSld_ = other.ctrlDeltaSld_;
      ctrlDDeltaBot_ = other.ctrlDDeltaBot_;
      ctrlDDeltaSld_ = other.ctrlDDeltaSld_;
      lastCtrlFillDttm_ = other.lastCtrlFillDttm_ != null ? other.lastCtrlFillDttm_.Clone() : null;
      absOptCn_ = other.absOptCn_;
      netDelta_ = other.netDelta_;
      netDDelta_ = other.netDDelta_;
      openHedgeTime_ = other.openHedgeTime_;
      hedgeTargetVol_ = other.hedgeTargetVol_;
      expectedPrcRange_ = other.expectedPrcRange_;
      opnDeltaBot_ = other.opnDeltaBot_;
      opnDeltaSld_ = other.opnDeltaSld_;
      opnDDeltaBot_ = other.opnDDeltaBot_;
      opnDDeltaSld_ = other.opnDDeltaSld_;
      clsDeltaBot_ = other.clsDeltaBot_;
      clsDeltaSld_ = other.clsDeltaSld_;
      clsDDeltaBot_ = other.clsDDeltaBot_;
      clsDDeltaSld_ = other.clsDDeltaSld_;
      slippagePnL_ = other.slippagePnL_;
      slippageUnitPnL_ = other.slippageUnitPnL_;
      slippageNormPnL_ = other.slippageNormPnL_;
      minDDeltaBand_ = other.minDDeltaBand_;
      maxDDeltaBand_ = other.maxDDeltaBand_;
      bParentNumber_ = other.bParentNumber_;
      bActiveSize_ = other.bActiveSize_;
      bBrkrStatus_ = other.bBrkrStatus_;
      bBrkrError_ = other.bBrkrError_;
      sParentNumber_ = other.sParentNumber_;
      sActiveSize_ = other.sActiveSize_;
      sBrkrStatus_ = other.sBrkrStatus_;
      sBrkrError_ = other.sBrkrError_;
      ddMult_ = other.ddMult_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      liveHedgeMark_ = other.liveHedgeMark_;
      updtReason_ = other.updtReason_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeState Clone() {
      return new SpdrAutoHedgeState(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 100;
    private long groupingCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 106;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// ticker group (eg. @ES, @ZN)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "security_desc" field.</summary>
    public const int SecurityDescFieldNumber = 109;
    private string securityDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityDesc {
      get { return securityDesc_; }
      set {
        securityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ssale_flag" field.</summary>
    public const int SsaleFlagFieldNumber = 112;
    private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
      get { return ssaleFlag_; }
      set {
        ssaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 263;
    private global::Spiderrock.Protobuf.PositionType positionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "hedge_state" field.</summary>
    public const int HedgeStateFieldNumber = 115;
    private global::Spiderrock.Protobuf.HedgeGroupState hedgeState_ = global::Spiderrock.Protobuf.HedgeGroupState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeGroupState HedgeState {
      get { return hedgeState_; }
      set {
        hedgeState_ = value;
      }
    }

    /// <summary>Field number for the "hedge_text" field.</summary>
    public const int HedgeTextFieldNumber = 118;
    private string hedgeText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HedgeText {
      get { return hedgeText_; }
      set {
        hedgeText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 121;
    private double uPrc_;
    /// <summary>
    /// hedge target underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "is_delta_mixed" field.</summary>
    public const int IsDeltaMixedFieldNumber = 124;
    private global::Spiderrock.Protobuf.YesNo isDeltaMixed_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsDeltaMixed {
      get { return isDeltaMixed_; }
      set {
        isDeltaMixed_ = value;
      }
    }

    /// <summary>Field number for the "accumulator_error" field.</summary>
    public const int AccumulatorErrorFieldNumber = 127;
    private string accumulatorError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccumulatorError {
      get { return accumulatorError_; }
      set {
        accumulatorError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grp_delta_bot" field.</summary>
    public const int GrpDeltaBotFieldNumber = 130;
    private double grpDeltaBot_;
    /// <summary>
    /// option delta bot (in ctrlDe units)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GrpDeltaBot {
      get { return grpDeltaBot_; }
      set {
        grpDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "grp_delta_sld" field.</summary>
    public const int GrpDeltaSldFieldNumber = 133;
    private double grpDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GrpDeltaSld {
      get { return grpDeltaSld_; }
      set {
        grpDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "grp_dDelta_bot" field.</summary>
    public const int GrpDDeltaBotFieldNumber = 136;
    private double grpDDeltaBot_;
    /// <summary>
    /// option $delta bot (using uMid at time of option fill)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GrpDDeltaBot {
      get { return grpDDeltaBot_; }
      set {
        grpDDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "grp_dDelta_sld" field.</summary>
    public const int GrpDDeltaSldFieldNumber = 139;
    private double grpDDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GrpDDeltaSld {
      get { return grpDDeltaSld_; }
      set {
        grpDDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "last_grp_fill_dttm" field.</summary>
    public const int LastGrpFillDttmFieldNumber = 142;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastGrpFillDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastGrpFillDttm {
      get { return lastGrpFillDttm_; }
      set {
        lastGrpFillDttm_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_delta_bot" field.</summary>
    public const int CtrlDeltaBotFieldNumber = 145;
    private double ctrlDeltaBot_;
    /// <summary>
    /// hedge target delta (units) bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CtrlDeltaBot {
      get { return ctrlDeltaBot_; }
      set {
        ctrlDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_delta_sld" field.</summary>
    public const int CtrlDeltaSldFieldNumber = 148;
    private double ctrlDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CtrlDeltaSld {
      get { return ctrlDeltaSld_; }
      set {
        ctrlDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_dDelta_bot" field.</summary>
    public const int CtrlDDeltaBotFieldNumber = 151;
    private double ctrlDDeltaBot_;
    /// <summary>
    /// hedge target $delta bot (using actual fill price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CtrlDDeltaBot {
      get { return ctrlDDeltaBot_; }
      set {
        ctrlDDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_dDelta_sld" field.</summary>
    public const int CtrlDDeltaSldFieldNumber = 154;
    private double ctrlDDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CtrlDDeltaSld {
      get { return ctrlDDeltaSld_; }
      set {
        ctrlDDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "last_ctrl_fill_dttm" field.</summary>
    public const int LastCtrlFillDttmFieldNumber = 157;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastCtrlFillDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastCtrlFillDttm {
      get { return lastCtrlFillDttm_; }
      set {
        lastCtrlFillDttm_ = value;
      }
    }

    /// <summary>Field number for the "abs_opt_cn" field.</summary>
    public const int AbsOptCnFieldNumber = 160;
    private int absOptCn_;
    /// <summary>
    /// total number of option contracts executed in this hedge group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsOptCn {
      get { return absOptCn_; }
      set {
        absOptCn_ = value;
      }
    }

    /// <summary>Field number for the "net_delta" field.</summary>
    public const int NetDeltaFieldNumber = 163;
    private double netDelta_;
    /// <summary>
    /// grpDeltaBot - grpDeltaSld + ctrlDeltaBot - ctrlDeltaSld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NetDelta {
      get { return netDelta_; }
      set {
        netDelta_ = value;
      }
    }

    /// <summary>Field number for the "net_dDelta" field.</summary>
    public const int NetDDeltaFieldNumber = 166;
    private double netDDelta_;
    /// <summary>
    /// grpDDeltaBot - grpDDeltaSld + ctrlDDeltaBot - ctrlDDeltaSld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NetDDelta {
      get { return netDDelta_; }
      set {
        netDDelta_ = value;
      }
    }

    /// <summary>Field number for the "open_hedge_time" field.</summary>
    public const int OpenHedgeTimeFieldNumber = 169;
    private float openHedgeTime_;
    /// <summary>
    /// size weighted average time (in seconds) hedge risk has been open (executions to fills)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpenHedgeTime {
      get { return openHedgeTime_; }
      set {
        openHedgeTime_ = value;
      }
    }

    /// <summary>Field number for the "hedge_target_vol" field.</summary>
    public const int HedgeTargetVolFieldNumber = 172;
    private float hedgeTargetVol_;
    /// <summary>
    /// implied / expected today (annualized) volatility for hedge target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeTargetVol {
      get { return hedgeTargetVol_; }
      set {
        hedgeTargetVol_ = value;
      }
    }

    /// <summary>Field number for the "expected_prc_range" field.</summary>
    public const int ExpectedPrcRangeFieldNumber = 175;
    private float expectedPrcRange_;
    /// <summary>
    /// SQRT(avgHedgeTime x hedgeTargetVol) cone
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExpectedPrcRange {
      get { return expectedPrcRange_; }
      set {
        expectedPrcRange_ = value;
      }
    }

    /// <summary>Field number for the "opn_delta_bot" field.</summary>
    public const int OpnDeltaBotFieldNumber = 178;
    private double opnDeltaBot_;
    /// <summary>
    /// open risk delta bot (in ctrlDe units)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnDeltaBot {
      get { return opnDeltaBot_; }
      set {
        opnDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "opn_delta_sld" field.</summary>
    public const int OpnDeltaSldFieldNumber = 181;
    private double opnDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnDeltaSld {
      get { return opnDeltaSld_; }
      set {
        opnDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "opn_dDelta_bot" field.</summary>
    public const int OpnDDeltaBotFieldNumber = 184;
    private double opnDDeltaBot_;
    /// <summary>
    /// open risk $delta bot (in ctrlDe units)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnDDeltaBot {
      get { return opnDDeltaBot_; }
      set {
        opnDDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "opn_dDelta_sld" field.</summary>
    public const int OpnDDeltaSldFieldNumber = 187;
    private double opnDDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnDDeltaSld {
      get { return opnDDeltaSld_; }
      set {
        opnDDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "cls_delta_bot" field.</summary>
    public const int ClsDeltaBotFieldNumber = 190;
    private double clsDeltaBot_;
    /// <summary>
    /// close risk delta bot (in ctrlDe units)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsDeltaBot {
      get { return clsDeltaBot_; }
      set {
        clsDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "cls_delta_sld" field.</summary>
    public const int ClsDeltaSldFieldNumber = 193;
    private double clsDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsDeltaSld {
      get { return clsDeltaSld_; }
      set {
        clsDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "cls_dDelta_bot" field.</summary>
    public const int ClsDDeltaBotFieldNumber = 196;
    private double clsDDeltaBot_;
    /// <summary>
    /// close risk $delta bot (in ctrlDe units)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsDDeltaBot {
      get { return clsDDeltaBot_; }
      set {
        clsDDeltaBot_ = value;
      }
    }

    /// <summary>Field number for the "cls_dDelta_sld" field.</summary>
    public const int ClsDDeltaSldFieldNumber = 199;
    private double clsDDeltaSld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsDDeltaSld {
      get { return clsDDeltaSld_; }
      set {
        clsDDeltaSld_ = value;
      }
    }

    /// <summary>Field number for the "slippage_pn_l" field.</summary>
    public const int SlippagePnLFieldNumber = 202;
    private float slippagePnL_;
    /// <summary>
    /// opnDeltaBot * (clsDeltaPrcSld - opnDeltaPrcBot) + opnDeltaSld * (opnDeltaPrcSld - clsDeltaPrcBot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SlippagePnL {
      get { return slippagePnL_; }
      set {
        slippagePnL_ = value;
      }
    }

    /// <summary>Field number for the "slippage_unit_pn_l" field.</summary>
    public const int SlippageUnitPnLFieldNumber = 205;
    private float slippageUnitPnL_;
    /// <summary>
    /// slippagePnL / (grpDeltaBot + grpDeltaSld) [pnl / unit (share or fc)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SlippageUnitPnL {
      get { return slippageUnitPnL_; }
      set {
        slippageUnitPnL_ = value;
      }
    }

    /// <summary>Field number for the "slippage_norm_pn_l" field.</summary>
    public const int SlippageNormPnLFieldNumber = 208;
    private float slippageNormPnL_;
    /// <summary>
    /// slippageUnitPnL / expectedPrcRange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SlippageNormPnL {
      get { return slippageNormPnL_; }
      set {
        slippageNormPnL_ = value;
      }
    }

    /// <summary>Field number for the "min_dDelta_band" field.</summary>
    public const int MinDDeltaBandFieldNumber = 211;
    private float minDDeltaBand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinDDeltaBand {
      get { return minDDeltaBand_; }
      set {
        minDDeltaBand_ = value;
      }
    }

    /// <summary>Field number for the "max_dDelta_band" field.</summary>
    public const int MaxDDeltaBandFieldNumber = 214;
    private float maxDDeltaBand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDDeltaBand {
      get { return maxDDeltaBand_; }
      set {
        maxDDeltaBand_ = value;
      }
    }

    /// <summary>Field number for the "b_parent_number" field.</summary>
    public const int BParentNumberFieldNumber = 217;
    private long bParentNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BParentNumber {
      get { return bParentNumber_; }
      set {
        bParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "b_active_size" field.</summary>
    public const int BActiveSizeFieldNumber = 220;
    private int bActiveSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BActiveSize {
      get { return bActiveSize_; }
      set {
        bActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "b_brkr_status" field.</summary>
    public const int BBrkrStatusFieldNumber = 223;
    private string bBrkrStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BBrkrStatus {
      get { return bBrkrStatus_; }
      set {
        bBrkrStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "b_brkr_error" field.</summary>
    public const int BBrkrErrorFieldNumber = 226;
    private string bBrkrError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BBrkrError {
      get { return bBrkrError_; }
      set {
        bBrkrError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s_parent_number" field.</summary>
    public const int SParentNumberFieldNumber = 229;
    private long sParentNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SParentNumber {
      get { return sParentNumber_; }
      set {
        sParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "s_active_size" field.</summary>
    public const int SActiveSizeFieldNumber = 232;
    private int sActiveSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SActiveSize {
      get { return sActiveSize_; }
      set {
        sActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "s_brkr_status" field.</summary>
    public const int SBrkrStatusFieldNumber = 235;
    private string sBrkrStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SBrkrStatus {
      get { return sBrkrStatus_; }
      set {
        sBrkrStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s_brkr_error" field.</summary>
    public const int SBrkrErrorFieldNumber = 238;
    private string sBrkrError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SBrkrError {
      get { return sBrkrError_; }
      set {
        sBrkrError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dd_mult" field.</summary>
    public const int DdMultFieldNumber = 241;
    private double ddMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DdMult {
      get { return ddMult_; }
      set {
        ddMult_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 244;
    private int underliersPerCn_;
    /// <summary>
    /// future underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 247;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// type of underlier (affects $greek calculations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 250;
    private double pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (hedge target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 253;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "live_hedge_mark" field.</summary>
    public const int LiveHedgeMarkFieldNumber = 256;
    private double liveHedgeMark_;
    /// <summary>
    /// hedgeSecKey live mark (mid-market) [zero in SRSE]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveHedgeMark {
      get { return liveHedgeMark_; }
      set {
        liveHedgeMark_ = value;
      }
    }

    /// <summary>Field number for the "updt_reason" field.</summary>
    public const int UpdtReasonFieldNumber = 259;
    private string updtReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpdtReason {
      get { return updtReason_; }
      set {
        updtReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 262;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// SR system timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrAutoHedgeState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrAutoHedgeState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SecurityDesc != other.SecurityDesc) return false;
      if (SsaleFlag != other.SsaleFlag) return false;
      if (PositionType != other.PositionType) return false;
      if (HedgeState != other.HedgeState) return false;
      if (HedgeText != other.HedgeText) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (IsDeltaMixed != other.IsDeltaMixed) return false;
      if (AccumulatorError != other.AccumulatorError) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrpDeltaBot, other.GrpDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrpDeltaSld, other.GrpDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrpDDeltaBot, other.GrpDDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrpDDeltaSld, other.GrpDDeltaSld)) return false;
      if (!object.Equals(LastGrpFillDttm, other.LastGrpFillDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CtrlDeltaBot, other.CtrlDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CtrlDeltaSld, other.CtrlDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CtrlDDeltaBot, other.CtrlDDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CtrlDDeltaSld, other.CtrlDDeltaSld)) return false;
      if (!object.Equals(LastCtrlFillDttm, other.LastCtrlFillDttm)) return false;
      if (AbsOptCn != other.AbsOptCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetDelta, other.NetDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetDDelta, other.NetDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenHedgeTime, other.OpenHedgeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeTargetVol, other.HedgeTargetVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpectedPrcRange, other.ExpectedPrcRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnDeltaBot, other.OpnDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnDeltaSld, other.OpnDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnDDeltaBot, other.OpnDDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnDDeltaSld, other.OpnDDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsDeltaBot, other.ClsDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsDeltaSld, other.ClsDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsDDeltaBot, other.ClsDDeltaBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsDDeltaSld, other.ClsDDeltaSld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlippagePnL, other.SlippagePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlippageUnitPnL, other.SlippageUnitPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlippageNormPnL, other.SlippageNormPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinDDeltaBand, other.MinDDeltaBand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDDeltaBand, other.MaxDDeltaBand)) return false;
      if (BParentNumber != other.BParentNumber) return false;
      if (BActiveSize != other.BActiveSize) return false;
      if (BBrkrStatus != other.BBrkrStatus) return false;
      if (BBrkrError != other.BBrkrError) return false;
      if (SParentNumber != other.SParentNumber) return false;
      if (SActiveSize != other.SActiveSize) return false;
      if (SBrkrStatus != other.SBrkrStatus) return false;
      if (SBrkrError != other.SBrkrError) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DdMult, other.DdMult)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveHedgeMark, other.LiveHedgeMark)) return false;
      if (UpdtReason != other.UpdtReason) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SecurityDesc.Length != 0) hash ^= SecurityDesc.GetHashCode();
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType.GetHashCode();
      if (HedgeState != global::Spiderrock.Protobuf.HedgeGroupState.Unspecified) hash ^= HedgeState.GetHashCode();
      if (HedgeText.Length != 0) hash ^= HedgeText.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (IsDeltaMixed != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsDeltaMixed.GetHashCode();
      if (AccumulatorError.Length != 0) hash ^= AccumulatorError.GetHashCode();
      if (GrpDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrpDeltaBot);
      if (GrpDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrpDeltaSld);
      if (GrpDDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrpDDeltaBot);
      if (GrpDDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrpDDeltaSld);
      if (lastGrpFillDttm_ != null) hash ^= LastGrpFillDttm.GetHashCode();
      if (CtrlDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CtrlDeltaBot);
      if (CtrlDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CtrlDeltaSld);
      if (CtrlDDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CtrlDDeltaBot);
      if (CtrlDDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CtrlDDeltaSld);
      if (lastCtrlFillDttm_ != null) hash ^= LastCtrlFillDttm.GetHashCode();
      if (AbsOptCn != 0) hash ^= AbsOptCn.GetHashCode();
      if (NetDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetDelta);
      if (NetDDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetDDelta);
      if (OpenHedgeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenHedgeTime);
      if (HedgeTargetVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeTargetVol);
      if (ExpectedPrcRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpectedPrcRange);
      if (OpnDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnDeltaBot);
      if (OpnDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnDeltaSld);
      if (OpnDDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnDDeltaBot);
      if (OpnDDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnDDeltaSld);
      if (ClsDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsDeltaBot);
      if (ClsDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsDeltaSld);
      if (ClsDDeltaBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsDDeltaBot);
      if (ClsDDeltaSld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsDDeltaSld);
      if (SlippagePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlippagePnL);
      if (SlippageUnitPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlippageUnitPnL);
      if (SlippageNormPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlippageNormPnL);
      if (MinDDeltaBand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinDDeltaBand);
      if (MaxDDeltaBand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDDeltaBand);
      if (BParentNumber != 0L) hash ^= BParentNumber.GetHashCode();
      if (BActiveSize != 0) hash ^= BActiveSize.GetHashCode();
      if (BBrkrStatus.Length != 0) hash ^= BBrkrStatus.GetHashCode();
      if (BBrkrError.Length != 0) hash ^= BBrkrError.GetHashCode();
      if (SParentNumber != 0L) hash ^= SParentNumber.GetHashCode();
      if (SActiveSize != 0) hash ^= SActiveSize.GetHashCode();
      if (SBrkrStatus.Length != 0) hash ^= SBrkrStatus.GetHashCode();
      if (SBrkrError.Length != 0) hash ^= SBrkrError.GetHashCode();
      if (DdMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DdMult);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (PointValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (LiveHedgeMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveHedgeMark);
      if (UpdtReason.Length != 0) hash ^= UpdtReason.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(GroupingCode);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(SecurityDesc);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SsaleFlag);
      }
      if (HedgeState != global::Spiderrock.Protobuf.HedgeGroupState.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) HedgeState);
      }
      if (HedgeText.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(HedgeText);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(UPrc);
      }
      if (IsDeltaMixed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) IsDeltaMixed);
      }
      if (AccumulatorError.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AccumulatorError);
      }
      if (GrpDeltaBot != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(GrpDeltaBot);
      }
      if (GrpDeltaSld != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(GrpDeltaSld);
      }
      if (GrpDDeltaBot != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(GrpDDeltaBot);
      }
      if (GrpDDeltaSld != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(GrpDDeltaSld);
      }
      if (lastGrpFillDttm_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(LastGrpFillDttm);
      }
      if (CtrlDeltaBot != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(CtrlDeltaBot);
      }
      if (CtrlDeltaSld != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(CtrlDeltaSld);
      }
      if (CtrlDDeltaBot != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(CtrlDDeltaBot);
      }
      if (CtrlDDeltaSld != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(CtrlDDeltaSld);
      }
      if (lastCtrlFillDttm_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(LastCtrlFillDttm);
      }
      if (AbsOptCn != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(AbsOptCn);
      }
      if (NetDelta != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(NetDelta);
      }
      if (NetDDelta != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(NetDDelta);
      }
      if (OpenHedgeTime != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(OpenHedgeTime);
      }
      if (HedgeTargetVol != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(HedgeTargetVol);
      }
      if (ExpectedPrcRange != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(ExpectedPrcRange);
      }
      if (OpnDeltaBot != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(OpnDeltaBot);
      }
      if (OpnDeltaSld != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(OpnDeltaSld);
      }
      if (OpnDDeltaBot != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(OpnDDeltaBot);
      }
      if (OpnDDeltaSld != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(OpnDDeltaSld);
      }
      if (ClsDeltaBot != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(ClsDeltaBot);
      }
      if (ClsDeltaSld != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(ClsDeltaSld);
      }
      if (ClsDDeltaBot != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(ClsDDeltaBot);
      }
      if (ClsDDeltaSld != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(ClsDDeltaSld);
      }
      if (SlippagePnL != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SlippagePnL);
      }
      if (SlippageUnitPnL != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SlippageUnitPnL);
      }
      if (SlippageNormPnL != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(SlippageNormPnL);
      }
      if (MinDDeltaBand != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MinDDeltaBand);
      }
      if (MaxDDeltaBand != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(MaxDDeltaBand);
      }
      if (BParentNumber != 0L) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(BParentNumber);
      }
      if (BActiveSize != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(BActiveSize);
      }
      if (BBrkrStatus.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(BBrkrStatus);
      }
      if (BBrkrError.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(BBrkrError);
      }
      if (SParentNumber != 0L) {
        output.WriteRawTag(168, 14);
        output.WriteInt64(SParentNumber);
      }
      if (SActiveSize != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(SActiveSize);
      }
      if (SBrkrStatus.Length != 0) {
        output.WriteRawTag(218, 14);
        output.WriteString(SBrkrStatus);
      }
      if (SBrkrError.Length != 0) {
        output.WriteRawTag(242, 14);
        output.WriteString(SBrkrError);
      }
      if (DdMult != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(DdMult);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) UnderlierType);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) PointCurrency);
      }
      if (LiveHedgeMark != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(LiveHedgeMark);
      }
      if (UpdtReason.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(UpdtReason);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 16);
        output.WriteMessage(Timestamp);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 16);
        output.WriteEnum((int) PositionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(GroupingCode);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(SecurityDesc);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SsaleFlag);
      }
      if (HedgeState != global::Spiderrock.Protobuf.HedgeGroupState.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) HedgeState);
      }
      if (HedgeText.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(HedgeText);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(UPrc);
      }
      if (IsDeltaMixed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) IsDeltaMixed);
      }
      if (AccumulatorError.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AccumulatorError);
      }
      if (GrpDeltaBot != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(GrpDeltaBot);
      }
      if (GrpDeltaSld != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(GrpDeltaSld);
      }
      if (GrpDDeltaBot != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(GrpDDeltaBot);
      }
      if (GrpDDeltaSld != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(GrpDDeltaSld);
      }
      if (lastGrpFillDttm_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(LastGrpFillDttm);
      }
      if (CtrlDeltaBot != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(CtrlDeltaBot);
      }
      if (CtrlDeltaSld != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(CtrlDeltaSld);
      }
      if (CtrlDDeltaBot != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(CtrlDDeltaBot);
      }
      if (CtrlDDeltaSld != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(CtrlDDeltaSld);
      }
      if (lastCtrlFillDttm_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(LastCtrlFillDttm);
      }
      if (AbsOptCn != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(AbsOptCn);
      }
      if (NetDelta != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(NetDelta);
      }
      if (NetDDelta != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(NetDDelta);
      }
      if (OpenHedgeTime != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(OpenHedgeTime);
      }
      if (HedgeTargetVol != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(HedgeTargetVol);
      }
      if (ExpectedPrcRange != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(ExpectedPrcRange);
      }
      if (OpnDeltaBot != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(OpnDeltaBot);
      }
      if (OpnDeltaSld != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(OpnDeltaSld);
      }
      if (OpnDDeltaBot != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(OpnDDeltaBot);
      }
      if (OpnDDeltaSld != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(OpnDDeltaSld);
      }
      if (ClsDeltaBot != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(ClsDeltaBot);
      }
      if (ClsDeltaSld != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(ClsDeltaSld);
      }
      if (ClsDDeltaBot != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(ClsDDeltaBot);
      }
      if (ClsDDeltaSld != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(ClsDDeltaSld);
      }
      if (SlippagePnL != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SlippagePnL);
      }
      if (SlippageUnitPnL != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SlippageUnitPnL);
      }
      if (SlippageNormPnL != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(SlippageNormPnL);
      }
      if (MinDDeltaBand != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(MinDDeltaBand);
      }
      if (MaxDDeltaBand != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(MaxDDeltaBand);
      }
      if (BParentNumber != 0L) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(BParentNumber);
      }
      if (BActiveSize != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(BActiveSize);
      }
      if (BBrkrStatus.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(BBrkrStatus);
      }
      if (BBrkrError.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(BBrkrError);
      }
      if (SParentNumber != 0L) {
        output.WriteRawTag(168, 14);
        output.WriteInt64(SParentNumber);
      }
      if (SActiveSize != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(SActiveSize);
      }
      if (SBrkrStatus.Length != 0) {
        output.WriteRawTag(218, 14);
        output.WriteString(SBrkrStatus);
      }
      if (SBrkrError.Length != 0) {
        output.WriteRawTag(242, 14);
        output.WriteString(SBrkrError);
      }
      if (DdMult != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(DdMult);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) UnderlierType);
      }
      if (PointValue != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) PointCurrency);
      }
      if (LiveHedgeMark != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(LiveHedgeMark);
      }
      if (UpdtReason.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(UpdtReason);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 16);
        output.WriteMessage(Timestamp);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 16);
        output.WriteEnum((int) PositionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityDesc);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (HedgeState != global::Spiderrock.Protobuf.HedgeGroupState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeState);
      }
      if (HedgeText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HedgeText);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (IsDeltaMixed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsDeltaMixed);
      }
      if (AccumulatorError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccumulatorError);
      }
      if (GrpDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (GrpDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (GrpDDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (GrpDDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (lastGrpFillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastGrpFillDttm);
      }
      if (CtrlDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (CtrlDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (CtrlDDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (CtrlDDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (lastCtrlFillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastCtrlFillDttm);
      }
      if (AbsOptCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsOptCn);
      }
      if (NetDelta != 0D) {
        size += 2 + 8;
      }
      if (NetDDelta != 0D) {
        size += 2 + 8;
      }
      if (OpenHedgeTime != 0F) {
        size += 2 + 4;
      }
      if (HedgeTargetVol != 0F) {
        size += 2 + 4;
      }
      if (ExpectedPrcRange != 0F) {
        size += 2 + 4;
      }
      if (OpnDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (OpnDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (OpnDDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (OpnDDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (ClsDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (ClsDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (ClsDDeltaBot != 0D) {
        size += 2 + 8;
      }
      if (ClsDDeltaSld != 0D) {
        size += 2 + 8;
      }
      if (SlippagePnL != 0F) {
        size += 2 + 4;
      }
      if (SlippageUnitPnL != 0F) {
        size += 2 + 4;
      }
      if (SlippageNormPnL != 0F) {
        size += 2 + 4;
      }
      if (MinDDeltaBand != 0F) {
        size += 2 + 4;
      }
      if (MaxDDeltaBand != 0F) {
        size += 2 + 4;
      }
      if (BParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BParentNumber);
      }
      if (BActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BActiveSize);
      }
      if (BBrkrStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BBrkrStatus);
      }
      if (BBrkrError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BBrkrError);
      }
      if (SParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SParentNumber);
      }
      if (SActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SActiveSize);
      }
      if (SBrkrStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SBrkrStatus);
      }
      if (SBrkrError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SBrkrError);
      }
      if (DdMult != 0D) {
        size += 2 + 8;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (PointValue != 0D) {
        size += 2 + 8;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (LiveHedgeMark != 0D) {
        size += 2 + 8;
      }
      if (UpdtReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdtReason);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrAutoHedgeState other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SecurityDesc.Length != 0) {
        SecurityDesc = other.SecurityDesc;
      }
      if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SsaleFlag = other.SsaleFlag;
      }
      if (other.PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType = other.PositionType;
      }
      if (other.HedgeState != global::Spiderrock.Protobuf.HedgeGroupState.Unspecified) {
        HedgeState = other.HedgeState;
      }
      if (other.HedgeText.Length != 0) {
        HedgeText = other.HedgeText;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.IsDeltaMixed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsDeltaMixed = other.IsDeltaMixed;
      }
      if (other.AccumulatorError.Length != 0) {
        AccumulatorError = other.AccumulatorError;
      }
      if (other.GrpDeltaBot != 0D) {
        GrpDeltaBot = other.GrpDeltaBot;
      }
      if (other.GrpDeltaSld != 0D) {
        GrpDeltaSld = other.GrpDeltaSld;
      }
      if (other.GrpDDeltaBot != 0D) {
        GrpDDeltaBot = other.GrpDDeltaBot;
      }
      if (other.GrpDDeltaSld != 0D) {
        GrpDDeltaSld = other.GrpDDeltaSld;
      }
      if (other.lastGrpFillDttm_ != null) {
        if (lastGrpFillDttm_ == null) {
          LastGrpFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastGrpFillDttm.MergeFrom(other.LastGrpFillDttm);
      }
      if (other.CtrlDeltaBot != 0D) {
        CtrlDeltaBot = other.CtrlDeltaBot;
      }
      if (other.CtrlDeltaSld != 0D) {
        CtrlDeltaSld = other.CtrlDeltaSld;
      }
      if (other.CtrlDDeltaBot != 0D) {
        CtrlDDeltaBot = other.CtrlDDeltaBot;
      }
      if (other.CtrlDDeltaSld != 0D) {
        CtrlDDeltaSld = other.CtrlDDeltaSld;
      }
      if (other.lastCtrlFillDttm_ != null) {
        if (lastCtrlFillDttm_ == null) {
          LastCtrlFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastCtrlFillDttm.MergeFrom(other.LastCtrlFillDttm);
      }
      if (other.AbsOptCn != 0) {
        AbsOptCn = other.AbsOptCn;
      }
      if (other.NetDelta != 0D) {
        NetDelta = other.NetDelta;
      }
      if (other.NetDDelta != 0D) {
        NetDDelta = other.NetDDelta;
      }
      if (other.OpenHedgeTime != 0F) {
        OpenHedgeTime = other.OpenHedgeTime;
      }
      if (other.HedgeTargetVol != 0F) {
        HedgeTargetVol = other.HedgeTargetVol;
      }
      if (other.ExpectedPrcRange != 0F) {
        ExpectedPrcRange = other.ExpectedPrcRange;
      }
      if (other.OpnDeltaBot != 0D) {
        OpnDeltaBot = other.OpnDeltaBot;
      }
      if (other.OpnDeltaSld != 0D) {
        OpnDeltaSld = other.OpnDeltaSld;
      }
      if (other.OpnDDeltaBot != 0D) {
        OpnDDeltaBot = other.OpnDDeltaBot;
      }
      if (other.OpnDDeltaSld != 0D) {
        OpnDDeltaSld = other.OpnDDeltaSld;
      }
      if (other.ClsDeltaBot != 0D) {
        ClsDeltaBot = other.ClsDeltaBot;
      }
      if (other.ClsDeltaSld != 0D) {
        ClsDeltaSld = other.ClsDeltaSld;
      }
      if (other.ClsDDeltaBot != 0D) {
        ClsDDeltaBot = other.ClsDDeltaBot;
      }
      if (other.ClsDDeltaSld != 0D) {
        ClsDDeltaSld = other.ClsDDeltaSld;
      }
      if (other.SlippagePnL != 0F) {
        SlippagePnL = other.SlippagePnL;
      }
      if (other.SlippageUnitPnL != 0F) {
        SlippageUnitPnL = other.SlippageUnitPnL;
      }
      if (other.SlippageNormPnL != 0F) {
        SlippageNormPnL = other.SlippageNormPnL;
      }
      if (other.MinDDeltaBand != 0F) {
        MinDDeltaBand = other.MinDDeltaBand;
      }
      if (other.MaxDDeltaBand != 0F) {
        MaxDDeltaBand = other.MaxDDeltaBand;
      }
      if (other.BParentNumber != 0L) {
        BParentNumber = other.BParentNumber;
      }
      if (other.BActiveSize != 0) {
        BActiveSize = other.BActiveSize;
      }
      if (other.BBrkrStatus.Length != 0) {
        BBrkrStatus = other.BBrkrStatus;
      }
      if (other.BBrkrError.Length != 0) {
        BBrkrError = other.BBrkrError;
      }
      if (other.SParentNumber != 0L) {
        SParentNumber = other.SParentNumber;
      }
      if (other.SActiveSize != 0) {
        SActiveSize = other.SActiveSize;
      }
      if (other.SBrkrStatus.Length != 0) {
        SBrkrStatus = other.SBrkrStatus;
      }
      if (other.SBrkrError.Length != 0) {
        SBrkrError = other.SBrkrError;
      }
      if (other.DdMult != 0D) {
        DdMult = other.DdMult;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.PointValue != 0D) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.LiveHedgeMark != 0D) {
        LiveHedgeMark = other.LiveHedgeMark;
      }
      if (other.UpdtReason.Length != 0) {
        UpdtReason = other.UpdtReason;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 874: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 896: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 920: {
            HedgeState = (global::Spiderrock.Protobuf.HedgeGroupState) input.ReadEnum();
            break;
          }
          case 946: {
            HedgeText = input.ReadString();
            break;
          }
          case 969: {
            UPrc = input.ReadDouble();
            break;
          }
          case 992: {
            IsDeltaMixed = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1018: {
            AccumulatorError = input.ReadString();
            break;
          }
          case 1041: {
            GrpDeltaBot = input.ReadDouble();
            break;
          }
          case 1065: {
            GrpDeltaSld = input.ReadDouble();
            break;
          }
          case 1089: {
            GrpDDeltaBot = input.ReadDouble();
            break;
          }
          case 1113: {
            GrpDDeltaSld = input.ReadDouble();
            break;
          }
          case 1138: {
            if (lastGrpFillDttm_ == null) {
              LastGrpFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastGrpFillDttm);
            break;
          }
          case 1161: {
            CtrlDeltaBot = input.ReadDouble();
            break;
          }
          case 1185: {
            CtrlDeltaSld = input.ReadDouble();
            break;
          }
          case 1209: {
            CtrlDDeltaBot = input.ReadDouble();
            break;
          }
          case 1233: {
            CtrlDDeltaSld = input.ReadDouble();
            break;
          }
          case 1258: {
            if (lastCtrlFillDttm_ == null) {
              LastCtrlFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastCtrlFillDttm);
            break;
          }
          case 1280: {
            AbsOptCn = input.ReadInt32();
            break;
          }
          case 1305: {
            NetDelta = input.ReadDouble();
            break;
          }
          case 1329: {
            NetDDelta = input.ReadDouble();
            break;
          }
          case 1357: {
            OpenHedgeTime = input.ReadFloat();
            break;
          }
          case 1381: {
            HedgeTargetVol = input.ReadFloat();
            break;
          }
          case 1405: {
            ExpectedPrcRange = input.ReadFloat();
            break;
          }
          case 1425: {
            OpnDeltaBot = input.ReadDouble();
            break;
          }
          case 1449: {
            OpnDeltaSld = input.ReadDouble();
            break;
          }
          case 1473: {
            OpnDDeltaBot = input.ReadDouble();
            break;
          }
          case 1497: {
            OpnDDeltaSld = input.ReadDouble();
            break;
          }
          case 1521: {
            ClsDeltaBot = input.ReadDouble();
            break;
          }
          case 1545: {
            ClsDeltaSld = input.ReadDouble();
            break;
          }
          case 1569: {
            ClsDDeltaBot = input.ReadDouble();
            break;
          }
          case 1593: {
            ClsDDeltaSld = input.ReadDouble();
            break;
          }
          case 1621: {
            SlippagePnL = input.ReadFloat();
            break;
          }
          case 1645: {
            SlippageUnitPnL = input.ReadFloat();
            break;
          }
          case 1669: {
            SlippageNormPnL = input.ReadFloat();
            break;
          }
          case 1693: {
            MinDDeltaBand = input.ReadFloat();
            break;
          }
          case 1717: {
            MaxDDeltaBand = input.ReadFloat();
            break;
          }
          case 1736: {
            BParentNumber = input.ReadInt64();
            break;
          }
          case 1760: {
            BActiveSize = input.ReadInt32();
            break;
          }
          case 1786: {
            BBrkrStatus = input.ReadString();
            break;
          }
          case 1810: {
            BBrkrError = input.ReadString();
            break;
          }
          case 1832: {
            SParentNumber = input.ReadInt64();
            break;
          }
          case 1856: {
            SActiveSize = input.ReadInt32();
            break;
          }
          case 1882: {
            SBrkrStatus = input.ReadString();
            break;
          }
          case 1906: {
            SBrkrError = input.ReadString();
            break;
          }
          case 1929: {
            DdMult = input.ReadDouble();
            break;
          }
          case 1952: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1976: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 2001: {
            PointValue = input.ReadDouble();
            break;
          }
          case 2024: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 2049: {
            LiveHedgeMark = input.ReadDouble();
            break;
          }
          case 2074: {
            UpdtReason = input.ReadString();
            break;
          }
          case 2098: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2104: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 874: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 896: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 920: {
            HedgeState = (global::Spiderrock.Protobuf.HedgeGroupState) input.ReadEnum();
            break;
          }
          case 946: {
            HedgeText = input.ReadString();
            break;
          }
          case 969: {
            UPrc = input.ReadDouble();
            break;
          }
          case 992: {
            IsDeltaMixed = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1018: {
            AccumulatorError = input.ReadString();
            break;
          }
          case 1041: {
            GrpDeltaBot = input.ReadDouble();
            break;
          }
          case 1065: {
            GrpDeltaSld = input.ReadDouble();
            break;
          }
          case 1089: {
            GrpDDeltaBot = input.ReadDouble();
            break;
          }
          case 1113: {
            GrpDDeltaSld = input.ReadDouble();
            break;
          }
          case 1138: {
            if (lastGrpFillDttm_ == null) {
              LastGrpFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastGrpFillDttm);
            break;
          }
          case 1161: {
            CtrlDeltaBot = input.ReadDouble();
            break;
          }
          case 1185: {
            CtrlDeltaSld = input.ReadDouble();
            break;
          }
          case 1209: {
            CtrlDDeltaBot = input.ReadDouble();
            break;
          }
          case 1233: {
            CtrlDDeltaSld = input.ReadDouble();
            break;
          }
          case 1258: {
            if (lastCtrlFillDttm_ == null) {
              LastCtrlFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastCtrlFillDttm);
            break;
          }
          case 1280: {
            AbsOptCn = input.ReadInt32();
            break;
          }
          case 1305: {
            NetDelta = input.ReadDouble();
            break;
          }
          case 1329: {
            NetDDelta = input.ReadDouble();
            break;
          }
          case 1357: {
            OpenHedgeTime = input.ReadFloat();
            break;
          }
          case 1381: {
            HedgeTargetVol = input.ReadFloat();
            break;
          }
          case 1405: {
            ExpectedPrcRange = input.ReadFloat();
            break;
          }
          case 1425: {
            OpnDeltaBot = input.ReadDouble();
            break;
          }
          case 1449: {
            OpnDeltaSld = input.ReadDouble();
            break;
          }
          case 1473: {
            OpnDDeltaBot = input.ReadDouble();
            break;
          }
          case 1497: {
            OpnDDeltaSld = input.ReadDouble();
            break;
          }
          case 1521: {
            ClsDeltaBot = input.ReadDouble();
            break;
          }
          case 1545: {
            ClsDeltaSld = input.ReadDouble();
            break;
          }
          case 1569: {
            ClsDDeltaBot = input.ReadDouble();
            break;
          }
          case 1593: {
            ClsDDeltaSld = input.ReadDouble();
            break;
          }
          case 1621: {
            SlippagePnL = input.ReadFloat();
            break;
          }
          case 1645: {
            SlippageUnitPnL = input.ReadFloat();
            break;
          }
          case 1669: {
            SlippageNormPnL = input.ReadFloat();
            break;
          }
          case 1693: {
            MinDDeltaBand = input.ReadFloat();
            break;
          }
          case 1717: {
            MaxDDeltaBand = input.ReadFloat();
            break;
          }
          case 1736: {
            BParentNumber = input.ReadInt64();
            break;
          }
          case 1760: {
            BActiveSize = input.ReadInt32();
            break;
          }
          case 1786: {
            BBrkrStatus = input.ReadString();
            break;
          }
          case 1810: {
            BBrkrError = input.ReadString();
            break;
          }
          case 1832: {
            SParentNumber = input.ReadInt64();
            break;
          }
          case 1856: {
            SActiveSize = input.ReadInt32();
            break;
          }
          case 1882: {
            SBrkrStatus = input.ReadString();
            break;
          }
          case 1906: {
            SBrkrError = input.ReadString();
            break;
          }
          case 1929: {
            DdMult = input.ReadDouble();
            break;
          }
          case 1952: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1976: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 2001: {
            PointValue = input.ReadDouble();
            break;
          }
          case 2024: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 2049: {
            LiveHedgeMark = input.ReadDouble();
            break;
          }
          case 2074: {
            UpdtReason = input.ReadString();
            break;
          }
          case 2098: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2104: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrAutoHedgeState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAutoHedgeState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          riskGroupId_ = other.riskGroupId_;
          hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
          hedgeSecType_ = other.hedgeSecType_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "risk_group_id" field.</summary>
        public const int RiskGroupIdFieldNumber = 11;
        private long riskGroupId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long RiskGroupId {
          get { return riskGroupId_; }
          set {
            riskGroupId_ = value;
          }
        }

        /// <summary>Field number for the "hedge_sec_key" field.</summary>
        public const int HedgeSecKeyFieldNumber = 12;
        private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
        /// <summary>
        /// Execution Hedge SecKey (from SpdrAutoHedgeControl.targetSecKey)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
          get { return hedgeSecKey_; }
          set {
            hedgeSecKey_ = value;
          }
        }

        /// <summary>Field number for the "hedge_sec_type" field.</summary>
        public const int HedgeSecTypeFieldNumber = 13;
        private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        /// <summary>
        /// Execution Hedge SecType (from SpdrAutoHedgeControl.targetSecType) [can be None]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
          get { return hedgeSecType_; }
          set {
            hedgeSecType_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (RiskGroupId != other.RiskGroupId) return false;
          if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
          if (HedgeSecType != other.HedgeSecType) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
          if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (RiskGroupId != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (RiskGroupId != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (RiskGroupId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.RiskGroupId != 0L) {
            RiskGroupId = other.RiskGroupId;
          }
          if (other.hedgeSecKey_ != null) {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            HedgeSecKey.MergeFrom(other.HedgeSecKey);
          }
          if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            HedgeSecType = other.HedgeSecType;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                RiskGroupId = input.ReadInt64();
                break;
              }
              case 98: {
                if (hedgeSecKey_ == null) {
                  HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(HedgeSecKey);
                break;
              }
              case 104: {
                HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                RiskGroupId = input.ReadInt64();
                break;
              }
              case 98: {
                if (hedgeSecKey_ == null) {
                  HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(HedgeSecKey);
                break;
              }
              case 104: {
                HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
