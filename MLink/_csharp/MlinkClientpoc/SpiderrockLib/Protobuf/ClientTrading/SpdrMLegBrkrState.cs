// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrMLegBrkrState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrMLegBrkrState.proto</summary>
  public static partial class SpdrMLegBrkrStateReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrMLegBrkrState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrMLegBrkrStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJNTGVnQnJrclN0YXRlLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byL/TQoRU3Bk",
            "ck1MZWdCcmtyU3RhdGUSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgLMisuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyTUxlZ0Jya3JTdGF0ZS5QS2V5EhQKC2VuZ2lu",
            "ZV9uYW1lGI0IIAEoCRIVCg1wYXJlbnRfbnVtYmVyGGcgASgDEhoKEmJhc2Vf",
            "cGFyZW50X251bWJlchhqIAEoAxIWCg1tb2RpZnlfbnVtYmVyGJUIIAEoAxIU",
            "CgxhbHRfb3JkZXJfaWQYbSABKAkSEgoKcGFja2FnZV9pZBhwIAEoAxIRCglh",
            "bHRfYWNjbnQYdiABKAkSFQoNYWx0X3VzZXJfbmFtZRh5IAEoCRI2CgpzdGFn",
            "ZV90eXBlGHwgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyU3RhZ2VU",
            "eXBlEjMKCnN0YXJ0X3R5cGUYlgggASgOMh4uc3BpZGVycm9jay5wcm90b2J1",
            "Zi5TdGFydFR5cGUSLgoKaXNfZmxhZ2dlZBh/IAEoDjIaLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuWWVzTm8SFgoNbm90aWNlX251bWJlchiCASABKAMSFwoOZXhl",
            "Y19icmtyX2NvZGUYjwggASgJEjsKDHNwcmVhZF9jbGFzcxiDASABKA4yJC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlRvb2xTcHJlYWRDbGFzcxI5Cg1zcHJlYWRf",
            "Zmxhdm9yGIQBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuU3ByZWFkRmxh",
            "dm9yEjEKCnN0b2NrX3NpZGUYhQEgASgOMhwuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5CdXlTZWxsEjcKCnNzYWxlX2ZsYWcYiAEgASgOMiIuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TaG9ydFNhbGVGbGFnEhQKC2xvY2F0ZV9xdWFuGIsBIAEoBRIU",
            "Cgtsb2NhdGVfZmlybRiOASABKAkSFAoLbG9jYXRlX3Bvb2wYkQEgASgJEhUK",
            "DHN0b2NrX3NoYXJlcxiUASABKAUSFQoMc3RvY2tfbGVnX2lkGJcBIAEoAxIY",
            "Cg9zdG9ja19maWxsX3F1YW4YmgEgASgFEh0KFHN0b2NrX2F2Z19maWxsX3By",
            "aWNlGJ0BIAEoARIRCghyZWZfdVByYxigASABKAISEgoJbGl2ZV91UHJjGKMB",
            "IAEoAhI5Cg51X3ByaWNlX2Zvcm1hdBimASABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlByaWNlRm9ybWF0EhIKCXN0b2NrX2NweBipASABKAISEgoJc3Rv",
            "Y2tfY3N6GKwBIAEoBRISCglzdG9ja19jZXgYrwEgASgNEhEKCG51bV9sZWdz",
            "GLIBIAEoBRIxCghzZWNfa2V5MRi1ASABKAsyHi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk9wdGlvbktleRI0CglzZWNfdHlwZTEYuAEgASgOMiAuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5TcGRyS2V5VHlwZRIPCgZyYXRpbzEYuwEgASgNEiwKBXNp",
            "ZGUxGL4BIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBI6Cg5w",
            "b3NpdGlvbl90eXBlMRjBASABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlBv",
            "c2l0aW9uVHlwZRIQCgdsZWdfaWQxGMQBIAEoAxITCgpmaWxsX3F1YW4xGMcB",
            "IAEoBRIYCg9hdmdfZmlsbF9wcmljZTEYygEgASgBEg4KBXZlZ2ExGM0BIAEo",
            "AhISCglyZWZfdVByYzEY0AEgASgBEhMKCnJlZl9kZWx0YTEY0wEgASgCEhYK",
            "DXJlZl9lYXJuX2NudDEY1gEgASgFEhMKCmxpdmVfdVByYzEY2QEgASgBEjgK",
            "DXByaWNlX2Zvcm1hdDEY3AEgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5Q",
            "cmljZUZvcm1hdBIRCghsZWdfY3B4MRjfASABKAISEQoIbGVnX2NzejEY4gEg",
            "ASgFEhEKCGxlZ19jZXgxGOUBIAEoDRIxCghzZWNfa2V5MhjoASABKAsyHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRI0CglzZWNfdHlwZTIY6wEg",
            "ASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyS2V5VHlwZRIPCgZyYXRp",
            "bzIY7gEgASgNEiwKBXNpZGUyGPEBIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQnV5U2VsbBI6Cg5wb3NpdGlvbl90eXBlMhj0ASABKA4yIS5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRIQCgdsZWdfaWQyGPcBIAEoAxIT",
            "CgpmaWxsX3F1YW4yGPoBIAEoBRIYCg9hdmdfZmlsbF9wcmljZTIY/QEgASgB",
            "Eg4KBXZlZ2EyGIACIAEoAhISCglyZWZfdVByYzIYgwIgASgBEhMKCnJlZl9k",
            "ZWx0YTIYhgIgASgCEhYKDXJlZl9lYXJuX2NudDIYiQIgASgFEhMKCmxpdmVf",
            "dVByYzIYjAIgASgBEjgKDXByaWNlX2Zvcm1hdDIYjwIgASgOMiAuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBIRCghsZWdfY3B4MhiSAiABKAIS",
            "EQoIbGVnX2NzejIYlQIgASgFEhEKCGxlZ19jZXgyGJgCIAEoDRIxCghzZWNf",
            "a2V5MxibAiABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRI0",
            "CglzZWNfdHlwZTMYngIgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRy",
            "S2V5VHlwZRIPCgZyYXRpbzMYoQIgASgNEiwKBXNpZGUzGKQCIAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBI6Cg5wb3NpdGlvbl90eXBlMxin",
            "AiABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRIQCgds",
            "ZWdfaWQzGKoCIAEoAxITCgpmaWxsX3F1YW4zGK0CIAEoBRIYCg9hdmdfZmls",
            "bF9wcmljZTMYsAIgASgBEg4KBXZlZ2EzGLMCIAEoAhISCglyZWZfdVByYzMY",
            "tgIgASgBEhMKCnJlZl9kZWx0YTMYuQIgASgCEhYKDXJlZl9lYXJuX2NudDMY",
            "vAIgASgFEhMKCmxpdmVfdVByYzMYvwIgASgBEjgKDXByaWNlX2Zvcm1hdDMY",
            "wgIgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBIRCghs",
            "ZWdfY3B4MxjFAiABKAISEQoIbGVnX2NzejMYyAIgASgFEhEKCGxlZ19jZXgz",
            "GMsCIAEoDRIxCghzZWNfa2V5NBjOAiABKAsyHi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk9wdGlvbktleRI0CglzZWNfdHlwZTQY0QIgASgOMiAuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5TcGRyS2V5VHlwZRIPCgZyYXRpbzQY1AIgASgNEiwKBXNp",
            "ZGU0GNcCIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBI6Cg5w",
            "b3NpdGlvbl90eXBlNBjaAiABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlBv",
            "c2l0aW9uVHlwZRIQCgdsZWdfaWQ0GN0CIAEoAxITCgpmaWxsX3F1YW40GOAC",
            "IAEoBRIYCg9hdmdfZmlsbF9wcmljZTQY4wIgASgBEg4KBXZlZ2E0GOYCIAEo",
            "AhISCglyZWZfdVByYzQY6QIgASgBEhMKCnJlZl9kZWx0YTQY7AIgASgCEhYK",
            "DXJlZl9lYXJuX2NudDQY7wIgASgFEhMKCmxpdmVfdVByYzQY8gIgASgBEjgK",
            "DXByaWNlX2Zvcm1hdDQY9QIgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5Q",
            "cmljZUZvcm1hdBIRCghsZWdfY3B4NBj4AiABKAISEQoIbGVnX2NzejQY+wIg",
            "ASgFEhEKCGxlZ19jZXg0GP4CIAEoDRIxCghzZWNfa2V5NRiBAyABKAsyHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRI0CglzZWNfdHlwZTUYhAMg",
            "ASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyS2V5VHlwZRIPCgZyYXRp",
            "bzUYhwMgASgNEiwKBXNpZGU1GIoDIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQnV5U2VsbBI6Cg5wb3NpdGlvbl90eXBlNRiNAyABKA4yIS5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRIQCgdsZWdfaWQ1GJADIAEoAxIT",
            "CgpmaWxsX3F1YW41GJMDIAEoBRIYCg9hdmdfZmlsbF9wcmljZTUYlgMgASgB",
            "Eg4KBXZlZ2E1GJkDIAEoAhISCglyZWZfdVByYzUYnAMgASgBEhMKCnJlZl9k",
            "ZWx0YTUYnwMgASgCEhYKDXJlZl9lYXJuX2NudDUYogMgASgFEhMKCmxpdmVf",
            "dVByYzUYpQMgASgBEjgKDXByaWNlX2Zvcm1hdDUYqAMgASgOMiAuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBIRCghsZWdfY3B4NRirAyABKAIS",
            "EQoIbGVnX2NzejUYrgMgASgFEhEKCGxlZ19jZXg1GLEDIAEoDRIxCghzZWNf",
            "a2V5Nhi0AyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRI0",
            "CglzZWNfdHlwZTYYtwMgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRy",
            "S2V5VHlwZRIPCgZyYXRpbzYYugMgASgNEiwKBXNpZGU2GL0DIAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBI6Cg5wb3NpdGlvbl90eXBlNhjA",
            "AyABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRIQCgds",
            "ZWdfaWQ2GMMDIAEoAxITCgpmaWxsX3F1YW42GMYDIAEoBRIYCg9hdmdfZmls",
            "bF9wcmljZTYYyQMgASgBEg4KBXZlZ2E2GMwDIAEoAhISCglyZWZfdVByYzYY",
            "zwMgASgBEhMKCnJlZl9kZWx0YTYY0gMgASgCEhYKDXJlZl9lYXJuX2NudDYY",
            "1QMgASgFEhMKCmxpdmVfdVByYzYY2AMgASgBEjgKDXByaWNlX2Zvcm1hdDYY",
            "2wMgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBIRCghs",
            "ZWdfY3B4NhjeAyABKAISEQoIbGVnX2NzejYY4QMgASgFEhEKCGxlZ19jZXg2",
            "GOQDIAEoDRISCgltbGVnX3ZlZ2EY5wMgASgCEhUKDG1sZWdfd3RfdmVnYRjq",
            "AyABKAISEwoKbWxlZ19kZWx0YRjtAyABKAISEwoKbWxlZ19nYW1tYRjwAyAB",
            "KAISEwoKbWxlZ190aGV0YRjzAyABKAISFAoLZGVzY3JpcHRpb24Y9gMgASgJ",
            "EhMKCm9yZGVyX3NpemUY+QMgASgFEhoKEW9yZGVyX2FjdGl2ZV9zaXplGPwD",
            "IAEoBRIYCg9sZWF2ZXNfcXVhbnRpdHkY/wMgASgFEkAKEXNwZHJfb3JkZXJf",
            "c3RhdHVzGIIEIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck9yZGVy",
            "U3RhdHVzEkAKEXNwZHJfY2xvc2VfcmVhc29uGIUEIAEoDjIkLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3BkckNsb3NlUmVhc29uEkIKEnNwZHJfcmVqZWN0X3Jl",
            "YXNvbhiIBCABKA4yJS5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJSZWplY3RS",
            "ZWFzb24SHgoVc3Bkcl9jbG9zZV9kZXRhaWxfdHh0GIsEIAEoCRISCglvcGVu",
            "X2xlZ3MYjgQgASgFEhcKDmN1bV9zcXVhcmVfcXR5GJEEIAEoBRIXCg5hdmdf",
            "c3F1YXJlX3ByYxiUBCABKAESGAoPY3VtX3BhcnRpYWxfcXR5GJcEIAEoBRIS",
            "CglmaWxsX3ZlZ2EYmgQgASgCEhUKDGZpbGxfd3RfdmVnYRidBCABKAISEwoK",
            "ZmlsbF9kZWx0YRigBCABKAISFAoLZmlsbF9kRGVsdGEYowQgASgCEhMKCmZp",
            "bGxfZ2FtbWEYpgQgASgCEhMKCmZpbGxfdGhldGEYqQQgASgCEjMKDmxhc3Rf",
            "ZmlsbF9kdHRtGKwEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "GAoPcmlza19saW1pdF9zaXplGK8EIAEoBRI3Cg9yaXNrX2xpbWl0X2Rlc2MY",
            "sgQgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyUmlzaxI9ChByaXNr",
            "X2xpbWl0X2xldmVsGJAIIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bk",
            "clJpc2tMZXZlbBI3CgxtYXhfcHJvZ3Jlc3MYtQQgASgOMiAuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NYXhQcm9ncmVzcxIcChNtYXhfcHJvZ3Jlc3NfZGV0YWls",
            "GLgEIAEoCRI2ChFtYXhfcHJvZ3Jlc3NfdGltZRi7BCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEjMKCmFsZ29fc3RhdGUYvgQgASgOMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5BbGdvU3RhdGUSFQoMYWxnb19jb3VudGVyGMEE",
            "IAEoBRIzCgptYWtlX3N0YXRlGMQEIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQWxnb1N0YXRlEhUKDG1ha2VfY291bnRlchjHBCABKAUSOgoObWt0X3Jl",
            "c3Bfc3RhdGUYygQgASgOMiEuc3BpZGVycm9jay5wcm90b2J1Zi5Na3RSZXNw",
            "U3RhdGUSGQoQbWt0X3Jlc3BfY291bnRlchjNBCABKAUSNwoMYnJva2VyX3N0",
            "YXRlGNAEIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuQnJva2VyU3RhdGUS",
            "FwoOYnJva2VyX2NvdW50ZXIY0wQgASgFEj0KDnNwZHJfbWt0X3N0YXRlGNYE",
            "IAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck1hcmtldFN0YXRlEkIK",
            "EnNwZHJfYnJva2VyX3N0YXR1cxjZBCABKA4yJS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlNwZHJCcm9rZXJTdGF0dXMSHQoUcHJvZ3Jlc3NfcnVsZV9kZXRhaWwY",
            "3AQgASgJEjsKFmxhc3RfY2hpbGRfcmVqZWN0X2R0dG0Y3wQgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIfChZsYXN0X2NoaWxkX3JlamVjdF90",
            "ZXh0GOIEIAEoCRIWCg1yaXNrX2dyb3VwX2lkGOUEIAEoAxIZChB0cmlnZ2Vy",
            "X2dyb3VwX2lkGOgEIAEoAxIcChNoZWRnZV9ncm91cGluZ19jb2RlGOsEIAEo",
            "AxIzCgphdXRvX2hlZGdlGO4EIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QXV0b0hlZGdlEjkKEGhlZGdlX2luc3RydW1lbnQY8QQgASgOMh4uc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5IZWRnZUluc3QSNgoNaGVkZ2Vfc2VjX2tleRj0BCAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRI5Cg5oZWRnZV9z",
            "ZWNfdHlwZRj3BCABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlU",
            "eXBlEhkKEGhlZGdlX2JldGFfcmF0aW8Y+gQgASgCEjUKC2hlZGdlX3Njb3Bl",
            "GP0EIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuSGVkZ2VTY29wZRIdChRl",
            "eHRlcm5faGVkZ2VfZXhfZGVzdBiABSABKAkSHAoTZXh0ZXJuX2hlZGdlX3Bh",
            "cmFtcxiDBSABKAkSFQoMYmVzdF93YXlfcHJjGIYFIAEoAhIVCgx3cnN0X3dh",
            "eV9wcmMYiQUgASgCEhQKC2Jlc3Rfd2F5X3N6GIwFIAEoBRIUCgt3cnN0X3dh",
            "eV9zehiPBSABKAUSFAoLc3VyZmFjZV9wcmMYkgUgASgCEhQKC3N1cmZhY2Vf",
            "dm9sGJUFIAEoAhIVCgxzdXJmYWNlX3VQcmMYmAUgASgCEhQKC2xpbWl0X3By",
            "aWNlGJsFIAEoARIXCg5saW1pdF9yZWZfdVByYxicBSABKAESMwoJbGltaXRf",
            "ZXJyGJ4FIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTGltaXRFcnJvchIZ",
            "ChBtYWtlX2xpbWl0X3ByaWNlGKEFIAEoARIZChB0YWtlX2xpbWl0X3ByaWNl",
            "GKQFIAEoARI1Cg5jeGxfdVByY19yYW5nZRinBSABKA4yHC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlVQcmNDeGwSEQoIbWluX3VCaWQYqgUgASgCEhEKCG1heF91",
            "QXNrGK0FIAEoAhI2CgxtaW5fbWF4X3R5cGUYsAUgASgOMh8uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NaW5NYXhUeXBlEjAKCWxlYWRfc2lkZRizBSABKA4yHC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGwSIAoXbWF4X2NvbXBsZXRpb25f",
            "c2xpcHBhZ2UYtgUgASgBEhoKEW9yZGVyX3JlZl9wcmVtaXVtGLkFIAEoAhIR",
            "CghzdHJhdGVneRi8BSABKAkSEgoJdXNlcl9uYW1lGL8FIAEoCRIVCgxzcGRy",
            "X2NvbW1lbnQYxQUgASgJEjgKD3Rha2VfcmVhY2hfcnVsZRjIBSABKA4yHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlJlYWNoUnVsZRIaChFtYXhfZXhwb3N1cmVf",
            "c2l6ZRjLBSABKAUSGwoSbnVtX21ha2VfZXhjaGFuZ2VzGM4FIAEoBRI9Cgtw",
            "dWJsaWNfc2l6ZRjRBSABKA4yJy5zcGlkZXJyb2NrLnByb3RvYnVmLlB1Ymxp",
            "Y1NpemVIYW5kbGluZxI5Cg1wcm9ncmVzc19ydWxlGNQFIAEoDjIhLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuUHJvZ3Jlc3NSdWxlEhsKEnByb2dyZXNzX3NsaWNl",
            "X2NudBjXBSABKAUSHQoUcHJvZ3Jlc3NfZXhwb3NlX3RpbWUY2gUgASgFEhkK",
            "EG1heF9jaGlsZF9vcmRlcnMY3QUgASgFEhIKCWV4Y2hfbWFzaxjgBSABKA0S",
            "OwoObWFya2V0X3Nlc3Npb24YlwggASgOMiIuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NYXJrZXRTZXNzaW9uEi8KCnN0YXJ0X2R0dG0Y5gUgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIXCg5vcmRlcl9kdXJhdGlvbhjpBSABKAUS",
            "GAoPYWN0aXZlX2R1cmF0aW9uGJgIIAEoBRIzCg5nb29kX3RpbGxfZHR0bRjs",
            "BSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjAKC2V4cGlyZV9k",
            "dHRtGJkIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASSAoVcGFy",
            "ZW50X29yZGVyX2hhbmRsaW5nGO8FIAEoDjIoLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuUGFyZW50T3JkZXJIYW5kbGluZxJMChdwYXJlbnRfYmFsYW5jZV9oYW5k",
            "bGluZxjyBSABKA4yKi5zcGlkZXJyb2NrLnByb3RvYnVmLlBhcmVudEJhbGFu",
            "Y2VIYW5kbGluZxI/ChBibG9ja192aXNpYmlsaXR5GPUFIAEoDjIkLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuQmxvY2tWaXNpYmlsaXR5Ej0KEG9yZGVyX2xpbWl0",
            "X3R5cGUY+AUgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyTGltaXRU",
            "eXBlEhgKD29yZGVyX3ByY19saW1pdBj7BSABKAESFwoOb3JkZXJfcmVmX3VQ",
            "cmMY/gUgASgBEhUKDG9yZGVyX3JlZl9kZRiBBiABKAISFQoMb3JkZXJfcmVm",
            "X2dhGIQGIAEoAhIZChBvcmRlcl9wcmNfb2Zmc2V0GIcGIAEoARI+ChB0YWtl",
            "X2xpbWl0X2NsYXNzGIoGIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bk",
            "ckxpbWl0Q2xhc3MSOAoPdGFrZV9hbHBoYV90eXBlGI0GIAEoDjIeLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuQWxwaGFUeXBlEhoKEXRha2VfYWxwaGFfZmFjdG9y",
            "GJAGIAEoAhIfChZ0YWtlX2FscGhhX3Byb2JhYmlsaXR5GJMGIAEoAhIdChR0",
            "YWtlX3N1cmZfcHJjX29mZnNldBiWBiABKAESHQoUdGFrZV9zdXJmX3ZvbF9v",
            "ZmZzZXQYmQYgASgCEh0KFHRha2Vfc3VyZl93aWRfb2Zmc2V0GJwGIAEoAhI+",
            "ChBtYWtlX2xpbWl0X2NsYXNzGJ8GIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3BkckxpbWl0Q2xhc3MSOAoPbWFrZV9hbHBoYV90eXBlGKIGIAEoDjIe",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuQWxwaGFUeXBlEhoKEW1ha2VfYWxwaGFf",
            "ZmFjdG9yGKUGIAEoAhIfChZtYWtlX2FscGhhX3Byb2JhYmlsaXR5GKgGIAEo",
            "AhIdChRtYWtlX3N1cmZfcHJjX29mZnNldBirBiABKAESHQoUbWFrZV9zdXJm",
            "X3ZvbF9vZmZzZXQYrgYgASgCEh0KFG1ha2Vfc3VyZl93aWRfb2Zmc2V0GLEG",
            "IAEoAhIdChRvcmRlcl9yZWZfZXZlbnRfbXVsdBi0BiABKAISOQoUb3JkZXJf",
            "cmVmX2V2ZW50X2R0dG0YtwYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIYCg9tbGVnX3Byb2JfbGltaXQYugYgASgCEhkKEG1sZWdfc3VyZl9v",
            "ZmZzZXQYvQYgASgCEhcKDmV4dGVybl9leF9kZXN0GMAGIAEoCRIvCgpvcmRl",
            "cl9kdHRtGMMGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoM",
            "bWluX3N1cmZfdm9sGMYGIAEoAhIVCgxtYXhfc3VyZl92b2wYyQYgASgCEhUK",
            "DG1pbl9zdXJmX3ByYxjMBiABKAISFQoMbWF4X3N1cmZfcHJjGM8GIAEoAhIW",
            "Cg1taW5fc3VyZl91UHJjGNIGIAEoAhIWCg1tYXhfc3VyZl91UHJjGNUGIAEo",
            "AhIWCg1taW5fcXRlX3dpZHRoGNgGIAEoAhIWCg1hdmdfcXRlX3dpZHRoGNsG",
            "IAEoAhIWCg1jbnRfcXRlX3dpZHRoGN4GIAEoBRITCgphcnJpdmVfYmlkGOEG",
            "IAEoARITCgphcnJpdmVfYXNrGOQGIAEoARIWCg10b3RhbF9zZWNvbmRzGOcG",
            "IAEoAhIYCg93b3JraW5nX3NlY29uZHMY6gYgASgCEhcKDnBydF9hY3RpdmVf",
            "Y250GO0GIAEoBRIXCg5wcnRfcXR5X2FjdGl2ZRjwBiABKAUSFQoMY3VtX2V4",
            "Y2hfZmVlGPMGIAEoAhIUCgtjdW1fbTEwX3BubBj2BiABKAISGAoPY3VtX2Fy",
            "cml2YWxfcG5sGPkGIAEoAhIUCgt1X3ByY19kcmlmdBj8BiABKAISFAoLc192",
            "b2xfZHJpZnQY/wYgASgCEh4KFW1heF9ncnBfZGF5X2REZWx0YV9sbhiyByAB",
            "KAISHgoVbWF4X2dycF9kYXlfZERlbHRhX3NoGLUHIAEoAhIhChhtYXhfZ3Jw",
            "X2RheV9jb250cmFjdHNfbG4Y0wcgASgFEiEKGG1heF9ncnBfZGF5X2NvbnRy",
            "YWN0c19zaBjWByABKAUSIgoZbWF4X2dycF9kYXlfY29udHJhY3RzX2FicxjZ",
            "ByABKAUSHAoTbWF4X2dycF9kYXlfdmVnYV9sbhi7ByABKAISHAoTbWF4X2dy",
            "cF9kYXlfdmVnYV9zaBi+ByABKAISHQoUbWF4X2dycF9kYXlfdmVnYV9hYnMY",
            "wQcgASgCEhsKEmdycF9kYXlfdmVnYV9yYXRpbxjEByABKAISIAoXbWF4X2dy",
            "cF9kYXlfck1ldHJpYzFfbG4YkQggASgCEiAKF21heF9ncnBfZGF5X3JNZXRy",
            "aWMxX3NoGJIIIAEoAhIhChhtYXhfZ3JwX2RheV9yTWV0cmljMV9hYnMYkwgg",
            "ASgCEh8KFmdycF9kYXlfck1ldHJpYzFfcmF0aW8YlAggASgCEg0KBGNweDEY",
            "6AcgASgCEg0KBGNzejEY6wcgASgFEg0KBGNleDEY7gcgASgNEg0KBGNweDIY",
            "8QcgASgCEg0KBGNzejIY9AcgASgFEg0KBGNleDIY9wcgASgNEg8KBmNfbW9y",
            "ZRj6ByABKAUSFwoObnVtX25ld19vcmRlcnMY/QcgASgFEhoKEW51bV9wYXJl",
            "bnRfbGltaXRzGIAIIAEoDRITCgp1c2VyX2RhdGExGIMIIAEoCRITCgp1c2Vy",
            "X2RhdGEyGIYIIAEoCRIUCgtudW1fdXBkYXRlcxiJCCABKAUSLgoJdGltZXN0",
            "YW1wGIwIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAa2QEKBFBL",
            "ZXkSLgoGdGlja2VyGAogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNr",
            "ZXJLZXkSDQoFYWNjbnQYCyABKAkSNAoLc3Bkcl9zb3VyY2UYDCABKA4yHy5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNwZHJTb3VyY2USFQoNZ3JvdXBpbmdfY29k",
            "ZRgNIAEoAxIwCgpvcmRlcl9zaWRlGA4gASgOMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5CdXlTZWxsEhMKC2NsaWVudF9maXJtGA8gASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrMLegBrkrState), global::Spiderrock.Protobuf.SpdrMLegBrkrState.Parser, new[]{ "Meta", "Pkey", "EngineName", "ParentNumber", "BaseParentNumber", "ModifyNumber", "AltOrderId", "PackageId", "AltAccnt", "AltUserName", "StageType", "StartType", "IsFlagged", "NoticeNumber", "ExecBrkrCode", "SpreadClass", "SpreadFlavor", "StockSide", "SsaleFlag", "LocateQuan", "LocateFirm", "LocatePool", "StockShares", "StockLegId", "StockFillQuan", "StockAvgFillPrice", "RefUPrc", "LiveUPrc", "UPriceFormat", "StockCpx", "StockCsz", "StockCex", "NumLegs", "SecKey1", "SecType1", "Ratio1", "Side1", "PositionType1", "LegId1", "FillQuan1", "AvgFillPrice1", "Vega1", "RefUPrc1", "RefDelta1", "RefEarnCnt1", "LiveUPrc1", "PriceFormat1", "LegCpx1", "LegCsz1", "LegCex1", "SecKey2", "SecType2", "Ratio2", "Side2", "PositionType2", "LegId2", "FillQuan2", "AvgFillPrice2", "Vega2", "RefUPrc2", "RefDelta2", "RefEarnCnt2", "LiveUPrc2", "PriceFormat2", "LegCpx2", "LegCsz2", "LegCex2", "SecKey3", "SecType3", "Ratio3", "Side3", "PositionType3", "LegId3", "FillQuan3", "AvgFillPrice3", "Vega3", "RefUPrc3", "RefDelta3", "RefEarnCnt3", "LiveUPrc3", "PriceFormat3", "LegCpx3", "LegCsz3", "LegCex3", "SecKey4", "SecType4", "Ratio4", "Side4", "PositionType4", "LegId4", "FillQuan4", "AvgFillPrice4", "Vega4", "RefUPrc4", "RefDelta4", "RefEarnCnt4", "LiveUPrc4", "PriceFormat4", "LegCpx4", "LegCsz4", "LegCex4", "SecKey5", "SecType5", "Ratio5", "Side5", "PositionType5", "LegId5", "FillQuan5", "AvgFillPrice5", "Vega5", "RefUPrc5", "RefDelta5", "RefEarnCnt5", "LiveUPrc5", "PriceFormat5", "LegCpx5", "LegCsz5", "LegCex5", "SecKey6", "SecType6", "Ratio6", "Side6", "PositionType6", "LegId6", "FillQuan6", "AvgFillPrice6", "Vega6", "RefUPrc6", "RefDelta6", "RefEarnCnt6", "LiveUPrc6", "PriceFormat6", "LegCpx6", "LegCsz6", "LegCex6", "MlegVega", "MlegWtVega", "MlegDelta", "MlegGamma", "MlegTheta", "Description", "OrderSize", "OrderActiveSize", "LeavesQuantity", "SpdrOrderStatus", "SpdrCloseReason", "SpdrRejectReason", "SpdrCloseDetailTxt", "OpenLegs", "CumSquareQty", "AvgSquarePrc", "CumPartialQty", "FillVega", "FillWtVega", "FillDelta", "FillDDelta", "FillGamma", "FillTheta", "LastFillDttm", "RiskLimitSize", "RiskLimitDesc", "RiskLimitLevel", "MaxProgress", "MaxProgressDetail", "MaxProgressTime", "AlgoState", "AlgoCounter", "MakeState", "MakeCounter", "MktRespState", "MktRespCounter", "BrokerState", "BrokerCounter", "SpdrMktState", "SpdrBrokerStatus", "ProgressRuleDetail", "LastChildRejectDttm", "LastChildRejectText", "RiskGroupId", "TriggerGroupId", "HedgeGroupingCode", "AutoHedge", "HedgeInstrument", "HedgeSecKey", "HedgeSecType", "HedgeBetaRatio", "HedgeScope", "ExternHedgeExDest", "ExternHedgeParams", "BestWayPrc", "WrstWayPrc", "BestWaySz", "WrstWaySz", "SurfacePrc", "SurfaceVol", "SurfaceUPrc", "LimitPrice", "LimitRefUPrc", "LimitErr", "MakeLimitPrice", "TakeLimitPrice", "CxlUPrcRange", "MinUBid", "MaxUAsk", "MinMaxType", "LeadSide", "MaxCompletionSlippage", "OrderRefPremium", "Strategy", "UserName", "SpdrComment", "TakeReachRule", "MaxExposureSize", "NumMakeExchanges", "PublicSize", "ProgressRule", "ProgressSliceCnt", "ProgressExposeTime", "MaxChildOrders", "ExchMask", "MarketSession", "StartDttm", "OrderDuration", "ActiveDuration", "GoodTillDttm", "ExpireDttm", "ParentOrderHandling", "ParentBalanceHandling", "BlockVisibility", "OrderLimitType", "OrderPrcLimit", "OrderRefUPrc", "OrderRefDe", "OrderRefGa", "OrderPrcOffset", "TakeLimitClass", "TakeAlphaType", "TakeAlphaFactor", "TakeAlphaProbability", "TakeSurfPrcOffset", "TakeSurfVolOffset", "TakeSurfWidOffset", "MakeLimitClass", "MakeAlphaType", "MakeAlphaFactor", "MakeAlphaProbability", "MakeSurfPrcOffset", "MakeSurfVolOffset", "MakeSurfWidOffset", "OrderRefEventMult", "OrderRefEventDttm", "MlegProbLimit", "MlegSurfOffset", "ExternExDest", "OrderDttm", "MinSurfVol", "MaxSurfVol", "MinSurfPrc", "MaxSurfPrc", "MinSurfUPrc", "MaxSurfUPrc", "MinQteWidth", "AvgQteWidth", "CntQteWidth", "ArriveBid", "ArriveAsk", "TotalSeconds", "WorkingSeconds", "PrtActiveCnt", "PrtQtyActive", "CumExchFee", "CumM10Pnl", "CumArrivalPnl", "UPrcDrift", "SVolDrift", "MaxGrpDayDDeltaLn", "MaxGrpDayDDeltaSh", "MaxGrpDayContractsLn", "MaxGrpDayContractsSh", "MaxGrpDayContractsAbs", "MaxGrpDayVegaLn", "MaxGrpDayVegaSh", "MaxGrpDayVegaAbs", "GrpDayVegaRatio", "MaxGrpDayRMetric1Ln", "MaxGrpDayRMetric1Sh", "MaxGrpDayRMetric1Abs", "GrpDayRMetric1Ratio", "Cpx1", "Csz1", "Cex1", "Cpx2", "Csz2", "Cex2", "CMore", "NumNewOrders", "NumParentLimits", "UserData1", "UserData2", "NumUpdates", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey), global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey.Parser, new[]{ "Ticker", "Accnt", "SpdrSource", "GroupingCode", "OrderSide", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrMLegBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
  /// </summary>
  public sealed partial class SpdrMLegBrkrState : pb::IMessage<SpdrMLegBrkrState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrMLegBrkrState> _parser = new pb::MessageParser<SpdrMLegBrkrState>(() => new SpdrMLegBrkrState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrMLegBrkrState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrMLegBrkrStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrState(SpdrMLegBrkrState other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      engineName_ = other.engineName_;
      parentNumber_ = other.parentNumber_;
      baseParentNumber_ = other.baseParentNumber_;
      modifyNumber_ = other.modifyNumber_;
      altOrderId_ = other.altOrderId_;
      packageId_ = other.packageId_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      stageType_ = other.stageType_;
      startType_ = other.startType_;
      isFlagged_ = other.isFlagged_;
      noticeNumber_ = other.noticeNumber_;
      execBrkrCode_ = other.execBrkrCode_;
      spreadClass_ = other.spreadClass_;
      spreadFlavor_ = other.spreadFlavor_;
      stockSide_ = other.stockSide_;
      ssaleFlag_ = other.ssaleFlag_;
      locateQuan_ = other.locateQuan_;
      locateFirm_ = other.locateFirm_;
      locatePool_ = other.locatePool_;
      stockShares_ = other.stockShares_;
      stockLegId_ = other.stockLegId_;
      stockFillQuan_ = other.stockFillQuan_;
      stockAvgFillPrice_ = other.stockAvgFillPrice_;
      refUPrc_ = other.refUPrc_;
      liveUPrc_ = other.liveUPrc_;
      uPriceFormat_ = other.uPriceFormat_;
      stockCpx_ = other.stockCpx_;
      stockCsz_ = other.stockCsz_;
      stockCex_ = other.stockCex_;
      numLegs_ = other.numLegs_;
      secKey1_ = other.secKey1_ != null ? other.secKey1_.Clone() : null;
      secType1_ = other.secType1_;
      ratio1_ = other.ratio1_;
      side1_ = other.side1_;
      positionType1_ = other.positionType1_;
      legId1_ = other.legId1_;
      fillQuan1_ = other.fillQuan1_;
      avgFillPrice1_ = other.avgFillPrice1_;
      vega1_ = other.vega1_;
      refUPrc1_ = other.refUPrc1_;
      refDelta1_ = other.refDelta1_;
      refEarnCnt1_ = other.refEarnCnt1_;
      liveUPrc1_ = other.liveUPrc1_;
      priceFormat1_ = other.priceFormat1_;
      legCpx1_ = other.legCpx1_;
      legCsz1_ = other.legCsz1_;
      legCex1_ = other.legCex1_;
      secKey2_ = other.secKey2_ != null ? other.secKey2_.Clone() : null;
      secType2_ = other.secType2_;
      ratio2_ = other.ratio2_;
      side2_ = other.side2_;
      positionType2_ = other.positionType2_;
      legId2_ = other.legId2_;
      fillQuan2_ = other.fillQuan2_;
      avgFillPrice2_ = other.avgFillPrice2_;
      vega2_ = other.vega2_;
      refUPrc2_ = other.refUPrc2_;
      refDelta2_ = other.refDelta2_;
      refEarnCnt2_ = other.refEarnCnt2_;
      liveUPrc2_ = other.liveUPrc2_;
      priceFormat2_ = other.priceFormat2_;
      legCpx2_ = other.legCpx2_;
      legCsz2_ = other.legCsz2_;
      legCex2_ = other.legCex2_;
      secKey3_ = other.secKey3_ != null ? other.secKey3_.Clone() : null;
      secType3_ = other.secType3_;
      ratio3_ = other.ratio3_;
      side3_ = other.side3_;
      positionType3_ = other.positionType3_;
      legId3_ = other.legId3_;
      fillQuan3_ = other.fillQuan3_;
      avgFillPrice3_ = other.avgFillPrice3_;
      vega3_ = other.vega3_;
      refUPrc3_ = other.refUPrc3_;
      refDelta3_ = other.refDelta3_;
      refEarnCnt3_ = other.refEarnCnt3_;
      liveUPrc3_ = other.liveUPrc3_;
      priceFormat3_ = other.priceFormat3_;
      legCpx3_ = other.legCpx3_;
      legCsz3_ = other.legCsz3_;
      legCex3_ = other.legCex3_;
      secKey4_ = other.secKey4_ != null ? other.secKey4_.Clone() : null;
      secType4_ = other.secType4_;
      ratio4_ = other.ratio4_;
      side4_ = other.side4_;
      positionType4_ = other.positionType4_;
      legId4_ = other.legId4_;
      fillQuan4_ = other.fillQuan4_;
      avgFillPrice4_ = other.avgFillPrice4_;
      vega4_ = other.vega4_;
      refUPrc4_ = other.refUPrc4_;
      refDelta4_ = other.refDelta4_;
      refEarnCnt4_ = other.refEarnCnt4_;
      liveUPrc4_ = other.liveUPrc4_;
      priceFormat4_ = other.priceFormat4_;
      legCpx4_ = other.legCpx4_;
      legCsz4_ = other.legCsz4_;
      legCex4_ = other.legCex4_;
      secKey5_ = other.secKey5_ != null ? other.secKey5_.Clone() : null;
      secType5_ = other.secType5_;
      ratio5_ = other.ratio5_;
      side5_ = other.side5_;
      positionType5_ = other.positionType5_;
      legId5_ = other.legId5_;
      fillQuan5_ = other.fillQuan5_;
      avgFillPrice5_ = other.avgFillPrice5_;
      vega5_ = other.vega5_;
      refUPrc5_ = other.refUPrc5_;
      refDelta5_ = other.refDelta5_;
      refEarnCnt5_ = other.refEarnCnt5_;
      liveUPrc5_ = other.liveUPrc5_;
      priceFormat5_ = other.priceFormat5_;
      legCpx5_ = other.legCpx5_;
      legCsz5_ = other.legCsz5_;
      legCex5_ = other.legCex5_;
      secKey6_ = other.secKey6_ != null ? other.secKey6_.Clone() : null;
      secType6_ = other.secType6_;
      ratio6_ = other.ratio6_;
      side6_ = other.side6_;
      positionType6_ = other.positionType6_;
      legId6_ = other.legId6_;
      fillQuan6_ = other.fillQuan6_;
      avgFillPrice6_ = other.avgFillPrice6_;
      vega6_ = other.vega6_;
      refUPrc6_ = other.refUPrc6_;
      refDelta6_ = other.refDelta6_;
      refEarnCnt6_ = other.refEarnCnt6_;
      liveUPrc6_ = other.liveUPrc6_;
      priceFormat6_ = other.priceFormat6_;
      legCpx6_ = other.legCpx6_;
      legCsz6_ = other.legCsz6_;
      legCex6_ = other.legCex6_;
      mlegVega_ = other.mlegVega_;
      mlegWtVega_ = other.mlegWtVega_;
      mlegDelta_ = other.mlegDelta_;
      mlegGamma_ = other.mlegGamma_;
      mlegTheta_ = other.mlegTheta_;
      description_ = other.description_;
      orderSize_ = other.orderSize_;
      orderActiveSize_ = other.orderActiveSize_;
      leavesQuantity_ = other.leavesQuantity_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      spdrRejectReason_ = other.spdrRejectReason_;
      spdrCloseDetailTxt_ = other.spdrCloseDetailTxt_;
      openLegs_ = other.openLegs_;
      cumSquareQty_ = other.cumSquareQty_;
      avgSquarePrc_ = other.avgSquarePrc_;
      cumPartialQty_ = other.cumPartialQty_;
      fillVega_ = other.fillVega_;
      fillWtVega_ = other.fillWtVega_;
      fillDelta_ = other.fillDelta_;
      fillDDelta_ = other.fillDDelta_;
      fillGamma_ = other.fillGamma_;
      fillTheta_ = other.fillTheta_;
      lastFillDttm_ = other.lastFillDttm_ != null ? other.lastFillDttm_.Clone() : null;
      riskLimitSize_ = other.riskLimitSize_;
      riskLimitDesc_ = other.riskLimitDesc_;
      riskLimitLevel_ = other.riskLimitLevel_;
      maxProgress_ = other.maxProgress_;
      maxProgressDetail_ = other.maxProgressDetail_;
      maxProgressTime_ = other.maxProgressTime_ != null ? other.maxProgressTime_.Clone() : null;
      algoState_ = other.algoState_;
      algoCounter_ = other.algoCounter_;
      makeState_ = other.makeState_;
      makeCounter_ = other.makeCounter_;
      mktRespState_ = other.mktRespState_;
      mktRespCounter_ = other.mktRespCounter_;
      brokerState_ = other.brokerState_;
      brokerCounter_ = other.brokerCounter_;
      spdrMktState_ = other.spdrMktState_;
      spdrBrokerStatus_ = other.spdrBrokerStatus_;
      progressRuleDetail_ = other.progressRuleDetail_;
      lastChildRejectDttm_ = other.lastChildRejectDttm_ != null ? other.lastChildRejectDttm_.Clone() : null;
      lastChildRejectText_ = other.lastChildRejectText_;
      riskGroupId_ = other.riskGroupId_;
      triggerGroupId_ = other.triggerGroupId_;
      hedgeGroupingCode_ = other.hedgeGroupingCode_;
      autoHedge_ = other.autoHedge_;
      hedgeInstrument_ = other.hedgeInstrument_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeSecType_ = other.hedgeSecType_;
      hedgeBetaRatio_ = other.hedgeBetaRatio_;
      hedgeScope_ = other.hedgeScope_;
      externHedgeExDest_ = other.externHedgeExDest_;
      externHedgeParams_ = other.externHedgeParams_;
      bestWayPrc_ = other.bestWayPrc_;
      wrstWayPrc_ = other.wrstWayPrc_;
      bestWaySz_ = other.bestWaySz_;
      wrstWaySz_ = other.wrstWaySz_;
      surfacePrc_ = other.surfacePrc_;
      surfaceVol_ = other.surfaceVol_;
      surfaceUPrc_ = other.surfaceUPrc_;
      limitPrice_ = other.limitPrice_;
      limitRefUPrc_ = other.limitRefUPrc_;
      limitErr_ = other.limitErr_;
      makeLimitPrice_ = other.makeLimitPrice_;
      takeLimitPrice_ = other.takeLimitPrice_;
      cxlUPrcRange_ = other.cxlUPrcRange_;
      minUBid_ = other.minUBid_;
      maxUAsk_ = other.maxUAsk_;
      minMaxType_ = other.minMaxType_;
      leadSide_ = other.leadSide_;
      maxCompletionSlippage_ = other.maxCompletionSlippage_;
      orderRefPremium_ = other.orderRefPremium_;
      strategy_ = other.strategy_;
      userName_ = other.userName_;
      spdrComment_ = other.spdrComment_;
      takeReachRule_ = other.takeReachRule_;
      maxExposureSize_ = other.maxExposureSize_;
      numMakeExchanges_ = other.numMakeExchanges_;
      publicSize_ = other.publicSize_;
      progressRule_ = other.progressRule_;
      progressSliceCnt_ = other.progressSliceCnt_;
      progressExposeTime_ = other.progressExposeTime_;
      maxChildOrders_ = other.maxChildOrders_;
      exchMask_ = other.exchMask_;
      marketSession_ = other.marketSession_;
      startDttm_ = other.startDttm_ != null ? other.startDttm_.Clone() : null;
      orderDuration_ = other.orderDuration_;
      activeDuration_ = other.activeDuration_;
      goodTillDttm_ = other.goodTillDttm_ != null ? other.goodTillDttm_.Clone() : null;
      expireDttm_ = other.expireDttm_ != null ? other.expireDttm_.Clone() : null;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      blockVisibility_ = other.blockVisibility_;
      orderLimitType_ = other.orderLimitType_;
      orderPrcLimit_ = other.orderPrcLimit_;
      orderRefUPrc_ = other.orderRefUPrc_;
      orderRefDe_ = other.orderRefDe_;
      orderRefGa_ = other.orderRefGa_;
      orderPrcOffset_ = other.orderPrcOffset_;
      takeLimitClass_ = other.takeLimitClass_;
      takeAlphaType_ = other.takeAlphaType_;
      takeAlphaFactor_ = other.takeAlphaFactor_;
      takeAlphaProbability_ = other.takeAlphaProbability_;
      takeSurfPrcOffset_ = other.takeSurfPrcOffset_;
      takeSurfVolOffset_ = other.takeSurfVolOffset_;
      takeSurfWidOffset_ = other.takeSurfWidOffset_;
      makeLimitClass_ = other.makeLimitClass_;
      makeAlphaType_ = other.makeAlphaType_;
      makeAlphaFactor_ = other.makeAlphaFactor_;
      makeAlphaProbability_ = other.makeAlphaProbability_;
      makeSurfPrcOffset_ = other.makeSurfPrcOffset_;
      makeSurfVolOffset_ = other.makeSurfVolOffset_;
      makeSurfWidOffset_ = other.makeSurfWidOffset_;
      orderRefEventMult_ = other.orderRefEventMult_;
      orderRefEventDttm_ = other.orderRefEventDttm_ != null ? other.orderRefEventDttm_.Clone() : null;
      mlegProbLimit_ = other.mlegProbLimit_;
      mlegSurfOffset_ = other.mlegSurfOffset_;
      externExDest_ = other.externExDest_;
      orderDttm_ = other.orderDttm_ != null ? other.orderDttm_.Clone() : null;
      minSurfVol_ = other.minSurfVol_;
      maxSurfVol_ = other.maxSurfVol_;
      minSurfPrc_ = other.minSurfPrc_;
      maxSurfPrc_ = other.maxSurfPrc_;
      minSurfUPrc_ = other.minSurfUPrc_;
      maxSurfUPrc_ = other.maxSurfUPrc_;
      minQteWidth_ = other.minQteWidth_;
      avgQteWidth_ = other.avgQteWidth_;
      cntQteWidth_ = other.cntQteWidth_;
      arriveBid_ = other.arriveBid_;
      arriveAsk_ = other.arriveAsk_;
      totalSeconds_ = other.totalSeconds_;
      workingSeconds_ = other.workingSeconds_;
      prtActiveCnt_ = other.prtActiveCnt_;
      prtQtyActive_ = other.prtQtyActive_;
      cumExchFee_ = other.cumExchFee_;
      cumM10Pnl_ = other.cumM10Pnl_;
      cumArrivalPnl_ = other.cumArrivalPnl_;
      uPrcDrift_ = other.uPrcDrift_;
      sVolDrift_ = other.sVolDrift_;
      maxGrpDayDDeltaLn_ = other.maxGrpDayDDeltaLn_;
      maxGrpDayDDeltaSh_ = other.maxGrpDayDDeltaSh_;
      maxGrpDayContractsLn_ = other.maxGrpDayContractsLn_;
      maxGrpDayContractsSh_ = other.maxGrpDayContractsSh_;
      maxGrpDayContractsAbs_ = other.maxGrpDayContractsAbs_;
      maxGrpDayVegaLn_ = other.maxGrpDayVegaLn_;
      maxGrpDayVegaSh_ = other.maxGrpDayVegaSh_;
      maxGrpDayVegaAbs_ = other.maxGrpDayVegaAbs_;
      grpDayVegaRatio_ = other.grpDayVegaRatio_;
      maxGrpDayRMetric1Ln_ = other.maxGrpDayRMetric1Ln_;
      maxGrpDayRMetric1Sh_ = other.maxGrpDayRMetric1Sh_;
      maxGrpDayRMetric1Abs_ = other.maxGrpDayRMetric1Abs_;
      grpDayRMetric1Ratio_ = other.grpDayRMetric1Ratio_;
      cpx1_ = other.cpx1_;
      csz1_ = other.csz1_;
      cex1_ = other.cex1_;
      cpx2_ = other.cpx2_;
      csz2_ = other.csz2_;
      cex2_ = other.cex2_;
      cMore_ = other.cMore_;
      numNewOrders_ = other.numNewOrders_;
      numParentLimits_ = other.numParentLimits_;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      numUpdates_ = other.numUpdates_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrMLegBrkrState Clone() {
      return new SpdrMLegBrkrState(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 1037;
    private string engineName_ = "";
    /// <summary>
    /// execution engine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 103;
    private long parentNumber_;
    /// <summary>
    /// SPDR parent number (most recent/currently active)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 106;
    private long baseParentNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "modify_number" field.</summary>
    public const int ModifyNumberFieldNumber = 1045;
    private long modifyNumber_;
    /// <summary>
    /// most recent parent number affecting this order (Modify)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ModifyNumber {
      get { return modifyNumber_; }
      set {
        modifyNumber_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 109;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 112;
    private long packageId_;
    /// <summary>
    /// groups related order/brokers together (eg. Legger w/MLeg Parent)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 118;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 121;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 124;
    private global::Spiderrock.Protobuf.SpdrStageType stageType_ = global::Spiderrock.Protobuf.SpdrStageType.Unspecified;
    /// <summary>
    /// parent is a staged order [ToolVisible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrStageType StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "start_type" field.</summary>
    public const int StartTypeFieldNumber = 1046;
    private global::Spiderrock.Protobuf.StartType startType_ = global::Spiderrock.Protobuf.StartType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StartType StartType {
      get { return startType_; }
      set {
        startType_ = value;
      }
    }

    /// <summary>Field number for the "is_flagged" field.</summary>
    public const int IsFlaggedFieldNumber = 127;
    private global::Spiderrock.Protobuf.YesNo isFlagged_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// broker state records is flagged for action (user alert only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsFlagged {
      get { return isFlagged_; }
      set {
        isFlagged_ = value;
      }
    }

    /// <summary>Field number for the "notice_number" field.</summary>
    public const int NoticeNumberFieldNumber = 130;
    private long noticeNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NoticeNumber {
      get { return noticeNumber_; }
      set {
        noticeNumber_ = value;
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 1039;
    private string execBrkrCode_ = "";
    /// <summary>
    /// execBrkrCode attached to parent order (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spread_class" field.</summary>
    public const int SpreadClassFieldNumber = 131;
    private global::Spiderrock.Protobuf.ToolSpreadClass spreadClass_ = global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ToolSpreadClass SpreadClass {
      get { return spreadClass_; }
      set {
        spreadClass_ = value;
      }
    }

    /// <summary>Field number for the "spread_flavor" field.</summary>
    public const int SpreadFlavorFieldNumber = 132;
    private global::Spiderrock.Protobuf.SpreadFlavor spreadFlavor_ = global::Spiderrock.Protobuf.SpreadFlavor.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadFlavor SpreadFlavor {
      get { return spreadFlavor_; }
      set {
        spreadFlavor_ = value;
      }
    }

    /// <summary>Field number for the "stock_side" field.</summary>
    public const int StockSideFieldNumber = 133;
    private global::Spiderrock.Protobuf.BuySell stockSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell StockSide {
      get { return stockSide_; }
      set {
        stockSide_ = value;
      }
    }

    /// <summary>Field number for the "ssale_flag" field.</summary>
    public const int SsaleFlagFieldNumber = 136;
    private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
      get { return ssaleFlag_; }
      set {
        ssaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "locate_quan" field.</summary>
    public const int LocateQuanFieldNumber = 139;
    private int locateQuan_;
    /// <summary>
    /// available locate quantity (if selling short) @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LocateQuan {
      get { return locateQuan_; }
      set {
        locateQuan_ = value;
      }
    }

    /// <summary>Field number for the "locate_firm" field.</summary>
    public const int LocateFirmFieldNumber = 142;
    private string locateFirm_ = "";
    /// <summary>
    /// firm granting the locate (also locate firm used on street FIX orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocateFirm {
      get { return locateFirm_; }
      set {
        locateFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locate_pool" field.</summary>
    public const int LocatePoolFieldNumber = 145;
    private string locatePool_ = "";
    /// <summary>
    /// locate pool @ firm granting the locate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocatePool {
      get { return locatePool_; }
      set {
        locatePool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stock_shares" field.</summary>
    public const int StockSharesFieldNumber = 148;
    private int stockShares_;
    /// <summary>
    /// number of shares included (zero if none)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StockShares {
      get { return stockShares_; }
      set {
        stockShares_ = value;
      }
    }

    /// <summary>Field number for the "stock_leg_id" field.</summary>
    public const int StockLegIdFieldNumber = 151;
    private long stockLegId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StockLegId {
      get { return stockLegId_; }
      set {
        stockLegId_ = value;
      }
    }

    /// <summary>Field number for the "stock_fill_quan" field.</summary>
    public const int StockFillQuanFieldNumber = 154;
    private int stockFillQuan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StockFillQuan {
      get { return stockFillQuan_; }
      set {
        stockFillQuan_ = value;
      }
    }

    /// <summary>Field number for the "stock_avg_fill_price" field.</summary>
    public const int StockAvgFillPriceFieldNumber = 157;
    private double stockAvgFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockAvgFillPrice {
      get { return stockAvgFillPrice_; }
      set {
        stockAvgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc" field.</summary>
    public const int RefUPrcFieldNumber = 160;
    private float refUPrc_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefUPrc {
      get { return refUPrc_; }
      set {
        refUPrc_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc" field.</summary>
    public const int LiveUPrcFieldNumber = 163;
    private float liveUPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LiveUPrc {
      get { return liveUPrc_; }
      set {
        liveUPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 166;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// underlier price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "stock_cpx" field.</summary>
    public const int StockCpxFieldNumber = 169;
    private float stockCpx_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StockCpx {
      get { return stockCpx_; }
      set {
        stockCpx_ = value;
      }
    }

    /// <summary>Field number for the "stock_csz" field.</summary>
    public const int StockCszFieldNumber = 172;
    private int stockCsz_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StockCsz {
      get { return stockCsz_; }
      set {
        stockCsz_ = value;
      }
    }

    /// <summary>Field number for the "stock_cex" field.</summary>
    public const int StockCexFieldNumber = 175;
    private uint stockCex_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StockCex {
      get { return stockCex_; }
      set {
        stockCex_ = value;
      }
    }

    /// <summary>Field number for the "num_legs" field.</summary>
    public const int NumLegsFieldNumber = 178;
    private int numLegs_;
    /// <summary>
    /// number of valid legs below
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumLegs {
      get { return numLegs_; }
      set {
        numLegs_ = value;
      }
    }

    /// <summary>Field number for the "sec_key1" field.</summary>
    public const int SecKey1FieldNumber = 181;
    private global::Spiderrock.Protobuf.OptionKey secKey1_;
    /// <summary>
    /// leg #1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey1 {
      get { return secKey1_; }
      set {
        secKey1_ = value;
      }
    }

    /// <summary>Field number for the "sec_type1" field.</summary>
    public const int SecType1FieldNumber = 184;
    private global::Spiderrock.Protobuf.SpdrKeyType secType1_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType1 {
      get { return secType1_; }
      set {
        secType1_ = value;
      }
    }

    /// <summary>Field number for the "ratio1" field.</summary>
    public const int Ratio1FieldNumber = 187;
    private uint ratio1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio1 {
      get { return ratio1_; }
      set {
        ratio1_ = value;
      }
    }

    /// <summary>Field number for the "side1" field.</summary>
    public const int Side1FieldNumber = 190;
    private global::Spiderrock.Protobuf.BuySell side1_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side1 {
      get { return side1_; }
      set {
        side1_ = value;
      }
    }

    /// <summary>Field number for the "position_type1" field.</summary>
    public const int PositionType1FieldNumber = 193;
    private global::Spiderrock.Protobuf.PositionType positionType1_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType1 {
      get { return positionType1_; }
      set {
        positionType1_ = value;
      }
    }

    /// <summary>Field number for the "leg_id1" field.</summary>
    public const int LegId1FieldNumber = 196;
    private long legId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId1 {
      get { return legId1_; }
      set {
        legId1_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan1" field.</summary>
    public const int FillQuan1FieldNumber = 199;
    private int fillQuan1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan1 {
      get { return fillQuan1_; }
      set {
        fillQuan1_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price1" field.</summary>
    public const int AvgFillPrice1FieldNumber = 202;
    private double avgFillPrice1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice1 {
      get { return avgFillPrice1_; }
      set {
        avgFillPrice1_ = value;
      }
    }

    /// <summary>Field number for the "vega1" field.</summary>
    public const int Vega1FieldNumber = 205;
    private float vega1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega1 {
      get { return vega1_; }
      set {
        vega1_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc1" field.</summary>
    public const int RefUPrc1FieldNumber = 208;
    private double refUPrc1_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc1 {
      get { return refUPrc1_; }
      set {
        refUPrc1_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta1" field.</summary>
    public const int RefDelta1FieldNumber = 211;
    private float refDelta1_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta1 {
      get { return refDelta1_; }
      set {
        refDelta1_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt1" field.</summary>
    public const int RefEarnCnt1FieldNumber = 214;
    private int refEarnCnt1_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt1 {
      get { return refEarnCnt1_; }
      set {
        refEarnCnt1_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc1" field.</summary>
    public const int LiveUPrc1FieldNumber = 217;
    private double liveUPrc1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc1 {
      get { return liveUPrc1_; }
      set {
        liveUPrc1_ = value;
      }
    }

    /// <summary>Field number for the "price_format1" field.</summary>
    public const int PriceFormat1FieldNumber = 220;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat1_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat1 {
      get { return priceFormat1_; }
      set {
        priceFormat1_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx1" field.</summary>
    public const int LegCpx1FieldNumber = 223;
    private float legCpx1_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx1 {
      get { return legCpx1_; }
      set {
        legCpx1_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz1" field.</summary>
    public const int LegCsz1FieldNumber = 226;
    private int legCsz1_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz1 {
      get { return legCsz1_; }
      set {
        legCsz1_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex1" field.</summary>
    public const int LegCex1FieldNumber = 229;
    private uint legCex1_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex1 {
      get { return legCex1_; }
      set {
        legCex1_ = value;
      }
    }

    /// <summary>Field number for the "sec_key2" field.</summary>
    public const int SecKey2FieldNumber = 232;
    private global::Spiderrock.Protobuf.OptionKey secKey2_;
    /// <summary>
    /// leg #2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey2 {
      get { return secKey2_; }
      set {
        secKey2_ = value;
      }
    }

    /// <summary>Field number for the "sec_type2" field.</summary>
    public const int SecType2FieldNumber = 235;
    private global::Spiderrock.Protobuf.SpdrKeyType secType2_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType2 {
      get { return secType2_; }
      set {
        secType2_ = value;
      }
    }

    /// <summary>Field number for the "ratio2" field.</summary>
    public const int Ratio2FieldNumber = 238;
    private uint ratio2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio2 {
      get { return ratio2_; }
      set {
        ratio2_ = value;
      }
    }

    /// <summary>Field number for the "side2" field.</summary>
    public const int Side2FieldNumber = 241;
    private global::Spiderrock.Protobuf.BuySell side2_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side2 {
      get { return side2_; }
      set {
        side2_ = value;
      }
    }

    /// <summary>Field number for the "position_type2" field.</summary>
    public const int PositionType2FieldNumber = 244;
    private global::Spiderrock.Protobuf.PositionType positionType2_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType2 {
      get { return positionType2_; }
      set {
        positionType2_ = value;
      }
    }

    /// <summary>Field number for the "leg_id2" field.</summary>
    public const int LegId2FieldNumber = 247;
    private long legId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId2 {
      get { return legId2_; }
      set {
        legId2_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan2" field.</summary>
    public const int FillQuan2FieldNumber = 250;
    private int fillQuan2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan2 {
      get { return fillQuan2_; }
      set {
        fillQuan2_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price2" field.</summary>
    public const int AvgFillPrice2FieldNumber = 253;
    private double avgFillPrice2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice2 {
      get { return avgFillPrice2_; }
      set {
        avgFillPrice2_ = value;
      }
    }

    /// <summary>Field number for the "vega2" field.</summary>
    public const int Vega2FieldNumber = 256;
    private float vega2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega2 {
      get { return vega2_; }
      set {
        vega2_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc2" field.</summary>
    public const int RefUPrc2FieldNumber = 259;
    private double refUPrc2_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc2 {
      get { return refUPrc2_; }
      set {
        refUPrc2_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta2" field.</summary>
    public const int RefDelta2FieldNumber = 262;
    private float refDelta2_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta2 {
      get { return refDelta2_; }
      set {
        refDelta2_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt2" field.</summary>
    public const int RefEarnCnt2FieldNumber = 265;
    private int refEarnCnt2_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt2 {
      get { return refEarnCnt2_; }
      set {
        refEarnCnt2_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc2" field.</summary>
    public const int LiveUPrc2FieldNumber = 268;
    private double liveUPrc2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc2 {
      get { return liveUPrc2_; }
      set {
        liveUPrc2_ = value;
      }
    }

    /// <summary>Field number for the "price_format2" field.</summary>
    public const int PriceFormat2FieldNumber = 271;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat2_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat2 {
      get { return priceFormat2_; }
      set {
        priceFormat2_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx2" field.</summary>
    public const int LegCpx2FieldNumber = 274;
    private float legCpx2_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx2 {
      get { return legCpx2_; }
      set {
        legCpx2_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz2" field.</summary>
    public const int LegCsz2FieldNumber = 277;
    private int legCsz2_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz2 {
      get { return legCsz2_; }
      set {
        legCsz2_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex2" field.</summary>
    public const int LegCex2FieldNumber = 280;
    private uint legCex2_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex2 {
      get { return legCex2_; }
      set {
        legCex2_ = value;
      }
    }

    /// <summary>Field number for the "sec_key3" field.</summary>
    public const int SecKey3FieldNumber = 283;
    private global::Spiderrock.Protobuf.OptionKey secKey3_;
    /// <summary>
    /// leg #3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey3 {
      get { return secKey3_; }
      set {
        secKey3_ = value;
      }
    }

    /// <summary>Field number for the "sec_type3" field.</summary>
    public const int SecType3FieldNumber = 286;
    private global::Spiderrock.Protobuf.SpdrKeyType secType3_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType3 {
      get { return secType3_; }
      set {
        secType3_ = value;
      }
    }

    /// <summary>Field number for the "ratio3" field.</summary>
    public const int Ratio3FieldNumber = 289;
    private uint ratio3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio3 {
      get { return ratio3_; }
      set {
        ratio3_ = value;
      }
    }

    /// <summary>Field number for the "side3" field.</summary>
    public const int Side3FieldNumber = 292;
    private global::Spiderrock.Protobuf.BuySell side3_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side3 {
      get { return side3_; }
      set {
        side3_ = value;
      }
    }

    /// <summary>Field number for the "position_type3" field.</summary>
    public const int PositionType3FieldNumber = 295;
    private global::Spiderrock.Protobuf.PositionType positionType3_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType3 {
      get { return positionType3_; }
      set {
        positionType3_ = value;
      }
    }

    /// <summary>Field number for the "leg_id3" field.</summary>
    public const int LegId3FieldNumber = 298;
    private long legId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId3 {
      get { return legId3_; }
      set {
        legId3_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan3" field.</summary>
    public const int FillQuan3FieldNumber = 301;
    private int fillQuan3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan3 {
      get { return fillQuan3_; }
      set {
        fillQuan3_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price3" field.</summary>
    public const int AvgFillPrice3FieldNumber = 304;
    private double avgFillPrice3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice3 {
      get { return avgFillPrice3_; }
      set {
        avgFillPrice3_ = value;
      }
    }

    /// <summary>Field number for the "vega3" field.</summary>
    public const int Vega3FieldNumber = 307;
    private float vega3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega3 {
      get { return vega3_; }
      set {
        vega3_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc3" field.</summary>
    public const int RefUPrc3FieldNumber = 310;
    private double refUPrc3_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc3 {
      get { return refUPrc3_; }
      set {
        refUPrc3_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta3" field.</summary>
    public const int RefDelta3FieldNumber = 313;
    private float refDelta3_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta3 {
      get { return refDelta3_; }
      set {
        refDelta3_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt3" field.</summary>
    public const int RefEarnCnt3FieldNumber = 316;
    private int refEarnCnt3_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt3 {
      get { return refEarnCnt3_; }
      set {
        refEarnCnt3_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc3" field.</summary>
    public const int LiveUPrc3FieldNumber = 319;
    private double liveUPrc3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc3 {
      get { return liveUPrc3_; }
      set {
        liveUPrc3_ = value;
      }
    }

    /// <summary>Field number for the "price_format3" field.</summary>
    public const int PriceFormat3FieldNumber = 322;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat3_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat3 {
      get { return priceFormat3_; }
      set {
        priceFormat3_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx3" field.</summary>
    public const int LegCpx3FieldNumber = 325;
    private float legCpx3_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx3 {
      get { return legCpx3_; }
      set {
        legCpx3_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz3" field.</summary>
    public const int LegCsz3FieldNumber = 328;
    private int legCsz3_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz3 {
      get { return legCsz3_; }
      set {
        legCsz3_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex3" field.</summary>
    public const int LegCex3FieldNumber = 331;
    private uint legCex3_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex3 {
      get { return legCex3_; }
      set {
        legCex3_ = value;
      }
    }

    /// <summary>Field number for the "sec_key4" field.</summary>
    public const int SecKey4FieldNumber = 334;
    private global::Spiderrock.Protobuf.OptionKey secKey4_;
    /// <summary>
    /// leg #4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey4 {
      get { return secKey4_; }
      set {
        secKey4_ = value;
      }
    }

    /// <summary>Field number for the "sec_type4" field.</summary>
    public const int SecType4FieldNumber = 337;
    private global::Spiderrock.Protobuf.SpdrKeyType secType4_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType4 {
      get { return secType4_; }
      set {
        secType4_ = value;
      }
    }

    /// <summary>Field number for the "ratio4" field.</summary>
    public const int Ratio4FieldNumber = 340;
    private uint ratio4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio4 {
      get { return ratio4_; }
      set {
        ratio4_ = value;
      }
    }

    /// <summary>Field number for the "side4" field.</summary>
    public const int Side4FieldNumber = 343;
    private global::Spiderrock.Protobuf.BuySell side4_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side4 {
      get { return side4_; }
      set {
        side4_ = value;
      }
    }

    /// <summary>Field number for the "position_type4" field.</summary>
    public const int PositionType4FieldNumber = 346;
    private global::Spiderrock.Protobuf.PositionType positionType4_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType4 {
      get { return positionType4_; }
      set {
        positionType4_ = value;
      }
    }

    /// <summary>Field number for the "leg_id4" field.</summary>
    public const int LegId4FieldNumber = 349;
    private long legId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId4 {
      get { return legId4_; }
      set {
        legId4_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan4" field.</summary>
    public const int FillQuan4FieldNumber = 352;
    private int fillQuan4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan4 {
      get { return fillQuan4_; }
      set {
        fillQuan4_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price4" field.</summary>
    public const int AvgFillPrice4FieldNumber = 355;
    private double avgFillPrice4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice4 {
      get { return avgFillPrice4_; }
      set {
        avgFillPrice4_ = value;
      }
    }

    /// <summary>Field number for the "vega4" field.</summary>
    public const int Vega4FieldNumber = 358;
    private float vega4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega4 {
      get { return vega4_; }
      set {
        vega4_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc4" field.</summary>
    public const int RefUPrc4FieldNumber = 361;
    private double refUPrc4_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc4 {
      get { return refUPrc4_; }
      set {
        refUPrc4_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta4" field.</summary>
    public const int RefDelta4FieldNumber = 364;
    private float refDelta4_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta4 {
      get { return refDelta4_; }
      set {
        refDelta4_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt4" field.</summary>
    public const int RefEarnCnt4FieldNumber = 367;
    private int refEarnCnt4_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt4 {
      get { return refEarnCnt4_; }
      set {
        refEarnCnt4_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc4" field.</summary>
    public const int LiveUPrc4FieldNumber = 370;
    private double liveUPrc4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc4 {
      get { return liveUPrc4_; }
      set {
        liveUPrc4_ = value;
      }
    }

    /// <summary>Field number for the "price_format4" field.</summary>
    public const int PriceFormat4FieldNumber = 373;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat4_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat4 {
      get { return priceFormat4_; }
      set {
        priceFormat4_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx4" field.</summary>
    public const int LegCpx4FieldNumber = 376;
    private float legCpx4_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx4 {
      get { return legCpx4_; }
      set {
        legCpx4_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz4" field.</summary>
    public const int LegCsz4FieldNumber = 379;
    private int legCsz4_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz4 {
      get { return legCsz4_; }
      set {
        legCsz4_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex4" field.</summary>
    public const int LegCex4FieldNumber = 382;
    private uint legCex4_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex4 {
      get { return legCex4_; }
      set {
        legCex4_ = value;
      }
    }

    /// <summary>Field number for the "sec_key5" field.</summary>
    public const int SecKey5FieldNumber = 385;
    private global::Spiderrock.Protobuf.OptionKey secKey5_;
    /// <summary>
    /// leg #5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey5 {
      get { return secKey5_; }
      set {
        secKey5_ = value;
      }
    }

    /// <summary>Field number for the "sec_type5" field.</summary>
    public const int SecType5FieldNumber = 388;
    private global::Spiderrock.Protobuf.SpdrKeyType secType5_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType5 {
      get { return secType5_; }
      set {
        secType5_ = value;
      }
    }

    /// <summary>Field number for the "ratio5" field.</summary>
    public const int Ratio5FieldNumber = 391;
    private uint ratio5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio5 {
      get { return ratio5_; }
      set {
        ratio5_ = value;
      }
    }

    /// <summary>Field number for the "side5" field.</summary>
    public const int Side5FieldNumber = 394;
    private global::Spiderrock.Protobuf.BuySell side5_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side5 {
      get { return side5_; }
      set {
        side5_ = value;
      }
    }

    /// <summary>Field number for the "position_type5" field.</summary>
    public const int PositionType5FieldNumber = 397;
    private global::Spiderrock.Protobuf.PositionType positionType5_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType5 {
      get { return positionType5_; }
      set {
        positionType5_ = value;
      }
    }

    /// <summary>Field number for the "leg_id5" field.</summary>
    public const int LegId5FieldNumber = 400;
    private long legId5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId5 {
      get { return legId5_; }
      set {
        legId5_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan5" field.</summary>
    public const int FillQuan5FieldNumber = 403;
    private int fillQuan5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan5 {
      get { return fillQuan5_; }
      set {
        fillQuan5_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price5" field.</summary>
    public const int AvgFillPrice5FieldNumber = 406;
    private double avgFillPrice5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice5 {
      get { return avgFillPrice5_; }
      set {
        avgFillPrice5_ = value;
      }
    }

    /// <summary>Field number for the "vega5" field.</summary>
    public const int Vega5FieldNumber = 409;
    private float vega5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega5 {
      get { return vega5_; }
      set {
        vega5_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc5" field.</summary>
    public const int RefUPrc5FieldNumber = 412;
    private double refUPrc5_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc5 {
      get { return refUPrc5_; }
      set {
        refUPrc5_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta5" field.</summary>
    public const int RefDelta5FieldNumber = 415;
    private float refDelta5_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta5 {
      get { return refDelta5_; }
      set {
        refDelta5_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt5" field.</summary>
    public const int RefEarnCnt5FieldNumber = 418;
    private int refEarnCnt5_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt5 {
      get { return refEarnCnt5_; }
      set {
        refEarnCnt5_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc5" field.</summary>
    public const int LiveUPrc5FieldNumber = 421;
    private double liveUPrc5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc5 {
      get { return liveUPrc5_; }
      set {
        liveUPrc5_ = value;
      }
    }

    /// <summary>Field number for the "price_format5" field.</summary>
    public const int PriceFormat5FieldNumber = 424;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat5_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat5 {
      get { return priceFormat5_; }
      set {
        priceFormat5_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx5" field.</summary>
    public const int LegCpx5FieldNumber = 427;
    private float legCpx5_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx5 {
      get { return legCpx5_; }
      set {
        legCpx5_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz5" field.</summary>
    public const int LegCsz5FieldNumber = 430;
    private int legCsz5_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz5 {
      get { return legCsz5_; }
      set {
        legCsz5_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex5" field.</summary>
    public const int LegCex5FieldNumber = 433;
    private uint legCex5_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex5 {
      get { return legCex5_; }
      set {
        legCex5_ = value;
      }
    }

    /// <summary>Field number for the "sec_key6" field.</summary>
    public const int SecKey6FieldNumber = 436;
    private global::Spiderrock.Protobuf.OptionKey secKey6_;
    /// <summary>
    /// leg #6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey6 {
      get { return secKey6_; }
      set {
        secKey6_ = value;
      }
    }

    /// <summary>Field number for the "sec_type6" field.</summary>
    public const int SecType6FieldNumber = 439;
    private global::Spiderrock.Protobuf.SpdrKeyType secType6_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType6 {
      get { return secType6_; }
      set {
        secType6_ = value;
      }
    }

    /// <summary>Field number for the "ratio6" field.</summary>
    public const int Ratio6FieldNumber = 442;
    private uint ratio6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ratio6 {
      get { return ratio6_; }
      set {
        ratio6_ = value;
      }
    }

    /// <summary>Field number for the "side6" field.</summary>
    public const int Side6FieldNumber = 445;
    private global::Spiderrock.Protobuf.BuySell side6_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side6 {
      get { return side6_; }
      set {
        side6_ = value;
      }
    }

    /// <summary>Field number for the "position_type6" field.</summary>
    public const int PositionType6FieldNumber = 448;
    private global::Spiderrock.Protobuf.PositionType positionType6_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType6 {
      get { return positionType6_; }
      set {
        positionType6_ = value;
      }
    }

    /// <summary>Field number for the "leg_id6" field.</summary>
    public const int LegId6FieldNumber = 451;
    private long legId6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegId6 {
      get { return legId6_; }
      set {
        legId6_ = value;
      }
    }

    /// <summary>Field number for the "fill_quan6" field.</summary>
    public const int FillQuan6FieldNumber = 454;
    private int fillQuan6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuan6 {
      get { return fillQuan6_; }
      set {
        fillQuan6_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price6" field.</summary>
    public const int AvgFillPrice6FieldNumber = 457;
    private double avgFillPrice6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice6 {
      get { return avgFillPrice6_; }
      set {
        avgFillPrice6_ = value;
      }
    }

    /// <summary>Field number for the "vega6" field.</summary>
    public const int Vega6FieldNumber = 460;
    private float vega6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega6 {
      get { return vega6_; }
      set {
        vega6_ = value;
      }
    }

    /// <summary>Field number for the "ref_uPrc6" field.</summary>
    public const int RefUPrc6FieldNumber = 463;
    private double refUPrc6_;
    /// <summary>
    /// reference underlier price (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefUPrc6 {
      get { return refUPrc6_; }
      set {
        refUPrc6_ = value;
      }
    }

    /// <summary>Field number for the "ref_delta6" field.</summary>
    public const int RefDelta6FieldNumber = 466;
    private float refDelta6_;
    /// <summary>
    /// reference delta (for PrcDe order handling)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefDelta6 {
      get { return refDelta6_; }
      set {
        refDelta6_ = value;
      }
    }

    /// <summary>Field number for the "ref_earn_cnt6" field.</summary>
    public const int RefEarnCnt6FieldNumber = 469;
    private int refEarnCnt6_;
    /// <summary>
    /// reference # of earnings moves before expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefEarnCnt6 {
      get { return refEarnCnt6_; }
      set {
        refEarnCnt6_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc6" field.</summary>
    public const int LiveUPrc6FieldNumber = 472;
    private double liveUPrc6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc6 {
      get { return liveUPrc6_; }
      set {
        liveUPrc6_ = value;
      }
    }

    /// <summary>Field number for the "price_format6" field.</summary>
    public const int PriceFormat6FieldNumber = 475;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat6_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat6 {
      get { return priceFormat6_; }
      set {
        priceFormat6_ = value;
      }
    }

    /// <summary>Field number for the "leg_cpx6" field.</summary>
    public const int LegCpx6FieldNumber = 478;
    private float legCpx6_;
    /// <summary>
    /// [child] best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LegCpx6 {
      get { return legCpx6_; }
      set {
        legCpx6_ = value;
      }
    }

    /// <summary>Field number for the "leg_csz6" field.</summary>
    public const int LegCsz6FieldNumber = 481;
    private int legCsz6_;
    /// <summary>
    /// [child] cumulative share represented at best price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LegCsz6 {
      get { return legCsz6_; }
      set {
        legCsz6_ = value;
      }
    }

    /// <summary>Field number for the "leg_cex6" field.</summary>
    public const int LegCex6FieldNumber = 484;
    private uint legCex6_;
    /// <summary>
    /// [child] bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LegCex6 {
      get { return legCex6_; }
      set {
        legCex6_ = value;
      }
    }

    /// <summary>Field number for the "mleg_vega" field.</summary>
    public const int MlegVegaFieldNumber = 487;
    private float mlegVega_;
    /// <summary>
    /// net vega per spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegVega {
      get { return mlegVega_; }
      set {
        mlegVega_ = value;
      }
    }

    /// <summary>Field number for the "mleg_wt_vega" field.</summary>
    public const int MlegWtVegaFieldNumber = 490;
    private float mlegWtVega_;
    /// <summary>
    /// net wt vega per spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegWtVega {
      get { return mlegWtVega_; }
      set {
        mlegWtVega_ = value;
      }
    }

    /// <summary>Field number for the "mleg_delta" field.</summary>
    public const int MlegDeltaFieldNumber = 493;
    private float mlegDelta_;
    /// <summary>
    /// net delta per spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegDelta {
      get { return mlegDelta_; }
      set {
        mlegDelta_ = value;
      }
    }

    /// <summary>Field number for the "mleg_gamma" field.</summary>
    public const int MlegGammaFieldNumber = 496;
    private float mlegGamma_;
    /// <summary>
    /// net gamma per spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegGamma {
      get { return mlegGamma_; }
      set {
        mlegGamma_ = value;
      }
    }

    /// <summary>Field number for the "mleg_theta" field.</summary>
    public const int MlegThetaFieldNumber = 499;
    private float mlegTheta_;
    /// <summary>
    /// net theta per spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegTheta {
      get { return mlegTheta_; }
      set {
        mlegTheta_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 502;
    private string description_ = "";
    /// <summary>
    /// user defined
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_size" field.</summary>
    public const int OrderSizeFieldNumber = 505;
    private int orderSize_;
    /// <summary>
    /// order size of most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderSize {
      get { return orderSize_; }
      set {
        orderSize_ = value;
      }
    }

    /// <summary>Field number for the "order_active_size" field.</summary>
    public const int OrderActiveSizeFieldNumber = 508;
    private int orderActiveSize_;
    /// <summary>
    /// total activated size (total size released for execution) (-2 = all available size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderActiveSize {
      get { return orderActiveSize_; }
      set {
        orderActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "leaves_quantity" field.</summary>
    public const int LeavesQuantityFieldNumber = 511;
    private int leavesQuantity_;
    /// <summary>
    /// current child order leaves quantity (quantity actively working in the market;all child orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeavesQuantity {
      get { return leavesQuantity_; }
      set {
        leavesQuantity_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 514;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 517;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_reject_reason" field.</summary>
    public const int SpdrRejectReasonFieldNumber = 520;
    private global::Spiderrock.Protobuf.SpdrRejectReason spdrRejectReason_ = global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRejectReason SpdrRejectReason {
      get { return spdrRejectReason_; }
      set {
        spdrRejectReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_detail_txt" field.</summary>
    public const int SpdrCloseDetailTxtFieldNumber = 523;
    private string spdrCloseDetailTxt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrCloseDetailTxt {
      get { return spdrCloseDetailTxt_; }
      set {
        spdrCloseDetailTxt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_legs" field.</summary>
    public const int OpenLegsFieldNumber = 526;
    private int openLegs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenLegs {
      get { return openLegs_; }
      set {
        openLegs_ = value;
      }
    }

    /// <summary>Field number for the "cum_square_qty" field.</summary>
    public const int CumSquareQtyFieldNumber = 529;
    private int cumSquareQty_;
    /// <summary>
    /// cumulative spread quantity filled (all legs received)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumSquareQty {
      get { return cumSquareQty_; }
      set {
        cumSquareQty_ = value;
      }
    }

    /// <summary>Field number for the "avg_square_prc" field.</summary>
    public const int AvgSquarePrcFieldNumber = 532;
    private double avgSquarePrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgSquarePrc {
      get { return avgSquarePrc_; }
      set {
        avgSquarePrc_ = value;
      }
    }

    /// <summary>Field number for the "cum_partial_qty" field.</summary>
    public const int CumPartialQtyFieldNumber = 535;
    private int cumPartialQty_;
    /// <summary>
    /// cumulative spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumPartialQty {
      get { return cumPartialQty_; }
      set {
        cumPartialQty_ = value;
      }
    }

    /// <summary>Field number for the "fill_vega" field.</summary>
    public const int FillVegaFieldNumber = 538;
    private float fillVega_;
    /// <summary>
    /// net vega filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVega {
      get { return fillVega_; }
      set {
        fillVega_ = value;
      }
    }

    /// <summary>Field number for the "fill_wt_vega" field.</summary>
    public const int FillWtVegaFieldNumber = 541;
    private float fillWtVega_;
    /// <summary>
    /// net wt vega filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillWtVega {
      get { return fillWtVega_; }
      set {
        fillWtVega_ = value;
      }
    }

    /// <summary>Field number for the "fill_delta" field.</summary>
    public const int FillDeltaFieldNumber = 544;
    private float fillDelta_;
    /// <summary>
    /// net delta filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDelta {
      get { return fillDelta_; }
      set {
        fillDelta_ = value;
      }
    }

    /// <summary>Field number for the "fill_dDelta" field.</summary>
    public const int FillDDeltaFieldNumber = 547;
    private float fillDDelta_;
    /// <summary>
    /// net $delta filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDDelta {
      get { return fillDDelta_; }
      set {
        fillDDelta_ = value;
      }
    }

    /// <summary>Field number for the "fill_gamma" field.</summary>
    public const int FillGammaFieldNumber = 550;
    private float fillGamma_;
    /// <summary>
    /// net gamma filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillGamma {
      get { return fillGamma_; }
      set {
        fillGamma_ = value;
      }
    }

    /// <summary>Field number for the "fill_theta" field.</summary>
    public const int FillThetaFieldNumber = 553;
    private float fillTheta_;
    /// <summary>
    /// net theta filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTheta {
      get { return fillTheta_; }
      set {
        fillTheta_ = value;
      }
    }

    /// <summary>Field number for the "last_fill_dttm" field.</summary>
    public const int LastFillDttmFieldNumber = 556;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastFillDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastFillDttm {
      get { return lastFillDttm_; }
      set {
        lastFillDttm_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_size" field.</summary>
    public const int RiskLimitSizeFieldNumber = 559;
    private int riskLimitSize_;
    /// <summary>
    /// risk limit size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RiskLimitSize {
      get { return riskLimitSize_; }
      set {
        riskLimitSize_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_desc" field.</summary>
    public const int RiskLimitDescFieldNumber = 562;
    private global::Spiderrock.Protobuf.SpdrRisk riskLimitDesc_ = global::Spiderrock.Protobuf.SpdrRisk.Unspecified;
    /// <summary>
    /// reason for size reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRisk RiskLimitDesc {
      get { return riskLimitDesc_; }
      set {
        riskLimitDesc_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_level" field.</summary>
    public const int RiskLimitLevelFieldNumber = 1040;
    private global::Spiderrock.Protobuf.SpdrRiskLevel riskLimitLevel_ = global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified;
    /// <summary>
    /// risk limit level responsible for reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskLevel RiskLimitLevel {
      get { return riskLimitLevel_; }
      set {
        riskLimitLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_progress" field.</summary>
    public const int MaxProgressFieldNumber = 565;
    private global::Spiderrock.Protobuf.MaxProgress maxProgress_ = global::Spiderrock.Protobuf.MaxProgress.Unspecified;
    /// <summary>
    /// maximum point of progress for most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MaxProgress MaxProgress {
      get { return maxProgress_; }
      set {
        maxProgress_ = value;
      }
    }

    /// <summary>Field number for the "max_progress_detail" field.</summary>
    public const int MaxProgressDetailFieldNumber = 568;
    private string maxProgressDetail_ = "";
    /// <summary>
    /// additional detail on point of maximum progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaxProgressDetail {
      get { return maxProgressDetail_; }
      set {
        maxProgressDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_progress_time" field.</summary>
    public const int MaxProgressTimeFieldNumber = 571;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxProgressTime_;
    /// <summary>
    /// time of last max progress advance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxProgressTime {
      get { return maxProgressTime_; }
      set {
        maxProgressTime_ = value;
      }
    }

    /// <summary>Field number for the "algo_state" field.</summary>
    public const int AlgoStateFieldNumber = 574;
    private global::Spiderrock.Protobuf.AlgoState algoState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of order handler (maker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState AlgoState {
      get { return algoState_; }
      set {
        algoState_ = value;
      }
    }

    /// <summary>Field number for the "algo_counter" field.</summary>
    public const int AlgoCounterFieldNumber = 577;
    private int algoCounter_;
    /// <summary>
    /// number of times order checked by algo handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AlgoCounter {
      get { return algoCounter_; }
      set {
        algoCounter_ = value;
      }
    }

    /// <summary>Field number for the "make_state" field.</summary>
    public const int MakeStateFieldNumber = 580;
    private global::Spiderrock.Protobuf.AlgoState makeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of make handler (maker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState MakeState {
      get { return makeState_; }
      set {
        makeState_ = value;
      }
    }

    /// <summary>Field number for the "make_counter" field.</summary>
    public const int MakeCounterFieldNumber = 583;
    private int makeCounter_;
    /// <summary>
    /// number of times order checked by make algo handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MakeCounter {
      get { return makeCounter_; }
      set {
        makeCounter_ = value;
      }
    }

    /// <summary>Field number for the "mkt_resp_state" field.</summary>
    public const int MktRespStateFieldNumber = 586;
    private global::Spiderrock.Protobuf.MktRespState mktRespState_ = global::Spiderrock.Protobuf.MktRespState.Unspecified;
    /// <summary>
    /// [enum] current state of response handler (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktRespState MktRespState {
      get { return mktRespState_; }
      set {
        mktRespState_ = value;
      }
    }

    /// <summary>Field number for the "mkt_resp_counter" field.</summary>
    public const int MktRespCounterFieldNumber = 589;
    private int mktRespCounter_;
    /// <summary>
    /// number of times order checked by market response handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MktRespCounter {
      get { return mktRespCounter_; }
      set {
        mktRespCounter_ = value;
      }
    }

    /// <summary>Field number for the "broker_state" field.</summary>
    public const int BrokerStateFieldNumber = 592;
    private global::Spiderrock.Protobuf.BrokerState brokerState_ = global::Spiderrock.Protobuf.BrokerState.Unspecified;
    /// <summary>
    /// broker monitor state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BrokerState BrokerState {
      get { return brokerState_; }
      set {
        brokerState_ = value;
      }
    }

    /// <summary>Field number for the "broker_counter" field.</summary>
    public const int BrokerCounterFieldNumber = 595;
    private int brokerCounter_;
    /// <summary>
    /// number of times order checked by broker monitor (note: most checks result in no action)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BrokerCounter {
      get { return brokerCounter_; }
      set {
        brokerCounter_ = value;
      }
    }

    /// <summary>Field number for the "spdr_mkt_state" field.</summary>
    public const int SpdrMktStateFieldNumber = 598;
    private global::Spiderrock.Protobuf.SpdrMarketState spdrMktState_ = global::Spiderrock.Protobuf.SpdrMarketState.Unspecified;
    /// <summary>
    /// [enum] market state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMarketState SpdrMktState {
      get { return spdrMktState_; }
      set {
        spdrMktState_ = value;
      }
    }

    /// <summary>Field number for the "spdr_broker_status" field.</summary>
    public const int SpdrBrokerStatusFieldNumber = 601;
    private global::Spiderrock.Protobuf.SpdrBrokerStatus spdrBrokerStatus_ = global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrBrokerStatus SpdrBrokerStatus {
      get { return spdrBrokerStatus_; }
      set {
        spdrBrokerStatus_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule_detail" field.</summary>
    public const int ProgressRuleDetailFieldNumber = 604;
    private string progressRuleDetail_ = "";
    /// <summary>
    /// Twap/Vwap progress detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProgressRuleDetail {
      get { return progressRuleDetail_; }
      set {
        progressRuleDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_child_reject_dttm" field.</summary>
    public const int LastChildRejectDttmFieldNumber = 607;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastChildRejectDttm_;
    /// <summary>
    /// last child order reject dttm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastChildRejectDttm {
      get { return lastChildRejectDttm_; }
      set {
        lastChildRejectDttm_ = value;
      }
    }

    /// <summary>Field number for the "last_child_reject_text" field.</summary>
    public const int LastChildRejectTextFieldNumber = 610;
    private string lastChildRejectText_ = "";
    /// <summary>
    /// last child order reject reason/text (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastChildRejectText {
      get { return lastChildRejectText_; }
      set {
        lastChildRejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 613;
    private long riskGroupId_;
    /// <summary>
    /// autohedge risk group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_group_id" field.</summary>
    public const int TriggerGroupIdFieldNumber = 616;
    private long triggerGroupId_;
    /// <summary>
    /// WaitTrigger group Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerGroupId {
      get { return triggerGroupId_; }
      set {
        triggerGroupId_ = value;
      }
    }

    /// <summary>Field number for the "hedge_grouping_code" field.</summary>
    public const int HedgeGroupingCodeFieldNumber = 619;
    private long hedgeGroupingCode_;
    /// <summary>
    /// autohedge risk group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HedgeGroupingCode {
      get { return hedgeGroupingCode_; }
      set {
        hedgeGroupingCode_ = value;
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 622;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_instrument" field.</summary>
    public const int HedgeInstrumentFieldNumber = 625;
    private global::Spiderrock.Protobuf.HedgeInst hedgeInstrument_ = global::Spiderrock.Protobuf.HedgeInst.Unspecified;
    /// <summary>
    /// auto-hedge instrument (from parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeInst HedgeInstrument {
      get { return hedgeInstrument_; }
      set {
        hedgeInstrument_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 628;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// auto-hedge sec key (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_type" field.</summary>
    public const int HedgeSecTypeFieldNumber = 631;
    private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// auto-hedge sec type (Stock or Future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
      get { return hedgeSecType_; }
      set {
        hedgeSecType_ = value;
      }
    }

    /// <summary>Field number for the "hedge_beta_ratio" field.</summary>
    public const int HedgeBetaRatioFieldNumber = 634;
    private float hedgeBetaRatio_;
    /// <summary>
    /// auto-hedge ratio [from parent order (if supplied) or computed by SR]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeBetaRatio {
      get { return hedgeBetaRatio_; }
      set {
        hedgeBetaRatio_ = value;
      }
    }

    /// <summary>Field number for the "hedge_scope" field.</summary>
    public const int HedgeScopeFieldNumber = 637;
    private global::Spiderrock.Protobuf.HedgeScope hedgeScope_ = global::Spiderrock.Protobuf.HedgeScope.Unspecified;
    /// <summary>
    /// hedge group scope [RiskGroup or Accnt]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeScope HedgeScope {
      get { return hedgeScope_; }
      set {
        hedgeScope_ = value;
      }
    }

    /// <summary>Field number for the "extern_hedge_ex_dest" field.</summary>
    public const int ExternHedgeExDestFieldNumber = 640;
    private string externHedgeExDest_ = "";
    /// <summary>
    /// external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeExDest {
      get { return externHedgeExDest_; }
      set {
        externHedgeExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_hedge_params" field.</summary>
    public const int ExternHedgeParamsFieldNumber = 643;
    private string externHedgeParams_ = "";
    /// <summary>
    /// external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeParams {
      get { return externHedgeParams_; }
      set {
        externHedgeParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "best_way_prc" field.</summary>
    public const int BestWayPrcFieldNumber = 646;
    private float bestWayPrc_;
    /// <summary>
    /// current leg market nbbo (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BestWayPrc {
      get { return bestWayPrc_; }
      set {
        bestWayPrc_ = value;
      }
    }

    /// <summary>Field number for the "wrst_way_prc" field.</summary>
    public const int WrstWayPrcFieldNumber = 649;
    private float wrstWayPrc_;
    /// <summary>
    /// current leg market nbbo ask (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WrstWayPrc {
      get { return wrstWayPrc_; }
      set {
        wrstWayPrc_ = value;
      }
    }

    /// <summary>Field number for the "best_way_sz" field.</summary>
    public const int BestWaySzFieldNumber = 652;
    private int bestWaySz_;
    /// <summary>
    /// current leg market nbbo cum bid size (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BestWaySz {
      get { return bestWaySz_; }
      set {
        bestWaySz_ = value;
      }
    }

    /// <summary>Field number for the "wrst_way_sz" field.</summary>
    public const int WrstWaySzFieldNumber = 655;
    private int wrstWaySz_;
    /// <summary>
    /// current leg market nbbo cum ask size (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WrstWaySz {
      get { return wrstWaySz_; }
      set {
        wrstWaySz_ = value;
      }
    }

    /// <summary>Field number for the "surface_prc" field.</summary>
    public const int SurfacePrcFieldNumber = 658;
    private float surfacePrc_;
    /// <summary>
    /// SR spread surface price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfacePrc {
      get { return surfacePrc_; }
      set {
        surfacePrc_ = value;
      }
    }

    /// <summary>Field number for the "surface_vol" field.</summary>
    public const int SurfaceVolFieldNumber = 661;
    private float surfaceVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceVol {
      get { return surfaceVol_; }
      set {
        surfaceVol_ = value;
      }
    }

    /// <summary>Field number for the "surface_uPrc" field.</summary>
    public const int SurfaceUPrcFieldNumber = 664;
    private float surfaceUPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceUPrc {
      get { return surfaceUPrc_; }
      set {
        surfaceUPrc_ = value;
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 667;
    private double limitPrice_;
    /// <summary>
    /// spread limit price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_ref_uPrc" field.</summary>
    public const int LimitRefUPrcFieldNumber = 668;
    private double limitRefUPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitRefUPrc {
      get { return limitRefUPrc_; }
      set {
        limitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "limit_err" field.</summary>
    public const int LimitErrFieldNumber = 670;
    private global::Spiderrock.Protobuf.LimitError limitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    /// <summary>
    /// limit price error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError LimitErr {
      get { return limitErr_; }
      set {
        limitErr_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_price" field.</summary>
    public const int MakeLimitPriceFieldNumber = 673;
    private double makeLimitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeLimitPrice {
      get { return makeLimitPrice_; }
      set {
        makeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_price" field.</summary>
    public const int TakeLimitPriceFieldNumber = 676;
    private double takeLimitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeLimitPrice {
      get { return takeLimitPrice_; }
      set {
        takeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "cxl_uPrc_range" field.</summary>
    public const int CxlUPrcRangeFieldNumber = 679;
    private global::Spiderrock.Protobuf.UPrcCxl cxlUPrcRange_ = global::Spiderrock.Protobuf.UPrcCxl.Unspecified;
    /// <summary>
    /// cancel spdr order if/when outside stock price range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UPrcCxl CxlUPrcRange {
      get { return cxlUPrcRange_; }
      set {
        cxlUPrcRange_ = value;
      }
    }

    /// <summary>Field number for the "min_uBid" field.</summary>
    public const int MinUBidFieldNumber = 682;
    private float minUBid_;
    /// <summary>
    /// Used in conjunction with minMaxType &amp; maxUAsk. When set, implements a lower bound on the underlying price and will either suspend or cancel an order when violated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinUBid {
      get { return minUBid_; }
      set {
        minUBid_ = value;
      }
    }

    /// <summary>Field number for the "max_uAsk" field.</summary>
    public const int MaxUAskFieldNumber = 685;
    private float maxUAsk_;
    /// <summary>
    /// Used in conjunction with minMaxType &amp; minUBid. When set, implements an upper bound on the underlying price and will either suspend or cancel an order when violated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxUAsk {
      get { return maxUAsk_; }
      set {
        maxUAsk_ = value;
      }
    }

    /// <summary>Field number for the "min_max_type" field.</summary>
    public const int MinMaxTypeFieldNumber = 688;
    private global::Spiderrock.Protobuf.MinMaxType minMaxType_ = global::Spiderrock.Protobuf.MinMaxType.Unspecified;
    /// <summary>
    /// if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MinMaxType MinMaxType {
      get { return minMaxType_; }
      set {
        minMaxType_ = value;
      }
    }

    /// <summary>Field number for the "lead_side" field.</summary>
    public const int LeadSideFieldNumber = 691;
    private global::Spiderrock.Protobuf.BuySell leadSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// for legged orders, which side to lead with.  (optional, None ok)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell LeadSide {
      get { return leadSide_; }
      set {
        leadSide_ = value;
      }
    }

    /// <summary>Field number for the "max_completion_slippage" field.</summary>
    public const int MaxCompletionSlippageFieldNumber = 694;
    private double maxCompletionSlippage_;
    /// <summary>
    /// maximum price slippage to complete an open basket or a cross auction (face side slippage)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxCompletionSlippage {
      get { return maxCompletionSlippage_; }
      set {
        maxCompletionSlippage_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_premium" field.</summary>
    public const int OrderRefPremiumFieldNumber = 697;
    private float orderRefPremium_;
    /// <summary>
    /// reference premium (mleg orders only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefPremium {
      get { return orderRefPremium_; }
      set {
        orderRefPremium_ = value;
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 700;
    private string strategy_ = "";
    /// <summary>
    /// parent order strategy (description only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 703;
    private string userName_ = "";
    /// <summary>
    /// user that entered the most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_comment" field.</summary>
    public const int SpdrCommentFieldNumber = 709;
    private string spdrComment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrComment {
      get { return spdrComment_; }
      set {
        spdrComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "take_reach_rule" field.</summary>
    public const int TakeReachRuleFieldNumber = 712;
    private global::Spiderrock.Protobuf.ReachRule takeReachRule_ = global::Spiderrock.Protobuf.ReachRule.Unspecified;
    /// <summary>
    /// Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size &lt; avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ReachRule TakeReachRule {
      get { return takeReachRule_; }
      set {
        takeReachRule_ = value;
      }
    }

    /// <summary>Field number for the "max_exposure_size" field.</summary>
    public const int MaxExposureSizeFieldNumber = 715;
    private int maxExposureSize_;
    /// <summary>
    /// maximum simultaneous cumulative child order public size exposure (-2 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 2]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxExposureSize {
      get { return maxExposureSize_; }
      set {
        maxExposureSize_ = value;
      }
    }

    /// <summary>Field number for the "num_make_exchanges" field.</summary>
    public const int NumMakeExchangesFieldNumber = 718;
    private int numMakeExchanges_;
    /// <summary>
    /// number of exchanges (2 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMakeExchanges {
      get { return numMakeExchanges_; }
      set {
        numMakeExchanges_ = value;
      }
    }

    /// <summary>Field number for the "public_size" field.</summary>
    public const int PublicSizeFieldNumber = 721;
    private global::Spiderrock.Protobuf.PublicSizeHandling publicSize_ = global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified;
    /// <summary>
    /// public order size handling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PublicSizeHandling PublicSize {
      get { return publicSize_; }
      set {
        publicSize_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule" field.</summary>
    public const int ProgressRuleFieldNumber = 724;
    private global::Spiderrock.Protobuf.ProgressRule progressRule_ = global::Spiderrock.Protobuf.ProgressRule.Unspecified;
    /// <summary>
    /// Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProgressRule ProgressRule {
      get { return progressRule_; }
      set {
        progressRule_ = value;
      }
    }

    /// <summary>Field number for the "progress_slice_cnt" field.</summary>
    public const int ProgressSliceCntFieldNumber = 727;
    private int progressSliceCnt_;
    /// <summary>
    /// number of progress slices to use (default = 4 or 8) [max 20]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressSliceCnt {
      get { return progressSliceCnt_; }
      set {
        progressSliceCnt_ = value;
      }
    }

    /// <summary>Field number for the "progress_expose_time" field.</summary>
    public const int ProgressExposeTimeFieldNumber = 730;
    private int progressExposeTime_;
    /// <summary>
    /// minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressExposeTime {
      get { return progressExposeTime_; }
      set {
        progressExposeTime_ = value;
      }
    }

    /// <summary>Field number for the "max_child_orders" field.</summary>
    public const int MaxChildOrdersFieldNumber = 733;
    private int maxChildOrders_;
    /// <summary>
    /// maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxChildOrders {
      get { return maxChildOrders_; }
      set {
        maxChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "exch_mask" field.</summary>
    public const int ExchMaskFieldNumber = 736;
    private uint exchMask_;
    /// <summary>
    /// eligible exchanges (0 = all)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExchMask {
      get { return exchMask_; }
      set {
        exchMask_ = value;
      }
    }

    /// <summary>Field number for the "market_session" field.</summary>
    public const int MarketSessionFieldNumber = 1047;
    private global::Spiderrock.Protobuf.MarketSession marketSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession MarketSession {
      get { return marketSession_; }
      set {
        marketSession_ = value;
      }
    }

    /// <summary>Field number for the "start_dttm" field.</summary>
    public const int StartDttmFieldNumber = 742;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDttm_;
    /// <summary>
    /// [optional] (parent order start time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDttm {
      get { return startDttm_; }
      set {
        startDttm_ = value;
      }
    }

    /// <summary>Field number for the "order_duration" field.</summary>
    public const int OrderDurationFieldNumber = 745;
    private int orderDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderDuration {
      get { return orderDuration_; }
      set {
        orderDuration_ = value;
      }
    }

    /// <summary>Field number for the "active_duration" field.</summary>
    public const int ActiveDurationFieldNumber = 1048;
    private int activeDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveDuration {
      get { return activeDuration_; }
      set {
        activeDuration_ = value;
      }
    }

    /// <summary>Field number for the "good_till_dttm" field.</summary>
    public const int GoodTillDttmFieldNumber = 748;
    private global::Google.Protobuf.WellKnownTypes.Timestamp goodTillDttm_;
    /// <summary>
    /// [optional] (default: 2099-02-02)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp GoodTillDttm {
      get { return goodTillDttm_; }
      set {
        goodTillDttm_ = value;
      }
    }

    /// <summary>Field number for the "expire_dttm" field.</summary>
    public const int ExpireDttmFieldNumber = 1049;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expireDttm_;
    /// <summary>
    /// expected order expiration dttm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpireDttm {
      get { return expireDttm_; }
      set {
        expireDttm_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 751;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 754;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "block_visibility" field.</summary>
    public const int BlockVisibilityFieldNumber = 757;
    private global::Spiderrock.Protobuf.BlockVisibility blockVisibility_ = global::Spiderrock.Protobuf.BlockVisibility.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BlockVisibility BlockVisibility {
      get { return blockVisibility_; }
      set {
        blockVisibility_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 760;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_limit" field.</summary>
    public const int OrderPrcLimitFieldNumber = 763;
    private double orderPrcLimit_;
    /// <summary>
    /// Applies if LimitType = Prc[]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcLimit {
      get { return orderPrcLimit_; }
      set {
        orderPrcLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_uPrc" field.</summary>
    public const int OrderRefUPrcFieldNumber = 766;
    private double orderRefUPrc_;
    /// <summary>
    /// reference uPrc (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderRefUPrc {
      get { return orderRefUPrc_; }
      set {
        orderRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_de" field.</summary>
    public const int OrderRefDeFieldNumber = 769;
    private float orderRefDe_;
    /// <summary>
    /// reference delta (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefDe {
      get { return orderRefDe_; }
      set {
        orderRefDe_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_ga" field.</summary>
    public const int OrderRefGaFieldNumber = 772;
    private float orderRefGa_;
    /// <summary>
    /// reference gamma (PrcDe orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefGa {
      get { return orderRefGa_; }
      set {
        orderRefGa_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_offset" field.</summary>
    public const int OrderPrcOffsetFieldNumber = 775;
    private double orderPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcOffset {
      get { return orderPrcOffset_; }
      set {
        orderPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_class" field.</summary>
    public const int TakeLimitClassFieldNumber = 778;
    private global::Spiderrock.Protobuf.SpdrLimitClass takeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass TakeLimitClass {
      get { return takeLimitClass_; }
      set {
        takeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_type" field.</summary>
    public const int TakeAlphaTypeFieldNumber = 781;
    private global::Spiderrock.Protobuf.AlphaType takeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if limitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType TakeAlphaType {
      get { return takeAlphaType_; }
      set {
        takeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_factor" field.</summary>
    public const int TakeAlphaFactorFieldNumber = 784;
    private float takeAlphaFactor_;
    /// <summary>
    /// [-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeAlphaFactor {
      get { return takeAlphaFactor_; }
      set {
        takeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_probability" field.</summary>
    public const int TakeAlphaProbabilityFieldNumber = 787;
    private float takeAlphaProbability_;
    /// <summary>
    /// ProbLimit = alphaProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeAlphaProbability {
      get { return takeAlphaProbability_; }
      set {
        takeAlphaProbability_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_prc_offset" field.</summary>
    public const int TakeSurfPrcOffsetFieldNumber = 790;
    private double takeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeSurfPrcOffset {
      get { return takeSurfPrcOffset_; }
      set {
        takeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_vol_offset" field.</summary>
    public const int TakeSurfVolOffsetFieldNumber = 793;
    private float takeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfVolOffset {
      get { return takeSurfVolOffset_; }
      set {
        takeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_wid_offset" field.</summary>
    public const int TakeSurfWidOffsetFieldNumber = 796;
    private float takeSurfWidOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfWidOffset {
      get { return takeSurfWidOffset_; }
      set {
        takeSurfWidOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_class" field.</summary>
    public const int MakeLimitClassFieldNumber = 799;
    private global::Spiderrock.Protobuf.SpdrLimitClass makeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass MakeLimitClass {
      get { return makeLimitClass_; }
      set {
        makeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_type" field.</summary>
    public const int MakeAlphaTypeFieldNumber = 802;
    private global::Spiderrock.Protobuf.AlphaType makeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if limitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType MakeAlphaType {
      get { return makeAlphaType_; }
      set {
        makeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_factor" field.</summary>
    public const int MakeAlphaFactorFieldNumber = 805;
    private float makeAlphaFactor_;
    /// <summary>
    /// [-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeAlphaFactor {
      get { return makeAlphaFactor_; }
      set {
        makeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_probability" field.</summary>
    public const int MakeAlphaProbabilityFieldNumber = 808;
    private float makeAlphaProbability_;
    /// <summary>
    /// ProbLimit = alphaProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeAlphaProbability {
      get { return makeAlphaProbability_; }
      set {
        makeAlphaProbability_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_prc_offset" field.</summary>
    public const int MakeSurfPrcOffsetFieldNumber = 811;
    private double makeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeSurfPrcOffset {
      get { return makeSurfPrcOffset_; }
      set {
        makeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_vol_offset" field.</summary>
    public const int MakeSurfVolOffsetFieldNumber = 814;
    private float makeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfVolOffset {
      get { return makeSurfVolOffset_; }
      set {
        makeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_wid_offset" field.</summary>
    public const int MakeSurfWidOffsetFieldNumber = 817;
    private float makeSurfWidOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfWidOffset {
      get { return makeSurfWidOffset_; }
      set {
        makeSurfWidOffset_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_mult" field.</summary>
    public const int OrderRefEventMultFieldNumber = 820;
    private float orderRefEventMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefEventMult {
      get { return orderRefEventMult_; }
      set {
        orderRefEventMult_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_dttm" field.</summary>
    public const int OrderRefEventDttmFieldNumber = 823;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderRefEventDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderRefEventDttm {
      get { return orderRefEventDttm_; }
      set {
        orderRefEventDttm_ = value;
      }
    }

    /// <summary>Field number for the "mleg_prob_limit" field.</summary>
    public const int MlegProbLimitFieldNumber = 826;
    private float mlegProbLimit_;
    /// <summary>
    /// live prob limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegProbLimit {
      get { return mlegProbLimit_; }
      set {
        mlegProbLimit_ = value;
      }
    }

    /// <summary>Field number for the "mleg_surf_offset" field.</summary>
    public const int MlegSurfOffsetFieldNumber = 829;
    private float mlegSurfOffset_;
    /// <summary>
    /// live surface offset (in premium)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MlegSurfOffset {
      get { return mlegSurfOffset_; }
      set {
        mlegSurfOffset_ = value;
      }
    }

    /// <summary>Field number for the "extern_ex_dest" field.</summary>
    public const int ExternExDestFieldNumber = 832;
    private string externExDest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternExDest {
      get { return externExDest_; }
      set {
        externExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_dttm" field.</summary>
    public const int OrderDttmFieldNumber = 835;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderDttm_;
    /// <summary>
    /// order entry date/time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderDttm {
      get { return orderDttm_; }
      set {
        orderDttm_ = value;
      }
    }

    /// <summary>Field number for the "min_surf_vol" field.</summary>
    public const int MinSurfVolFieldNumber = 838;
    private float minSurfVol_;
    /// <summary>
    /// (minimum) SR spread surface vol [vega weighted] while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSurfVol {
      get { return minSurfVol_; }
      set {
        minSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "max_surf_vol" field.</summary>
    public const int MaxSurfVolFieldNumber = 841;
    private float maxSurfVol_;
    /// <summary>
    /// (maximum) SR spread surface vol [vega weighted] while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSurfVol {
      get { return maxSurfVol_; }
      set {
        maxSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "min_surf_prc" field.</summary>
    public const int MinSurfPrcFieldNumber = 844;
    private float minSurfPrc_;
    /// <summary>
    /// (minimum) SR spread surface price while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSurfPrc {
      get { return minSurfPrc_; }
      set {
        minSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "max_surf_prc" field.</summary>
    public const int MaxSurfPrcFieldNumber = 847;
    private float maxSurfPrc_;
    /// <summary>
    /// (maximum) SR spread surface price while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSurfPrc {
      get { return maxSurfPrc_; }
      set {
        maxSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "min_surf_uPrc" field.</summary>
    public const int MinSurfUPrcFieldNumber = 850;
    private float minSurfUPrc_;
    /// <summary>
    /// (minimum) SR spread surface uPrc while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSurfUPrc {
      get { return minSurfUPrc_; }
      set {
        minSurfUPrc_ = value;
      }
    }

    /// <summary>Field number for the "max_surf_uPrc" field.</summary>
    public const int MaxSurfUPrcFieldNumber = 853;
    private float maxSurfUPrc_;
    /// <summary>
    /// (maximum) SR spread surface uPrc while parent order was working
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSurfUPrc {
      get { return maxSurfUPrc_; }
      set {
        maxSurfUPrc_ = value;
      }
    }

    /// <summary>Field number for the "min_qte_width" field.</summary>
    public const int MinQteWidthFieldNumber = 856;
    private float minQteWidth_;
    /// <summary>
    /// minimum quote width during active order window
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinQteWidth {
      get { return minQteWidth_; }
      set {
        minQteWidth_ = value;
      }
    }

    /// <summary>Field number for the "avg_qte_width" field.</summary>
    public const int AvgQteWidthFieldNumber = 859;
    private float avgQteWidth_;
    /// <summary>
    /// average quote width (during active order window)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgQteWidth {
      get { return avgQteWidth_; }
      set {
        avgQteWidth_ = value;
      }
    }

    /// <summary>Field number for the "cnt_qte_width" field.</summary>
    public const int CntQteWidthFieldNumber = 862;
    private int cntQteWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CntQteWidth {
      get { return cntQteWidth_; }
      set {
        cntQteWidth_ = value;
      }
    }

    /// <summary>Field number for the "arrive_bid" field.</summary>
    public const int ArriveBidFieldNumber = 865;
    private double arriveBid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ArriveBid {
      get { return arriveBid_; }
      set {
        arriveBid_ = value;
      }
    }

    /// <summary>Field number for the "arrive_ask" field.</summary>
    public const int ArriveAskFieldNumber = 868;
    private double arriveAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ArriveAsk {
      get { return arriveAsk_; }
      set {
        arriveAsk_ = value;
      }
    }

    /// <summary>Field number for the "total_seconds" field.</summary>
    public const int TotalSecondsFieldNumber = 871;
    private float totalSeconds_;
    /// <summary>
    /// number of seconds that the parent order was active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TotalSeconds {
      get { return totalSeconds_; }
      set {
        totalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "working_seconds" field.</summary>
    public const int WorkingSecondsFieldNumber = 874;
    private float workingSeconds_;
    /// <summary>
    /// number of seconds with one or more working child orders in an exchange order book
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WorkingSeconds {
      get { return workingSeconds_; }
      set {
        workingSeconds_ = value;
      }
    }

    /// <summary>Field number for the "prt_active_cnt" field.</summary>
    public const int PrtActiveCntFieldNumber = 877;
    private int prtActiveCnt_;
    /// <summary>
    /// total print events while parent order was active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtActiveCnt {
      get { return prtActiveCnt_; }
      set {
        prtActiveCnt_ = value;
      }
    }

    /// <summary>Field number for the "prt_qty_active" field.</summary>
    public const int PrtQtyActiveFieldNumber = 880;
    private int prtQtyActive_;
    /// <summary>
    /// total quantity printed while parent order was active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtQtyActive {
      get { return prtQtyActive_; }
      set {
        prtQtyActive_ = value;
      }
    }

    /// <summary>Field number for the "cum_exch_fee" field.</summary>
    public const int CumExchFeeFieldNumber = 883;
    private float cumExchFee_;
    /// <summary>
    /// cumulative fill exch fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumExchFee {
      get { return cumExchFee_; }
      set {
        cumExchFee_ = value;
      }
    }

    /// <summary>Field number for the "cum_m10_pnl" field.</summary>
    public const int CumM10PnlFieldNumber = 886;
    private float cumM10Pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumM10Pnl {
      get { return cumM10Pnl_; }
      set {
        cumM10Pnl_ = value;
      }
    }

    /// <summary>Field number for the "cum_arrival_pnl" field.</summary>
    public const int CumArrivalPnlFieldNumber = 889;
    private float cumArrivalPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumArrivalPnl {
      get { return cumArrivalPnl_; }
      set {
        cumArrivalPnl_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_drift" field.</summary>
    public const int UPrcDriftFieldNumber = 892;
    private float uPrcDrift_;
    /// <summary>
    /// underlier drift (since parent order start)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcDrift {
      get { return uPrcDrift_; }
      set {
        uPrcDrift_ = value;
      }
    }

    /// <summary>Field number for the "s_vol_drift" field.</summary>
    public const int SVolDriftFieldNumber = 895;
    private float sVolDrift_;
    /// <summary>
    /// surface vol drift (since parent order start)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVolDrift {
      get { return sVolDrift_; }
      set {
        sVolDrift_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_ln" field.</summary>
    public const int MaxGrpDayDDeltaLnFieldNumber = 946;
    private float maxGrpDayDDeltaLn_;
    /// <summary>
    /// max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaLn {
      get { return maxGrpDayDDeltaLn_; }
      set {
        maxGrpDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_sh" field.</summary>
    public const int MaxGrpDayDDeltaShFieldNumber = 949;
    private float maxGrpDayDDeltaSh_;
    /// <summary>
    /// max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaSh {
      get { return maxGrpDayDDeltaSh_; }
      set {
        maxGrpDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_ln" field.</summary>
    public const int MaxGrpDayContractsLnFieldNumber = 979;
    private int maxGrpDayContractsLn_;
    /// <summary>
    /// max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsLn {
      get { return maxGrpDayContractsLn_; }
      set {
        maxGrpDayContractsLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_sh" field.</summary>
    public const int MaxGrpDayContractsShFieldNumber = 982;
    private int maxGrpDayContractsSh_;
    /// <summary>
    /// max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsSh {
      get { return maxGrpDayContractsSh_; }
      set {
        maxGrpDayContractsSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_abs" field.</summary>
    public const int MaxGrpDayContractsAbsFieldNumber = 985;
    private int maxGrpDayContractsAbs_;
    /// <summary>
    /// max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsAbs {
      get { return maxGrpDayContractsAbs_; }
      set {
        maxGrpDayContractsAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_ln" field.</summary>
    public const int MaxGrpDayVegaLnFieldNumber = 955;
    private float maxGrpDayVegaLn_;
    /// <summary>
    /// max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaLn {
      get { return maxGrpDayVegaLn_; }
      set {
        maxGrpDayVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_sh" field.</summary>
    public const int MaxGrpDayVegaShFieldNumber = 958;
    private float maxGrpDayVegaSh_;
    /// <summary>
    /// max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaSh {
      get { return maxGrpDayVegaSh_; }
      set {
        maxGrpDayVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_abs" field.</summary>
    public const int MaxGrpDayVegaAbsFieldNumber = 961;
    private float maxGrpDayVegaAbs_;
    /// <summary>
    /// max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaAbs {
      get { return maxGrpDayVegaAbs_; }
      set {
        maxGrpDayVegaAbs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_vega_ratio" field.</summary>
    public const int GrpDayVegaRatioFieldNumber = 964;
    private float grpDayVegaRatio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayVegaRatio {
      get { return grpDayVegaRatio_; }
      set {
        grpDayVegaRatio_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_ln" field.</summary>
    public const int MaxGrpDayRMetric1LnFieldNumber = 1041;
    private float maxGrpDayRMetric1Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Ln {
      get { return maxGrpDayRMetric1Ln_; }
      set {
        maxGrpDayRMetric1Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_sh" field.</summary>
    public const int MaxGrpDayRMetric1ShFieldNumber = 1042;
    private float maxGrpDayRMetric1Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Sh {
      get { return maxGrpDayRMetric1Sh_; }
      set {
        maxGrpDayRMetric1Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_abs" field.</summary>
    public const int MaxGrpDayRMetric1AbsFieldNumber = 1043;
    private float maxGrpDayRMetric1Abs_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Abs {
      get { return maxGrpDayRMetric1Abs_; }
      set {
        maxGrpDayRMetric1Abs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_rMetric1_ratio" field.</summary>
    public const int GrpDayRMetric1RatioFieldNumber = 1044;
    private float grpDayRMetric1Ratio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayRMetric1Ratio {
      get { return grpDayRMetric1Ratio_; }
      set {
        grpDayRMetric1Ratio_ = value;
      }
    }

    /// <summary>Field number for the "cpx1" field.</summary>
    public const int Cpx1FieldNumber = 1000;
    private float cpx1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cpx1 {
      get { return cpx1_; }
      set {
        cpx1_ = value;
      }
    }

    /// <summary>Field number for the "csz1" field.</summary>
    public const int Csz1FieldNumber = 1003;
    private int csz1_;
    /// <summary>
    /// cumulative size represented at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Csz1 {
      get { return csz1_; }
      set {
        csz1_ = value;
      }
    }

    /// <summary>Field number for the "cex1" field.</summary>
    public const int Cex1FieldNumber = 1006;
    private uint cex1_;
    /// <summary>
    /// bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Cex1 {
      get { return cex1_; }
      set {
        cex1_ = value;
      }
    }

    /// <summary>Field number for the "cpx2" field.</summary>
    public const int Cpx2FieldNumber = 1009;
    private float cpx2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cpx2 {
      get { return cpx2_; }
      set {
        cpx2_ = value;
      }
    }

    /// <summary>Field number for the "csz2" field.</summary>
    public const int Csz2FieldNumber = 1012;
    private int csz2_;
    /// <summary>
    /// cumulative size represented at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Csz2 {
      get { return csz2_; }
      set {
        csz2_ = value;
      }
    }

    /// <summary>Field number for the "cex2" field.</summary>
    public const int Cex2FieldNumber = 1015;
    private uint cex2_;
    /// <summary>
    /// bit mask of all exchanges where we are representing this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Cex2 {
      get { return cex2_; }
      set {
        cex2_ = value;
      }
    }

    /// <summary>Field number for the "c_more" field.</summary>
    public const int CMoreFieldNumber = 1018;
    private int cMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CMore {
      get { return cMore_; }
      set {
        cMore_ = value;
      }
    }

    /// <summary>Field number for the "num_new_orders" field.</summary>
    public const int NumNewOrdersFieldNumber = 1021;
    private int numNewOrders_;
    /// <summary>
    /// number of new child orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumNewOrders {
      get { return numNewOrders_; }
      set {
        numNewOrders_ = value;
      }
    }

    /// <summary>Field number for the "num_parent_limits" field.</summary>
    public const int NumParentLimitsFieldNumber = 1024;
    private uint numParentLimits_;
    /// <summary>
    /// number of parent limit messages received for this broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumParentLimits {
      get { return numParentLimits_; }
      set {
        numParentLimits_ = value;
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 1027;
    private string userData1_ = "";
    /// <summary>
    /// user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 1030;
    private string userData2_ = "";
    /// <summary>
    /// user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 1033;
    private int numUpdates_;
    /// <summary>
    /// number of record updates (cumulative for the day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1036;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrMLegBrkrState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrMLegBrkrState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (EngineName != other.EngineName) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (ModifyNumber != other.ModifyNumber) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (PackageId != other.PackageId) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (StageType != other.StageType) return false;
      if (StartType != other.StartType) return false;
      if (IsFlagged != other.IsFlagged) return false;
      if (NoticeNumber != other.NoticeNumber) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (SpreadClass != other.SpreadClass) return false;
      if (SpreadFlavor != other.SpreadFlavor) return false;
      if (StockSide != other.StockSide) return false;
      if (SsaleFlag != other.SsaleFlag) return false;
      if (LocateQuan != other.LocateQuan) return false;
      if (LocateFirm != other.LocateFirm) return false;
      if (LocatePool != other.LocatePool) return false;
      if (StockShares != other.StockShares) return false;
      if (StockLegId != other.StockLegId) return false;
      if (StockFillQuan != other.StockFillQuan) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockAvgFillPrice, other.StockAvgFillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefUPrc, other.RefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LiveUPrc, other.LiveUPrc)) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StockCpx, other.StockCpx)) return false;
      if (StockCsz != other.StockCsz) return false;
      if (StockCex != other.StockCex) return false;
      if (NumLegs != other.NumLegs) return false;
      if (!object.Equals(SecKey1, other.SecKey1)) return false;
      if (SecType1 != other.SecType1) return false;
      if (Ratio1 != other.Ratio1) return false;
      if (Side1 != other.Side1) return false;
      if (PositionType1 != other.PositionType1) return false;
      if (LegId1 != other.LegId1) return false;
      if (FillQuan1 != other.FillQuan1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice1, other.AvgFillPrice1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega1, other.Vega1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc1, other.RefUPrc1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta1, other.RefDelta1)) return false;
      if (RefEarnCnt1 != other.RefEarnCnt1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc1, other.LiveUPrc1)) return false;
      if (PriceFormat1 != other.PriceFormat1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx1, other.LegCpx1)) return false;
      if (LegCsz1 != other.LegCsz1) return false;
      if (LegCex1 != other.LegCex1) return false;
      if (!object.Equals(SecKey2, other.SecKey2)) return false;
      if (SecType2 != other.SecType2) return false;
      if (Ratio2 != other.Ratio2) return false;
      if (Side2 != other.Side2) return false;
      if (PositionType2 != other.PositionType2) return false;
      if (LegId2 != other.LegId2) return false;
      if (FillQuan2 != other.FillQuan2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice2, other.AvgFillPrice2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega2, other.Vega2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc2, other.RefUPrc2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta2, other.RefDelta2)) return false;
      if (RefEarnCnt2 != other.RefEarnCnt2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc2, other.LiveUPrc2)) return false;
      if (PriceFormat2 != other.PriceFormat2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx2, other.LegCpx2)) return false;
      if (LegCsz2 != other.LegCsz2) return false;
      if (LegCex2 != other.LegCex2) return false;
      if (!object.Equals(SecKey3, other.SecKey3)) return false;
      if (SecType3 != other.SecType3) return false;
      if (Ratio3 != other.Ratio3) return false;
      if (Side3 != other.Side3) return false;
      if (PositionType3 != other.PositionType3) return false;
      if (LegId3 != other.LegId3) return false;
      if (FillQuan3 != other.FillQuan3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice3, other.AvgFillPrice3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega3, other.Vega3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc3, other.RefUPrc3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta3, other.RefDelta3)) return false;
      if (RefEarnCnt3 != other.RefEarnCnt3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc3, other.LiveUPrc3)) return false;
      if (PriceFormat3 != other.PriceFormat3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx3, other.LegCpx3)) return false;
      if (LegCsz3 != other.LegCsz3) return false;
      if (LegCex3 != other.LegCex3) return false;
      if (!object.Equals(SecKey4, other.SecKey4)) return false;
      if (SecType4 != other.SecType4) return false;
      if (Ratio4 != other.Ratio4) return false;
      if (Side4 != other.Side4) return false;
      if (PositionType4 != other.PositionType4) return false;
      if (LegId4 != other.LegId4) return false;
      if (FillQuan4 != other.FillQuan4) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice4, other.AvgFillPrice4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega4, other.Vega4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc4, other.RefUPrc4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta4, other.RefDelta4)) return false;
      if (RefEarnCnt4 != other.RefEarnCnt4) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc4, other.LiveUPrc4)) return false;
      if (PriceFormat4 != other.PriceFormat4) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx4, other.LegCpx4)) return false;
      if (LegCsz4 != other.LegCsz4) return false;
      if (LegCex4 != other.LegCex4) return false;
      if (!object.Equals(SecKey5, other.SecKey5)) return false;
      if (SecType5 != other.SecType5) return false;
      if (Ratio5 != other.Ratio5) return false;
      if (Side5 != other.Side5) return false;
      if (PositionType5 != other.PositionType5) return false;
      if (LegId5 != other.LegId5) return false;
      if (FillQuan5 != other.FillQuan5) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice5, other.AvgFillPrice5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega5, other.Vega5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc5, other.RefUPrc5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta5, other.RefDelta5)) return false;
      if (RefEarnCnt5 != other.RefEarnCnt5) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc5, other.LiveUPrc5)) return false;
      if (PriceFormat5 != other.PriceFormat5) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx5, other.LegCpx5)) return false;
      if (LegCsz5 != other.LegCsz5) return false;
      if (LegCex5 != other.LegCex5) return false;
      if (!object.Equals(SecKey6, other.SecKey6)) return false;
      if (SecType6 != other.SecType6) return false;
      if (Ratio6 != other.Ratio6) return false;
      if (Side6 != other.Side6) return false;
      if (PositionType6 != other.PositionType6) return false;
      if (LegId6 != other.LegId6) return false;
      if (FillQuan6 != other.FillQuan6) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice6, other.AvgFillPrice6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega6, other.Vega6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefUPrc6, other.RefUPrc6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta6, other.RefDelta6)) return false;
      if (RefEarnCnt6 != other.RefEarnCnt6) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc6, other.LiveUPrc6)) return false;
      if (PriceFormat6 != other.PriceFormat6) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegCpx6, other.LegCpx6)) return false;
      if (LegCsz6 != other.LegCsz6) return false;
      if (LegCex6 != other.LegCex6) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegVega, other.MlegVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegWtVega, other.MlegWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegDelta, other.MlegDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegGamma, other.MlegGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegTheta, other.MlegTheta)) return false;
      if (Description != other.Description) return false;
      if (OrderSize != other.OrderSize) return false;
      if (OrderActiveSize != other.OrderActiveSize) return false;
      if (LeavesQuantity != other.LeavesQuantity) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (SpdrRejectReason != other.SpdrRejectReason) return false;
      if (SpdrCloseDetailTxt != other.SpdrCloseDetailTxt) return false;
      if (OpenLegs != other.OpenLegs) return false;
      if (CumSquareQty != other.CumSquareQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgSquarePrc, other.AvgSquarePrc)) return false;
      if (CumPartialQty != other.CumPartialQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVega, other.FillVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillWtVega, other.FillWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDelta, other.FillDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDDelta, other.FillDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillGamma, other.FillGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTheta, other.FillTheta)) return false;
      if (!object.Equals(LastFillDttm, other.LastFillDttm)) return false;
      if (RiskLimitSize != other.RiskLimitSize) return false;
      if (RiskLimitDesc != other.RiskLimitDesc) return false;
      if (RiskLimitLevel != other.RiskLimitLevel) return false;
      if (MaxProgress != other.MaxProgress) return false;
      if (MaxProgressDetail != other.MaxProgressDetail) return false;
      if (!object.Equals(MaxProgressTime, other.MaxProgressTime)) return false;
      if (AlgoState != other.AlgoState) return false;
      if (AlgoCounter != other.AlgoCounter) return false;
      if (MakeState != other.MakeState) return false;
      if (MakeCounter != other.MakeCounter) return false;
      if (MktRespState != other.MktRespState) return false;
      if (MktRespCounter != other.MktRespCounter) return false;
      if (BrokerState != other.BrokerState) return false;
      if (BrokerCounter != other.BrokerCounter) return false;
      if (SpdrMktState != other.SpdrMktState) return false;
      if (SpdrBrokerStatus != other.SpdrBrokerStatus) return false;
      if (ProgressRuleDetail != other.ProgressRuleDetail) return false;
      if (!object.Equals(LastChildRejectDttm, other.LastChildRejectDttm)) return false;
      if (LastChildRejectText != other.LastChildRejectText) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (TriggerGroupId != other.TriggerGroupId) return false;
      if (HedgeGroupingCode != other.HedgeGroupingCode) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (HedgeInstrument != other.HedgeInstrument) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (HedgeSecType != other.HedgeSecType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeBetaRatio, other.HedgeBetaRatio)) return false;
      if (HedgeScope != other.HedgeScope) return false;
      if (ExternHedgeExDest != other.ExternHedgeExDest) return false;
      if (ExternHedgeParams != other.ExternHedgeParams) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestWayPrc, other.BestWayPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WrstWayPrc, other.WrstWayPrc)) return false;
      if (BestWaySz != other.BestWaySz) return false;
      if (WrstWaySz != other.WrstWaySz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfacePrc, other.SurfacePrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceVol, other.SurfaceVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceUPrc, other.SurfaceUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitRefUPrc, other.LimitRefUPrc)) return false;
      if (LimitErr != other.LimitErr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeLimitPrice, other.MakeLimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeLimitPrice, other.TakeLimitPrice)) return false;
      if (CxlUPrcRange != other.CxlUPrcRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinUBid, other.MinUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxUAsk, other.MaxUAsk)) return false;
      if (MinMaxType != other.MinMaxType) return false;
      if (LeadSide != other.LeadSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCompletionSlippage, other.MaxCompletionSlippage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefPremium, other.OrderRefPremium)) return false;
      if (Strategy != other.Strategy) return false;
      if (UserName != other.UserName) return false;
      if (SpdrComment != other.SpdrComment) return false;
      if (TakeReachRule != other.TakeReachRule) return false;
      if (MaxExposureSize != other.MaxExposureSize) return false;
      if (NumMakeExchanges != other.NumMakeExchanges) return false;
      if (PublicSize != other.PublicSize) return false;
      if (ProgressRule != other.ProgressRule) return false;
      if (ProgressSliceCnt != other.ProgressSliceCnt) return false;
      if (ProgressExposeTime != other.ProgressExposeTime) return false;
      if (MaxChildOrders != other.MaxChildOrders) return false;
      if (ExchMask != other.ExchMask) return false;
      if (MarketSession != other.MarketSession) return false;
      if (!object.Equals(StartDttm, other.StartDttm)) return false;
      if (OrderDuration != other.OrderDuration) return false;
      if (ActiveDuration != other.ActiveDuration) return false;
      if (!object.Equals(GoodTillDttm, other.GoodTillDttm)) return false;
      if (!object.Equals(ExpireDttm, other.ExpireDttm)) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (BlockVisibility != other.BlockVisibility) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcLimit, other.OrderPrcLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderRefUPrc, other.OrderRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefDe, other.OrderRefDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefGa, other.OrderRefGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcOffset, other.OrderPrcOffset)) return false;
      if (TakeLimitClass != other.TakeLimitClass) return false;
      if (TakeAlphaType != other.TakeAlphaType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeAlphaFactor, other.TakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeAlphaProbability, other.TakeAlphaProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeSurfPrcOffset, other.TakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfVolOffset, other.TakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfWidOffset, other.TakeSurfWidOffset)) return false;
      if (MakeLimitClass != other.MakeLimitClass) return false;
      if (MakeAlphaType != other.MakeAlphaType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeAlphaFactor, other.MakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeAlphaProbability, other.MakeAlphaProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeSurfPrcOffset, other.MakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfVolOffset, other.MakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfWidOffset, other.MakeSurfWidOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefEventMult, other.OrderRefEventMult)) return false;
      if (!object.Equals(OrderRefEventDttm, other.OrderRefEventDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegProbLimit, other.MlegProbLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MlegSurfOffset, other.MlegSurfOffset)) return false;
      if (ExternExDest != other.ExternExDest) return false;
      if (!object.Equals(OrderDttm, other.OrderDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSurfVol, other.MinSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSurfVol, other.MaxSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSurfPrc, other.MinSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSurfPrc, other.MaxSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSurfUPrc, other.MinSurfUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSurfUPrc, other.MaxSurfUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinQteWidth, other.MinQteWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgQteWidth, other.AvgQteWidth)) return false;
      if (CntQteWidth != other.CntQteWidth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArriveBid, other.ArriveBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArriveAsk, other.ArriveAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalSeconds, other.TotalSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WorkingSeconds, other.WorkingSeconds)) return false;
      if (PrtActiveCnt != other.PrtActiveCnt) return false;
      if (PrtQtyActive != other.PrtQtyActive) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumExchFee, other.CumExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumM10Pnl, other.CumM10Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumArrivalPnl, other.CumArrivalPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcDrift, other.UPrcDrift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVolDrift, other.SVolDrift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaLn, other.MaxGrpDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaSh, other.MaxGrpDayDDeltaSh)) return false;
      if (MaxGrpDayContractsLn != other.MaxGrpDayContractsLn) return false;
      if (MaxGrpDayContractsSh != other.MaxGrpDayContractsSh) return false;
      if (MaxGrpDayContractsAbs != other.MaxGrpDayContractsAbs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaLn, other.MaxGrpDayVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaSh, other.MaxGrpDayVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaAbs, other.MaxGrpDayVegaAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayVegaRatio, other.GrpDayVegaRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Ln, other.MaxGrpDayRMetric1Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Sh, other.MaxGrpDayRMetric1Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Abs, other.MaxGrpDayRMetric1Abs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayRMetric1Ratio, other.GrpDayRMetric1Ratio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cpx1, other.Cpx1)) return false;
      if (Csz1 != other.Csz1) return false;
      if (Cex1 != other.Cex1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cpx2, other.Cpx2)) return false;
      if (Csz2 != other.Csz2) return false;
      if (Cex2 != other.Cex2) return false;
      if (CMore != other.CMore) return false;
      if (NumNewOrders != other.NumNewOrders) return false;
      if (NumParentLimits != other.NumParentLimits) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (ModifyNumber != 0L) hash ^= ModifyNumber.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) hash ^= StageType.GetHashCode();
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) hash ^= StartType.GetHashCode();
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsFlagged.GetHashCode();
      if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) hash ^= SpreadClass.GetHashCode();
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) hash ^= SpreadFlavor.GetHashCode();
      if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= StockSide.GetHashCode();
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
      if (LocateQuan != 0) hash ^= LocateQuan.GetHashCode();
      if (LocateFirm.Length != 0) hash ^= LocateFirm.GetHashCode();
      if (LocatePool.Length != 0) hash ^= LocatePool.GetHashCode();
      if (StockShares != 0) hash ^= StockShares.GetHashCode();
      if (StockLegId != 0L) hash ^= StockLegId.GetHashCode();
      if (StockFillQuan != 0) hash ^= StockFillQuan.GetHashCode();
      if (StockAvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockAvgFillPrice);
      if (RefUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefUPrc);
      if (LiveUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LiveUPrc);
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (StockCpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StockCpx);
      if (StockCsz != 0) hash ^= StockCsz.GetHashCode();
      if (StockCex != 0) hash ^= StockCex.GetHashCode();
      if (NumLegs != 0) hash ^= NumLegs.GetHashCode();
      if (secKey1_ != null) hash ^= SecKey1.GetHashCode();
      if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType1.GetHashCode();
      if (Ratio1 != 0) hash ^= Ratio1.GetHashCode();
      if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side1.GetHashCode();
      if (PositionType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType1.GetHashCode();
      if (LegId1 != 0L) hash ^= LegId1.GetHashCode();
      if (FillQuan1 != 0) hash ^= FillQuan1.GetHashCode();
      if (AvgFillPrice1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice1);
      if (Vega1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega1);
      if (RefUPrc1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc1);
      if (RefDelta1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta1);
      if (RefEarnCnt1 != 0) hash ^= RefEarnCnt1.GetHashCode();
      if (LiveUPrc1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc1);
      if (PriceFormat1 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat1.GetHashCode();
      if (LegCpx1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx1);
      if (LegCsz1 != 0) hash ^= LegCsz1.GetHashCode();
      if (LegCex1 != 0) hash ^= LegCex1.GetHashCode();
      if (secKey2_ != null) hash ^= SecKey2.GetHashCode();
      if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType2.GetHashCode();
      if (Ratio2 != 0) hash ^= Ratio2.GetHashCode();
      if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side2.GetHashCode();
      if (PositionType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType2.GetHashCode();
      if (LegId2 != 0L) hash ^= LegId2.GetHashCode();
      if (FillQuan2 != 0) hash ^= FillQuan2.GetHashCode();
      if (AvgFillPrice2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice2);
      if (Vega2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega2);
      if (RefUPrc2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc2);
      if (RefDelta2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta2);
      if (RefEarnCnt2 != 0) hash ^= RefEarnCnt2.GetHashCode();
      if (LiveUPrc2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc2);
      if (PriceFormat2 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat2.GetHashCode();
      if (LegCpx2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx2);
      if (LegCsz2 != 0) hash ^= LegCsz2.GetHashCode();
      if (LegCex2 != 0) hash ^= LegCex2.GetHashCode();
      if (secKey3_ != null) hash ^= SecKey3.GetHashCode();
      if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType3.GetHashCode();
      if (Ratio3 != 0) hash ^= Ratio3.GetHashCode();
      if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side3.GetHashCode();
      if (PositionType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType3.GetHashCode();
      if (LegId3 != 0L) hash ^= LegId3.GetHashCode();
      if (FillQuan3 != 0) hash ^= FillQuan3.GetHashCode();
      if (AvgFillPrice3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice3);
      if (Vega3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega3);
      if (RefUPrc3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc3);
      if (RefDelta3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta3);
      if (RefEarnCnt3 != 0) hash ^= RefEarnCnt3.GetHashCode();
      if (LiveUPrc3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc3);
      if (PriceFormat3 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat3.GetHashCode();
      if (LegCpx3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx3);
      if (LegCsz3 != 0) hash ^= LegCsz3.GetHashCode();
      if (LegCex3 != 0) hash ^= LegCex3.GetHashCode();
      if (secKey4_ != null) hash ^= SecKey4.GetHashCode();
      if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType4.GetHashCode();
      if (Ratio4 != 0) hash ^= Ratio4.GetHashCode();
      if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side4.GetHashCode();
      if (PositionType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType4.GetHashCode();
      if (LegId4 != 0L) hash ^= LegId4.GetHashCode();
      if (FillQuan4 != 0) hash ^= FillQuan4.GetHashCode();
      if (AvgFillPrice4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice4);
      if (Vega4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega4);
      if (RefUPrc4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc4);
      if (RefDelta4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta4);
      if (RefEarnCnt4 != 0) hash ^= RefEarnCnt4.GetHashCode();
      if (LiveUPrc4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc4);
      if (PriceFormat4 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat4.GetHashCode();
      if (LegCpx4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx4);
      if (LegCsz4 != 0) hash ^= LegCsz4.GetHashCode();
      if (LegCex4 != 0) hash ^= LegCex4.GetHashCode();
      if (secKey5_ != null) hash ^= SecKey5.GetHashCode();
      if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType5.GetHashCode();
      if (Ratio5 != 0) hash ^= Ratio5.GetHashCode();
      if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side5.GetHashCode();
      if (PositionType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType5.GetHashCode();
      if (LegId5 != 0L) hash ^= LegId5.GetHashCode();
      if (FillQuan5 != 0) hash ^= FillQuan5.GetHashCode();
      if (AvgFillPrice5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice5);
      if (Vega5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega5);
      if (RefUPrc5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc5);
      if (RefDelta5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta5);
      if (RefEarnCnt5 != 0) hash ^= RefEarnCnt5.GetHashCode();
      if (LiveUPrc5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc5);
      if (PriceFormat5 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat5.GetHashCode();
      if (LegCpx5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx5);
      if (LegCsz5 != 0) hash ^= LegCsz5.GetHashCode();
      if (LegCex5 != 0) hash ^= LegCex5.GetHashCode();
      if (secKey6_ != null) hash ^= SecKey6.GetHashCode();
      if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType6.GetHashCode();
      if (Ratio6 != 0) hash ^= Ratio6.GetHashCode();
      if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side6.GetHashCode();
      if (PositionType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType6.GetHashCode();
      if (LegId6 != 0L) hash ^= LegId6.GetHashCode();
      if (FillQuan6 != 0) hash ^= FillQuan6.GetHashCode();
      if (AvgFillPrice6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice6);
      if (Vega6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega6);
      if (RefUPrc6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefUPrc6);
      if (RefDelta6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta6);
      if (RefEarnCnt6 != 0) hash ^= RefEarnCnt6.GetHashCode();
      if (LiveUPrc6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc6);
      if (PriceFormat6 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat6.GetHashCode();
      if (LegCpx6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegCpx6);
      if (LegCsz6 != 0) hash ^= LegCsz6.GetHashCode();
      if (LegCex6 != 0) hash ^= LegCex6.GetHashCode();
      if (MlegVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegVega);
      if (MlegWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegWtVega);
      if (MlegDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegDelta);
      if (MlegGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegGamma);
      if (MlegTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegTheta);
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (OrderSize != 0) hash ^= OrderSize.GetHashCode();
      if (OrderActiveSize != 0) hash ^= OrderActiveSize.GetHashCode();
      if (LeavesQuantity != 0) hash ^= LeavesQuantity.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) hash ^= SpdrRejectReason.GetHashCode();
      if (SpdrCloseDetailTxt.Length != 0) hash ^= SpdrCloseDetailTxt.GetHashCode();
      if (OpenLegs != 0) hash ^= OpenLegs.GetHashCode();
      if (CumSquareQty != 0) hash ^= CumSquareQty.GetHashCode();
      if (AvgSquarePrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgSquarePrc);
      if (CumPartialQty != 0) hash ^= CumPartialQty.GetHashCode();
      if (FillVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVega);
      if (FillWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillWtVega);
      if (FillDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDelta);
      if (FillDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDDelta);
      if (FillGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillGamma);
      if (FillTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTheta);
      if (lastFillDttm_ != null) hash ^= LastFillDttm.GetHashCode();
      if (RiskLimitSize != 0) hash ^= RiskLimitSize.GetHashCode();
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) hash ^= RiskLimitDesc.GetHashCode();
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) hash ^= RiskLimitLevel.GetHashCode();
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) hash ^= MaxProgress.GetHashCode();
      if (MaxProgressDetail.Length != 0) hash ^= MaxProgressDetail.GetHashCode();
      if (maxProgressTime_ != null) hash ^= MaxProgressTime.GetHashCode();
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= AlgoState.GetHashCode();
      if (AlgoCounter != 0) hash ^= AlgoCounter.GetHashCode();
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= MakeState.GetHashCode();
      if (MakeCounter != 0) hash ^= MakeCounter.GetHashCode();
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) hash ^= MktRespState.GetHashCode();
      if (MktRespCounter != 0) hash ^= MktRespCounter.GetHashCode();
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) hash ^= BrokerState.GetHashCode();
      if (BrokerCounter != 0) hash ^= BrokerCounter.GetHashCode();
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) hash ^= SpdrMktState.GetHashCode();
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) hash ^= SpdrBrokerStatus.GetHashCode();
      if (ProgressRuleDetail.Length != 0) hash ^= ProgressRuleDetail.GetHashCode();
      if (lastChildRejectDttm_ != null) hash ^= LastChildRejectDttm.GetHashCode();
      if (LastChildRejectText.Length != 0) hash ^= LastChildRejectText.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (TriggerGroupId != 0L) hash ^= TriggerGroupId.GetHashCode();
      if (HedgeGroupingCode != 0L) hash ^= HedgeGroupingCode.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) hash ^= HedgeInstrument.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
      if (HedgeBetaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeBetaRatio);
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) hash ^= HedgeScope.GetHashCode();
      if (ExternHedgeExDest.Length != 0) hash ^= ExternHedgeExDest.GetHashCode();
      if (ExternHedgeParams.Length != 0) hash ^= ExternHedgeParams.GetHashCode();
      if (BestWayPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestWayPrc);
      if (WrstWayPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WrstWayPrc);
      if (BestWaySz != 0) hash ^= BestWaySz.GetHashCode();
      if (WrstWaySz != 0) hash ^= WrstWaySz.GetHashCode();
      if (SurfacePrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfacePrc);
      if (SurfaceVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceVol);
      if (SurfaceUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceUPrc);
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (LimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitRefUPrc);
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= LimitErr.GetHashCode();
      if (MakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeLimitPrice);
      if (TakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeLimitPrice);
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) hash ^= CxlUPrcRange.GetHashCode();
      if (MinUBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinUBid);
      if (MaxUAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxUAsk);
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) hash ^= MinMaxType.GetHashCode();
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LeadSide.GetHashCode();
      if (MaxCompletionSlippage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCompletionSlippage);
      if (OrderRefPremium != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefPremium);
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (SpdrComment.Length != 0) hash ^= SpdrComment.GetHashCode();
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) hash ^= TakeReachRule.GetHashCode();
      if (MaxExposureSize != 0) hash ^= MaxExposureSize.GetHashCode();
      if (NumMakeExchanges != 0) hash ^= NumMakeExchanges.GetHashCode();
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) hash ^= PublicSize.GetHashCode();
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) hash ^= ProgressRule.GetHashCode();
      if (ProgressSliceCnt != 0) hash ^= ProgressSliceCnt.GetHashCode();
      if (ProgressExposeTime != 0) hash ^= ProgressExposeTime.GetHashCode();
      if (MaxChildOrders != 0) hash ^= MaxChildOrders.GetHashCode();
      if (ExchMask != 0) hash ^= ExchMask.GetHashCode();
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= MarketSession.GetHashCode();
      if (startDttm_ != null) hash ^= StartDttm.GetHashCode();
      if (OrderDuration != 0) hash ^= OrderDuration.GetHashCode();
      if (ActiveDuration != 0) hash ^= ActiveDuration.GetHashCode();
      if (goodTillDttm_ != null) hash ^= GoodTillDttm.GetHashCode();
      if (expireDttm_ != null) hash ^= ExpireDttm.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) hash ^= BlockVisibility.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (OrderPrcLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcLimit);
      if (OrderRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderRefUPrc);
      if (OrderRefDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefDe);
      if (OrderRefGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefGa);
      if (OrderPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcOffset);
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= TakeLimitClass.GetHashCode();
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= TakeAlphaType.GetHashCode();
      if (TakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeAlphaFactor);
      if (TakeAlphaProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeAlphaProbability);
      if (TakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeSurfPrcOffset);
      if (TakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfVolOffset);
      if (TakeSurfWidOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfWidOffset);
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= MakeLimitClass.GetHashCode();
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= MakeAlphaType.GetHashCode();
      if (MakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeAlphaFactor);
      if (MakeAlphaProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeAlphaProbability);
      if (MakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeSurfPrcOffset);
      if (MakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfVolOffset);
      if (MakeSurfWidOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfWidOffset);
      if (OrderRefEventMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefEventMult);
      if (orderRefEventDttm_ != null) hash ^= OrderRefEventDttm.GetHashCode();
      if (MlegProbLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegProbLimit);
      if (MlegSurfOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MlegSurfOffset);
      if (ExternExDest.Length != 0) hash ^= ExternExDest.GetHashCode();
      if (orderDttm_ != null) hash ^= OrderDttm.GetHashCode();
      if (MinSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSurfVol);
      if (MaxSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSurfVol);
      if (MinSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSurfPrc);
      if (MaxSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSurfPrc);
      if (MinSurfUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSurfUPrc);
      if (MaxSurfUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSurfUPrc);
      if (MinQteWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinQteWidth);
      if (AvgQteWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgQteWidth);
      if (CntQteWidth != 0) hash ^= CntQteWidth.GetHashCode();
      if (ArriveBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArriveBid);
      if (ArriveAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArriveAsk);
      if (TotalSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalSeconds);
      if (WorkingSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WorkingSeconds);
      if (PrtActiveCnt != 0) hash ^= PrtActiveCnt.GetHashCode();
      if (PrtQtyActive != 0) hash ^= PrtQtyActive.GetHashCode();
      if (CumExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumExchFee);
      if (CumM10Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumM10Pnl);
      if (CumArrivalPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumArrivalPnl);
      if (UPrcDrift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcDrift);
      if (SVolDrift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVolDrift);
      if (MaxGrpDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaLn);
      if (MaxGrpDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaSh);
      if (MaxGrpDayContractsLn != 0) hash ^= MaxGrpDayContractsLn.GetHashCode();
      if (MaxGrpDayContractsSh != 0) hash ^= MaxGrpDayContractsSh.GetHashCode();
      if (MaxGrpDayContractsAbs != 0) hash ^= MaxGrpDayContractsAbs.GetHashCode();
      if (MaxGrpDayVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaLn);
      if (MaxGrpDayVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaSh);
      if (MaxGrpDayVegaAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaAbs);
      if (GrpDayVegaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayVegaRatio);
      if (MaxGrpDayRMetric1Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Ln);
      if (MaxGrpDayRMetric1Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Sh);
      if (MaxGrpDayRMetric1Abs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Abs);
      if (GrpDayRMetric1Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayRMetric1Ratio);
      if (Cpx1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cpx1);
      if (Csz1 != 0) hash ^= Csz1.GetHashCode();
      if (Cex1 != 0) hash ^= Cex1.GetHashCode();
      if (Cpx2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cpx2);
      if (Csz2 != 0) hash ^= Csz2.GetHashCode();
      if (Cex2 != 0) hash ^= Cex2.GetHashCode();
      if (CMore != 0) hash ^= CMore.GetHashCode();
      if (NumNewOrders != 0) hash ^= NumNewOrders.GetHashCode();
      if (NumParentLimits != 0) hash ^= NumParentLimits.GetHashCode();
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (NumUpdates != 0) hash ^= NumUpdates.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(BaseParentNumber);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(AltOrderId);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(PackageId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) StageType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) IsFlagged);
      }
      if (NoticeNumber != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NoticeNumber);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(152, 8);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(160, 8);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) StockSide);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) SsaleFlag);
      }
      if (LocateQuan != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(LocateQuan);
      }
      if (LocateFirm.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(LocateFirm);
      }
      if (LocatePool.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(LocatePool);
      }
      if (StockShares != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(StockShares);
      }
      if (StockLegId != 0L) {
        output.WriteRawTag(184, 9);
        output.WriteInt64(StockLegId);
      }
      if (StockFillQuan != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(StockFillQuan);
      }
      if (StockAvgFillPrice != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(StockAvgFillPrice);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(RefUPrc);
      }
      if (LiveUPrc != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(LiveUPrc);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) UPriceFormat);
      }
      if (StockCpx != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(StockCpx);
      }
      if (StockCsz != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(StockCsz);
      }
      if (StockCex != 0) {
        output.WriteRawTag(248, 10);
        output.WriteUInt32(StockCex);
      }
      if (NumLegs != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(NumLegs);
      }
      if (secKey1_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(SecKey1);
      }
      if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SecType1);
      }
      if (Ratio1 != 0) {
        output.WriteRawTag(216, 11);
        output.WriteUInt32(Ratio1);
      }
      if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) Side1);
      }
      if (PositionType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) PositionType1);
      }
      if (LegId1 != 0L) {
        output.WriteRawTag(160, 12);
        output.WriteInt64(LegId1);
      }
      if (FillQuan1 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(FillQuan1);
      }
      if (AvgFillPrice1 != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AvgFillPrice1);
      }
      if (Vega1 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Vega1);
      }
      if (RefUPrc1 != 0D) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(RefUPrc1);
      }
      if (RefDelta1 != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(RefDelta1);
      }
      if (RefEarnCnt1 != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(RefEarnCnt1);
      }
      if (LiveUPrc1 != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(LiveUPrc1);
      }
      if (PriceFormat1 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) PriceFormat1);
      }
      if (LegCpx1 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(LegCpx1);
      }
      if (LegCsz1 != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(LegCsz1);
      }
      if (LegCex1 != 0) {
        output.WriteRawTag(168, 14);
        output.WriteUInt32(LegCex1);
      }
      if (secKey2_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(SecKey2);
      }
      if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(216, 14);
        output.WriteEnum((int) SecType2);
      }
      if (Ratio2 != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(Ratio2);
      }
      if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) Side2);
      }
      if (PositionType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) PositionType2);
      }
      if (LegId2 != 0L) {
        output.WriteRawTag(184, 15);
        output.WriteInt64(LegId2);
      }
      if (FillQuan2 != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(FillQuan2);
      }
      if (AvgFillPrice2 != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(AvgFillPrice2);
      }
      if (Vega2 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(Vega2);
      }
      if (RefUPrc2 != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(RefUPrc2);
      }
      if (RefDelta2 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(RefDelta2);
      }
      if (RefEarnCnt2 != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(RefEarnCnt2);
      }
      if (LiveUPrc2 != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(LiveUPrc2);
      }
      if (PriceFormat2 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) PriceFormat2);
      }
      if (LegCpx2 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(LegCpx2);
      }
      if (LegCsz2 != 0) {
        output.WriteRawTag(168, 17);
        output.WriteInt32(LegCsz2);
      }
      if (LegCex2 != 0) {
        output.WriteRawTag(192, 17);
        output.WriteUInt32(LegCex2);
      }
      if (secKey3_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(SecKey3);
      }
      if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) SecType3);
      }
      if (Ratio3 != 0) {
        output.WriteRawTag(136, 18);
        output.WriteUInt32(Ratio3);
      }
      if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 18);
        output.WriteEnum((int) Side3);
      }
      if (PositionType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) PositionType3);
      }
      if (LegId3 != 0L) {
        output.WriteRawTag(208, 18);
        output.WriteInt64(LegId3);
      }
      if (FillQuan3 != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(FillQuan3);
      }
      if (AvgFillPrice3 != 0D) {
        output.WriteRawTag(129, 19);
        output.WriteDouble(AvgFillPrice3);
      }
      if (Vega3 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(Vega3);
      }
      if (RefUPrc3 != 0D) {
        output.WriteRawTag(177, 19);
        output.WriteDouble(RefUPrc3);
      }
      if (RefDelta3 != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(RefDelta3);
      }
      if (RefEarnCnt3 != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(RefEarnCnt3);
      }
      if (LiveUPrc3 != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(LiveUPrc3);
      }
      if (PriceFormat3 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) PriceFormat3);
      }
      if (LegCpx3 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(LegCpx3);
      }
      if (LegCsz3 != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(LegCsz3);
      }
      if (LegCex3 != 0) {
        output.WriteRawTag(216, 20);
        output.WriteUInt32(LegCex3);
      }
      if (secKey4_ != null) {
        output.WriteRawTag(242, 20);
        output.WriteMessage(SecKey4);
      }
      if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) SecType4);
      }
      if (Ratio4 != 0) {
        output.WriteRawTag(160, 21);
        output.WriteUInt32(Ratio4);
      }
      if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) Side4);
      }
      if (PositionType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PositionType4);
      }
      if (LegId4 != 0L) {
        output.WriteRawTag(232, 21);
        output.WriteInt64(LegId4);
      }
      if (FillQuan4 != 0) {
        output.WriteRawTag(128, 22);
        output.WriteInt32(FillQuan4);
      }
      if (AvgFillPrice4 != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(AvgFillPrice4);
      }
      if (Vega4 != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(Vega4);
      }
      if (RefUPrc4 != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(RefUPrc4);
      }
      if (RefDelta4 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(RefDelta4);
      }
      if (RefEarnCnt4 != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(RefEarnCnt4);
      }
      if (LiveUPrc4 != 0D) {
        output.WriteRawTag(145, 23);
        output.WriteDouble(LiveUPrc4);
      }
      if (PriceFormat4 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) PriceFormat4);
      }
      if (LegCpx4 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(LegCpx4);
      }
      if (LegCsz4 != 0) {
        output.WriteRawTag(216, 23);
        output.WriteInt32(LegCsz4);
      }
      if (LegCex4 != 0) {
        output.WriteRawTag(240, 23);
        output.WriteUInt32(LegCex4);
      }
      if (secKey5_ != null) {
        output.WriteRawTag(138, 24);
        output.WriteMessage(SecKey5);
      }
      if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 24);
        output.WriteEnum((int) SecType5);
      }
      if (Ratio5 != 0) {
        output.WriteRawTag(184, 24);
        output.WriteUInt32(Ratio5);
      }
      if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) Side5);
      }
      if (PositionType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) PositionType5);
      }
      if (LegId5 != 0L) {
        output.WriteRawTag(128, 25);
        output.WriteInt64(LegId5);
      }
      if (FillQuan5 != 0) {
        output.WriteRawTag(152, 25);
        output.WriteInt32(FillQuan5);
      }
      if (AvgFillPrice5 != 0D) {
        output.WriteRawTag(177, 25);
        output.WriteDouble(AvgFillPrice5);
      }
      if (Vega5 != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Vega5);
      }
      if (RefUPrc5 != 0D) {
        output.WriteRawTag(225, 25);
        output.WriteDouble(RefUPrc5);
      }
      if (RefDelta5 != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(RefDelta5);
      }
      if (RefEarnCnt5 != 0) {
        output.WriteRawTag(144, 26);
        output.WriteInt32(RefEarnCnt5);
      }
      if (LiveUPrc5 != 0D) {
        output.WriteRawTag(169, 26);
        output.WriteDouble(LiveUPrc5);
      }
      if (PriceFormat5 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) PriceFormat5);
      }
      if (LegCpx5 != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(LegCpx5);
      }
      if (LegCsz5 != 0) {
        output.WriteRawTag(240, 26);
        output.WriteInt32(LegCsz5);
      }
      if (LegCex5 != 0) {
        output.WriteRawTag(136, 27);
        output.WriteUInt32(LegCex5);
      }
      if (secKey6_ != null) {
        output.WriteRawTag(162, 27);
        output.WriteMessage(SecKey6);
      }
      if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 27);
        output.WriteEnum((int) SecType6);
      }
      if (Ratio6 != 0) {
        output.WriteRawTag(208, 27);
        output.WriteUInt32(Ratio6);
      }
      if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) Side6);
      }
      if (PositionType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) PositionType6);
      }
      if (LegId6 != 0L) {
        output.WriteRawTag(152, 28);
        output.WriteInt64(LegId6);
      }
      if (FillQuan6 != 0) {
        output.WriteRawTag(176, 28);
        output.WriteInt32(FillQuan6);
      }
      if (AvgFillPrice6 != 0D) {
        output.WriteRawTag(201, 28);
        output.WriteDouble(AvgFillPrice6);
      }
      if (Vega6 != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(Vega6);
      }
      if (RefUPrc6 != 0D) {
        output.WriteRawTag(249, 28);
        output.WriteDouble(RefUPrc6);
      }
      if (RefDelta6 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(RefDelta6);
      }
      if (RefEarnCnt6 != 0) {
        output.WriteRawTag(168, 29);
        output.WriteInt32(RefEarnCnt6);
      }
      if (LiveUPrc6 != 0D) {
        output.WriteRawTag(193, 29);
        output.WriteDouble(LiveUPrc6);
      }
      if (PriceFormat6 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(216, 29);
        output.WriteEnum((int) PriceFormat6);
      }
      if (LegCpx6 != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(LegCpx6);
      }
      if (LegCsz6 != 0) {
        output.WriteRawTag(136, 30);
        output.WriteInt32(LegCsz6);
      }
      if (LegCex6 != 0) {
        output.WriteRawTag(160, 30);
        output.WriteUInt32(LegCex6);
      }
      if (MlegVega != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(MlegVega);
      }
      if (MlegWtVega != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(MlegWtVega);
      }
      if (MlegDelta != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(MlegDelta);
      }
      if (MlegGamma != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(MlegGamma);
      }
      if (MlegTheta != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(MlegTheta);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(178, 31);
        output.WriteString(Description);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(200, 31);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(224, 31);
        output.WriteInt32(OrderActiveSize);
      }
      if (LeavesQuantity != 0) {
        output.WriteRawTag(248, 31);
        output.WriteInt32(LeavesQuantity);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(144, 32);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(168, 32);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(192, 32);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrCloseDetailTxt.Length != 0) {
        output.WriteRawTag(218, 32);
        output.WriteString(SpdrCloseDetailTxt);
      }
      if (OpenLegs != 0) {
        output.WriteRawTag(240, 32);
        output.WriteInt32(OpenLegs);
      }
      if (CumSquareQty != 0) {
        output.WriteRawTag(136, 33);
        output.WriteInt32(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        output.WriteRawTag(161, 33);
        output.WriteDouble(AvgSquarePrc);
      }
      if (CumPartialQty != 0) {
        output.WriteRawTag(184, 33);
        output.WriteInt32(CumPartialQty);
      }
      if (FillVega != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(FillVega);
      }
      if (FillWtVega != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(FillWtVega);
      }
      if (FillDelta != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(FillDelta);
      }
      if (FillDDelta != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(FillDDelta);
      }
      if (FillGamma != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillGamma);
      }
      if (FillTheta != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(FillTheta);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(226, 34);
        output.WriteMessage(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(248, 34);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(144, 35);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        output.WriteRawTag(168, 35);
        output.WriteEnum((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        output.WriteRawTag(218, 35);
        output.WriteMessage(MaxProgressTime);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(240, 35);
        output.WriteEnum((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        output.WriteRawTag(136, 36);
        output.WriteInt32(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(160, 36);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(184, 36);
        output.WriteInt32(MakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        output.WriteRawTag(208, 36);
        output.WriteEnum((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        output.WriteRawTag(232, 36);
        output.WriteInt32(MktRespCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(128, 37);
        output.WriteEnum((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(BrokerCounter);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(176, 37);
        output.WriteEnum((int) SpdrMktState);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(200, 37);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (ProgressRuleDetail.Length != 0) {
        output.WriteRawTag(226, 37);
        output.WriteString(ProgressRuleDetail);
      }
      if (lastChildRejectDttm_ != null) {
        output.WriteRawTag(250, 37);
        output.WriteMessage(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        output.WriteRawTag(146, 38);
        output.WriteString(LastChildRejectText);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 38);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(192, 38);
        output.WriteInt64(TriggerGroupId);
      }
      if (HedgeGroupingCode != 0L) {
        output.WriteRawTag(216, 38);
        output.WriteInt64(HedgeGroupingCode);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(240, 38);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(136, 39);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(162, 39);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 39);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(232, 39);
        output.WriteEnum((int) HedgeScope);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(130, 40);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(154, 40);
        output.WriteString(ExternHedgeParams);
      }
      if (BestWayPrc != 0F) {
        output.WriteRawTag(181, 40);
        output.WriteFloat(BestWayPrc);
      }
      if (WrstWayPrc != 0F) {
        output.WriteRawTag(205, 40);
        output.WriteFloat(WrstWayPrc);
      }
      if (BestWaySz != 0) {
        output.WriteRawTag(224, 40);
        output.WriteInt32(BestWaySz);
      }
      if (WrstWaySz != 0) {
        output.WriteRawTag(248, 40);
        output.WriteInt32(WrstWaySz);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(SurfaceVol);
      }
      if (SurfaceUPrc != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(SurfaceUPrc);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(217, 41);
        output.WriteDouble(LimitPrice);
      }
      if (LimitRefUPrc != 0D) {
        output.WriteRawTag(225, 41);
        output.WriteDouble(LimitRefUPrc);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(240, 41);
        output.WriteEnum((int) LimitErr);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(137, 42);
        output.WriteDouble(MakeLimitPrice);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(TakeLimitPrice);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(184, 42);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(213, 42);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(237, 42);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(128, 43);
        output.WriteEnum((int) MinMaxType);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        output.WriteRawTag(177, 43);
        output.WriteDouble(MaxCompletionSlippage);
      }
      if (OrderRefPremium != 0F) {
        output.WriteRawTag(205, 43);
        output.WriteFloat(OrderRefPremium);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(226, 43);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 43);
        output.WriteString(UserName);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(170, 44);
        output.WriteString(SpdrComment);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(192, 44);
        output.WriteEnum((int) TakeReachRule);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(216, 44);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(240, 44);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(136, 45);
        output.WriteEnum((int) PublicSize);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(160, 45);
        output.WriteEnum((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(184, 45);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(208, 45);
        output.WriteInt32(ProgressExposeTime);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(232, 45);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(128, 46);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(178, 46);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(200, 46);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(226, 46);
        output.WriteMessage(GoodTillDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(248, 46);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(144, 47);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        output.WriteRawTag(168, 47);
        output.WriteEnum((int) BlockVisibility);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(192, 47);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(217, 47);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(241, 47);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDe != 0F) {
        output.WriteRawTag(141, 48);
        output.WriteFloat(OrderRefDe);
      }
      if (OrderRefGa != 0F) {
        output.WriteRawTag(165, 48);
        output.WriteFloat(OrderRefGa);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(185, 48);
        output.WriteDouble(OrderPrcOffset);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(208, 48);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 48);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(133, 49);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (TakeAlphaProbability != 0F) {
        output.WriteRawTag(157, 49);
        output.WriteFloat(TakeAlphaProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(177, 49);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(205, 49);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidOffset != 0F) {
        output.WriteRawTag(229, 49);
        output.WriteFloat(TakeSurfWidOffset);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(248, 49);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(144, 50);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(173, 50);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (MakeAlphaProbability != 0F) {
        output.WriteRawTag(197, 50);
        output.WriteFloat(MakeAlphaProbability);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(217, 50);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(245, 50);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidOffset != 0F) {
        output.WriteRawTag(141, 51);
        output.WriteFloat(MakeSurfWidOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(165, 51);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(186, 51);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (MlegProbLimit != 0F) {
        output.WriteRawTag(213, 51);
        output.WriteFloat(MlegProbLimit);
      }
      if (MlegSurfOffset != 0F) {
        output.WriteRawTag(237, 51);
        output.WriteFloat(MlegSurfOffset);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(130, 52);
        output.WriteString(ExternExDest);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(154, 52);
        output.WriteMessage(OrderDttm);
      }
      if (MinSurfVol != 0F) {
        output.WriteRawTag(181, 52);
        output.WriteFloat(MinSurfVol);
      }
      if (MaxSurfVol != 0F) {
        output.WriteRawTag(205, 52);
        output.WriteFloat(MaxSurfVol);
      }
      if (MinSurfPrc != 0F) {
        output.WriteRawTag(229, 52);
        output.WriteFloat(MinSurfPrc);
      }
      if (MaxSurfPrc != 0F) {
        output.WriteRawTag(253, 52);
        output.WriteFloat(MaxSurfPrc);
      }
      if (MinSurfUPrc != 0F) {
        output.WriteRawTag(149, 53);
        output.WriteFloat(MinSurfUPrc);
      }
      if (MaxSurfUPrc != 0F) {
        output.WriteRawTag(173, 53);
        output.WriteFloat(MaxSurfUPrc);
      }
      if (MinQteWidth != 0F) {
        output.WriteRawTag(197, 53);
        output.WriteFloat(MinQteWidth);
      }
      if (AvgQteWidth != 0F) {
        output.WriteRawTag(221, 53);
        output.WriteFloat(AvgQteWidth);
      }
      if (CntQteWidth != 0) {
        output.WriteRawTag(240, 53);
        output.WriteInt32(CntQteWidth);
      }
      if (ArriveBid != 0D) {
        output.WriteRawTag(137, 54);
        output.WriteDouble(ArriveBid);
      }
      if (ArriveAsk != 0D) {
        output.WriteRawTag(161, 54);
        output.WriteDouble(ArriveAsk);
      }
      if (TotalSeconds != 0F) {
        output.WriteRawTag(189, 54);
        output.WriteFloat(TotalSeconds);
      }
      if (WorkingSeconds != 0F) {
        output.WriteRawTag(213, 54);
        output.WriteFloat(WorkingSeconds);
      }
      if (PrtActiveCnt != 0) {
        output.WriteRawTag(232, 54);
        output.WriteInt32(PrtActiveCnt);
      }
      if (PrtQtyActive != 0) {
        output.WriteRawTag(128, 55);
        output.WriteInt32(PrtQtyActive);
      }
      if (CumExchFee != 0F) {
        output.WriteRawTag(157, 55);
        output.WriteFloat(CumExchFee);
      }
      if (CumM10Pnl != 0F) {
        output.WriteRawTag(181, 55);
        output.WriteFloat(CumM10Pnl);
      }
      if (CumArrivalPnl != 0F) {
        output.WriteRawTag(205, 55);
        output.WriteFloat(CumArrivalPnl);
      }
      if (UPrcDrift != 0F) {
        output.WriteRawTag(229, 55);
        output.WriteFloat(UPrcDrift);
      }
      if (SVolDrift != 0F) {
        output.WriteRawTag(253, 55);
        output.WriteFloat(SVolDrift);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(149, 59);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(173, 59);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(221, 59);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(245, 59);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(141, 60);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(165, 60);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(152, 61);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(176, 61);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(200, 61);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (Cpx1 != 0F) {
        output.WriteRawTag(197, 62);
        output.WriteFloat(Cpx1);
      }
      if (Csz1 != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(Csz1);
      }
      if (Cex1 != 0) {
        output.WriteRawTag(240, 62);
        output.WriteUInt32(Cex1);
      }
      if (Cpx2 != 0F) {
        output.WriteRawTag(141, 63);
        output.WriteFloat(Cpx2);
      }
      if (Csz2 != 0) {
        output.WriteRawTag(160, 63);
        output.WriteInt32(Csz2);
      }
      if (Cex2 != 0) {
        output.WriteRawTag(184, 63);
        output.WriteUInt32(Cex2);
      }
      if (CMore != 0) {
        output.WriteRawTag(208, 63);
        output.WriteInt32(CMore);
      }
      if (NumNewOrders != 0) {
        output.WriteRawTag(232, 63);
        output.WriteInt32(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(NumParentLimits);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(154, 64);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(178, 64);
        output.WriteString(UserData2);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(200, 64);
        output.WriteInt32(NumUpdates);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 64);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(234, 64);
        output.WriteString(EngineName);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(250, 64);
        output.WriteString(ExecBrkrCode);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(128, 65);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(141, 65);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(149, 65);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(157, 65);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(165, 65);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (ModifyNumber != 0L) {
        output.WriteRawTag(168, 65);
        output.WriteInt64(ModifyNumber);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        output.WriteRawTag(176, 65);
        output.WriteEnum((int) StartType);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(184, 65);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(192, 65);
        output.WriteInt32(ActiveDuration);
      }
      if (expireDttm_ != null) {
        output.WriteRawTag(202, 65);
        output.WriteMessage(ExpireDttm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(BaseParentNumber);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(AltOrderId);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(PackageId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) StageType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) IsFlagged);
      }
      if (NoticeNumber != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(NoticeNumber);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(152, 8);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(160, 8);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) StockSide);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) SsaleFlag);
      }
      if (LocateQuan != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(LocateQuan);
      }
      if (LocateFirm.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(LocateFirm);
      }
      if (LocatePool.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(LocatePool);
      }
      if (StockShares != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(StockShares);
      }
      if (StockLegId != 0L) {
        output.WriteRawTag(184, 9);
        output.WriteInt64(StockLegId);
      }
      if (StockFillQuan != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(StockFillQuan);
      }
      if (StockAvgFillPrice != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(StockAvgFillPrice);
      }
      if (RefUPrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(RefUPrc);
      }
      if (LiveUPrc != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(LiveUPrc);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) UPriceFormat);
      }
      if (StockCpx != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(StockCpx);
      }
      if (StockCsz != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(StockCsz);
      }
      if (StockCex != 0) {
        output.WriteRawTag(248, 10);
        output.WriteUInt32(StockCex);
      }
      if (NumLegs != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(NumLegs);
      }
      if (secKey1_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(SecKey1);
      }
      if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SecType1);
      }
      if (Ratio1 != 0) {
        output.WriteRawTag(216, 11);
        output.WriteUInt32(Ratio1);
      }
      if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) Side1);
      }
      if (PositionType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) PositionType1);
      }
      if (LegId1 != 0L) {
        output.WriteRawTag(160, 12);
        output.WriteInt64(LegId1);
      }
      if (FillQuan1 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(FillQuan1);
      }
      if (AvgFillPrice1 != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AvgFillPrice1);
      }
      if (Vega1 != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Vega1);
      }
      if (RefUPrc1 != 0D) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(RefUPrc1);
      }
      if (RefDelta1 != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(RefDelta1);
      }
      if (RefEarnCnt1 != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(RefEarnCnt1);
      }
      if (LiveUPrc1 != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(LiveUPrc1);
      }
      if (PriceFormat1 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) PriceFormat1);
      }
      if (LegCpx1 != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(LegCpx1);
      }
      if (LegCsz1 != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(LegCsz1);
      }
      if (LegCex1 != 0) {
        output.WriteRawTag(168, 14);
        output.WriteUInt32(LegCex1);
      }
      if (secKey2_ != null) {
        output.WriteRawTag(194, 14);
        output.WriteMessage(SecKey2);
      }
      if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(216, 14);
        output.WriteEnum((int) SecType2);
      }
      if (Ratio2 != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(Ratio2);
      }
      if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) Side2);
      }
      if (PositionType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) PositionType2);
      }
      if (LegId2 != 0L) {
        output.WriteRawTag(184, 15);
        output.WriteInt64(LegId2);
      }
      if (FillQuan2 != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(FillQuan2);
      }
      if (AvgFillPrice2 != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(AvgFillPrice2);
      }
      if (Vega2 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(Vega2);
      }
      if (RefUPrc2 != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(RefUPrc2);
      }
      if (RefDelta2 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(RefDelta2);
      }
      if (RefEarnCnt2 != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(RefEarnCnt2);
      }
      if (LiveUPrc2 != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(LiveUPrc2);
      }
      if (PriceFormat2 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) PriceFormat2);
      }
      if (LegCpx2 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(LegCpx2);
      }
      if (LegCsz2 != 0) {
        output.WriteRawTag(168, 17);
        output.WriteInt32(LegCsz2);
      }
      if (LegCex2 != 0) {
        output.WriteRawTag(192, 17);
        output.WriteUInt32(LegCex2);
      }
      if (secKey3_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(SecKey3);
      }
      if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) SecType3);
      }
      if (Ratio3 != 0) {
        output.WriteRawTag(136, 18);
        output.WriteUInt32(Ratio3);
      }
      if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 18);
        output.WriteEnum((int) Side3);
      }
      if (PositionType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) PositionType3);
      }
      if (LegId3 != 0L) {
        output.WriteRawTag(208, 18);
        output.WriteInt64(LegId3);
      }
      if (FillQuan3 != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(FillQuan3);
      }
      if (AvgFillPrice3 != 0D) {
        output.WriteRawTag(129, 19);
        output.WriteDouble(AvgFillPrice3);
      }
      if (Vega3 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(Vega3);
      }
      if (RefUPrc3 != 0D) {
        output.WriteRawTag(177, 19);
        output.WriteDouble(RefUPrc3);
      }
      if (RefDelta3 != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(RefDelta3);
      }
      if (RefEarnCnt3 != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(RefEarnCnt3);
      }
      if (LiveUPrc3 != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(LiveUPrc3);
      }
      if (PriceFormat3 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) PriceFormat3);
      }
      if (LegCpx3 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(LegCpx3);
      }
      if (LegCsz3 != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(LegCsz3);
      }
      if (LegCex3 != 0) {
        output.WriteRawTag(216, 20);
        output.WriteUInt32(LegCex3);
      }
      if (secKey4_ != null) {
        output.WriteRawTag(242, 20);
        output.WriteMessage(SecKey4);
      }
      if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) SecType4);
      }
      if (Ratio4 != 0) {
        output.WriteRawTag(160, 21);
        output.WriteUInt32(Ratio4);
      }
      if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) Side4);
      }
      if (PositionType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PositionType4);
      }
      if (LegId4 != 0L) {
        output.WriteRawTag(232, 21);
        output.WriteInt64(LegId4);
      }
      if (FillQuan4 != 0) {
        output.WriteRawTag(128, 22);
        output.WriteInt32(FillQuan4);
      }
      if (AvgFillPrice4 != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(AvgFillPrice4);
      }
      if (Vega4 != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(Vega4);
      }
      if (RefUPrc4 != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(RefUPrc4);
      }
      if (RefDelta4 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(RefDelta4);
      }
      if (RefEarnCnt4 != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(RefEarnCnt4);
      }
      if (LiveUPrc4 != 0D) {
        output.WriteRawTag(145, 23);
        output.WriteDouble(LiveUPrc4);
      }
      if (PriceFormat4 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) PriceFormat4);
      }
      if (LegCpx4 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(LegCpx4);
      }
      if (LegCsz4 != 0) {
        output.WriteRawTag(216, 23);
        output.WriteInt32(LegCsz4);
      }
      if (LegCex4 != 0) {
        output.WriteRawTag(240, 23);
        output.WriteUInt32(LegCex4);
      }
      if (secKey5_ != null) {
        output.WriteRawTag(138, 24);
        output.WriteMessage(SecKey5);
      }
      if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 24);
        output.WriteEnum((int) SecType5);
      }
      if (Ratio5 != 0) {
        output.WriteRawTag(184, 24);
        output.WriteUInt32(Ratio5);
      }
      if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) Side5);
      }
      if (PositionType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) PositionType5);
      }
      if (LegId5 != 0L) {
        output.WriteRawTag(128, 25);
        output.WriteInt64(LegId5);
      }
      if (FillQuan5 != 0) {
        output.WriteRawTag(152, 25);
        output.WriteInt32(FillQuan5);
      }
      if (AvgFillPrice5 != 0D) {
        output.WriteRawTag(177, 25);
        output.WriteDouble(AvgFillPrice5);
      }
      if (Vega5 != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Vega5);
      }
      if (RefUPrc5 != 0D) {
        output.WriteRawTag(225, 25);
        output.WriteDouble(RefUPrc5);
      }
      if (RefDelta5 != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(RefDelta5);
      }
      if (RefEarnCnt5 != 0) {
        output.WriteRawTag(144, 26);
        output.WriteInt32(RefEarnCnt5);
      }
      if (LiveUPrc5 != 0D) {
        output.WriteRawTag(169, 26);
        output.WriteDouble(LiveUPrc5);
      }
      if (PriceFormat5 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) PriceFormat5);
      }
      if (LegCpx5 != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(LegCpx5);
      }
      if (LegCsz5 != 0) {
        output.WriteRawTag(240, 26);
        output.WriteInt32(LegCsz5);
      }
      if (LegCex5 != 0) {
        output.WriteRawTag(136, 27);
        output.WriteUInt32(LegCex5);
      }
      if (secKey6_ != null) {
        output.WriteRawTag(162, 27);
        output.WriteMessage(SecKey6);
      }
      if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 27);
        output.WriteEnum((int) SecType6);
      }
      if (Ratio6 != 0) {
        output.WriteRawTag(208, 27);
        output.WriteUInt32(Ratio6);
      }
      if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) Side6);
      }
      if (PositionType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) PositionType6);
      }
      if (LegId6 != 0L) {
        output.WriteRawTag(152, 28);
        output.WriteInt64(LegId6);
      }
      if (FillQuan6 != 0) {
        output.WriteRawTag(176, 28);
        output.WriteInt32(FillQuan6);
      }
      if (AvgFillPrice6 != 0D) {
        output.WriteRawTag(201, 28);
        output.WriteDouble(AvgFillPrice6);
      }
      if (Vega6 != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(Vega6);
      }
      if (RefUPrc6 != 0D) {
        output.WriteRawTag(249, 28);
        output.WriteDouble(RefUPrc6);
      }
      if (RefDelta6 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(RefDelta6);
      }
      if (RefEarnCnt6 != 0) {
        output.WriteRawTag(168, 29);
        output.WriteInt32(RefEarnCnt6);
      }
      if (LiveUPrc6 != 0D) {
        output.WriteRawTag(193, 29);
        output.WriteDouble(LiveUPrc6);
      }
      if (PriceFormat6 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(216, 29);
        output.WriteEnum((int) PriceFormat6);
      }
      if (LegCpx6 != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(LegCpx6);
      }
      if (LegCsz6 != 0) {
        output.WriteRawTag(136, 30);
        output.WriteInt32(LegCsz6);
      }
      if (LegCex6 != 0) {
        output.WriteRawTag(160, 30);
        output.WriteUInt32(LegCex6);
      }
      if (MlegVega != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(MlegVega);
      }
      if (MlegWtVega != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(MlegWtVega);
      }
      if (MlegDelta != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(MlegDelta);
      }
      if (MlegGamma != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(MlegGamma);
      }
      if (MlegTheta != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(MlegTheta);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(178, 31);
        output.WriteString(Description);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(200, 31);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(224, 31);
        output.WriteInt32(OrderActiveSize);
      }
      if (LeavesQuantity != 0) {
        output.WriteRawTag(248, 31);
        output.WriteInt32(LeavesQuantity);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(144, 32);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(168, 32);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(192, 32);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrCloseDetailTxt.Length != 0) {
        output.WriteRawTag(218, 32);
        output.WriteString(SpdrCloseDetailTxt);
      }
      if (OpenLegs != 0) {
        output.WriteRawTag(240, 32);
        output.WriteInt32(OpenLegs);
      }
      if (CumSquareQty != 0) {
        output.WriteRawTag(136, 33);
        output.WriteInt32(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        output.WriteRawTag(161, 33);
        output.WriteDouble(AvgSquarePrc);
      }
      if (CumPartialQty != 0) {
        output.WriteRawTag(184, 33);
        output.WriteInt32(CumPartialQty);
      }
      if (FillVega != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(FillVega);
      }
      if (FillWtVega != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(FillWtVega);
      }
      if (FillDelta != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(FillDelta);
      }
      if (FillDDelta != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(FillDDelta);
      }
      if (FillGamma != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillGamma);
      }
      if (FillTheta != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(FillTheta);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(226, 34);
        output.WriteMessage(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(248, 34);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(144, 35);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        output.WriteRawTag(168, 35);
        output.WriteEnum((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        output.WriteRawTag(218, 35);
        output.WriteMessage(MaxProgressTime);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(240, 35);
        output.WriteEnum((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        output.WriteRawTag(136, 36);
        output.WriteInt32(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(160, 36);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(184, 36);
        output.WriteInt32(MakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        output.WriteRawTag(208, 36);
        output.WriteEnum((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        output.WriteRawTag(232, 36);
        output.WriteInt32(MktRespCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(128, 37);
        output.WriteEnum((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(BrokerCounter);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(176, 37);
        output.WriteEnum((int) SpdrMktState);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(200, 37);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (ProgressRuleDetail.Length != 0) {
        output.WriteRawTag(226, 37);
        output.WriteString(ProgressRuleDetail);
      }
      if (lastChildRejectDttm_ != null) {
        output.WriteRawTag(250, 37);
        output.WriteMessage(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        output.WriteRawTag(146, 38);
        output.WriteString(LastChildRejectText);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 38);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(192, 38);
        output.WriteInt64(TriggerGroupId);
      }
      if (HedgeGroupingCode != 0L) {
        output.WriteRawTag(216, 38);
        output.WriteInt64(HedgeGroupingCode);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(240, 38);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(136, 39);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(162, 39);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 39);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(232, 39);
        output.WriteEnum((int) HedgeScope);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(130, 40);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(154, 40);
        output.WriteString(ExternHedgeParams);
      }
      if (BestWayPrc != 0F) {
        output.WriteRawTag(181, 40);
        output.WriteFloat(BestWayPrc);
      }
      if (WrstWayPrc != 0F) {
        output.WriteRawTag(205, 40);
        output.WriteFloat(WrstWayPrc);
      }
      if (BestWaySz != 0) {
        output.WriteRawTag(224, 40);
        output.WriteInt32(BestWaySz);
      }
      if (WrstWaySz != 0) {
        output.WriteRawTag(248, 40);
        output.WriteInt32(WrstWaySz);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(SurfaceVol);
      }
      if (SurfaceUPrc != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(SurfaceUPrc);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(217, 41);
        output.WriteDouble(LimitPrice);
      }
      if (LimitRefUPrc != 0D) {
        output.WriteRawTag(225, 41);
        output.WriteDouble(LimitRefUPrc);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(240, 41);
        output.WriteEnum((int) LimitErr);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(137, 42);
        output.WriteDouble(MakeLimitPrice);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(TakeLimitPrice);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(184, 42);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(213, 42);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(237, 42);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(128, 43);
        output.WriteEnum((int) MinMaxType);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        output.WriteRawTag(177, 43);
        output.WriteDouble(MaxCompletionSlippage);
      }
      if (OrderRefPremium != 0F) {
        output.WriteRawTag(205, 43);
        output.WriteFloat(OrderRefPremium);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(226, 43);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 43);
        output.WriteString(UserName);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(170, 44);
        output.WriteString(SpdrComment);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(192, 44);
        output.WriteEnum((int) TakeReachRule);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(216, 44);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(240, 44);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(136, 45);
        output.WriteEnum((int) PublicSize);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(160, 45);
        output.WriteEnum((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(184, 45);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(208, 45);
        output.WriteInt32(ProgressExposeTime);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(232, 45);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(128, 46);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(178, 46);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(200, 46);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(226, 46);
        output.WriteMessage(GoodTillDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(248, 46);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(144, 47);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        output.WriteRawTag(168, 47);
        output.WriteEnum((int) BlockVisibility);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(192, 47);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(217, 47);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(241, 47);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDe != 0F) {
        output.WriteRawTag(141, 48);
        output.WriteFloat(OrderRefDe);
      }
      if (OrderRefGa != 0F) {
        output.WriteRawTag(165, 48);
        output.WriteFloat(OrderRefGa);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(185, 48);
        output.WriteDouble(OrderPrcOffset);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(208, 48);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 48);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(133, 49);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (TakeAlphaProbability != 0F) {
        output.WriteRawTag(157, 49);
        output.WriteFloat(TakeAlphaProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(177, 49);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(205, 49);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidOffset != 0F) {
        output.WriteRawTag(229, 49);
        output.WriteFloat(TakeSurfWidOffset);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(248, 49);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(144, 50);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(173, 50);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (MakeAlphaProbability != 0F) {
        output.WriteRawTag(197, 50);
        output.WriteFloat(MakeAlphaProbability);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(217, 50);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(245, 50);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidOffset != 0F) {
        output.WriteRawTag(141, 51);
        output.WriteFloat(MakeSurfWidOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(165, 51);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(186, 51);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (MlegProbLimit != 0F) {
        output.WriteRawTag(213, 51);
        output.WriteFloat(MlegProbLimit);
      }
      if (MlegSurfOffset != 0F) {
        output.WriteRawTag(237, 51);
        output.WriteFloat(MlegSurfOffset);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(130, 52);
        output.WriteString(ExternExDest);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(154, 52);
        output.WriteMessage(OrderDttm);
      }
      if (MinSurfVol != 0F) {
        output.WriteRawTag(181, 52);
        output.WriteFloat(MinSurfVol);
      }
      if (MaxSurfVol != 0F) {
        output.WriteRawTag(205, 52);
        output.WriteFloat(MaxSurfVol);
      }
      if (MinSurfPrc != 0F) {
        output.WriteRawTag(229, 52);
        output.WriteFloat(MinSurfPrc);
      }
      if (MaxSurfPrc != 0F) {
        output.WriteRawTag(253, 52);
        output.WriteFloat(MaxSurfPrc);
      }
      if (MinSurfUPrc != 0F) {
        output.WriteRawTag(149, 53);
        output.WriteFloat(MinSurfUPrc);
      }
      if (MaxSurfUPrc != 0F) {
        output.WriteRawTag(173, 53);
        output.WriteFloat(MaxSurfUPrc);
      }
      if (MinQteWidth != 0F) {
        output.WriteRawTag(197, 53);
        output.WriteFloat(MinQteWidth);
      }
      if (AvgQteWidth != 0F) {
        output.WriteRawTag(221, 53);
        output.WriteFloat(AvgQteWidth);
      }
      if (CntQteWidth != 0) {
        output.WriteRawTag(240, 53);
        output.WriteInt32(CntQteWidth);
      }
      if (ArriveBid != 0D) {
        output.WriteRawTag(137, 54);
        output.WriteDouble(ArriveBid);
      }
      if (ArriveAsk != 0D) {
        output.WriteRawTag(161, 54);
        output.WriteDouble(ArriveAsk);
      }
      if (TotalSeconds != 0F) {
        output.WriteRawTag(189, 54);
        output.WriteFloat(TotalSeconds);
      }
      if (WorkingSeconds != 0F) {
        output.WriteRawTag(213, 54);
        output.WriteFloat(WorkingSeconds);
      }
      if (PrtActiveCnt != 0) {
        output.WriteRawTag(232, 54);
        output.WriteInt32(PrtActiveCnt);
      }
      if (PrtQtyActive != 0) {
        output.WriteRawTag(128, 55);
        output.WriteInt32(PrtQtyActive);
      }
      if (CumExchFee != 0F) {
        output.WriteRawTag(157, 55);
        output.WriteFloat(CumExchFee);
      }
      if (CumM10Pnl != 0F) {
        output.WriteRawTag(181, 55);
        output.WriteFloat(CumM10Pnl);
      }
      if (CumArrivalPnl != 0F) {
        output.WriteRawTag(205, 55);
        output.WriteFloat(CumArrivalPnl);
      }
      if (UPrcDrift != 0F) {
        output.WriteRawTag(229, 55);
        output.WriteFloat(UPrcDrift);
      }
      if (SVolDrift != 0F) {
        output.WriteRawTag(253, 55);
        output.WriteFloat(SVolDrift);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(149, 59);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(173, 59);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(221, 59);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(245, 59);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(141, 60);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(165, 60);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(152, 61);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(176, 61);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(200, 61);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (Cpx1 != 0F) {
        output.WriteRawTag(197, 62);
        output.WriteFloat(Cpx1);
      }
      if (Csz1 != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(Csz1);
      }
      if (Cex1 != 0) {
        output.WriteRawTag(240, 62);
        output.WriteUInt32(Cex1);
      }
      if (Cpx2 != 0F) {
        output.WriteRawTag(141, 63);
        output.WriteFloat(Cpx2);
      }
      if (Csz2 != 0) {
        output.WriteRawTag(160, 63);
        output.WriteInt32(Csz2);
      }
      if (Cex2 != 0) {
        output.WriteRawTag(184, 63);
        output.WriteUInt32(Cex2);
      }
      if (CMore != 0) {
        output.WriteRawTag(208, 63);
        output.WriteInt32(CMore);
      }
      if (NumNewOrders != 0) {
        output.WriteRawTag(232, 63);
        output.WriteInt32(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(NumParentLimits);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(154, 64);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(178, 64);
        output.WriteString(UserData2);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(200, 64);
        output.WriteInt32(NumUpdates);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 64);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(234, 64);
        output.WriteString(EngineName);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(250, 64);
        output.WriteString(ExecBrkrCode);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(128, 65);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(141, 65);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(149, 65);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(157, 65);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(165, 65);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (ModifyNumber != 0L) {
        output.WriteRawTag(168, 65);
        output.WriteInt64(ModifyNumber);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        output.WriteRawTag(176, 65);
        output.WriteEnum((int) StartType);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(184, 65);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(192, 65);
        output.WriteInt32(ActiveDuration);
      }
      if (expireDttm_ != null) {
        output.WriteRawTag(202, 65);
        output.WriteMessage(ExpireDttm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (EngineName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (ModifyNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ModifyNumber);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
      }
      if (StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StartType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsFlagged);
      }
      if (NoticeNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadFlavor);
      }
      if (StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StockSide);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
      }
      if (LocateQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LocateQuan);
      }
      if (LocateFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocateFirm);
      }
      if (LocatePool.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocatePool);
      }
      if (StockShares != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StockShares);
      }
      if (StockLegId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StockLegId);
      }
      if (StockFillQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StockFillQuan);
      }
      if (StockAvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (RefUPrc != 0F) {
        size += 2 + 4;
      }
      if (LiveUPrc != 0F) {
        size += 2 + 4;
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (StockCpx != 0F) {
        size += 2 + 4;
      }
      if (StockCsz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StockCsz);
      }
      if (StockCex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StockCex);
      }
      if (NumLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumLegs);
      }
      if (secKey1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey1);
      }
      if (SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType1);
      }
      if (Ratio1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio1);
      }
      if (Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side1);
      }
      if (PositionType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType1);
      }
      if (LegId1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId1);
      }
      if (FillQuan1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan1);
      }
      if (AvgFillPrice1 != 0D) {
        size += 2 + 8;
      }
      if (Vega1 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc1 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta1 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt1);
      }
      if (LiveUPrc1 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat1 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat1);
      }
      if (LegCpx1 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz1);
      }
      if (LegCex1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex1);
      }
      if (secKey2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey2);
      }
      if (SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType2);
      }
      if (Ratio2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio2);
      }
      if (Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side2);
      }
      if (PositionType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType2);
      }
      if (LegId2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId2);
      }
      if (FillQuan2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan2);
      }
      if (AvgFillPrice2 != 0D) {
        size += 2 + 8;
      }
      if (Vega2 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc2 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta2 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt2);
      }
      if (LiveUPrc2 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat2 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat2);
      }
      if (LegCpx2 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz2);
      }
      if (LegCex2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex2);
      }
      if (secKey3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey3);
      }
      if (SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType3);
      }
      if (Ratio3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio3);
      }
      if (Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side3);
      }
      if (PositionType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType3);
      }
      if (LegId3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId3);
      }
      if (FillQuan3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan3);
      }
      if (AvgFillPrice3 != 0D) {
        size += 2 + 8;
      }
      if (Vega3 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc3 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta3 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt3);
      }
      if (LiveUPrc3 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat3 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat3);
      }
      if (LegCpx3 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz3);
      }
      if (LegCex3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex3);
      }
      if (secKey4_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey4);
      }
      if (SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType4);
      }
      if (Ratio4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio4);
      }
      if (Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side4);
      }
      if (PositionType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType4);
      }
      if (LegId4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId4);
      }
      if (FillQuan4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan4);
      }
      if (AvgFillPrice4 != 0D) {
        size += 2 + 8;
      }
      if (Vega4 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc4 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta4 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt4);
      }
      if (LiveUPrc4 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat4 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat4);
      }
      if (LegCpx4 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz4);
      }
      if (LegCex4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex4);
      }
      if (secKey5_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey5);
      }
      if (SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType5);
      }
      if (Ratio5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio5);
      }
      if (Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side5);
      }
      if (PositionType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType5);
      }
      if (LegId5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId5);
      }
      if (FillQuan5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan5);
      }
      if (AvgFillPrice5 != 0D) {
        size += 2 + 8;
      }
      if (Vega5 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc5 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta5 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt5);
      }
      if (LiveUPrc5 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat5 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat5);
      }
      if (LegCpx5 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz5);
      }
      if (LegCex5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex5);
      }
      if (secKey6_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey6);
      }
      if (SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType6);
      }
      if (Ratio6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio6);
      }
      if (Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side6);
      }
      if (PositionType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType6);
      }
      if (LegId6 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegId6);
      }
      if (FillQuan6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuan6);
      }
      if (AvgFillPrice6 != 0D) {
        size += 2 + 8;
      }
      if (Vega6 != 0F) {
        size += 2 + 4;
      }
      if (RefUPrc6 != 0D) {
        size += 2 + 8;
      }
      if (RefDelta6 != 0F) {
        size += 2 + 4;
      }
      if (RefEarnCnt6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefEarnCnt6);
      }
      if (LiveUPrc6 != 0D) {
        size += 2 + 8;
      }
      if (PriceFormat6 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat6);
      }
      if (LegCpx6 != 0F) {
        size += 2 + 4;
      }
      if (LegCsz6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegCsz6);
      }
      if (LegCex6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegCex6);
      }
      if (MlegVega != 0F) {
        size += 2 + 4;
      }
      if (MlegWtVega != 0F) {
        size += 2 + 4;
      }
      if (MlegDelta != 0F) {
        size += 2 + 4;
      }
      if (MlegGamma != 0F) {
        size += 2 + 4;
      }
      if (MlegTheta != 0F) {
        size += 2 + 4;
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (OrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderSize);
      }
      if (OrderActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderActiveSize);
      }
      if (LeavesQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeavesQuantity);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrRejectReason);
      }
      if (SpdrCloseDetailTxt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrCloseDetailTxt);
      }
      if (OpenLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenLegs);
      }
      if (CumSquareQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumSquareQty);
      }
      if (AvgSquarePrc != 0D) {
        size += 2 + 8;
      }
      if (CumPartialQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumPartialQty);
      }
      if (FillVega != 0F) {
        size += 2 + 4;
      }
      if (FillWtVega != 0F) {
        size += 2 + 4;
      }
      if (FillDelta != 0F) {
        size += 2 + 4;
      }
      if (FillDDelta != 0F) {
        size += 2 + 4;
      }
      if (FillGamma != 0F) {
        size += 2 + 4;
      }
      if (FillTheta != 0F) {
        size += 2 + 4;
      }
      if (lastFillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitLevel);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxProgressTime);
      }
      if (AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AlgoState);
      }
      if (AlgoCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AlgoCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeState);
      }
      if (MakeCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MktRespCounter);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BrokerCounter);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrMktState);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrBrokerStatus);
      }
      if (ProgressRuleDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProgressRuleDetail);
      }
      if (lastChildRejectDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastChildRejectText);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerGroupId);
      }
      if (HedgeGroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HedgeGroupingCode);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        size += 2 + 4;
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeScope);
      }
      if (ExternHedgeExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeParams);
      }
      if (BestWayPrc != 0F) {
        size += 2 + 4;
      }
      if (WrstWayPrc != 0F) {
        size += 2 + 4;
      }
      if (BestWaySz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BestWaySz);
      }
      if (WrstWaySz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WrstWaySz);
      }
      if (SurfacePrc != 0F) {
        size += 2 + 4;
      }
      if (SurfaceVol != 0F) {
        size += 2 + 4;
      }
      if (SurfaceUPrc != 0F) {
        size += 2 + 4;
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (LimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitErr);
      }
      if (MakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (TakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        size += 2 + 4;
      }
      if (MaxUAsk != 0F) {
        size += 2 + 4;
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MinMaxType);
      }
      if (LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LeadSide);
      }
      if (MaxCompletionSlippage != 0D) {
        size += 2 + 8;
      }
      if (OrderRefPremium != 0F) {
        size += 2 + 4;
      }
      if (Strategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (SpdrComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrComment);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeReachRule);
      }
      if (MaxExposureSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PublicSize);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressExposeTime);
      }
      if (MaxChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxChildOrders);
      }
      if (ExchMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExchMask);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketSession);
      }
      if (startDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartDttm);
      }
      if (OrderDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderDuration);
      }
      if (ActiveDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveDuration);
      }
      if (goodTillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodTillDttm);
      }
      if (expireDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpireDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlockVisibility);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (OrderPrcLimit != 0D) {
        size += 2 + 8;
      }
      if (OrderRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (OrderRefDe != 0F) {
        size += 2 + 4;
      }
      if (OrderRefGa != 0F) {
        size += 2 + 4;
      }
      if (OrderPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitClass);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (TakeAlphaProbability != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (TakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfWidOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitClass);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeAlphaType);
      }
      if (MakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (MakeAlphaProbability != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (MakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfWidOffset != 0F) {
        size += 2 + 4;
      }
      if (OrderRefEventMult != 0F) {
        size += 2 + 4;
      }
      if (orderRefEventDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderRefEventDttm);
      }
      if (MlegProbLimit != 0F) {
        size += 2 + 4;
      }
      if (MlegSurfOffset != 0F) {
        size += 2 + 4;
      }
      if (ExternExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternExDest);
      }
      if (orderDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderDttm);
      }
      if (MinSurfVol != 0F) {
        size += 2 + 4;
      }
      if (MaxSurfVol != 0F) {
        size += 2 + 4;
      }
      if (MinSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (MaxSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (MinSurfUPrc != 0F) {
        size += 2 + 4;
      }
      if (MaxSurfUPrc != 0F) {
        size += 2 + 4;
      }
      if (MinQteWidth != 0F) {
        size += 2 + 4;
      }
      if (AvgQteWidth != 0F) {
        size += 2 + 4;
      }
      if (CntQteWidth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CntQteWidth);
      }
      if (ArriveBid != 0D) {
        size += 2 + 8;
      }
      if (ArriveAsk != 0D) {
        size += 2 + 8;
      }
      if (TotalSeconds != 0F) {
        size += 2 + 4;
      }
      if (WorkingSeconds != 0F) {
        size += 2 + 4;
      }
      if (PrtActiveCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtActiveCnt);
      }
      if (PrtQtyActive != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtQtyActive);
      }
      if (CumExchFee != 0F) {
        size += 2 + 4;
      }
      if (CumM10Pnl != 0F) {
        size += 2 + 4;
      }
      if (CumArrivalPnl != 0F) {
        size += 2 + 4;
      }
      if (UPrcDrift != 0F) {
        size += 2 + 4;
      }
      if (SVolDrift != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayContractsLn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsAbs);
      }
      if (MaxGrpDayVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaAbs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayVegaRatio != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayRMetric1Ratio != 0F) {
        size += 2 + 4;
      }
      if (Cpx1 != 0F) {
        size += 2 + 4;
      }
      if (Csz1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Csz1);
      }
      if (Cex1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cex1);
      }
      if (Cpx2 != 0F) {
        size += 2 + 4;
      }
      if (Csz2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Csz2);
      }
      if (Cex2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cex2);
      }
      if (CMore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CMore);
      }
      if (NumNewOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumParentLimits);
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (NumUpdates != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpdates);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrMLegBrkrState other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.ModifyNumber != 0L) {
        ModifyNumber = other.ModifyNumber;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        StageType = other.StageType;
      }
      if (other.StartType != global::Spiderrock.Protobuf.StartType.Unspecified) {
        StartType = other.StartType;
      }
      if (other.IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsFlagged = other.IsFlagged;
      }
      if (other.NoticeNumber != 0L) {
        NoticeNumber = other.NoticeNumber;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        SpreadClass = other.SpreadClass;
      }
      if (other.SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        SpreadFlavor = other.SpreadFlavor;
      }
      if (other.StockSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        StockSide = other.StockSide;
      }
      if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SsaleFlag = other.SsaleFlag;
      }
      if (other.LocateQuan != 0) {
        LocateQuan = other.LocateQuan;
      }
      if (other.LocateFirm.Length != 0) {
        LocateFirm = other.LocateFirm;
      }
      if (other.LocatePool.Length != 0) {
        LocatePool = other.LocatePool;
      }
      if (other.StockShares != 0) {
        StockShares = other.StockShares;
      }
      if (other.StockLegId != 0L) {
        StockLegId = other.StockLegId;
      }
      if (other.StockFillQuan != 0) {
        StockFillQuan = other.StockFillQuan;
      }
      if (other.StockAvgFillPrice != 0D) {
        StockAvgFillPrice = other.StockAvgFillPrice;
      }
      if (other.RefUPrc != 0F) {
        RefUPrc = other.RefUPrc;
      }
      if (other.LiveUPrc != 0F) {
        LiveUPrc = other.LiveUPrc;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.StockCpx != 0F) {
        StockCpx = other.StockCpx;
      }
      if (other.StockCsz != 0) {
        StockCsz = other.StockCsz;
      }
      if (other.StockCex != 0) {
        StockCex = other.StockCex;
      }
      if (other.NumLegs != 0) {
        NumLegs = other.NumLegs;
      }
      if (other.secKey1_ != null) {
        if (secKey1_ == null) {
          SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey1.MergeFrom(other.SecKey1);
      }
      if (other.SecType1 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType1 = other.SecType1;
      }
      if (other.Ratio1 != 0) {
        Ratio1 = other.Ratio1;
      }
      if (other.Side1 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side1 = other.Side1;
      }
      if (other.PositionType1 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType1 = other.PositionType1;
      }
      if (other.LegId1 != 0L) {
        LegId1 = other.LegId1;
      }
      if (other.FillQuan1 != 0) {
        FillQuan1 = other.FillQuan1;
      }
      if (other.AvgFillPrice1 != 0D) {
        AvgFillPrice1 = other.AvgFillPrice1;
      }
      if (other.Vega1 != 0F) {
        Vega1 = other.Vega1;
      }
      if (other.RefUPrc1 != 0D) {
        RefUPrc1 = other.RefUPrc1;
      }
      if (other.RefDelta1 != 0F) {
        RefDelta1 = other.RefDelta1;
      }
      if (other.RefEarnCnt1 != 0) {
        RefEarnCnt1 = other.RefEarnCnt1;
      }
      if (other.LiveUPrc1 != 0D) {
        LiveUPrc1 = other.LiveUPrc1;
      }
      if (other.PriceFormat1 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat1 = other.PriceFormat1;
      }
      if (other.LegCpx1 != 0F) {
        LegCpx1 = other.LegCpx1;
      }
      if (other.LegCsz1 != 0) {
        LegCsz1 = other.LegCsz1;
      }
      if (other.LegCex1 != 0) {
        LegCex1 = other.LegCex1;
      }
      if (other.secKey2_ != null) {
        if (secKey2_ == null) {
          SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey2.MergeFrom(other.SecKey2);
      }
      if (other.SecType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType2 = other.SecType2;
      }
      if (other.Ratio2 != 0) {
        Ratio2 = other.Ratio2;
      }
      if (other.Side2 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side2 = other.Side2;
      }
      if (other.PositionType2 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType2 = other.PositionType2;
      }
      if (other.LegId2 != 0L) {
        LegId2 = other.LegId2;
      }
      if (other.FillQuan2 != 0) {
        FillQuan2 = other.FillQuan2;
      }
      if (other.AvgFillPrice2 != 0D) {
        AvgFillPrice2 = other.AvgFillPrice2;
      }
      if (other.Vega2 != 0F) {
        Vega2 = other.Vega2;
      }
      if (other.RefUPrc2 != 0D) {
        RefUPrc2 = other.RefUPrc2;
      }
      if (other.RefDelta2 != 0F) {
        RefDelta2 = other.RefDelta2;
      }
      if (other.RefEarnCnt2 != 0) {
        RefEarnCnt2 = other.RefEarnCnt2;
      }
      if (other.LiveUPrc2 != 0D) {
        LiveUPrc2 = other.LiveUPrc2;
      }
      if (other.PriceFormat2 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat2 = other.PriceFormat2;
      }
      if (other.LegCpx2 != 0F) {
        LegCpx2 = other.LegCpx2;
      }
      if (other.LegCsz2 != 0) {
        LegCsz2 = other.LegCsz2;
      }
      if (other.LegCex2 != 0) {
        LegCex2 = other.LegCex2;
      }
      if (other.secKey3_ != null) {
        if (secKey3_ == null) {
          SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey3.MergeFrom(other.SecKey3);
      }
      if (other.SecType3 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType3 = other.SecType3;
      }
      if (other.Ratio3 != 0) {
        Ratio3 = other.Ratio3;
      }
      if (other.Side3 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side3 = other.Side3;
      }
      if (other.PositionType3 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType3 = other.PositionType3;
      }
      if (other.LegId3 != 0L) {
        LegId3 = other.LegId3;
      }
      if (other.FillQuan3 != 0) {
        FillQuan3 = other.FillQuan3;
      }
      if (other.AvgFillPrice3 != 0D) {
        AvgFillPrice3 = other.AvgFillPrice3;
      }
      if (other.Vega3 != 0F) {
        Vega3 = other.Vega3;
      }
      if (other.RefUPrc3 != 0D) {
        RefUPrc3 = other.RefUPrc3;
      }
      if (other.RefDelta3 != 0F) {
        RefDelta3 = other.RefDelta3;
      }
      if (other.RefEarnCnt3 != 0) {
        RefEarnCnt3 = other.RefEarnCnt3;
      }
      if (other.LiveUPrc3 != 0D) {
        LiveUPrc3 = other.LiveUPrc3;
      }
      if (other.PriceFormat3 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat3 = other.PriceFormat3;
      }
      if (other.LegCpx3 != 0F) {
        LegCpx3 = other.LegCpx3;
      }
      if (other.LegCsz3 != 0) {
        LegCsz3 = other.LegCsz3;
      }
      if (other.LegCex3 != 0) {
        LegCex3 = other.LegCex3;
      }
      if (other.secKey4_ != null) {
        if (secKey4_ == null) {
          SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey4.MergeFrom(other.SecKey4);
      }
      if (other.SecType4 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType4 = other.SecType4;
      }
      if (other.Ratio4 != 0) {
        Ratio4 = other.Ratio4;
      }
      if (other.Side4 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side4 = other.Side4;
      }
      if (other.PositionType4 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType4 = other.PositionType4;
      }
      if (other.LegId4 != 0L) {
        LegId4 = other.LegId4;
      }
      if (other.FillQuan4 != 0) {
        FillQuan4 = other.FillQuan4;
      }
      if (other.AvgFillPrice4 != 0D) {
        AvgFillPrice4 = other.AvgFillPrice4;
      }
      if (other.Vega4 != 0F) {
        Vega4 = other.Vega4;
      }
      if (other.RefUPrc4 != 0D) {
        RefUPrc4 = other.RefUPrc4;
      }
      if (other.RefDelta4 != 0F) {
        RefDelta4 = other.RefDelta4;
      }
      if (other.RefEarnCnt4 != 0) {
        RefEarnCnt4 = other.RefEarnCnt4;
      }
      if (other.LiveUPrc4 != 0D) {
        LiveUPrc4 = other.LiveUPrc4;
      }
      if (other.PriceFormat4 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat4 = other.PriceFormat4;
      }
      if (other.LegCpx4 != 0F) {
        LegCpx4 = other.LegCpx4;
      }
      if (other.LegCsz4 != 0) {
        LegCsz4 = other.LegCsz4;
      }
      if (other.LegCex4 != 0) {
        LegCex4 = other.LegCex4;
      }
      if (other.secKey5_ != null) {
        if (secKey5_ == null) {
          SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey5.MergeFrom(other.SecKey5);
      }
      if (other.SecType5 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType5 = other.SecType5;
      }
      if (other.Ratio5 != 0) {
        Ratio5 = other.Ratio5;
      }
      if (other.Side5 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side5 = other.Side5;
      }
      if (other.PositionType5 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType5 = other.PositionType5;
      }
      if (other.LegId5 != 0L) {
        LegId5 = other.LegId5;
      }
      if (other.FillQuan5 != 0) {
        FillQuan5 = other.FillQuan5;
      }
      if (other.AvgFillPrice5 != 0D) {
        AvgFillPrice5 = other.AvgFillPrice5;
      }
      if (other.Vega5 != 0F) {
        Vega5 = other.Vega5;
      }
      if (other.RefUPrc5 != 0D) {
        RefUPrc5 = other.RefUPrc5;
      }
      if (other.RefDelta5 != 0F) {
        RefDelta5 = other.RefDelta5;
      }
      if (other.RefEarnCnt5 != 0) {
        RefEarnCnt5 = other.RefEarnCnt5;
      }
      if (other.LiveUPrc5 != 0D) {
        LiveUPrc5 = other.LiveUPrc5;
      }
      if (other.PriceFormat5 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat5 = other.PriceFormat5;
      }
      if (other.LegCpx5 != 0F) {
        LegCpx5 = other.LegCpx5;
      }
      if (other.LegCsz5 != 0) {
        LegCsz5 = other.LegCsz5;
      }
      if (other.LegCex5 != 0) {
        LegCex5 = other.LegCex5;
      }
      if (other.secKey6_ != null) {
        if (secKey6_ == null) {
          SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey6.MergeFrom(other.SecKey6);
      }
      if (other.SecType6 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType6 = other.SecType6;
      }
      if (other.Ratio6 != 0) {
        Ratio6 = other.Ratio6;
      }
      if (other.Side6 != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side6 = other.Side6;
      }
      if (other.PositionType6 != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType6 = other.PositionType6;
      }
      if (other.LegId6 != 0L) {
        LegId6 = other.LegId6;
      }
      if (other.FillQuan6 != 0) {
        FillQuan6 = other.FillQuan6;
      }
      if (other.AvgFillPrice6 != 0D) {
        AvgFillPrice6 = other.AvgFillPrice6;
      }
      if (other.Vega6 != 0F) {
        Vega6 = other.Vega6;
      }
      if (other.RefUPrc6 != 0D) {
        RefUPrc6 = other.RefUPrc6;
      }
      if (other.RefDelta6 != 0F) {
        RefDelta6 = other.RefDelta6;
      }
      if (other.RefEarnCnt6 != 0) {
        RefEarnCnt6 = other.RefEarnCnt6;
      }
      if (other.LiveUPrc6 != 0D) {
        LiveUPrc6 = other.LiveUPrc6;
      }
      if (other.PriceFormat6 != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat6 = other.PriceFormat6;
      }
      if (other.LegCpx6 != 0F) {
        LegCpx6 = other.LegCpx6;
      }
      if (other.LegCsz6 != 0) {
        LegCsz6 = other.LegCsz6;
      }
      if (other.LegCex6 != 0) {
        LegCex6 = other.LegCex6;
      }
      if (other.MlegVega != 0F) {
        MlegVega = other.MlegVega;
      }
      if (other.MlegWtVega != 0F) {
        MlegWtVega = other.MlegWtVega;
      }
      if (other.MlegDelta != 0F) {
        MlegDelta = other.MlegDelta;
      }
      if (other.MlegGamma != 0F) {
        MlegGamma = other.MlegGamma;
      }
      if (other.MlegTheta != 0F) {
        MlegTheta = other.MlegTheta;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.OrderSize != 0) {
        OrderSize = other.OrderSize;
      }
      if (other.OrderActiveSize != 0) {
        OrderActiveSize = other.OrderActiveSize;
      }
      if (other.LeavesQuantity != 0) {
        LeavesQuantity = other.LeavesQuantity;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        SpdrRejectReason = other.SpdrRejectReason;
      }
      if (other.SpdrCloseDetailTxt.Length != 0) {
        SpdrCloseDetailTxt = other.SpdrCloseDetailTxt;
      }
      if (other.OpenLegs != 0) {
        OpenLegs = other.OpenLegs;
      }
      if (other.CumSquareQty != 0) {
        CumSquareQty = other.CumSquareQty;
      }
      if (other.AvgSquarePrc != 0D) {
        AvgSquarePrc = other.AvgSquarePrc;
      }
      if (other.CumPartialQty != 0) {
        CumPartialQty = other.CumPartialQty;
      }
      if (other.FillVega != 0F) {
        FillVega = other.FillVega;
      }
      if (other.FillWtVega != 0F) {
        FillWtVega = other.FillWtVega;
      }
      if (other.FillDelta != 0F) {
        FillDelta = other.FillDelta;
      }
      if (other.FillDDelta != 0F) {
        FillDDelta = other.FillDDelta;
      }
      if (other.FillGamma != 0F) {
        FillGamma = other.FillGamma;
      }
      if (other.FillTheta != 0F) {
        FillTheta = other.FillTheta;
      }
      if (other.lastFillDttm_ != null) {
        if (lastFillDttm_ == null) {
          LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastFillDttm.MergeFrom(other.LastFillDttm);
      }
      if (other.RiskLimitSize != 0) {
        RiskLimitSize = other.RiskLimitSize;
      }
      if (other.RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        RiskLimitDesc = other.RiskLimitDesc;
      }
      if (other.RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        RiskLimitLevel = other.RiskLimitLevel;
      }
      if (other.MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        MaxProgress = other.MaxProgress;
      }
      if (other.MaxProgressDetail.Length != 0) {
        MaxProgressDetail = other.MaxProgressDetail;
      }
      if (other.maxProgressTime_ != null) {
        if (maxProgressTime_ == null) {
          MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxProgressTime.MergeFrom(other.MaxProgressTime);
      }
      if (other.AlgoState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        AlgoState = other.AlgoState;
      }
      if (other.AlgoCounter != 0) {
        AlgoCounter = other.AlgoCounter;
      }
      if (other.MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        MakeState = other.MakeState;
      }
      if (other.MakeCounter != 0) {
        MakeCounter = other.MakeCounter;
      }
      if (other.MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        MktRespState = other.MktRespState;
      }
      if (other.MktRespCounter != 0) {
        MktRespCounter = other.MktRespCounter;
      }
      if (other.BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        BrokerState = other.BrokerState;
      }
      if (other.BrokerCounter != 0) {
        BrokerCounter = other.BrokerCounter;
      }
      if (other.SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        SpdrMktState = other.SpdrMktState;
      }
      if (other.SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        SpdrBrokerStatus = other.SpdrBrokerStatus;
      }
      if (other.ProgressRuleDetail.Length != 0) {
        ProgressRuleDetail = other.ProgressRuleDetail;
      }
      if (other.lastChildRejectDttm_ != null) {
        if (lastChildRejectDttm_ == null) {
          LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastChildRejectDttm.MergeFrom(other.LastChildRejectDttm);
      }
      if (other.LastChildRejectText.Length != 0) {
        LastChildRejectText = other.LastChildRejectText;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.TriggerGroupId != 0L) {
        TriggerGroupId = other.TriggerGroupId;
      }
      if (other.HedgeGroupingCode != 0L) {
        HedgeGroupingCode = other.HedgeGroupingCode;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        HedgeInstrument = other.HedgeInstrument;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        HedgeSecType = other.HedgeSecType;
      }
      if (other.HedgeBetaRatio != 0F) {
        HedgeBetaRatio = other.HedgeBetaRatio;
      }
      if (other.HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        HedgeScope = other.HedgeScope;
      }
      if (other.ExternHedgeExDest.Length != 0) {
        ExternHedgeExDest = other.ExternHedgeExDest;
      }
      if (other.ExternHedgeParams.Length != 0) {
        ExternHedgeParams = other.ExternHedgeParams;
      }
      if (other.BestWayPrc != 0F) {
        BestWayPrc = other.BestWayPrc;
      }
      if (other.WrstWayPrc != 0F) {
        WrstWayPrc = other.WrstWayPrc;
      }
      if (other.BestWaySz != 0) {
        BestWaySz = other.BestWaySz;
      }
      if (other.WrstWaySz != 0) {
        WrstWaySz = other.WrstWaySz;
      }
      if (other.SurfacePrc != 0F) {
        SurfacePrc = other.SurfacePrc;
      }
      if (other.SurfaceVol != 0F) {
        SurfaceVol = other.SurfaceVol;
      }
      if (other.SurfaceUPrc != 0F) {
        SurfaceUPrc = other.SurfaceUPrc;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.LimitRefUPrc != 0D) {
        LimitRefUPrc = other.LimitRefUPrc;
      }
      if (other.LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        LimitErr = other.LimitErr;
      }
      if (other.MakeLimitPrice != 0D) {
        MakeLimitPrice = other.MakeLimitPrice;
      }
      if (other.TakeLimitPrice != 0D) {
        TakeLimitPrice = other.TakeLimitPrice;
      }
      if (other.CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        CxlUPrcRange = other.CxlUPrcRange;
      }
      if (other.MinUBid != 0F) {
        MinUBid = other.MinUBid;
      }
      if (other.MaxUAsk != 0F) {
        MaxUAsk = other.MaxUAsk;
      }
      if (other.MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        MinMaxType = other.MinMaxType;
      }
      if (other.LeadSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        LeadSide = other.LeadSide;
      }
      if (other.MaxCompletionSlippage != 0D) {
        MaxCompletionSlippage = other.MaxCompletionSlippage;
      }
      if (other.OrderRefPremium != 0F) {
        OrderRefPremium = other.OrderRefPremium;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.SpdrComment.Length != 0) {
        SpdrComment = other.SpdrComment;
      }
      if (other.TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        TakeReachRule = other.TakeReachRule;
      }
      if (other.MaxExposureSize != 0) {
        MaxExposureSize = other.MaxExposureSize;
      }
      if (other.NumMakeExchanges != 0) {
        NumMakeExchanges = other.NumMakeExchanges;
      }
      if (other.PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        PublicSize = other.PublicSize;
      }
      if (other.ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        ProgressRule = other.ProgressRule;
      }
      if (other.ProgressSliceCnt != 0) {
        ProgressSliceCnt = other.ProgressSliceCnt;
      }
      if (other.ProgressExposeTime != 0) {
        ProgressExposeTime = other.ProgressExposeTime;
      }
      if (other.MaxChildOrders != 0) {
        MaxChildOrders = other.MaxChildOrders;
      }
      if (other.ExchMask != 0) {
        ExchMask = other.ExchMask;
      }
      if (other.MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        MarketSession = other.MarketSession;
      }
      if (other.startDttm_ != null) {
        if (startDttm_ == null) {
          StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDttm.MergeFrom(other.StartDttm);
      }
      if (other.OrderDuration != 0) {
        OrderDuration = other.OrderDuration;
      }
      if (other.ActiveDuration != 0) {
        ActiveDuration = other.ActiveDuration;
      }
      if (other.goodTillDttm_ != null) {
        if (goodTillDttm_ == null) {
          GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        GoodTillDttm.MergeFrom(other.GoodTillDttm);
      }
      if (other.expireDttm_ != null) {
        if (expireDttm_ == null) {
          ExpireDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpireDttm.MergeFrom(other.ExpireDttm);
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.BlockVisibility != global::Spiderrock.Protobuf.BlockVisibility.Unspecified) {
        BlockVisibility = other.BlockVisibility;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.OrderPrcLimit != 0D) {
        OrderPrcLimit = other.OrderPrcLimit;
      }
      if (other.OrderRefUPrc != 0D) {
        OrderRefUPrc = other.OrderRefUPrc;
      }
      if (other.OrderRefDe != 0F) {
        OrderRefDe = other.OrderRefDe;
      }
      if (other.OrderRefGa != 0F) {
        OrderRefGa = other.OrderRefGa;
      }
      if (other.OrderPrcOffset != 0D) {
        OrderPrcOffset = other.OrderPrcOffset;
      }
      if (other.TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        TakeLimitClass = other.TakeLimitClass;
      }
      if (other.TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        TakeAlphaType = other.TakeAlphaType;
      }
      if (other.TakeAlphaFactor != 0F) {
        TakeAlphaFactor = other.TakeAlphaFactor;
      }
      if (other.TakeAlphaProbability != 0F) {
        TakeAlphaProbability = other.TakeAlphaProbability;
      }
      if (other.TakeSurfPrcOffset != 0D) {
        TakeSurfPrcOffset = other.TakeSurfPrcOffset;
      }
      if (other.TakeSurfVolOffset != 0F) {
        TakeSurfVolOffset = other.TakeSurfVolOffset;
      }
      if (other.TakeSurfWidOffset != 0F) {
        TakeSurfWidOffset = other.TakeSurfWidOffset;
      }
      if (other.MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        MakeLimitClass = other.MakeLimitClass;
      }
      if (other.MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        MakeAlphaType = other.MakeAlphaType;
      }
      if (other.MakeAlphaFactor != 0F) {
        MakeAlphaFactor = other.MakeAlphaFactor;
      }
      if (other.MakeAlphaProbability != 0F) {
        MakeAlphaProbability = other.MakeAlphaProbability;
      }
      if (other.MakeSurfPrcOffset != 0D) {
        MakeSurfPrcOffset = other.MakeSurfPrcOffset;
      }
      if (other.MakeSurfVolOffset != 0F) {
        MakeSurfVolOffset = other.MakeSurfVolOffset;
      }
      if (other.MakeSurfWidOffset != 0F) {
        MakeSurfWidOffset = other.MakeSurfWidOffset;
      }
      if (other.OrderRefEventMult != 0F) {
        OrderRefEventMult = other.OrderRefEventMult;
      }
      if (other.orderRefEventDttm_ != null) {
        if (orderRefEventDttm_ == null) {
          OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderRefEventDttm.MergeFrom(other.OrderRefEventDttm);
      }
      if (other.MlegProbLimit != 0F) {
        MlegProbLimit = other.MlegProbLimit;
      }
      if (other.MlegSurfOffset != 0F) {
        MlegSurfOffset = other.MlegSurfOffset;
      }
      if (other.ExternExDest.Length != 0) {
        ExternExDest = other.ExternExDest;
      }
      if (other.orderDttm_ != null) {
        if (orderDttm_ == null) {
          OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderDttm.MergeFrom(other.OrderDttm);
      }
      if (other.MinSurfVol != 0F) {
        MinSurfVol = other.MinSurfVol;
      }
      if (other.MaxSurfVol != 0F) {
        MaxSurfVol = other.MaxSurfVol;
      }
      if (other.MinSurfPrc != 0F) {
        MinSurfPrc = other.MinSurfPrc;
      }
      if (other.MaxSurfPrc != 0F) {
        MaxSurfPrc = other.MaxSurfPrc;
      }
      if (other.MinSurfUPrc != 0F) {
        MinSurfUPrc = other.MinSurfUPrc;
      }
      if (other.MaxSurfUPrc != 0F) {
        MaxSurfUPrc = other.MaxSurfUPrc;
      }
      if (other.MinQteWidth != 0F) {
        MinQteWidth = other.MinQteWidth;
      }
      if (other.AvgQteWidth != 0F) {
        AvgQteWidth = other.AvgQteWidth;
      }
      if (other.CntQteWidth != 0) {
        CntQteWidth = other.CntQteWidth;
      }
      if (other.ArriveBid != 0D) {
        ArriveBid = other.ArriveBid;
      }
      if (other.ArriveAsk != 0D) {
        ArriveAsk = other.ArriveAsk;
      }
      if (other.TotalSeconds != 0F) {
        TotalSeconds = other.TotalSeconds;
      }
      if (other.WorkingSeconds != 0F) {
        WorkingSeconds = other.WorkingSeconds;
      }
      if (other.PrtActiveCnt != 0) {
        PrtActiveCnt = other.PrtActiveCnt;
      }
      if (other.PrtQtyActive != 0) {
        PrtQtyActive = other.PrtQtyActive;
      }
      if (other.CumExchFee != 0F) {
        CumExchFee = other.CumExchFee;
      }
      if (other.CumM10Pnl != 0F) {
        CumM10Pnl = other.CumM10Pnl;
      }
      if (other.CumArrivalPnl != 0F) {
        CumArrivalPnl = other.CumArrivalPnl;
      }
      if (other.UPrcDrift != 0F) {
        UPrcDrift = other.UPrcDrift;
      }
      if (other.SVolDrift != 0F) {
        SVolDrift = other.SVolDrift;
      }
      if (other.MaxGrpDayDDeltaLn != 0F) {
        MaxGrpDayDDeltaLn = other.MaxGrpDayDDeltaLn;
      }
      if (other.MaxGrpDayDDeltaSh != 0F) {
        MaxGrpDayDDeltaSh = other.MaxGrpDayDDeltaSh;
      }
      if (other.MaxGrpDayContractsLn != 0) {
        MaxGrpDayContractsLn = other.MaxGrpDayContractsLn;
      }
      if (other.MaxGrpDayContractsSh != 0) {
        MaxGrpDayContractsSh = other.MaxGrpDayContractsSh;
      }
      if (other.MaxGrpDayContractsAbs != 0) {
        MaxGrpDayContractsAbs = other.MaxGrpDayContractsAbs;
      }
      if (other.MaxGrpDayVegaLn != 0F) {
        MaxGrpDayVegaLn = other.MaxGrpDayVegaLn;
      }
      if (other.MaxGrpDayVegaSh != 0F) {
        MaxGrpDayVegaSh = other.MaxGrpDayVegaSh;
      }
      if (other.MaxGrpDayVegaAbs != 0F) {
        MaxGrpDayVegaAbs = other.MaxGrpDayVegaAbs;
      }
      if (other.GrpDayVegaRatio != 0F) {
        GrpDayVegaRatio = other.GrpDayVegaRatio;
      }
      if (other.MaxGrpDayRMetric1Ln != 0F) {
        MaxGrpDayRMetric1Ln = other.MaxGrpDayRMetric1Ln;
      }
      if (other.MaxGrpDayRMetric1Sh != 0F) {
        MaxGrpDayRMetric1Sh = other.MaxGrpDayRMetric1Sh;
      }
      if (other.MaxGrpDayRMetric1Abs != 0F) {
        MaxGrpDayRMetric1Abs = other.MaxGrpDayRMetric1Abs;
      }
      if (other.GrpDayRMetric1Ratio != 0F) {
        GrpDayRMetric1Ratio = other.GrpDayRMetric1Ratio;
      }
      if (other.Cpx1 != 0F) {
        Cpx1 = other.Cpx1;
      }
      if (other.Csz1 != 0) {
        Csz1 = other.Csz1;
      }
      if (other.Cex1 != 0) {
        Cex1 = other.Cex1;
      }
      if (other.Cpx2 != 0F) {
        Cpx2 = other.Cpx2;
      }
      if (other.Csz2 != 0) {
        Csz2 = other.Csz2;
      }
      if (other.Cex2 != 0) {
        Cex2 = other.Cex2;
      }
      if (other.CMore != 0) {
        CMore = other.CMore;
      }
      if (other.NumNewOrders != 0) {
        NumNewOrders = other.NumNewOrders;
      }
      if (other.NumParentLimits != 0) {
        NumParentLimits = other.NumParentLimits;
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.NumUpdates != 0) {
        NumUpdates = other.NumUpdates;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 824: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 848: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 874: {
            AltOrderId = input.ReadString();
            break;
          }
          case 896: {
            PackageId = input.ReadInt64();
            break;
          }
          case 946: {
            AltAccnt = input.ReadString();
            break;
          }
          case 970: {
            AltUserName = input.ReadString();
            break;
          }
          case 992: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1016: {
            IsFlagged = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1040: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 1048: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 1056: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 1064: {
            StockSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1088: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1112: {
            LocateQuan = input.ReadInt32();
            break;
          }
          case 1138: {
            LocateFirm = input.ReadString();
            break;
          }
          case 1162: {
            LocatePool = input.ReadString();
            break;
          }
          case 1184: {
            StockShares = input.ReadInt32();
            break;
          }
          case 1208: {
            StockLegId = input.ReadInt64();
            break;
          }
          case 1232: {
            StockFillQuan = input.ReadInt32();
            break;
          }
          case 1257: {
            StockAvgFillPrice = input.ReadDouble();
            break;
          }
          case 1285: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 1309: {
            LiveUPrc = input.ReadFloat();
            break;
          }
          case 1328: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1357: {
            StockCpx = input.ReadFloat();
            break;
          }
          case 1376: {
            StockCsz = input.ReadInt32();
            break;
          }
          case 1400: {
            StockCex = input.ReadUInt32();
            break;
          }
          case 1424: {
            NumLegs = input.ReadInt32();
            break;
          }
          case 1450: {
            if (secKey1_ == null) {
              SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey1);
            break;
          }
          case 1472: {
            SecType1 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1496: {
            Ratio1 = input.ReadUInt32();
            break;
          }
          case 1520: {
            Side1 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1544: {
            PositionType1 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 1568: {
            LegId1 = input.ReadInt64();
            break;
          }
          case 1592: {
            FillQuan1 = input.ReadInt32();
            break;
          }
          case 1617: {
            AvgFillPrice1 = input.ReadDouble();
            break;
          }
          case 1645: {
            Vega1 = input.ReadFloat();
            break;
          }
          case 1665: {
            RefUPrc1 = input.ReadDouble();
            break;
          }
          case 1693: {
            RefDelta1 = input.ReadFloat();
            break;
          }
          case 1712: {
            RefEarnCnt1 = input.ReadInt32();
            break;
          }
          case 1737: {
            LiveUPrc1 = input.ReadDouble();
            break;
          }
          case 1760: {
            PriceFormat1 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1789: {
            LegCpx1 = input.ReadFloat();
            break;
          }
          case 1808: {
            LegCsz1 = input.ReadInt32();
            break;
          }
          case 1832: {
            LegCex1 = input.ReadUInt32();
            break;
          }
          case 1858: {
            if (secKey2_ == null) {
              SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey2);
            break;
          }
          case 1880: {
            SecType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1904: {
            Ratio2 = input.ReadUInt32();
            break;
          }
          case 1928: {
            Side2 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1952: {
            PositionType2 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 1976: {
            LegId2 = input.ReadInt64();
            break;
          }
          case 2000: {
            FillQuan2 = input.ReadInt32();
            break;
          }
          case 2025: {
            AvgFillPrice2 = input.ReadDouble();
            break;
          }
          case 2053: {
            Vega2 = input.ReadFloat();
            break;
          }
          case 2073: {
            RefUPrc2 = input.ReadDouble();
            break;
          }
          case 2101: {
            RefDelta2 = input.ReadFloat();
            break;
          }
          case 2120: {
            RefEarnCnt2 = input.ReadInt32();
            break;
          }
          case 2145: {
            LiveUPrc2 = input.ReadDouble();
            break;
          }
          case 2168: {
            PriceFormat2 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2197: {
            LegCpx2 = input.ReadFloat();
            break;
          }
          case 2216: {
            LegCsz2 = input.ReadInt32();
            break;
          }
          case 2240: {
            LegCex2 = input.ReadUInt32();
            break;
          }
          case 2266: {
            if (secKey3_ == null) {
              SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey3);
            break;
          }
          case 2288: {
            SecType3 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2312: {
            Ratio3 = input.ReadUInt32();
            break;
          }
          case 2336: {
            Side3 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2360: {
            PositionType3 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2384: {
            LegId3 = input.ReadInt64();
            break;
          }
          case 2408: {
            FillQuan3 = input.ReadInt32();
            break;
          }
          case 2433: {
            AvgFillPrice3 = input.ReadDouble();
            break;
          }
          case 2461: {
            Vega3 = input.ReadFloat();
            break;
          }
          case 2481: {
            RefUPrc3 = input.ReadDouble();
            break;
          }
          case 2509: {
            RefDelta3 = input.ReadFloat();
            break;
          }
          case 2528: {
            RefEarnCnt3 = input.ReadInt32();
            break;
          }
          case 2553: {
            LiveUPrc3 = input.ReadDouble();
            break;
          }
          case 2576: {
            PriceFormat3 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2605: {
            LegCpx3 = input.ReadFloat();
            break;
          }
          case 2624: {
            LegCsz3 = input.ReadInt32();
            break;
          }
          case 2648: {
            LegCex3 = input.ReadUInt32();
            break;
          }
          case 2674: {
            if (secKey4_ == null) {
              SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey4);
            break;
          }
          case 2696: {
            SecType4 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2720: {
            Ratio4 = input.ReadUInt32();
            break;
          }
          case 2744: {
            Side4 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2768: {
            PositionType4 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2792: {
            LegId4 = input.ReadInt64();
            break;
          }
          case 2816: {
            FillQuan4 = input.ReadInt32();
            break;
          }
          case 2841: {
            AvgFillPrice4 = input.ReadDouble();
            break;
          }
          case 2869: {
            Vega4 = input.ReadFloat();
            break;
          }
          case 2889: {
            RefUPrc4 = input.ReadDouble();
            break;
          }
          case 2917: {
            RefDelta4 = input.ReadFloat();
            break;
          }
          case 2936: {
            RefEarnCnt4 = input.ReadInt32();
            break;
          }
          case 2961: {
            LiveUPrc4 = input.ReadDouble();
            break;
          }
          case 2984: {
            PriceFormat4 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3013: {
            LegCpx4 = input.ReadFloat();
            break;
          }
          case 3032: {
            LegCsz4 = input.ReadInt32();
            break;
          }
          case 3056: {
            LegCex4 = input.ReadUInt32();
            break;
          }
          case 3082: {
            if (secKey5_ == null) {
              SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey5);
            break;
          }
          case 3104: {
            SecType5 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 3128: {
            Ratio5 = input.ReadUInt32();
            break;
          }
          case 3152: {
            Side5 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3176: {
            PositionType5 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3200: {
            LegId5 = input.ReadInt64();
            break;
          }
          case 3224: {
            FillQuan5 = input.ReadInt32();
            break;
          }
          case 3249: {
            AvgFillPrice5 = input.ReadDouble();
            break;
          }
          case 3277: {
            Vega5 = input.ReadFloat();
            break;
          }
          case 3297: {
            RefUPrc5 = input.ReadDouble();
            break;
          }
          case 3325: {
            RefDelta5 = input.ReadFloat();
            break;
          }
          case 3344: {
            RefEarnCnt5 = input.ReadInt32();
            break;
          }
          case 3369: {
            LiveUPrc5 = input.ReadDouble();
            break;
          }
          case 3392: {
            PriceFormat5 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3421: {
            LegCpx5 = input.ReadFloat();
            break;
          }
          case 3440: {
            LegCsz5 = input.ReadInt32();
            break;
          }
          case 3464: {
            LegCex5 = input.ReadUInt32();
            break;
          }
          case 3490: {
            if (secKey6_ == null) {
              SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey6);
            break;
          }
          case 3512: {
            SecType6 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 3536: {
            Ratio6 = input.ReadUInt32();
            break;
          }
          case 3560: {
            Side6 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3584: {
            PositionType6 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3608: {
            LegId6 = input.ReadInt64();
            break;
          }
          case 3632: {
            FillQuan6 = input.ReadInt32();
            break;
          }
          case 3657: {
            AvgFillPrice6 = input.ReadDouble();
            break;
          }
          case 3685: {
            Vega6 = input.ReadFloat();
            break;
          }
          case 3705: {
            RefUPrc6 = input.ReadDouble();
            break;
          }
          case 3733: {
            RefDelta6 = input.ReadFloat();
            break;
          }
          case 3752: {
            RefEarnCnt6 = input.ReadInt32();
            break;
          }
          case 3777: {
            LiveUPrc6 = input.ReadDouble();
            break;
          }
          case 3800: {
            PriceFormat6 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3829: {
            LegCpx6 = input.ReadFloat();
            break;
          }
          case 3848: {
            LegCsz6 = input.ReadInt32();
            break;
          }
          case 3872: {
            LegCex6 = input.ReadUInt32();
            break;
          }
          case 3901: {
            MlegVega = input.ReadFloat();
            break;
          }
          case 3925: {
            MlegWtVega = input.ReadFloat();
            break;
          }
          case 3949: {
            MlegDelta = input.ReadFloat();
            break;
          }
          case 3973: {
            MlegGamma = input.ReadFloat();
            break;
          }
          case 3997: {
            MlegTheta = input.ReadFloat();
            break;
          }
          case 4018: {
            Description = input.ReadString();
            break;
          }
          case 4040: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 4064: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 4088: {
            LeavesQuantity = input.ReadInt32();
            break;
          }
          case 4112: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 4136: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 4160: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 4186: {
            SpdrCloseDetailTxt = input.ReadString();
            break;
          }
          case 4208: {
            OpenLegs = input.ReadInt32();
            break;
          }
          case 4232: {
            CumSquareQty = input.ReadInt32();
            break;
          }
          case 4257: {
            AvgSquarePrc = input.ReadDouble();
            break;
          }
          case 4280: {
            CumPartialQty = input.ReadInt32();
            break;
          }
          case 4309: {
            FillVega = input.ReadFloat();
            break;
          }
          case 4333: {
            FillWtVega = input.ReadFloat();
            break;
          }
          case 4357: {
            FillDelta = input.ReadFloat();
            break;
          }
          case 4381: {
            FillDDelta = input.ReadFloat();
            break;
          }
          case 4405: {
            FillGamma = input.ReadFloat();
            break;
          }
          case 4429: {
            FillTheta = input.ReadFloat();
            break;
          }
          case 4450: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 4472: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 4496: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 4520: {
            MaxProgress = (global::Spiderrock.Protobuf.MaxProgress) input.ReadEnum();
            break;
          }
          case 4546: {
            MaxProgressDetail = input.ReadString();
            break;
          }
          case 4570: {
            if (maxProgressTime_ == null) {
              MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxProgressTime);
            break;
          }
          case 4592: {
            AlgoState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 4616: {
            AlgoCounter = input.ReadInt32();
            break;
          }
          case 4640: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 4664: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 4688: {
            MktRespState = (global::Spiderrock.Protobuf.MktRespState) input.ReadEnum();
            break;
          }
          case 4712: {
            MktRespCounter = input.ReadInt32();
            break;
          }
          case 4736: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 4760: {
            BrokerCounter = input.ReadInt32();
            break;
          }
          case 4784: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 4808: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 4834: {
            ProgressRuleDetail = input.ReadString();
            break;
          }
          case 4858: {
            if (lastChildRejectDttm_ == null) {
              LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastChildRejectDttm);
            break;
          }
          case 4882: {
            LastChildRejectText = input.ReadString();
            break;
          }
          case 4904: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 4928: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 4952: {
            HedgeGroupingCode = input.ReadInt64();
            break;
          }
          case 4976: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 5000: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 5026: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 5048: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 5077: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 5096: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 5122: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 5146: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 5173: {
            BestWayPrc = input.ReadFloat();
            break;
          }
          case 5197: {
            WrstWayPrc = input.ReadFloat();
            break;
          }
          case 5216: {
            BestWaySz = input.ReadInt32();
            break;
          }
          case 5240: {
            WrstWaySz = input.ReadInt32();
            break;
          }
          case 5269: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 5293: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 5317: {
            SurfaceUPrc = input.ReadFloat();
            break;
          }
          case 5337: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 5345: {
            LimitRefUPrc = input.ReadDouble();
            break;
          }
          case 5360: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 5385: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 5409: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 5432: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 5461: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 5485: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 5504: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 5528: {
            LeadSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 5553: {
            MaxCompletionSlippage = input.ReadDouble();
            break;
          }
          case 5581: {
            OrderRefPremium = input.ReadFloat();
            break;
          }
          case 5602: {
            Strategy = input.ReadString();
            break;
          }
          case 5626: {
            UserName = input.ReadString();
            break;
          }
          case 5674: {
            SpdrComment = input.ReadString();
            break;
          }
          case 5696: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 5720: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 5744: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 5768: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 5792: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 5816: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 5840: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 5864: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 5888: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 5938: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 5960: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 5986: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 6008: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 6032: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 6056: {
            BlockVisibility = (global::Spiderrock.Protobuf.BlockVisibility) input.ReadEnum();
            break;
          }
          case 6080: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 6105: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 6129: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 6157: {
            OrderRefDe = input.ReadFloat();
            break;
          }
          case 6181: {
            OrderRefGa = input.ReadFloat();
            break;
          }
          case 6201: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 6224: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 6248: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 6277: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 6301: {
            TakeAlphaProbability = input.ReadFloat();
            break;
          }
          case 6321: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 6349: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 6373: {
            TakeSurfWidOffset = input.ReadFloat();
            break;
          }
          case 6392: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 6416: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 6445: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 6469: {
            MakeAlphaProbability = input.ReadFloat();
            break;
          }
          case 6489: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 6517: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 6541: {
            MakeSurfWidOffset = input.ReadFloat();
            break;
          }
          case 6565: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 6586: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 6613: {
            MlegProbLimit = input.ReadFloat();
            break;
          }
          case 6637: {
            MlegSurfOffset = input.ReadFloat();
            break;
          }
          case 6658: {
            ExternExDest = input.ReadString();
            break;
          }
          case 6682: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 6709: {
            MinSurfVol = input.ReadFloat();
            break;
          }
          case 6733: {
            MaxSurfVol = input.ReadFloat();
            break;
          }
          case 6757: {
            MinSurfPrc = input.ReadFloat();
            break;
          }
          case 6781: {
            MaxSurfPrc = input.ReadFloat();
            break;
          }
          case 6805: {
            MinSurfUPrc = input.ReadFloat();
            break;
          }
          case 6829: {
            MaxSurfUPrc = input.ReadFloat();
            break;
          }
          case 6853: {
            MinQteWidth = input.ReadFloat();
            break;
          }
          case 6877: {
            AvgQteWidth = input.ReadFloat();
            break;
          }
          case 6896: {
            CntQteWidth = input.ReadInt32();
            break;
          }
          case 6921: {
            ArriveBid = input.ReadDouble();
            break;
          }
          case 6945: {
            ArriveAsk = input.ReadDouble();
            break;
          }
          case 6973: {
            TotalSeconds = input.ReadFloat();
            break;
          }
          case 6997: {
            WorkingSeconds = input.ReadFloat();
            break;
          }
          case 7016: {
            PrtActiveCnt = input.ReadInt32();
            break;
          }
          case 7040: {
            PrtQtyActive = input.ReadInt32();
            break;
          }
          case 7069: {
            CumExchFee = input.ReadFloat();
            break;
          }
          case 7093: {
            CumM10Pnl = input.ReadFloat();
            break;
          }
          case 7117: {
            CumArrivalPnl = input.ReadFloat();
            break;
          }
          case 7141: {
            UPrcDrift = input.ReadFloat();
            break;
          }
          case 7165: {
            SVolDrift = input.ReadFloat();
            break;
          }
          case 7573: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 7597: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 7645: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 7669: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 7693: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 7717: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 7832: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 7856: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 7880: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 8005: {
            Cpx1 = input.ReadFloat();
            break;
          }
          case 8024: {
            Csz1 = input.ReadInt32();
            break;
          }
          case 8048: {
            Cex1 = input.ReadUInt32();
            break;
          }
          case 8077: {
            Cpx2 = input.ReadFloat();
            break;
          }
          case 8096: {
            Csz2 = input.ReadInt32();
            break;
          }
          case 8120: {
            Cex2 = input.ReadUInt32();
            break;
          }
          case 8144: {
            CMore = input.ReadInt32();
            break;
          }
          case 8168: {
            NumNewOrders = input.ReadInt32();
            break;
          }
          case 8192: {
            NumParentLimits = input.ReadUInt32();
            break;
          }
          case 8218: {
            UserData1 = input.ReadString();
            break;
          }
          case 8242: {
            UserData2 = input.ReadString();
            break;
          }
          case 8264: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 8290: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 8298: {
            EngineName = input.ReadString();
            break;
          }
          case 8314: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 8320: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 8333: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 8341: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 8349: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 8357: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 8360: {
            ModifyNumber = input.ReadInt64();
            break;
          }
          case 8368: {
            StartType = (global::Spiderrock.Protobuf.StartType) input.ReadEnum();
            break;
          }
          case 8376: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 8384: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 8394: {
            if (expireDttm_ == null) {
              ExpireDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireDttm);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrMLegBrkrState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 824: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 848: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 874: {
            AltOrderId = input.ReadString();
            break;
          }
          case 896: {
            PackageId = input.ReadInt64();
            break;
          }
          case 946: {
            AltAccnt = input.ReadString();
            break;
          }
          case 970: {
            AltUserName = input.ReadString();
            break;
          }
          case 992: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1016: {
            IsFlagged = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1040: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 1048: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 1056: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 1064: {
            StockSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1088: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1112: {
            LocateQuan = input.ReadInt32();
            break;
          }
          case 1138: {
            LocateFirm = input.ReadString();
            break;
          }
          case 1162: {
            LocatePool = input.ReadString();
            break;
          }
          case 1184: {
            StockShares = input.ReadInt32();
            break;
          }
          case 1208: {
            StockLegId = input.ReadInt64();
            break;
          }
          case 1232: {
            StockFillQuan = input.ReadInt32();
            break;
          }
          case 1257: {
            StockAvgFillPrice = input.ReadDouble();
            break;
          }
          case 1285: {
            RefUPrc = input.ReadFloat();
            break;
          }
          case 1309: {
            LiveUPrc = input.ReadFloat();
            break;
          }
          case 1328: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1357: {
            StockCpx = input.ReadFloat();
            break;
          }
          case 1376: {
            StockCsz = input.ReadInt32();
            break;
          }
          case 1400: {
            StockCex = input.ReadUInt32();
            break;
          }
          case 1424: {
            NumLegs = input.ReadInt32();
            break;
          }
          case 1450: {
            if (secKey1_ == null) {
              SecKey1 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey1);
            break;
          }
          case 1472: {
            SecType1 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1496: {
            Ratio1 = input.ReadUInt32();
            break;
          }
          case 1520: {
            Side1 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1544: {
            PositionType1 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 1568: {
            LegId1 = input.ReadInt64();
            break;
          }
          case 1592: {
            FillQuan1 = input.ReadInt32();
            break;
          }
          case 1617: {
            AvgFillPrice1 = input.ReadDouble();
            break;
          }
          case 1645: {
            Vega1 = input.ReadFloat();
            break;
          }
          case 1665: {
            RefUPrc1 = input.ReadDouble();
            break;
          }
          case 1693: {
            RefDelta1 = input.ReadFloat();
            break;
          }
          case 1712: {
            RefEarnCnt1 = input.ReadInt32();
            break;
          }
          case 1737: {
            LiveUPrc1 = input.ReadDouble();
            break;
          }
          case 1760: {
            PriceFormat1 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1789: {
            LegCpx1 = input.ReadFloat();
            break;
          }
          case 1808: {
            LegCsz1 = input.ReadInt32();
            break;
          }
          case 1832: {
            LegCex1 = input.ReadUInt32();
            break;
          }
          case 1858: {
            if (secKey2_ == null) {
              SecKey2 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey2);
            break;
          }
          case 1880: {
            SecType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1904: {
            Ratio2 = input.ReadUInt32();
            break;
          }
          case 1928: {
            Side2 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1952: {
            PositionType2 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 1976: {
            LegId2 = input.ReadInt64();
            break;
          }
          case 2000: {
            FillQuan2 = input.ReadInt32();
            break;
          }
          case 2025: {
            AvgFillPrice2 = input.ReadDouble();
            break;
          }
          case 2053: {
            Vega2 = input.ReadFloat();
            break;
          }
          case 2073: {
            RefUPrc2 = input.ReadDouble();
            break;
          }
          case 2101: {
            RefDelta2 = input.ReadFloat();
            break;
          }
          case 2120: {
            RefEarnCnt2 = input.ReadInt32();
            break;
          }
          case 2145: {
            LiveUPrc2 = input.ReadDouble();
            break;
          }
          case 2168: {
            PriceFormat2 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2197: {
            LegCpx2 = input.ReadFloat();
            break;
          }
          case 2216: {
            LegCsz2 = input.ReadInt32();
            break;
          }
          case 2240: {
            LegCex2 = input.ReadUInt32();
            break;
          }
          case 2266: {
            if (secKey3_ == null) {
              SecKey3 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey3);
            break;
          }
          case 2288: {
            SecType3 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2312: {
            Ratio3 = input.ReadUInt32();
            break;
          }
          case 2336: {
            Side3 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2360: {
            PositionType3 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2384: {
            LegId3 = input.ReadInt64();
            break;
          }
          case 2408: {
            FillQuan3 = input.ReadInt32();
            break;
          }
          case 2433: {
            AvgFillPrice3 = input.ReadDouble();
            break;
          }
          case 2461: {
            Vega3 = input.ReadFloat();
            break;
          }
          case 2481: {
            RefUPrc3 = input.ReadDouble();
            break;
          }
          case 2509: {
            RefDelta3 = input.ReadFloat();
            break;
          }
          case 2528: {
            RefEarnCnt3 = input.ReadInt32();
            break;
          }
          case 2553: {
            LiveUPrc3 = input.ReadDouble();
            break;
          }
          case 2576: {
            PriceFormat3 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2605: {
            LegCpx3 = input.ReadFloat();
            break;
          }
          case 2624: {
            LegCsz3 = input.ReadInt32();
            break;
          }
          case 2648: {
            LegCex3 = input.ReadUInt32();
            break;
          }
          case 2674: {
            if (secKey4_ == null) {
              SecKey4 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey4);
            break;
          }
          case 2696: {
            SecType4 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2720: {
            Ratio4 = input.ReadUInt32();
            break;
          }
          case 2744: {
            Side4 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2768: {
            PositionType4 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2792: {
            LegId4 = input.ReadInt64();
            break;
          }
          case 2816: {
            FillQuan4 = input.ReadInt32();
            break;
          }
          case 2841: {
            AvgFillPrice4 = input.ReadDouble();
            break;
          }
          case 2869: {
            Vega4 = input.ReadFloat();
            break;
          }
          case 2889: {
            RefUPrc4 = input.ReadDouble();
            break;
          }
          case 2917: {
            RefDelta4 = input.ReadFloat();
            break;
          }
          case 2936: {
            RefEarnCnt4 = input.ReadInt32();
            break;
          }
          case 2961: {
            LiveUPrc4 = input.ReadDouble();
            break;
          }
          case 2984: {
            PriceFormat4 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3013: {
            LegCpx4 = input.ReadFloat();
            break;
          }
          case 3032: {
            LegCsz4 = input.ReadInt32();
            break;
          }
          case 3056: {
            LegCex4 = input.ReadUInt32();
            break;
          }
          case 3082: {
            if (secKey5_ == null) {
              SecKey5 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey5);
            break;
          }
          case 3104: {
            SecType5 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 3128: {
            Ratio5 = input.ReadUInt32();
            break;
          }
          case 3152: {
            Side5 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3176: {
            PositionType5 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3200: {
            LegId5 = input.ReadInt64();
            break;
          }
          case 3224: {
            FillQuan5 = input.ReadInt32();
            break;
          }
          case 3249: {
            AvgFillPrice5 = input.ReadDouble();
            break;
          }
          case 3277: {
            Vega5 = input.ReadFloat();
            break;
          }
          case 3297: {
            RefUPrc5 = input.ReadDouble();
            break;
          }
          case 3325: {
            RefDelta5 = input.ReadFloat();
            break;
          }
          case 3344: {
            RefEarnCnt5 = input.ReadInt32();
            break;
          }
          case 3369: {
            LiveUPrc5 = input.ReadDouble();
            break;
          }
          case 3392: {
            PriceFormat5 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3421: {
            LegCpx5 = input.ReadFloat();
            break;
          }
          case 3440: {
            LegCsz5 = input.ReadInt32();
            break;
          }
          case 3464: {
            LegCex5 = input.ReadUInt32();
            break;
          }
          case 3490: {
            if (secKey6_ == null) {
              SecKey6 = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey6);
            break;
          }
          case 3512: {
            SecType6 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 3536: {
            Ratio6 = input.ReadUInt32();
            break;
          }
          case 3560: {
            Side6 = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 3584: {
            PositionType6 = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 3608: {
            LegId6 = input.ReadInt64();
            break;
          }
          case 3632: {
            FillQuan6 = input.ReadInt32();
            break;
          }
          case 3657: {
            AvgFillPrice6 = input.ReadDouble();
            break;
          }
          case 3685: {
            Vega6 = input.ReadFloat();
            break;
          }
          case 3705: {
            RefUPrc6 = input.ReadDouble();
            break;
          }
          case 3733: {
            RefDelta6 = input.ReadFloat();
            break;
          }
          case 3752: {
            RefEarnCnt6 = input.ReadInt32();
            break;
          }
          case 3777: {
            LiveUPrc6 = input.ReadDouble();
            break;
          }
          case 3800: {
            PriceFormat6 = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3829: {
            LegCpx6 = input.ReadFloat();
            break;
          }
          case 3848: {
            LegCsz6 = input.ReadInt32();
            break;
          }
          case 3872: {
            LegCex6 = input.ReadUInt32();
            break;
          }
          case 3901: {
            MlegVega = input.ReadFloat();
            break;
          }
          case 3925: {
            MlegWtVega = input.ReadFloat();
            break;
          }
          case 3949: {
            MlegDelta = input.ReadFloat();
            break;
          }
          case 3973: {
            MlegGamma = input.ReadFloat();
            break;
          }
          case 3997: {
            MlegTheta = input.ReadFloat();
            break;
          }
          case 4018: {
            Description = input.ReadString();
            break;
          }
          case 4040: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 4064: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 4088: {
            LeavesQuantity = input.ReadInt32();
            break;
          }
          case 4112: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 4136: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 4160: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 4186: {
            SpdrCloseDetailTxt = input.ReadString();
            break;
          }
          case 4208: {
            OpenLegs = input.ReadInt32();
            break;
          }
          case 4232: {
            CumSquareQty = input.ReadInt32();
            break;
          }
          case 4257: {
            AvgSquarePrc = input.ReadDouble();
            break;
          }
          case 4280: {
            CumPartialQty = input.ReadInt32();
            break;
          }
          case 4309: {
            FillVega = input.ReadFloat();
            break;
          }
          case 4333: {
            FillWtVega = input.ReadFloat();
            break;
          }
          case 4357: {
            FillDelta = input.ReadFloat();
            break;
          }
          case 4381: {
            FillDDelta = input.ReadFloat();
            break;
          }
          case 4405: {
            FillGamma = input.ReadFloat();
            break;
          }
          case 4429: {
            FillTheta = input.ReadFloat();
            break;
          }
          case 4450: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 4472: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 4496: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 4520: {
            MaxProgress = (global::Spiderrock.Protobuf.MaxProgress) input.ReadEnum();
            break;
          }
          case 4546: {
            MaxProgressDetail = input.ReadString();
            break;
          }
          case 4570: {
            if (maxProgressTime_ == null) {
              MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxProgressTime);
            break;
          }
          case 4592: {
            AlgoState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 4616: {
            AlgoCounter = input.ReadInt32();
            break;
          }
          case 4640: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 4664: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 4688: {
            MktRespState = (global::Spiderrock.Protobuf.MktRespState) input.ReadEnum();
            break;
          }
          case 4712: {
            MktRespCounter = input.ReadInt32();
            break;
          }
          case 4736: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 4760: {
            BrokerCounter = input.ReadInt32();
            break;
          }
          case 4784: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 4808: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 4834: {
            ProgressRuleDetail = input.ReadString();
            break;
          }
          case 4858: {
            if (lastChildRejectDttm_ == null) {
              LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastChildRejectDttm);
            break;
          }
          case 4882: {
            LastChildRejectText = input.ReadString();
            break;
          }
          case 4904: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 4928: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 4952: {
            HedgeGroupingCode = input.ReadInt64();
            break;
          }
          case 4976: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 5000: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 5026: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 5048: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 5077: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 5096: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 5122: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 5146: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 5173: {
            BestWayPrc = input.ReadFloat();
            break;
          }
          case 5197: {
            WrstWayPrc = input.ReadFloat();
            break;
          }
          case 5216: {
            BestWaySz = input.ReadInt32();
            break;
          }
          case 5240: {
            WrstWaySz = input.ReadInt32();
            break;
          }
          case 5269: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 5293: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 5317: {
            SurfaceUPrc = input.ReadFloat();
            break;
          }
          case 5337: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 5345: {
            LimitRefUPrc = input.ReadDouble();
            break;
          }
          case 5360: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 5385: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 5409: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 5432: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 5461: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 5485: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 5504: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 5528: {
            LeadSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 5553: {
            MaxCompletionSlippage = input.ReadDouble();
            break;
          }
          case 5581: {
            OrderRefPremium = input.ReadFloat();
            break;
          }
          case 5602: {
            Strategy = input.ReadString();
            break;
          }
          case 5626: {
            UserName = input.ReadString();
            break;
          }
          case 5674: {
            SpdrComment = input.ReadString();
            break;
          }
          case 5696: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 5720: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 5744: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 5768: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 5792: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 5816: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 5840: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 5864: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 5888: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 5938: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 5960: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 5986: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 6008: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 6032: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 6056: {
            BlockVisibility = (global::Spiderrock.Protobuf.BlockVisibility) input.ReadEnum();
            break;
          }
          case 6080: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 6105: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 6129: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 6157: {
            OrderRefDe = input.ReadFloat();
            break;
          }
          case 6181: {
            OrderRefGa = input.ReadFloat();
            break;
          }
          case 6201: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 6224: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 6248: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 6277: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 6301: {
            TakeAlphaProbability = input.ReadFloat();
            break;
          }
          case 6321: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 6349: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 6373: {
            TakeSurfWidOffset = input.ReadFloat();
            break;
          }
          case 6392: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 6416: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 6445: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 6469: {
            MakeAlphaProbability = input.ReadFloat();
            break;
          }
          case 6489: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 6517: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 6541: {
            MakeSurfWidOffset = input.ReadFloat();
            break;
          }
          case 6565: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 6586: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 6613: {
            MlegProbLimit = input.ReadFloat();
            break;
          }
          case 6637: {
            MlegSurfOffset = input.ReadFloat();
            break;
          }
          case 6658: {
            ExternExDest = input.ReadString();
            break;
          }
          case 6682: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 6709: {
            MinSurfVol = input.ReadFloat();
            break;
          }
          case 6733: {
            MaxSurfVol = input.ReadFloat();
            break;
          }
          case 6757: {
            MinSurfPrc = input.ReadFloat();
            break;
          }
          case 6781: {
            MaxSurfPrc = input.ReadFloat();
            break;
          }
          case 6805: {
            MinSurfUPrc = input.ReadFloat();
            break;
          }
          case 6829: {
            MaxSurfUPrc = input.ReadFloat();
            break;
          }
          case 6853: {
            MinQteWidth = input.ReadFloat();
            break;
          }
          case 6877: {
            AvgQteWidth = input.ReadFloat();
            break;
          }
          case 6896: {
            CntQteWidth = input.ReadInt32();
            break;
          }
          case 6921: {
            ArriveBid = input.ReadDouble();
            break;
          }
          case 6945: {
            ArriveAsk = input.ReadDouble();
            break;
          }
          case 6973: {
            TotalSeconds = input.ReadFloat();
            break;
          }
          case 6997: {
            WorkingSeconds = input.ReadFloat();
            break;
          }
          case 7016: {
            PrtActiveCnt = input.ReadInt32();
            break;
          }
          case 7040: {
            PrtQtyActive = input.ReadInt32();
            break;
          }
          case 7069: {
            CumExchFee = input.ReadFloat();
            break;
          }
          case 7093: {
            CumM10Pnl = input.ReadFloat();
            break;
          }
          case 7117: {
            CumArrivalPnl = input.ReadFloat();
            break;
          }
          case 7141: {
            UPrcDrift = input.ReadFloat();
            break;
          }
          case 7165: {
            SVolDrift = input.ReadFloat();
            break;
          }
          case 7573: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 7597: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 7645: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 7669: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 7693: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 7717: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 7832: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 7856: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 7880: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 8005: {
            Cpx1 = input.ReadFloat();
            break;
          }
          case 8024: {
            Csz1 = input.ReadInt32();
            break;
          }
          case 8048: {
            Cex1 = input.ReadUInt32();
            break;
          }
          case 8077: {
            Cpx2 = input.ReadFloat();
            break;
          }
          case 8096: {
            Csz2 = input.ReadInt32();
            break;
          }
          case 8120: {
            Cex2 = input.ReadUInt32();
            break;
          }
          case 8144: {
            CMore = input.ReadInt32();
            break;
          }
          case 8168: {
            NumNewOrders = input.ReadInt32();
            break;
          }
          case 8192: {
            NumParentLimits = input.ReadUInt32();
            break;
          }
          case 8218: {
            UserData1 = input.ReadString();
            break;
          }
          case 8242: {
            UserData2 = input.ReadString();
            break;
          }
          case 8264: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 8290: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 8298: {
            EngineName = input.ReadString();
            break;
          }
          case 8314: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 8320: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 8333: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 8341: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 8349: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 8357: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 8360: {
            ModifyNumber = input.ReadInt64();
            break;
          }
          case 8368: {
            StartType = (global::Spiderrock.Protobuf.StartType) input.ReadEnum();
            break;
          }
          case 8376: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 8384: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 8394: {
            if (expireDttm_ == null) {
              ExpireDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireDttm);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrMLegBrkrState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrMLegBrkrState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          accnt_ = other.accnt_;
          spdrSource_ = other.spdrSource_;
          groupingCode_ = other.groupingCode_;
          orderSide_ = other.orderSide_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spdr_source" field.</summary>
        public const int SpdrSourceFieldNumber = 12;
        private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
          get { return spdrSource_; }
          set {
            spdrSource_ = value;
          }
        }

        /// <summary>Field number for the "grouping_code" field.</summary>
        public const int GroupingCodeFieldNumber = 13;
        private long groupingCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long GroupingCode {
          get { return groupingCode_; }
          set {
            groupingCode_ = value;
          }
        }

        /// <summary>Field number for the "order_side" field.</summary>
        public const int OrderSideFieldNumber = 14;
        private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell OrderSide {
          get { return orderSide_; }
          set {
            orderSide_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 15;
        private string clientFirm_ = "";
        /// <summary>
        /// SR client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (Accnt != other.Accnt) return false;
          if (SpdrSource != other.SpdrSource) return false;
          if (GroupingCode != other.GroupingCode) return false;
          if (OrderSide != other.OrderSide) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
          if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) OrderSide);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) OrderSide);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            SpdrSource = other.SpdrSource;
          }
          if (other.GroupingCode != 0L) {
            GroupingCode = other.GroupingCode;
          }
          if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            OrderSide = other.OrderSide;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 96: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 104: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 112: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 122: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 96: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 104: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 112: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 122: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
