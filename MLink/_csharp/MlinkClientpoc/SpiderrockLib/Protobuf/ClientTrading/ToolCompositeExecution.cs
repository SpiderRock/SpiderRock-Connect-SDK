// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/ToolCompositeExecution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/ToolCompositeExecution.proto</summary>
  public static partial class ToolCompositeExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/ToolCompositeExecution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ToolCompositeExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1Rvb2xDb21wb3NpdGVFeGVjdXRp",
            "b24ucHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29t",
            "bW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIuMp",
            "ChZUb29sQ29tcG9zaXRlRXhlY3V0aW9uEjMKBV9tZXRhGAEgASgLMiQuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESPgoEcGtleRgCIAEo",
            "CzIwLnNwaWRlcnJvY2sucHJvdG9idWYuVG9vbENvbXBvc2l0ZUV4ZWN1dGlv",
            "bi5QS2V5EjAKCnRyYWRlX2RhdGUYZCABKAsyHC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkRhdGVLZXkSDQoFYWNjbnQYZyABKAkSEwoLY2xpZW50X2Zpcm0YaiAB",
            "KAkSLwoHc2VjX2tleRhtIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0",
            "aW9uS2V5EjIKCHNlY190eXBlGHAgASgOMiAuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5TcGRyS2V5VHlwZRIqCgRzaWRlGHMgASgOMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5CdXlTZWxsEg8KB3ZlcnNpb24YdiABKAUSFQoNcGFyZW50X251bWJl",
            "chh5IAEoAxIaChJiYXNlX3BhcmVudF9udW1iZXIYfCABKAMSNAoLc3Bkcl9z",
            "b3VyY2UYfyABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJTb3VyY2US",
            "FgoNZ3JvdXBpbmdfY29kZRiCASABKAMSFgoNcmlza19ncm91cF9pZBiFASAB",
            "KAMSFQoMYWx0X29yZGVyX2lkGIgBIAEoCRIZChBzcmNfcm91dGluZ19jb2Rl",
            "GIsBIAEoCRISCgl1c2VyX25hbWUYjgEgASgJEg8KBnNlcnZlchiRASABKAkS",
            "LwoGdGlja2VyGJQBIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2Vy",
            "S2V5Eg8KBnNlY3RvchiXASABKAkSFAoLY2xpZW50X3RhZ3MYmgEgASgJEhAK",
            "B2luZF9udW0YnQEgASgFEhAKB3N1Yl9udW0YoAEgASgFEhAKB2dycF9udW0Y",
            "owEgASgFEhAKB25icl9udW0YpgEgASgFEi8KCGV4cF9jb2RlGKkBIAEoDjIc",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuRXhwQ29kZRIxCglza2V3X2NvZGUYrAEg",
            "ASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5Ta2V3Q29kZRIzCgp3aWR0aF9j",
            "b2RlGK8BIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYuV2lkdGhDb2RlEjcK",
            "DHByaWNlX2Zvcm1hdBiyASABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlBy",
            "aWNlRm9ybWF0EjkKDnVfcHJpY2VfZm9ybWF0GLUBIAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuUHJpY2VGb3JtYXQSDgoFeWVhcnMYuAEgASgCEjsKDnVu",
            "ZGVybGllcl90eXBlGLsBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuVW5k",
            "ZXJsaWVyVHlwZRIWCg1taW5fdGlja19zaXplGL4BIAEoAhIUCgtwb2ludF92",
            "YWx1ZRjBASABKAISNgoOcG9pbnRfY3VycmVuY3kYxAEgASgOMh0uc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5DdXJyZW5jeRIaChF1bmRlcmxpZXJzX3Blcl9jbhjH",
            "ASABKAUSOgoMcGFyZW50X3NoYXBlGMoBIAEoDjIjLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuU3Bkck9yZGVyU2hhcGUSPgoRcGFyZW50X2xpbWl0X3R5cGUYzQEg",
            "ASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyTGltaXRUeXBlEkAKEnBh",
            "cmVudF9saW1pdF9jbGFzcxjQASABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlNwZHJMaW1pdENsYXNzEkgKFXBhcmVudF9vcmRlcl9oYW5kbGluZxjTASAB",
            "KA4yKC5zcGlkZXJyb2NrLnByb3RvYnVmLlBhcmVudE9yZGVySGFuZGxpbmcS",
            "TAoXcGFyZW50X2JhbGFuY2VfaGFuZGxpbmcY1gEgASgOMiouc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5QYXJlbnRCYWxhbmNlSGFuZGxpbmcSGgoRcGFyZW50X29y",
            "ZGVyX3NpemUY2QEgASgFEjAKC3BhcmVudF9kdHRtGNwBIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoMcGFyZW50X3VNYXJrGN8BIAEoARIT",
            "CgpwYXJlbnRfYmlkGOIBIAEoARITCgpwYXJlbnRfYXNrGOUBIAEoARIYCg9w",
            "YXJlbnRfZmFpcl9wcmMY6AEgASgCEhoKEXBhcmVudF9mYWlyX3dpZHRoGOsB",
            "IAEoAhIZChBwYXJlbnRfbGltaXRfcHJjGO4BIAEoARIeChVwYXJlbnRfbGlt",
            "aXRfcmVmX3VQcmMY8QEgASgBEj4KEXBhcmVudF9zU2FsZV9mbGFnGPQBIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU2hvcnRTYWxlRmxhZxJAChRwYXJl",
            "bnRfcG9zaXRpb25fdHlwZRj3ASABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlBvc2l0aW9uVHlwZRIYCg9wYXJlbnRfc3RyYXRlZ3kY+gEgASgJEjoKEXBh",
            "cmVudF9hdXRvX2hlZGdlGP0BIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QXV0b0hlZGdlEi8KCmNoaWxkX2R0dG0YgAIgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIYCg9jaGlsZF9jbF9vcmRfaWQYgwIgASgJEhsKEmNo",
            "aWxkX3JvdXRpbmdfY29kZRiGAiABKAkSEwoKY2hpbGRfc2l6ZRiJAiABKAUS",
            "FAoLY2hpbGRfcHJpY2UYjAIgASgBEhMKCmNoaWxkX2V4Y2gYjwIgASgJEhYK",
            "DWNoaWxkX2V4X2Rlc3QYkgIgASgJEhMKCmNoaWxkX3VQcmMYlQIgASgBEhIK",
            "CWNoaWxkX2JpZBiYAiABKAESEgoJY2hpbGRfYXNrGJsCIAEoARIXCg5jaGls",
            "ZF9mYWlyX3ByYxieAiABKAISGQoQY2hpbGRfZmFpcl93aWR0aBihAiABKAIS",
            "EgoJY2hpbGRfdm9sGKQCIAEoAhITCgpjaGlsZF9wcm9iGKcCIAEoAhIYCg9j",
            "aGlsZF9saW1pdF9wcmMYqgIgASgBEh0KFGNoaWxkX2xpbWl0X3JlZl91UHJj",
            "GK0CIAEoARI+ChJjaGlsZF9hbGdvX2hhbmRsZXIYsAIgASgOMiEuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5DaGlsZEhhbmRsZXISHQoUY2hpbGRfb3JkZXJfaGFu",
            "ZGxpbmcYswIgASgJEkQKE2NoaWxkX2NyZWF0ZV9yZWFzb24YtgIgASgOMiYu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5DaGlsZENyZWF0ZVJlYXNvbhJEChNjaGls",
            "ZF9jYW5jZWxfcmVhc29uGLkCIAEoDjImLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "Q2hpbGRDYW5jZWxSZWFzb24SOQoQY2hpbGRfbWt0X3N0YW5jZRi8AiABKA4y",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLk1rdFN0YW5jZRI4ChNjaGlsZF9jeGxf",
            "YXR0ZW1wdGVkGL8CIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8S",
            "PQoQY2hpbGRfc1NhbGVfZmxhZxjCAiABKA4yIi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlNob3J0U2FsZUZsYWcSPwoTY2hpbGRfcG9zaXRpb25fdHlwZRjFAiAB",
            "KA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRI3Cg9jaGls",
            "ZF9maXJtX3R5cGUYyAIgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5GaXJt",
            "VHlwZRI7Cg5jaGlsZF9jYXBhY2l0eRjLAiABKA4yIi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk9yZGVyQ2FwYWNpdHkSEgoJZmlsbF9leGNoGM4CIAEoCRITCgpm",
            "aWxsX3ByaWNlGNECIAEoARIuCglmaWxsX2R0dG0Y1AIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBISCglmaWxsX3NpemUY1wIgASgFEhkKEGZp",
            "bGxfcG9pbnRfdmFsdWUY2gIgASgFEhEKCGZpbGxfdm9sGN0CIAEoAhISCglm",
            "aWxsX3Byb2IY4AIgASgCEhcKDmZpbGxfbGltaXRfcHJjGOMCIAEoARIcChNm",
            "aWxsX2xpbWl0X3JlZl91UHJjGOYCIAEoARISCglmaWxsX3VQcmMY6QIgASgB",
            "EhIKCWZpbGxfYmV0YRjsAiABKAISEAoHZmlsbF90dhjvAiABKAISEAoHZmls",
            "bF90cBjyAiABKAISEQoIZmlsbF9iaWQY9QIgASgBEhEKCGZpbGxfYXNrGPgC",
            "IAEoARIWCg1maWxsX2ZhaXJfcHJjGPsCIAEoAhIYCg9maWxsX2ZhaXJfd2lk",
            "dGgY/gIgASgCEhcKDmZpbGxfYnJrcl9yYXRlGIEDIAEoAhIaChFmaWxsX3Jv",
            "dXRpbmdfcmF0ZRiEAyABKAISGgoRZmlsbF9vcmlnX2V4ZWNfaUQYhwMgASgJ",
            "EhoKEWZpbGxfbGFzdF9leGVjX2lEGIoDIAEoCRI6ChBmaWxsX2V4ZWNfc3Rh",
            "dHVzGI0DIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRXhlY1N0YXR1cxIZ",
            "ChBmaWxsX3JlbW90ZV90ZXh0GJADIAEoCRI3ChJmaWxsX3RyYW5zYWN0X2R0",
            "dG0YkwMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIbChJmaWxs",
            "X2xpcXVpZGl0eV90YWcYlgMgASgJEhYKDWZpbGxfZXhjaF9mZWUYmQMgASgC",
            "EhAKB2ZpbGxfZGUYnAMgASgCEhAKB2ZpbGxfZ2EYnwMgASgCEhAKB2ZpbGxf",
            "dmUYogMgASgCEjEKCWV4ZWNfcm9sZRilAyABKA4yHS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkV4ZWNSb2xlEhcKDmV4ZWNfYnJrcl9jb2RlGKgDIAEoCRIYCg9l",
            "eGVjX2Jya3JfYWNjbnQYqwMgASgJEhoKEWV4ZWNfYnJrcl9jbF9maXJtGK4D",
            "IAEoCRIcChNleGVjX2Jya3JfdXNlcl9uYW1lGLEDIAEoCRI6ChJjbGVhcmlu",
            "Z19mbGlwX3R5cGUYtAMgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5GbGlw",
            "VHlwZRIbChJjbGVhcmluZ19mbGlwX2Zpcm0YtwMgASgJEhwKE2NsZWFyaW5n",
            "X2ZsaXBfYWNjbnQYugMgASgJEhcKDmNsZWFyaW5nX2FnZW50GNEEIAEoCRIY",
            "Cg9jbGVhcmluZ190YXhfaUQY0gQgASgJEj4KEGJpbGxpbmdfc2VjX3R5cGUY",
            "vQMgASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5CaWxsaW5nU2VjVHlwZRI/",
            "ChBiaWxsaW5nX2NhdGVnb3J5GMADIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuQmlsbGluZ0NhdGVnb3J5EhYKDXByaV9hZ2dfZ3JvdXAYwwMgASgJEhYK",
            "DXNlY19hZ2dfZ3JvdXAYxgMgASgJEhIKCXRyZF9kZWx0YRjJAyABKAISEwoK",
            "dHJkX2REZWx0YRjMAyABKAISEgoJdHJkX2dhbW1hGM8DIAEoAhITCgp0cmRf",
            "ZEdhbW1hGNIDIAEoAhIRCgh0cmRfdmVnYRjVAyABKAISFAoLdHJkX3d0X3Zl",
            "Z2EY2AMgASgCEhIKCXRyZF90aGV0YRjeAyABKAISEQoIdHJkX2JldGEY4QMg",
            "ASgCEhIKCXRyZF9kQmV0YRjkAyABKAISGwoSdHJkX25vdGlvbmFsX3ZhbHVl",
            "GOcDIAEoAhIZChB0cmRfbWFya2V0X3ZhbHVlGOoDIAEoAhIXCg5tYXJnaW5f",
            "dURuX3ZEbhjTBCABKAISFwoObWFyZ2luX3VEbl92VXAY1AQgASgCEhcKDm1h",
            "cmdpbl91VXBfdkRuGNUEIAEoAhIXCg5tYXJnaW5fdVVwX3ZVcBjWBCABKAIS",
            "FgoNdHJkX2ZhaXJfZWRnZRiFBCABKAISGwoSdHJkX2ZhaXJfZWRnZV91bml0",
            "GIgEIAEoAhIWCg10cmRfdGhlb19lZGdlGIsEIAEoAhIbChJ0cmRfdGhlb19l",
            "ZGdlX3VuaXQYjgQgASgCEhcKDmNsX2Fycml2ZV9wbl9sGJEEIAEoAhIUCgth",
            "cnJpdmVfcG5fbBiUBCABKAISFwoOYXJyaXZlX2RuX3BuX2wYlwQgASgCEhwK",
            "E3VfZHJpZnRfYXJyaXZlX3BuX2wYmgQgASgCEhkKEGNoaWxkX2xpbWl0X3Ns",
            "aXAYnQQgASgCEhgKD2hhbGZfd2lkdGhfcG5fbBigBCABKAISFAoLZGF5X2Ru",
            "X3BuX2wYowQgASgCEhQKC2RheV9tMV9wbl9sGKYEIAEoAhIVCgxkYXlfbTEw",
            "X3BuX2wYqQQgASgCEhkKEHVfZHJpZnRfZGF5X3BuX2wYrAQgASgCEhgKD3Vf",
            "ZHJpZnRfbTFfcG5fbBivBCABKAISGQoQdV9kcmlmdF9tMTBfcG5fbBiyBCAB",
            "KAISEQoIZGF5X3BuX2wYtQQgASgCEhAKB20xX21hcmsYuAQgASgBEhAKB20x",
            "X3VQcmMYuwQgASgBEhEKCG0xMF9tYXJrGL4EIAEoARIRCghtMTBfdVByYxjB",
            "BCABKAESEgoJbGl2ZV9tYXJrGMQEIAEoARISCglsaXZlX3VQcmMYxwQgASgB",
            "EhcKDnRyZF9tYXJrX2Vycm9yGMoEIAEoCRIXCg5kYXlfbWFya19lcnJvchjN",
            "BCABKAkSLgoJdGltZXN0YW1wGNAEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXAaGwoEUEtleRITCgtmaWxsX251bWJlchgKIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ToolCompositeExecution), global::Spiderrock.Protobuf.ToolCompositeExecution.Parser, new[]{ "Meta", "Pkey", "TradeDate", "Accnt", "ClientFirm", "SecKey", "SecType", "Side", "Version", "ParentNumber", "BaseParentNumber", "SpdrSource", "GroupingCode", "RiskGroupId", "AltOrderId", "SrcRoutingCode", "UserName", "Server", "Ticker", "Sector", "ClientTags", "IndNum", "SubNum", "GrpNum", "NbrNum", "ExpCode", "SkewCode", "WidthCode", "PriceFormat", "UPriceFormat", "Years", "UnderlierType", "MinTickSize", "PointValue", "PointCurrency", "UnderliersPerCn", "ParentShape", "ParentLimitType", "ParentLimitClass", "ParentOrderHandling", "ParentBalanceHandling", "ParentOrderSize", "ParentDttm", "ParentUMark", "ParentBid", "ParentAsk", "ParentFairPrc", "ParentFairWidth", "ParentLimitPrc", "ParentLimitRefUPrc", "ParentSSaleFlag", "ParentPositionType", "ParentStrategy", "ParentAutoHedge", "ChildDttm", "ChildClOrdId", "ChildRoutingCode", "ChildSize", "ChildPrice", "ChildExch", "ChildExDest", "ChildUPrc", "ChildBid", "ChildAsk", "ChildFairPrc", "ChildFairWidth", "ChildVol", "ChildProb", "ChildLimitPrc", "ChildLimitRefUPrc", "ChildAlgoHandler", "ChildOrderHandling", "ChildCreateReason", "ChildCancelReason", "ChildMktStance", "ChildCxlAttempted", "ChildSSaleFlag", "ChildPositionType", "ChildFirmType", "ChildCapacity", "FillExch", "FillPrice", "FillDttm", "FillSize", "FillPointValue", "FillVol", "FillProb", "FillLimitPrc", "FillLimitRefUPrc", "FillUPrc", "FillBeta", "FillTv", "FillTp", "FillBid", "FillAsk", "FillFairPrc", "FillFairWidth", "FillBrkrRate", "FillRoutingRate", "FillOrigExecID", "FillLastExecID", "FillExecStatus", "FillRemoteText", "FillTransactDttm", "FillLiquidityTag", "FillExchFee", "FillDe", "FillGa", "FillVe", "ExecRole", "ExecBrkrCode", "ExecBrkrAccnt", "ExecBrkrClFirm", "ExecBrkrUserName", "ClearingFlipType", "ClearingFlipFirm", "ClearingFlipAccnt", "ClearingAgent", "ClearingTaxID", "BillingSecType", "BillingCategory", "PriAggGroup", "SecAggGroup", "TrdDelta", "TrdDDelta", "TrdGamma", "TrdDGamma", "TrdVega", "TrdWtVega", "TrdTheta", "TrdBeta", "TrdDBeta", "TrdNotionalValue", "TrdMarketValue", "MarginUDnVDn", "MarginUDnVUp", "MarginUUpVDn", "MarginUUpVUp", "TrdFairEdge", "TrdFairEdgeUnit", "TrdTheoEdge", "TrdTheoEdgeUnit", "ClArrivePnL", "ArrivePnL", "ArriveDnPnL", "UDriftArrivePnL", "ChildLimitSlip", "HalfWidthPnL", "DayDnPnL", "DayM1PnL", "DayM10PnL", "UDriftDayPnL", "UDriftM1PnL", "UDriftM10PnL", "DayPnL", "M1Mark", "M1UPrc", "M10Mark", "M10UPrc", "LiveMark", "LiveUPrc", "TrdMarkError", "DayMarkError", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey), global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey.Parser, new[]{ "FillNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ToolCompositeExecution : pb::IMessage<ToolCompositeExecution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToolCompositeExecution> _parser = new pb::MessageParser<ToolCompositeExecution>(() => new ToolCompositeExecution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ToolCompositeExecution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ToolCompositeExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToolCompositeExecution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToolCompositeExecution(ToolCompositeExecution other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      accnt_ = other.accnt_;
      clientFirm_ = other.clientFirm_;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      side_ = other.side_;
      version_ = other.version_;
      parentNumber_ = other.parentNumber_;
      baseParentNumber_ = other.baseParentNumber_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      riskGroupId_ = other.riskGroupId_;
      altOrderId_ = other.altOrderId_;
      srcRoutingCode_ = other.srcRoutingCode_;
      userName_ = other.userName_;
      server_ = other.server_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      sector_ = other.sector_;
      clientTags_ = other.clientTags_;
      indNum_ = other.indNum_;
      subNum_ = other.subNum_;
      grpNum_ = other.grpNum_;
      nbrNum_ = other.nbrNum_;
      expCode_ = other.expCode_;
      skewCode_ = other.skewCode_;
      widthCode_ = other.widthCode_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      years_ = other.years_;
      underlierType_ = other.underlierType_;
      minTickSize_ = other.minTickSize_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      underliersPerCn_ = other.underliersPerCn_;
      parentShape_ = other.parentShape_;
      parentLimitType_ = other.parentLimitType_;
      parentLimitClass_ = other.parentLimitClass_;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      parentOrderSize_ = other.parentOrderSize_;
      parentDttm_ = other.parentDttm_ != null ? other.parentDttm_.Clone() : null;
      parentUMark_ = other.parentUMark_;
      parentBid_ = other.parentBid_;
      parentAsk_ = other.parentAsk_;
      parentFairPrc_ = other.parentFairPrc_;
      parentFairWidth_ = other.parentFairWidth_;
      parentLimitPrc_ = other.parentLimitPrc_;
      parentLimitRefUPrc_ = other.parentLimitRefUPrc_;
      parentSSaleFlag_ = other.parentSSaleFlag_;
      parentPositionType_ = other.parentPositionType_;
      parentStrategy_ = other.parentStrategy_;
      parentAutoHedge_ = other.parentAutoHedge_;
      childDttm_ = other.childDttm_ != null ? other.childDttm_.Clone() : null;
      childClOrdId_ = other.childClOrdId_;
      childRoutingCode_ = other.childRoutingCode_;
      childSize_ = other.childSize_;
      childPrice_ = other.childPrice_;
      childExch_ = other.childExch_;
      childExDest_ = other.childExDest_;
      childUPrc_ = other.childUPrc_;
      childBid_ = other.childBid_;
      childAsk_ = other.childAsk_;
      childFairPrc_ = other.childFairPrc_;
      childFairWidth_ = other.childFairWidth_;
      childVol_ = other.childVol_;
      childProb_ = other.childProb_;
      childLimitPrc_ = other.childLimitPrc_;
      childLimitRefUPrc_ = other.childLimitRefUPrc_;
      childAlgoHandler_ = other.childAlgoHandler_;
      childOrderHandling_ = other.childOrderHandling_;
      childCreateReason_ = other.childCreateReason_;
      childCancelReason_ = other.childCancelReason_;
      childMktStance_ = other.childMktStance_;
      childCxlAttempted_ = other.childCxlAttempted_;
      childSSaleFlag_ = other.childSSaleFlag_;
      childPositionType_ = other.childPositionType_;
      childFirmType_ = other.childFirmType_;
      childCapacity_ = other.childCapacity_;
      fillExch_ = other.fillExch_;
      fillPrice_ = other.fillPrice_;
      fillDttm_ = other.fillDttm_ != null ? other.fillDttm_.Clone() : null;
      fillSize_ = other.fillSize_;
      fillPointValue_ = other.fillPointValue_;
      fillVol_ = other.fillVol_;
      fillProb_ = other.fillProb_;
      fillLimitPrc_ = other.fillLimitPrc_;
      fillLimitRefUPrc_ = other.fillLimitRefUPrc_;
      fillUPrc_ = other.fillUPrc_;
      fillBeta_ = other.fillBeta_;
      fillTv_ = other.fillTv_;
      fillTp_ = other.fillTp_;
      fillBid_ = other.fillBid_;
      fillAsk_ = other.fillAsk_;
      fillFairPrc_ = other.fillFairPrc_;
      fillFairWidth_ = other.fillFairWidth_;
      fillBrkrRate_ = other.fillBrkrRate_;
      fillRoutingRate_ = other.fillRoutingRate_;
      fillOrigExecID_ = other.fillOrigExecID_;
      fillLastExecID_ = other.fillLastExecID_;
      fillExecStatus_ = other.fillExecStatus_;
      fillRemoteText_ = other.fillRemoteText_;
      fillTransactDttm_ = other.fillTransactDttm_ != null ? other.fillTransactDttm_.Clone() : null;
      fillLiquidityTag_ = other.fillLiquidityTag_;
      fillExchFee_ = other.fillExchFee_;
      fillDe_ = other.fillDe_;
      fillGa_ = other.fillGa_;
      fillVe_ = other.fillVe_;
      execRole_ = other.execRole_;
      execBrkrCode_ = other.execBrkrCode_;
      execBrkrAccnt_ = other.execBrkrAccnt_;
      execBrkrClFirm_ = other.execBrkrClFirm_;
      execBrkrUserName_ = other.execBrkrUserName_;
      clearingFlipType_ = other.clearingFlipType_;
      clearingFlipFirm_ = other.clearingFlipFirm_;
      clearingFlipAccnt_ = other.clearingFlipAccnt_;
      clearingAgent_ = other.clearingAgent_;
      clearingTaxID_ = other.clearingTaxID_;
      billingSecType_ = other.billingSecType_;
      billingCategory_ = other.billingCategory_;
      priAggGroup_ = other.priAggGroup_;
      secAggGroup_ = other.secAggGroup_;
      trdDelta_ = other.trdDelta_;
      trdDDelta_ = other.trdDDelta_;
      trdGamma_ = other.trdGamma_;
      trdDGamma_ = other.trdDGamma_;
      trdVega_ = other.trdVega_;
      trdWtVega_ = other.trdWtVega_;
      trdTheta_ = other.trdTheta_;
      trdBeta_ = other.trdBeta_;
      trdDBeta_ = other.trdDBeta_;
      trdNotionalValue_ = other.trdNotionalValue_;
      trdMarketValue_ = other.trdMarketValue_;
      marginUDnVDn_ = other.marginUDnVDn_;
      marginUDnVUp_ = other.marginUDnVUp_;
      marginUUpVDn_ = other.marginUUpVDn_;
      marginUUpVUp_ = other.marginUUpVUp_;
      trdFairEdge_ = other.trdFairEdge_;
      trdFairEdgeUnit_ = other.trdFairEdgeUnit_;
      trdTheoEdge_ = other.trdTheoEdge_;
      trdTheoEdgeUnit_ = other.trdTheoEdgeUnit_;
      clArrivePnL_ = other.clArrivePnL_;
      arrivePnL_ = other.arrivePnL_;
      arriveDnPnL_ = other.arriveDnPnL_;
      uDriftArrivePnL_ = other.uDriftArrivePnL_;
      childLimitSlip_ = other.childLimitSlip_;
      halfWidthPnL_ = other.halfWidthPnL_;
      dayDnPnL_ = other.dayDnPnL_;
      dayM1PnL_ = other.dayM1PnL_;
      dayM10PnL_ = other.dayM10PnL_;
      uDriftDayPnL_ = other.uDriftDayPnL_;
      uDriftM1PnL_ = other.uDriftM1PnL_;
      uDriftM10PnL_ = other.uDriftM10PnL_;
      dayPnL_ = other.dayPnL_;
      m1Mark_ = other.m1Mark_;
      m1UPrc_ = other.m1UPrc_;
      m10Mark_ = other.m10Mark_;
      m10UPrc_ = other.m10UPrc_;
      liveMark_ = other.liveMark_;
      liveUPrc_ = other.liveUPrc_;
      trdMarkError_ = other.trdMarkError_;
      dayMarkError_ = other.dayMarkError_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToolCompositeExecution Clone() {
      return new ToolCompositeExecution(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 100;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    /// <summary>
    /// trade date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 103;
    private string accnt_ = "";
    /// <summary>
    /// SpiderRock Accnt Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 106;
    private string clientFirm_ = "";
    /// <summary>
    /// SpiderRock ClientFirm Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 109;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    /// <summary>
    /// Security Key [can be partially filled in (look at secType)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// Security Type [Stock, Future, Option]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 115;
    private global::Spiderrock.Protobuf.BuySell side_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// order / execution side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 118;
    private int version_;
    /// <summary>
    /// record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 121;
    private long parentNumber_;
    /// <summary>
    /// SpiderRock parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 124;
    private long baseParentNumber_;
    /// <summary>
    /// SpiderRock base parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 127;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    /// <summary>
    /// SpiderRock parent order source code [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 130;
    private long groupingCode_;
    /// <summary>
    /// SpiderRock parent broker number [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 133;
    private long riskGroupId_;
    /// <summary>
    /// riskGroupId (parent order group ID) for this execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 136;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_routing_code" field.</summary>
    public const int SrcRoutingCodeFieldNumber = 139;
    private string srcRoutingCode_ = "";
    /// <summary>
    /// inbound FIX routing code, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcRoutingCode {
      get { return srcRoutingCode_; }
      set {
        srcRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 142;
    private string userName_ = "";
    /// <summary>
    /// SpiderRock user name associated with the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 145;
    private string server_ = "";
    /// <summary>
    /// SpiderRock execution engine that handled the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 148;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SpiderRock underlier ticker key [synthetic for futures]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 151;
    private string sector_ = "";
    /// <summary>
    /// user supplied sector code (from SymbolControl record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_tags" field.</summary>
    public const int ClientTagsFieldNumber = 154;
    private string clientTags_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientTags {
      get { return clientTags_; }
      set {
        clientTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ind_num" field.</summary>
    public const int IndNumFieldNumber = 157;
    private int indNum_;
    /// <summary>
    /// ind code (00)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IndNum {
      get { return indNum_; }
      set {
        indNum_ = value;
      }
    }

    /// <summary>Field number for the "sub_num" field.</summary>
    public const int SubNumFieldNumber = 160;
    private int subNum_;
    /// <summary>
    /// sub code (0000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubNum {
      get { return subNum_; }
      set {
        subNum_ = value;
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 163;
    private int grpNum_;
    /// <summary>
    /// grp code (000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "nbr_num" field.</summary>
    public const int NbrNumFieldNumber = 166;
    private int nbrNum_;
    /// <summary>
    /// nbr code (00000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbrNum {
      get { return nbrNum_; }
      set {
        nbrNum_ = value;
      }
    }

    /// <summary>Field number for the "exp_code" field.</summary>
    public const int ExpCodeFieldNumber = 169;
    private global::Spiderrock.Protobuf.ExpCode expCode_ = global::Spiderrock.Protobuf.ExpCode.Unspecified;
    /// <summary>
    /// expiration tenor code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpCode ExpCode {
      get { return expCode_; }
      set {
        expCode_ = value;
      }
    }

    /// <summary>Field number for the "skew_code" field.</summary>
    public const int SkewCodeFieldNumber = 172;
    private global::Spiderrock.Protobuf.SkewCode skewCode_ = global::Spiderrock.Protobuf.SkewCode.Unspecified;
    /// <summary>
    /// strike skew code (@ parent order arrival)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SkewCode SkewCode {
      get { return skewCode_; }
      set {
        skewCode_ = value;
      }
    }

    /// <summary>Field number for the "width_code" field.</summary>
    public const int WidthCodeFieldNumber = 175;
    private global::Spiderrock.Protobuf.WidthCode widthCode_ = global::Spiderrock.Protobuf.WidthCode.Unspecified;
    /// <summary>
    /// market width code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.WidthCode WidthCode {
      get { return widthCode_; }
      set {
        widthCode_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 178;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 181;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock underlier price display code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 184;
    private float years_;
    /// <summary>
    /// years to expiration (@ parent order arrival)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 187;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// underlier type (affects $greek calcs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "min_tick_size" field.</summary>
    public const int MinTickSizeFieldNumber = 190;
    private float minTickSize_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTickSize {
      get { return minTickSize_; }
      set {
        minTickSize_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 193;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 196;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 199;
    private int underliersPerCn_;
    /// <summary>
    /// underliers per contract (futures and options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "parent_shape" field.</summary>
    public const int ParentShapeFieldNumber = 202;
    private global::Spiderrock.Protobuf.SpdrOrderShape parentShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    /// <summary>
    /// parent order shape [Single, MLeg, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ParentShape {
      get { return parentShape_; }
      set {
        parentShape_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_type" field.</summary>
    public const int ParentLimitTypeFieldNumber = 205;
    private global::Spiderrock.Protobuf.SpdrLimitType parentLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    /// <summary>
    /// parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType ParentLimitType {
      get { return parentLimitType_; }
      set {
        parentLimitType_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_class" field.</summary>
    public const int ParentLimitClassFieldNumber = 208;
    private global::Spiderrock.Protobuf.SpdrLimitClass parentLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass ParentLimitClass {
      get { return parentLimitClass_; }
      set {
        parentLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 211;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    /// <summary>
    /// base parent order algo [take style algo]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 214;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    /// <summary>
    /// base parent order balance handling [make style algo]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_size" field.</summary>
    public const int ParentOrderSizeFieldNumber = 217;
    private int parentOrderSize_;
    /// <summary>
    /// parent order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentOrderSize {
      get { return parentOrderSize_; }
      set {
        parentOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "parent_dttm" field.</summary>
    public const int ParentDttmFieldNumber = 220;
    private global::Google.Protobuf.WellKnownTypes.Timestamp parentDttm_;
    /// <summary>
    /// Date/time of parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ParentDttm {
      get { return parentDttm_; }
      set {
        parentDttm_ = value;
      }
    }

    /// <summary>Field number for the "parent_uMark" field.</summary>
    public const int ParentUMarkFieldNumber = 223;
    private double parentUMark_;
    /// <summary>
    /// underlier mid mark @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentUMark {
      get { return parentUMark_; }
      set {
        parentUMark_ = value;
      }
    }

    /// <summary>Field number for the "parent_bid" field.</summary>
    public const int ParentBidFieldNumber = 226;
    private double parentBid_;
    /// <summary>
    /// market bid @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentBid {
      get { return parentBid_; }
      set {
        parentBid_ = value;
      }
    }

    /// <summary>Field number for the "parent_ask" field.</summary>
    public const int ParentAskFieldNumber = 229;
    private double parentAsk_;
    /// <summary>
    /// market ask @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentAsk {
      get { return parentAsk_; }
      set {
        parentAsk_ = value;
      }
    }

    /// <summary>Field number for the "parent_fair_prc" field.</summary>
    public const int ParentFairPrcFieldNumber = 232;
    private float parentFairPrc_;
    /// <summary>
    /// SpiderRock fair price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentFairPrc {
      get { return parentFairPrc_; }
      set {
        parentFairPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_fair_width" field.</summary>
    public const int ParentFairWidthFieldNumber = 235;
    private float parentFairWidth_;
    /// <summary>
    /// SpiderRock fair width @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentFairWidth {
      get { return parentFairWidth_; }
      set {
        parentFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_prc" field.</summary>
    public const int ParentLimitPrcFieldNumber = 238;
    private double parentLimitPrc_;
    /// <summary>
    /// parent order limit price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentLimitPrc {
      get { return parentLimitPrc_; }
      set {
        parentLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_ref_uPrc" field.</summary>
    public const int ParentLimitRefUPrcFieldNumber = 241;
    private double parentLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentLimitRefUPrc {
      get { return parentLimitRefUPrc_; }
      set {
        parentLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_sSale_flag" field.</summary>
    public const int ParentSSaleFlagFieldNumber = 244;
    private global::Spiderrock.Protobuf.ShortSaleFlag parentSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// parent order short sale flag (can be Auto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag ParentSSaleFlag {
      get { return parentSSaleFlag_; }
      set {
        parentSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "parent_position_type" field.</summary>
    public const int ParentPositionTypeFieldNumber = 247;
    private global::Spiderrock.Protobuf.PositionType parentPositionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    /// <summary>
    /// parent order position type (can be Auto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType ParentPositionType {
      get { return parentPositionType_; }
      set {
        parentPositionType_ = value;
      }
    }

    /// <summary>Field number for the "parent_strategy" field.</summary>
    public const int ParentStrategyFieldNumber = 250;
    private string parentStrategy_ = "";
    /// <summary>
    /// parent strategy [usually client supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentStrategy {
      get { return parentStrategy_; }
      set {
        parentStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_auto_hedge" field.</summary>
    public const int ParentAutoHedgeFieldNumber = 253;
    private global::Spiderrock.Protobuf.AutoHedge parentAutoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    /// <summary>
    /// SpiderRock auto-hedge algorithm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge ParentAutoHedge {
      get { return parentAutoHedge_; }
      set {
        parentAutoHedge_ = value;
      }
    }

    /// <summary>Field number for the "child_dttm" field.</summary>
    public const int ChildDttmFieldNumber = 256;
    private global::Google.Protobuf.WellKnownTypes.Timestamp childDttm_;
    /// <summary>
    /// child order send date/time (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ChildDttm {
      get { return childDttm_; }
      set {
        childDttm_ = value;
      }
    }

    /// <summary>Field number for the "child_cl_ord_id" field.</summary>
    public const int ChildClOrdIdFieldNumber = 259;
    private string childClOrdId_ = "";
    /// <summary>
    /// child order clOrdId resulting in fill (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildClOrdId {
      get { return childClOrdId_; }
      set {
        childClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_routing_code" field.</summary>
    public const int ChildRoutingCodeFieldNumber = 262;
    private string childRoutingCode_ = "";
    /// <summary>
    /// SpiderRock child order routing code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildRoutingCode {
      get { return childRoutingCode_; }
      set {
        childRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_size" field.</summary>
    public const int ChildSizeFieldNumber = 265;
    private int childSize_;
    /// <summary>
    /// child order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildSize {
      get { return childSize_; }
      set {
        childSize_ = value;
      }
    }

    /// <summary>Field number for the "child_price" field.</summary>
    public const int ChildPriceFieldNumber = 268;
    private double childPrice_;
    /// <summary>
    /// child order price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildPrice {
      get { return childPrice_; }
      set {
        childPrice_ = value;
      }
    }

    /// <summary>Field number for the "child_exch" field.</summary>
    public const int ChildExchFieldNumber = 271;
    private string childExch_ = "";
    /// <summary>
    /// child order exchange code (SpiderRock)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExch {
      get { return childExch_; }
      set {
        childExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_ex_dest" field.</summary>
    public const int ChildExDestFieldNumber = 274;
    private string childExDest_ = "";
    /// <summary>
    /// child order exchange code (downstream)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExDest {
      get { return childExDest_; }
      set {
        childExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_uPrc" field.</summary>
    public const int ChildUPrcFieldNumber = 277;
    private double childUPrc_;
    /// <summary>
    /// underlier market price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildUPrc {
      get { return childUPrc_; }
      set {
        childUPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_bid" field.</summary>
    public const int ChildBidFieldNumber = 280;
    private double childBid_;
    /// <summary>
    /// market bid @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildBid {
      get { return childBid_; }
      set {
        childBid_ = value;
      }
    }

    /// <summary>Field number for the "child_ask" field.</summary>
    public const int ChildAskFieldNumber = 283;
    private double childAsk_;
    /// <summary>
    /// market ask @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildAsk {
      get { return childAsk_; }
      set {
        childAsk_ = value;
      }
    }

    /// <summary>Field number for the "child_fair_prc" field.</summary>
    public const int ChildFairPrcFieldNumber = 286;
    private float childFairPrc_;
    /// <summary>
    /// SpiderRock fair price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildFairPrc {
      get { return childFairPrc_; }
      set {
        childFairPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_fair_width" field.</summary>
    public const int ChildFairWidthFieldNumber = 289;
    private float childFairWidth_;
    /// <summary>
    /// SpiderRock fair width @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildFairWidth {
      get { return childFairWidth_; }
      set {
        childFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "child_vol" field.</summary>
    public const int ChildVolFieldNumber = 292;
    private float childVol_;
    /// <summary>
    /// child order volatilty (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildVol {
      get { return childVol_; }
      set {
        childVol_ = value;
      }
    }

    /// <summary>Field number for the "child_prob" field.</summary>
    public const int ChildProbFieldNumber = 295;
    private float childProb_;
    /// <summary>
    /// child order probability (T+x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildProb {
      get { return childProb_; }
      set {
        childProb_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_prc" field.</summary>
    public const int ChildLimitPrcFieldNumber = 298;
    private double childLimitPrc_;
    /// <summary>
    /// parent order limit price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitPrc {
      get { return childLimitPrc_; }
      set {
        childLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_ref_uPrc" field.</summary>
    public const int ChildLimitRefUPrcFieldNumber = 301;
    private double childLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ child order send time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitRefUPrc {
      get { return childLimitRefUPrc_; }
      set {
        childLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_algo_handler" field.</summary>
    public const int ChildAlgoHandlerFieldNumber = 304;
    private global::Spiderrock.Protobuf.ChildHandler childAlgoHandler_ = global::Spiderrock.Protobuf.ChildHandler.Unspecified;
    /// <summary>
    /// algo that generated the child order responsible for this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildHandler ChildAlgoHandler {
      get { return childAlgoHandler_; }
      set {
        childAlgoHandler_ = value;
      }
    }

    /// <summary>Field number for the "child_order_handling" field.</summary>
    public const int ChildOrderHandlingFieldNumber = 307;
    private string childOrderHandling_ = "";
    /// <summary>
    /// algo handler detail string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildOrderHandling {
      get { return childOrderHandling_; }
      set {
        childOrderHandling_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_create_reason" field.</summary>
    public const int ChildCreateReasonFieldNumber = 310;
    private global::Spiderrock.Protobuf.ChildCreateReason childCreateReason_ = global::Spiderrock.Protobuf.ChildCreateReason.Unspecified;
    /// <summary>
    /// child order create code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCreateReason ChildCreateReason {
      get { return childCreateReason_; }
      set {
        childCreateReason_ = value;
      }
    }

    /// <summary>Field number for the "child_cancel_reason" field.</summary>
    public const int ChildCancelReasonFieldNumber = 313;
    private global::Spiderrock.Protobuf.ChildCancelReason childCancelReason_ = global::Spiderrock.Protobuf.ChildCancelReason.Unspecified;
    /// <summary>
    /// child order cancel code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCancelReason ChildCancelReason {
      get { return childCancelReason_; }
      set {
        childCancelReason_ = value;
      }
    }

    /// <summary>Field number for the "child_mkt_stance" field.</summary>
    public const int ChildMktStanceFieldNumber = 316;
    private global::Spiderrock.Protobuf.MktStance childMktStance_ = global::Spiderrock.Protobuf.MktStance.Unspecified;
    /// <summary>
    /// child order was expected to be marketable @ child send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktStance ChildMktStance {
      get { return childMktStance_; }
      set {
        childMktStance_ = value;
      }
    }

    /// <summary>Field number for the "child_cxl_attempted" field.</summary>
    public const int ChildCxlAttemptedFieldNumber = 319;
    private global::Spiderrock.Protobuf.YesNo childCxlAttempted_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// cancel attempt was made on the child order prior to receiving this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ChildCxlAttempted {
      get { return childCxlAttempted_; }
      set {
        childCxlAttempted_ = value;
      }
    }

    /// <summary>Field number for the "child_sSale_flag" field.</summary>
    public const int ChildSSaleFlagFieldNumber = 322;
    private global::Spiderrock.Protobuf.ShortSaleFlag childSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// child order short sale flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag ChildSSaleFlag {
      get { return childSSaleFlag_; }
      set {
        childSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "child_position_type" field.</summary>
    public const int ChildPositionTypeFieldNumber = 325;
    private global::Spiderrock.Protobuf.PositionType childPositionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    /// <summary>
    /// child order position type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType ChildPositionType {
      get { return childPositionType_; }
      set {
        childPositionType_ = value;
      }
    }

    /// <summary>Field number for the "child_firm_type" field.</summary>
    public const int ChildFirmTypeFieldNumber = 328;
    private global::Spiderrock.Protobuf.FirmType childFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// chld order firm type [Customer, ProCust, Firm, MM, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType ChildFirmType {
      get { return childFirmType_; }
      set {
        childFirmType_ = value;
      }
    }

    /// <summary>Field number for the "child_capacity" field.</summary>
    public const int ChildCapacityFieldNumber = 331;
    private global::Spiderrock.Protobuf.OrderCapacity childCapacity_ = global::Spiderrock.Protobuf.OrderCapacity.Unspecified;
    /// <summary>
    /// child order capacity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OrderCapacity ChildCapacity {
      get { return childCapacity_; }
      set {
        childCapacity_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch" field.</summary>
    public const int FillExchFieldNumber = 334;
    private string fillExch_ = "";
    /// <summary>
    /// ExDest code from child order execution report (lastMkt)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExch {
      get { return fillExch_; }
      set {
        fillExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_price" field.</summary>
    public const int FillPriceFieldNumber = 337;
    private double fillPrice_;
    /// <summary>
    /// fill price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "fill_dttm" field.</summary>
    public const int FillDttmFieldNumber = 340;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillDttm_;
    /// <summary>
    /// Date/time of fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillDttm {
      get { return fillDttm_; }
      set {
        fillDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_size" field.</summary>
    public const int FillSizeFieldNumber = 343;
    private int fillSize_;
    /// <summary>
    /// fill quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillSize {
      get { return fillSize_; }
      set {
        fillSize_ = value;
      }
    }

    /// <summary>Field number for the "fill_point_value" field.</summary>
    public const int FillPointValueFieldNumber = 346;
    private int fillPointValue_;
    /// <summary>
    /// fill size x pointValue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillPointValue {
      get { return fillPointValue_; }
      set {
        fillPointValue_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol" field.</summary>
    public const int FillVolFieldNumber = 349;
    private float fillVol_;
    /// <summary>
    /// fill volatilty (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVol {
      get { return fillVol_; }
      set {
        fillVol_ = value;
      }
    }

    /// <summary>Field number for the "fill_prob" field.</summary>
    public const int FillProbFieldNumber = 352;
    private float fillProb_;
    /// <summary>
    /// fill order probability (T+x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillProb {
      get { return fillProb_; }
      set {
        fillProb_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_prc" field.</summary>
    public const int FillLimitPrcFieldNumber = 355;
    private double fillLimitPrc_;
    /// <summary>
    /// parent order limit price @ fill arrival time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitPrc {
      get { return fillLimitPrc_; }
      set {
        fillLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_ref_uPrc" field.</summary>
    public const int FillLimitRefUPrcFieldNumber = 358;
    private double fillLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ fill arrival time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitRefUPrc {
      get { return fillLimitRefUPrc_; }
      set {
        fillLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_uPrc" field.</summary>
    public const int FillUPrcFieldNumber = 361;
    private double fillUPrc_;
    /// <summary>
    /// fill underlier mid-market
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUPrc {
      get { return fillUPrc_; }
      set {
        fillUPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_beta" field.</summary>
    public const int FillBetaFieldNumber = 364;
    private float fillBeta_;
    /// <summary>
    /// SpiderRock estimate of beta to SPX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBeta {
      get { return fillBeta_; }
      set {
        fillBeta_ = value;
      }
    }

    /// <summary>Field number for the "fill_tv" field.</summary>
    public const int FillTvFieldNumber = 367;
    private float fillTv_;
    /// <summary>
    /// theo vol (user supplied)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTv {
      get { return fillTv_; }
      set {
        fillTv_ = value;
      }
    }

    /// <summary>Field number for the "fill_tp" field.</summary>
    public const int FillTpFieldNumber = 370;
    private float fillTp_;
    /// <summary>
    /// theo price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTp {
      get { return fillTp_; }
      set {
        fillTp_ = value;
      }
    }

    /// <summary>Field number for the "fill_bid" field.</summary>
    public const int FillBidFieldNumber = 373;
    private double fillBid_;
    /// <summary>
    /// option market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid {
      get { return fillBid_; }
      set {
        fillBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask" field.</summary>
    public const int FillAskFieldNumber = 376;
    private double fillAsk_;
    /// <summary>
    /// option market ask @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk {
      get { return fillAsk_; }
      set {
        fillAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_fair_prc" field.</summary>
    public const int FillFairPrcFieldNumber = 379;
    private float fillFairPrc_;
    /// <summary>
    /// SpiderRock fair price @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillFairPrc {
      get { return fillFairPrc_; }
      set {
        fillFairPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_fair_width" field.</summary>
    public const int FillFairWidthFieldNumber = 382;
    private float fillFairWidth_;
    /// <summary>
    /// SpiderRock fair width @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillFairWidth {
      get { return fillFairWidth_; }
      set {
        fillFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "fill_brkr_rate" field.</summary>
    public const int FillBrkrRateFieldNumber = 385;
    private float fillBrkrRate_;
    /// <summary>
    /// billing brokerage rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBrkrRate {
      get { return fillBrkrRate_; }
      set {
        fillBrkrRate_ = value;
      }
    }

    /// <summary>Field number for the "fill_routing_rate" field.</summary>
    public const int FillRoutingRateFieldNumber = 388;
    private float fillRoutingRate_;
    /// <summary>
    /// billing routing rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRoutingRate {
      get { return fillRoutingRate_; }
      set {
        fillRoutingRate_ = value;
      }
    }

    /// <summary>Field number for the "fill_orig_exec_iD" field.</summary>
    public const int FillOrigExecIDFieldNumber = 391;
    private string fillOrigExecID_ = "";
    /// <summary>
    /// original execution ID string (child order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillOrigExecID {
      get { return fillOrigExecID_; }
      set {
        fillOrigExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_last_exec_iD" field.</summary>
    public const int FillLastExecIDFieldNumber = 394;
    private string fillLastExecID_ = "";
    /// <summary>
    /// most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillLastExecID {
      get { return fillLastExecID_; }
      set {
        fillLastExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exec_status" field.</summary>
    public const int FillExecStatusFieldNumber = 397;
    private global::Spiderrock.Protobuf.ExecStatus fillExecStatus_ = global::Spiderrock.Protobuf.ExecStatus.Unspecified;
    /// <summary>
    /// SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecStatus FillExecStatus {
      get { return fillExecStatus_; }
      set {
        fillExecStatus_ = value;
      }
    }

    /// <summary>Field number for the "fill_remote_text" field.</summary>
    public const int FillRemoteTextFieldNumber = 400;
    private string fillRemoteText_ = "";
    /// <summary>
    /// text comment from endpoint (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillRemoteText {
      get { return fillRemoteText_; }
      set {
        fillRemoteText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_transact_dttm" field.</summary>
    public const int FillTransactDttmFieldNumber = 403;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillTransactDttm_;
    /// <summary>
    /// transaction date/time as reported by exchange or down stream broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillTransactDttm {
      get { return fillTransactDttm_; }
      set {
        fillTransactDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_liquidity_tag" field.</summary>
    public const int FillLiquidityTagFieldNumber = 406;
    private string fillLiquidityTag_ = "";
    /// <summary>
    /// SpiderRock normalized exch liquidity tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillLiquidityTag {
      get { return fillLiquidityTag_; }
      set {
        fillLiquidityTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exch_fee" field.</summary>
    public const int FillExchFeeFieldNumber = 409;
    private float fillExchFee_;
    /// <summary>
    /// SpiderRock exchange fee estimate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillExchFee {
      get { return fillExchFee_; }
      set {
        fillExchFee_ = value;
      }
    }

    /// <summary>Field number for the "fill_de" field.</summary>
    public const int FillDeFieldNumber = 412;
    private float fillDe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDe {
      get { return fillDe_; }
      set {
        fillDe_ = value;
      }
    }

    /// <summary>Field number for the "fill_ga" field.</summary>
    public const int FillGaFieldNumber = 415;
    private float fillGa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillGa {
      get { return fillGa_; }
      set {
        fillGa_ = value;
      }
    }

    /// <summary>Field number for the "fill_ve" field.</summary>
    public const int FillVeFieldNumber = 418;
    private float fillVe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVe {
      get { return fillVe_; }
      set {
        fillVe_ = value;
      }
    }

    /// <summary>Field number for the "exec_role" field.</summary>
    public const int ExecRoleFieldNumber = 421;
    private global::Spiderrock.Protobuf.ExecRole execRole_ = global::Spiderrock.Protobuf.ExecRole.Unspecified;
    /// <summary>
    /// SpiderRock relationship to this execution record (Direct, Drop, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecRole ExecRole {
      get { return execRole_; }
      set {
        execRole_ = value;
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 424;
    private string execBrkrCode_ = "";
    /// <summary>
    /// exec broker acronym (usually an MPID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_accnt" field.</summary>
    public const int ExecBrkrAccntFieldNumber = 427;
    private string execBrkrAccnt_ = "";
    /// <summary>
    /// account at executing broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrAccnt {
      get { return execBrkrAccnt_; }
      set {
        execBrkrAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_cl_firm" field.</summary>
    public const int ExecBrkrClFirmFieldNumber = 430;
    private string execBrkrClFirm_ = "";
    /// <summary>
    /// client/firm at executing broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrClFirm {
      get { return execBrkrClFirm_; }
      set {
        execBrkrClFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_user_name" field.</summary>
    public const int ExecBrkrUserNameFieldNumber = 433;
    private string execBrkrUserName_ = "";
    /// <summary>
    /// user executing broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrUserName {
      get { return execBrkrUserName_; }
      set {
        execBrkrUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_type" field.</summary>
    public const int ClearingFlipTypeFieldNumber = 436;
    private global::Spiderrock.Protobuf.FlipType clearingFlipType_ = global::Spiderrock.Protobuf.FlipType.Unspecified;
    /// <summary>
    /// type of clearing corp delivery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FlipType ClearingFlipType {
      get { return clearingFlipType_; }
      set {
        clearingFlipType_ = value;
      }
    }

    /// <summary>Field number for the "clearing_flip_firm" field.</summary>
    public const int ClearingFlipFirmFieldNumber = 439;
    private string clearingFlipFirm_ = "";
    /// <summary>
    /// deliverTo clearing member (eg. OCC#, NSCC#, MPID, or InstitutionID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipFirm {
      get { return clearingFlipFirm_; }
      set {
        clearingFlipFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_accnt" field.</summary>
    public const int ClearingFlipAccntFieldNumber = 442;
    private string clearingFlipAccnt_ = "";
    /// <summary>
    /// deliverTo client account (eg. OCC AID# or a DVP FBO code)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipAccnt {
      get { return clearingFlipAccnt_; }
      set {
        clearingFlipAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_agent" field.</summary>
    public const int ClearingAgentFieldNumber = 593;
    private string clearingAgent_ = "";
    /// <summary>
    /// deliverTo agent (eg. DVP Agent Bank ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingAgent {
      get { return clearingAgent_; }
      set {
        clearingAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_tax_iD" field.</summary>
    public const int ClearingTaxIDFieldNumber = 594;
    private string clearingTaxID_ = "";
    /// <summary>
    /// deliverTo taxID (eg. DVP TaxID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingTaxID {
      get { return clearingTaxID_; }
      set {
        clearingTaxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "billing_sec_type" field.</summary>
    public const int BillingSecTypeFieldNumber = 445;
    private global::Spiderrock.Protobuf.BillingSecType billingSecType_ = global::Spiderrock.Protobuf.BillingSecType.Unspecified;
    /// <summary>
    /// SpiderRock billing security type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingSecType BillingSecType {
      get { return billingSecType_; }
      set {
        billingSecType_ = value;
      }
    }

    /// <summary>Field number for the "billing_category" field.</summary>
    public const int BillingCategoryFieldNumber = 448;
    private global::Spiderrock.Protobuf.BillingCategory billingCategory_ = global::Spiderrock.Protobuf.BillingCategory.Unspecified;
    /// <summary>
    /// SpiderRock billing category
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingCategory BillingCategory {
      get { return billingCategory_; }
      set {
        billingCategory_ = value;
      }
    }

    /// <summary>Field number for the "pri_agg_group" field.</summary>
    public const int PriAggGroupFieldNumber = 451;
    private string priAggGroup_ = "";
    /// <summary>
    /// primary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriAggGroup {
      get { return priAggGroup_; }
      set {
        priAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_agg_group" field.</summary>
    public const int SecAggGroupFieldNumber = 454;
    private string secAggGroup_ = "";
    /// <summary>
    /// secondary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecAggGroup {
      get { return secAggGroup_; }
      set {
        secAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trd_delta" field.</summary>
    public const int TrdDeltaFieldNumber = 457;
    private float trdDelta_;
    /// <summary>
    /// trade delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDelta {
      get { return trdDelta_; }
      set {
        trdDelta_ = value;
      }
    }

    /// <summary>Field number for the "trd_dDelta" field.</summary>
    public const int TrdDDeltaFieldNumber = 460;
    private float trdDDelta_;
    /// <summary>
    /// trade $delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDDelta {
      get { return trdDDelta_; }
      set {
        trdDDelta_ = value;
      }
    }

    /// <summary>Field number for the "trd_gamma" field.</summary>
    public const int TrdGammaFieldNumber = 463;
    private float trdGamma_;
    /// <summary>
    /// trade gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdGamma {
      get { return trdGamma_; }
      set {
        trdGamma_ = value;
      }
    }

    /// <summary>Field number for the "trd_dGamma" field.</summary>
    public const int TrdDGammaFieldNumber = 466;
    private float trdDGamma_;
    /// <summary>
    /// trade dollar gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDGamma {
      get { return trdDGamma_; }
      set {
        trdDGamma_ = value;
      }
    }

    /// <summary>Field number for the "trd_vega" field.</summary>
    public const int TrdVegaFieldNumber = 469;
    private float trdVega_;
    /// <summary>
    /// trade vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdVega {
      get { return trdVega_; }
      set {
        trdVega_ = value;
      }
    }

    /// <summary>Field number for the "trd_wt_vega" field.</summary>
    public const int TrdWtVegaFieldNumber = 472;
    private float trdWtVega_;
    /// <summary>
    /// trade wtVega: (vega * vol / sqrt(max(0.1, years * 4))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdWtVega {
      get { return trdWtVega_; }
      set {
        trdWtVega_ = value;
      }
    }

    /// <summary>Field number for the "trd_theta" field.</summary>
    public const int TrdThetaFieldNumber = 478;
    private float trdTheta_;
    /// <summary>
    /// trade theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdTheta {
      get { return trdTheta_; }
      set {
        trdTheta_ = value;
      }
    }

    /// <summary>Field number for the "trd_beta" field.</summary>
    public const int TrdBetaFieldNumber = 481;
    private float trdBeta_;
    /// <summary>
    /// trade beta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdBeta {
      get { return trdBeta_; }
      set {
        trdBeta_ = value;
      }
    }

    /// <summary>Field number for the "trd_dBeta" field.</summary>
    public const int TrdDBetaFieldNumber = 484;
    private float trdDBeta_;
    /// <summary>
    /// trade $beta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDBeta {
      get { return trdDBeta_; }
      set {
        trdDBeta_ = value;
      }
    }

    /// <summary>Field number for the "trd_notional_value" field.</summary>
    public const int TrdNotionalValueFieldNumber = 487;
    private float trdNotionalValue_;
    /// <summary>
    /// cn * pointValue * uPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdNotionalValue {
      get { return trdNotionalValue_; }
      set {
        trdNotionalValue_ = value;
      }
    }

    /// <summary>Field number for the "trd_market_value" field.</summary>
    public const int TrdMarketValueFieldNumber = 490;
    private float trdMarketValue_;
    /// <summary>
    /// cn * pointValue * fillPrice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdMarketValue {
      get { return trdMarketValue_; }
      set {
        trdMarketValue_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vDn" field.</summary>
    public const int MarginUDnVDnFieldNumber = 595;
    private float marginUDnVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVDn {
      get { return marginUDnVDn_; }
      set {
        marginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vUp" field.</summary>
    public const int MarginUDnVUpFieldNumber = 596;
    private float marginUDnVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVUp {
      get { return marginUDnVUp_; }
      set {
        marginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vDn" field.</summary>
    public const int MarginUUpVDnFieldNumber = 597;
    private float marginUUpVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVDn {
      get { return marginUUpVDn_; }
      set {
        marginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vUp" field.</summary>
    public const int MarginUUpVUpFieldNumber = 598;
    private float marginUUpVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVUp {
      get { return marginUUpVUp_; }
      set {
        marginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "trd_fair_edge" field.</summary>
    public const int TrdFairEdgeFieldNumber = 517;
    private float trdFairEdge_;
    /// <summary>
    /// SR trade edge (fill price to SR fair price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdFairEdge {
      get { return trdFairEdge_; }
      set {
        trdFairEdge_ = value;
      }
    }

    /// <summary>Field number for the "trd_fair_edge_unit" field.</summary>
    public const int TrdFairEdgeUnitFieldNumber = 520;
    private float trdFairEdgeUnit_;
    /// <summary>
    /// SR trade edge normalized to $100 underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdFairEdgeUnit {
      get { return trdFairEdgeUnit_; }
      set {
        trdFairEdgeUnit_ = value;
      }
    }

    /// <summary>Field number for the "trd_theo_edge" field.</summary>
    public const int TrdTheoEdgeFieldNumber = 523;
    private float trdTheoEdge_;
    /// <summary>
    /// theo edge (user supplied theo vol/prc to SpiderRock surface price) (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdTheoEdge {
      get { return trdTheoEdge_; }
      set {
        trdTheoEdge_ = value;
      }
    }

    /// <summary>Field number for the "trd_theo_edge_unit" field.</summary>
    public const int TrdTheoEdgeUnitFieldNumber = 526;
    private float trdTheoEdgeUnit_;
    /// <summary>
    /// theo edge normalized to $100 underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdTheoEdgeUnit {
      get { return trdTheoEdgeUnit_; }
      set {
        trdTheoEdgeUnit_ = value;
      }
    }

    /// <summary>Field number for the "cl_arrive_pn_l" field.</summary>
    public const int ClArrivePnLFieldNumber = 529;
    private float clArrivePnL_;
    /// <summary>
    /// arrival PnL (client arrival mark to fill mark) [from clArriveMark on parent order if any]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClArrivePnL {
      get { return clArrivePnL_; }
      set {
        clArrivePnL_ = value;
      }
    }

    /// <summary>Field number for the "arrive_pn_l" field.</summary>
    public const int ArrivePnLFieldNumber = 532;
    private float arrivePnL_;
    /// <summary>
    /// arrival PnL (parent arrival mark to fill mark)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArrivePnL {
      get { return arrivePnL_; }
      set {
        arrivePnL_ = value;
      }
    }

    /// <summary>Field number for the "arrive_dn_pn_l" field.</summary>
    public const int ArriveDnPnLFieldNumber = 535;
    private float arriveDnPnL_;
    /// <summary>
    /// arrival Dn PnL (arrivalPnL - uDriftArrivalPnL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArriveDnPnL {
      get { return arriveDnPnL_; }
      set {
        arriveDnPnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_arrive_pn_l" field.</summary>
    public const int UDriftArrivePnLFieldNumber = 538;
    private float uDriftArrivePnL_;
    /// <summary>
    /// underlier delta drift PnL (arrival uMark to fill uMark)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftArrivePnL {
      get { return uDriftArrivePnL_; }
      set {
        uDriftArrivePnL_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_slip" field.</summary>
    public const int ChildLimitSlipFieldNumber = 541;
    private float childLimitSlip_;
    /// <summary>
    /// Fill Slippage (ChildLimitPrice to FillPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildLimitSlip {
      get { return childLimitSlip_; }
      set {
        childLimitSlip_ = value;
      }
    }

    /// <summary>Field number for the "half_width_pn_l" field.</summary>
    public const int HalfWidthPnLFieldNumber = 544;
    private float halfWidthPnL_;
    /// <summary>
    /// estimated half-width PnL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HalfWidthPnL {
      get { return halfWidthPnL_; }
      set {
        halfWidthPnL_ = value;
      }
    }

    /// <summary>Field number for the "day_dn_pn_l" field.</summary>
    public const int DayDnPnLFieldNumber = 547;
    private float dayDnPnL_;
    /// <summary>
    /// delta neutral PnL (to EOD)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayDnPnL {
      get { return dayDnPnL_; }
      set {
        dayDnPnL_ = value;
      }
    }

    /// <summary>Field number for the "day_m1_pn_l" field.</summary>
    public const int DayM1PnLFieldNumber = 550;
    private float dayM1PnL_;
    /// <summary>
    /// delta neutral PnL (Fill + 1M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayM1PnL {
      get { return dayM1PnL_; }
      set {
        dayM1PnL_ = value;
      }
    }

    /// <summary>Field number for the "day_m10_pn_l" field.</summary>
    public const int DayM10PnLFieldNumber = 553;
    private float dayM10PnL_;
    /// <summary>
    /// delta neutral PnL (Fill + 10M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayM10PnL {
      get { return dayM10PnL_; }
      set {
        dayM10PnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_day_pn_l" field.</summary>
    public const int UDriftDayPnLFieldNumber = 556;
    private float uDriftDayPnL_;
    /// <summary>
    /// underlier delta drift PnL (to EOD)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftDayPnL {
      get { return uDriftDayPnL_; }
      set {
        uDriftDayPnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_m1_pn_l" field.</summary>
    public const int UDriftM1PnLFieldNumber = 559;
    private float uDriftM1PnL_;
    /// <summary>
    /// underlier delta drift PnL (Fill + 1M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftM1PnL {
      get { return uDriftM1PnL_; }
      set {
        uDriftM1PnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_m10_pn_l" field.</summary>
    public const int UDriftM10PnLFieldNumber = 562;
    private float uDriftM10PnL_;
    /// <summary>
    /// underlier delta drift PnL (Fill + 10M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftM10PnL {
      get { return uDriftM10PnL_; }
      set {
        uDriftM10PnL_ = value;
      }
    }

    /// <summary>Field number for the "day_pn_l" field.</summary>
    public const int DayPnLFieldNumber = 565;
    private float dayPnL_;
    /// <summary>
    /// actual PnL to EOD (fillMark to liveMark)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnL {
      get { return dayPnL_; }
      set {
        dayPnL_ = value;
      }
    }

    /// <summary>Field number for the "m1_mark" field.</summary>
    public const int M1MarkFieldNumber = 568;
    private double m1Mark_;
    /// <summary>
    /// T+1min
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double M1Mark {
      get { return m1Mark_; }
      set {
        m1Mark_ = value;
      }
    }

    /// <summary>Field number for the "m1_uPrc" field.</summary>
    public const int M1UPrcFieldNumber = 571;
    private double m1UPrc_;
    /// <summary>
    /// T+1min
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double M1UPrc {
      get { return m1UPrc_; }
      set {
        m1UPrc_ = value;
      }
    }

    /// <summary>Field number for the "m10_mark" field.</summary>
    public const int M10MarkFieldNumber = 574;
    private double m10Mark_;
    /// <summary>
    /// T+10min
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double M10Mark {
      get { return m10Mark_; }
      set {
        m10Mark_ = value;
      }
    }

    /// <summary>Field number for the "m10_uPrc" field.</summary>
    public const int M10UPrcFieldNumber = 577;
    private double m10UPrc_;
    /// <summary>
    /// T+10min
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double M10UPrc {
      get { return m10UPrc_; }
      set {
        m10UPrc_ = value;
      }
    }

    /// <summary>Field number for the "live_mark" field.</summary>
    public const int LiveMarkFieldNumber = 580;
    private double liveMark_;
    /// <summary>
    /// Live @ Record Query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveMark {
      get { return liveMark_; }
      set {
        liveMark_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc" field.</summary>
    public const int LiveUPrcFieldNumber = 583;
    private double liveUPrc_;
    /// <summary>
    /// Live @ Record Query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc {
      get { return liveUPrc_; }
      set {
        liveUPrc_ = value;
      }
    }

    /// <summary>Field number for the "trd_mark_error" field.</summary>
    public const int TrdMarkErrorFieldNumber = 586;
    private string trdMarkError_ = "";
    /// <summary>
    /// trade mark error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TrdMarkError {
      get { return trdMarkError_; }
      set {
        trdMarkError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "day_mark_error" field.</summary>
    public const int DayMarkErrorFieldNumber = 589;
    private string dayMarkError_ = "";
    /// <summary>
    /// day mark error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DayMarkError {
      get { return dayMarkError_; }
      set {
        dayMarkError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 592;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// SR system timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ToolCompositeExecution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ToolCompositeExecution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (Accnt != other.Accnt) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (Side != other.Side) return false;
      if (Version != other.Version) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (SrcRoutingCode != other.SrcRoutingCode) return false;
      if (UserName != other.UserName) return false;
      if (Server != other.Server) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (Sector != other.Sector) return false;
      if (ClientTags != other.ClientTags) return false;
      if (IndNum != other.IndNum) return false;
      if (SubNum != other.SubNum) return false;
      if (GrpNum != other.GrpNum) return false;
      if (NbrNum != other.NbrNum) return false;
      if (ExpCode != other.ExpCode) return false;
      if (SkewCode != other.SkewCode) return false;
      if (WidthCode != other.WidthCode) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTickSize, other.MinTickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (ParentShape != other.ParentShape) return false;
      if (ParentLimitType != other.ParentLimitType) return false;
      if (ParentLimitClass != other.ParentLimitClass) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (ParentOrderSize != other.ParentOrderSize) return false;
      if (!object.Equals(ParentDttm, other.ParentDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentUMark, other.ParentUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentBid, other.ParentBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentAsk, other.ParentAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentFairPrc, other.ParentFairPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentFairWidth, other.ParentFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentLimitPrc, other.ParentLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentLimitRefUPrc, other.ParentLimitRefUPrc)) return false;
      if (ParentSSaleFlag != other.ParentSSaleFlag) return false;
      if (ParentPositionType != other.ParentPositionType) return false;
      if (ParentStrategy != other.ParentStrategy) return false;
      if (ParentAutoHedge != other.ParentAutoHedge) return false;
      if (!object.Equals(ChildDttm, other.ChildDttm)) return false;
      if (ChildClOrdId != other.ChildClOrdId) return false;
      if (ChildRoutingCode != other.ChildRoutingCode) return false;
      if (ChildSize != other.ChildSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildPrice, other.ChildPrice)) return false;
      if (ChildExch != other.ChildExch) return false;
      if (ChildExDest != other.ChildExDest) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildUPrc, other.ChildUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildBid, other.ChildBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildAsk, other.ChildAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildFairPrc, other.ChildFairPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildFairWidth, other.ChildFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildVol, other.ChildVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildProb, other.ChildProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitPrc, other.ChildLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitRefUPrc, other.ChildLimitRefUPrc)) return false;
      if (ChildAlgoHandler != other.ChildAlgoHandler) return false;
      if (ChildOrderHandling != other.ChildOrderHandling) return false;
      if (ChildCreateReason != other.ChildCreateReason) return false;
      if (ChildCancelReason != other.ChildCancelReason) return false;
      if (ChildMktStance != other.ChildMktStance) return false;
      if (ChildCxlAttempted != other.ChildCxlAttempted) return false;
      if (ChildSSaleFlag != other.ChildSSaleFlag) return false;
      if (ChildPositionType != other.ChildPositionType) return false;
      if (ChildFirmType != other.ChildFirmType) return false;
      if (ChildCapacity != other.ChildCapacity) return false;
      if (FillExch != other.FillExch) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPrice, other.FillPrice)) return false;
      if (!object.Equals(FillDttm, other.FillDttm)) return false;
      if (FillSize != other.FillSize) return false;
      if (FillPointValue != other.FillPointValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVol, other.FillVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillProb, other.FillProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitPrc, other.FillLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitRefUPrc, other.FillLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUPrc, other.FillUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBeta, other.FillBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTv, other.FillTv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTp, other.FillTp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid, other.FillBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk, other.FillAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillFairPrc, other.FillFairPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillFairWidth, other.FillFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBrkrRate, other.FillBrkrRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRoutingRate, other.FillRoutingRate)) return false;
      if (FillOrigExecID != other.FillOrigExecID) return false;
      if (FillLastExecID != other.FillLastExecID) return false;
      if (FillExecStatus != other.FillExecStatus) return false;
      if (FillRemoteText != other.FillRemoteText) return false;
      if (!object.Equals(FillTransactDttm, other.FillTransactDttm)) return false;
      if (FillLiquidityTag != other.FillLiquidityTag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillExchFee, other.FillExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDe, other.FillDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillGa, other.FillGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVe, other.FillVe)) return false;
      if (ExecRole != other.ExecRole) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ExecBrkrAccnt != other.ExecBrkrAccnt) return false;
      if (ExecBrkrClFirm != other.ExecBrkrClFirm) return false;
      if (ExecBrkrUserName != other.ExecBrkrUserName) return false;
      if (ClearingFlipType != other.ClearingFlipType) return false;
      if (ClearingFlipFirm != other.ClearingFlipFirm) return false;
      if (ClearingFlipAccnt != other.ClearingFlipAccnt) return false;
      if (ClearingAgent != other.ClearingAgent) return false;
      if (ClearingTaxID != other.ClearingTaxID) return false;
      if (BillingSecType != other.BillingSecType) return false;
      if (BillingCategory != other.BillingCategory) return false;
      if (PriAggGroup != other.PriAggGroup) return false;
      if (SecAggGroup != other.SecAggGroup) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDelta, other.TrdDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDDelta, other.TrdDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdGamma, other.TrdGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDGamma, other.TrdDGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdVega, other.TrdVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdWtVega, other.TrdWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdTheta, other.TrdTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdBeta, other.TrdBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDBeta, other.TrdDBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdNotionalValue, other.TrdNotionalValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdMarketValue, other.TrdMarketValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVDn, other.MarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVUp, other.MarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVDn, other.MarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVUp, other.MarginUUpVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdFairEdge, other.TrdFairEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdFairEdgeUnit, other.TrdFairEdgeUnit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdTheoEdge, other.TrdTheoEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdTheoEdgeUnit, other.TrdTheoEdgeUnit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClArrivePnL, other.ClArrivePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArrivePnL, other.ArrivePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArriveDnPnL, other.ArriveDnPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftArrivePnL, other.UDriftArrivePnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildLimitSlip, other.ChildLimitSlip)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HalfWidthPnL, other.HalfWidthPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayDnPnL, other.DayDnPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayM1PnL, other.DayM1PnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayM10PnL, other.DayM10PnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftDayPnL, other.UDriftDayPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftM1PnL, other.UDriftM1PnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftM10PnL, other.UDriftM10PnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnL, other.DayPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M1Mark, other.M1Mark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M1UPrc, other.M1UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M10Mark, other.M10Mark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M10UPrc, other.M10UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveMark, other.LiveMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc, other.LiveUPrc)) return false;
      if (TrdMarkError != other.TrdMarkError) return false;
      if (DayMarkError != other.DayMarkError) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (SrcRoutingCode.Length != 0) hash ^= SrcRoutingCode.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (ClientTags.Length != 0) hash ^= ClientTags.GetHashCode();
      if (IndNum != 0) hash ^= IndNum.GetHashCode();
      if (SubNum != 0) hash ^= SubNum.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (NbrNum != 0) hash ^= NbrNum.GetHashCode();
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) hash ^= ExpCode.GetHashCode();
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) hash ^= SkewCode.GetHashCode();
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) hash ^= WidthCode.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (MinTickSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTickSize);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ParentShape.GetHashCode();
      if (ParentLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= ParentLimitType.GetHashCode();
      if (ParentLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= ParentLimitClass.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (ParentOrderSize != 0) hash ^= ParentOrderSize.GetHashCode();
      if (parentDttm_ != null) hash ^= ParentDttm.GetHashCode();
      if (ParentUMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentUMark);
      if (ParentBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentBid);
      if (ParentAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentAsk);
      if (ParentFairPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentFairPrc);
      if (ParentFairWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentFairWidth);
      if (ParentLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentLimitPrc);
      if (ParentLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentLimitRefUPrc);
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= ParentSSaleFlag.GetHashCode();
      if (ParentPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= ParentPositionType.GetHashCode();
      if (ParentStrategy.Length != 0) hash ^= ParentStrategy.GetHashCode();
      if (ParentAutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= ParentAutoHedge.GetHashCode();
      if (childDttm_ != null) hash ^= ChildDttm.GetHashCode();
      if (ChildClOrdId.Length != 0) hash ^= ChildClOrdId.GetHashCode();
      if (ChildRoutingCode.Length != 0) hash ^= ChildRoutingCode.GetHashCode();
      if (ChildSize != 0) hash ^= ChildSize.GetHashCode();
      if (ChildPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildPrice);
      if (ChildExch.Length != 0) hash ^= ChildExch.GetHashCode();
      if (ChildExDest.Length != 0) hash ^= ChildExDest.GetHashCode();
      if (ChildUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildUPrc);
      if (ChildBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildBid);
      if (ChildAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildAsk);
      if (ChildFairPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildFairPrc);
      if (ChildFairWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildFairWidth);
      if (ChildVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildVol);
      if (ChildProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildProb);
      if (ChildLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitPrc);
      if (ChildLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitRefUPrc);
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) hash ^= ChildAlgoHandler.GetHashCode();
      if (ChildOrderHandling.Length != 0) hash ^= ChildOrderHandling.GetHashCode();
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) hash ^= ChildCreateReason.GetHashCode();
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) hash ^= ChildCancelReason.GetHashCode();
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) hash ^= ChildMktStance.GetHashCode();
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ChildCxlAttempted.GetHashCode();
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= ChildSSaleFlag.GetHashCode();
      if (ChildPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= ChildPositionType.GetHashCode();
      if (ChildFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= ChildFirmType.GetHashCode();
      if (ChildCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) hash ^= ChildCapacity.GetHashCode();
      if (FillExch.Length != 0) hash ^= FillExch.GetHashCode();
      if (FillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPrice);
      if (fillDttm_ != null) hash ^= FillDttm.GetHashCode();
      if (FillSize != 0) hash ^= FillSize.GetHashCode();
      if (FillPointValue != 0) hash ^= FillPointValue.GetHashCode();
      if (FillVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVol);
      if (FillProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillProb);
      if (FillLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitPrc);
      if (FillLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitRefUPrc);
      if (FillUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUPrc);
      if (FillBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBeta);
      if (FillTv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTv);
      if (FillTp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTp);
      if (FillBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid);
      if (FillAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk);
      if (FillFairPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillFairPrc);
      if (FillFairWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillFairWidth);
      if (FillBrkrRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBrkrRate);
      if (FillRoutingRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRoutingRate);
      if (FillOrigExecID.Length != 0) hash ^= FillOrigExecID.GetHashCode();
      if (FillLastExecID.Length != 0) hash ^= FillLastExecID.GetHashCode();
      if (FillExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) hash ^= FillExecStatus.GetHashCode();
      if (FillRemoteText.Length != 0) hash ^= FillRemoteText.GetHashCode();
      if (fillTransactDttm_ != null) hash ^= FillTransactDttm.GetHashCode();
      if (FillLiquidityTag.Length != 0) hash ^= FillLiquidityTag.GetHashCode();
      if (FillExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillExchFee);
      if (FillDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDe);
      if (FillGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillGa);
      if (FillVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVe);
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) hash ^= ExecRole.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ExecBrkrAccnt.Length != 0) hash ^= ExecBrkrAccnt.GetHashCode();
      if (ExecBrkrClFirm.Length != 0) hash ^= ExecBrkrClFirm.GetHashCode();
      if (ExecBrkrUserName.Length != 0) hash ^= ExecBrkrUserName.GetHashCode();
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) hash ^= ClearingFlipType.GetHashCode();
      if (ClearingFlipFirm.Length != 0) hash ^= ClearingFlipFirm.GetHashCode();
      if (ClearingFlipAccnt.Length != 0) hash ^= ClearingFlipAccnt.GetHashCode();
      if (ClearingAgent.Length != 0) hash ^= ClearingAgent.GetHashCode();
      if (ClearingTaxID.Length != 0) hash ^= ClearingTaxID.GetHashCode();
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) hash ^= BillingSecType.GetHashCode();
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) hash ^= BillingCategory.GetHashCode();
      if (PriAggGroup.Length != 0) hash ^= PriAggGroup.GetHashCode();
      if (SecAggGroup.Length != 0) hash ^= SecAggGroup.GetHashCode();
      if (TrdDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDelta);
      if (TrdDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDDelta);
      if (TrdGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdGamma);
      if (TrdDGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDGamma);
      if (TrdVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdVega);
      if (TrdWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdWtVega);
      if (TrdTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdTheta);
      if (TrdBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdBeta);
      if (TrdDBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDBeta);
      if (TrdNotionalValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdNotionalValue);
      if (TrdMarketValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdMarketValue);
      if (MarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVDn);
      if (MarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVUp);
      if (MarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVDn);
      if (MarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVUp);
      if (TrdFairEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdFairEdge);
      if (TrdFairEdgeUnit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdFairEdgeUnit);
      if (TrdTheoEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdTheoEdge);
      if (TrdTheoEdgeUnit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdTheoEdgeUnit);
      if (ClArrivePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClArrivePnL);
      if (ArrivePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArrivePnL);
      if (ArriveDnPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArriveDnPnL);
      if (UDriftArrivePnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftArrivePnL);
      if (ChildLimitSlip != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildLimitSlip);
      if (HalfWidthPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HalfWidthPnL);
      if (DayDnPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayDnPnL);
      if (DayM1PnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayM1PnL);
      if (DayM10PnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayM10PnL);
      if (UDriftDayPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftDayPnL);
      if (UDriftM1PnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftM1PnL);
      if (UDriftM10PnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftM10PnL);
      if (DayPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnL);
      if (M1Mark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M1Mark);
      if (M1UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M1UPrc);
      if (M10Mark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M10Mark);
      if (M10UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M10UPrc);
      if (LiveMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveMark);
      if (LiveUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc);
      if (TrdMarkError.Length != 0) hash ^= TrdMarkError.GetHashCode();
      if (DayMarkError.Length != 0) hash ^= DayMarkError.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TradeDate);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ClientFirm);
      }
      if (secKey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SecType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) Side);
      }
      if (Version != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(Version);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(GroupingCode);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(RiskGroupId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(SrcRoutingCode);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(UserName);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Server);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 9);
        output.WriteMessage(Ticker);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(Sector);
      }
      if (ClientTags.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(ClientTags);
      }
      if (IndNum != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(NbrNum);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) UPriceFormat);
      }
      if (Years != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Years);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) UnderlierType);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MinTickSize);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) PointCurrency);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(UnderliersPerCn);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) ParentShape);
      }
      if (ParentLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) ParentLimitType);
      }
      if (ParentLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ParentLimitClass);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(ParentOrderSize);
      }
      if (parentDttm_ != null) {
        output.WriteRawTag(226, 13);
        output.WriteMessage(ParentDttm);
      }
      if (ParentUMark != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(ParentUMark);
      }
      if (ParentBid != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(ParentBid);
      }
      if (ParentAsk != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(ParentAsk);
      }
      if (ParentFairPrc != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(ParentFairPrc);
      }
      if (ParentFairWidth != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(ParentFairWidth);
      }
      if (ParentLimitPrc != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(ParentLimitPrc);
      }
      if (ParentLimitRefUPrc != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(ParentLimitRefUPrc);
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) ParentSSaleFlag);
      }
      if (ParentPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) ParentPositionType);
      }
      if (ParentStrategy.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(ParentStrategy);
      }
      if (ParentAutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) ParentAutoHedge);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(ChildDttm);
      }
      if (ChildClOrdId.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(ChildClOrdId);
      }
      if (ChildRoutingCode.Length != 0) {
        output.WriteRawTag(178, 16);
        output.WriteString(ChildRoutingCode);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(ChildPrice);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(250, 16);
        output.WriteString(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(146, 17);
        output.WriteString(ChildExDest);
      }
      if (ChildUPrc != 0D) {
        output.WriteRawTag(169, 17);
        output.WriteDouble(ChildUPrc);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(193, 17);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(ChildAsk);
      }
      if (ChildFairPrc != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(ChildFairPrc);
      }
      if (ChildFairWidth != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(ChildFairWidth);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(209, 18);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (ChildPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) ChildPositionType);
      }
      if (ChildFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) ChildFirmType);
      }
      if (ChildCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) ChildCapacity);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(242, 20);
        output.WriteString(FillExch);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(137, 21);
        output.WriteDouble(FillPrice);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(162, 21);
        output.WriteMessage(FillDttm);
      }
      if (FillSize != 0) {
        output.WriteRawTag(184, 21);
        output.WriteInt32(FillSize);
      }
      if (FillPointValue != 0) {
        output.WriteRawTag(208, 21);
        output.WriteInt32(FillPointValue);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(FillVol);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(FillProb);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillUPrc != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(FillUPrc);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(FillBeta);
      }
      if (FillTv != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(FillTv);
      }
      if (FillTp != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(FillTp);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(169, 23);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(193, 23);
        output.WriteDouble(FillAsk);
      }
      if (FillFairPrc != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(FillFairPrc);
      }
      if (FillFairWidth != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(FillFairWidth);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(FillRoutingRate);
      }
      if (FillOrigExecID.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(FillOrigExecID);
      }
      if (FillLastExecID.Length != 0) {
        output.WriteRawTag(210, 24);
        output.WriteString(FillLastExecID);
      }
      if (FillExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) FillExecStatus);
      }
      if (FillRemoteText.Length != 0) {
        output.WriteRawTag(130, 25);
        output.WriteString(FillRemoteText);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(154, 25);
        output.WriteMessage(FillTransactDttm);
      }
      if (FillLiquidityTag.Length != 0) {
        output.WriteRawTag(178, 25);
        output.WriteString(FillLiquidityTag);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(FillExchFee);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(FillDe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(FillGa);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(FillVe);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(194, 26);
        output.WriteString(ExecBrkrCode);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(218, 26);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(138, 27);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(160, 27);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(186, 27);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(210, 27);
        output.WriteString(ClearingFlipAccnt);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) BillingCategory);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(154, 28);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(178, 28);
        output.WriteString(SecAggGroup);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TrdDelta);
      }
      if (TrdDDelta != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(TrdDDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(TrdGamma);
      }
      if (TrdDGamma != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(TrdDGamma);
      }
      if (TrdVega != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TrdVega);
      }
      if (TrdWtVega != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(TrdWtVega);
      }
      if (TrdTheta != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(TrdTheta);
      }
      if (TrdBeta != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(TrdBeta);
      }
      if (TrdDBeta != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(TrdDBeta);
      }
      if (TrdNotionalValue != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(TrdNotionalValue);
      }
      if (TrdMarketValue != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(TrdMarketValue);
      }
      if (TrdFairEdge != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(TrdFairEdge);
      }
      if (TrdFairEdgeUnit != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(TrdFairEdgeUnit);
      }
      if (TrdTheoEdge != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(TrdTheoEdge);
      }
      if (TrdTheoEdgeUnit != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(TrdTheoEdgeUnit);
      }
      if (ClArrivePnL != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(ClArrivePnL);
      }
      if (ArrivePnL != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(ArrivePnL);
      }
      if (ArriveDnPnL != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(ArriveDnPnL);
      }
      if (UDriftArrivePnL != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(UDriftArrivePnL);
      }
      if (ChildLimitSlip != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(ChildLimitSlip);
      }
      if (HalfWidthPnL != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(HalfWidthPnL);
      }
      if (DayDnPnL != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(DayDnPnL);
      }
      if (DayM1PnL != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(DayM1PnL);
      }
      if (DayM10PnL != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(DayM10PnL);
      }
      if (UDriftDayPnL != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(UDriftDayPnL);
      }
      if (UDriftM1PnL != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(UDriftM1PnL);
      }
      if (UDriftM10PnL != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(UDriftM10PnL);
      }
      if (DayPnL != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(DayPnL);
      }
      if (M1Mark != 0D) {
        output.WriteRawTag(193, 35);
        output.WriteDouble(M1Mark);
      }
      if (M1UPrc != 0D) {
        output.WriteRawTag(217, 35);
        output.WriteDouble(M1UPrc);
      }
      if (M10Mark != 0D) {
        output.WriteRawTag(241, 35);
        output.WriteDouble(M10Mark);
      }
      if (M10UPrc != 0D) {
        output.WriteRawTag(137, 36);
        output.WriteDouble(M10UPrc);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(161, 36);
        output.WriteDouble(LiveMark);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(185, 36);
        output.WriteDouble(LiveUPrc);
      }
      if (TrdMarkError.Length != 0) {
        output.WriteRawTag(210, 36);
        output.WriteString(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        output.WriteRawTag(234, 36);
        output.WriteString(DayMarkError);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 37);
        output.WriteMessage(Timestamp);
      }
      if (ClearingAgent.Length != 0) {
        output.WriteRawTag(138, 37);
        output.WriteString(ClearingAgent);
      }
      if (ClearingTaxID.Length != 0) {
        output.WriteRawTag(146, 37);
        output.WriteString(ClearingTaxID);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(157, 37);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(165, 37);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(173, 37);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(MarginUUpVUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TradeDate);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ClientFirm);
      }
      if (secKey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SecType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) Side);
      }
      if (Version != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(Version);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(GroupingCode);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(RiskGroupId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(SrcRoutingCode);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(UserName);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Server);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 9);
        output.WriteMessage(Ticker);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(Sector);
      }
      if (ClientTags.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(ClientTags);
      }
      if (IndNum != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(NbrNum);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) UPriceFormat);
      }
      if (Years != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Years);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) UnderlierType);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MinTickSize);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) PointCurrency);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(UnderliersPerCn);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) ParentShape);
      }
      if (ParentLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) ParentLimitType);
      }
      if (ParentLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ParentLimitClass);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(ParentOrderSize);
      }
      if (parentDttm_ != null) {
        output.WriteRawTag(226, 13);
        output.WriteMessage(ParentDttm);
      }
      if (ParentUMark != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(ParentUMark);
      }
      if (ParentBid != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(ParentBid);
      }
      if (ParentAsk != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(ParentAsk);
      }
      if (ParentFairPrc != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(ParentFairPrc);
      }
      if (ParentFairWidth != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(ParentFairWidth);
      }
      if (ParentLimitPrc != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(ParentLimitPrc);
      }
      if (ParentLimitRefUPrc != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(ParentLimitRefUPrc);
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) ParentSSaleFlag);
      }
      if (ParentPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) ParentPositionType);
      }
      if (ParentStrategy.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(ParentStrategy);
      }
      if (ParentAutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) ParentAutoHedge);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(ChildDttm);
      }
      if (ChildClOrdId.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(ChildClOrdId);
      }
      if (ChildRoutingCode.Length != 0) {
        output.WriteRawTag(178, 16);
        output.WriteString(ChildRoutingCode);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(ChildPrice);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(250, 16);
        output.WriteString(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(146, 17);
        output.WriteString(ChildExDest);
      }
      if (ChildUPrc != 0D) {
        output.WriteRawTag(169, 17);
        output.WriteDouble(ChildUPrc);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(193, 17);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(ChildAsk);
      }
      if (ChildFairPrc != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(ChildFairPrc);
      }
      if (ChildFairWidth != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(ChildFairWidth);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(209, 18);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (ChildPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) ChildPositionType);
      }
      if (ChildFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) ChildFirmType);
      }
      if (ChildCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) ChildCapacity);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(242, 20);
        output.WriteString(FillExch);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(137, 21);
        output.WriteDouble(FillPrice);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(162, 21);
        output.WriteMessage(FillDttm);
      }
      if (FillSize != 0) {
        output.WriteRawTag(184, 21);
        output.WriteInt32(FillSize);
      }
      if (FillPointValue != 0) {
        output.WriteRawTag(208, 21);
        output.WriteInt32(FillPointValue);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(FillVol);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(FillProb);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillUPrc != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(FillUPrc);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(FillBeta);
      }
      if (FillTv != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(FillTv);
      }
      if (FillTp != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(FillTp);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(169, 23);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(193, 23);
        output.WriteDouble(FillAsk);
      }
      if (FillFairPrc != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(FillFairPrc);
      }
      if (FillFairWidth != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(FillFairWidth);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(FillRoutingRate);
      }
      if (FillOrigExecID.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(FillOrigExecID);
      }
      if (FillLastExecID.Length != 0) {
        output.WriteRawTag(210, 24);
        output.WriteString(FillLastExecID);
      }
      if (FillExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) FillExecStatus);
      }
      if (FillRemoteText.Length != 0) {
        output.WriteRawTag(130, 25);
        output.WriteString(FillRemoteText);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(154, 25);
        output.WriteMessage(FillTransactDttm);
      }
      if (FillLiquidityTag.Length != 0) {
        output.WriteRawTag(178, 25);
        output.WriteString(FillLiquidityTag);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(FillExchFee);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(FillDe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(FillGa);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(FillVe);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(194, 26);
        output.WriteString(ExecBrkrCode);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(218, 26);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(138, 27);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(160, 27);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(186, 27);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(210, 27);
        output.WriteString(ClearingFlipAccnt);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) BillingCategory);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(154, 28);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(178, 28);
        output.WriteString(SecAggGroup);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TrdDelta);
      }
      if (TrdDDelta != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(TrdDDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(TrdGamma);
      }
      if (TrdDGamma != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(TrdDGamma);
      }
      if (TrdVega != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TrdVega);
      }
      if (TrdWtVega != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(TrdWtVega);
      }
      if (TrdTheta != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(TrdTheta);
      }
      if (TrdBeta != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(TrdBeta);
      }
      if (TrdDBeta != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(TrdDBeta);
      }
      if (TrdNotionalValue != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(TrdNotionalValue);
      }
      if (TrdMarketValue != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(TrdMarketValue);
      }
      if (TrdFairEdge != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(TrdFairEdge);
      }
      if (TrdFairEdgeUnit != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(TrdFairEdgeUnit);
      }
      if (TrdTheoEdge != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(TrdTheoEdge);
      }
      if (TrdTheoEdgeUnit != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(TrdTheoEdgeUnit);
      }
      if (ClArrivePnL != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(ClArrivePnL);
      }
      if (ArrivePnL != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(ArrivePnL);
      }
      if (ArriveDnPnL != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(ArriveDnPnL);
      }
      if (UDriftArrivePnL != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(UDriftArrivePnL);
      }
      if (ChildLimitSlip != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(ChildLimitSlip);
      }
      if (HalfWidthPnL != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(HalfWidthPnL);
      }
      if (DayDnPnL != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(DayDnPnL);
      }
      if (DayM1PnL != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(DayM1PnL);
      }
      if (DayM10PnL != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(DayM10PnL);
      }
      if (UDriftDayPnL != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(UDriftDayPnL);
      }
      if (UDriftM1PnL != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(UDriftM1PnL);
      }
      if (UDriftM10PnL != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(UDriftM10PnL);
      }
      if (DayPnL != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(DayPnL);
      }
      if (M1Mark != 0D) {
        output.WriteRawTag(193, 35);
        output.WriteDouble(M1Mark);
      }
      if (M1UPrc != 0D) {
        output.WriteRawTag(217, 35);
        output.WriteDouble(M1UPrc);
      }
      if (M10Mark != 0D) {
        output.WriteRawTag(241, 35);
        output.WriteDouble(M10Mark);
      }
      if (M10UPrc != 0D) {
        output.WriteRawTag(137, 36);
        output.WriteDouble(M10UPrc);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(161, 36);
        output.WriteDouble(LiveMark);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(185, 36);
        output.WriteDouble(LiveUPrc);
      }
      if (TrdMarkError.Length != 0) {
        output.WriteRawTag(210, 36);
        output.WriteString(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        output.WriteRawTag(234, 36);
        output.WriteString(DayMarkError);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 37);
        output.WriteMessage(Timestamp);
      }
      if (ClearingAgent.Length != 0) {
        output.WriteRawTag(138, 37);
        output.WriteString(ClearingAgent);
      }
      if (ClearingTaxID.Length != 0) {
        output.WriteRawTag(146, 37);
        output.WriteString(ClearingTaxID);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(157, 37);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(165, 37);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(173, 37);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(MarginUUpVUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcRoutingCode);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Server.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (ClientTags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientTags);
      }
      if (IndNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndNum);
      }
      if (SubNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubNum);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (NbrNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbrNum);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (MinTickSize != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentShape);
      }
      if (ParentLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentLimitType);
      }
      if (ParentLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentLimitClass);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentOrderSize);
      }
      if (parentDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParentDttm);
      }
      if (ParentUMark != 0D) {
        size += 2 + 8;
      }
      if (ParentBid != 0D) {
        size += 2 + 8;
      }
      if (ParentAsk != 0D) {
        size += 2 + 8;
      }
      if (ParentFairPrc != 0F) {
        size += 2 + 4;
      }
      if (ParentFairWidth != 0F) {
        size += 2 + 4;
      }
      if (ParentLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (ParentLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentSSaleFlag);
      }
      if (ParentPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentPositionType);
      }
      if (ParentStrategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentStrategy);
      }
      if (ParentAutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentAutoHedge);
      }
      if (childDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChildDttm);
      }
      if (ChildClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildClOrdId);
      }
      if (ChildRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildRoutingCode);
      }
      if (ChildSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildSize);
      }
      if (ChildPrice != 0D) {
        size += 2 + 8;
      }
      if (ChildExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExDest);
      }
      if (ChildUPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildBid != 0D) {
        size += 2 + 8;
      }
      if (ChildAsk != 0D) {
        size += 2 + 8;
      }
      if (ChildFairPrc != 0F) {
        size += 2 + 4;
      }
      if (ChildFairWidth != 0F) {
        size += 2 + 4;
      }
      if (ChildVol != 0F) {
        size += 2 + 4;
      }
      if (ChildProb != 0F) {
        size += 2 + 4;
      }
      if (ChildLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCxlAttempted);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildSSaleFlag);
      }
      if (ChildPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildPositionType);
      }
      if (ChildFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildFirmType);
      }
      if (ChildCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCapacity);
      }
      if (FillExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExch);
      }
      if (FillPrice != 0D) {
        size += 2 + 8;
      }
      if (fillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillDttm);
      }
      if (FillSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillSize);
      }
      if (FillPointValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillPointValue);
      }
      if (FillVol != 0F) {
        size += 2 + 4;
      }
      if (FillProb != 0F) {
        size += 2 + 4;
      }
      if (FillLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (FillLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (FillUPrc != 0D) {
        size += 2 + 8;
      }
      if (FillBeta != 0F) {
        size += 2 + 4;
      }
      if (FillTv != 0F) {
        size += 2 + 4;
      }
      if (FillTp != 0F) {
        size += 2 + 4;
      }
      if (FillBid != 0D) {
        size += 2 + 8;
      }
      if (FillAsk != 0D) {
        size += 2 + 8;
      }
      if (FillFairPrc != 0F) {
        size += 2 + 4;
      }
      if (FillFairWidth != 0F) {
        size += 2 + 4;
      }
      if (FillBrkrRate != 0F) {
        size += 2 + 4;
      }
      if (FillRoutingRate != 0F) {
        size += 2 + 4;
      }
      if (FillOrigExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillOrigExecID);
      }
      if (FillLastExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillLastExecID);
      }
      if (FillExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FillExecStatus);
      }
      if (FillRemoteText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillRemoteText);
      }
      if (fillTransactDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillTransactDttm);
      }
      if (FillLiquidityTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillLiquidityTag);
      }
      if (FillExchFee != 0F) {
        size += 2 + 4;
      }
      if (FillDe != 0F) {
        size += 2 + 4;
      }
      if (FillGa != 0F) {
        size += 2 + 4;
      }
      if (FillVe != 0F) {
        size += 2 + 4;
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ExecBrkrAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipAccnt);
      }
      if (ClearingAgent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingAgent);
      }
      if (ClearingTaxID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingTaxID);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingCategory);
      }
      if (PriAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecAggGroup);
      }
      if (TrdDelta != 0F) {
        size += 2 + 4;
      }
      if (TrdDDelta != 0F) {
        size += 2 + 4;
      }
      if (TrdGamma != 0F) {
        size += 2 + 4;
      }
      if (TrdDGamma != 0F) {
        size += 2 + 4;
      }
      if (TrdVega != 0F) {
        size += 2 + 4;
      }
      if (TrdWtVega != 0F) {
        size += 2 + 4;
      }
      if (TrdTheta != 0F) {
        size += 2 + 4;
      }
      if (TrdBeta != 0F) {
        size += 2 + 4;
      }
      if (TrdDBeta != 0F) {
        size += 2 + 4;
      }
      if (TrdNotionalValue != 0F) {
        size += 2 + 4;
      }
      if (TrdMarketValue != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (TrdFairEdge != 0F) {
        size += 2 + 4;
      }
      if (TrdFairEdgeUnit != 0F) {
        size += 2 + 4;
      }
      if (TrdTheoEdge != 0F) {
        size += 2 + 4;
      }
      if (TrdTheoEdgeUnit != 0F) {
        size += 2 + 4;
      }
      if (ClArrivePnL != 0F) {
        size += 2 + 4;
      }
      if (ArrivePnL != 0F) {
        size += 2 + 4;
      }
      if (ArriveDnPnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftArrivePnL != 0F) {
        size += 2 + 4;
      }
      if (ChildLimitSlip != 0F) {
        size += 2 + 4;
      }
      if (HalfWidthPnL != 0F) {
        size += 2 + 4;
      }
      if (DayDnPnL != 0F) {
        size += 2 + 4;
      }
      if (DayM1PnL != 0F) {
        size += 2 + 4;
      }
      if (DayM10PnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftDayPnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftM1PnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftM10PnL != 0F) {
        size += 2 + 4;
      }
      if (DayPnL != 0F) {
        size += 2 + 4;
      }
      if (M1Mark != 0D) {
        size += 2 + 8;
      }
      if (M1UPrc != 0D) {
        size += 2 + 8;
      }
      if (M10Mark != 0D) {
        size += 2 + 8;
      }
      if (M10UPrc != 0D) {
        size += 2 + 8;
      }
      if (LiveMark != 0D) {
        size += 2 + 8;
      }
      if (LiveUPrc != 0D) {
        size += 2 + 8;
      }
      if (TrdMarkError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DayMarkError);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ToolCompositeExecution other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side = other.Side;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.SrcRoutingCode.Length != 0) {
        SrcRoutingCode = other.SrcRoutingCode;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.ClientTags.Length != 0) {
        ClientTags = other.ClientTags;
      }
      if (other.IndNum != 0) {
        IndNum = other.IndNum;
      }
      if (other.SubNum != 0) {
        SubNum = other.SubNum;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.NbrNum != 0) {
        NbrNum = other.NbrNum;
      }
      if (other.ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        ExpCode = other.ExpCode;
      }
      if (other.SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        SkewCode = other.SkewCode;
      }
      if (other.WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        WidthCode = other.WidthCode;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.MinTickSize != 0F) {
        MinTickSize = other.MinTickSize;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ParentShape = other.ParentShape;
      }
      if (other.ParentLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        ParentLimitType = other.ParentLimitType;
      }
      if (other.ParentLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        ParentLimitClass = other.ParentLimitClass;
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.ParentOrderSize != 0) {
        ParentOrderSize = other.ParentOrderSize;
      }
      if (other.parentDttm_ != null) {
        if (parentDttm_ == null) {
          ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ParentDttm.MergeFrom(other.ParentDttm);
      }
      if (other.ParentUMark != 0D) {
        ParentUMark = other.ParentUMark;
      }
      if (other.ParentBid != 0D) {
        ParentBid = other.ParentBid;
      }
      if (other.ParentAsk != 0D) {
        ParentAsk = other.ParentAsk;
      }
      if (other.ParentFairPrc != 0F) {
        ParentFairPrc = other.ParentFairPrc;
      }
      if (other.ParentFairWidth != 0F) {
        ParentFairWidth = other.ParentFairWidth;
      }
      if (other.ParentLimitPrc != 0D) {
        ParentLimitPrc = other.ParentLimitPrc;
      }
      if (other.ParentLimitRefUPrc != 0D) {
        ParentLimitRefUPrc = other.ParentLimitRefUPrc;
      }
      if (other.ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        ParentSSaleFlag = other.ParentSSaleFlag;
      }
      if (other.ParentPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        ParentPositionType = other.ParentPositionType;
      }
      if (other.ParentStrategy.Length != 0) {
        ParentStrategy = other.ParentStrategy;
      }
      if (other.ParentAutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        ParentAutoHedge = other.ParentAutoHedge;
      }
      if (other.childDttm_ != null) {
        if (childDttm_ == null) {
          ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ChildDttm.MergeFrom(other.ChildDttm);
      }
      if (other.ChildClOrdId.Length != 0) {
        ChildClOrdId = other.ChildClOrdId;
      }
      if (other.ChildRoutingCode.Length != 0) {
        ChildRoutingCode = other.ChildRoutingCode;
      }
      if (other.ChildSize != 0) {
        ChildSize = other.ChildSize;
      }
      if (other.ChildPrice != 0D) {
        ChildPrice = other.ChildPrice;
      }
      if (other.ChildExch.Length != 0) {
        ChildExch = other.ChildExch;
      }
      if (other.ChildExDest.Length != 0) {
        ChildExDest = other.ChildExDest;
      }
      if (other.ChildUPrc != 0D) {
        ChildUPrc = other.ChildUPrc;
      }
      if (other.ChildBid != 0D) {
        ChildBid = other.ChildBid;
      }
      if (other.ChildAsk != 0D) {
        ChildAsk = other.ChildAsk;
      }
      if (other.ChildFairPrc != 0F) {
        ChildFairPrc = other.ChildFairPrc;
      }
      if (other.ChildFairWidth != 0F) {
        ChildFairWidth = other.ChildFairWidth;
      }
      if (other.ChildVol != 0F) {
        ChildVol = other.ChildVol;
      }
      if (other.ChildProb != 0F) {
        ChildProb = other.ChildProb;
      }
      if (other.ChildLimitPrc != 0D) {
        ChildLimitPrc = other.ChildLimitPrc;
      }
      if (other.ChildLimitRefUPrc != 0D) {
        ChildLimitRefUPrc = other.ChildLimitRefUPrc;
      }
      if (other.ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        ChildAlgoHandler = other.ChildAlgoHandler;
      }
      if (other.ChildOrderHandling.Length != 0) {
        ChildOrderHandling = other.ChildOrderHandling;
      }
      if (other.ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        ChildCreateReason = other.ChildCreateReason;
      }
      if (other.ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        ChildCancelReason = other.ChildCancelReason;
      }
      if (other.ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        ChildMktStance = other.ChildMktStance;
      }
      if (other.ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ChildCxlAttempted = other.ChildCxlAttempted;
      }
      if (other.ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        ChildSSaleFlag = other.ChildSSaleFlag;
      }
      if (other.ChildPositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        ChildPositionType = other.ChildPositionType;
      }
      if (other.ChildFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        ChildFirmType = other.ChildFirmType;
      }
      if (other.ChildCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        ChildCapacity = other.ChildCapacity;
      }
      if (other.FillExch.Length != 0) {
        FillExch = other.FillExch;
      }
      if (other.FillPrice != 0D) {
        FillPrice = other.FillPrice;
      }
      if (other.fillDttm_ != null) {
        if (fillDttm_ == null) {
          FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillDttm.MergeFrom(other.FillDttm);
      }
      if (other.FillSize != 0) {
        FillSize = other.FillSize;
      }
      if (other.FillPointValue != 0) {
        FillPointValue = other.FillPointValue;
      }
      if (other.FillVol != 0F) {
        FillVol = other.FillVol;
      }
      if (other.FillProb != 0F) {
        FillProb = other.FillProb;
      }
      if (other.FillLimitPrc != 0D) {
        FillLimitPrc = other.FillLimitPrc;
      }
      if (other.FillLimitRefUPrc != 0D) {
        FillLimitRefUPrc = other.FillLimitRefUPrc;
      }
      if (other.FillUPrc != 0D) {
        FillUPrc = other.FillUPrc;
      }
      if (other.FillBeta != 0F) {
        FillBeta = other.FillBeta;
      }
      if (other.FillTv != 0F) {
        FillTv = other.FillTv;
      }
      if (other.FillTp != 0F) {
        FillTp = other.FillTp;
      }
      if (other.FillBid != 0D) {
        FillBid = other.FillBid;
      }
      if (other.FillAsk != 0D) {
        FillAsk = other.FillAsk;
      }
      if (other.FillFairPrc != 0F) {
        FillFairPrc = other.FillFairPrc;
      }
      if (other.FillFairWidth != 0F) {
        FillFairWidth = other.FillFairWidth;
      }
      if (other.FillBrkrRate != 0F) {
        FillBrkrRate = other.FillBrkrRate;
      }
      if (other.FillRoutingRate != 0F) {
        FillRoutingRate = other.FillRoutingRate;
      }
      if (other.FillOrigExecID.Length != 0) {
        FillOrigExecID = other.FillOrigExecID;
      }
      if (other.FillLastExecID.Length != 0) {
        FillLastExecID = other.FillLastExecID;
      }
      if (other.FillExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        FillExecStatus = other.FillExecStatus;
      }
      if (other.FillRemoteText.Length != 0) {
        FillRemoteText = other.FillRemoteText;
      }
      if (other.fillTransactDttm_ != null) {
        if (fillTransactDttm_ == null) {
          FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillTransactDttm.MergeFrom(other.FillTransactDttm);
      }
      if (other.FillLiquidityTag.Length != 0) {
        FillLiquidityTag = other.FillLiquidityTag;
      }
      if (other.FillExchFee != 0F) {
        FillExchFee = other.FillExchFee;
      }
      if (other.FillDe != 0F) {
        FillDe = other.FillDe;
      }
      if (other.FillGa != 0F) {
        FillGa = other.FillGa;
      }
      if (other.FillVe != 0F) {
        FillVe = other.FillVe;
      }
      if (other.ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        ExecRole = other.ExecRole;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ExecBrkrAccnt.Length != 0) {
        ExecBrkrAccnt = other.ExecBrkrAccnt;
      }
      if (other.ExecBrkrClFirm.Length != 0) {
        ExecBrkrClFirm = other.ExecBrkrClFirm;
      }
      if (other.ExecBrkrUserName.Length != 0) {
        ExecBrkrUserName = other.ExecBrkrUserName;
      }
      if (other.ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        ClearingFlipType = other.ClearingFlipType;
      }
      if (other.ClearingFlipFirm.Length != 0) {
        ClearingFlipFirm = other.ClearingFlipFirm;
      }
      if (other.ClearingFlipAccnt.Length != 0) {
        ClearingFlipAccnt = other.ClearingFlipAccnt;
      }
      if (other.ClearingAgent.Length != 0) {
        ClearingAgent = other.ClearingAgent;
      }
      if (other.ClearingTaxID.Length != 0) {
        ClearingTaxID = other.ClearingTaxID;
      }
      if (other.BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        BillingSecType = other.BillingSecType;
      }
      if (other.BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        BillingCategory = other.BillingCategory;
      }
      if (other.PriAggGroup.Length != 0) {
        PriAggGroup = other.PriAggGroup;
      }
      if (other.SecAggGroup.Length != 0) {
        SecAggGroup = other.SecAggGroup;
      }
      if (other.TrdDelta != 0F) {
        TrdDelta = other.TrdDelta;
      }
      if (other.TrdDDelta != 0F) {
        TrdDDelta = other.TrdDDelta;
      }
      if (other.TrdGamma != 0F) {
        TrdGamma = other.TrdGamma;
      }
      if (other.TrdDGamma != 0F) {
        TrdDGamma = other.TrdDGamma;
      }
      if (other.TrdVega != 0F) {
        TrdVega = other.TrdVega;
      }
      if (other.TrdWtVega != 0F) {
        TrdWtVega = other.TrdWtVega;
      }
      if (other.TrdTheta != 0F) {
        TrdTheta = other.TrdTheta;
      }
      if (other.TrdBeta != 0F) {
        TrdBeta = other.TrdBeta;
      }
      if (other.TrdDBeta != 0F) {
        TrdDBeta = other.TrdDBeta;
      }
      if (other.TrdNotionalValue != 0F) {
        TrdNotionalValue = other.TrdNotionalValue;
      }
      if (other.TrdMarketValue != 0F) {
        TrdMarketValue = other.TrdMarketValue;
      }
      if (other.MarginUDnVDn != 0F) {
        MarginUDnVDn = other.MarginUDnVDn;
      }
      if (other.MarginUDnVUp != 0F) {
        MarginUDnVUp = other.MarginUDnVUp;
      }
      if (other.MarginUUpVDn != 0F) {
        MarginUUpVDn = other.MarginUUpVDn;
      }
      if (other.MarginUUpVUp != 0F) {
        MarginUUpVUp = other.MarginUUpVUp;
      }
      if (other.TrdFairEdge != 0F) {
        TrdFairEdge = other.TrdFairEdge;
      }
      if (other.TrdFairEdgeUnit != 0F) {
        TrdFairEdgeUnit = other.TrdFairEdgeUnit;
      }
      if (other.TrdTheoEdge != 0F) {
        TrdTheoEdge = other.TrdTheoEdge;
      }
      if (other.TrdTheoEdgeUnit != 0F) {
        TrdTheoEdgeUnit = other.TrdTheoEdgeUnit;
      }
      if (other.ClArrivePnL != 0F) {
        ClArrivePnL = other.ClArrivePnL;
      }
      if (other.ArrivePnL != 0F) {
        ArrivePnL = other.ArrivePnL;
      }
      if (other.ArriveDnPnL != 0F) {
        ArriveDnPnL = other.ArriveDnPnL;
      }
      if (other.UDriftArrivePnL != 0F) {
        UDriftArrivePnL = other.UDriftArrivePnL;
      }
      if (other.ChildLimitSlip != 0F) {
        ChildLimitSlip = other.ChildLimitSlip;
      }
      if (other.HalfWidthPnL != 0F) {
        HalfWidthPnL = other.HalfWidthPnL;
      }
      if (other.DayDnPnL != 0F) {
        DayDnPnL = other.DayDnPnL;
      }
      if (other.DayM1PnL != 0F) {
        DayM1PnL = other.DayM1PnL;
      }
      if (other.DayM10PnL != 0F) {
        DayM10PnL = other.DayM10PnL;
      }
      if (other.UDriftDayPnL != 0F) {
        UDriftDayPnL = other.UDriftDayPnL;
      }
      if (other.UDriftM1PnL != 0F) {
        UDriftM1PnL = other.UDriftM1PnL;
      }
      if (other.UDriftM10PnL != 0F) {
        UDriftM10PnL = other.UDriftM10PnL;
      }
      if (other.DayPnL != 0F) {
        DayPnL = other.DayPnL;
      }
      if (other.M1Mark != 0D) {
        M1Mark = other.M1Mark;
      }
      if (other.M1UPrc != 0D) {
        M1UPrc = other.M1UPrc;
      }
      if (other.M10Mark != 0D) {
        M10Mark = other.M10Mark;
      }
      if (other.M10UPrc != 0D) {
        M10UPrc = other.M10UPrc;
      }
      if (other.LiveMark != 0D) {
        LiveMark = other.LiveMark;
      }
      if (other.LiveUPrc != 0D) {
        LiveUPrc = other.LiveUPrc;
      }
      if (other.TrdMarkError.Length != 0) {
        TrdMarkError = other.TrdMarkError;
      }
      if (other.DayMarkError.Length != 0) {
        DayMarkError = other.DayMarkError;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 826: {
            Accnt = input.ReadString();
            break;
          }
          case 850: {
            ClientFirm = input.ReadString();
            break;
          }
          case 874: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 896: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 920: {
            Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 944: {
            Version = input.ReadInt32();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1016: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1040: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1064: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1090: {
            AltOrderId = input.ReadString();
            break;
          }
          case 1114: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1138: {
            UserName = input.ReadString();
            break;
          }
          case 1162: {
            Server = input.ReadString();
            break;
          }
          case 1186: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1210: {
            Sector = input.ReadString();
            break;
          }
          case 1234: {
            ClientTags = input.ReadString();
            break;
          }
          case 1256: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1280: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1304: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1328: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1352: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1376: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1400: {
            WidthCode = (global::Spiderrock.Protobuf.WidthCode) input.ReadEnum();
            break;
          }
          case 1424: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1448: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1477: {
            Years = input.ReadFloat();
            break;
          }
          case 1496: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1525: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 1549: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1568: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1592: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1616: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1640: {
            ParentLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1664: {
            ParentLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1688: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 1712: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 1736: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 1762: {
            if (parentDttm_ == null) {
              ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ParentDttm);
            break;
          }
          case 1785: {
            ParentUMark = input.ReadDouble();
            break;
          }
          case 1809: {
            ParentBid = input.ReadDouble();
            break;
          }
          case 1833: {
            ParentAsk = input.ReadDouble();
            break;
          }
          case 1861: {
            ParentFairPrc = input.ReadFloat();
            break;
          }
          case 1885: {
            ParentFairWidth = input.ReadFloat();
            break;
          }
          case 1905: {
            ParentLimitPrc = input.ReadDouble();
            break;
          }
          case 1929: {
            ParentLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 1952: {
            ParentSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1976: {
            ParentPositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2002: {
            ParentStrategy = input.ReadString();
            break;
          }
          case 2024: {
            ParentAutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2050: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 2074: {
            ChildClOrdId = input.ReadString();
            break;
          }
          case 2098: {
            ChildRoutingCode = input.ReadString();
            break;
          }
          case 2120: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 2145: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 2170: {
            ChildExch = input.ReadString();
            break;
          }
          case 2194: {
            ChildExDest = input.ReadString();
            break;
          }
          case 2217: {
            ChildUPrc = input.ReadDouble();
            break;
          }
          case 2241: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 2265: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 2293: {
            ChildFairPrc = input.ReadFloat();
            break;
          }
          case 2317: {
            ChildFairWidth = input.ReadFloat();
            break;
          }
          case 2341: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 2365: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 2385: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 2409: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2432: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 2458: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 2480: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 2504: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 2528: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 2552: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2576: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2600: {
            ChildPositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2624: {
            ChildFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 2648: {
            ChildCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 2674: {
            FillExch = input.ReadString();
            break;
          }
          case 2697: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 2722: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 2744: {
            FillSize = input.ReadInt32();
            break;
          }
          case 2768: {
            FillPointValue = input.ReadInt32();
            break;
          }
          case 2797: {
            FillVol = input.ReadFloat();
            break;
          }
          case 2821: {
            FillProb = input.ReadFloat();
            break;
          }
          case 2841: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 2865: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2889: {
            FillUPrc = input.ReadDouble();
            break;
          }
          case 2917: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 2941: {
            FillTv = input.ReadFloat();
            break;
          }
          case 2965: {
            FillTp = input.ReadFloat();
            break;
          }
          case 2985: {
            FillBid = input.ReadDouble();
            break;
          }
          case 3009: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 3037: {
            FillFairPrc = input.ReadFloat();
            break;
          }
          case 3061: {
            FillFairWidth = input.ReadFloat();
            break;
          }
          case 3085: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 3109: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 3130: {
            FillOrigExecID = input.ReadString();
            break;
          }
          case 3154: {
            FillLastExecID = input.ReadString();
            break;
          }
          case 3176: {
            FillExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 3202: {
            FillRemoteText = input.ReadString();
            break;
          }
          case 3226: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 3250: {
            FillLiquidityTag = input.ReadString();
            break;
          }
          case 3277: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 3301: {
            FillDe = input.ReadFloat();
            break;
          }
          case 3325: {
            FillGa = input.ReadFloat();
            break;
          }
          case 3349: {
            FillVe = input.ReadFloat();
            break;
          }
          case 3368: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 3394: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 3418: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 3442: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 3466: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 3488: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 3514: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 3538: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 3560: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 3584: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 3610: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 3634: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 3661: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 3685: {
            TrdDDelta = input.ReadFloat();
            break;
          }
          case 3709: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 3733: {
            TrdDGamma = input.ReadFloat();
            break;
          }
          case 3757: {
            TrdVega = input.ReadFloat();
            break;
          }
          case 3781: {
            TrdWtVega = input.ReadFloat();
            break;
          }
          case 3829: {
            TrdTheta = input.ReadFloat();
            break;
          }
          case 3853: {
            TrdBeta = input.ReadFloat();
            break;
          }
          case 3877: {
            TrdDBeta = input.ReadFloat();
            break;
          }
          case 3901: {
            TrdNotionalValue = input.ReadFloat();
            break;
          }
          case 3925: {
            TrdMarketValue = input.ReadFloat();
            break;
          }
          case 4141: {
            TrdFairEdge = input.ReadFloat();
            break;
          }
          case 4165: {
            TrdFairEdgeUnit = input.ReadFloat();
            break;
          }
          case 4189: {
            TrdTheoEdge = input.ReadFloat();
            break;
          }
          case 4213: {
            TrdTheoEdgeUnit = input.ReadFloat();
            break;
          }
          case 4237: {
            ClArrivePnL = input.ReadFloat();
            break;
          }
          case 4261: {
            ArrivePnL = input.ReadFloat();
            break;
          }
          case 4285: {
            ArriveDnPnL = input.ReadFloat();
            break;
          }
          case 4309: {
            UDriftArrivePnL = input.ReadFloat();
            break;
          }
          case 4333: {
            ChildLimitSlip = input.ReadFloat();
            break;
          }
          case 4357: {
            HalfWidthPnL = input.ReadFloat();
            break;
          }
          case 4381: {
            DayDnPnL = input.ReadFloat();
            break;
          }
          case 4405: {
            DayM1PnL = input.ReadFloat();
            break;
          }
          case 4429: {
            DayM10PnL = input.ReadFloat();
            break;
          }
          case 4453: {
            UDriftDayPnL = input.ReadFloat();
            break;
          }
          case 4477: {
            UDriftM1PnL = input.ReadFloat();
            break;
          }
          case 4501: {
            UDriftM10PnL = input.ReadFloat();
            break;
          }
          case 4525: {
            DayPnL = input.ReadFloat();
            break;
          }
          case 4545: {
            M1Mark = input.ReadDouble();
            break;
          }
          case 4569: {
            M1UPrc = input.ReadDouble();
            break;
          }
          case 4593: {
            M10Mark = input.ReadDouble();
            break;
          }
          case 4617: {
            M10UPrc = input.ReadDouble();
            break;
          }
          case 4641: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 4665: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 4690: {
            TrdMarkError = input.ReadString();
            break;
          }
          case 4714: {
            DayMarkError = input.ReadString();
            break;
          }
          case 4738: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4746: {
            ClearingAgent = input.ReadString();
            break;
          }
          case 4754: {
            ClearingTaxID = input.ReadString();
            break;
          }
          case 4765: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 4773: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 4781: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 4789: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ToolCompositeExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 826: {
            Accnt = input.ReadString();
            break;
          }
          case 850: {
            ClientFirm = input.ReadString();
            break;
          }
          case 874: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 896: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 920: {
            Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 944: {
            Version = input.ReadInt32();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1016: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1040: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1064: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1090: {
            AltOrderId = input.ReadString();
            break;
          }
          case 1114: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1138: {
            UserName = input.ReadString();
            break;
          }
          case 1162: {
            Server = input.ReadString();
            break;
          }
          case 1186: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1210: {
            Sector = input.ReadString();
            break;
          }
          case 1234: {
            ClientTags = input.ReadString();
            break;
          }
          case 1256: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1280: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1304: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1328: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1352: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1376: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1400: {
            WidthCode = (global::Spiderrock.Protobuf.WidthCode) input.ReadEnum();
            break;
          }
          case 1424: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1448: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1477: {
            Years = input.ReadFloat();
            break;
          }
          case 1496: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1525: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 1549: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1568: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1592: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1616: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1640: {
            ParentLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1664: {
            ParentLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1688: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 1712: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 1736: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 1762: {
            if (parentDttm_ == null) {
              ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ParentDttm);
            break;
          }
          case 1785: {
            ParentUMark = input.ReadDouble();
            break;
          }
          case 1809: {
            ParentBid = input.ReadDouble();
            break;
          }
          case 1833: {
            ParentAsk = input.ReadDouble();
            break;
          }
          case 1861: {
            ParentFairPrc = input.ReadFloat();
            break;
          }
          case 1885: {
            ParentFairWidth = input.ReadFloat();
            break;
          }
          case 1905: {
            ParentLimitPrc = input.ReadDouble();
            break;
          }
          case 1929: {
            ParentLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 1952: {
            ParentSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1976: {
            ParentPositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2002: {
            ParentStrategy = input.ReadString();
            break;
          }
          case 2024: {
            ParentAutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2050: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 2074: {
            ChildClOrdId = input.ReadString();
            break;
          }
          case 2098: {
            ChildRoutingCode = input.ReadString();
            break;
          }
          case 2120: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 2145: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 2170: {
            ChildExch = input.ReadString();
            break;
          }
          case 2194: {
            ChildExDest = input.ReadString();
            break;
          }
          case 2217: {
            ChildUPrc = input.ReadDouble();
            break;
          }
          case 2241: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 2265: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 2293: {
            ChildFairPrc = input.ReadFloat();
            break;
          }
          case 2317: {
            ChildFairWidth = input.ReadFloat();
            break;
          }
          case 2341: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 2365: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 2385: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 2409: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2432: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 2458: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 2480: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 2504: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 2528: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 2552: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2576: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2600: {
            ChildPositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2624: {
            ChildFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 2648: {
            ChildCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 2674: {
            FillExch = input.ReadString();
            break;
          }
          case 2697: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 2722: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 2744: {
            FillSize = input.ReadInt32();
            break;
          }
          case 2768: {
            FillPointValue = input.ReadInt32();
            break;
          }
          case 2797: {
            FillVol = input.ReadFloat();
            break;
          }
          case 2821: {
            FillProb = input.ReadFloat();
            break;
          }
          case 2841: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 2865: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2889: {
            FillUPrc = input.ReadDouble();
            break;
          }
          case 2917: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 2941: {
            FillTv = input.ReadFloat();
            break;
          }
          case 2965: {
            FillTp = input.ReadFloat();
            break;
          }
          case 2985: {
            FillBid = input.ReadDouble();
            break;
          }
          case 3009: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 3037: {
            FillFairPrc = input.ReadFloat();
            break;
          }
          case 3061: {
            FillFairWidth = input.ReadFloat();
            break;
          }
          case 3085: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 3109: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 3130: {
            FillOrigExecID = input.ReadString();
            break;
          }
          case 3154: {
            FillLastExecID = input.ReadString();
            break;
          }
          case 3176: {
            FillExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 3202: {
            FillRemoteText = input.ReadString();
            break;
          }
          case 3226: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 3250: {
            FillLiquidityTag = input.ReadString();
            break;
          }
          case 3277: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 3301: {
            FillDe = input.ReadFloat();
            break;
          }
          case 3325: {
            FillGa = input.ReadFloat();
            break;
          }
          case 3349: {
            FillVe = input.ReadFloat();
            break;
          }
          case 3368: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 3394: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 3418: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 3442: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 3466: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 3488: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 3514: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 3538: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 3560: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 3584: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 3610: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 3634: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 3661: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 3685: {
            TrdDDelta = input.ReadFloat();
            break;
          }
          case 3709: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 3733: {
            TrdDGamma = input.ReadFloat();
            break;
          }
          case 3757: {
            TrdVega = input.ReadFloat();
            break;
          }
          case 3781: {
            TrdWtVega = input.ReadFloat();
            break;
          }
          case 3829: {
            TrdTheta = input.ReadFloat();
            break;
          }
          case 3853: {
            TrdBeta = input.ReadFloat();
            break;
          }
          case 3877: {
            TrdDBeta = input.ReadFloat();
            break;
          }
          case 3901: {
            TrdNotionalValue = input.ReadFloat();
            break;
          }
          case 3925: {
            TrdMarketValue = input.ReadFloat();
            break;
          }
          case 4141: {
            TrdFairEdge = input.ReadFloat();
            break;
          }
          case 4165: {
            TrdFairEdgeUnit = input.ReadFloat();
            break;
          }
          case 4189: {
            TrdTheoEdge = input.ReadFloat();
            break;
          }
          case 4213: {
            TrdTheoEdgeUnit = input.ReadFloat();
            break;
          }
          case 4237: {
            ClArrivePnL = input.ReadFloat();
            break;
          }
          case 4261: {
            ArrivePnL = input.ReadFloat();
            break;
          }
          case 4285: {
            ArriveDnPnL = input.ReadFloat();
            break;
          }
          case 4309: {
            UDriftArrivePnL = input.ReadFloat();
            break;
          }
          case 4333: {
            ChildLimitSlip = input.ReadFloat();
            break;
          }
          case 4357: {
            HalfWidthPnL = input.ReadFloat();
            break;
          }
          case 4381: {
            DayDnPnL = input.ReadFloat();
            break;
          }
          case 4405: {
            DayM1PnL = input.ReadFloat();
            break;
          }
          case 4429: {
            DayM10PnL = input.ReadFloat();
            break;
          }
          case 4453: {
            UDriftDayPnL = input.ReadFloat();
            break;
          }
          case 4477: {
            UDriftM1PnL = input.ReadFloat();
            break;
          }
          case 4501: {
            UDriftM10PnL = input.ReadFloat();
            break;
          }
          case 4525: {
            DayPnL = input.ReadFloat();
            break;
          }
          case 4545: {
            M1Mark = input.ReadDouble();
            break;
          }
          case 4569: {
            M1UPrc = input.ReadDouble();
            break;
          }
          case 4593: {
            M10Mark = input.ReadDouble();
            break;
          }
          case 4617: {
            M10UPrc = input.ReadDouble();
            break;
          }
          case 4641: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 4665: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 4690: {
            TrdMarkError = input.ReadString();
            break;
          }
          case 4714: {
            DayMarkError = input.ReadString();
            break;
          }
          case 4738: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4746: {
            ClearingAgent = input.ReadString();
            break;
          }
          case 4754: {
            ClearingTaxID = input.ReadString();
            break;
          }
          case 4765: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 4773: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 4781: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 4789: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ToolCompositeExecution message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ToolCompositeExecution.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fillNumber_ = other.fillNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fill_number" field.</summary>
        public const int FillNumberFieldNumber = 10;
        private long fillNumber_;
        /// <summary>
        /// SpiderRock execution number (globally unique over trailing 10 days)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FillNumber {
          get { return fillNumber_; }
          set {
            fillNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FillNumber != other.FillNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FillNumber != 0L) hash ^= FillNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FillNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FillNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.FillNumber != 0L) {
            FillNumber = other.FillNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
