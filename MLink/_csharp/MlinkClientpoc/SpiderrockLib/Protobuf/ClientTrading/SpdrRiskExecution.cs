// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrRiskExecution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrRiskExecution.proto</summary>
  public static partial class SpdrRiskExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrRiskExecution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrRiskExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJSaXNrRXhlY3V0aW9uLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKfGwoRU3Bk",
            "clJpc2tFeGVjdXRpb24SMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgLMisuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyUmlza0V4ZWN1dGlvbi5QS2V5EjAKCXN5c19y",
            "ZWFsbRhkIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzUmVhbG0SPAoP",
            "c3lzX2Vudmlyb25tZW50GGcgASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5T",
            "eXNFbnZpcm9ubWVudBIyCgpydW5fc3RhdHVzGGogASgOMh4uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5SdW5TdGF0dXMSDwoHdmVyc2lvbhhtIAEoBRI0CgtleGVj",
            "X3N0YXR1cxhwIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRXhlY1N0YXR1",
            "cxIyCgpleGVjX3NoYXBlGHMgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5F",
            "eGVjU2hhcGUSEgoKcGFja2FnZV9pZBh2IAEoAxIVCg1wYXJlbnRfbnVtYmVy",
            "GHkgASgDEhYKDnBhcmVudF92ZXJzaW9uGHwgASgFEhoKEmJhc2VfcGFyZW50",
            "X251bWJlchh/IAEoAxISCgljbF9vcmRfaWQYggEgASgDEhYKDXJpc2tfZ3Jv",
            "dXBfaWQYhQEgASgDEjoKDHBhcmVudF9zaGFwZRiOASABKA4yIy5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJPcmRlclNoYXBlEjAKB3NlY19rZXkYkQEgASgL",
            "Mh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSMwoIc2VjX3R5cGUY",
            "lAEgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyS2V5VHlwZRIvCgZ0",
            "aWNrZXIYlwEgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkS",
            "DgoFYWNjbnQYmgEgASgJEhQKC2NsaWVudF9maXJtGJ0BIAEoCRI1CgtzcGRy",
            "X3NvdXJjZRigASABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJTb3Vy",
            "Y2USFgoNZ3JvdXBpbmdfY29kZRijASABKAMSFAoLZW5naW5lX25hbWUY4QIg",
            "ASgJEjEKCWV4ZWNfcm9sZRipASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkV4ZWNSb2xlEh0KFGNoaWxkX29yZGVyX2hhbmRsaW5nGKwBIAEoCRI+ChJj",
            "aGlsZF9hbGdvX2hhbmRsZXIYrwEgASgOMiEuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5DaGlsZEhhbmRsZXISPQoQY2hpbGRfc1NhbGVfZmxhZxiyASABKA4yIi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2FsZUZsYWcSEgoJdXNlcl9uYW1l",
            "GLUBIAEoCRIxCgpvcmRlcl9zaWRlGLgBIAEoDjIcLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQnV5U2VsbBJAChFzcGRyX29yZGVyX3N0YXR1cxi7ASABKA4yJC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNwZHJPcmRlclN0YXR1cxJAChFzcGRyX2Ns",
            "b3NlX3JlYXNvbhi+ASABKA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJD",
            "bG9zZVJlYXNvbhIaChFjdW1fZmlsbF9xdWFudGl0eRjBASABKAUSFwoOYXZn",
            "X2ZpbGxfcHJpY2UYxAEgASgBEh4KFWN1bV9sZWdfZmlsbF9xdWFudGl0eRjH",
            "ASABKAUSGwoSYXZnX2xlZ19maWxsX3ByaWNlGMoBIAEoARITCgpsZWF2ZXNf",
            "cXR5GM0BIAEoBRIzCgpwcmljZV90eXBlGNABIAEoDjIeLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuUHJpY2VUeXBlEjEKCWZpcm1fdHlwZRjTASABKA4yHS5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkZpcm1UeXBlEhYKDXByaV9hZ2dfZ3JvdXAY1gEg",
            "ASgJEhYKDXNlY19hZ2dfZ3JvdXAY2QEgASgJEjcKEmZpbGxfdHJhbnNhY3Rf",
            "ZHR0bRjcASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCWZp",
            "bGxfZHR0bRjfASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIK",
            "CWZpbGxfZXhjaBjiASABKAkSFQoMZmlsbF9leGVjX2lkGOUBIAEoCRIZChBm",
            "aWxsX2V4ZWNfcmVmX2lkGOgBIAEoCRIYCg9maWxsX2xlZ19yZWZfaWQY6wEg",
            "ASgDEhcKDmZpbGxfbGVnX3JhdGlvGO4BIAEoBRIWCg1maWxsX2V4Y2hfZmVl",
            "GPEBIAEoAhIUCgtmaWxsX21hcmtldBj0ASABKAkSEwoKZmlsbF9wcmljZRj3",
            "ASABKAESFgoNZmlsbF9xdWFudGl0eRj6ASABKAUSEQoIZmlsbF9iaWQY/QEg",
            "ASgBEhEKCGZpbGxfYXNrGIACIAEoARISCglmaWxsX21hcmsYgwIgASgBEhIK",
            "CWZpbGxfdUJpZBiGAiABKAESEgoJZmlsbF91QXNrGIkCIAEoARIRCghmaWxs",
            "X3ZvbBiMAiABKAISEAoHZmlsbF92ZRiPAiABKAISEAoHZmlsbF9nYRiSAiAB",
            "KAISEAoHZmlsbF9kZRiVAiABKAISEAoHZmlsbF90aBiYAiABKAISEgoJZmls",
            "bF9iZXRhGJ4CIAEoAhISCglyaXNrX3ZlZ2EY4gIgASgCEhUKDHJpc2tfd3Rf",
            "dmVnYRjjAiABKAISFAoLcmlza19uVmFsdWUY5AIgASgCEhMKCnJpc2tfZGVs",
            "dGEY5QIgASgCEhQKC3Jpc2tfZERlbHRhGOYCIAEoAhIRCghyaXNrX3JtMRjn",
            "AiABKAISEQoIcmlza19ybTIY6AIgASgCEhEKCHJpc2tfcm0zGOkCIAEoAhIR",
            "CghyaXNrX3JtNBjqAiABKAISEQoIcmlza19ybTUY6wIgASgCEhEKCHJpc2tf",
            "cm02GOwCIAEoAhIRCghyaXNrX3JtNxjtAiABKAISFwoObWFyZ2luX3VEbl92",
            "RG4Y7gIgASgCEhcKDm1hcmdpbl91RG5fdlVwGO8CIAEoAhIXCg5tYXJnaW5f",
            "dVVwX3ZEbhjwAiABKAISFwoObWFyZ2luX3VVcF92VXAY8QIgASgCEhQKC3Jp",
            "c2tfdTUwX2RuGPICIAEoAhIUCgtyaXNrX3U1MF91cBjzAiABKAISDgoFeWVh",
            "cnMYwgIgASgCEhoKEXVuZGVybGllcnNfcGVyX2NuGMUCIAEoBRI7Cg51bmRl",
            "cmxpZXJfdHlwZRjIAiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlVuZGVy",
            "bGllclR5cGUSEwoKdGlja192YWx1ZRjLAiABKAISFAoLcG9pbnRfdmFsdWUY",
            "zgIgASgCEjYKDnBvaW50X2N1cnJlbmN5GNECIAEoDjIdLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuQ3VycmVuY3kSFAoLdV9wcmNfcmF0aW8Y1AIgASgCEhYKDW1p",
            "bl90aWNrX3NpemUY1wIgASgCEjcKDHByaWNlX2Zvcm1hdBjaAiABKA4yIC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlByaWNlRm9ybWF0EjkKDnVfcHJpY2VfZm9y",
            "bWF0GN0CIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VGb3JtYXQS",
            "LgoJdGltZXN0YW1wGOACIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASPgoPZGF0YV9jZW50ZXJfX3Y3GIgnIAEoDjIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuU1JEYXRhQ2VudGVyX1Y3EjUKDWZhY2Vfc2lkZV9fdjcYiScgASgO",
            "Mh0uc3BpZGVycm9jay5wcm90b2J1Zi5GYWNlU2lkZRI3Cg5mYWNlX3NoYXBl",
            "X192NxiKJyABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkZhY2VTaGFwZRIU",
            "CgtmaWxsX3ByX192NxiLJyABKAISHgoVZmlsbF9yaXNrX21ldHJpYzFfX3Y3",
            "GIwnIAEoAhIeChVmaWxsX3Jpc2tfbWV0cmljMl9fdjcYjScgASgCEh4KFWZp",
            "bGxfcmlza19tZXRyaWMzX192NxiOJyABKAISHgoVZmlsbF9yaXNrX21ldHJp",
            "YzRfX3Y3GI8nIAEoAhIeChVmaWxsX3Jpc2tfbWV0cmljNV9fdjcYkCcgASgC",
            "Eh4KFWZpbGxfcmlza19tZXRyaWM2X192NxiRJyABKAISHgoVZmlsbF9yaXNr",
            "X21ldHJpYzdfX3Y3GJInIAEoAhIYCg9maWxsX3MwOF9kbl9fdjcYkycgASgC",
            "EhgKD2ZpbGxfczA2X3VwX192NxiUJyABKAISGAoPZmlsbF9zMTVfZG5fX3Y3",
            "GJUnIAEoAhIYCg9maWxsX3MxNV91cF9fdjcYlicgASgCGhsKBFBLZXkSEwoL",
            "ZmlsbF9udW1iZXIYCiABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrRiskExecution), global::Spiderrock.Protobuf.SpdrRiskExecution.Parser, new[]{ "Meta", "Pkey", "SysRealm", "SysEnvironment", "RunStatus", "Version", "ExecStatus", "ExecShape", "PackageId", "ParentNumber", "ParentVersion", "BaseParentNumber", "ClOrdId", "RiskGroupId", "ParentShape", "SecKey", "SecType", "Ticker", "Accnt", "ClientFirm", "SpdrSource", "GroupingCode", "EngineName", "ExecRole", "ChildOrderHandling", "ChildAlgoHandler", "ChildSSaleFlag", "UserName", "OrderSide", "SpdrOrderStatus", "SpdrCloseReason", "CumFillQuantity", "AvgFillPrice", "CumLegFillQuantity", "AvgLegFillPrice", "LeavesQty", "PriceType", "FirmType", "PriAggGroup", "SecAggGroup", "FillTransactDttm", "FillDttm", "FillExch", "FillExecId", "FillExecRefId", "FillLegRefId", "FillLegRatio", "FillExchFee", "FillMarket", "FillPrice", "FillQuantity", "FillBid", "FillAsk", "FillMark", "FillUBid", "FillUAsk", "FillVol", "FillVe", "FillGa", "FillDe", "FillTh", "FillBeta", "RiskVega", "RiskWtVega", "RiskNValue", "RiskDelta", "RiskDDelta", "RiskRm1", "RiskRm2", "RiskRm3", "RiskRm4", "RiskRm5", "RiskRm6", "RiskRm7", "MarginUDnVDn", "MarginUDnVUp", "MarginUUpVDn", "MarginUUpVUp", "RiskU50Dn", "RiskU50Up", "Years", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "UPrcRatio", "MinTickSize", "PriceFormat", "UPriceFormat", "Timestamp", "DataCenterV7", "FaceSideV7", "FaceShapeV7", "FillPrV7", "FillRiskMetric1V7", "FillRiskMetric2V7", "FillRiskMetric3V7", "FillRiskMetric4V7", "FillRiskMetric5V7", "FillRiskMetric6V7", "FillRiskMetric7V7", "FillS08DnV7", "FillS06UpV7", "FillS15DnV7", "FillS15UpV7" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey), global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey.Parser, new[]{ "FillNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpdrRiskExecution : pb::IMessage<SpdrRiskExecution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrRiskExecution> _parser = new pb::MessageParser<SpdrRiskExecution>(() => new SpdrRiskExecution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrRiskExecution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrRiskExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskExecution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskExecution(SpdrRiskExecution other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      sysRealm_ = other.sysRealm_;
      sysEnvironment_ = other.sysEnvironment_;
      runStatus_ = other.runStatus_;
      version_ = other.version_;
      execStatus_ = other.execStatus_;
      execShape_ = other.execShape_;
      packageId_ = other.packageId_;
      parentNumber_ = other.parentNumber_;
      parentVersion_ = other.parentVersion_;
      baseParentNumber_ = other.baseParentNumber_;
      clOrdId_ = other.clOrdId_;
      riskGroupId_ = other.riskGroupId_;
      parentShape_ = other.parentShape_;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      accnt_ = other.accnt_;
      clientFirm_ = other.clientFirm_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      engineName_ = other.engineName_;
      execRole_ = other.execRole_;
      childOrderHandling_ = other.childOrderHandling_;
      childAlgoHandler_ = other.childAlgoHandler_;
      childSSaleFlag_ = other.childSSaleFlag_;
      userName_ = other.userName_;
      orderSide_ = other.orderSide_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      cumFillQuantity_ = other.cumFillQuantity_;
      avgFillPrice_ = other.avgFillPrice_;
      cumLegFillQuantity_ = other.cumLegFillQuantity_;
      avgLegFillPrice_ = other.avgLegFillPrice_;
      leavesQty_ = other.leavesQty_;
      priceType_ = other.priceType_;
      firmType_ = other.firmType_;
      priAggGroup_ = other.priAggGroup_;
      secAggGroup_ = other.secAggGroup_;
      fillTransactDttm_ = other.fillTransactDttm_ != null ? other.fillTransactDttm_.Clone() : null;
      fillDttm_ = other.fillDttm_ != null ? other.fillDttm_.Clone() : null;
      fillExch_ = other.fillExch_;
      fillExecId_ = other.fillExecId_;
      fillExecRefId_ = other.fillExecRefId_;
      fillLegRefId_ = other.fillLegRefId_;
      fillLegRatio_ = other.fillLegRatio_;
      fillExchFee_ = other.fillExchFee_;
      fillMarket_ = other.fillMarket_;
      fillPrice_ = other.fillPrice_;
      fillQuantity_ = other.fillQuantity_;
      fillBid_ = other.fillBid_;
      fillAsk_ = other.fillAsk_;
      fillMark_ = other.fillMark_;
      fillUBid_ = other.fillUBid_;
      fillUAsk_ = other.fillUAsk_;
      fillVol_ = other.fillVol_;
      fillVe_ = other.fillVe_;
      fillGa_ = other.fillGa_;
      fillDe_ = other.fillDe_;
      fillTh_ = other.fillTh_;
      fillBeta_ = other.fillBeta_;
      riskVega_ = other.riskVega_;
      riskWtVega_ = other.riskWtVega_;
      riskNValue_ = other.riskNValue_;
      riskDelta_ = other.riskDelta_;
      riskDDelta_ = other.riskDDelta_;
      riskRm1_ = other.riskRm1_;
      riskRm2_ = other.riskRm2_;
      riskRm3_ = other.riskRm3_;
      riskRm4_ = other.riskRm4_;
      riskRm5_ = other.riskRm5_;
      riskRm6_ = other.riskRm6_;
      riskRm7_ = other.riskRm7_;
      marginUDnVDn_ = other.marginUDnVDn_;
      marginUDnVUp_ = other.marginUDnVUp_;
      marginUUpVDn_ = other.marginUUpVDn_;
      marginUUpVUp_ = other.marginUUpVUp_;
      riskU50Dn_ = other.riskU50Dn_;
      riskU50Up_ = other.riskU50Up_;
      years_ = other.years_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      uPrcRatio_ = other.uPrcRatio_;
      minTickSize_ = other.minTickSize_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      dataCenterV7_ = other.dataCenterV7_;
      faceSideV7_ = other.faceSideV7_;
      faceShapeV7_ = other.faceShapeV7_;
      fillPrV7_ = other.fillPrV7_;
      fillRiskMetric1V7_ = other.fillRiskMetric1V7_;
      fillRiskMetric2V7_ = other.fillRiskMetric2V7_;
      fillRiskMetric3V7_ = other.fillRiskMetric3V7_;
      fillRiskMetric4V7_ = other.fillRiskMetric4V7_;
      fillRiskMetric5V7_ = other.fillRiskMetric5V7_;
      fillRiskMetric6V7_ = other.fillRiskMetric6V7_;
      fillRiskMetric7V7_ = other.fillRiskMetric7V7_;
      fillS08DnV7_ = other.fillS08DnV7_;
      fillS06UpV7_ = other.fillS06UpV7_;
      fillS15DnV7_ = other.fillS15DnV7_;
      fillS15UpV7_ = other.fillS15UpV7_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrRiskExecution Clone() {
      return new SpdrRiskExecution(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sys_realm" field.</summary>
    public const int SysRealmFieldNumber = 100;
    private global::Spiderrock.Protobuf.SysRealm sysRealm_ = global::Spiderrock.Protobuf.SysRealm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysRealm SysRealm {
      get { return sysRealm_; }
      set {
        sysRealm_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 103;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    /// <summary>
    /// original (source) sys environment [Stable, Current, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "run_status" field.</summary>
    public const int RunStatusFieldNumber = 106;
    private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
    /// <summary>
    /// original (source) run status [Prod,Beta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RunStatus RunStatus {
      get { return runStatus_; }
      set {
        runStatus_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 109;
    private int version_;
    /// <summary>
    /// record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "exec_status" field.</summary>
    public const int ExecStatusFieldNumber = 112;
    private global::Spiderrock.Protobuf.ExecStatus execStatus_ = global::Spiderrock.Protobuf.ExecStatus.Unspecified;
    /// <summary>
    /// SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecStatus ExecStatus {
      get { return execStatus_; }
      set {
        execStatus_ = value;
      }
    }

    /// <summary>Field number for the "exec_shape" field.</summary>
    public const int ExecShapeFieldNumber = 115;
    private global::Spiderrock.Protobuf.ExecShape execShape_ = global::Spiderrock.Protobuf.ExecShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecShape ExecShape {
      get { return execShape_; }
      set {
        execShape_ = value;
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 118;
    private long packageId_;
    /// <summary>
    /// SR package Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 121;
    private long parentNumber_;
    /// <summary>
    /// SR parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "parent_version" field.</summary>
    public const int ParentVersionFieldNumber = 124;
    private int parentVersion_;
    /// <summary>
    /// SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentVersion {
      get { return parentVersion_; }
      set {
        parentVersion_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 127;
    private long baseParentNumber_;
    /// <summary>
    /// SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "cl_ord_id" field.</summary>
    public const int ClOrdIdFieldNumber = 130;
    private long clOrdId_;
    /// <summary>
    /// SR child order clOrdID resulting in fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = value;
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 133;
    private long riskGroupId_;
    /// <summary>
    /// riskGroupId (parent order group ID) for this execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "parent_shape" field.</summary>
    public const int ParentShapeFieldNumber = 142;
    private global::Spiderrock.Protobuf.SpdrOrderShape parentShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    /// <summary>
    /// shape of originating parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ParentShape {
      get { return parentShape_; }
      set {
        parentShape_ = value;
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 145;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    /// <summary>
    /// execution security key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// execution security type [Stock, Future, Option]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 151;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// base stock key (used for symbol risk aggregation)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 154;
    private string accnt_ = "";
    /// <summary>
    /// SpiderRock trading accnt [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 157;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 160;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    /// <summary>
    /// SpiderRock parent order source code [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 163;
    private long groupingCode_;
    /// <summary>
    /// SpiderRock parent broker number [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 353;
    private string engineName_ = "";
    /// <summary>
    /// SpiderRock execution engine that handled the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_role" field.</summary>
    public const int ExecRoleFieldNumber = 169;
    private global::Spiderrock.Protobuf.ExecRole execRole_ = global::Spiderrock.Protobuf.ExecRole.Unspecified;
    /// <summary>
    /// SpiderRock relationship to this execution record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecRole ExecRole {
      get { return execRole_; }
      set {
        execRole_ = value;
      }
    }

    /// <summary>Field number for the "child_order_handling" field.</summary>
    public const int ChildOrderHandlingFieldNumber = 172;
    private string childOrderHandling_ = "";
    /// <summary>
    /// child order handling string from the algo that generated the child order responsible for this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildOrderHandling {
      get { return childOrderHandling_; }
      set {
        childOrderHandling_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_algo_handler" field.</summary>
    public const int ChildAlgoHandlerFieldNumber = 175;
    private global::Spiderrock.Protobuf.ChildHandler childAlgoHandler_ = global::Spiderrock.Protobuf.ChildHandler.Unspecified;
    /// <summary>
    /// algo handler for this child order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildHandler ChildAlgoHandler {
      get { return childAlgoHandler_; }
      set {
        childAlgoHandler_ = value;
      }
    }

    /// <summary>Field number for the "child_sSale_flag" field.</summary>
    public const int ChildSSaleFlagFieldNumber = 178;
    private global::Spiderrock.Protobuf.ShortSaleFlag childSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// short sale flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag ChildSSaleFlag {
      get { return childSSaleFlag_; }
      set {
        childSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 181;
    private string userName_ = "";
    /// <summary>
    /// user name associated with the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_side" field.</summary>
    public const int OrderSideFieldNumber = 184;
    private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// order side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell OrderSide {
      get { return orderSide_; }
      set {
        orderSide_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 187;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 190;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quantity" field.</summary>
    public const int CumFillQuantityFieldNumber = 193;
    private int cumFillQuantity_;
    /// <summary>
    /// cumulative fills (this parent number only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuantity {
      get { return cumFillQuantity_; }
      set {
        cumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price" field.</summary>
    public const int AvgFillPriceFieldNumber = 196;
    private double avgFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_leg_fill_quantity" field.</summary>
    public const int CumLegFillQuantityFieldNumber = 199;
    private int cumLegFillQuantity_;
    /// <summary>
    /// cumulative fills (spread only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumLegFillQuantity {
      get { return cumLegFillQuantity_; }
      set {
        cumLegFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_leg_fill_price" field.</summary>
    public const int AvgLegFillPriceFieldNumber = 202;
    private double avgLegFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgLegFillPrice {
      get { return avgLegFillPrice_; }
      set {
        avgLegFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "leaves_qty" field.</summary>
    public const int LeavesQtyFieldNumber = 205;
    private int leavesQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeavesQty {
      get { return leavesQty_; }
      set {
        leavesQty_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 208;
    private global::Spiderrock.Protobuf.PriceType priceType_ = global::Spiderrock.Protobuf.PriceType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 211;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// child order firm type [Customer, ProCust, Firm, MM, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "pri_agg_group" field.</summary>
    public const int PriAggGroupFieldNumber = 214;
    private string priAggGroup_ = "";
    /// <summary>
    /// primary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriAggGroup {
      get { return priAggGroup_; }
      set {
        priAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_agg_group" field.</summary>
    public const int SecAggGroupFieldNumber = 217;
    private string secAggGroup_ = "";
    /// <summary>
    /// secondary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecAggGroup {
      get { return secAggGroup_; }
      set {
        secAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_transact_dttm" field.</summary>
    public const int FillTransactDttmFieldNumber = 220;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillTransactDttm_;
    /// <summary>
    /// transaction date/time as reported by exchange or down stream broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillTransactDttm {
      get { return fillTransactDttm_; }
      set {
        fillTransactDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_dttm" field.</summary>
    public const int FillDttmFieldNumber = 223;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillDttm_;
    /// <summary>
    /// Date/time of fill arrival (SRDateTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillDttm {
      get { return fillDttm_; }
      set {
        fillDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch" field.</summary>
    public const int FillExchFieldNumber = 226;
    private string fillExch_ = "";
    /// <summary>
    /// ExDest code from child order execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExch {
      get { return fillExch_; }
      set {
        fillExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exec_id" field.</summary>
    public const int FillExecIdFieldNumber = 229;
    private string fillExecId_ = "";
    /// <summary>
    /// street side execution Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExecId {
      get { return fillExecId_; }
      set {
        fillExecId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exec_ref_id" field.</summary>
    public const int FillExecRefIdFieldNumber = 232;
    private string fillExecRefId_ = "";
    /// <summary>
    /// street side execution ref Id (only used when busting an execution)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExecRefId {
      get { return fillExecRefId_; }
      set {
        fillExecRefId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_leg_ref_id" field.</summary>
    public const int FillLegRefIdFieldNumber = 235;
    private long fillLegRefId_;
    /// <summary>
    /// legRefId for multileg fills
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FillLegRefId {
      get { return fillLegRefId_; }
      set {
        fillLegRefId_ = value;
      }
    }

    /// <summary>Field number for the "fill_leg_ratio" field.</summary>
    public const int FillLegRatioFieldNumber = 238;
    private int fillLegRatio_;
    /// <summary>
    /// legRatio (if spread order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillLegRatio {
      get { return fillLegRatio_; }
      set {
        fillLegRatio_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch_fee" field.</summary>
    public const int FillExchFeeFieldNumber = 241;
    private float fillExchFee_;
    /// <summary>
    /// SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillExchFee {
      get { return fillExchFee_; }
      set {
        fillExchFee_ = value;
      }
    }

    /// <summary>Field number for the "fill_market" field.</summary>
    public const int FillMarketFieldNumber = 244;
    private string fillMarket_ = "";
    /// <summary>
    /// usually from execReport.lastMkt as reported by child order venue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillMarket {
      get { return fillMarket_; }
      set {
        fillMarket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_price" field.</summary>
    public const int FillPriceFieldNumber = 247;
    private double fillPrice_;
    /// <summary>
    /// fill price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "fill_quantity" field.</summary>
    public const int FillQuantityFieldNumber = 250;
    private int fillQuantity_;
    /// <summary>
    /// fill quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuantity {
      get { return fillQuantity_; }
      set {
        fillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "fill_bid" field.</summary>
    public const int FillBidFieldNumber = 253;
    private double fillBid_;
    /// <summary>
    /// market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid {
      get { return fillBid_; }
      set {
        fillBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask" field.</summary>
    public const int FillAskFieldNumber = 256;
    private double fillAsk_;
    /// <summary>
    /// market ask @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk {
      get { return fillAsk_; }
      set {
        fillAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_mark" field.</summary>
    public const int FillMarkFieldNumber = 259;
    private double fillMark_;
    /// <summary>
    /// mid-market (or SR surface price if option) @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillMark {
      get { return fillMark_; }
      set {
        fillMark_ = value;
      }
    }

    /// <summary>Field number for the "fill_uBid" field.</summary>
    public const int FillUBidFieldNumber = 262;
    private double fillUBid_;
    /// <summary>
    /// underlier market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUBid {
      get { return fillUBid_; }
      set {
        fillUBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_uAsk" field.</summary>
    public const int FillUAskFieldNumber = 265;
    private double fillUAsk_;
    /// <summary>
    /// underlier market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUAsk {
      get { return fillUAsk_; }
      set {
        fillUAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol" field.</summary>
    public const int FillVolFieldNumber = 268;
    private float fillVol_;
    /// <summary>
    /// fill volatility @ fillLimitRefUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVol {
      get { return fillVol_; }
      set {
        fillVol_ = value;
      }
    }

    /// <summary>Field number for the "fill_ve" field.</summary>
    public const int FillVeFieldNumber = 271;
    private float fillVe_;
    /// <summary>
    /// fill vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVe {
      get { return fillVe_; }
      set {
        fillVe_ = value;
      }
    }

    /// <summary>Field number for the "fill_ga" field.</summary>
    public const int FillGaFieldNumber = 274;
    private float fillGa_;
    /// <summary>
    /// fill gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillGa {
      get { return fillGa_; }
      set {
        fillGa_ = value;
      }
    }

    /// <summary>Field number for the "fill_de" field.</summary>
    public const int FillDeFieldNumber = 277;
    private float fillDe_;
    /// <summary>
    /// fill delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDe {
      get { return fillDe_; }
      set {
        fillDe_ = value;
      }
    }

    /// <summary>Field number for the "fill_th" field.</summary>
    public const int FillThFieldNumber = 280;
    private float fillTh_;
    /// <summary>
    /// fill theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTh {
      get { return fillTh_; }
      set {
        fillTh_ = value;
      }
    }

    /// <summary>Field number for the "fill_beta" field.</summary>
    public const int FillBetaFieldNumber = 286;
    private float fillBeta_;
    /// <summary>
    /// SpiderRock estimate of beta to SPX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBeta {
      get { return fillBeta_; }
      set {
        fillBeta_ = value;
      }
    }

    /// <summary>Field number for the "risk_vega" field.</summary>
    public const int RiskVegaFieldNumber = 354;
    private float riskVega_;
    /// <summary>
    /// risk vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskVega {
      get { return riskVega_; }
      set {
        riskVega_ = value;
      }
    }

    /// <summary>Field number for the "risk_wt_vega" field.</summary>
    public const int RiskWtVegaFieldNumber = 355;
    private float riskWtVega_;
    /// <summary>
    /// risk gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskWtVega {
      get { return riskWtVega_; }
      set {
        riskWtVega_ = value;
      }
    }

    /// <summary>Field number for the "risk_nValue" field.</summary>
    public const int RiskNValueFieldNumber = 356;
    private float riskNValue_;
    /// <summary>
    /// risk delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskNValue {
      get { return riskNValue_; }
      set {
        riskNValue_ = value;
      }
    }

    /// <summary>Field number for the "risk_delta" field.</summary>
    public const int RiskDeltaFieldNumber = 357;
    private float riskDelta_;
    /// <summary>
    /// risk delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskDelta {
      get { return riskDelta_; }
      set {
        riskDelta_ = value;
      }
    }

    /// <summary>Field number for the "risk_dDelta" field.</summary>
    public const int RiskDDeltaFieldNumber = 358;
    private float riskDDelta_;
    /// <summary>
    /// risk ddelta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskDDelta {
      get { return riskDDelta_; }
      set {
        riskDDelta_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm1" field.</summary>
    public const int RiskRm1FieldNumber = 359;
    private float riskRm1_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm1 {
      get { return riskRm1_; }
      set {
        riskRm1_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm2" field.</summary>
    public const int RiskRm2FieldNumber = 360;
    private float riskRm2_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm2 {
      get { return riskRm2_; }
      set {
        riskRm2_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm3" field.</summary>
    public const int RiskRm3FieldNumber = 361;
    private float riskRm3_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm3 {
      get { return riskRm3_; }
      set {
        riskRm3_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm4" field.</summary>
    public const int RiskRm4FieldNumber = 362;
    private float riskRm4_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm4 {
      get { return riskRm4_; }
      set {
        riskRm4_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm5" field.</summary>
    public const int RiskRm5FieldNumber = 363;
    private float riskRm5_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm5 {
      get { return riskRm5_; }
      set {
        riskRm5_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm6" field.</summary>
    public const int RiskRm6FieldNumber = 364;
    private float riskRm6_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm6 {
      get { return riskRm6_; }
      set {
        riskRm6_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm7" field.</summary>
    public const int RiskRm7FieldNumber = 365;
    private float riskRm7_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm7 {
      get { return riskRm7_; }
      set {
        riskRm7_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vDn" field.</summary>
    public const int MarginUDnVDnFieldNumber = 366;
    private float marginUDnVDn_;
    /// <summary>
    /// underlier down, vol down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVDn {
      get { return marginUDnVDn_; }
      set {
        marginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vUp" field.</summary>
    public const int MarginUDnVUpFieldNumber = 367;
    private float marginUDnVUp_;
    /// <summary>
    /// underlier down, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVUp {
      get { return marginUDnVUp_; }
      set {
        marginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vDn" field.</summary>
    public const int MarginUUpVDnFieldNumber = 368;
    private float marginUUpVDn_;
    /// <summary>
    /// underlier up, vol down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVDn {
      get { return marginUUpVDn_; }
      set {
        marginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vUp" field.</summary>
    public const int MarginUUpVUpFieldNumber = 369;
    private float marginUUpVUp_;
    /// <summary>
    /// underlier up, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVUp {
      get { return marginUUpVUp_; }
      set {
        marginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "risk_u50_dn" field.</summary>
    public const int RiskU50DnFieldNumber = 370;
    private float riskU50Dn_;
    /// <summary>
    /// underlier dn 50% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU50Dn {
      get { return riskU50Dn_; }
      set {
        riskU50Dn_ = value;
      }
    }

    /// <summary>Field number for the "risk_u50_up" field.</summary>
    public const int RiskU50UpFieldNumber = 371;
    private float riskU50Up_;
    /// <summary>
    /// underlier up 50% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU50Up {
      get { return riskU50Up_; }
      set {
        riskU50Up_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 322;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 325;
    private int underliersPerCn_;
    /// <summary>
    /// option delivery underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 328;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// type of underlier (affects $greek calculations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 331;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 334;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 337;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 340;
    private float uPrcRatio_;
    /// <summary>
    /// UPrcRatio (SymbolRatio) from product definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "min_tick_size" field.</summary>
    public const int MinTickSizeFieldNumber = 343;
    private float minTickSize_;
    /// <summary>
    /// minimum market price variation (dnTickSize if on a boundary)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTickSize {
      get { return minTickSize_; }
      set {
        minTickSize_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 346;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 349;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock underlier price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 352;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of this record [not necessarily the timestamp of the fill itself]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "data_center__v7" field.</summary>
    public const int DataCenterV7FieldNumber = 5000;
    private global::Spiderrock.Protobuf.SRDataCenter_V7 dataCenterV7_ = global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified;
    /// <summary>
    /// only v7: enum values do not match with v8: V7[None=0,NY4=1,NY5=2,CH2=3,CH3=4], V8[Does Not Exist]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SRDataCenter_V7 DataCenterV7 {
      get { return dataCenterV7_; }
      set {
        dataCenterV7_ = value;
      }
    }

    /// <summary>Field number for the "face_side__v7" field.</summary>
    public const int FaceSideV7FieldNumber = 5001;
    private global::Spiderrock.Protobuf.FaceSide faceSideV7_ = global::Spiderrock.Protobuf.FaceSide.Unspecified;
    /// <summary>
    /// only v7 - enum values match with v8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FaceSide FaceSideV7 {
      get { return faceSideV7_; }
      set {
        faceSideV7_ = value;
      }
    }

    /// <summary>Field number for the "face_shape__v7" field.</summary>
    public const int FaceShapeV7FieldNumber = 5002;
    private global::Spiderrock.Protobuf.FaceShape faceShapeV7_ = global::Spiderrock.Protobuf.FaceShape.Unspecified;
    /// <summary>
    /// only v7 - enum values match with v8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FaceShape FaceShapeV7 {
      get { return faceShapeV7_; }
      set {
        faceShapeV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_pr__v7" field.</summary>
    public const int FillPrV7FieldNumber = 5003;
    private float fillPrV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillPrV7 {
      get { return fillPrV7_; }
      set {
        fillPrV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric1__v7" field.</summary>
    public const int FillRiskMetric1V7FieldNumber = 5004;
    private float fillRiskMetric1V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric1V7 {
      get { return fillRiskMetric1V7_; }
      set {
        fillRiskMetric1V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric2__v7" field.</summary>
    public const int FillRiskMetric2V7FieldNumber = 5005;
    private float fillRiskMetric2V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric2V7 {
      get { return fillRiskMetric2V7_; }
      set {
        fillRiskMetric2V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric3__v7" field.</summary>
    public const int FillRiskMetric3V7FieldNumber = 5006;
    private float fillRiskMetric3V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric3V7 {
      get { return fillRiskMetric3V7_; }
      set {
        fillRiskMetric3V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric4__v7" field.</summary>
    public const int FillRiskMetric4V7FieldNumber = 5007;
    private float fillRiskMetric4V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric4V7 {
      get { return fillRiskMetric4V7_; }
      set {
        fillRiskMetric4V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric5__v7" field.</summary>
    public const int FillRiskMetric5V7FieldNumber = 5008;
    private float fillRiskMetric5V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric5V7 {
      get { return fillRiskMetric5V7_; }
      set {
        fillRiskMetric5V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric6__v7" field.</summary>
    public const int FillRiskMetric6V7FieldNumber = 5009;
    private float fillRiskMetric6V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric6V7 {
      get { return fillRiskMetric6V7_; }
      set {
        fillRiskMetric6V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric7__v7" field.</summary>
    public const int FillRiskMetric7V7FieldNumber = 5010;
    private float fillRiskMetric7V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric7V7 {
      get { return fillRiskMetric7V7_; }
      set {
        fillRiskMetric7V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s08_dn__v7" field.</summary>
    public const int FillS08DnV7FieldNumber = 5011;
    private float fillS08DnV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS08DnV7 {
      get { return fillS08DnV7_; }
      set {
        fillS08DnV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s06_up__v7" field.</summary>
    public const int FillS06UpV7FieldNumber = 5012;
    private float fillS06UpV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS06UpV7 {
      get { return fillS06UpV7_; }
      set {
        fillS06UpV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s15_dn__v7" field.</summary>
    public const int FillS15DnV7FieldNumber = 5013;
    private float fillS15DnV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS15DnV7 {
      get { return fillS15DnV7_; }
      set {
        fillS15DnV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s15_up__v7" field.</summary>
    public const int FillS15UpV7FieldNumber = 5014;
    private float fillS15UpV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS15UpV7 {
      get { return fillS15UpV7_; }
      set {
        fillS15UpV7_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrRiskExecution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrRiskExecution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SysRealm != other.SysRealm) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (RunStatus != other.RunStatus) return false;
      if (Version != other.Version) return false;
      if (ExecStatus != other.ExecStatus) return false;
      if (ExecShape != other.ExecShape) return false;
      if (PackageId != other.PackageId) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (ParentVersion != other.ParentVersion) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (ParentShape != other.ParentShape) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (Accnt != other.Accnt) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (EngineName != other.EngineName) return false;
      if (ExecRole != other.ExecRole) return false;
      if (ChildOrderHandling != other.ChildOrderHandling) return false;
      if (ChildAlgoHandler != other.ChildAlgoHandler) return false;
      if (ChildSSaleFlag != other.ChildSSaleFlag) return false;
      if (UserName != other.UserName) return false;
      if (OrderSide != other.OrderSide) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (CumFillQuantity != other.CumFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (CumLegFillQuantity != other.CumLegFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgLegFillPrice, other.AvgLegFillPrice)) return false;
      if (LeavesQty != other.LeavesQty) return false;
      if (PriceType != other.PriceType) return false;
      if (FirmType != other.FirmType) return false;
      if (PriAggGroup != other.PriAggGroup) return false;
      if (SecAggGroup != other.SecAggGroup) return false;
      if (!object.Equals(FillTransactDttm, other.FillTransactDttm)) return false;
      if (!object.Equals(FillDttm, other.FillDttm)) return false;
      if (FillExch != other.FillExch) return false;
      if (FillExecId != other.FillExecId) return false;
      if (FillExecRefId != other.FillExecRefId) return false;
      if (FillLegRefId != other.FillLegRefId) return false;
      if (FillLegRatio != other.FillLegRatio) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillExchFee, other.FillExchFee)) return false;
      if (FillMarket != other.FillMarket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPrice, other.FillPrice)) return false;
      if (FillQuantity != other.FillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid, other.FillBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk, other.FillAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillMark, other.FillMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUBid, other.FillUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUAsk, other.FillUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVol, other.FillVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVe, other.FillVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillGa, other.FillGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDe, other.FillDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTh, other.FillTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBeta, other.FillBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskVega, other.RiskVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskWtVega, other.RiskWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskNValue, other.RiskNValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskDelta, other.RiskDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskDDelta, other.RiskDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm1, other.RiskRm1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm2, other.RiskRm2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm3, other.RiskRm3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm4, other.RiskRm4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm5, other.RiskRm5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm6, other.RiskRm6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm7, other.RiskRm7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVDn, other.MarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVUp, other.MarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVDn, other.MarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVUp, other.MarginUUpVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU50Dn, other.RiskU50Dn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU50Up, other.RiskU50Up)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTickSize, other.MinTickSize)) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (DataCenterV7 != other.DataCenterV7) return false;
      if (FaceSideV7 != other.FaceSideV7) return false;
      if (FaceShapeV7 != other.FaceShapeV7) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillPrV7, other.FillPrV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric1V7, other.FillRiskMetric1V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric2V7, other.FillRiskMetric2V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric3V7, other.FillRiskMetric3V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric4V7, other.FillRiskMetric4V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric5V7, other.FillRiskMetric5V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric6V7, other.FillRiskMetric6V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric7V7, other.FillRiskMetric7V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS08DnV7, other.FillS08DnV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS06UpV7, other.FillS06UpV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS15DnV7, other.FillS15DnV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS15UpV7, other.FillS15UpV7)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) hash ^= SysRealm.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) hash ^= ExecStatus.GetHashCode();
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) hash ^= ExecShape.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (ParentVersion != 0) hash ^= ParentVersion.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (ClOrdId != 0L) hash ^= ClOrdId.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ParentShape.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) hash ^= ExecRole.GetHashCode();
      if (ChildOrderHandling.Length != 0) hash ^= ChildOrderHandling.GetHashCode();
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) hash ^= ChildAlgoHandler.GetHashCode();
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= ChildSSaleFlag.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (CumFillQuantity != 0) hash ^= CumFillQuantity.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (CumLegFillQuantity != 0) hash ^= CumLegFillQuantity.GetHashCode();
      if (AvgLegFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgLegFillPrice);
      if (LeavesQty != 0) hash ^= LeavesQty.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (PriAggGroup.Length != 0) hash ^= PriAggGroup.GetHashCode();
      if (SecAggGroup.Length != 0) hash ^= SecAggGroup.GetHashCode();
      if (fillTransactDttm_ != null) hash ^= FillTransactDttm.GetHashCode();
      if (fillDttm_ != null) hash ^= FillDttm.GetHashCode();
      if (FillExch.Length != 0) hash ^= FillExch.GetHashCode();
      if (FillExecId.Length != 0) hash ^= FillExecId.GetHashCode();
      if (FillExecRefId.Length != 0) hash ^= FillExecRefId.GetHashCode();
      if (FillLegRefId != 0L) hash ^= FillLegRefId.GetHashCode();
      if (FillLegRatio != 0) hash ^= FillLegRatio.GetHashCode();
      if (FillExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillExchFee);
      if (FillMarket.Length != 0) hash ^= FillMarket.GetHashCode();
      if (FillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPrice);
      if (FillQuantity != 0) hash ^= FillQuantity.GetHashCode();
      if (FillBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid);
      if (FillAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk);
      if (FillMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillMark);
      if (FillUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUBid);
      if (FillUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUAsk);
      if (FillVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVol);
      if (FillVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVe);
      if (FillGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillGa);
      if (FillDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDe);
      if (FillTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTh);
      if (FillBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBeta);
      if (RiskVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskVega);
      if (RiskWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskWtVega);
      if (RiskNValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskNValue);
      if (RiskDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskDelta);
      if (RiskDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskDDelta);
      if (RiskRm1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm1);
      if (RiskRm2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm2);
      if (RiskRm3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm3);
      if (RiskRm4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm4);
      if (RiskRm5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm5);
      if (RiskRm6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm6);
      if (RiskRm7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm7);
      if (MarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVDn);
      if (MarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVUp);
      if (MarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVDn);
      if (MarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVUp);
      if (RiskU50Dn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU50Dn);
      if (RiskU50Up != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU50Up);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (UPrcRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcRatio);
      if (MinTickSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTickSize);
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) hash ^= DataCenterV7.GetHashCode();
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) hash ^= FaceSideV7.GetHashCode();
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) hash ^= FaceShapeV7.GetHashCode();
      if (FillPrV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillPrV7);
      if (FillRiskMetric1V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric1V7);
      if (FillRiskMetric2V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric2V7);
      if (FillRiskMetric3V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric3V7);
      if (FillRiskMetric4V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric4V7);
      if (FillRiskMetric5V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric5V7);
      if (FillRiskMetric6V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric6V7);
      if (FillRiskMetric7V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric7V7);
      if (FillS08DnV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS08DnV7);
      if (FillS06UpV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS06UpV7);
      if (FillS15DnV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS15DnV7);
      if (FillS15UpV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS15UpV7);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (Version != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExecShape);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(PackageId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (ParentVersion != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(ClOrdId);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(RiskGroupId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) ParentShape);
      }
      if (secKey_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(GroupingCode);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) ExecRole);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(170, 11);
        output.WriteString(UserName);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(AvgFillPrice);
      }
      if (CumLegFillQuantity != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AvgLegFillPrice);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) PriceType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(202, 13);
        output.WriteString(SecAggGroup);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(226, 13);
        output.WriteMessage(FillTransactDttm);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(FillDttm);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(FillExch);
      }
      if (FillExecId.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        output.WriteRawTag(216, 14);
        output.WriteInt64(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(FillExchFee);
      }
      if (FillMarket.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(FillMarket);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(FillPrice);
      }
      if (FillQuantity != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(FillQuantity);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(FillAsk);
      }
      if (FillMark != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(FillMark);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(FillUAsk);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(FillVol);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(FillVe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(FillGa);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(FillDe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(FillTh);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(FillBeta);
      }
      if (Years != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(MinTickSize);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) UPriceFormat);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 22);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(138, 22);
        output.WriteString(EngineName);
      }
      if (RiskVega != 0F) {
        output.WriteRawTag(149, 22);
        output.WriteFloat(RiskVega);
      }
      if (RiskWtVega != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(RiskWtVega);
      }
      if (RiskNValue != 0F) {
        output.WriteRawTag(165, 22);
        output.WriteFloat(RiskNValue);
      }
      if (RiskDelta != 0F) {
        output.WriteRawTag(173, 22);
        output.WriteFloat(RiskDelta);
      }
      if (RiskDDelta != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(RiskDDelta);
      }
      if (RiskRm1 != 0F) {
        output.WriteRawTag(189, 22);
        output.WriteFloat(RiskRm1);
      }
      if (RiskRm2 != 0F) {
        output.WriteRawTag(197, 22);
        output.WriteFloat(RiskRm2);
      }
      if (RiskRm3 != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(RiskRm3);
      }
      if (RiskRm4 != 0F) {
        output.WriteRawTag(213, 22);
        output.WriteFloat(RiskRm4);
      }
      if (RiskRm5 != 0F) {
        output.WriteRawTag(221, 22);
        output.WriteFloat(RiskRm5);
      }
      if (RiskRm6 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(RiskRm6);
      }
      if (RiskRm7 != 0F) {
        output.WriteRawTag(237, 22);
        output.WriteFloat(RiskRm7);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(245, 22);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(133, 23);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(141, 23);
        output.WriteFloat(MarginUUpVUp);
      }
      if (RiskU50Dn != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(RiskU50Dn);
      }
      if (RiskU50Up != 0F) {
        output.WriteRawTag(157, 23);
        output.WriteFloat(RiskU50Up);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        output.WriteRawTag(200, 184, 2);
        output.WriteEnum((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        output.WriteRawTag(208, 184, 2);
        output.WriteEnum((int) FaceShapeV7);
      }
      if (FillPrV7 != 0F) {
        output.WriteRawTag(221, 184, 2);
        output.WriteFloat(FillPrV7);
      }
      if (FillRiskMetric1V7 != 0F) {
        output.WriteRawTag(229, 184, 2);
        output.WriteFloat(FillRiskMetric1V7);
      }
      if (FillRiskMetric2V7 != 0F) {
        output.WriteRawTag(237, 184, 2);
        output.WriteFloat(FillRiskMetric2V7);
      }
      if (FillRiskMetric3V7 != 0F) {
        output.WriteRawTag(245, 184, 2);
        output.WriteFloat(FillRiskMetric3V7);
      }
      if (FillRiskMetric4V7 != 0F) {
        output.WriteRawTag(253, 184, 2);
        output.WriteFloat(FillRiskMetric4V7);
      }
      if (FillRiskMetric5V7 != 0F) {
        output.WriteRawTag(133, 185, 2);
        output.WriteFloat(FillRiskMetric5V7);
      }
      if (FillRiskMetric6V7 != 0F) {
        output.WriteRawTag(141, 185, 2);
        output.WriteFloat(FillRiskMetric6V7);
      }
      if (FillRiskMetric7V7 != 0F) {
        output.WriteRawTag(149, 185, 2);
        output.WriteFloat(FillRiskMetric7V7);
      }
      if (FillS08DnV7 != 0F) {
        output.WriteRawTag(157, 185, 2);
        output.WriteFloat(FillS08DnV7);
      }
      if (FillS06UpV7 != 0F) {
        output.WriteRawTag(165, 185, 2);
        output.WriteFloat(FillS06UpV7);
      }
      if (FillS15DnV7 != 0F) {
        output.WriteRawTag(173, 185, 2);
        output.WriteFloat(FillS15DnV7);
      }
      if (FillS15UpV7 != 0F) {
        output.WriteRawTag(181, 185, 2);
        output.WriteFloat(FillS15UpV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (Version != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExecShape);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(PackageId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (ParentVersion != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(ClOrdId);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(RiskGroupId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) ParentShape);
      }
      if (secKey_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(GroupingCode);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) ExecRole);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(170, 11);
        output.WriteString(UserName);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(AvgFillPrice);
      }
      if (CumLegFillQuantity != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AvgLegFillPrice);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) PriceType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(202, 13);
        output.WriteString(SecAggGroup);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(226, 13);
        output.WriteMessage(FillTransactDttm);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(FillDttm);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(FillExch);
      }
      if (FillExecId.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        output.WriteRawTag(216, 14);
        output.WriteInt64(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(FillExchFee);
      }
      if (FillMarket.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(FillMarket);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(FillPrice);
      }
      if (FillQuantity != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(FillQuantity);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(FillAsk);
      }
      if (FillMark != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(FillMark);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(FillUAsk);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(FillVol);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(FillVe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(FillGa);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(FillDe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(FillTh);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(FillBeta);
      }
      if (Years != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(MinTickSize);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) UPriceFormat);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 22);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(138, 22);
        output.WriteString(EngineName);
      }
      if (RiskVega != 0F) {
        output.WriteRawTag(149, 22);
        output.WriteFloat(RiskVega);
      }
      if (RiskWtVega != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(RiskWtVega);
      }
      if (RiskNValue != 0F) {
        output.WriteRawTag(165, 22);
        output.WriteFloat(RiskNValue);
      }
      if (RiskDelta != 0F) {
        output.WriteRawTag(173, 22);
        output.WriteFloat(RiskDelta);
      }
      if (RiskDDelta != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(RiskDDelta);
      }
      if (RiskRm1 != 0F) {
        output.WriteRawTag(189, 22);
        output.WriteFloat(RiskRm1);
      }
      if (RiskRm2 != 0F) {
        output.WriteRawTag(197, 22);
        output.WriteFloat(RiskRm2);
      }
      if (RiskRm3 != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(RiskRm3);
      }
      if (RiskRm4 != 0F) {
        output.WriteRawTag(213, 22);
        output.WriteFloat(RiskRm4);
      }
      if (RiskRm5 != 0F) {
        output.WriteRawTag(221, 22);
        output.WriteFloat(RiskRm5);
      }
      if (RiskRm6 != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(RiskRm6);
      }
      if (RiskRm7 != 0F) {
        output.WriteRawTag(237, 22);
        output.WriteFloat(RiskRm7);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(245, 22);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(133, 23);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(141, 23);
        output.WriteFloat(MarginUUpVUp);
      }
      if (RiskU50Dn != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(RiskU50Dn);
      }
      if (RiskU50Up != 0F) {
        output.WriteRawTag(157, 23);
        output.WriteFloat(RiskU50Up);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        output.WriteRawTag(200, 184, 2);
        output.WriteEnum((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        output.WriteRawTag(208, 184, 2);
        output.WriteEnum((int) FaceShapeV7);
      }
      if (FillPrV7 != 0F) {
        output.WriteRawTag(221, 184, 2);
        output.WriteFloat(FillPrV7);
      }
      if (FillRiskMetric1V7 != 0F) {
        output.WriteRawTag(229, 184, 2);
        output.WriteFloat(FillRiskMetric1V7);
      }
      if (FillRiskMetric2V7 != 0F) {
        output.WriteRawTag(237, 184, 2);
        output.WriteFloat(FillRiskMetric2V7);
      }
      if (FillRiskMetric3V7 != 0F) {
        output.WriteRawTag(245, 184, 2);
        output.WriteFloat(FillRiskMetric3V7);
      }
      if (FillRiskMetric4V7 != 0F) {
        output.WriteRawTag(253, 184, 2);
        output.WriteFloat(FillRiskMetric4V7);
      }
      if (FillRiskMetric5V7 != 0F) {
        output.WriteRawTag(133, 185, 2);
        output.WriteFloat(FillRiskMetric5V7);
      }
      if (FillRiskMetric6V7 != 0F) {
        output.WriteRawTag(141, 185, 2);
        output.WriteFloat(FillRiskMetric6V7);
      }
      if (FillRiskMetric7V7 != 0F) {
        output.WriteRawTag(149, 185, 2);
        output.WriteFloat(FillRiskMetric7V7);
      }
      if (FillS08DnV7 != 0F) {
        output.WriteRawTag(157, 185, 2);
        output.WriteFloat(FillS08DnV7);
      }
      if (FillS06UpV7 != 0F) {
        output.WriteRawTag(165, 185, 2);
        output.WriteFloat(FillS06UpV7);
      }
      if (FillS15DnV7 != 0F) {
        output.WriteRawTag(173, 185, 2);
        output.WriteFloat(FillS15DnV7);
      }
      if (FillS15UpV7 != 0F) {
        output.WriteRawTag(181, 185, 2);
        output.WriteFloat(FillS15UpV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecShape);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (ParentVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClOrdId);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentShape);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (EngineName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecRole);
      }
      if (ChildOrderHandling.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildAlgoHandler);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildSSaleFlag);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (CumLegFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        size += 2 + 8;
      }
      if (LeavesQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecAggGroup);
      }
      if (fillTransactDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillTransactDttm);
      }
      if (fillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillDttm);
      }
      if (FillExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExch);
      }
      if (FillExecId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        size += 2 + 4;
      }
      if (FillMarket.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillMarket);
      }
      if (FillPrice != 0D) {
        size += 2 + 8;
      }
      if (FillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuantity);
      }
      if (FillBid != 0D) {
        size += 2 + 8;
      }
      if (FillAsk != 0D) {
        size += 2 + 8;
      }
      if (FillMark != 0D) {
        size += 2 + 8;
      }
      if (FillUBid != 0D) {
        size += 2 + 8;
      }
      if (FillUAsk != 0D) {
        size += 2 + 8;
      }
      if (FillVol != 0F) {
        size += 2 + 4;
      }
      if (FillVe != 0F) {
        size += 2 + 4;
      }
      if (FillGa != 0F) {
        size += 2 + 4;
      }
      if (FillDe != 0F) {
        size += 2 + 4;
      }
      if (FillTh != 0F) {
        size += 2 + 4;
      }
      if (FillBeta != 0F) {
        size += 2 + 4;
      }
      if (RiskVega != 0F) {
        size += 2 + 4;
      }
      if (RiskWtVega != 0F) {
        size += 2 + 4;
      }
      if (RiskNValue != 0F) {
        size += 2 + 4;
      }
      if (RiskDelta != 0F) {
        size += 2 + 4;
      }
      if (RiskDDelta != 0F) {
        size += 2 + 4;
      }
      if (RiskRm1 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm2 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm3 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm4 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm5 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm6 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm7 != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (RiskU50Dn != 0F) {
        size += 2 + 4;
      }
      if (RiskU50Up != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        size += 2 + 4;
      }
      if (MinTickSize != 0F) {
        size += 2 + 4;
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) FaceShapeV7);
      }
      if (FillPrV7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric1V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric2V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric3V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric4V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric5V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric6V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric7V7 != 0F) {
        size += 3 + 4;
      }
      if (FillS08DnV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS06UpV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS15DnV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS15UpV7 != 0F) {
        size += 3 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrRiskExecution other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        SysRealm = other.SysRealm;
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        RunStatus = other.RunStatus;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        ExecStatus = other.ExecStatus;
      }
      if (other.ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        ExecShape = other.ExecShape;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.ParentVersion != 0) {
        ParentVersion = other.ParentVersion;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.ClOrdId != 0L) {
        ClOrdId = other.ClOrdId;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ParentShape = other.ParentShape;
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        ExecRole = other.ExecRole;
      }
      if (other.ChildOrderHandling.Length != 0) {
        ChildOrderHandling = other.ChildOrderHandling;
      }
      if (other.ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        ChildAlgoHandler = other.ChildAlgoHandler;
      }
      if (other.ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        ChildSSaleFlag = other.ChildSSaleFlag;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        OrderSide = other.OrderSide;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.CumFillQuantity != 0) {
        CumFillQuantity = other.CumFillQuantity;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.CumLegFillQuantity != 0) {
        CumLegFillQuantity = other.CumLegFillQuantity;
      }
      if (other.AvgLegFillPrice != 0D) {
        AvgLegFillPrice = other.AvgLegFillPrice;
      }
      if (other.LeavesQty != 0) {
        LeavesQty = other.LeavesQty;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.PriAggGroup.Length != 0) {
        PriAggGroup = other.PriAggGroup;
      }
      if (other.SecAggGroup.Length != 0) {
        SecAggGroup = other.SecAggGroup;
      }
      if (other.fillTransactDttm_ != null) {
        if (fillTransactDttm_ == null) {
          FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillTransactDttm.MergeFrom(other.FillTransactDttm);
      }
      if (other.fillDttm_ != null) {
        if (fillDttm_ == null) {
          FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillDttm.MergeFrom(other.FillDttm);
      }
      if (other.FillExch.Length != 0) {
        FillExch = other.FillExch;
      }
      if (other.FillExecId.Length != 0) {
        FillExecId = other.FillExecId;
      }
      if (other.FillExecRefId.Length != 0) {
        FillExecRefId = other.FillExecRefId;
      }
      if (other.FillLegRefId != 0L) {
        FillLegRefId = other.FillLegRefId;
      }
      if (other.FillLegRatio != 0) {
        FillLegRatio = other.FillLegRatio;
      }
      if (other.FillExchFee != 0F) {
        FillExchFee = other.FillExchFee;
      }
      if (other.FillMarket.Length != 0) {
        FillMarket = other.FillMarket;
      }
      if (other.FillPrice != 0D) {
        FillPrice = other.FillPrice;
      }
      if (other.FillQuantity != 0) {
        FillQuantity = other.FillQuantity;
      }
      if (other.FillBid != 0D) {
        FillBid = other.FillBid;
      }
      if (other.FillAsk != 0D) {
        FillAsk = other.FillAsk;
      }
      if (other.FillMark != 0D) {
        FillMark = other.FillMark;
      }
      if (other.FillUBid != 0D) {
        FillUBid = other.FillUBid;
      }
      if (other.FillUAsk != 0D) {
        FillUAsk = other.FillUAsk;
      }
      if (other.FillVol != 0F) {
        FillVol = other.FillVol;
      }
      if (other.FillVe != 0F) {
        FillVe = other.FillVe;
      }
      if (other.FillGa != 0F) {
        FillGa = other.FillGa;
      }
      if (other.FillDe != 0F) {
        FillDe = other.FillDe;
      }
      if (other.FillTh != 0F) {
        FillTh = other.FillTh;
      }
      if (other.FillBeta != 0F) {
        FillBeta = other.FillBeta;
      }
      if (other.RiskVega != 0F) {
        RiskVega = other.RiskVega;
      }
      if (other.RiskWtVega != 0F) {
        RiskWtVega = other.RiskWtVega;
      }
      if (other.RiskNValue != 0F) {
        RiskNValue = other.RiskNValue;
      }
      if (other.RiskDelta != 0F) {
        RiskDelta = other.RiskDelta;
      }
      if (other.RiskDDelta != 0F) {
        RiskDDelta = other.RiskDDelta;
      }
      if (other.RiskRm1 != 0F) {
        RiskRm1 = other.RiskRm1;
      }
      if (other.RiskRm2 != 0F) {
        RiskRm2 = other.RiskRm2;
      }
      if (other.RiskRm3 != 0F) {
        RiskRm3 = other.RiskRm3;
      }
      if (other.RiskRm4 != 0F) {
        RiskRm4 = other.RiskRm4;
      }
      if (other.RiskRm5 != 0F) {
        RiskRm5 = other.RiskRm5;
      }
      if (other.RiskRm6 != 0F) {
        RiskRm6 = other.RiskRm6;
      }
      if (other.RiskRm7 != 0F) {
        RiskRm7 = other.RiskRm7;
      }
      if (other.MarginUDnVDn != 0F) {
        MarginUDnVDn = other.MarginUDnVDn;
      }
      if (other.MarginUDnVUp != 0F) {
        MarginUDnVUp = other.MarginUDnVUp;
      }
      if (other.MarginUUpVDn != 0F) {
        MarginUUpVDn = other.MarginUUpVDn;
      }
      if (other.MarginUUpVUp != 0F) {
        MarginUUpVUp = other.MarginUUpVUp;
      }
      if (other.RiskU50Dn != 0F) {
        RiskU50Dn = other.RiskU50Dn;
      }
      if (other.RiskU50Up != 0F) {
        RiskU50Up = other.RiskU50Up;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.UPrcRatio != 0F) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.MinTickSize != 0F) {
        MinTickSize = other.MinTickSize;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        DataCenterV7 = other.DataCenterV7;
      }
      if (other.FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        FaceSideV7 = other.FaceSideV7;
      }
      if (other.FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        FaceShapeV7 = other.FaceShapeV7;
      }
      if (other.FillPrV7 != 0F) {
        FillPrV7 = other.FillPrV7;
      }
      if (other.FillRiskMetric1V7 != 0F) {
        FillRiskMetric1V7 = other.FillRiskMetric1V7;
      }
      if (other.FillRiskMetric2V7 != 0F) {
        FillRiskMetric2V7 = other.FillRiskMetric2V7;
      }
      if (other.FillRiskMetric3V7 != 0F) {
        FillRiskMetric3V7 = other.FillRiskMetric3V7;
      }
      if (other.FillRiskMetric4V7 != 0F) {
        FillRiskMetric4V7 = other.FillRiskMetric4V7;
      }
      if (other.FillRiskMetric5V7 != 0F) {
        FillRiskMetric5V7 = other.FillRiskMetric5V7;
      }
      if (other.FillRiskMetric6V7 != 0F) {
        FillRiskMetric6V7 = other.FillRiskMetric6V7;
      }
      if (other.FillRiskMetric7V7 != 0F) {
        FillRiskMetric7V7 = other.FillRiskMetric7V7;
      }
      if (other.FillS08DnV7 != 0F) {
        FillS08DnV7 = other.FillS08DnV7;
      }
      if (other.FillS06UpV7 != 0F) {
        FillS06UpV7 = other.FillS06UpV7;
      }
      if (other.FillS15DnV7 != 0F) {
        FillS15DnV7 = other.FillS15DnV7;
      }
      if (other.FillS15UpV7 != 0F) {
        FillS15UpV7 = other.FillS15UpV7;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 872: {
            Version = input.ReadInt32();
            break;
          }
          case 896: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 920: {
            ExecShape = (global::Spiderrock.Protobuf.ExecShape) input.ReadEnum();
            break;
          }
          case 944: {
            PackageId = input.ReadInt64();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            ParentVersion = input.ReadInt32();
            break;
          }
          case 1016: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1040: {
            ClOrdId = input.ReadInt64();
            break;
          }
          case 1064: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1136: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1162: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1184: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1234: {
            Accnt = input.ReadString();
            break;
          }
          case 1258: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1280: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1304: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1352: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 1378: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 1400: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 1424: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1450: {
            UserName = input.ReadString();
            break;
          }
          case 1472: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1496: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1520: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1544: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1569: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1592: {
            CumLegFillQuantity = input.ReadInt32();
            break;
          }
          case 1617: {
            AvgLegFillPrice = input.ReadDouble();
            break;
          }
          case 1640: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 1664: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 1688: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1714: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 1738: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 1762: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 1786: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 1810: {
            FillExch = input.ReadString();
            break;
          }
          case 1834: {
            FillExecId = input.ReadString();
            break;
          }
          case 1858: {
            FillExecRefId = input.ReadString();
            break;
          }
          case 1880: {
            FillLegRefId = input.ReadInt64();
            break;
          }
          case 1904: {
            FillLegRatio = input.ReadInt32();
            break;
          }
          case 1933: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 1954: {
            FillMarket = input.ReadString();
            break;
          }
          case 1977: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 2000: {
            FillQuantity = input.ReadInt32();
            break;
          }
          case 2025: {
            FillBid = input.ReadDouble();
            break;
          }
          case 2049: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 2073: {
            FillMark = input.ReadDouble();
            break;
          }
          case 2097: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 2121: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 2149: {
            FillVol = input.ReadFloat();
            break;
          }
          case 2173: {
            FillVe = input.ReadFloat();
            break;
          }
          case 2197: {
            FillGa = input.ReadFloat();
            break;
          }
          case 2221: {
            FillDe = input.ReadFloat();
            break;
          }
          case 2245: {
            FillTh = input.ReadFloat();
            break;
          }
          case 2293: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 2581: {
            Years = input.ReadFloat();
            break;
          }
          case 2600: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 2624: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 2653: {
            TickValue = input.ReadFloat();
            break;
          }
          case 2677: {
            PointValue = input.ReadFloat();
            break;
          }
          case 2696: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 2725: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 2749: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 2768: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2792: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2818: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2826: {
            EngineName = input.ReadString();
            break;
          }
          case 2837: {
            RiskVega = input.ReadFloat();
            break;
          }
          case 2845: {
            RiskWtVega = input.ReadFloat();
            break;
          }
          case 2853: {
            RiskNValue = input.ReadFloat();
            break;
          }
          case 2861: {
            RiskDelta = input.ReadFloat();
            break;
          }
          case 2869: {
            RiskDDelta = input.ReadFloat();
            break;
          }
          case 2877: {
            RiskRm1 = input.ReadFloat();
            break;
          }
          case 2885: {
            RiskRm2 = input.ReadFloat();
            break;
          }
          case 2893: {
            RiskRm3 = input.ReadFloat();
            break;
          }
          case 2901: {
            RiskRm4 = input.ReadFloat();
            break;
          }
          case 2909: {
            RiskRm5 = input.ReadFloat();
            break;
          }
          case 2917: {
            RiskRm6 = input.ReadFloat();
            break;
          }
          case 2925: {
            RiskRm7 = input.ReadFloat();
            break;
          }
          case 2933: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 2941: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 2949: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 2957: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 2965: {
            RiskU50Dn = input.ReadFloat();
            break;
          }
          case 2973: {
            RiskU50Up = input.ReadFloat();
            break;
          }
          case 40000: {
            DataCenterV7 = (global::Spiderrock.Protobuf.SRDataCenter_V7) input.ReadEnum();
            break;
          }
          case 40008: {
            FaceSideV7 = (global::Spiderrock.Protobuf.FaceSide) input.ReadEnum();
            break;
          }
          case 40016: {
            FaceShapeV7 = (global::Spiderrock.Protobuf.FaceShape) input.ReadEnum();
            break;
          }
          case 40029: {
            FillPrV7 = input.ReadFloat();
            break;
          }
          case 40037: {
            FillRiskMetric1V7 = input.ReadFloat();
            break;
          }
          case 40045: {
            FillRiskMetric2V7 = input.ReadFloat();
            break;
          }
          case 40053: {
            FillRiskMetric3V7 = input.ReadFloat();
            break;
          }
          case 40061: {
            FillRiskMetric4V7 = input.ReadFloat();
            break;
          }
          case 40069: {
            FillRiskMetric5V7 = input.ReadFloat();
            break;
          }
          case 40077: {
            FillRiskMetric6V7 = input.ReadFloat();
            break;
          }
          case 40085: {
            FillRiskMetric7V7 = input.ReadFloat();
            break;
          }
          case 40093: {
            FillS08DnV7 = input.ReadFloat();
            break;
          }
          case 40101: {
            FillS06UpV7 = input.ReadFloat();
            break;
          }
          case 40109: {
            FillS15DnV7 = input.ReadFloat();
            break;
          }
          case 40117: {
            FillS15UpV7 = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrRiskExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 872: {
            Version = input.ReadInt32();
            break;
          }
          case 896: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 920: {
            ExecShape = (global::Spiderrock.Protobuf.ExecShape) input.ReadEnum();
            break;
          }
          case 944: {
            PackageId = input.ReadInt64();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            ParentVersion = input.ReadInt32();
            break;
          }
          case 1016: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1040: {
            ClOrdId = input.ReadInt64();
            break;
          }
          case 1064: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1136: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1162: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1184: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1234: {
            Accnt = input.ReadString();
            break;
          }
          case 1258: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1280: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1304: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1352: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 1378: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 1400: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 1424: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1450: {
            UserName = input.ReadString();
            break;
          }
          case 1472: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1496: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1520: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1544: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1569: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1592: {
            CumLegFillQuantity = input.ReadInt32();
            break;
          }
          case 1617: {
            AvgLegFillPrice = input.ReadDouble();
            break;
          }
          case 1640: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 1664: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 1688: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1714: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 1738: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 1762: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 1786: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 1810: {
            FillExch = input.ReadString();
            break;
          }
          case 1834: {
            FillExecId = input.ReadString();
            break;
          }
          case 1858: {
            FillExecRefId = input.ReadString();
            break;
          }
          case 1880: {
            FillLegRefId = input.ReadInt64();
            break;
          }
          case 1904: {
            FillLegRatio = input.ReadInt32();
            break;
          }
          case 1933: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 1954: {
            FillMarket = input.ReadString();
            break;
          }
          case 1977: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 2000: {
            FillQuantity = input.ReadInt32();
            break;
          }
          case 2025: {
            FillBid = input.ReadDouble();
            break;
          }
          case 2049: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 2073: {
            FillMark = input.ReadDouble();
            break;
          }
          case 2097: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 2121: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 2149: {
            FillVol = input.ReadFloat();
            break;
          }
          case 2173: {
            FillVe = input.ReadFloat();
            break;
          }
          case 2197: {
            FillGa = input.ReadFloat();
            break;
          }
          case 2221: {
            FillDe = input.ReadFloat();
            break;
          }
          case 2245: {
            FillTh = input.ReadFloat();
            break;
          }
          case 2293: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 2581: {
            Years = input.ReadFloat();
            break;
          }
          case 2600: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 2624: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 2653: {
            TickValue = input.ReadFloat();
            break;
          }
          case 2677: {
            PointValue = input.ReadFloat();
            break;
          }
          case 2696: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 2725: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 2749: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 2768: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2792: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2818: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2826: {
            EngineName = input.ReadString();
            break;
          }
          case 2837: {
            RiskVega = input.ReadFloat();
            break;
          }
          case 2845: {
            RiskWtVega = input.ReadFloat();
            break;
          }
          case 2853: {
            RiskNValue = input.ReadFloat();
            break;
          }
          case 2861: {
            RiskDelta = input.ReadFloat();
            break;
          }
          case 2869: {
            RiskDDelta = input.ReadFloat();
            break;
          }
          case 2877: {
            RiskRm1 = input.ReadFloat();
            break;
          }
          case 2885: {
            RiskRm2 = input.ReadFloat();
            break;
          }
          case 2893: {
            RiskRm3 = input.ReadFloat();
            break;
          }
          case 2901: {
            RiskRm4 = input.ReadFloat();
            break;
          }
          case 2909: {
            RiskRm5 = input.ReadFloat();
            break;
          }
          case 2917: {
            RiskRm6 = input.ReadFloat();
            break;
          }
          case 2925: {
            RiskRm7 = input.ReadFloat();
            break;
          }
          case 2933: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 2941: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 2949: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 2957: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 2965: {
            RiskU50Dn = input.ReadFloat();
            break;
          }
          case 2973: {
            RiskU50Up = input.ReadFloat();
            break;
          }
          case 40000: {
            DataCenterV7 = (global::Spiderrock.Protobuf.SRDataCenter_V7) input.ReadEnum();
            break;
          }
          case 40008: {
            FaceSideV7 = (global::Spiderrock.Protobuf.FaceSide) input.ReadEnum();
            break;
          }
          case 40016: {
            FaceShapeV7 = (global::Spiderrock.Protobuf.FaceShape) input.ReadEnum();
            break;
          }
          case 40029: {
            FillPrV7 = input.ReadFloat();
            break;
          }
          case 40037: {
            FillRiskMetric1V7 = input.ReadFloat();
            break;
          }
          case 40045: {
            FillRiskMetric2V7 = input.ReadFloat();
            break;
          }
          case 40053: {
            FillRiskMetric3V7 = input.ReadFloat();
            break;
          }
          case 40061: {
            FillRiskMetric4V7 = input.ReadFloat();
            break;
          }
          case 40069: {
            FillRiskMetric5V7 = input.ReadFloat();
            break;
          }
          case 40077: {
            FillRiskMetric6V7 = input.ReadFloat();
            break;
          }
          case 40085: {
            FillRiskMetric7V7 = input.ReadFloat();
            break;
          }
          case 40093: {
            FillS08DnV7 = input.ReadFloat();
            break;
          }
          case 40101: {
            FillS06UpV7 = input.ReadFloat();
            break;
          }
          case 40109: {
            FillS15DnV7 = input.ReadFloat();
            break;
          }
          case 40117: {
            FillS15UpV7 = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrRiskExecution message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrRiskExecution.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fillNumber_ = other.fillNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fill_number" field.</summary>
        public const int FillNumberFieldNumber = 10;
        private long fillNumber_;
        /// <summary>
        /// SpiderRock execution number (globally unique over trailing 10 days)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FillNumber {
          get { return fillNumber_; }
          set {
            fillNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FillNumber != other.FillNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FillNumber != 0L) hash ^= FillNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FillNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FillNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.FillNumber != 0L) {
            FillNumber = other.FillNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
