// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrParentExecution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrParentExecution.proto</summary>
  public static partial class SpdrParentExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrParentExecution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrParentExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJQYXJlbnRFeGVjdXRpb24u",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIs1DChNT",
            "cGRyUGFyZW50RXhlY3V0aW9uEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzItLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuU3BkclBhcmVudEV4ZWN1dGlvbi5QS2V5EjAK",
            "CXN5c19yZWFsbRhkIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzUmVh",
            "bG0SPAoPc3lzX2Vudmlyb25tZW50GGcgASgOMiMuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5TeXNFbnZpcm9ubWVudBIyCgpydW5fc3RhdHVzGGogASgOMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5SdW5TdGF0dXMSDwoHdmVyc2lvbhhtIAEoBRI0",
            "CgtleGVjX3N0YXR1cxhwIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRXhl",
            "Y1N0YXR1cxIyCgpleGVjX3NoYXBlGHMgASgOMh4uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5FeGVjU2hhcGUSEgoKcGFja2FnZV9pZBh2IAEoAxIVCg1wYXJlbnRf",
            "bnVtYmVyGHkgASgDEhYKDnBhcmVudF92ZXJzaW9uGHwgASgFEhoKEmJhc2Vf",
            "cGFyZW50X251bWJlchh/IAEoAxISCgljbF9vcmRfaWQYggEgASgDEhkKEHJl",
            "dmlld19jbF9vcmRfaWQYhQEgASgJEhQKC2FsdF9maWxsX2lkGIgBIAEoAxIV",
            "CgxhbHRfb3JkZXJfaWQYiwEgASgJEhUKDGFsdF9jcm9zc19pZBiOASABKAkS",
            "FwoOYWx0X2xlZ19yZWZfaWQYkQEgASgJEhIKCWFsdF9hY2NudBiUASABKAkS",
            "FgoNYWx0X3VzZXJfbmFtZRiXASABKAkSGQoQc3JjX3JvdXRpbmdfY29kZRia",
            "ASABKAkSFgoNcmlza19ncm91cF9pZBidASABKAMSGQoQdHJpZ2dlcl9ncm91",
            "cF9pZBigASABKAMSGgoRdHJpZ2dlcl90aW1lc3RhbXAYowEgASgDEhkKEHN0",
            "cmVldF9jbF9vcmRfaWQYpgEgASgJEhgKD3N0cmVldF9vcmRlcl9pZBipASAB",
            "KAkSOgoMcGFyZW50X3NoYXBlGLIBIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3Bkck9yZGVyU2hhcGUSMAoHc2VjX2tleRi1ASABKAsyHi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk9wdGlvbktleRIzCghzZWNfdHlwZRi4ASABKA4yIC5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEi8KBnRpY2tlchi7ASAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIOCgVhY2NudBi+",
            "ASABKAkSFAoLY2xpZW50X2Zpcm0YwQEgASgJEjUKC3NwZHJfc291cmNlGMQB",
            "IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkclNvdXJjZRIWCg1ncm91",
            "cGluZ19jb2RlGMcBIAEoAxIZChBjb3JlX2NsaWVudF9maXJtGMgBIAEoCRIc",
            "ChNzcG9uc29yX2NsaWVudF9maXJtGMkBIAEoCRIVCgxyb3V0aW5nX2NvZGUY",
            "ygEgASgJEhQKC2VuZ2luZV9uYW1lGKkGIAEoCRIVCgxnYXRld2F5X25hbWUY",
            "0AEgASgJEjEKCWV4ZWNfcm9sZRjTASABKA4yHS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkV4ZWNSb2xlEhcKDmV4ZWNfYnJrcl9jb2RlGNYBIAEoCRIXCg5leGVj",
            "X2Jya3JfbVBJRBjZASABKAkSGAoPZXhlY19icmtyX2FjY250GNwBIAEoCRIa",
            "ChFleGVjX2Jya3JfY2xfZmlybRjfASABKAkSHAoTZXhlY19icmtyX3VzZXJf",
            "bmFtZRjiASABKAkSOgoSY2xlYXJpbmdfZmxpcF90eXBlGOUBIAEoDjIdLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRmxpcFR5cGUSGwoSY2xlYXJpbmdfZmxpcF9m",
            "aXJtGOgBIAEoCRIcChNjbGVhcmluZ19mbGlwX2FjY250GOsBIAEoCRIWCg1j",
            "bGVhcmluZ19maXJtGO4BIAEoCRIXCg5jbGVhcmluZ19hY2NudBjxASABKAkS",
            "FQoMb3JpZ19leGVjX2lEGPQBIAEoCRIVCgxsYXN0X2V4ZWNfaUQY9wEgASgJ",
            "EhQKC3JlbW90ZV90ZXh0GPoBIAEoCRIxCgpvcmRlcl9zaWRlGP0BIAEoDjIc",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBJAChFzcGRyX29yZGVyX3N0",
            "YXR1cxiAAiABKA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJPcmRlclN0",
            "YXR1cxJAChFzcGRyX2Nsb3NlX3JlYXNvbhiDAiABKA4yJC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJDbG9zZVJlYXNvbhIaChFjdW1fZmlsbF9xdWFudGl0",
            "eRiGAiABKAUSFwoOYXZnX2ZpbGxfcHJpY2UYiQIgASgBEh4KFWN1bV9sZWdf",
            "ZmlsbF9xdWFudGl0eRiMAiABKAUSGwoSYXZnX2xlZ19maWxsX3ByaWNlGI8C",
            "IAEoARITCgpsZWF2ZXNfcXR5GJICIAEoBRIzCgpwcmljZV90eXBlGJUCIAEo",
            "DjIeLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VUeXBlEjkKC2NoaWxkX3No",
            "YXBlGJgCIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck9yZGVyU2hh",
            "cGUSEwoKY2hpbGRfc2l6ZRibAiABKAUSFAoLY2hpbGRfcHJpY2UYngIgASgB",
            "Ei8KCmNoaWxkX2R0dG0YoQIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBITCgpjaGlsZF9leGNoGKQCIAEoCRIWCg1jaGlsZF9leF9kZXN0GKcC",
            "IAEoCRIaChFjaGlsZF9leGVjX2Jyb2tlchiqAiABKAkSNgoRY2hpbGRfaXNf",
            "ZGlyZWN0ZWQYrQIgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxI0",
            "Cg9jaGlsZF9pc29fc3dlZXAYsAIgASgOMhouc3BpZGVycm9jay5wcm90b2J1",
            "Zi5ZZXNObxIdChRjaGlsZF9vcmRlcl9oYW5kbGluZxizAiABKAkSPgoSY2hp",
            "bGRfYWxnb19oYW5kbGVyGLYCIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "Q2hpbGRIYW5kbGVyEkQKE2NoaWxkX2NyZWF0ZV9yZWFzb24YuQIgASgOMiYu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5DaGlsZENyZWF0ZVJlYXNvbhJEChNjaGls",
            "ZF9jYW5jZWxfcmVhc29uGLwCIAEoDjImLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "Q2hpbGRDYW5jZWxSZWFzb24SOwoRY2hpbGRfbWFrZXJfdGFrZXIYvwIgASgO",
            "Mh8uc3BpZGVycm9jay5wcm90b2J1Zi5NYWtlclRha2VyEhMKCmNoaWxkX3VC",
            "aWQYwgIgASgBEhMKCmNoaWxkX3VBc2sYxQIgASgBEhIKCWNoaWxkX2JpZBjI",
            "AiABKAESEgoJY2hpbGRfYXNrGMsCIAEoARITCgpjaGlsZF9tYXJrGM4CIAEo",
            "ARIZChBjaGlsZF9mYWlyX3dpZHRoGNECIAEoARISCgljaGlsZF92b2wY1AIg",
            "ASgCEhMKCmNoaWxkX3Byb2IY1wIgASgCEh0KFGNoaWxkX2xpbWl0X3JlZl91",
            "UHJjGNoCIAEoARIYCg9jaGlsZF9saW1pdF9wcmMY3QIgASgBEhYKDWNoaWxk",
            "X3ZvbF9hdG0Y4AIgASgCEjoKDmNoaWxkX3Bvc190eXBlGOMCIAEoDjIhLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuUG9zaXRpb25UeXBlEiAKF2NoaWxkX2Zpcm1f",
            "b3B0X3Bvc2l0aW9uGOYCIAEoBRI9ChBjaGlsZF9zU2FsZV9mbGFnGOkCIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU2hvcnRTYWxlRmxhZxIgChdjaGls",
            "ZF9maXJtX3N0a19wb3NpdGlvbhjsAiABKAUSHwoWY2hpbGRfZmlybV9vcGVu",
            "X29yZGVycxjvAiABKAUSGgoRY2hpbGRfbG9jYXRlX3F1YW4Y8gIgASgFEhoK",
            "EWNoaWxkX2xvY2F0ZV9maXJtGPUCIAEoCRIaChFjaGlsZF9sb2NhdGVfcG9v",
            "bBj4AiABKAkSOQoQY2hpbGRfbWt0X3N0YW5jZRj7AiABKA4yHi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk1rdFN0YW5jZRI4ChNjaGlsZF9jeGxfYXR0ZW1wdGVk",
            "GP4CIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SHwoWY2hpbGRf",
            "Y3hsX2ZpbGxfbGF0ZW5jeRiBAyABKAISFQoMY2hpbGRfbWV0aG9kGIQDIAEo",
            "CRIVCgxjaGlsZF9zb3VyY2UYhwMgASgJEjEKCWZpcm1fdHlwZRiKAyABKA4y",
            "HS5zcGlkZXJyb2NrLnByb3RvYnVmLkZpcm1UeXBlEhYKDXByaV9hZ2dfZ3Jv",
            "dXAYjQMgASgJEhYKDXNlY19hZ2dfZ3JvdXAYkAMgASgJEh0KFGRpcmVjdGVk",
            "X2NsaWVudF9maXJtGJMDIAEoCRIzCg5pc19jb21tX3BheWluZxiWAyABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjcKEmZpbGxfdHJhbnNhY3Rf",
            "ZHR0bRiZAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhAKB2Zp",
            "bGxfdHMYnAMgASgBEi4KCWZpbGxfZHR0bRifAyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhIKCWZpbGxfZXhjaBiiAyABKAkSFQoMZmlsbF9l",
            "eGVjX2lkGKUDIAEoCRIZChBmaWxsX2V4ZWNfcmVmX2lkGKgDIAEoCRIYCg9m",
            "aWxsX2xlZ19yZWZfaWQYqwMgASgDEhcKDmZpbGxfbGVnX3JhdGlvGK4DIAEo",
            "BRIWCg1maWxsX2V4Y2hfZmVlGLEDIAEoAhIUCgtmaWxsX21hcmtldBi0AyAB",
            "KAkSEwoKZmlsbF9wcmljZRi3AyABKAESFgoNZmlsbF9xdWFudGl0eRi6AyAB",
            "KAUSGwoSZmlsbF9yZXBvcnRfZGV0YWlsGL0DIAEoCRIRCghmaWxsX2JpZBjA",
            "AyABKAESEQoIZmlsbF9hc2sYwwMgASgBEhIKCWZpbGxfbWFyaxjGAyABKAES",
            "GAoPZmlsbF9mYWlyX3dpZHRoGMkDIAEoARITCgpmaWxsX3VNYXJrGMwDIAEo",
            "ARISCglmaWxsX3VCaWQYzwMgASgBEhIKCWZpbGxfdUFzaxjSAyABKAESFQoM",
            "ZmlsbF91QmlkX3N6GNUDIAEoBRIVCgxmaWxsX3VBc2tfc3oY2AMgASgFEhUK",
            "DGZpbGxfdm9sX2F0bRjbAyABKAISFQoMZmlsbF9tYXJrMV9tGN4DIAEoARIW",
            "Cg1maWxsX21hcmsxMF9tGOEDIAEoARIUCgtmaWxsX2JpZDFfbRjkAyABKAES",
            "FAoLZmlsbF9hc2sxX20Y5wMgASgBEhUKDGZpbGxfYmlkMTBfbRjqAyABKAES",
            "FQoMZmlsbF9hc2sxMF9tGO0DIAEoARIWCg1maWxsX3VNYXJrMV9tGPADIAEo",
            "ARIXCg5maWxsX3VNYXJrMTBfbRjzAyABKAESGAoPZmlsbF92b2xfYXRtMV9t",
            "GPYDIAEoAhIZChBmaWxsX3ZvbF9hdG0xMF9tGPkDIAEoAhI6Cg1maWxsX3N0",
            "YXRlMV9tGPwDIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuRmlsbE1hcmtT",
            "dGF0ZRI7Cg5maWxsX3N0YXRlMTBfbRj/AyABKA4yIi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkZpbGxNYXJrU3RhdGUSEQoIZmlsbF92b2wYggQgASgCEhMKCmZp",
            "bGxfdm9sX3MYhQQgASgCEhIKCWZpbGxfcHJvYhiIBCABKAISHAoTZmlsbF9s",
            "aW1pdF9yZWZfdVByYxiLBCABKAESHAoTZmlsbF9saW1pdF9yZWZfc0RpdhiO",
            "BCABKAESFwoOZmlsbF9saW1pdF9wcmMYkQQgASgBEhAKB2ZpbGxfdmUYlAQg",
            "ASgCEhAKB2ZpbGxfZ2EYlwQgASgCEhAKB2ZpbGxfZGUYmgQgASgCEhAKB2Zp",
            "bGxfdGgYnQQgASgCEhYKDWZpbGxfdmVfcmF0aW8YowQgASgCEhIKCWZpbGxf",
            "YmV0YRimBCABKAISEgoJcmlza192ZWdhGKoGIAEoAhIVCgxyaXNrX3d0X3Zl",
            "Z2EYqwYgASgCEhQKC3Jpc2tfblZhbHVlGKwGIAEoAhITCgpyaXNrX2RlbHRh",
            "GK0GIAEoAhIUCgtyaXNrX2REZWx0YRiuBiABKAISEQoIcmlza19ybTEYrwYg",
            "ASgCEhEKCHJpc2tfcm0yGLAGIAEoAhIRCghyaXNrX3JtMxixBiABKAISEQoI",
            "cmlza19ybTQYsgYgASgCEhEKCHJpc2tfcm01GLMGIAEoAhIRCghyaXNrX3Jt",
            "Nhi0BiABKAISEQoIcmlza19ybTcYtQYgASgCEhcKDm1hcmdpbl91RG5fdkRu",
            "GLYGIAEoAhIXCg5tYXJnaW5fdURuX3ZVcBi3BiABKAISFwoObWFyZ2luX3VV",
            "cF92RG4YuAYgASgCEhcKDm1hcmdpbl91VXBfdlVwGLkGIAEoAhIUCgtyaXNr",
            "X3UxNV9kbhi6BiABKAISFAoLcmlza191MTVfdXAYuwYgASgCEhQKC3Jpc2tf",
            "dTUwX2RuGLwGIAEoAhIUCgtyaXNrX3U1MF91cBi9BiABKAISFwoOZmlsbF9i",
            "cmtyX3JhdGUY3AQgASgCEhoKEWZpbGxfcm91dGluZ19yYXRlGN8EIAEoAhIx",
            "CglyaXNrX2NvZGUY4gQgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5SaXNr",
            "Q29kZRI+ChBiaWxsaW5nX3NlY190eXBlGOUEIAEoDjIjLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuQmlsbGluZ1NlY1R5cGUSPwoQYmlsbGluZ19jYXRlZ29yeRjo",
            "BCABKA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLkJpbGxpbmdDYXRlZ29yeRIb",
            "ChJzcGRyX2xpcXVpZGl0eV90YWcY6wQgASgJEhsKEmV4Y2hfbGlxdWlkaXR5",
            "X3RhZxjuBCABKAkSGQoQZmlsbF9leGNoX2RldGFpbBjxBCABKAkSOgoNbGFz",
            "dF9jYXBhY2l0eRj0BCABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLk9yZGVy",
            "Q2FwYWNpdHkSFwoOZXhjaF9maXJtX3R5cGUY9wQgASgJEhgKD2V4dF9leGVj",
            "X2Jyb2tlchj6BCABKAkSQQoRcmVsYXRpb25zaGlwX3R5cGUY/QQgASgOMiUu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5SZWxhdGlvbnNoaXBUeXBlEhcKDmNsX2Fy",
            "cml2ZV9tYXJrGIAFIAEoAhIwCgtwYXJlbnRfZHR0bRiDBSABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEhoKEXBhcmVudF9vcmRlcl9zaXplGIYF",
            "IAEoBRIUCgtwYXJlbnRfdUJpZBiJBSABKAESFAoLcGFyZW50X3VBc2sYjAUg",
            "ASgBEhUKDHBhcmVudF91TWFyaxiPBSABKAESEwoKcGFyZW50X2JpZBiSBSAB",
            "KAESEwoKcGFyZW50X2FzaxiVBSABKAESFAoLcGFyZW50X21hcmsYmAUgASgB",
            "EhoKEXBhcmVudF9mYWlyX3dpZHRoGJsFIAEoARIYCg9wYXJlbnRfc3VyZl92",
            "b2wYngUgASgBEhkKEHBhcmVudF9saW1pdF92b2wYoQUgASgCEhkKEHBhcmVu",
            "dF9saW1pdF9wcmMYpAUgASgBEh4KFXBhcmVudF9saW1pdF9yZWZfdVByYxin",
            "BSABKAESGAoPcGFyZW50X3RoZW9fdm9sGKoFIAEoAhIYCg9wYXJlbnRfdGhl",
            "b19wcmMYrQUgASgCEjsKD3BhcmVudF9wb3NfdHlwZRiwBSABKA4yIS5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uVHlwZRI+ChFwYXJlbnRfc1NhbGVf",
            "ZmxhZxizBSABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2FsZUZs",
            "YWcSFgoNbm90aWNlX251bWJlchi2BSABKAMSGwoSbnVtX21ha2VfZXhjaGFu",
            "Z2VzGLkFIAEoBRI9CgtwdWJsaWNfc2l6ZRi8BSABKA4yJy5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlB1YmxpY1NpemVIYW5kbGluZxI5ChRjYW5fb3ZlcmxhcF9j",
            "eGxfcmVwbBi/BSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjkK",
            "DXByb2dyZXNzX3J1bGUYwgUgASgOMiEuc3BpZGVycm9jay5wcm90b2J1Zi5Q",
            "cm9ncmVzc1J1bGUSNgoRZXhjaF9tYXNrX2VuYWJsZWQYxQUgASgOMhouc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5ZZXNObxI4Cg10aW1lX2luX2ZvcmNlGMgFIAEo",
            "DjIgLnNwaWRlcnJvY2sucHJvdG9idWYuVGltZUluRm9yY2USSAoVcGFyZW50",
            "X29yZGVyX2hhbmRsaW5nGMsFIAEoDjIoLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "UGFyZW50T3JkZXJIYW5kbGluZxJMChdwYXJlbnRfYmFsYW5jZV9oYW5kbGlu",
            "ZxjOBSABKA4yKi5zcGlkZXJyb2NrLnByb3RvYnVmLlBhcmVudEJhbGFuY2VI",
            "YW5kbGluZxI9ChBvcmRlcl9saW1pdF90eXBlGNEFIAEoDjIiLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3BkckxpbWl0VHlwZRI/ChFvcmRlcl9saW1pdF9jbGFz",
            "cxjUBSABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJMaW1pdENsYXNz",
            "EjgKD3Rha2VfcmVhY2hfcnVsZRjXBSABKA4yHi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlJlYWNoUnVsZRI5Cg1vdmVycmlkZV9jb2RlGNoFIAEoDjIhLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuT3ZlcnJpZGVDb2RlEjMKCmFscGhhX3R5cGUY3QUg",
            "ASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BbHBoYVR5cGUSGAoPcGFyZW50",
            "X3N0cmF0ZWd5GOAFIAEoCRISCgl1c2VyX25hbWUY4wUgASgJEjMKCmF1dG9f",
            "aGVkZ2UY5gUgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BdXRvSGVkZ2US",
            "NgoNaGVkZ2Vfc2VjX2tleRjpBSABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkV4cGlyeUtleRI5Cg5oZWRnZV9zZWNfdHlwZRjsBSABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEhkKEGhlZGdlX2JldGFfcmF0aW8Y",
            "7wUgASgCEjUKC2hlZGdlX3Njb3BlGPIFIAEoDjIfLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuSGVkZ2VTY29wZRITCgp1c2VyX2RhdGExGPUFIAEoCRITCgp1c2Vy",
            "X2RhdGEyGPgFIAEoCRIOCgV5ZWFycxj7BSABKAISGgoRdW5kZXJsaWVyc19w",
            "ZXJfY24Y/gUgASgFEjsKDnVuZGVybGllcl90eXBlGIEGIAEoDjIiLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuVW5kZXJsaWVyVHlwZRITCgp0aWNrX3ZhbHVlGIQG",
            "IAEoAhIUCgtwb2ludF92YWx1ZRiHBiABKAISNgoOcG9pbnRfY3VycmVuY3kY",
            "igYgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5DdXJyZW5jeRIUCgt1X3By",
            "Y19yYXRpbxiNBiABKAISFgoNbWluX3RpY2tfc2l6ZRiQBiABKAISNwoMcHJp",
            "Y2VfZm9ybWF0GJMGIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VG",
            "b3JtYXQSOQoOdV9wcmljZV9mb3JtYXQYlgYgASgOMiAuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5QcmljZUZvcm1hdBISCglsaXZlX3VQcmMYmQYgASgBEhIKCWxp",
            "dmVfbWFyaxicBiABKAESFgoNc3JjX3RpbWVzdGFtcBifBiABKAMSFgoNc2d3",
            "X3RpbWVzdGFtcBiiBiABKAMSFgoNZW5nX3RpbWVzdGFtcBilBiABKAMSLgoJ",
            "dGltZXN0YW1wGKgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "PgoPZGF0YV9jZW50ZXJfX3Y3GIgnIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU1JEYXRhQ2VudGVyX1Y3EjUKDWZhY2Vfc2lkZV9fdjcYiScgASgOMh0u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5GYWNlU2lkZRI3Cg5mYWNlX3NoYXBlX192",
            "NxiKJyABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkZhY2VTaGFwZRIgChdj",
            "aGlsZF9sb2NhdGVfc291cmNlX192NxiLJyABKAkSFAoLZmlsbF9wcl9fdjcY",
            "jCcgASgCEh4KFWZpbGxfcmlza19tZXRyaWMxX192NxiNJyABKAISHgoVZmls",
            "bF9yaXNrX21ldHJpYzJfX3Y3GI4nIAEoAhIeChVmaWxsX3Jpc2tfbWV0cmlj",
            "M19fdjcYjycgASgCEh4KFWZpbGxfcmlza19tZXRyaWM0X192NxiQJyABKAIS",
            "HgoVZmlsbF9yaXNrX21ldHJpYzVfX3Y3GJEnIAEoAhIeChVmaWxsX3Jpc2tf",
            "bWV0cmljNl9fdjcYkicgASgCEh4KFWZpbGxfcmlza19tZXRyaWM3X192NxiT",
            "JyABKAISGAoPZmlsbF9zMDhfZG5fX3Y3GJQnIAEoAhIYCg9maWxsX3MwNl91",
            "cF9fdjcYlScgASgCEhgKD2ZpbGxfczE1X2RuX192NxiWJyABKAISGAoPZmls",
            "bF9zMTVfdXBfX3Y3GJcnIAEoAhIYCg9maWxsX3M1MF9kbl9fdjcYmCcgASgC",
            "EhgKD2ZpbGxfczUwX3VwX192NxiZJyABKAIaGwoEUEtleRITCgtmaWxsX251",
            "bWJlchgKIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentExecution), global::Spiderrock.Protobuf.SpdrParentExecution.Parser, new[]{ "Meta", "Pkey", "SysRealm", "SysEnvironment", "RunStatus", "Version", "ExecStatus", "ExecShape", "PackageId", "ParentNumber", "ParentVersion", "BaseParentNumber", "ClOrdId", "ReviewClOrdId", "AltFillId", "AltOrderId", "AltCrossId", "AltLegRefId", "AltAccnt", "AltUserName", "SrcRoutingCode", "RiskGroupId", "TriggerGroupId", "TriggerTimestamp", "StreetClOrdId", "StreetOrderId", "ParentShape", "SecKey", "SecType", "Ticker", "Accnt", "ClientFirm", "SpdrSource", "GroupingCode", "CoreClientFirm", "SponsorClientFirm", "RoutingCode", "EngineName", "GatewayName", "ExecRole", "ExecBrkrCode", "ExecBrkrMPID", "ExecBrkrAccnt", "ExecBrkrClFirm", "ExecBrkrUserName", "ClearingFlipType", "ClearingFlipFirm", "ClearingFlipAccnt", "ClearingFirm", "ClearingAccnt", "OrigExecID", "LastExecID", "RemoteText", "OrderSide", "SpdrOrderStatus", "SpdrCloseReason", "CumFillQuantity", "AvgFillPrice", "CumLegFillQuantity", "AvgLegFillPrice", "LeavesQty", "PriceType", "ChildShape", "ChildSize", "ChildPrice", "ChildDttm", "ChildExch", "ChildExDest", "ChildExecBroker", "ChildIsDirected", "ChildIsoSweep", "ChildOrderHandling", "ChildAlgoHandler", "ChildCreateReason", "ChildCancelReason", "ChildMakerTaker", "ChildUBid", "ChildUAsk", "ChildBid", "ChildAsk", "ChildMark", "ChildFairWidth", "ChildVol", "ChildProb", "ChildLimitRefUPrc", "ChildLimitPrc", "ChildVolAtm", "ChildPosType", "ChildFirmOptPosition", "ChildSSaleFlag", "ChildFirmStkPosition", "ChildFirmOpenOrders", "ChildLocateQuan", "ChildLocateFirm", "ChildLocatePool", "ChildMktStance", "ChildCxlAttempted", "ChildCxlFillLatency", "ChildMethod", "ChildSource", "FirmType", "PriAggGroup", "SecAggGroup", "DirectedClientFirm", "IsCommPaying", "FillTransactDttm", "FillTs", "FillDttm", "FillExch", "FillExecId", "FillExecRefId", "FillLegRefId", "FillLegRatio", "FillExchFee", "FillMarket", "FillPrice", "FillQuantity", "FillReportDetail", "FillBid", "FillAsk", "FillMark", "FillFairWidth", "FillUMark", "FillUBid", "FillUAsk", "FillUBidSz", "FillUAskSz", "FillVolAtm", "FillMark1M", "FillMark10M", "FillBid1M", "FillAsk1M", "FillBid10M", "FillAsk10M", "FillUMark1M", "FillUMark10M", "FillVolAtm1M", "FillVolAtm10M", "FillState1M", "FillState10M", "FillVol", "FillVolS", "FillProb", "FillLimitRefUPrc", "FillLimitRefSDiv", "FillLimitPrc", "FillVe", "FillGa", "FillDe", "FillTh", "FillVeRatio", "FillBeta", "RiskVega", "RiskWtVega", "RiskNValue", "RiskDelta", "RiskDDelta", "RiskRm1", "RiskRm2", "RiskRm3", "RiskRm4", "RiskRm5", "RiskRm6", "RiskRm7", "MarginUDnVDn", "MarginUDnVUp", "MarginUUpVDn", "MarginUUpVUp", "RiskU15Dn", "RiskU15Up", "RiskU50Dn", "RiskU50Up", "FillBrkrRate", "FillRoutingRate", "RiskCode", "BillingSecType", "BillingCategory", "SpdrLiquidityTag", "ExchLiquidityTag", "FillExchDetail", "LastCapacity", "ExchFirmType", "ExtExecBroker", "RelationshipType", "ClArriveMark", "ParentDttm", "ParentOrderSize", "ParentUBid", "ParentUAsk", "ParentUMark", "ParentBid", "ParentAsk", "ParentMark", "ParentFairWidth", "ParentSurfVol", "ParentLimitVol", "ParentLimitPrc", "ParentLimitRefUPrc", "ParentTheoVol", "ParentTheoPrc", "ParentPosType", "ParentSSaleFlag", "NoticeNumber", "NumMakeExchanges", "PublicSize", "CanOverlapCxlRepl", "ProgressRule", "ExchMaskEnabled", "TimeInForce", "ParentOrderHandling", "ParentBalanceHandling", "OrderLimitType", "OrderLimitClass", "TakeReachRule", "OverrideCode", "AlphaType", "ParentStrategy", "UserName", "AutoHedge", "HedgeSecKey", "HedgeSecType", "HedgeBetaRatio", "HedgeScope", "UserData1", "UserData2", "Years", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "UPrcRatio", "MinTickSize", "PriceFormat", "UPriceFormat", "LiveUPrc", "LiveMark", "SrcTimestamp", "SgwTimestamp", "EngTimestamp", "Timestamp", "DataCenterV7", "FaceSideV7", "FaceShapeV7", "ChildLocateSourceV7", "FillPrV7", "FillRiskMetric1V7", "FillRiskMetric2V7", "FillRiskMetric3V7", "FillRiskMetric4V7", "FillRiskMetric5V7", "FillRiskMetric6V7", "FillRiskMetric7V7", "FillS08DnV7", "FillS06UpV7", "FillS15DnV7", "FillS15UpV7", "FillS50DnV7", "FillS50UpV7" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey), global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey.Parser, new[]{ "FillNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpdrParentExecution : pb::IMessage<SpdrParentExecution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrParentExecution> _parser = new pb::MessageParser<SpdrParentExecution>(() => new SpdrParentExecution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrParentExecution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrParentExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentExecution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentExecution(SpdrParentExecution other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      sysRealm_ = other.sysRealm_;
      sysEnvironment_ = other.sysEnvironment_;
      runStatus_ = other.runStatus_;
      version_ = other.version_;
      execStatus_ = other.execStatus_;
      execShape_ = other.execShape_;
      packageId_ = other.packageId_;
      parentNumber_ = other.parentNumber_;
      parentVersion_ = other.parentVersion_;
      baseParentNumber_ = other.baseParentNumber_;
      clOrdId_ = other.clOrdId_;
      reviewClOrdId_ = other.reviewClOrdId_;
      altFillId_ = other.altFillId_;
      altOrderId_ = other.altOrderId_;
      altCrossId_ = other.altCrossId_;
      altLegRefId_ = other.altLegRefId_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      srcRoutingCode_ = other.srcRoutingCode_;
      riskGroupId_ = other.riskGroupId_;
      triggerGroupId_ = other.triggerGroupId_;
      triggerTimestamp_ = other.triggerTimestamp_;
      streetClOrdId_ = other.streetClOrdId_;
      streetOrderId_ = other.streetOrderId_;
      parentShape_ = other.parentShape_;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      accnt_ = other.accnt_;
      clientFirm_ = other.clientFirm_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      coreClientFirm_ = other.coreClientFirm_;
      sponsorClientFirm_ = other.sponsorClientFirm_;
      routingCode_ = other.routingCode_;
      engineName_ = other.engineName_;
      gatewayName_ = other.gatewayName_;
      execRole_ = other.execRole_;
      execBrkrCode_ = other.execBrkrCode_;
      execBrkrMPID_ = other.execBrkrMPID_;
      execBrkrAccnt_ = other.execBrkrAccnt_;
      execBrkrClFirm_ = other.execBrkrClFirm_;
      execBrkrUserName_ = other.execBrkrUserName_;
      clearingFlipType_ = other.clearingFlipType_;
      clearingFlipFirm_ = other.clearingFlipFirm_;
      clearingFlipAccnt_ = other.clearingFlipAccnt_;
      clearingFirm_ = other.clearingFirm_;
      clearingAccnt_ = other.clearingAccnt_;
      origExecID_ = other.origExecID_;
      lastExecID_ = other.lastExecID_;
      remoteText_ = other.remoteText_;
      orderSide_ = other.orderSide_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      cumFillQuantity_ = other.cumFillQuantity_;
      avgFillPrice_ = other.avgFillPrice_;
      cumLegFillQuantity_ = other.cumLegFillQuantity_;
      avgLegFillPrice_ = other.avgLegFillPrice_;
      leavesQty_ = other.leavesQty_;
      priceType_ = other.priceType_;
      childShape_ = other.childShape_;
      childSize_ = other.childSize_;
      childPrice_ = other.childPrice_;
      childDttm_ = other.childDttm_ != null ? other.childDttm_.Clone() : null;
      childExch_ = other.childExch_;
      childExDest_ = other.childExDest_;
      childExecBroker_ = other.childExecBroker_;
      childIsDirected_ = other.childIsDirected_;
      childIsoSweep_ = other.childIsoSweep_;
      childOrderHandling_ = other.childOrderHandling_;
      childAlgoHandler_ = other.childAlgoHandler_;
      childCreateReason_ = other.childCreateReason_;
      childCancelReason_ = other.childCancelReason_;
      childMakerTaker_ = other.childMakerTaker_;
      childUBid_ = other.childUBid_;
      childUAsk_ = other.childUAsk_;
      childBid_ = other.childBid_;
      childAsk_ = other.childAsk_;
      childMark_ = other.childMark_;
      childFairWidth_ = other.childFairWidth_;
      childVol_ = other.childVol_;
      childProb_ = other.childProb_;
      childLimitRefUPrc_ = other.childLimitRefUPrc_;
      childLimitPrc_ = other.childLimitPrc_;
      childVolAtm_ = other.childVolAtm_;
      childPosType_ = other.childPosType_;
      childFirmOptPosition_ = other.childFirmOptPosition_;
      childSSaleFlag_ = other.childSSaleFlag_;
      childFirmStkPosition_ = other.childFirmStkPosition_;
      childFirmOpenOrders_ = other.childFirmOpenOrders_;
      childLocateQuan_ = other.childLocateQuan_;
      childLocateFirm_ = other.childLocateFirm_;
      childLocatePool_ = other.childLocatePool_;
      childMktStance_ = other.childMktStance_;
      childCxlAttempted_ = other.childCxlAttempted_;
      childCxlFillLatency_ = other.childCxlFillLatency_;
      childMethod_ = other.childMethod_;
      childSource_ = other.childSource_;
      firmType_ = other.firmType_;
      priAggGroup_ = other.priAggGroup_;
      secAggGroup_ = other.secAggGroup_;
      directedClientFirm_ = other.directedClientFirm_;
      isCommPaying_ = other.isCommPaying_;
      fillTransactDttm_ = other.fillTransactDttm_ != null ? other.fillTransactDttm_.Clone() : null;
      fillTs_ = other.fillTs_;
      fillDttm_ = other.fillDttm_ != null ? other.fillDttm_.Clone() : null;
      fillExch_ = other.fillExch_;
      fillExecId_ = other.fillExecId_;
      fillExecRefId_ = other.fillExecRefId_;
      fillLegRefId_ = other.fillLegRefId_;
      fillLegRatio_ = other.fillLegRatio_;
      fillExchFee_ = other.fillExchFee_;
      fillMarket_ = other.fillMarket_;
      fillPrice_ = other.fillPrice_;
      fillQuantity_ = other.fillQuantity_;
      fillReportDetail_ = other.fillReportDetail_;
      fillBid_ = other.fillBid_;
      fillAsk_ = other.fillAsk_;
      fillMark_ = other.fillMark_;
      fillFairWidth_ = other.fillFairWidth_;
      fillUMark_ = other.fillUMark_;
      fillUBid_ = other.fillUBid_;
      fillUAsk_ = other.fillUAsk_;
      fillUBidSz_ = other.fillUBidSz_;
      fillUAskSz_ = other.fillUAskSz_;
      fillVolAtm_ = other.fillVolAtm_;
      fillMark1M_ = other.fillMark1M_;
      fillMark10M_ = other.fillMark10M_;
      fillBid1M_ = other.fillBid1M_;
      fillAsk1M_ = other.fillAsk1M_;
      fillBid10M_ = other.fillBid10M_;
      fillAsk10M_ = other.fillAsk10M_;
      fillUMark1M_ = other.fillUMark1M_;
      fillUMark10M_ = other.fillUMark10M_;
      fillVolAtm1M_ = other.fillVolAtm1M_;
      fillVolAtm10M_ = other.fillVolAtm10M_;
      fillState1M_ = other.fillState1M_;
      fillState10M_ = other.fillState10M_;
      fillVol_ = other.fillVol_;
      fillVolS_ = other.fillVolS_;
      fillProb_ = other.fillProb_;
      fillLimitRefUPrc_ = other.fillLimitRefUPrc_;
      fillLimitRefSDiv_ = other.fillLimitRefSDiv_;
      fillLimitPrc_ = other.fillLimitPrc_;
      fillVe_ = other.fillVe_;
      fillGa_ = other.fillGa_;
      fillDe_ = other.fillDe_;
      fillTh_ = other.fillTh_;
      fillVeRatio_ = other.fillVeRatio_;
      fillBeta_ = other.fillBeta_;
      riskVega_ = other.riskVega_;
      riskWtVega_ = other.riskWtVega_;
      riskNValue_ = other.riskNValue_;
      riskDelta_ = other.riskDelta_;
      riskDDelta_ = other.riskDDelta_;
      riskRm1_ = other.riskRm1_;
      riskRm2_ = other.riskRm2_;
      riskRm3_ = other.riskRm3_;
      riskRm4_ = other.riskRm4_;
      riskRm5_ = other.riskRm5_;
      riskRm6_ = other.riskRm6_;
      riskRm7_ = other.riskRm7_;
      marginUDnVDn_ = other.marginUDnVDn_;
      marginUDnVUp_ = other.marginUDnVUp_;
      marginUUpVDn_ = other.marginUUpVDn_;
      marginUUpVUp_ = other.marginUUpVUp_;
      riskU15Dn_ = other.riskU15Dn_;
      riskU15Up_ = other.riskU15Up_;
      riskU50Dn_ = other.riskU50Dn_;
      riskU50Up_ = other.riskU50Up_;
      fillBrkrRate_ = other.fillBrkrRate_;
      fillRoutingRate_ = other.fillRoutingRate_;
      riskCode_ = other.riskCode_;
      billingSecType_ = other.billingSecType_;
      billingCategory_ = other.billingCategory_;
      spdrLiquidityTag_ = other.spdrLiquidityTag_;
      exchLiquidityTag_ = other.exchLiquidityTag_;
      fillExchDetail_ = other.fillExchDetail_;
      lastCapacity_ = other.lastCapacity_;
      exchFirmType_ = other.exchFirmType_;
      extExecBroker_ = other.extExecBroker_;
      relationshipType_ = other.relationshipType_;
      clArriveMark_ = other.clArriveMark_;
      parentDttm_ = other.parentDttm_ != null ? other.parentDttm_.Clone() : null;
      parentOrderSize_ = other.parentOrderSize_;
      parentUBid_ = other.parentUBid_;
      parentUAsk_ = other.parentUAsk_;
      parentUMark_ = other.parentUMark_;
      parentBid_ = other.parentBid_;
      parentAsk_ = other.parentAsk_;
      parentMark_ = other.parentMark_;
      parentFairWidth_ = other.parentFairWidth_;
      parentSurfVol_ = other.parentSurfVol_;
      parentLimitVol_ = other.parentLimitVol_;
      parentLimitPrc_ = other.parentLimitPrc_;
      parentLimitRefUPrc_ = other.parentLimitRefUPrc_;
      parentTheoVol_ = other.parentTheoVol_;
      parentTheoPrc_ = other.parentTheoPrc_;
      parentPosType_ = other.parentPosType_;
      parentSSaleFlag_ = other.parentSSaleFlag_;
      noticeNumber_ = other.noticeNumber_;
      numMakeExchanges_ = other.numMakeExchanges_;
      publicSize_ = other.publicSize_;
      canOverlapCxlRepl_ = other.canOverlapCxlRepl_;
      progressRule_ = other.progressRule_;
      exchMaskEnabled_ = other.exchMaskEnabled_;
      timeInForce_ = other.timeInForce_;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      orderLimitType_ = other.orderLimitType_;
      orderLimitClass_ = other.orderLimitClass_;
      takeReachRule_ = other.takeReachRule_;
      overrideCode_ = other.overrideCode_;
      alphaType_ = other.alphaType_;
      parentStrategy_ = other.parentStrategy_;
      userName_ = other.userName_;
      autoHedge_ = other.autoHedge_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeSecType_ = other.hedgeSecType_;
      hedgeBetaRatio_ = other.hedgeBetaRatio_;
      hedgeScope_ = other.hedgeScope_;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      years_ = other.years_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      uPrcRatio_ = other.uPrcRatio_;
      minTickSize_ = other.minTickSize_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      liveUPrc_ = other.liveUPrc_;
      liveMark_ = other.liveMark_;
      srcTimestamp_ = other.srcTimestamp_;
      sgwTimestamp_ = other.sgwTimestamp_;
      engTimestamp_ = other.engTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      dataCenterV7_ = other.dataCenterV7_;
      faceSideV7_ = other.faceSideV7_;
      faceShapeV7_ = other.faceShapeV7_;
      childLocateSourceV7_ = other.childLocateSourceV7_;
      fillPrV7_ = other.fillPrV7_;
      fillRiskMetric1V7_ = other.fillRiskMetric1V7_;
      fillRiskMetric2V7_ = other.fillRiskMetric2V7_;
      fillRiskMetric3V7_ = other.fillRiskMetric3V7_;
      fillRiskMetric4V7_ = other.fillRiskMetric4V7_;
      fillRiskMetric5V7_ = other.fillRiskMetric5V7_;
      fillRiskMetric6V7_ = other.fillRiskMetric6V7_;
      fillRiskMetric7V7_ = other.fillRiskMetric7V7_;
      fillS08DnV7_ = other.fillS08DnV7_;
      fillS06UpV7_ = other.fillS06UpV7_;
      fillS15DnV7_ = other.fillS15DnV7_;
      fillS15UpV7_ = other.fillS15UpV7_;
      fillS50DnV7_ = other.fillS50DnV7_;
      fillS50UpV7_ = other.fillS50UpV7_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentExecution Clone() {
      return new SpdrParentExecution(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sys_realm" field.</summary>
    public const int SysRealmFieldNumber = 100;
    private global::Spiderrock.Protobuf.SysRealm sysRealm_ = global::Spiderrock.Protobuf.SysRealm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysRealm SysRealm {
      get { return sysRealm_; }
      set {
        sysRealm_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 103;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "run_status" field.</summary>
    public const int RunStatusFieldNumber = 106;
    private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RunStatus RunStatus {
      get { return runStatus_; }
      set {
        runStatus_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 109;
    private int version_;
    /// <summary>
    /// record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "exec_status" field.</summary>
    public const int ExecStatusFieldNumber = 112;
    private global::Spiderrock.Protobuf.ExecStatus execStatus_ = global::Spiderrock.Protobuf.ExecStatus.Unspecified;
    /// <summary>
    /// SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecStatus ExecStatus {
      get { return execStatus_; }
      set {
        execStatus_ = value;
      }
    }

    /// <summary>Field number for the "exec_shape" field.</summary>
    public const int ExecShapeFieldNumber = 115;
    private global::Spiderrock.Protobuf.ExecShape execShape_ = global::Spiderrock.Protobuf.ExecShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecShape ExecShape {
      get { return execShape_; }
      set {
        execShape_ = value;
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 118;
    private long packageId_;
    /// <summary>
    /// SR package Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 121;
    private long parentNumber_;
    /// <summary>
    /// SR parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "parent_version" field.</summary>
    public const int ParentVersionFieldNumber = 124;
    private int parentVersion_;
    /// <summary>
    /// SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentVersion {
      get { return parentVersion_; }
      set {
        parentVersion_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 127;
    private long baseParentNumber_;
    /// <summary>
    /// SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "cl_ord_id" field.</summary>
    public const int ClOrdIdFieldNumber = 130;
    private long clOrdId_;
    /// <summary>
    /// SR child order clOrdID resulting in fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = value;
      }
    }

    /// <summary>Field number for the "review_cl_ord_id" field.</summary>
    public const int ReviewClOrdIdFieldNumber = 133;
    private string reviewClOrdId_ = "";
    /// <summary>
    /// review session clOrdId (usually from inbound review FIX session)S
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReviewClOrdId {
      get { return reviewClOrdId_; }
      set {
        reviewClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_fill_id" field.</summary>
    public const int AltFillIdFieldNumber = 136;
    private long altFillId_;
    /// <summary>
    /// alternate fill ID (usually from AwayTktGateway.pkey.clientFillID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AltFillId {
      get { return altFillId_; }
      set {
        altFillId_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 139;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_cross_id" field.</summary>
    public const int AltCrossIdFieldNumber = 142;
    private string altCrossId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltCrossId {
      get { return altCrossId_; }
      set {
        altCrossId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_leg_ref_id" field.</summary>
    public const int AltLegRefIdFieldNumber = 145;
    private string altLegRefId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltLegRefId {
      get { return altLegRefId_; }
      set {
        altLegRefId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 148;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 151;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_routing_code" field.</summary>
    public const int SrcRoutingCodeFieldNumber = 154;
    private string srcRoutingCode_ = "";
    /// <summary>
    /// inbound FIX routing code, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcRoutingCode {
      get { return srcRoutingCode_; }
      set {
        srcRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 157;
    private long riskGroupId_;
    /// <summary>
    /// riskGroupId (parent order group ID) for this execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_group_id" field.</summary>
    public const int TriggerGroupIdFieldNumber = 160;
    private long triggerGroupId_;
    /// <summary>
    /// WaitTrigger group Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerGroupId {
      get { return triggerGroupId_; }
      set {
        triggerGroupId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_timestamp" field.</summary>
    public const int TriggerTimestampFieldNumber = 163;
    private long triggerTimestamp_;
    /// <summary>
    /// WaitTrigger trigger timestamp (nanoseconds since epoch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerTimestamp {
      get { return triggerTimestamp_; }
      set {
        triggerTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "street_cl_ord_id" field.</summary>
    public const int StreetClOrdIdFieldNumber = 166;
    private string streetClOrdId_ = "";
    /// <summary>
    /// street side clOrdId (clOrdId or equivalent of the street side order) [SR/street gateway generated]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetClOrdId {
      get { return streetClOrdId_; }
      set {
        streetClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "street_order_id" field.</summary>
    public const int StreetOrderIdFieldNumber = 169;
    private string streetOrderId_ = "";
    /// <summary>
    /// street side orderId (orderId or equivalent of the street side order) [from street side execReport]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StreetOrderId {
      get { return streetOrderId_; }
      set {
        streetOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_shape" field.</summary>
    public const int ParentShapeFieldNumber = 178;
    private global::Spiderrock.Protobuf.SpdrOrderShape parentShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    /// <summary>
    /// shape of originating parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ParentShape {
      get { return parentShape_; }
      set {
        parentShape_ = value;
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 181;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    /// <summary>
    /// execution security key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 184;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// execution security type [Stock, Future, Option]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 187;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// base stock key (used for symbol risk aggregation)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 190;
    private string accnt_ = "";
    /// <summary>
    /// SpiderRock trading accnt [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 193;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 196;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    /// <summary>
    /// SpiderRock parent order source code [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 199;
    private long groupingCode_;
    /// <summary>
    /// SpiderRock parent broker number [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "core_client_firm" field.</summary>
    public const int CoreClientFirmFieldNumber = 200;
    private string coreClientFirm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CoreClientFirm {
      get { return coreClientFirm_; }
      set {
        coreClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sponsor_client_firm" field.</summary>
    public const int SponsorClientFirmFieldNumber = 201;
    private string sponsorClientFirm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SponsorClientFirm {
      get { return sponsorClientFirm_; }
      set {
        sponsorClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routing_code" field.</summary>
    public const int RoutingCodeFieldNumber = 202;
    private string routingCode_ = "";
    /// <summary>
    /// SpiderRock market routing code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoutingCode {
      get { return routingCode_; }
      set {
        routingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 809;
    private string engineName_ = "";
    /// <summary>
    /// SpiderRock execution engine that handled the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_name" field.</summary>
    public const int GatewayNameFieldNumber = 208;
    private string gatewayName_ = "";
    /// <summary>
    /// StreetGateway server than handled the child order (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_role" field.</summary>
    public const int ExecRoleFieldNumber = 211;
    private global::Spiderrock.Protobuf.ExecRole execRole_ = global::Spiderrock.Protobuf.ExecRole.Unspecified;
    /// <summary>
    /// SpiderRock relationship to this execution record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecRole ExecRole {
      get { return execRole_; }
      set {
        execRole_ = value;
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 214;
    private string execBrkrCode_ = "";
    /// <summary>
    /// SR Assigned executing broker code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_mPID" field.</summary>
    public const int ExecBrkrMPIDFieldNumber = 217;
    private string execBrkrMPID_ = "";
    /// <summary>
    /// FINRA/Assigned exec broker MPID (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrMPID {
      get { return execBrkrMPID_; }
      set {
        execBrkrMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_accnt" field.</summary>
    public const int ExecBrkrAccntFieldNumber = 220;
    private string execBrkrAccnt_ = "";
    /// <summary>
    /// account at executing broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrAccnt {
      get { return execBrkrAccnt_; }
      set {
        execBrkrAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_cl_firm" field.</summary>
    public const int ExecBrkrClFirmFieldNumber = 223;
    private string execBrkrClFirm_ = "";
    /// <summary>
    /// client/firm at executing broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrClFirm {
      get { return execBrkrClFirm_; }
      set {
        execBrkrClFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_user_name" field.</summary>
    public const int ExecBrkrUserNameFieldNumber = 226;
    private string execBrkrUserName_ = "";
    /// <summary>
    /// userName at execution broker (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrUserName {
      get { return execBrkrUserName_; }
      set {
        execBrkrUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_type" field.</summary>
    public const int ClearingFlipTypeFieldNumber = 229;
    private global::Spiderrock.Protobuf.FlipType clearingFlipType_ = global::Spiderrock.Protobuf.FlipType.Unspecified;
    /// <summary>
    /// Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FlipType ClearingFlipType {
      get { return clearingFlipType_; }
      set {
        clearingFlipType_ = value;
      }
    }

    /// <summary>Field number for the "clearing_flip_firm" field.</summary>
    public const int ClearingFlipFirmFieldNumber = 232;
    private string clearingFlipFirm_ = "";
    /// <summary>
    /// Clearing Flip Firm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipFirm {
      get { return clearingFlipFirm_; }
      set {
        clearingFlipFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_accnt" field.</summary>
    public const int ClearingFlipAccntFieldNumber = 235;
    private string clearingFlipAccnt_ = "";
    /// <summary>
    /// Clearing Flip Account (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipAccnt {
      get { return clearingFlipAccnt_; }
      set {
        clearingFlipAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_firm" field.</summary>
    public const int ClearingFirmFieldNumber = 238;
    private string clearingFirm_ = "";
    /// <summary>
    /// clearing firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFirm {
      get { return clearingFirm_; }
      set {
        clearingFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_accnt" field.</summary>
    public const int ClearingAccntFieldNumber = 241;
    private string clearingAccnt_ = "";
    /// <summary>
    /// clearing firm account (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingAccnt {
      get { return clearingAccnt_; }
      set {
        clearingAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orig_exec_iD" field.</summary>
    public const int OrigExecIDFieldNumber = 244;
    private string origExecID_ = "";
    /// <summary>
    /// original execution ID string (child order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigExecID {
      get { return origExecID_; }
      set {
        origExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_exec_iD" field.</summary>
    public const int LastExecIDFieldNumber = 247;
    private string lastExecID_ = "";
    /// <summary>
    /// most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastExecID {
      get { return lastExecID_; }
      set {
        lastExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remote_text" field.</summary>
    public const int RemoteTextFieldNumber = 250;
    private string remoteText_ = "";
    /// <summary>
    /// text comment from remote endpoint (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RemoteText {
      get { return remoteText_; }
      set {
        remoteText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_side" field.</summary>
    public const int OrderSideFieldNumber = 253;
    private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// order side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell OrderSide {
      get { return orderSide_; }
      set {
        orderSide_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 256;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 259;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quantity" field.</summary>
    public const int CumFillQuantityFieldNumber = 262;
    private int cumFillQuantity_;
    /// <summary>
    /// cumulative fills (this parent number only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuantity {
      get { return cumFillQuantity_; }
      set {
        cumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price" field.</summary>
    public const int AvgFillPriceFieldNumber = 265;
    private double avgFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_leg_fill_quantity" field.</summary>
    public const int CumLegFillQuantityFieldNumber = 268;
    private int cumLegFillQuantity_;
    /// <summary>
    /// cumulative fills (spread only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumLegFillQuantity {
      get { return cumLegFillQuantity_; }
      set {
        cumLegFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_leg_fill_price" field.</summary>
    public const int AvgLegFillPriceFieldNumber = 271;
    private double avgLegFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgLegFillPrice {
      get { return avgLegFillPrice_; }
      set {
        avgLegFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "leaves_qty" field.</summary>
    public const int LeavesQtyFieldNumber = 274;
    private int leavesQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeavesQty {
      get { return leavesQty_; }
      set {
        leavesQty_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 277;
    private global::Spiderrock.Protobuf.PriceType priceType_ = global::Spiderrock.Protobuf.PriceType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "child_shape" field.</summary>
    public const int ChildShapeFieldNumber = 280;
    private global::Spiderrock.Protobuf.SpdrOrderShape childShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ChildShape {
      get { return childShape_; }
      set {
        childShape_ = value;
      }
    }

    /// <summary>Field number for the "child_size" field.</summary>
    public const int ChildSizeFieldNumber = 283;
    private int childSize_;
    /// <summary>
    /// child order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildSize {
      get { return childSize_; }
      set {
        childSize_ = value;
      }
    }

    /// <summary>Field number for the "child_price" field.</summary>
    public const int ChildPriceFieldNumber = 286;
    private double childPrice_;
    /// <summary>
    /// child order price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildPrice {
      get { return childPrice_; }
      set {
        childPrice_ = value;
      }
    }

    /// <summary>Field number for the "child_dttm" field.</summary>
    public const int ChildDttmFieldNumber = 289;
    private global::Google.Protobuf.WellKnownTypes.Timestamp childDttm_;
    /// <summary>
    /// child order generation date/time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ChildDttm {
      get { return childDttm_; }
      set {
        childDttm_ = value;
      }
    }

    /// <summary>Field number for the "child_exch" field.</summary>
    public const int ChildExchFieldNumber = 292;
    private string childExch_ = "";
    /// <summary>
    /// child order exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExch {
      get { return childExch_; }
      set {
        childExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_ex_dest" field.</summary>
    public const int ChildExDestFieldNumber = 295;
    private string childExDest_ = "";
    /// <summary>
    /// child order exchange destination code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExDest {
      get { return childExDest_; }
      set {
        childExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_exec_broker" field.</summary>
    public const int ChildExecBrokerFieldNumber = 298;
    private string childExecBroker_ = "";
    /// <summary>
    /// executing broker that child order was routed to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExecBroker {
      get { return childExecBroker_; }
      set {
        childExecBroker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_is_directed" field.</summary>
    public const int ChildIsDirectedFieldNumber = 301;
    private global::Spiderrock.Protobuf.YesNo childIsDirected_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// child order isDirected flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ChildIsDirected {
      get { return childIsDirected_; }
      set {
        childIsDirected_ = value;
      }
    }

    /// <summary>Field number for the "child_iso_sweep" field.</summary>
    public const int ChildIsoSweepFieldNumber = 304;
    private global::Spiderrock.Protobuf.YesNo childIsoSweep_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// child order ISO sweep flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ChildIsoSweep {
      get { return childIsoSweep_; }
      set {
        childIsoSweep_ = value;
      }
    }

    /// <summary>Field number for the "child_order_handling" field.</summary>
    public const int ChildOrderHandlingFieldNumber = 307;
    private string childOrderHandling_ = "";
    /// <summary>
    /// child order handling string from the algo that generated the child order responsible for this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildOrderHandling {
      get { return childOrderHandling_; }
      set {
        childOrderHandling_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_algo_handler" field.</summary>
    public const int ChildAlgoHandlerFieldNumber = 310;
    private global::Spiderrock.Protobuf.ChildHandler childAlgoHandler_ = global::Spiderrock.Protobuf.ChildHandler.Unspecified;
    /// <summary>
    /// algo handler for this child order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildHandler ChildAlgoHandler {
      get { return childAlgoHandler_; }
      set {
        childAlgoHandler_ = value;
      }
    }

    /// <summary>Field number for the "child_create_reason" field.</summary>
    public const int ChildCreateReasonFieldNumber = 313;
    private global::Spiderrock.Protobuf.ChildCreateReason childCreateReason_ = global::Spiderrock.Protobuf.ChildCreateReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCreateReason ChildCreateReason {
      get { return childCreateReason_; }
      set {
        childCreateReason_ = value;
      }
    }

    /// <summary>Field number for the "child_cancel_reason" field.</summary>
    public const int ChildCancelReasonFieldNumber = 316;
    private global::Spiderrock.Protobuf.ChildCancelReason childCancelReason_ = global::Spiderrock.Protobuf.ChildCancelReason.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCancelReason ChildCancelReason {
      get { return childCancelReason_; }
      set {
        childCancelReason_ = value;
      }
    }

    /// <summary>Field number for the "child_maker_taker" field.</summary>
    public const int ChildMakerTakerFieldNumber = 319;
    private global::Spiderrock.Protobuf.MakerTaker childMakerTaker_ = global::Spiderrock.Protobuf.MakerTaker.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MakerTaker ChildMakerTaker {
      get { return childMakerTaker_; }
      set {
        childMakerTaker_ = value;
      }
    }

    /// <summary>Field number for the "child_uBid" field.</summary>
    public const int ChildUBidFieldNumber = 322;
    private double childUBid_;
    /// <summary>
    /// underlier market bid at @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildUBid {
      get { return childUBid_; }
      set {
        childUBid_ = value;
      }
    }

    /// <summary>Field number for the "child_uAsk" field.</summary>
    public const int ChildUAskFieldNumber = 325;
    private double childUAsk_;
    /// <summary>
    /// underlier market ask at @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildUAsk {
      get { return childUAsk_; }
      set {
        childUAsk_ = value;
      }
    }

    /// <summary>Field number for the "child_bid" field.</summary>
    public const int ChildBidFieldNumber = 328;
    private double childBid_;
    /// <summary>
    /// market bid at the @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildBid {
      get { return childBid_; }
      set {
        childBid_ = value;
      }
    }

    /// <summary>Field number for the "child_ask" field.</summary>
    public const int ChildAskFieldNumber = 331;
    private double childAsk_;
    /// <summary>
    /// market ask at the @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildAsk {
      get { return childAsk_; }
      set {
        childAsk_ = value;
      }
    }

    /// <summary>Field number for the "child_mark" field.</summary>
    public const int ChildMarkFieldNumber = 334;
    private double childMark_;
    /// <summary>
    /// mid-market (SR surface price if option) @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildMark {
      get { return childMark_; }
      set {
        childMark_ = value;
      }
    }

    /// <summary>Field number for the "child_fair_width" field.</summary>
    public const int ChildFairWidthFieldNumber = 337;
    private double childFairWidth_;
    /// <summary>
    /// model fair width @ child order create
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildFairWidth {
      get { return childFairWidth_; }
      set {
        childFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "child_vol" field.</summary>
    public const int ChildVolFieldNumber = 340;
    private float childVol_;
    /// <summary>
    /// child order volatility @ childLimitRefUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildVol {
      get { return childVol_; }
      set {
        childVol_ = value;
      }
    }

    /// <summary>Field number for the "child_prob" field.</summary>
    public const int ChildProbFieldNumber = 343;
    private float childProb_;
    /// <summary>
    /// SR probability for the child order @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildProb {
      get { return childProb_; }
      set {
        childProb_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_ref_uPrc" field.</summary>
    public const int ChildLimitRefUPrcFieldNumber = 346;
    private double childLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitRefUPrc {
      get { return childLimitRefUPrc_; }
      set {
        childLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_prc" field.</summary>
    public const int ChildLimitPrcFieldNumber = 349;
    private double childLimitPrc_;
    /// <summary>
    /// parent order limit price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitPrc {
      get { return childLimitPrc_; }
      set {
        childLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_vol_atm" field.</summary>
    public const int ChildVolAtmFieldNumber = 352;
    private float childVolAtm_;
    /// <summary>
    /// atm volatility @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildVolAtm {
      get { return childVolAtm_; }
      set {
        childVolAtm_ = value;
      }
    }

    /// <summary>Field number for the "child_pos_type" field.</summary>
    public const int ChildPosTypeFieldNumber = 355;
    private global::Spiderrock.Protobuf.PositionType childPosType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    /// <summary>
    /// child order position type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType ChildPosType {
      get { return childPosType_; }
      set {
        childPosType_ = value;
      }
    }

    /// <summary>Field number for the "child_firm_opt_position" field.</summary>
    public const int ChildFirmOptPositionFieldNumber = 358;
    private int childFirmOptPosition_;
    /// <summary>
    /// effective firm option position @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildFirmOptPosition {
      get { return childFirmOptPosition_; }
      set {
        childFirmOptPosition_ = value;
      }
    }

    /// <summary>Field number for the "child_sSale_flag" field.</summary>
    public const int ChildSSaleFlagFieldNumber = 361;
    private global::Spiderrock.Protobuf.ShortSaleFlag childSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// short sale flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag ChildSSaleFlag {
      get { return childSSaleFlag_; }
      set {
        childSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "child_firm_stk_position" field.</summary>
    public const int ChildFirmStkPositionFieldNumber = 364;
    private int childFirmStkPosition_;
    /// <summary>
    /// effective firm stock position @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildFirmStkPosition {
      get { return childFirmStkPosition_; }
      set {
        childFirmStkPosition_ = value;
      }
    }

    /// <summary>Field number for the "child_firm_open_orders" field.</summary>
    public const int ChildFirmOpenOrdersFieldNumber = 367;
    private int childFirmOpenOrders_;
    /// <summary>
    /// open sell orders counted in marking @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildFirmOpenOrders {
      get { return childFirmOpenOrders_; }
      set {
        childFirmOpenOrders_ = value;
      }
    }

    /// <summary>Field number for the "child_locate_quan" field.</summary>
    public const int ChildLocateQuanFieldNumber = 370;
    private int childLocateQuan_;
    /// <summary>
    /// available locate quantity (if selling short) @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildLocateQuan {
      get { return childLocateQuan_; }
      set {
        childLocateQuan_ = value;
      }
    }

    /// <summary>Field number for the "child_locate_firm" field.</summary>
    public const int ChildLocateFirmFieldNumber = 373;
    private string childLocateFirm_ = "";
    /// <summary>
    /// firm granting the locate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildLocateFirm {
      get { return childLocateFirm_; }
      set {
        childLocateFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_locate_pool" field.</summary>
    public const int ChildLocatePoolFieldNumber = 376;
    private string childLocatePool_ = "";
    /// <summary>
    /// locate pool @ firm granting locate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildLocatePool {
      get { return childLocatePool_; }
      set {
        childLocatePool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_mkt_stance" field.</summary>
    public const int ChildMktStanceFieldNumber = 379;
    private global::Spiderrock.Protobuf.MktStance childMktStance_ = global::Spiderrock.Protobuf.MktStance.Unspecified;
    /// <summary>
    /// child order was expected to be marketable @ child send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktStance ChildMktStance {
      get { return childMktStance_; }
      set {
        childMktStance_ = value;
      }
    }

    /// <summary>Field number for the "child_cxl_attempted" field.</summary>
    public const int ChildCxlAttemptedFieldNumber = 382;
    private global::Spiderrock.Protobuf.YesNo childCxlAttempted_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// cancel attempt was made on the child order prior to receiving this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ChildCxlAttempted {
      get { return childCxlAttempted_; }
      set {
        childCxlAttempted_ = value;
      }
    }

    /// <summary>Field number for the "child_cxl_fill_latency" field.</summary>
    public const int ChildCxlFillLatencyFieldNumber = 385;
    private float childCxlFillLatency_;
    /// <summary>
    /// cancel attempt -to- fill report latency (in ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildCxlFillLatency {
      get { return childCxlFillLatency_; }
      set {
        childCxlFillLatency_ = value;
      }
    }

    /// <summary>Field number for the "child_method" field.</summary>
    public const int ChildMethodFieldNumber = 388;
    private string childMethod_ = "";
    /// <summary>
    /// execution method string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildMethod {
      get { return childMethod_; }
      set {
        childMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_source" field.</summary>
    public const int ChildSourceFieldNumber = 391;
    private string childSource_ = "";
    /// <summary>
    /// execution source string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildSource {
      get { return childSource_; }
      set {
        childSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 394;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// child order firm type [Customer, ProCust, Firm, MM, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "pri_agg_group" field.</summary>
    public const int PriAggGroupFieldNumber = 397;
    private string priAggGroup_ = "";
    /// <summary>
    /// primary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriAggGroup {
      get { return priAggGroup_; }
      set {
        priAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_agg_group" field.</summary>
    public const int SecAggGroupFieldNumber = 400;
    private string secAggGroup_ = "";
    /// <summary>
    /// secondary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecAggGroup {
      get { return secAggGroup_; }
      set {
        secAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "directed_client_firm" field.</summary>
    public const int DirectedClientFirmFieldNumber = 403;
    private string directedClientFirm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DirectedClientFirm {
      get { return directedClientFirm_; }
      set {
        directedClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_comm_paying" field.</summary>
    public const int IsCommPayingFieldNumber = 406;
    private global::Spiderrock.Protobuf.YesNo isCommPaying_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsCommPaying {
      get { return isCommPaying_; }
      set {
        isCommPaying_ = value;
      }
    }

    /// <summary>Field number for the "fill_transact_dttm" field.</summary>
    public const int FillTransactDttmFieldNumber = 409;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillTransactDttm_;
    /// <summary>
    /// transaction date/time as reported by exchange or down stream broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillTransactDttm {
      get { return fillTransactDttm_; }
      set {
        fillTransactDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_ts" field.</summary>
    public const int FillTsFieldNumber = 412;
    private double fillTs_;
    /// <summary>
    /// fill report ts (seconds since startup; 100 nanosec resolution)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillTs {
      get { return fillTs_; }
      set {
        fillTs_ = value;
      }
    }

    /// <summary>Field number for the "fill_dttm" field.</summary>
    public const int FillDttmFieldNumber = 415;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillDttm_;
    /// <summary>
    /// Date/time of fill arrival (SRDateTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillDttm {
      get { return fillDttm_; }
      set {
        fillDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch" field.</summary>
    public const int FillExchFieldNumber = 418;
    private string fillExch_ = "";
    /// <summary>
    /// ExDest code from child order execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExch {
      get { return fillExch_; }
      set {
        fillExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exec_id" field.</summary>
    public const int FillExecIdFieldNumber = 421;
    private string fillExecId_ = "";
    /// <summary>
    /// street side execution Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExecId {
      get { return fillExecId_; }
      set {
        fillExecId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exec_ref_id" field.</summary>
    public const int FillExecRefIdFieldNumber = 424;
    private string fillExecRefId_ = "";
    /// <summary>
    /// street side execution ref Id (only used when busting an execution)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExecRefId {
      get { return fillExecRefId_; }
      set {
        fillExecRefId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_leg_ref_id" field.</summary>
    public const int FillLegRefIdFieldNumber = 427;
    private long fillLegRefId_;
    /// <summary>
    /// legRefId for multileg fills
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FillLegRefId {
      get { return fillLegRefId_; }
      set {
        fillLegRefId_ = value;
      }
    }

    /// <summary>Field number for the "fill_leg_ratio" field.</summary>
    public const int FillLegRatioFieldNumber = 430;
    private int fillLegRatio_;
    /// <summary>
    /// legRatio (if spread order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillLegRatio {
      get { return fillLegRatio_; }
      set {
        fillLegRatio_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch_fee" field.</summary>
    public const int FillExchFeeFieldNumber = 433;
    private float fillExchFee_;
    /// <summary>
    /// SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillExchFee {
      get { return fillExchFee_; }
      set {
        fillExchFee_ = value;
      }
    }

    /// <summary>Field number for the "fill_market" field.</summary>
    public const int FillMarketFieldNumber = 436;
    private string fillMarket_ = "";
    /// <summary>
    /// usually from execReport.lastMkt as reported by child order venue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillMarket {
      get { return fillMarket_; }
      set {
        fillMarket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_price" field.</summary>
    public const int FillPriceFieldNumber = 439;
    private double fillPrice_;
    /// <summary>
    /// fill price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "fill_quantity" field.</summary>
    public const int FillQuantityFieldNumber = 442;
    private int fillQuantity_;
    /// <summary>
    /// fill quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillQuantity {
      get { return fillQuantity_; }
      set {
        fillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "fill_report_detail" field.</summary>
    public const int FillReportDetailFieldNumber = 445;
    private string fillReportDetail_ = "";
    /// <summary>
    /// extra detail (if any) from child execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillReportDetail {
      get { return fillReportDetail_; }
      set {
        fillReportDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_bid" field.</summary>
    public const int FillBidFieldNumber = 448;
    private double fillBid_;
    /// <summary>
    /// market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid {
      get { return fillBid_; }
      set {
        fillBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask" field.</summary>
    public const int FillAskFieldNumber = 451;
    private double fillAsk_;
    /// <summary>
    /// market ask @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk {
      get { return fillAsk_; }
      set {
        fillAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_mark" field.</summary>
    public const int FillMarkFieldNumber = 454;
    private double fillMark_;
    /// <summary>
    /// mid-market (or SR surface price if option) @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillMark {
      get { return fillMark_; }
      set {
        fillMark_ = value;
      }
    }

    /// <summary>Field number for the "fill_fair_width" field.</summary>
    public const int FillFairWidthFieldNumber = 457;
    private double fillFairWidth_;
    /// <summary>
    /// model fair width @ fill time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillFairWidth {
      get { return fillFairWidth_; }
      set {
        fillFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "fill_uMark" field.</summary>
    public const int FillUMarkFieldNumber = 460;
    private double fillUMark_;
    /// <summary>
    /// underlier mark @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUMark {
      get { return fillUMark_; }
      set {
        fillUMark_ = value;
      }
    }

    /// <summary>Field number for the "fill_uBid" field.</summary>
    public const int FillUBidFieldNumber = 463;
    private double fillUBid_;
    /// <summary>
    /// underlier market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUBid {
      get { return fillUBid_; }
      set {
        fillUBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_uAsk" field.</summary>
    public const int FillUAskFieldNumber = 466;
    private double fillUAsk_;
    /// <summary>
    /// underlier market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUAsk {
      get { return fillUAsk_; }
      set {
        fillUAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_uBid_sz" field.</summary>
    public const int FillUBidSzFieldNumber = 469;
    private int fillUBidSz_;
    /// <summary>
    /// underlier bid size @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillUBidSz {
      get { return fillUBidSz_; }
      set {
        fillUBidSz_ = value;
      }
    }

    /// <summary>Field number for the "fill_uAsk_sz" field.</summary>
    public const int FillUAskSzFieldNumber = 472;
    private int fillUAskSz_;
    /// <summary>
    /// underlier ask size @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillUAskSz {
      get { return fillUAskSz_; }
      set {
        fillUAskSz_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol_atm" field.</summary>
    public const int FillVolAtmFieldNumber = 475;
    private float fillVolAtm_;
    /// <summary>
    /// atm volatility @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVolAtm {
      get { return fillVolAtm_; }
      set {
        fillVolAtm_ = value;
      }
    }

    /// <summary>Field number for the "fill_mark1_m" field.</summary>
    public const int FillMark1MFieldNumber = 478;
    private double fillMark1M_;
    /// <summary>
    /// mid-market (or SR surface price if option) @ fill arrival + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillMark1M {
      get { return fillMark1M_; }
      set {
        fillMark1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_mark10_m" field.</summary>
    public const int FillMark10MFieldNumber = 481;
    private double fillMark10M_;
    /// <summary>
    /// mid-market (or SR surface price if option) @ fill arrival + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillMark10M {
      get { return fillMark10M_; }
      set {
        fillMark10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_bid1_m" field.</summary>
    public const int FillBid1MFieldNumber = 484;
    private double fillBid1M_;
    /// <summary>
    /// market bid @ fill arrival + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid1M {
      get { return fillBid1M_; }
      set {
        fillBid1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask1_m" field.</summary>
    public const int FillAsk1MFieldNumber = 487;
    private double fillAsk1M_;
    /// <summary>
    /// market ask @ fill arrival + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk1M {
      get { return fillAsk1M_; }
      set {
        fillAsk1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_bid10_m" field.</summary>
    public const int FillBid10MFieldNumber = 490;
    private double fillBid10M_;
    /// <summary>
    /// market bid @ fill arrival + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid10M {
      get { return fillBid10M_; }
      set {
        fillBid10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask10_m" field.</summary>
    public const int FillAsk10MFieldNumber = 493;
    private double fillAsk10M_;
    /// <summary>
    /// market ask @ fill arrival + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk10M {
      get { return fillAsk10M_; }
      set {
        fillAsk10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_uMark1_m" field.</summary>
    public const int FillUMark1MFieldNumber = 496;
    private double fillUMark1M_;
    /// <summary>
    /// underlier mark @ fill arrival + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUMark1M {
      get { return fillUMark1M_; }
      set {
        fillUMark1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_uMark10_m" field.</summary>
    public const int FillUMark10MFieldNumber = 499;
    private double fillUMark10M_;
    /// <summary>
    /// underlier mark @ fill arrival + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUMark10M {
      get { return fillUMark10M_; }
      set {
        fillUMark10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol_atm1_m" field.</summary>
    public const int FillVolAtm1MFieldNumber = 502;
    private float fillVolAtm1M_;
    /// <summary>
    /// atm volatility (options only) + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVolAtm1M {
      get { return fillVolAtm1M_; }
      set {
        fillVolAtm1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol_atm10_m" field.</summary>
    public const int FillVolAtm10MFieldNumber = 505;
    private float fillVolAtm10M_;
    /// <summary>
    /// atm volatility (options only) + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVolAtm10M {
      get { return fillVolAtm10M_; }
      set {
        fillVolAtm10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_state1_m" field.</summary>
    public const int FillState1MFieldNumber = 508;
    private global::Spiderrock.Protobuf.FillMarkState fillState1M_ = global::Spiderrock.Protobuf.FillMarkState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FillMarkState FillState1M {
      get { return fillState1M_; }
      set {
        fillState1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_state10_m" field.</summary>
    public const int FillState10MFieldNumber = 511;
    private global::Spiderrock.Protobuf.FillMarkState fillState10M_ = global::Spiderrock.Protobuf.FillMarkState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FillMarkState FillState10M {
      get { return fillState10M_; }
      set {
        fillState10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol" field.</summary>
    public const int FillVolFieldNumber = 514;
    private float fillVol_;
    /// <summary>
    /// fill volatility @ fillLimitRefUPrc &amp; fillLimitRefSDiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVol {
      get { return fillVol_; }
      set {
        fillVol_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol_s" field.</summary>
    public const int FillVolSFieldNumber = 517;
    private float fillVolS_;
    /// <summary>
    /// fill volatility @ surfaceUPrc &amp; surfaceSDiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVolS {
      get { return fillVolS_; }
      set {
        fillVolS_ = value;
      }
    }

    /// <summary>Field number for the "fill_prob" field.</summary>
    public const int FillProbFieldNumber = 520;
    private float fillProb_;
    /// <summary>
    /// T+10m probability for the fill @ fill arrival send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillProb {
      get { return fillProb_; }
      set {
        fillProb_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_ref_uPrc" field.</summary>
    public const int FillLimitRefUPrcFieldNumber = 523;
    private double fillLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ fill arrival time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitRefUPrc {
      get { return fillLimitRefUPrc_; }
      set {
        fillLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_ref_sDiv" field.</summary>
    public const int FillLimitRefSDivFieldNumber = 526;
    private double fillLimitRefSDiv_;
    /// <summary>
    /// limit reference sdiv value @ fill arrival time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitRefSDiv {
      get { return fillLimitRefSDiv_; }
      set {
        fillLimitRefSDiv_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_prc" field.</summary>
    public const int FillLimitPrcFieldNumber = 529;
    private double fillLimitPrc_;
    /// <summary>
    /// parent order limit price @ fill arrival time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitPrc {
      get { return fillLimitPrc_; }
      set {
        fillLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_ve" field.</summary>
    public const int FillVeFieldNumber = 532;
    private float fillVe_;
    /// <summary>
    /// fill vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVe {
      get { return fillVe_; }
      set {
        fillVe_ = value;
      }
    }

    /// <summary>Field number for the "fill_ga" field.</summary>
    public const int FillGaFieldNumber = 535;
    private float fillGa_;
    /// <summary>
    /// fill gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillGa {
      get { return fillGa_; }
      set {
        fillGa_ = value;
      }
    }

    /// <summary>Field number for the "fill_de" field.</summary>
    public const int FillDeFieldNumber = 538;
    private float fillDe_;
    /// <summary>
    /// fill delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDe {
      get { return fillDe_; }
      set {
        fillDe_ = value;
      }
    }

    /// <summary>Field number for the "fill_th" field.</summary>
    public const int FillThFieldNumber = 541;
    private float fillTh_;
    /// <summary>
    /// fill theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTh {
      get { return fillTh_; }
      set {
        fillTh_ = value;
      }
    }

    /// <summary>Field number for the "fill_ve_ratio" field.</summary>
    public const int FillVeRatioFieldNumber = 547;
    private float fillVeRatio_;
    /// <summary>
    /// fill ve / fill atm ve
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVeRatio {
      get { return fillVeRatio_; }
      set {
        fillVeRatio_ = value;
      }
    }

    /// <summary>Field number for the "fill_beta" field.</summary>
    public const int FillBetaFieldNumber = 550;
    private float fillBeta_;
    /// <summary>
    /// SpiderRock estimate of beta to SPX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBeta {
      get { return fillBeta_; }
      set {
        fillBeta_ = value;
      }
    }

    /// <summary>Field number for the "risk_vega" field.</summary>
    public const int RiskVegaFieldNumber = 810;
    private float riskVega_;
    /// <summary>
    /// risk vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskVega {
      get { return riskVega_; }
      set {
        riskVega_ = value;
      }
    }

    /// <summary>Field number for the "risk_wt_vega" field.</summary>
    public const int RiskWtVegaFieldNumber = 811;
    private float riskWtVega_;
    /// <summary>
    /// risk gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskWtVega {
      get { return riskWtVega_; }
      set {
        riskWtVega_ = value;
      }
    }

    /// <summary>Field number for the "risk_nValue" field.</summary>
    public const int RiskNValueFieldNumber = 812;
    private float riskNValue_;
    /// <summary>
    /// risk delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskNValue {
      get { return riskNValue_; }
      set {
        riskNValue_ = value;
      }
    }

    /// <summary>Field number for the "risk_delta" field.</summary>
    public const int RiskDeltaFieldNumber = 813;
    private float riskDelta_;
    /// <summary>
    /// risk delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskDelta {
      get { return riskDelta_; }
      set {
        riskDelta_ = value;
      }
    }

    /// <summary>Field number for the "risk_dDelta" field.</summary>
    public const int RiskDDeltaFieldNumber = 814;
    private float riskDDelta_;
    /// <summary>
    /// risk ddelta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskDDelta {
      get { return riskDDelta_; }
      set {
        riskDDelta_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm1" field.</summary>
    public const int RiskRm1FieldNumber = 815;
    private float riskRm1_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm1 {
      get { return riskRm1_; }
      set {
        riskRm1_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm2" field.</summary>
    public const int RiskRm2FieldNumber = 816;
    private float riskRm2_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm2 {
      get { return riskRm2_; }
      set {
        riskRm2_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm3" field.</summary>
    public const int RiskRm3FieldNumber = 817;
    private float riskRm3_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm3 {
      get { return riskRm3_; }
      set {
        riskRm3_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm4" field.</summary>
    public const int RiskRm4FieldNumber = 818;
    private float riskRm4_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm4 {
      get { return riskRm4_; }
      set {
        riskRm4_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm5" field.</summary>
    public const int RiskRm5FieldNumber = 819;
    private float riskRm5_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm5 {
      get { return riskRm5_; }
      set {
        riskRm5_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm6" field.</summary>
    public const int RiskRm6FieldNumber = 820;
    private float riskRm6_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm6 {
      get { return riskRm6_; }
      set {
        riskRm6_ = value;
      }
    }

    /// <summary>Field number for the "risk_rm7" field.</summary>
    public const int RiskRm7FieldNumber = 821;
    private float riskRm7_;
    /// <summary>
    /// user defined (from parent order) [used to manage order groups]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskRm7 {
      get { return riskRm7_; }
      set {
        riskRm7_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vDn" field.</summary>
    public const int MarginUDnVDnFieldNumber = 822;
    private float marginUDnVDn_;
    /// <summary>
    /// underlier down, vol down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVDn {
      get { return marginUDnVDn_; }
      set {
        marginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vUp" field.</summary>
    public const int MarginUDnVUpFieldNumber = 823;
    private float marginUDnVUp_;
    /// <summary>
    /// underlier down, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVUp {
      get { return marginUDnVUp_; }
      set {
        marginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vDn" field.</summary>
    public const int MarginUUpVDnFieldNumber = 824;
    private float marginUUpVDn_;
    /// <summary>
    /// underlier up, vol down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVDn {
      get { return marginUUpVDn_; }
      set {
        marginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vUp" field.</summary>
    public const int MarginUUpVUpFieldNumber = 825;
    private float marginUUpVUp_;
    /// <summary>
    /// underlier up, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVUp {
      get { return marginUUpVUp_; }
      set {
        marginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "risk_u15_dn" field.</summary>
    public const int RiskU15DnFieldNumber = 826;
    private float riskU15Dn_;
    /// <summary>
    /// underlier dn 15% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU15Dn {
      get { return riskU15Dn_; }
      set {
        riskU15Dn_ = value;
      }
    }

    /// <summary>Field number for the "risk_u15_up" field.</summary>
    public const int RiskU15UpFieldNumber = 827;
    private float riskU15Up_;
    /// <summary>
    /// underlier up 15% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU15Up {
      get { return riskU15Up_; }
      set {
        riskU15Up_ = value;
      }
    }

    /// <summary>Field number for the "risk_u50_dn" field.</summary>
    public const int RiskU50DnFieldNumber = 828;
    private float riskU50Dn_;
    /// <summary>
    /// underlier dn 50% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU50Dn {
      get { return riskU50Dn_; }
      set {
        riskU50Dn_ = value;
      }
    }

    /// <summary>Field number for the "risk_u50_up" field.</summary>
    public const int RiskU50UpFieldNumber = 829;
    private float riskU50Up_;
    /// <summary>
    /// underlier up 50% shock slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskU50Up {
      get { return riskU50Up_; }
      set {
        riskU50Up_ = value;
      }
    }

    /// <summary>Field number for the "fill_brkr_rate" field.</summary>
    public const int FillBrkrRateFieldNumber = 604;
    private float fillBrkrRate_;
    /// <summary>
    /// billing brokerage rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBrkrRate {
      get { return fillBrkrRate_; }
      set {
        fillBrkrRate_ = value;
      }
    }

    /// <summary>Field number for the "fill_routing_rate" field.</summary>
    public const int FillRoutingRateFieldNumber = 607;
    private float fillRoutingRate_;
    /// <summary>
    /// billing routing rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRoutingRate {
      get { return fillRoutingRate_; }
      set {
        fillRoutingRate_ = value;
      }
    }

    /// <summary>Field number for the "risk_code" field.</summary>
    public const int RiskCodeFieldNumber = 610;
    private global::Spiderrock.Protobuf.RiskCode riskCode_ = global::Spiderrock.Protobuf.RiskCode.Unspecified;
    /// <summary>
    /// SpiderRock Risk Code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RiskCode RiskCode {
      get { return riskCode_; }
      set {
        riskCode_ = value;
      }
    }

    /// <summary>Field number for the "billing_sec_type" field.</summary>
    public const int BillingSecTypeFieldNumber = 613;
    private global::Spiderrock.Protobuf.BillingSecType billingSecType_ = global::Spiderrock.Protobuf.BillingSecType.Unspecified;
    /// <summary>
    /// SpiderRock billing security type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingSecType BillingSecType {
      get { return billingSecType_; }
      set {
        billingSecType_ = value;
      }
    }

    /// <summary>Field number for the "billing_category" field.</summary>
    public const int BillingCategoryFieldNumber = 616;
    private global::Spiderrock.Protobuf.BillingCategory billingCategory_ = global::Spiderrock.Protobuf.BillingCategory.Unspecified;
    /// <summary>
    /// SpiderRock billing category
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingCategory BillingCategory {
      get { return billingCategory_; }
      set {
        billingCategory_ = value;
      }
    }

    /// <summary>Field number for the "spdr_liquidity_tag" field.</summary>
    public const int SpdrLiquidityTagFieldNumber = 619;
    private string spdrLiquidityTag_ = "";
    /// <summary>
    /// SpiderRock normalized liquidity tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrLiquidityTag {
      get { return spdrLiquidityTag_; }
      set {
        spdrLiquidityTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exch_liquidity_tag" field.</summary>
    public const int ExchLiquidityTagFieldNumber = 622;
    private string exchLiquidityTag_ = "";
    /// <summary>
    /// liquidity tag as reported by downstream venue (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchLiquidityTag {
      get { return exchLiquidityTag_; }
      set {
        exchLiquidityTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exch_detail" field.</summary>
    public const int FillExchDetailFieldNumber = 625;
    private string fillExchDetail_ = "";
    /// <summary>
    /// other fix tags (tag:value#tag:value) [additional detail used for analysis]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExchDetail {
      get { return fillExchDetail_; }
      set {
        fillExchDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_capacity" field.</summary>
    public const int LastCapacityFieldNumber = 628;
    private global::Spiderrock.Protobuf.OrderCapacity lastCapacity_ = global::Spiderrock.Protobuf.OrderCapacity.Unspecified;
    /// <summary>
    /// child order capacity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OrderCapacity LastCapacity {
      get { return lastCapacity_; }
      set {
        lastCapacity_ = value;
      }
    }

    /// <summary>Field number for the "exch_firm_type" field.</summary>
    public const int ExchFirmTypeFieldNumber = 631;
    private string exchFirmType_ = "";
    /// <summary>
    /// used to reflect field from a downstread execution back up to upstream fill report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchFirmType {
      get { return exchFirmType_; }
      set {
        exchFirmType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext_exec_broker" field.</summary>
    public const int ExtExecBrokerFieldNumber = 634;
    private string extExecBroker_ = "";
    /// <summary>
    /// used to reflect field from a downstream destination back up to and upstream fill report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtExecBroker {
      get { return extExecBroker_; }
      set {
        extExecBroker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relationship_type" field.</summary>
    public const int RelationshipTypeFieldNumber = 637;
    private global::Spiderrock.Protobuf.RelationshipType relationshipType_ = global::Spiderrock.Protobuf.RelationshipType.Unspecified;
    /// <summary>
    /// type of SR &lt;-> client relationship
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RelationshipType RelationshipType {
      get { return relationshipType_; }
      set {
        relationshipType_ = value;
      }
    }

    /// <summary>Field number for the "cl_arrive_mark" field.</summary>
    public const int ClArriveMarkFieldNumber = 640;
    private float clArriveMark_;
    /// <summary>
    /// client specified arrival mark (passed through from parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClArriveMark {
      get { return clArriveMark_; }
      set {
        clArriveMark_ = value;
      }
    }

    /// <summary>Field number for the "parent_dttm" field.</summary>
    public const int ParentDttmFieldNumber = 643;
    private global::Google.Protobuf.WellKnownTypes.Timestamp parentDttm_;
    /// <summary>
    /// parent order creation date/time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ParentDttm {
      get { return parentDttm_; }
      set {
        parentDttm_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_size" field.</summary>
    public const int ParentOrderSizeFieldNumber = 646;
    private int parentOrderSize_;
    /// <summary>
    /// parent order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentOrderSize {
      get { return parentOrderSize_; }
      set {
        parentOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "parent_uBid" field.</summary>
    public const int ParentUBidFieldNumber = 649;
    private double parentUBid_;
    /// <summary>
    /// underlier market bid @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentUBid {
      get { return parentUBid_; }
      set {
        parentUBid_ = value;
      }
    }

    /// <summary>Field number for the "parent_uAsk" field.</summary>
    public const int ParentUAskFieldNumber = 652;
    private double parentUAsk_;
    /// <summary>
    /// underlier market ask @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentUAsk {
      get { return parentUAsk_; }
      set {
        parentUAsk_ = value;
      }
    }

    /// <summary>Field number for the "parent_uMark" field.</summary>
    public const int ParentUMarkFieldNumber = 655;
    private double parentUMark_;
    /// <summary>
    /// underlier mid mark @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentUMark {
      get { return parentUMark_; }
      set {
        parentUMark_ = value;
      }
    }

    /// <summary>Field number for the "parent_bid" field.</summary>
    public const int ParentBidFieldNumber = 658;
    private double parentBid_;
    /// <summary>
    /// market bid @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentBid {
      get { return parentBid_; }
      set {
        parentBid_ = value;
      }
    }

    /// <summary>Field number for the "parent_ask" field.</summary>
    public const int ParentAskFieldNumber = 661;
    private double parentAsk_;
    /// <summary>
    /// market ask @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentAsk {
      get { return parentAsk_; }
      set {
        parentAsk_ = value;
      }
    }

    /// <summary>Field number for the "parent_mark" field.</summary>
    public const int ParentMarkFieldNumber = 664;
    private double parentMark_;
    /// <summary>
    /// mid-market (or SR surface price) @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentMark {
      get { return parentMark_; }
      set {
        parentMark_ = value;
      }
    }

    /// <summary>Field number for the "parent_fair_width" field.</summary>
    public const int ParentFairWidthFieldNumber = 667;
    private double parentFairWidth_;
    /// <summary>
    /// model fair width @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentFairWidth {
      get { return parentFairWidth_; }
      set {
        parentFairWidth_ = value;
      }
    }

    /// <summary>Field number for the "parent_surf_vol" field.</summary>
    public const int ParentSurfVolFieldNumber = 670;
    private double parentSurfVol_;
    /// <summary>
    /// SR surf vol @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentSurfVol {
      get { return parentSurfVol_; }
      set {
        parentSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_vol" field.</summary>
    public const int ParentLimitVolFieldNumber = 673;
    private float parentLimitVol_;
    /// <summary>
    /// parent order limit volatilty (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentLimitVol {
      get { return parentLimitVol_; }
      set {
        parentLimitVol_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_prc" field.</summary>
    public const int ParentLimitPrcFieldNumber = 676;
    private double parentLimitPrc_;
    /// <summary>
    /// parent order limit price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentLimitPrc {
      get { return parentLimitPrc_; }
      set {
        parentLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_limit_ref_uPrc" field.</summary>
    public const int ParentLimitRefUPrcFieldNumber = 679;
    private double parentLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ParentLimitRefUPrc {
      get { return parentLimitRefUPrc_; }
      set {
        parentLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_theo_vol" field.</summary>
    public const int ParentTheoVolFieldNumber = 682;
    private float parentTheoVol_;
    /// <summary>
    /// client supplied theoretical volatility (used for markup only) [copied from parent order]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentTheoVol {
      get { return parentTheoVol_; }
      set {
        parentTheoVol_ = value;
      }
    }

    /// <summary>Field number for the "parent_theo_prc" field.</summary>
    public const int ParentTheoPrcFieldNumber = 685;
    private float parentTheoPrc_;
    /// <summary>
    /// option price corresponding parentTheoVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentTheoPrc {
      get { return parentTheoPrc_; }
      set {
        parentTheoPrc_ = value;
      }
    }

    /// <summary>Field number for the "parent_pos_type" field.</summary>
    public const int ParentPosTypeFieldNumber = 688;
    private global::Spiderrock.Protobuf.PositionType parentPosType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    /// <summary>
    /// parent order position type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType ParentPosType {
      get { return parentPosType_; }
      set {
        parentPosType_ = value;
      }
    }

    /// <summary>Field number for the "parent_sSale_flag" field.</summary>
    public const int ParentSSaleFlagFieldNumber = 691;
    private global::Spiderrock.Protobuf.ShortSaleFlag parentSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// short sale flag on parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag ParentSSaleFlag {
      get { return parentSSaleFlag_; }
      set {
        parentSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "notice_number" field.</summary>
    public const int NoticeNumberFieldNumber = 694;
    private long noticeNumber_;
    /// <summary>
    /// RFR / Auction noticeNumber (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NoticeNumber {
      get { return noticeNumber_; }
      set {
        noticeNumber_ = value;
      }
    }

    /// <summary>Field number for the "num_make_exchanges" field.</summary>
    public const int NumMakeExchangesFieldNumber = 697;
    private int numMakeExchanges_;
    /// <summary>
    /// number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMakeExchanges {
      get { return numMakeExchanges_; }
      set {
        numMakeExchanges_ = value;
      }
    }

    /// <summary>Field number for the "public_size" field.</summary>
    public const int PublicSizeFieldNumber = 700;
    private global::Spiderrock.Protobuf.PublicSizeHandling publicSize_ = global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified;
    /// <summary>
    /// public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PublicSizeHandling PublicSize {
      get { return publicSize_; }
      set {
        publicSize_ = value;
      }
    }

    /// <summary>Field number for the "can_overlap_cxl_repl" field.</summary>
    public const int CanOverlapCxlReplFieldNumber = 703;
    private global::Spiderrock.Protobuf.YesNo canOverlapCxlRepl_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CanOverlapCxlRepl {
      get { return canOverlapCxlRepl_; }
      set {
        canOverlapCxlRepl_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule" field.</summary>
    public const int ProgressRuleFieldNumber = 706;
    private global::Spiderrock.Protobuf.ProgressRule progressRule_ = global::Spiderrock.Protobuf.ProgressRule.Unspecified;
    /// <summary>
    /// Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProgressRule ProgressRule {
      get { return progressRule_; }
      set {
        progressRule_ = value;
      }
    }

    /// <summary>Field number for the "exch_mask_enabled" field.</summary>
    public const int ExchMaskEnabledFieldNumber = 709;
    private global::Spiderrock.Protobuf.YesNo exchMaskEnabled_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// exchMask != 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ExchMaskEnabled {
      get { return exchMaskEnabled_; }
      set {
        exchMaskEnabled_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 712;
    private global::Spiderrock.Protobuf.TimeInForce timeInForce_ = global::Spiderrock.Protobuf.TimeInForce.Unspecified;
    /// <summary>
    /// Parent order market session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 715;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    /// <summary>
    /// Primary/Take Algo Handler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 718;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    /// <summary>
    /// Make Algo Handler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 721;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    /// <summary>
    /// Primary Limit Type (Prc, Vol, Rel, Market, Smrt, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_class" field.</summary>
    public const int OrderLimitClassFieldNumber = 724;
    private global::Spiderrock.Protobuf.SpdrLimitClass orderLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass OrderLimitClass {
      get { return orderLimitClass_; }
      set {
        orderLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "take_reach_rule" field.</summary>
    public const int TakeReachRuleFieldNumber = 727;
    private global::Spiderrock.Protobuf.ReachRule takeReachRule_ = global::Spiderrock.Protobuf.ReachRule.Unspecified;
    /// <summary>
    /// Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size &lt; avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ReachRule TakeReachRule {
      get { return takeReachRule_; }
      set {
        takeReachRule_ = value;
      }
    }

    /// <summary>Field number for the "override_code" field.</summary>
    public const int OverrideCodeFieldNumber = 730;
    private global::Spiderrock.Protobuf.OverrideCode overrideCode_ = global::Spiderrock.Protobuf.OverrideCode.Unspecified;
    /// <summary>
    /// SDiv/DDiv override rule (applies if LimitType = Vol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OverrideCode OverrideCode {
      get { return overrideCode_; }
      set {
        overrideCode_ = value;
      }
    }

    /// <summary>Field number for the "alpha_type" field.</summary>
    public const int AlphaTypeFieldNumber = 733;
    private global::Spiderrock.Protobuf.AlphaType alphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Affects limit probabilities (applies if LimitClass = Probability)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType AlphaType {
      get { return alphaType_; }
      set {
        alphaType_ = value;
      }
    }

    /// <summary>Field number for the "parent_strategy" field.</summary>
    public const int ParentStrategyFieldNumber = 736;
    private string parentStrategy_ = "";
    /// <summary>
    /// client strategy [usually client supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentStrategy {
      get { return parentStrategy_; }
      set {
        parentStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 739;
    private string userName_ = "";
    /// <summary>
    /// user name associated with the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 742;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    /// <summary>
    /// auto-hedge algorithm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 745;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// auto-hedge sec key (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_type" field.</summary>
    public const int HedgeSecTypeFieldNumber = 748;
    private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// auto-hedge sec type (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
      get { return hedgeSecType_; }
      set {
        hedgeSecType_ = value;
      }
    }

    /// <summary>Field number for the "hedge_beta_ratio" field.</summary>
    public const int HedgeBetaRatioFieldNumber = 751;
    private float hedgeBetaRatio_;
    /// <summary>
    /// portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeBetaRatio {
      get { return hedgeBetaRatio_; }
      set {
        hedgeBetaRatio_ = value;
      }
    }

    /// <summary>Field number for the "hedge_scope" field.</summary>
    public const int HedgeScopeFieldNumber = 754;
    private global::Spiderrock.Protobuf.HedgeScope hedgeScope_ = global::Spiderrock.Protobuf.HedgeScope.Unspecified;
    /// <summary>
    /// hedge group scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeScope HedgeScope {
      get { return hedgeScope_; }
      set {
        hedgeScope_ = value;
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 757;
    private string userData1_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 760;
    private string userData2_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 763;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 766;
    private int underliersPerCn_;
    /// <summary>
    /// option delivery underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 769;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// type of underlier (affects $greek calculations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 772;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 775;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 778;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 781;
    private float uPrcRatio_;
    /// <summary>
    /// UPrcRatio (SymbolRatio) from product definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "min_tick_size" field.</summary>
    public const int MinTickSizeFieldNumber = 784;
    private float minTickSize_;
    /// <summary>
    /// minimum market price variation (dnTickSize if on a boundary)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTickSize {
      get { return minTickSize_; }
      set {
        minTickSize_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 787;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 790;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock underlier price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc" field.</summary>
    public const int LiveUPrcFieldNumber = 793;
    private double liveUPrc_;
    /// <summary>
    /// SpiderRock internal use only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc {
      get { return liveUPrc_; }
      set {
        liveUPrc_ = value;
      }
    }

    /// <summary>Field number for the "live_mark" field.</summary>
    public const int LiveMarkFieldNumber = 796;
    private double liveMark_;
    /// <summary>
    /// SpiderRock internal use only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveMark {
      get { return liveMark_; }
      set {
        liveMark_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 799;
    private long srcTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "sgw_timestamp" field.</summary>
    public const int SgwTimestampFieldNumber = 802;
    private long sgwTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SgwTimestamp {
      get { return sgwTimestamp_; }
      set {
        sgwTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "eng_timestamp" field.</summary>
    public const int EngTimestampFieldNumber = 805;
    private long engTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EngTimestamp {
      get { return engTimestamp_; }
      set {
        engTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 808;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of this record [not necessarily the timstamp of the fill itself]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "data_center__v7" field.</summary>
    public const int DataCenterV7FieldNumber = 5000;
    private global::Spiderrock.Protobuf.SRDataCenter_V7 dataCenterV7_ = global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified;
    /// <summary>
    /// only v7: enum values do not match with v8: V7[None=0,NY4=1,NY5=2,CH2=3,CH3=4], V8[Does Not Exist]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SRDataCenter_V7 DataCenterV7 {
      get { return dataCenterV7_; }
      set {
        dataCenterV7_ = value;
      }
    }

    /// <summary>Field number for the "face_side__v7" field.</summary>
    public const int FaceSideV7FieldNumber = 5001;
    private global::Spiderrock.Protobuf.FaceSide faceSideV7_ = global::Spiderrock.Protobuf.FaceSide.Unspecified;
    /// <summary>
    /// only v7 - enum values match with v8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FaceSide FaceSideV7 {
      get { return faceSideV7_; }
      set {
        faceSideV7_ = value;
      }
    }

    /// <summary>Field number for the "face_shape__v7" field.</summary>
    public const int FaceShapeV7FieldNumber = 5002;
    private global::Spiderrock.Protobuf.FaceShape faceShapeV7_ = global::Spiderrock.Protobuf.FaceShape.Unspecified;
    /// <summary>
    /// only v7 - enum values match with v8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FaceShape FaceShapeV7 {
      get { return faceShapeV7_; }
      set {
        faceShapeV7_ = value;
      }
    }

    /// <summary>Field number for the "child_locate_source__v7" field.</summary>
    public const int ChildLocateSourceV7FieldNumber = 5003;
    private string childLocateSourceV7_ = "";
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildLocateSourceV7 {
      get { return childLocateSourceV7_; }
      set {
        childLocateSourceV7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_pr__v7" field.</summary>
    public const int FillPrV7FieldNumber = 5004;
    private float fillPrV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillPrV7 {
      get { return fillPrV7_; }
      set {
        fillPrV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric1__v7" field.</summary>
    public const int FillRiskMetric1V7FieldNumber = 5005;
    private float fillRiskMetric1V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric1V7 {
      get { return fillRiskMetric1V7_; }
      set {
        fillRiskMetric1V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric2__v7" field.</summary>
    public const int FillRiskMetric2V7FieldNumber = 5006;
    private float fillRiskMetric2V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric2V7 {
      get { return fillRiskMetric2V7_; }
      set {
        fillRiskMetric2V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric3__v7" field.</summary>
    public const int FillRiskMetric3V7FieldNumber = 5007;
    private float fillRiskMetric3V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric3V7 {
      get { return fillRiskMetric3V7_; }
      set {
        fillRiskMetric3V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric4__v7" field.</summary>
    public const int FillRiskMetric4V7FieldNumber = 5008;
    private float fillRiskMetric4V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric4V7 {
      get { return fillRiskMetric4V7_; }
      set {
        fillRiskMetric4V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric5__v7" field.</summary>
    public const int FillRiskMetric5V7FieldNumber = 5009;
    private float fillRiskMetric5V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric5V7 {
      get { return fillRiskMetric5V7_; }
      set {
        fillRiskMetric5V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric6__v7" field.</summary>
    public const int FillRiskMetric6V7FieldNumber = 5010;
    private float fillRiskMetric6V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric6V7 {
      get { return fillRiskMetric6V7_; }
      set {
        fillRiskMetric6V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_risk_metric7__v7" field.</summary>
    public const int FillRiskMetric7V7FieldNumber = 5011;
    private float fillRiskMetric7V7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRiskMetric7V7 {
      get { return fillRiskMetric7V7_; }
      set {
        fillRiskMetric7V7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s08_dn__v7" field.</summary>
    public const int FillS08DnV7FieldNumber = 5012;
    private float fillS08DnV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS08DnV7 {
      get { return fillS08DnV7_; }
      set {
        fillS08DnV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s06_up__v7" field.</summary>
    public const int FillS06UpV7FieldNumber = 5013;
    private float fillS06UpV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS06UpV7 {
      get { return fillS06UpV7_; }
      set {
        fillS06UpV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s15_dn__v7" field.</summary>
    public const int FillS15DnV7FieldNumber = 5014;
    private float fillS15DnV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS15DnV7 {
      get { return fillS15DnV7_; }
      set {
        fillS15DnV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s15_up__v7" field.</summary>
    public const int FillS15UpV7FieldNumber = 5015;
    private float fillS15UpV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS15UpV7 {
      get { return fillS15UpV7_; }
      set {
        fillS15UpV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s50_dn__v7" field.</summary>
    public const int FillS50DnV7FieldNumber = 5016;
    private float fillS50DnV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS50DnV7 {
      get { return fillS50DnV7_; }
      set {
        fillS50DnV7_ = value;
      }
    }

    /// <summary>Field number for the "fill_s50_up__v7" field.</summary>
    public const int FillS50UpV7FieldNumber = 5017;
    private float fillS50UpV7_;
    /// <summary>
    /// only V7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillS50UpV7 {
      get { return fillS50UpV7_; }
      set {
        fillS50UpV7_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrParentExecution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrParentExecution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SysRealm != other.SysRealm) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (RunStatus != other.RunStatus) return false;
      if (Version != other.Version) return false;
      if (ExecStatus != other.ExecStatus) return false;
      if (ExecShape != other.ExecShape) return false;
      if (PackageId != other.PackageId) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (ParentVersion != other.ParentVersion) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (ReviewClOrdId != other.ReviewClOrdId) return false;
      if (AltFillId != other.AltFillId) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (AltCrossId != other.AltCrossId) return false;
      if (AltLegRefId != other.AltLegRefId) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (SrcRoutingCode != other.SrcRoutingCode) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (TriggerGroupId != other.TriggerGroupId) return false;
      if (TriggerTimestamp != other.TriggerTimestamp) return false;
      if (StreetClOrdId != other.StreetClOrdId) return false;
      if (StreetOrderId != other.StreetOrderId) return false;
      if (ParentShape != other.ParentShape) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (Accnt != other.Accnt) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (CoreClientFirm != other.CoreClientFirm) return false;
      if (SponsorClientFirm != other.SponsorClientFirm) return false;
      if (RoutingCode != other.RoutingCode) return false;
      if (EngineName != other.EngineName) return false;
      if (GatewayName != other.GatewayName) return false;
      if (ExecRole != other.ExecRole) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ExecBrkrMPID != other.ExecBrkrMPID) return false;
      if (ExecBrkrAccnt != other.ExecBrkrAccnt) return false;
      if (ExecBrkrClFirm != other.ExecBrkrClFirm) return false;
      if (ExecBrkrUserName != other.ExecBrkrUserName) return false;
      if (ClearingFlipType != other.ClearingFlipType) return false;
      if (ClearingFlipFirm != other.ClearingFlipFirm) return false;
      if (ClearingFlipAccnt != other.ClearingFlipAccnt) return false;
      if (ClearingFirm != other.ClearingFirm) return false;
      if (ClearingAccnt != other.ClearingAccnt) return false;
      if (OrigExecID != other.OrigExecID) return false;
      if (LastExecID != other.LastExecID) return false;
      if (RemoteText != other.RemoteText) return false;
      if (OrderSide != other.OrderSide) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (CumFillQuantity != other.CumFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (CumLegFillQuantity != other.CumLegFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgLegFillPrice, other.AvgLegFillPrice)) return false;
      if (LeavesQty != other.LeavesQty) return false;
      if (PriceType != other.PriceType) return false;
      if (ChildShape != other.ChildShape) return false;
      if (ChildSize != other.ChildSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildPrice, other.ChildPrice)) return false;
      if (!object.Equals(ChildDttm, other.ChildDttm)) return false;
      if (ChildExch != other.ChildExch) return false;
      if (ChildExDest != other.ChildExDest) return false;
      if (ChildExecBroker != other.ChildExecBroker) return false;
      if (ChildIsDirected != other.ChildIsDirected) return false;
      if (ChildIsoSweep != other.ChildIsoSweep) return false;
      if (ChildOrderHandling != other.ChildOrderHandling) return false;
      if (ChildAlgoHandler != other.ChildAlgoHandler) return false;
      if (ChildCreateReason != other.ChildCreateReason) return false;
      if (ChildCancelReason != other.ChildCancelReason) return false;
      if (ChildMakerTaker != other.ChildMakerTaker) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildUBid, other.ChildUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildUAsk, other.ChildUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildBid, other.ChildBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildAsk, other.ChildAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildMark, other.ChildMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildFairWidth, other.ChildFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildVol, other.ChildVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildProb, other.ChildProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitRefUPrc, other.ChildLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitPrc, other.ChildLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildVolAtm, other.ChildVolAtm)) return false;
      if (ChildPosType != other.ChildPosType) return false;
      if (ChildFirmOptPosition != other.ChildFirmOptPosition) return false;
      if (ChildSSaleFlag != other.ChildSSaleFlag) return false;
      if (ChildFirmStkPosition != other.ChildFirmStkPosition) return false;
      if (ChildFirmOpenOrders != other.ChildFirmOpenOrders) return false;
      if (ChildLocateQuan != other.ChildLocateQuan) return false;
      if (ChildLocateFirm != other.ChildLocateFirm) return false;
      if (ChildLocatePool != other.ChildLocatePool) return false;
      if (ChildMktStance != other.ChildMktStance) return false;
      if (ChildCxlAttempted != other.ChildCxlAttempted) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildCxlFillLatency, other.ChildCxlFillLatency)) return false;
      if (ChildMethod != other.ChildMethod) return false;
      if (ChildSource != other.ChildSource) return false;
      if (FirmType != other.FirmType) return false;
      if (PriAggGroup != other.PriAggGroup) return false;
      if (SecAggGroup != other.SecAggGroup) return false;
      if (DirectedClientFirm != other.DirectedClientFirm) return false;
      if (IsCommPaying != other.IsCommPaying) return false;
      if (!object.Equals(FillTransactDttm, other.FillTransactDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillTs, other.FillTs)) return false;
      if (!object.Equals(FillDttm, other.FillDttm)) return false;
      if (FillExch != other.FillExch) return false;
      if (FillExecId != other.FillExecId) return false;
      if (FillExecRefId != other.FillExecRefId) return false;
      if (FillLegRefId != other.FillLegRefId) return false;
      if (FillLegRatio != other.FillLegRatio) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillExchFee, other.FillExchFee)) return false;
      if (FillMarket != other.FillMarket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPrice, other.FillPrice)) return false;
      if (FillQuantity != other.FillQuantity) return false;
      if (FillReportDetail != other.FillReportDetail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid, other.FillBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk, other.FillAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillMark, other.FillMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillFairWidth, other.FillFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUMark, other.FillUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUBid, other.FillUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUAsk, other.FillUAsk)) return false;
      if (FillUBidSz != other.FillUBidSz) return false;
      if (FillUAskSz != other.FillUAskSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVolAtm, other.FillVolAtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillMark1M, other.FillMark1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillMark10M, other.FillMark10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid1M, other.FillBid1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk1M, other.FillAsk1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid10M, other.FillBid10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk10M, other.FillAsk10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUMark1M, other.FillUMark1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUMark10M, other.FillUMark10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVolAtm1M, other.FillVolAtm1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVolAtm10M, other.FillVolAtm10M)) return false;
      if (FillState1M != other.FillState1M) return false;
      if (FillState10M != other.FillState10M) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVol, other.FillVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVolS, other.FillVolS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillProb, other.FillProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitRefUPrc, other.FillLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitRefSDiv, other.FillLimitRefSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitPrc, other.FillLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVe, other.FillVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillGa, other.FillGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDe, other.FillDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTh, other.FillTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVeRatio, other.FillVeRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBeta, other.FillBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskVega, other.RiskVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskWtVega, other.RiskWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskNValue, other.RiskNValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskDelta, other.RiskDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskDDelta, other.RiskDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm1, other.RiskRm1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm2, other.RiskRm2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm3, other.RiskRm3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm4, other.RiskRm4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm5, other.RiskRm5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm6, other.RiskRm6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskRm7, other.RiskRm7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVDn, other.MarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVUp, other.MarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVDn, other.MarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVUp, other.MarginUUpVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU15Dn, other.RiskU15Dn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU15Up, other.RiskU15Up)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU50Dn, other.RiskU50Dn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskU50Up, other.RiskU50Up)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBrkrRate, other.FillBrkrRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRoutingRate, other.FillRoutingRate)) return false;
      if (RiskCode != other.RiskCode) return false;
      if (BillingSecType != other.BillingSecType) return false;
      if (BillingCategory != other.BillingCategory) return false;
      if (SpdrLiquidityTag != other.SpdrLiquidityTag) return false;
      if (ExchLiquidityTag != other.ExchLiquidityTag) return false;
      if (FillExchDetail != other.FillExchDetail) return false;
      if (LastCapacity != other.LastCapacity) return false;
      if (ExchFirmType != other.ExchFirmType) return false;
      if (ExtExecBroker != other.ExtExecBroker) return false;
      if (RelationshipType != other.RelationshipType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClArriveMark, other.ClArriveMark)) return false;
      if (!object.Equals(ParentDttm, other.ParentDttm)) return false;
      if (ParentOrderSize != other.ParentOrderSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentUBid, other.ParentUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentUAsk, other.ParentUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentUMark, other.ParentUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentBid, other.ParentBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentAsk, other.ParentAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentMark, other.ParentMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentFairWidth, other.ParentFairWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentSurfVol, other.ParentSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentLimitVol, other.ParentLimitVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentLimitPrc, other.ParentLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentLimitRefUPrc, other.ParentLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentTheoVol, other.ParentTheoVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentTheoPrc, other.ParentTheoPrc)) return false;
      if (ParentPosType != other.ParentPosType) return false;
      if (ParentSSaleFlag != other.ParentSSaleFlag) return false;
      if (NoticeNumber != other.NoticeNumber) return false;
      if (NumMakeExchanges != other.NumMakeExchanges) return false;
      if (PublicSize != other.PublicSize) return false;
      if (CanOverlapCxlRepl != other.CanOverlapCxlRepl) return false;
      if (ProgressRule != other.ProgressRule) return false;
      if (ExchMaskEnabled != other.ExchMaskEnabled) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (OrderLimitClass != other.OrderLimitClass) return false;
      if (TakeReachRule != other.TakeReachRule) return false;
      if (OverrideCode != other.OverrideCode) return false;
      if (AlphaType != other.AlphaType) return false;
      if (ParentStrategy != other.ParentStrategy) return false;
      if (UserName != other.UserName) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (HedgeSecType != other.HedgeSecType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeBetaRatio, other.HedgeBetaRatio)) return false;
      if (HedgeScope != other.HedgeScope) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTickSize, other.MinTickSize)) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc, other.LiveUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveMark, other.LiveMark)) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (SgwTimestamp != other.SgwTimestamp) return false;
      if (EngTimestamp != other.EngTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (DataCenterV7 != other.DataCenterV7) return false;
      if (FaceSideV7 != other.FaceSideV7) return false;
      if (FaceShapeV7 != other.FaceShapeV7) return false;
      if (ChildLocateSourceV7 != other.ChildLocateSourceV7) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillPrV7, other.FillPrV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric1V7, other.FillRiskMetric1V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric2V7, other.FillRiskMetric2V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric3V7, other.FillRiskMetric3V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric4V7, other.FillRiskMetric4V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric5V7, other.FillRiskMetric5V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric6V7, other.FillRiskMetric6V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRiskMetric7V7, other.FillRiskMetric7V7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS08DnV7, other.FillS08DnV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS06UpV7, other.FillS06UpV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS15DnV7, other.FillS15DnV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS15UpV7, other.FillS15UpV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS50DnV7, other.FillS50DnV7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillS50UpV7, other.FillS50UpV7)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) hash ^= SysRealm.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) hash ^= ExecStatus.GetHashCode();
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) hash ^= ExecShape.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (ParentVersion != 0) hash ^= ParentVersion.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (ClOrdId != 0L) hash ^= ClOrdId.GetHashCode();
      if (ReviewClOrdId.Length != 0) hash ^= ReviewClOrdId.GetHashCode();
      if (AltFillId != 0L) hash ^= AltFillId.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (AltCrossId.Length != 0) hash ^= AltCrossId.GetHashCode();
      if (AltLegRefId.Length != 0) hash ^= AltLegRefId.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (SrcRoutingCode.Length != 0) hash ^= SrcRoutingCode.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (TriggerGroupId != 0L) hash ^= TriggerGroupId.GetHashCode();
      if (TriggerTimestamp != 0L) hash ^= TriggerTimestamp.GetHashCode();
      if (StreetClOrdId.Length != 0) hash ^= StreetClOrdId.GetHashCode();
      if (StreetOrderId.Length != 0) hash ^= StreetOrderId.GetHashCode();
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ParentShape.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (CoreClientFirm.Length != 0) hash ^= CoreClientFirm.GetHashCode();
      if (SponsorClientFirm.Length != 0) hash ^= SponsorClientFirm.GetHashCode();
      if (RoutingCode.Length != 0) hash ^= RoutingCode.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) hash ^= ExecRole.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ExecBrkrMPID.Length != 0) hash ^= ExecBrkrMPID.GetHashCode();
      if (ExecBrkrAccnt.Length != 0) hash ^= ExecBrkrAccnt.GetHashCode();
      if (ExecBrkrClFirm.Length != 0) hash ^= ExecBrkrClFirm.GetHashCode();
      if (ExecBrkrUserName.Length != 0) hash ^= ExecBrkrUserName.GetHashCode();
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) hash ^= ClearingFlipType.GetHashCode();
      if (ClearingFlipFirm.Length != 0) hash ^= ClearingFlipFirm.GetHashCode();
      if (ClearingFlipAccnt.Length != 0) hash ^= ClearingFlipAccnt.GetHashCode();
      if (ClearingFirm.Length != 0) hash ^= ClearingFirm.GetHashCode();
      if (ClearingAccnt.Length != 0) hash ^= ClearingAccnt.GetHashCode();
      if (OrigExecID.Length != 0) hash ^= OrigExecID.GetHashCode();
      if (LastExecID.Length != 0) hash ^= LastExecID.GetHashCode();
      if (RemoteText.Length != 0) hash ^= RemoteText.GetHashCode();
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (CumFillQuantity != 0) hash ^= CumFillQuantity.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (CumLegFillQuantity != 0) hash ^= CumLegFillQuantity.GetHashCode();
      if (AvgLegFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgLegFillPrice);
      if (LeavesQty != 0) hash ^= LeavesQty.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ChildShape.GetHashCode();
      if (ChildSize != 0) hash ^= ChildSize.GetHashCode();
      if (ChildPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildPrice);
      if (childDttm_ != null) hash ^= ChildDttm.GetHashCode();
      if (ChildExch.Length != 0) hash ^= ChildExch.GetHashCode();
      if (ChildExDest.Length != 0) hash ^= ChildExDest.GetHashCode();
      if (ChildExecBroker.Length != 0) hash ^= ChildExecBroker.GetHashCode();
      if (ChildIsDirected != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ChildIsDirected.GetHashCode();
      if (ChildIsoSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ChildIsoSweep.GetHashCode();
      if (ChildOrderHandling.Length != 0) hash ^= ChildOrderHandling.GetHashCode();
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) hash ^= ChildAlgoHandler.GetHashCode();
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) hash ^= ChildCreateReason.GetHashCode();
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) hash ^= ChildCancelReason.GetHashCode();
      if (ChildMakerTaker != global::Spiderrock.Protobuf.MakerTaker.Unspecified) hash ^= ChildMakerTaker.GetHashCode();
      if (ChildUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildUBid);
      if (ChildUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildUAsk);
      if (ChildBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildBid);
      if (ChildAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildAsk);
      if (ChildMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildMark);
      if (ChildFairWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildFairWidth);
      if (ChildVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildVol);
      if (ChildProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildProb);
      if (ChildLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitRefUPrc);
      if (ChildLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitPrc);
      if (ChildVolAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildVolAtm);
      if (ChildPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= ChildPosType.GetHashCode();
      if (ChildFirmOptPosition != 0) hash ^= ChildFirmOptPosition.GetHashCode();
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= ChildSSaleFlag.GetHashCode();
      if (ChildFirmStkPosition != 0) hash ^= ChildFirmStkPosition.GetHashCode();
      if (ChildFirmOpenOrders != 0) hash ^= ChildFirmOpenOrders.GetHashCode();
      if (ChildLocateQuan != 0) hash ^= ChildLocateQuan.GetHashCode();
      if (ChildLocateFirm.Length != 0) hash ^= ChildLocateFirm.GetHashCode();
      if (ChildLocatePool.Length != 0) hash ^= ChildLocatePool.GetHashCode();
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) hash ^= ChildMktStance.GetHashCode();
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ChildCxlAttempted.GetHashCode();
      if (ChildCxlFillLatency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildCxlFillLatency);
      if (ChildMethod.Length != 0) hash ^= ChildMethod.GetHashCode();
      if (ChildSource.Length != 0) hash ^= ChildSource.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (PriAggGroup.Length != 0) hash ^= PriAggGroup.GetHashCode();
      if (SecAggGroup.Length != 0) hash ^= SecAggGroup.GetHashCode();
      if (DirectedClientFirm.Length != 0) hash ^= DirectedClientFirm.GetHashCode();
      if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsCommPaying.GetHashCode();
      if (fillTransactDttm_ != null) hash ^= FillTransactDttm.GetHashCode();
      if (FillTs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillTs);
      if (fillDttm_ != null) hash ^= FillDttm.GetHashCode();
      if (FillExch.Length != 0) hash ^= FillExch.GetHashCode();
      if (FillExecId.Length != 0) hash ^= FillExecId.GetHashCode();
      if (FillExecRefId.Length != 0) hash ^= FillExecRefId.GetHashCode();
      if (FillLegRefId != 0L) hash ^= FillLegRefId.GetHashCode();
      if (FillLegRatio != 0) hash ^= FillLegRatio.GetHashCode();
      if (FillExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillExchFee);
      if (FillMarket.Length != 0) hash ^= FillMarket.GetHashCode();
      if (FillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPrice);
      if (FillQuantity != 0) hash ^= FillQuantity.GetHashCode();
      if (FillReportDetail.Length != 0) hash ^= FillReportDetail.GetHashCode();
      if (FillBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid);
      if (FillAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk);
      if (FillMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillMark);
      if (FillFairWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillFairWidth);
      if (FillUMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUMark);
      if (FillUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUBid);
      if (FillUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUAsk);
      if (FillUBidSz != 0) hash ^= FillUBidSz.GetHashCode();
      if (FillUAskSz != 0) hash ^= FillUAskSz.GetHashCode();
      if (FillVolAtm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVolAtm);
      if (FillMark1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillMark1M);
      if (FillMark10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillMark10M);
      if (FillBid1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid1M);
      if (FillAsk1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk1M);
      if (FillBid10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid10M);
      if (FillAsk10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk10M);
      if (FillUMark1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUMark1M);
      if (FillUMark10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUMark10M);
      if (FillVolAtm1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVolAtm1M);
      if (FillVolAtm10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVolAtm10M);
      if (FillState1M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) hash ^= FillState1M.GetHashCode();
      if (FillState10M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) hash ^= FillState10M.GetHashCode();
      if (FillVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVol);
      if (FillVolS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVolS);
      if (FillProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillProb);
      if (FillLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitRefUPrc);
      if (FillLimitRefSDiv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitRefSDiv);
      if (FillLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitPrc);
      if (FillVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVe);
      if (FillGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillGa);
      if (FillDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDe);
      if (FillTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTh);
      if (FillVeRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVeRatio);
      if (FillBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBeta);
      if (RiskVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskVega);
      if (RiskWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskWtVega);
      if (RiskNValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskNValue);
      if (RiskDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskDelta);
      if (RiskDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskDDelta);
      if (RiskRm1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm1);
      if (RiskRm2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm2);
      if (RiskRm3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm3);
      if (RiskRm4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm4);
      if (RiskRm5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm5);
      if (RiskRm6 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm6);
      if (RiskRm7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskRm7);
      if (MarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVDn);
      if (MarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVUp);
      if (MarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVDn);
      if (MarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVUp);
      if (RiskU15Dn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU15Dn);
      if (RiskU15Up != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU15Up);
      if (RiskU50Dn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU50Dn);
      if (RiskU50Up != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskU50Up);
      if (FillBrkrRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBrkrRate);
      if (FillRoutingRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRoutingRate);
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) hash ^= RiskCode.GetHashCode();
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) hash ^= BillingSecType.GetHashCode();
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) hash ^= BillingCategory.GetHashCode();
      if (SpdrLiquidityTag.Length != 0) hash ^= SpdrLiquidityTag.GetHashCode();
      if (ExchLiquidityTag.Length != 0) hash ^= ExchLiquidityTag.GetHashCode();
      if (FillExchDetail.Length != 0) hash ^= FillExchDetail.GetHashCode();
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) hash ^= LastCapacity.GetHashCode();
      if (ExchFirmType.Length != 0) hash ^= ExchFirmType.GetHashCode();
      if (ExtExecBroker.Length != 0) hash ^= ExtExecBroker.GetHashCode();
      if (RelationshipType != global::Spiderrock.Protobuf.RelationshipType.Unspecified) hash ^= RelationshipType.GetHashCode();
      if (ClArriveMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClArriveMark);
      if (parentDttm_ != null) hash ^= ParentDttm.GetHashCode();
      if (ParentOrderSize != 0) hash ^= ParentOrderSize.GetHashCode();
      if (ParentUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentUBid);
      if (ParentUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentUAsk);
      if (ParentUMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentUMark);
      if (ParentBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentBid);
      if (ParentAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentAsk);
      if (ParentMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentMark);
      if (ParentFairWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentFairWidth);
      if (ParentSurfVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentSurfVol);
      if (ParentLimitVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentLimitVol);
      if (ParentLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentLimitPrc);
      if (ParentLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentLimitRefUPrc);
      if (ParentTheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentTheoVol);
      if (ParentTheoPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentTheoPrc);
      if (ParentPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= ParentPosType.GetHashCode();
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= ParentSSaleFlag.GetHashCode();
      if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
      if (NumMakeExchanges != 0) hash ^= NumMakeExchanges.GetHashCode();
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) hash ^= PublicSize.GetHashCode();
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CanOverlapCxlRepl.GetHashCode();
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) hash ^= ProgressRule.GetHashCode();
      if (ExchMaskEnabled != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ExchMaskEnabled.GetHashCode();
      if (TimeInForce != global::Spiderrock.Protobuf.TimeInForce.Unspecified) hash ^= TimeInForce.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= OrderLimitClass.GetHashCode();
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) hash ^= TakeReachRule.GetHashCode();
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) hash ^= OverrideCode.GetHashCode();
      if (AlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= AlphaType.GetHashCode();
      if (ParentStrategy.Length != 0) hash ^= ParentStrategy.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
      if (HedgeBetaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeBetaRatio);
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) hash ^= HedgeScope.GetHashCode();
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (UPrcRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcRatio);
      if (MinTickSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTickSize);
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (LiveUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc);
      if (LiveMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveMark);
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (SgwTimestamp != 0L) hash ^= SgwTimestamp.GetHashCode();
      if (EngTimestamp != 0L) hash ^= EngTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) hash ^= DataCenterV7.GetHashCode();
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) hash ^= FaceSideV7.GetHashCode();
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) hash ^= FaceShapeV7.GetHashCode();
      if (ChildLocateSourceV7.Length != 0) hash ^= ChildLocateSourceV7.GetHashCode();
      if (FillPrV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillPrV7);
      if (FillRiskMetric1V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric1V7);
      if (FillRiskMetric2V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric2V7);
      if (FillRiskMetric3V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric3V7);
      if (FillRiskMetric4V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric4V7);
      if (FillRiskMetric5V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric5V7);
      if (FillRiskMetric6V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric6V7);
      if (FillRiskMetric7V7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRiskMetric7V7);
      if (FillS08DnV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS08DnV7);
      if (FillS06UpV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS06UpV7);
      if (FillS15DnV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS15DnV7);
      if (FillS15UpV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS15UpV7);
      if (FillS50DnV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS50DnV7);
      if (FillS50UpV7 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillS50UpV7);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (Version != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExecShape);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(PackageId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (ParentVersion != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(ClOrdId);
      }
      if (ReviewClOrdId.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(ReviewClOrdId);
      }
      if (AltFillId != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(AltFillId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(AltOrderId);
      }
      if (AltCrossId.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(AltCrossId);
      }
      if (AltLegRefId.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(AltLegRefId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(SrcRoutingCode);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(TriggerTimestamp);
      }
      if (StreetClOrdId.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(StreetClOrdId);
      }
      if (StreetOrderId.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(StreetOrderId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ParentShape);
      }
      if (secKey_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 11);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(184, 12);
        output.WriteInt64(GroupingCode);
      }
      if (CoreClientFirm.Length != 0) {
        output.WriteRawTag(194, 12);
        output.WriteString(CoreClientFirm);
      }
      if (SponsorClientFirm.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(SponsorClientFirm);
      }
      if (RoutingCode.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(RoutingCode);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(130, 13);
        output.WriteString(GatewayName);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(ExecBrkrCode);
      }
      if (ExecBrkrMPID.Length != 0) {
        output.WriteRawTag(202, 13);
        output.WriteString(ExecBrkrMPID);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(218, 14);
        output.WriteString(ClearingFlipAccnt);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(242, 14);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(ClearingAccnt);
      }
      if (OrigExecID.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        output.WriteRawTag(186, 15);
        output.WriteString(LastExecID);
      }
      if (RemoteText.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(RemoteText);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(152, 16);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(AvgFillPrice);
      }
      if (CumLegFillQuantity != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        output.WriteRawTag(249, 16);
        output.WriteDouble(AvgLegFillPrice);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) PriceType);
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(192, 17);
        output.WriteEnum((int) ChildShape);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(216, 17);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(ChildPrice);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(138, 18);
        output.WriteMessage(ChildDttm);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(162, 18);
        output.WriteString(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(186, 18);
        output.WriteString(ChildExDest);
      }
      if (ChildExecBroker.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(ChildExecBroker);
      }
      if (ChildIsDirected != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) ChildIsDirected);
      }
      if (ChildIsoSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ChildIsoSweep);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMakerTaker != global::Spiderrock.Protobuf.MakerTaker.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) ChildMakerTaker);
      }
      if (ChildUBid != 0D) {
        output.WriteRawTag(145, 20);
        output.WriteDouble(ChildUBid);
      }
      if (ChildUAsk != 0D) {
        output.WriteRawTag(169, 20);
        output.WriteDouble(ChildUAsk);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(193, 20);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(ChildAsk);
      }
      if (ChildMark != 0D) {
        output.WriteRawTag(241, 20);
        output.WriteDouble(ChildMark);
      }
      if (ChildFairWidth != 0D) {
        output.WriteRawTag(137, 21);
        output.WriteDouble(ChildFairWidth);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(209, 21);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(233, 21);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildVolAtm != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(ChildVolAtm);
      }
      if (ChildPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) ChildPosType);
      }
      if (ChildFirmOptPosition != 0) {
        output.WriteRawTag(176, 22);
        output.WriteInt32(ChildFirmOptPosition);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(200, 22);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (ChildFirmStkPosition != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(ChildFirmStkPosition);
      }
      if (ChildFirmOpenOrders != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(ChildFirmOpenOrders);
      }
      if (ChildLocateQuan != 0) {
        output.WriteRawTag(144, 23);
        output.WriteInt32(ChildLocateQuan);
      }
      if (ChildLocateFirm.Length != 0) {
        output.WriteRawTag(170, 23);
        output.WriteString(ChildLocateFirm);
      }
      if (ChildLocatePool.Length != 0) {
        output.WriteRawTag(194, 23);
        output.WriteString(ChildLocatePool);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(216, 23);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 23);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(ChildCxlFillLatency);
      }
      if (ChildMethod.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(ChildMethod);
      }
      if (ChildSource.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(ChildSource);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(234, 24);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(130, 25);
        output.WriteString(SecAggGroup);
      }
      if (DirectedClientFirm.Length != 0) {
        output.WriteRawTag(154, 25);
        output.WriteString(DirectedClientFirm);
      }
      if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 25);
        output.WriteEnum((int) IsCommPaying);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(202, 25);
        output.WriteMessage(FillTransactDttm);
      }
      if (FillTs != 0D) {
        output.WriteRawTag(225, 25);
        output.WriteDouble(FillTs);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(250, 25);
        output.WriteMessage(FillDttm);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(146, 26);
        output.WriteString(FillExch);
      }
      if (FillExecId.Length != 0) {
        output.WriteRawTag(170, 26);
        output.WriteString(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        output.WriteRawTag(194, 26);
        output.WriteString(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        output.WriteRawTag(216, 26);
        output.WriteInt64(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        output.WriteRawTag(240, 26);
        output.WriteInt32(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(FillExchFee);
      }
      if (FillMarket.Length != 0) {
        output.WriteRawTag(162, 27);
        output.WriteString(FillMarket);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(185, 27);
        output.WriteDouble(FillPrice);
      }
      if (FillQuantity != 0) {
        output.WriteRawTag(208, 27);
        output.WriteInt32(FillQuantity);
      }
      if (FillReportDetail.Length != 0) {
        output.WriteRawTag(234, 27);
        output.WriteString(FillReportDetail);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(129, 28);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(153, 28);
        output.WriteDouble(FillAsk);
      }
      if (FillMark != 0D) {
        output.WriteRawTag(177, 28);
        output.WriteDouble(FillMark);
      }
      if (FillFairWidth != 0D) {
        output.WriteRawTag(201, 28);
        output.WriteDouble(FillFairWidth);
      }
      if (FillUMark != 0D) {
        output.WriteRawTag(225, 28);
        output.WriteDouble(FillUMark);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(249, 28);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(145, 29);
        output.WriteDouble(FillUAsk);
      }
      if (FillUBidSz != 0) {
        output.WriteRawTag(168, 29);
        output.WriteInt32(FillUBidSz);
      }
      if (FillUAskSz != 0) {
        output.WriteRawTag(192, 29);
        output.WriteInt32(FillUAskSz);
      }
      if (FillVolAtm != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(FillVolAtm);
      }
      if (FillMark1M != 0D) {
        output.WriteRawTag(241, 29);
        output.WriteDouble(FillMark1M);
      }
      if (FillMark10M != 0D) {
        output.WriteRawTag(137, 30);
        output.WriteDouble(FillMark10M);
      }
      if (FillBid1M != 0D) {
        output.WriteRawTag(161, 30);
        output.WriteDouble(FillBid1M);
      }
      if (FillAsk1M != 0D) {
        output.WriteRawTag(185, 30);
        output.WriteDouble(FillAsk1M);
      }
      if (FillBid10M != 0D) {
        output.WriteRawTag(209, 30);
        output.WriteDouble(FillBid10M);
      }
      if (FillAsk10M != 0D) {
        output.WriteRawTag(233, 30);
        output.WriteDouble(FillAsk10M);
      }
      if (FillUMark1M != 0D) {
        output.WriteRawTag(129, 31);
        output.WriteDouble(FillUMark1M);
      }
      if (FillUMark10M != 0D) {
        output.WriteRawTag(153, 31);
        output.WriteDouble(FillUMark10M);
      }
      if (FillVolAtm1M != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(FillVolAtm1M);
      }
      if (FillVolAtm10M != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(FillVolAtm10M);
      }
      if (FillState1M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        output.WriteRawTag(224, 31);
        output.WriteEnum((int) FillState1M);
      }
      if (FillState10M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        output.WriteRawTag(248, 31);
        output.WriteEnum((int) FillState10M);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(FillVol);
      }
      if (FillVolS != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(FillVolS);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(FillProb);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(217, 32);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillLimitRefSDiv != 0D) {
        output.WriteRawTag(241, 32);
        output.WriteDouble(FillLimitRefSDiv);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(137, 33);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(FillVe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(FillGa);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(FillDe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(FillTh);
      }
      if (FillVeRatio != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(FillVeRatio);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillBeta);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(253, 37);
        output.WriteFloat(FillRoutingRate);
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        output.WriteRawTag(144, 38);
        output.WriteEnum((int) RiskCode);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(168, 38);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(192, 38);
        output.WriteEnum((int) BillingCategory);
      }
      if (SpdrLiquidityTag.Length != 0) {
        output.WriteRawTag(218, 38);
        output.WriteString(SpdrLiquidityTag);
      }
      if (ExchLiquidityTag.Length != 0) {
        output.WriteRawTag(242, 38);
        output.WriteString(ExchLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        output.WriteRawTag(138, 39);
        output.WriteString(FillExchDetail);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(160, 39);
        output.WriteEnum((int) LastCapacity);
      }
      if (ExchFirmType.Length != 0) {
        output.WriteRawTag(186, 39);
        output.WriteString(ExchFirmType);
      }
      if (ExtExecBroker.Length != 0) {
        output.WriteRawTag(210, 39);
        output.WriteString(ExtExecBroker);
      }
      if (RelationshipType != global::Spiderrock.Protobuf.RelationshipType.Unspecified) {
        output.WriteRawTag(232, 39);
        output.WriteEnum((int) RelationshipType);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(ClArriveMark);
      }
      if (parentDttm_ != null) {
        output.WriteRawTag(154, 40);
        output.WriteMessage(ParentDttm);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(176, 40);
        output.WriteInt32(ParentOrderSize);
      }
      if (ParentUBid != 0D) {
        output.WriteRawTag(201, 40);
        output.WriteDouble(ParentUBid);
      }
      if (ParentUAsk != 0D) {
        output.WriteRawTag(225, 40);
        output.WriteDouble(ParentUAsk);
      }
      if (ParentUMark != 0D) {
        output.WriteRawTag(249, 40);
        output.WriteDouble(ParentUMark);
      }
      if (ParentBid != 0D) {
        output.WriteRawTag(145, 41);
        output.WriteDouble(ParentBid);
      }
      if (ParentAsk != 0D) {
        output.WriteRawTag(169, 41);
        output.WriteDouble(ParentAsk);
      }
      if (ParentMark != 0D) {
        output.WriteRawTag(193, 41);
        output.WriteDouble(ParentMark);
      }
      if (ParentFairWidth != 0D) {
        output.WriteRawTag(217, 41);
        output.WriteDouble(ParentFairWidth);
      }
      if (ParentSurfVol != 0D) {
        output.WriteRawTag(241, 41);
        output.WriteDouble(ParentSurfVol);
      }
      if (ParentLimitVol != 0F) {
        output.WriteRawTag(141, 42);
        output.WriteFloat(ParentLimitVol);
      }
      if (ParentLimitPrc != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(ParentLimitPrc);
      }
      if (ParentLimitRefUPrc != 0D) {
        output.WriteRawTag(185, 42);
        output.WriteDouble(ParentLimitRefUPrc);
      }
      if (ParentTheoVol != 0F) {
        output.WriteRawTag(213, 42);
        output.WriteFloat(ParentTheoVol);
      }
      if (ParentTheoPrc != 0F) {
        output.WriteRawTag(237, 42);
        output.WriteFloat(ParentTheoPrc);
      }
      if (ParentPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(128, 43);
        output.WriteEnum((int) ParentPosType);
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) ParentSSaleFlag);
      }
      if (NoticeNumber != 0L) {
        output.WriteRawTag(176, 43);
        output.WriteInt64(NoticeNumber);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(200, 43);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(224, 43);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 43);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(144, 44);
        output.WriteEnum((int) ProgressRule);
      }
      if (ExchMaskEnabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 44);
        output.WriteEnum((int) ExchMaskEnabled);
      }
      if (TimeInForce != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        output.WriteRawTag(192, 44);
        output.WriteEnum((int) TimeInForce);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(216, 44);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(240, 44);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(136, 45);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(160, 45);
        output.WriteEnum((int) OrderLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(184, 45);
        output.WriteEnum((int) TakeReachRule);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(208, 45);
        output.WriteEnum((int) OverrideCode);
      }
      if (AlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 45);
        output.WriteEnum((int) AlphaType);
      }
      if (ParentStrategy.Length != 0) {
        output.WriteRawTag(130, 46);
        output.WriteString(ParentStrategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(154, 46);
        output.WriteString(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(176, 46);
        output.WriteEnum((int) AutoHedge);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(202, 46);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(224, 46);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(253, 46);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(144, 47);
        output.WriteEnum((int) HedgeScope);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(170, 47);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(194, 47);
        output.WriteString(UserData2);
      }
      if (Years != 0F) {
        output.WriteRawTag(221, 47);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(240, 47);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(136, 48);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(165, 48);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(189, 48);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(208, 48);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(237, 48);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(133, 49);
        output.WriteFloat(MinTickSize);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(152, 49);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(176, 49);
        output.WriteEnum((int) UPriceFormat);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(201, 49);
        output.WriteDouble(LiveUPrc);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(225, 49);
        output.WriteDouble(LiveMark);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(248, 49);
        output.WriteInt64(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        output.WriteRawTag(144, 50);
        output.WriteInt64(SgwTimestamp);
      }
      if (EngTimestamp != 0L) {
        output.WriteRawTag(168, 50);
        output.WriteInt64(EngTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 50);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(202, 50);
        output.WriteString(EngineName);
      }
      if (RiskVega != 0F) {
        output.WriteRawTag(213, 50);
        output.WriteFloat(RiskVega);
      }
      if (RiskWtVega != 0F) {
        output.WriteRawTag(221, 50);
        output.WriteFloat(RiskWtVega);
      }
      if (RiskNValue != 0F) {
        output.WriteRawTag(229, 50);
        output.WriteFloat(RiskNValue);
      }
      if (RiskDelta != 0F) {
        output.WriteRawTag(237, 50);
        output.WriteFloat(RiskDelta);
      }
      if (RiskDDelta != 0F) {
        output.WriteRawTag(245, 50);
        output.WriteFloat(RiskDDelta);
      }
      if (RiskRm1 != 0F) {
        output.WriteRawTag(253, 50);
        output.WriteFloat(RiskRm1);
      }
      if (RiskRm2 != 0F) {
        output.WriteRawTag(133, 51);
        output.WriteFloat(RiskRm2);
      }
      if (RiskRm3 != 0F) {
        output.WriteRawTag(141, 51);
        output.WriteFloat(RiskRm3);
      }
      if (RiskRm4 != 0F) {
        output.WriteRawTag(149, 51);
        output.WriteFloat(RiskRm4);
      }
      if (RiskRm5 != 0F) {
        output.WriteRawTag(157, 51);
        output.WriteFloat(RiskRm5);
      }
      if (RiskRm6 != 0F) {
        output.WriteRawTag(165, 51);
        output.WriteFloat(RiskRm6);
      }
      if (RiskRm7 != 0F) {
        output.WriteRawTag(173, 51);
        output.WriteFloat(RiskRm7);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(181, 51);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(189, 51);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(197, 51);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(205, 51);
        output.WriteFloat(MarginUUpVUp);
      }
      if (RiskU15Dn != 0F) {
        output.WriteRawTag(213, 51);
        output.WriteFloat(RiskU15Dn);
      }
      if (RiskU15Up != 0F) {
        output.WriteRawTag(221, 51);
        output.WriteFloat(RiskU15Up);
      }
      if (RiskU50Dn != 0F) {
        output.WriteRawTag(229, 51);
        output.WriteFloat(RiskU50Dn);
      }
      if (RiskU50Up != 0F) {
        output.WriteRawTag(237, 51);
        output.WriteFloat(RiskU50Up);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        output.WriteRawTag(200, 184, 2);
        output.WriteEnum((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        output.WriteRawTag(208, 184, 2);
        output.WriteEnum((int) FaceShapeV7);
      }
      if (ChildLocateSourceV7.Length != 0) {
        output.WriteRawTag(218, 184, 2);
        output.WriteString(ChildLocateSourceV7);
      }
      if (FillPrV7 != 0F) {
        output.WriteRawTag(229, 184, 2);
        output.WriteFloat(FillPrV7);
      }
      if (FillRiskMetric1V7 != 0F) {
        output.WriteRawTag(237, 184, 2);
        output.WriteFloat(FillRiskMetric1V7);
      }
      if (FillRiskMetric2V7 != 0F) {
        output.WriteRawTag(245, 184, 2);
        output.WriteFloat(FillRiskMetric2V7);
      }
      if (FillRiskMetric3V7 != 0F) {
        output.WriteRawTag(253, 184, 2);
        output.WriteFloat(FillRiskMetric3V7);
      }
      if (FillRiskMetric4V7 != 0F) {
        output.WriteRawTag(133, 185, 2);
        output.WriteFloat(FillRiskMetric4V7);
      }
      if (FillRiskMetric5V7 != 0F) {
        output.WriteRawTag(141, 185, 2);
        output.WriteFloat(FillRiskMetric5V7);
      }
      if (FillRiskMetric6V7 != 0F) {
        output.WriteRawTag(149, 185, 2);
        output.WriteFloat(FillRiskMetric6V7);
      }
      if (FillRiskMetric7V7 != 0F) {
        output.WriteRawTag(157, 185, 2);
        output.WriteFloat(FillRiskMetric7V7);
      }
      if (FillS08DnV7 != 0F) {
        output.WriteRawTag(165, 185, 2);
        output.WriteFloat(FillS08DnV7);
      }
      if (FillS06UpV7 != 0F) {
        output.WriteRawTag(173, 185, 2);
        output.WriteFloat(FillS06UpV7);
      }
      if (FillS15DnV7 != 0F) {
        output.WriteRawTag(181, 185, 2);
        output.WriteFloat(FillS15DnV7);
      }
      if (FillS15UpV7 != 0F) {
        output.WriteRawTag(189, 185, 2);
        output.WriteFloat(FillS15UpV7);
      }
      if (FillS50DnV7 != 0F) {
        output.WriteRawTag(197, 185, 2);
        output.WriteFloat(FillS50DnV7);
      }
      if (FillS50UpV7 != 0F) {
        output.WriteRawTag(205, 185, 2);
        output.WriteFloat(FillS50UpV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (Version != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExecShape);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(PackageId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentNumber);
      }
      if (ParentVersion != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(ClOrdId);
      }
      if (ReviewClOrdId.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(ReviewClOrdId);
      }
      if (AltFillId != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(AltFillId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(AltOrderId);
      }
      if (AltCrossId.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(AltCrossId);
      }
      if (AltLegRefId.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(AltLegRefId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(SrcRoutingCode);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        output.WriteRawTag(152, 10);
        output.WriteInt64(TriggerTimestamp);
      }
      if (StreetClOrdId.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(StreetClOrdId);
      }
      if (StreetOrderId.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(StreetOrderId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) ParentShape);
      }
      if (secKey_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 11);
        output.WriteMessage(Ticker);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(242, 11);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(184, 12);
        output.WriteInt64(GroupingCode);
      }
      if (CoreClientFirm.Length != 0) {
        output.WriteRawTag(194, 12);
        output.WriteString(CoreClientFirm);
      }
      if (SponsorClientFirm.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(SponsorClientFirm);
      }
      if (RoutingCode.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(RoutingCode);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(130, 13);
        output.WriteString(GatewayName);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(178, 13);
        output.WriteString(ExecBrkrCode);
      }
      if (ExecBrkrMPID.Length != 0) {
        output.WriteRawTag(202, 13);
        output.WriteString(ExecBrkrMPID);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(226, 13);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(250, 13);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(218, 14);
        output.WriteString(ClearingFlipAccnt);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(242, 14);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(ClearingAccnt);
      }
      if (OrigExecID.Length != 0) {
        output.WriteRawTag(162, 15);
        output.WriteString(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        output.WriteRawTag(186, 15);
        output.WriteString(LastExecID);
      }
      if (RemoteText.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(RemoteText);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(152, 16);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(AvgFillPrice);
      }
      if (CumLegFillQuantity != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        output.WriteRawTag(249, 16);
        output.WriteDouble(AvgLegFillPrice);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) PriceType);
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(192, 17);
        output.WriteEnum((int) ChildShape);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(216, 17);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(ChildPrice);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(138, 18);
        output.WriteMessage(ChildDttm);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(162, 18);
        output.WriteString(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(186, 18);
        output.WriteString(ChildExDest);
      }
      if (ChildExecBroker.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(ChildExecBroker);
      }
      if (ChildIsDirected != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) ChildIsDirected);
      }
      if (ChildIsoSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ChildIsoSweep);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMakerTaker != global::Spiderrock.Protobuf.MakerTaker.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) ChildMakerTaker);
      }
      if (ChildUBid != 0D) {
        output.WriteRawTag(145, 20);
        output.WriteDouble(ChildUBid);
      }
      if (ChildUAsk != 0D) {
        output.WriteRawTag(169, 20);
        output.WriteDouble(ChildUAsk);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(193, 20);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(ChildAsk);
      }
      if (ChildMark != 0D) {
        output.WriteRawTag(241, 20);
        output.WriteDouble(ChildMark);
      }
      if (ChildFairWidth != 0D) {
        output.WriteRawTag(137, 21);
        output.WriteDouble(ChildFairWidth);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(209, 21);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(233, 21);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildVolAtm != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(ChildVolAtm);
      }
      if (ChildPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) ChildPosType);
      }
      if (ChildFirmOptPosition != 0) {
        output.WriteRawTag(176, 22);
        output.WriteInt32(ChildFirmOptPosition);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(200, 22);
        output.WriteEnum((int) ChildSSaleFlag);
      }
      if (ChildFirmStkPosition != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(ChildFirmStkPosition);
      }
      if (ChildFirmOpenOrders != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(ChildFirmOpenOrders);
      }
      if (ChildLocateQuan != 0) {
        output.WriteRawTag(144, 23);
        output.WriteInt32(ChildLocateQuan);
      }
      if (ChildLocateFirm.Length != 0) {
        output.WriteRawTag(170, 23);
        output.WriteString(ChildLocateFirm);
      }
      if (ChildLocatePool.Length != 0) {
        output.WriteRawTag(194, 23);
        output.WriteString(ChildLocatePool);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(216, 23);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(240, 23);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(ChildCxlFillLatency);
      }
      if (ChildMethod.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(ChildMethod);
      }
      if (ChildSource.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(ChildSource);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(234, 24);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(130, 25);
        output.WriteString(SecAggGroup);
      }
      if (DirectedClientFirm.Length != 0) {
        output.WriteRawTag(154, 25);
        output.WriteString(DirectedClientFirm);
      }
      if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 25);
        output.WriteEnum((int) IsCommPaying);
      }
      if (fillTransactDttm_ != null) {
        output.WriteRawTag(202, 25);
        output.WriteMessage(FillTransactDttm);
      }
      if (FillTs != 0D) {
        output.WriteRawTag(225, 25);
        output.WriteDouble(FillTs);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(250, 25);
        output.WriteMessage(FillDttm);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(146, 26);
        output.WriteString(FillExch);
      }
      if (FillExecId.Length != 0) {
        output.WriteRawTag(170, 26);
        output.WriteString(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        output.WriteRawTag(194, 26);
        output.WriteString(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        output.WriteRawTag(216, 26);
        output.WriteInt64(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        output.WriteRawTag(240, 26);
        output.WriteInt32(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(FillExchFee);
      }
      if (FillMarket.Length != 0) {
        output.WriteRawTag(162, 27);
        output.WriteString(FillMarket);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(185, 27);
        output.WriteDouble(FillPrice);
      }
      if (FillQuantity != 0) {
        output.WriteRawTag(208, 27);
        output.WriteInt32(FillQuantity);
      }
      if (FillReportDetail.Length != 0) {
        output.WriteRawTag(234, 27);
        output.WriteString(FillReportDetail);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(129, 28);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(153, 28);
        output.WriteDouble(FillAsk);
      }
      if (FillMark != 0D) {
        output.WriteRawTag(177, 28);
        output.WriteDouble(FillMark);
      }
      if (FillFairWidth != 0D) {
        output.WriteRawTag(201, 28);
        output.WriteDouble(FillFairWidth);
      }
      if (FillUMark != 0D) {
        output.WriteRawTag(225, 28);
        output.WriteDouble(FillUMark);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(249, 28);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(145, 29);
        output.WriteDouble(FillUAsk);
      }
      if (FillUBidSz != 0) {
        output.WriteRawTag(168, 29);
        output.WriteInt32(FillUBidSz);
      }
      if (FillUAskSz != 0) {
        output.WriteRawTag(192, 29);
        output.WriteInt32(FillUAskSz);
      }
      if (FillVolAtm != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(FillVolAtm);
      }
      if (FillMark1M != 0D) {
        output.WriteRawTag(241, 29);
        output.WriteDouble(FillMark1M);
      }
      if (FillMark10M != 0D) {
        output.WriteRawTag(137, 30);
        output.WriteDouble(FillMark10M);
      }
      if (FillBid1M != 0D) {
        output.WriteRawTag(161, 30);
        output.WriteDouble(FillBid1M);
      }
      if (FillAsk1M != 0D) {
        output.WriteRawTag(185, 30);
        output.WriteDouble(FillAsk1M);
      }
      if (FillBid10M != 0D) {
        output.WriteRawTag(209, 30);
        output.WriteDouble(FillBid10M);
      }
      if (FillAsk10M != 0D) {
        output.WriteRawTag(233, 30);
        output.WriteDouble(FillAsk10M);
      }
      if (FillUMark1M != 0D) {
        output.WriteRawTag(129, 31);
        output.WriteDouble(FillUMark1M);
      }
      if (FillUMark10M != 0D) {
        output.WriteRawTag(153, 31);
        output.WriteDouble(FillUMark10M);
      }
      if (FillVolAtm1M != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(FillVolAtm1M);
      }
      if (FillVolAtm10M != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(FillVolAtm10M);
      }
      if (FillState1M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        output.WriteRawTag(224, 31);
        output.WriteEnum((int) FillState1M);
      }
      if (FillState10M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        output.WriteRawTag(248, 31);
        output.WriteEnum((int) FillState10M);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(FillVol);
      }
      if (FillVolS != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(FillVolS);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(FillProb);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(217, 32);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillLimitRefSDiv != 0D) {
        output.WriteRawTag(241, 32);
        output.WriteDouble(FillLimitRefSDiv);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(137, 33);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(FillVe);
      }
      if (FillGa != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(FillGa);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(FillDe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(FillTh);
      }
      if (FillVeRatio != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(FillVeRatio);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillBeta);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(253, 37);
        output.WriteFloat(FillRoutingRate);
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        output.WriteRawTag(144, 38);
        output.WriteEnum((int) RiskCode);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(168, 38);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(192, 38);
        output.WriteEnum((int) BillingCategory);
      }
      if (SpdrLiquidityTag.Length != 0) {
        output.WriteRawTag(218, 38);
        output.WriteString(SpdrLiquidityTag);
      }
      if (ExchLiquidityTag.Length != 0) {
        output.WriteRawTag(242, 38);
        output.WriteString(ExchLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        output.WriteRawTag(138, 39);
        output.WriteString(FillExchDetail);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(160, 39);
        output.WriteEnum((int) LastCapacity);
      }
      if (ExchFirmType.Length != 0) {
        output.WriteRawTag(186, 39);
        output.WriteString(ExchFirmType);
      }
      if (ExtExecBroker.Length != 0) {
        output.WriteRawTag(210, 39);
        output.WriteString(ExtExecBroker);
      }
      if (RelationshipType != global::Spiderrock.Protobuf.RelationshipType.Unspecified) {
        output.WriteRawTag(232, 39);
        output.WriteEnum((int) RelationshipType);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(ClArriveMark);
      }
      if (parentDttm_ != null) {
        output.WriteRawTag(154, 40);
        output.WriteMessage(ParentDttm);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(176, 40);
        output.WriteInt32(ParentOrderSize);
      }
      if (ParentUBid != 0D) {
        output.WriteRawTag(201, 40);
        output.WriteDouble(ParentUBid);
      }
      if (ParentUAsk != 0D) {
        output.WriteRawTag(225, 40);
        output.WriteDouble(ParentUAsk);
      }
      if (ParentUMark != 0D) {
        output.WriteRawTag(249, 40);
        output.WriteDouble(ParentUMark);
      }
      if (ParentBid != 0D) {
        output.WriteRawTag(145, 41);
        output.WriteDouble(ParentBid);
      }
      if (ParentAsk != 0D) {
        output.WriteRawTag(169, 41);
        output.WriteDouble(ParentAsk);
      }
      if (ParentMark != 0D) {
        output.WriteRawTag(193, 41);
        output.WriteDouble(ParentMark);
      }
      if (ParentFairWidth != 0D) {
        output.WriteRawTag(217, 41);
        output.WriteDouble(ParentFairWidth);
      }
      if (ParentSurfVol != 0D) {
        output.WriteRawTag(241, 41);
        output.WriteDouble(ParentSurfVol);
      }
      if (ParentLimitVol != 0F) {
        output.WriteRawTag(141, 42);
        output.WriteFloat(ParentLimitVol);
      }
      if (ParentLimitPrc != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(ParentLimitPrc);
      }
      if (ParentLimitRefUPrc != 0D) {
        output.WriteRawTag(185, 42);
        output.WriteDouble(ParentLimitRefUPrc);
      }
      if (ParentTheoVol != 0F) {
        output.WriteRawTag(213, 42);
        output.WriteFloat(ParentTheoVol);
      }
      if (ParentTheoPrc != 0F) {
        output.WriteRawTag(237, 42);
        output.WriteFloat(ParentTheoPrc);
      }
      if (ParentPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(128, 43);
        output.WriteEnum((int) ParentPosType);
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(152, 43);
        output.WriteEnum((int) ParentSSaleFlag);
      }
      if (NoticeNumber != 0L) {
        output.WriteRawTag(176, 43);
        output.WriteInt64(NoticeNumber);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(200, 43);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(224, 43);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 43);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(144, 44);
        output.WriteEnum((int) ProgressRule);
      }
      if (ExchMaskEnabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 44);
        output.WriteEnum((int) ExchMaskEnabled);
      }
      if (TimeInForce != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        output.WriteRawTag(192, 44);
        output.WriteEnum((int) TimeInForce);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(216, 44);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(240, 44);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(136, 45);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(160, 45);
        output.WriteEnum((int) OrderLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        output.WriteRawTag(184, 45);
        output.WriteEnum((int) TakeReachRule);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(208, 45);
        output.WriteEnum((int) OverrideCode);
      }
      if (AlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 45);
        output.WriteEnum((int) AlphaType);
      }
      if (ParentStrategy.Length != 0) {
        output.WriteRawTag(130, 46);
        output.WriteString(ParentStrategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(154, 46);
        output.WriteString(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(176, 46);
        output.WriteEnum((int) AutoHedge);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(202, 46);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(224, 46);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(253, 46);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(144, 47);
        output.WriteEnum((int) HedgeScope);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(170, 47);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(194, 47);
        output.WriteString(UserData2);
      }
      if (Years != 0F) {
        output.WriteRawTag(221, 47);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(240, 47);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(136, 48);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(165, 48);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(189, 48);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(208, 48);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(237, 48);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(133, 49);
        output.WriteFloat(MinTickSize);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(152, 49);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(176, 49);
        output.WriteEnum((int) UPriceFormat);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(201, 49);
        output.WriteDouble(LiveUPrc);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(225, 49);
        output.WriteDouble(LiveMark);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(248, 49);
        output.WriteInt64(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        output.WriteRawTag(144, 50);
        output.WriteInt64(SgwTimestamp);
      }
      if (EngTimestamp != 0L) {
        output.WriteRawTag(168, 50);
        output.WriteInt64(EngTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(194, 50);
        output.WriteMessage(Timestamp);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(202, 50);
        output.WriteString(EngineName);
      }
      if (RiskVega != 0F) {
        output.WriteRawTag(213, 50);
        output.WriteFloat(RiskVega);
      }
      if (RiskWtVega != 0F) {
        output.WriteRawTag(221, 50);
        output.WriteFloat(RiskWtVega);
      }
      if (RiskNValue != 0F) {
        output.WriteRawTag(229, 50);
        output.WriteFloat(RiskNValue);
      }
      if (RiskDelta != 0F) {
        output.WriteRawTag(237, 50);
        output.WriteFloat(RiskDelta);
      }
      if (RiskDDelta != 0F) {
        output.WriteRawTag(245, 50);
        output.WriteFloat(RiskDDelta);
      }
      if (RiskRm1 != 0F) {
        output.WriteRawTag(253, 50);
        output.WriteFloat(RiskRm1);
      }
      if (RiskRm2 != 0F) {
        output.WriteRawTag(133, 51);
        output.WriteFloat(RiskRm2);
      }
      if (RiskRm3 != 0F) {
        output.WriteRawTag(141, 51);
        output.WriteFloat(RiskRm3);
      }
      if (RiskRm4 != 0F) {
        output.WriteRawTag(149, 51);
        output.WriteFloat(RiskRm4);
      }
      if (RiskRm5 != 0F) {
        output.WriteRawTag(157, 51);
        output.WriteFloat(RiskRm5);
      }
      if (RiskRm6 != 0F) {
        output.WriteRawTag(165, 51);
        output.WriteFloat(RiskRm6);
      }
      if (RiskRm7 != 0F) {
        output.WriteRawTag(173, 51);
        output.WriteFloat(RiskRm7);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(181, 51);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(189, 51);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(197, 51);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(205, 51);
        output.WriteFloat(MarginUUpVUp);
      }
      if (RiskU15Dn != 0F) {
        output.WriteRawTag(213, 51);
        output.WriteFloat(RiskU15Dn);
      }
      if (RiskU15Up != 0F) {
        output.WriteRawTag(221, 51);
        output.WriteFloat(RiskU15Up);
      }
      if (RiskU50Dn != 0F) {
        output.WriteRawTag(229, 51);
        output.WriteFloat(RiskU50Dn);
      }
      if (RiskU50Up != 0F) {
        output.WriteRawTag(237, 51);
        output.WriteFloat(RiskU50Up);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        output.WriteRawTag(200, 184, 2);
        output.WriteEnum((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        output.WriteRawTag(208, 184, 2);
        output.WriteEnum((int) FaceShapeV7);
      }
      if (ChildLocateSourceV7.Length != 0) {
        output.WriteRawTag(218, 184, 2);
        output.WriteString(ChildLocateSourceV7);
      }
      if (FillPrV7 != 0F) {
        output.WriteRawTag(229, 184, 2);
        output.WriteFloat(FillPrV7);
      }
      if (FillRiskMetric1V7 != 0F) {
        output.WriteRawTag(237, 184, 2);
        output.WriteFloat(FillRiskMetric1V7);
      }
      if (FillRiskMetric2V7 != 0F) {
        output.WriteRawTag(245, 184, 2);
        output.WriteFloat(FillRiskMetric2V7);
      }
      if (FillRiskMetric3V7 != 0F) {
        output.WriteRawTag(253, 184, 2);
        output.WriteFloat(FillRiskMetric3V7);
      }
      if (FillRiskMetric4V7 != 0F) {
        output.WriteRawTag(133, 185, 2);
        output.WriteFloat(FillRiskMetric4V7);
      }
      if (FillRiskMetric5V7 != 0F) {
        output.WriteRawTag(141, 185, 2);
        output.WriteFloat(FillRiskMetric5V7);
      }
      if (FillRiskMetric6V7 != 0F) {
        output.WriteRawTag(149, 185, 2);
        output.WriteFloat(FillRiskMetric6V7);
      }
      if (FillRiskMetric7V7 != 0F) {
        output.WriteRawTag(157, 185, 2);
        output.WriteFloat(FillRiskMetric7V7);
      }
      if (FillS08DnV7 != 0F) {
        output.WriteRawTag(165, 185, 2);
        output.WriteFloat(FillS08DnV7);
      }
      if (FillS06UpV7 != 0F) {
        output.WriteRawTag(173, 185, 2);
        output.WriteFloat(FillS06UpV7);
      }
      if (FillS15DnV7 != 0F) {
        output.WriteRawTag(181, 185, 2);
        output.WriteFloat(FillS15DnV7);
      }
      if (FillS15UpV7 != 0F) {
        output.WriteRawTag(189, 185, 2);
        output.WriteFloat(FillS15UpV7);
      }
      if (FillS50DnV7 != 0F) {
        output.WriteRawTag(197, 185, 2);
        output.WriteFloat(FillS50DnV7);
      }
      if (FillS50UpV7 != 0F) {
        output.WriteRawTag(205, 185, 2);
        output.WriteFloat(FillS50UpV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysRealm);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecStatus);
      }
      if (ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecShape);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (ParentVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentVersion);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (ClOrdId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClOrdId);
      }
      if (ReviewClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReviewClOrdId);
      }
      if (AltFillId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AltFillId);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (AltCrossId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltCrossId);
      }
      if (AltLegRefId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltLegRefId);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcRoutingCode);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerGroupId);
      }
      if (TriggerTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerTimestamp);
      }
      if (StreetClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StreetClOrdId);
      }
      if (StreetOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StreetOrderId);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentShape);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (CoreClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CoreClientFirm);
      }
      if (SponsorClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SponsorClientFirm);
      }
      if (RoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoutingCode);
      }
      if (EngineName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (GatewayName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ExecBrkrMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrMPID);
      }
      if (ExecBrkrAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipAccnt);
      }
      if (ClearingFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingAccnt);
      }
      if (OrigExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastExecID);
      }
      if (RemoteText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RemoteText);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (CumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (CumLegFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumLegFillQuantity);
      }
      if (AvgLegFillPrice != 0D) {
        size += 2 + 8;
      }
      if (LeavesQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeavesQty);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildShape);
      }
      if (ChildSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildSize);
      }
      if (ChildPrice != 0D) {
        size += 2 + 8;
      }
      if (childDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChildDttm);
      }
      if (ChildExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExDest);
      }
      if (ChildExecBroker.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExecBroker);
      }
      if (ChildIsDirected != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildIsDirected);
      }
      if (ChildIsoSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildIsoSweep);
      }
      if (ChildOrderHandling.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildOrderHandling);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildAlgoHandler);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCancelReason);
      }
      if (ChildMakerTaker != global::Spiderrock.Protobuf.MakerTaker.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildMakerTaker);
      }
      if (ChildUBid != 0D) {
        size += 2 + 8;
      }
      if (ChildUAsk != 0D) {
        size += 2 + 8;
      }
      if (ChildBid != 0D) {
        size += 2 + 8;
      }
      if (ChildAsk != 0D) {
        size += 2 + 8;
      }
      if (ChildMark != 0D) {
        size += 2 + 8;
      }
      if (ChildFairWidth != 0D) {
        size += 2 + 8;
      }
      if (ChildVol != 0F) {
        size += 2 + 4;
      }
      if (ChildProb != 0F) {
        size += 2 + 4;
      }
      if (ChildLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildVolAtm != 0F) {
        size += 2 + 4;
      }
      if (ChildPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildPosType);
      }
      if (ChildFirmOptPosition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildFirmOptPosition);
      }
      if (ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildSSaleFlag);
      }
      if (ChildFirmStkPosition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildFirmStkPosition);
      }
      if (ChildFirmOpenOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildFirmOpenOrders);
      }
      if (ChildLocateQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildLocateQuan);
      }
      if (ChildLocateFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildLocateFirm);
      }
      if (ChildLocatePool.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildLocatePool);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        size += 2 + 4;
      }
      if (ChildMethod.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildMethod);
      }
      if (ChildSource.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildSource);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (PriAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecAggGroup);
      }
      if (DirectedClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DirectedClientFirm);
      }
      if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsCommPaying);
      }
      if (fillTransactDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillTransactDttm);
      }
      if (FillTs != 0D) {
        size += 2 + 8;
      }
      if (fillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillDttm);
      }
      if (FillExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExch);
      }
      if (FillExecId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExecId);
      }
      if (FillExecRefId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExecRefId);
      }
      if (FillLegRefId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FillLegRefId);
      }
      if (FillLegRatio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillLegRatio);
      }
      if (FillExchFee != 0F) {
        size += 2 + 4;
      }
      if (FillMarket.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillMarket);
      }
      if (FillPrice != 0D) {
        size += 2 + 8;
      }
      if (FillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillQuantity);
      }
      if (FillReportDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillReportDetail);
      }
      if (FillBid != 0D) {
        size += 2 + 8;
      }
      if (FillAsk != 0D) {
        size += 2 + 8;
      }
      if (FillMark != 0D) {
        size += 2 + 8;
      }
      if (FillFairWidth != 0D) {
        size += 2 + 8;
      }
      if (FillUMark != 0D) {
        size += 2 + 8;
      }
      if (FillUBid != 0D) {
        size += 2 + 8;
      }
      if (FillUAsk != 0D) {
        size += 2 + 8;
      }
      if (FillUBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillUBidSz);
      }
      if (FillUAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillUAskSz);
      }
      if (FillVolAtm != 0F) {
        size += 2 + 4;
      }
      if (FillMark1M != 0D) {
        size += 2 + 8;
      }
      if (FillMark10M != 0D) {
        size += 2 + 8;
      }
      if (FillBid1M != 0D) {
        size += 2 + 8;
      }
      if (FillAsk1M != 0D) {
        size += 2 + 8;
      }
      if (FillBid10M != 0D) {
        size += 2 + 8;
      }
      if (FillAsk10M != 0D) {
        size += 2 + 8;
      }
      if (FillUMark1M != 0D) {
        size += 2 + 8;
      }
      if (FillUMark10M != 0D) {
        size += 2 + 8;
      }
      if (FillVolAtm1M != 0F) {
        size += 2 + 4;
      }
      if (FillVolAtm10M != 0F) {
        size += 2 + 4;
      }
      if (FillState1M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FillState1M);
      }
      if (FillState10M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FillState10M);
      }
      if (FillVol != 0F) {
        size += 2 + 4;
      }
      if (FillVolS != 0F) {
        size += 2 + 4;
      }
      if (FillProb != 0F) {
        size += 2 + 4;
      }
      if (FillLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (FillLimitRefSDiv != 0D) {
        size += 2 + 8;
      }
      if (FillLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (FillVe != 0F) {
        size += 2 + 4;
      }
      if (FillGa != 0F) {
        size += 2 + 4;
      }
      if (FillDe != 0F) {
        size += 2 + 4;
      }
      if (FillTh != 0F) {
        size += 2 + 4;
      }
      if (FillVeRatio != 0F) {
        size += 2 + 4;
      }
      if (FillBeta != 0F) {
        size += 2 + 4;
      }
      if (RiskVega != 0F) {
        size += 2 + 4;
      }
      if (RiskWtVega != 0F) {
        size += 2 + 4;
      }
      if (RiskNValue != 0F) {
        size += 2 + 4;
      }
      if (RiskDelta != 0F) {
        size += 2 + 4;
      }
      if (RiskDDelta != 0F) {
        size += 2 + 4;
      }
      if (RiskRm1 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm2 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm3 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm4 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm5 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm6 != 0F) {
        size += 2 + 4;
      }
      if (RiskRm7 != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (RiskU15Dn != 0F) {
        size += 2 + 4;
      }
      if (RiskU15Up != 0F) {
        size += 2 + 4;
      }
      if (RiskU50Dn != 0F) {
        size += 2 + 4;
      }
      if (RiskU50Up != 0F) {
        size += 2 + 4;
      }
      if (FillBrkrRate != 0F) {
        size += 2 + 4;
      }
      if (FillRoutingRate != 0F) {
        size += 2 + 4;
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskCode);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingCategory);
      }
      if (SpdrLiquidityTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrLiquidityTag);
      }
      if (ExchLiquidityTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExchDetail);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LastCapacity);
      }
      if (ExchFirmType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchFirmType);
      }
      if (ExtExecBroker.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtExecBroker);
      }
      if (RelationshipType != global::Spiderrock.Protobuf.RelationshipType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RelationshipType);
      }
      if (ClArriveMark != 0F) {
        size += 2 + 4;
      }
      if (parentDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParentDttm);
      }
      if (ParentOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentOrderSize);
      }
      if (ParentUBid != 0D) {
        size += 2 + 8;
      }
      if (ParentUAsk != 0D) {
        size += 2 + 8;
      }
      if (ParentUMark != 0D) {
        size += 2 + 8;
      }
      if (ParentBid != 0D) {
        size += 2 + 8;
      }
      if (ParentAsk != 0D) {
        size += 2 + 8;
      }
      if (ParentMark != 0D) {
        size += 2 + 8;
      }
      if (ParentFairWidth != 0D) {
        size += 2 + 8;
      }
      if (ParentSurfVol != 0D) {
        size += 2 + 8;
      }
      if (ParentLimitVol != 0F) {
        size += 2 + 4;
      }
      if (ParentLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (ParentLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ParentTheoVol != 0F) {
        size += 2 + 4;
      }
      if (ParentTheoPrc != 0F) {
        size += 2 + 4;
      }
      if (ParentPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentPosType);
      }
      if (ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentSSaleFlag);
      }
      if (NoticeNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
      }
      if (NumMakeExchanges != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProgressRule);
      }
      if (ExchMaskEnabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExchMaskEnabled);
      }
      if (TimeInForce != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitClass);
      }
      if (TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeReachRule);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverrideCode);
      }
      if (AlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AlphaType);
      }
      if (ParentStrategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentStrategy);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        size += 2 + 4;
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeScope);
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        size += 2 + 4;
      }
      if (MinTickSize != 0F) {
        size += 2 + 4;
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (LiveUPrc != 0D) {
        size += 2 + 8;
      }
      if (LiveMark != 0D) {
        size += 2 + 8;
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (SgwTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SgwTimestamp);
      }
      if (EngTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EngTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) DataCenterV7);
      }
      if (FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) FaceSideV7);
      }
      if (FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) FaceShapeV7);
      }
      if (ChildLocateSourceV7.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ChildLocateSourceV7);
      }
      if (FillPrV7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric1V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric2V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric3V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric4V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric5V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric6V7 != 0F) {
        size += 3 + 4;
      }
      if (FillRiskMetric7V7 != 0F) {
        size += 3 + 4;
      }
      if (FillS08DnV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS06UpV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS15DnV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS15UpV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS50DnV7 != 0F) {
        size += 3 + 4;
      }
      if (FillS50UpV7 != 0F) {
        size += 3 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrParentExecution other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SysRealm != global::Spiderrock.Protobuf.SysRealm.Unspecified) {
        SysRealm = other.SysRealm;
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        RunStatus = other.RunStatus;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        ExecStatus = other.ExecStatus;
      }
      if (other.ExecShape != global::Spiderrock.Protobuf.ExecShape.Unspecified) {
        ExecShape = other.ExecShape;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.ParentVersion != 0) {
        ParentVersion = other.ParentVersion;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.ClOrdId != 0L) {
        ClOrdId = other.ClOrdId;
      }
      if (other.ReviewClOrdId.Length != 0) {
        ReviewClOrdId = other.ReviewClOrdId;
      }
      if (other.AltFillId != 0L) {
        AltFillId = other.AltFillId;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.AltCrossId.Length != 0) {
        AltCrossId = other.AltCrossId;
      }
      if (other.AltLegRefId.Length != 0) {
        AltLegRefId = other.AltLegRefId;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.SrcRoutingCode.Length != 0) {
        SrcRoutingCode = other.SrcRoutingCode;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.TriggerGroupId != 0L) {
        TriggerGroupId = other.TriggerGroupId;
      }
      if (other.TriggerTimestamp != 0L) {
        TriggerTimestamp = other.TriggerTimestamp;
      }
      if (other.StreetClOrdId.Length != 0) {
        StreetClOrdId = other.StreetClOrdId;
      }
      if (other.StreetOrderId.Length != 0) {
        StreetOrderId = other.StreetOrderId;
      }
      if (other.ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ParentShape = other.ParentShape;
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.CoreClientFirm.Length != 0) {
        CoreClientFirm = other.CoreClientFirm;
      }
      if (other.SponsorClientFirm.Length != 0) {
        SponsorClientFirm = other.SponsorClientFirm;
      }
      if (other.RoutingCode.Length != 0) {
        RoutingCode = other.RoutingCode;
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        ExecRole = other.ExecRole;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ExecBrkrMPID.Length != 0) {
        ExecBrkrMPID = other.ExecBrkrMPID;
      }
      if (other.ExecBrkrAccnt.Length != 0) {
        ExecBrkrAccnt = other.ExecBrkrAccnt;
      }
      if (other.ExecBrkrClFirm.Length != 0) {
        ExecBrkrClFirm = other.ExecBrkrClFirm;
      }
      if (other.ExecBrkrUserName.Length != 0) {
        ExecBrkrUserName = other.ExecBrkrUserName;
      }
      if (other.ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        ClearingFlipType = other.ClearingFlipType;
      }
      if (other.ClearingFlipFirm.Length != 0) {
        ClearingFlipFirm = other.ClearingFlipFirm;
      }
      if (other.ClearingFlipAccnt.Length != 0) {
        ClearingFlipAccnt = other.ClearingFlipAccnt;
      }
      if (other.ClearingFirm.Length != 0) {
        ClearingFirm = other.ClearingFirm;
      }
      if (other.ClearingAccnt.Length != 0) {
        ClearingAccnt = other.ClearingAccnt;
      }
      if (other.OrigExecID.Length != 0) {
        OrigExecID = other.OrigExecID;
      }
      if (other.LastExecID.Length != 0) {
        LastExecID = other.LastExecID;
      }
      if (other.RemoteText.Length != 0) {
        RemoteText = other.RemoteText;
      }
      if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        OrderSide = other.OrderSide;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.CumFillQuantity != 0) {
        CumFillQuantity = other.CumFillQuantity;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.CumLegFillQuantity != 0) {
        CumLegFillQuantity = other.CumLegFillQuantity;
      }
      if (other.AvgLegFillPrice != 0D) {
        AvgLegFillPrice = other.AvgLegFillPrice;
      }
      if (other.LeavesQty != 0) {
        LeavesQty = other.LeavesQty;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ChildShape = other.ChildShape;
      }
      if (other.ChildSize != 0) {
        ChildSize = other.ChildSize;
      }
      if (other.ChildPrice != 0D) {
        ChildPrice = other.ChildPrice;
      }
      if (other.childDttm_ != null) {
        if (childDttm_ == null) {
          ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ChildDttm.MergeFrom(other.ChildDttm);
      }
      if (other.ChildExch.Length != 0) {
        ChildExch = other.ChildExch;
      }
      if (other.ChildExDest.Length != 0) {
        ChildExDest = other.ChildExDest;
      }
      if (other.ChildExecBroker.Length != 0) {
        ChildExecBroker = other.ChildExecBroker;
      }
      if (other.ChildIsDirected != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ChildIsDirected = other.ChildIsDirected;
      }
      if (other.ChildIsoSweep != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ChildIsoSweep = other.ChildIsoSweep;
      }
      if (other.ChildOrderHandling.Length != 0) {
        ChildOrderHandling = other.ChildOrderHandling;
      }
      if (other.ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        ChildAlgoHandler = other.ChildAlgoHandler;
      }
      if (other.ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        ChildCreateReason = other.ChildCreateReason;
      }
      if (other.ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        ChildCancelReason = other.ChildCancelReason;
      }
      if (other.ChildMakerTaker != global::Spiderrock.Protobuf.MakerTaker.Unspecified) {
        ChildMakerTaker = other.ChildMakerTaker;
      }
      if (other.ChildUBid != 0D) {
        ChildUBid = other.ChildUBid;
      }
      if (other.ChildUAsk != 0D) {
        ChildUAsk = other.ChildUAsk;
      }
      if (other.ChildBid != 0D) {
        ChildBid = other.ChildBid;
      }
      if (other.ChildAsk != 0D) {
        ChildAsk = other.ChildAsk;
      }
      if (other.ChildMark != 0D) {
        ChildMark = other.ChildMark;
      }
      if (other.ChildFairWidth != 0D) {
        ChildFairWidth = other.ChildFairWidth;
      }
      if (other.ChildVol != 0F) {
        ChildVol = other.ChildVol;
      }
      if (other.ChildProb != 0F) {
        ChildProb = other.ChildProb;
      }
      if (other.ChildLimitRefUPrc != 0D) {
        ChildLimitRefUPrc = other.ChildLimitRefUPrc;
      }
      if (other.ChildLimitPrc != 0D) {
        ChildLimitPrc = other.ChildLimitPrc;
      }
      if (other.ChildVolAtm != 0F) {
        ChildVolAtm = other.ChildVolAtm;
      }
      if (other.ChildPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        ChildPosType = other.ChildPosType;
      }
      if (other.ChildFirmOptPosition != 0) {
        ChildFirmOptPosition = other.ChildFirmOptPosition;
      }
      if (other.ChildSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        ChildSSaleFlag = other.ChildSSaleFlag;
      }
      if (other.ChildFirmStkPosition != 0) {
        ChildFirmStkPosition = other.ChildFirmStkPosition;
      }
      if (other.ChildFirmOpenOrders != 0) {
        ChildFirmOpenOrders = other.ChildFirmOpenOrders;
      }
      if (other.ChildLocateQuan != 0) {
        ChildLocateQuan = other.ChildLocateQuan;
      }
      if (other.ChildLocateFirm.Length != 0) {
        ChildLocateFirm = other.ChildLocateFirm;
      }
      if (other.ChildLocatePool.Length != 0) {
        ChildLocatePool = other.ChildLocatePool;
      }
      if (other.ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        ChildMktStance = other.ChildMktStance;
      }
      if (other.ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ChildCxlAttempted = other.ChildCxlAttempted;
      }
      if (other.ChildCxlFillLatency != 0F) {
        ChildCxlFillLatency = other.ChildCxlFillLatency;
      }
      if (other.ChildMethod.Length != 0) {
        ChildMethod = other.ChildMethod;
      }
      if (other.ChildSource.Length != 0) {
        ChildSource = other.ChildSource;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.PriAggGroup.Length != 0) {
        PriAggGroup = other.PriAggGroup;
      }
      if (other.SecAggGroup.Length != 0) {
        SecAggGroup = other.SecAggGroup;
      }
      if (other.DirectedClientFirm.Length != 0) {
        DirectedClientFirm = other.DirectedClientFirm;
      }
      if (other.IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsCommPaying = other.IsCommPaying;
      }
      if (other.fillTransactDttm_ != null) {
        if (fillTransactDttm_ == null) {
          FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillTransactDttm.MergeFrom(other.FillTransactDttm);
      }
      if (other.FillTs != 0D) {
        FillTs = other.FillTs;
      }
      if (other.fillDttm_ != null) {
        if (fillDttm_ == null) {
          FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillDttm.MergeFrom(other.FillDttm);
      }
      if (other.FillExch.Length != 0) {
        FillExch = other.FillExch;
      }
      if (other.FillExecId.Length != 0) {
        FillExecId = other.FillExecId;
      }
      if (other.FillExecRefId.Length != 0) {
        FillExecRefId = other.FillExecRefId;
      }
      if (other.FillLegRefId != 0L) {
        FillLegRefId = other.FillLegRefId;
      }
      if (other.FillLegRatio != 0) {
        FillLegRatio = other.FillLegRatio;
      }
      if (other.FillExchFee != 0F) {
        FillExchFee = other.FillExchFee;
      }
      if (other.FillMarket.Length != 0) {
        FillMarket = other.FillMarket;
      }
      if (other.FillPrice != 0D) {
        FillPrice = other.FillPrice;
      }
      if (other.FillQuantity != 0) {
        FillQuantity = other.FillQuantity;
      }
      if (other.FillReportDetail.Length != 0) {
        FillReportDetail = other.FillReportDetail;
      }
      if (other.FillBid != 0D) {
        FillBid = other.FillBid;
      }
      if (other.FillAsk != 0D) {
        FillAsk = other.FillAsk;
      }
      if (other.FillMark != 0D) {
        FillMark = other.FillMark;
      }
      if (other.FillFairWidth != 0D) {
        FillFairWidth = other.FillFairWidth;
      }
      if (other.FillUMark != 0D) {
        FillUMark = other.FillUMark;
      }
      if (other.FillUBid != 0D) {
        FillUBid = other.FillUBid;
      }
      if (other.FillUAsk != 0D) {
        FillUAsk = other.FillUAsk;
      }
      if (other.FillUBidSz != 0) {
        FillUBidSz = other.FillUBidSz;
      }
      if (other.FillUAskSz != 0) {
        FillUAskSz = other.FillUAskSz;
      }
      if (other.FillVolAtm != 0F) {
        FillVolAtm = other.FillVolAtm;
      }
      if (other.FillMark1M != 0D) {
        FillMark1M = other.FillMark1M;
      }
      if (other.FillMark10M != 0D) {
        FillMark10M = other.FillMark10M;
      }
      if (other.FillBid1M != 0D) {
        FillBid1M = other.FillBid1M;
      }
      if (other.FillAsk1M != 0D) {
        FillAsk1M = other.FillAsk1M;
      }
      if (other.FillBid10M != 0D) {
        FillBid10M = other.FillBid10M;
      }
      if (other.FillAsk10M != 0D) {
        FillAsk10M = other.FillAsk10M;
      }
      if (other.FillUMark1M != 0D) {
        FillUMark1M = other.FillUMark1M;
      }
      if (other.FillUMark10M != 0D) {
        FillUMark10M = other.FillUMark10M;
      }
      if (other.FillVolAtm1M != 0F) {
        FillVolAtm1M = other.FillVolAtm1M;
      }
      if (other.FillVolAtm10M != 0F) {
        FillVolAtm10M = other.FillVolAtm10M;
      }
      if (other.FillState1M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        FillState1M = other.FillState1M;
      }
      if (other.FillState10M != global::Spiderrock.Protobuf.FillMarkState.Unspecified) {
        FillState10M = other.FillState10M;
      }
      if (other.FillVol != 0F) {
        FillVol = other.FillVol;
      }
      if (other.FillVolS != 0F) {
        FillVolS = other.FillVolS;
      }
      if (other.FillProb != 0F) {
        FillProb = other.FillProb;
      }
      if (other.FillLimitRefUPrc != 0D) {
        FillLimitRefUPrc = other.FillLimitRefUPrc;
      }
      if (other.FillLimitRefSDiv != 0D) {
        FillLimitRefSDiv = other.FillLimitRefSDiv;
      }
      if (other.FillLimitPrc != 0D) {
        FillLimitPrc = other.FillLimitPrc;
      }
      if (other.FillVe != 0F) {
        FillVe = other.FillVe;
      }
      if (other.FillGa != 0F) {
        FillGa = other.FillGa;
      }
      if (other.FillDe != 0F) {
        FillDe = other.FillDe;
      }
      if (other.FillTh != 0F) {
        FillTh = other.FillTh;
      }
      if (other.FillVeRatio != 0F) {
        FillVeRatio = other.FillVeRatio;
      }
      if (other.FillBeta != 0F) {
        FillBeta = other.FillBeta;
      }
      if (other.RiskVega != 0F) {
        RiskVega = other.RiskVega;
      }
      if (other.RiskWtVega != 0F) {
        RiskWtVega = other.RiskWtVega;
      }
      if (other.RiskNValue != 0F) {
        RiskNValue = other.RiskNValue;
      }
      if (other.RiskDelta != 0F) {
        RiskDelta = other.RiskDelta;
      }
      if (other.RiskDDelta != 0F) {
        RiskDDelta = other.RiskDDelta;
      }
      if (other.RiskRm1 != 0F) {
        RiskRm1 = other.RiskRm1;
      }
      if (other.RiskRm2 != 0F) {
        RiskRm2 = other.RiskRm2;
      }
      if (other.RiskRm3 != 0F) {
        RiskRm3 = other.RiskRm3;
      }
      if (other.RiskRm4 != 0F) {
        RiskRm4 = other.RiskRm4;
      }
      if (other.RiskRm5 != 0F) {
        RiskRm5 = other.RiskRm5;
      }
      if (other.RiskRm6 != 0F) {
        RiskRm6 = other.RiskRm6;
      }
      if (other.RiskRm7 != 0F) {
        RiskRm7 = other.RiskRm7;
      }
      if (other.MarginUDnVDn != 0F) {
        MarginUDnVDn = other.MarginUDnVDn;
      }
      if (other.MarginUDnVUp != 0F) {
        MarginUDnVUp = other.MarginUDnVUp;
      }
      if (other.MarginUUpVDn != 0F) {
        MarginUUpVDn = other.MarginUUpVDn;
      }
      if (other.MarginUUpVUp != 0F) {
        MarginUUpVUp = other.MarginUUpVUp;
      }
      if (other.RiskU15Dn != 0F) {
        RiskU15Dn = other.RiskU15Dn;
      }
      if (other.RiskU15Up != 0F) {
        RiskU15Up = other.RiskU15Up;
      }
      if (other.RiskU50Dn != 0F) {
        RiskU50Dn = other.RiskU50Dn;
      }
      if (other.RiskU50Up != 0F) {
        RiskU50Up = other.RiskU50Up;
      }
      if (other.FillBrkrRate != 0F) {
        FillBrkrRate = other.FillBrkrRate;
      }
      if (other.FillRoutingRate != 0F) {
        FillRoutingRate = other.FillRoutingRate;
      }
      if (other.RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        RiskCode = other.RiskCode;
      }
      if (other.BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        BillingSecType = other.BillingSecType;
      }
      if (other.BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        BillingCategory = other.BillingCategory;
      }
      if (other.SpdrLiquidityTag.Length != 0) {
        SpdrLiquidityTag = other.SpdrLiquidityTag;
      }
      if (other.ExchLiquidityTag.Length != 0) {
        ExchLiquidityTag = other.ExchLiquidityTag;
      }
      if (other.FillExchDetail.Length != 0) {
        FillExchDetail = other.FillExchDetail;
      }
      if (other.LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        LastCapacity = other.LastCapacity;
      }
      if (other.ExchFirmType.Length != 0) {
        ExchFirmType = other.ExchFirmType;
      }
      if (other.ExtExecBroker.Length != 0) {
        ExtExecBroker = other.ExtExecBroker;
      }
      if (other.RelationshipType != global::Spiderrock.Protobuf.RelationshipType.Unspecified) {
        RelationshipType = other.RelationshipType;
      }
      if (other.ClArriveMark != 0F) {
        ClArriveMark = other.ClArriveMark;
      }
      if (other.parentDttm_ != null) {
        if (parentDttm_ == null) {
          ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ParentDttm.MergeFrom(other.ParentDttm);
      }
      if (other.ParentOrderSize != 0) {
        ParentOrderSize = other.ParentOrderSize;
      }
      if (other.ParentUBid != 0D) {
        ParentUBid = other.ParentUBid;
      }
      if (other.ParentUAsk != 0D) {
        ParentUAsk = other.ParentUAsk;
      }
      if (other.ParentUMark != 0D) {
        ParentUMark = other.ParentUMark;
      }
      if (other.ParentBid != 0D) {
        ParentBid = other.ParentBid;
      }
      if (other.ParentAsk != 0D) {
        ParentAsk = other.ParentAsk;
      }
      if (other.ParentMark != 0D) {
        ParentMark = other.ParentMark;
      }
      if (other.ParentFairWidth != 0D) {
        ParentFairWidth = other.ParentFairWidth;
      }
      if (other.ParentSurfVol != 0D) {
        ParentSurfVol = other.ParentSurfVol;
      }
      if (other.ParentLimitVol != 0F) {
        ParentLimitVol = other.ParentLimitVol;
      }
      if (other.ParentLimitPrc != 0D) {
        ParentLimitPrc = other.ParentLimitPrc;
      }
      if (other.ParentLimitRefUPrc != 0D) {
        ParentLimitRefUPrc = other.ParentLimitRefUPrc;
      }
      if (other.ParentTheoVol != 0F) {
        ParentTheoVol = other.ParentTheoVol;
      }
      if (other.ParentTheoPrc != 0F) {
        ParentTheoPrc = other.ParentTheoPrc;
      }
      if (other.ParentPosType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        ParentPosType = other.ParentPosType;
      }
      if (other.ParentSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        ParentSSaleFlag = other.ParentSSaleFlag;
      }
      if (other.NoticeNumber != 0L) {
        NoticeNumber = other.NoticeNumber;
      }
      if (other.NumMakeExchanges != 0) {
        NumMakeExchanges = other.NumMakeExchanges;
      }
      if (other.PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        PublicSize = other.PublicSize;
      }
      if (other.CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CanOverlapCxlRepl = other.CanOverlapCxlRepl;
      }
      if (other.ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        ProgressRule = other.ProgressRule;
      }
      if (other.ExchMaskEnabled != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ExchMaskEnabled = other.ExchMaskEnabled;
      }
      if (other.TimeInForce != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        TimeInForce = other.TimeInForce;
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        OrderLimitClass = other.OrderLimitClass;
      }
      if (other.TakeReachRule != global::Spiderrock.Protobuf.ReachRule.Unspecified) {
        TakeReachRule = other.TakeReachRule;
      }
      if (other.OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        OverrideCode = other.OverrideCode;
      }
      if (other.AlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        AlphaType = other.AlphaType;
      }
      if (other.ParentStrategy.Length != 0) {
        ParentStrategy = other.ParentStrategy;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        HedgeSecType = other.HedgeSecType;
      }
      if (other.HedgeBetaRatio != 0F) {
        HedgeBetaRatio = other.HedgeBetaRatio;
      }
      if (other.HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        HedgeScope = other.HedgeScope;
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.UPrcRatio != 0F) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.MinTickSize != 0F) {
        MinTickSize = other.MinTickSize;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.LiveUPrc != 0D) {
        LiveUPrc = other.LiveUPrc;
      }
      if (other.LiveMark != 0D) {
        LiveMark = other.LiveMark;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.SgwTimestamp != 0L) {
        SgwTimestamp = other.SgwTimestamp;
      }
      if (other.EngTimestamp != 0L) {
        EngTimestamp = other.EngTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.DataCenterV7 != global::Spiderrock.Protobuf.SRDataCenter_V7.Unspecified) {
        DataCenterV7 = other.DataCenterV7;
      }
      if (other.FaceSideV7 != global::Spiderrock.Protobuf.FaceSide.Unspecified) {
        FaceSideV7 = other.FaceSideV7;
      }
      if (other.FaceShapeV7 != global::Spiderrock.Protobuf.FaceShape.Unspecified) {
        FaceShapeV7 = other.FaceShapeV7;
      }
      if (other.ChildLocateSourceV7.Length != 0) {
        ChildLocateSourceV7 = other.ChildLocateSourceV7;
      }
      if (other.FillPrV7 != 0F) {
        FillPrV7 = other.FillPrV7;
      }
      if (other.FillRiskMetric1V7 != 0F) {
        FillRiskMetric1V7 = other.FillRiskMetric1V7;
      }
      if (other.FillRiskMetric2V7 != 0F) {
        FillRiskMetric2V7 = other.FillRiskMetric2V7;
      }
      if (other.FillRiskMetric3V7 != 0F) {
        FillRiskMetric3V7 = other.FillRiskMetric3V7;
      }
      if (other.FillRiskMetric4V7 != 0F) {
        FillRiskMetric4V7 = other.FillRiskMetric4V7;
      }
      if (other.FillRiskMetric5V7 != 0F) {
        FillRiskMetric5V7 = other.FillRiskMetric5V7;
      }
      if (other.FillRiskMetric6V7 != 0F) {
        FillRiskMetric6V7 = other.FillRiskMetric6V7;
      }
      if (other.FillRiskMetric7V7 != 0F) {
        FillRiskMetric7V7 = other.FillRiskMetric7V7;
      }
      if (other.FillS08DnV7 != 0F) {
        FillS08DnV7 = other.FillS08DnV7;
      }
      if (other.FillS06UpV7 != 0F) {
        FillS06UpV7 = other.FillS06UpV7;
      }
      if (other.FillS15DnV7 != 0F) {
        FillS15DnV7 = other.FillS15DnV7;
      }
      if (other.FillS15UpV7 != 0F) {
        FillS15UpV7 = other.FillS15UpV7;
      }
      if (other.FillS50DnV7 != 0F) {
        FillS50DnV7 = other.FillS50DnV7;
      }
      if (other.FillS50UpV7 != 0F) {
        FillS50UpV7 = other.FillS50UpV7;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 872: {
            Version = input.ReadInt32();
            break;
          }
          case 896: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 920: {
            ExecShape = (global::Spiderrock.Protobuf.ExecShape) input.ReadEnum();
            break;
          }
          case 944: {
            PackageId = input.ReadInt64();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            ParentVersion = input.ReadInt32();
            break;
          }
          case 1016: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1040: {
            ClOrdId = input.ReadInt64();
            break;
          }
          case 1066: {
            ReviewClOrdId = input.ReadString();
            break;
          }
          case 1088: {
            AltFillId = input.ReadInt64();
            break;
          }
          case 1114: {
            AltOrderId = input.ReadString();
            break;
          }
          case 1138: {
            AltCrossId = input.ReadString();
            break;
          }
          case 1162: {
            AltLegRefId = input.ReadString();
            break;
          }
          case 1186: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1210: {
            AltUserName = input.ReadString();
            break;
          }
          case 1234: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1256: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1280: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 1304: {
            TriggerTimestamp = input.ReadInt64();
            break;
          }
          case 1330: {
            StreetClOrdId = input.ReadString();
            break;
          }
          case 1354: {
            StreetOrderId = input.ReadString();
            break;
          }
          case 1424: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1450: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1472: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1498: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1522: {
            Accnt = input.ReadString();
            break;
          }
          case 1546: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1568: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1592: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1602: {
            CoreClientFirm = input.ReadString();
            break;
          }
          case 1610: {
            SponsorClientFirm = input.ReadString();
            break;
          }
          case 1618: {
            RoutingCode = input.ReadString();
            break;
          }
          case 1666: {
            GatewayName = input.ReadString();
            break;
          }
          case 1688: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 1714: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 1738: {
            ExecBrkrMPID = input.ReadString();
            break;
          }
          case 1762: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 1786: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 1810: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 1832: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 1858: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 1882: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 1906: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 1930: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 1954: {
            OrigExecID = input.ReadString();
            break;
          }
          case 1978: {
            LastExecID = input.ReadString();
            break;
          }
          case 2002: {
            RemoteText = input.ReadString();
            break;
          }
          case 2024: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2048: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 2072: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 2096: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 2121: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 2144: {
            CumLegFillQuantity = input.ReadInt32();
            break;
          }
          case 2169: {
            AvgLegFillPrice = input.ReadDouble();
            break;
          }
          case 2192: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 2216: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 2240: {
            ChildShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 2264: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 2289: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 2314: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 2338: {
            ChildExch = input.ReadString();
            break;
          }
          case 2362: {
            ChildExDest = input.ReadString();
            break;
          }
          case 2386: {
            ChildExecBroker = input.ReadString();
            break;
          }
          case 2408: {
            ChildIsDirected = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2432: {
            ChildIsoSweep = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2458: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 2480: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 2504: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 2528: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 2552: {
            ChildMakerTaker = (global::Spiderrock.Protobuf.MakerTaker) input.ReadEnum();
            break;
          }
          case 2577: {
            ChildUBid = input.ReadDouble();
            break;
          }
          case 2601: {
            ChildUAsk = input.ReadDouble();
            break;
          }
          case 2625: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 2649: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 2673: {
            ChildMark = input.ReadDouble();
            break;
          }
          case 2697: {
            ChildFairWidth = input.ReadDouble();
            break;
          }
          case 2725: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 2749: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 2769: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2793: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 2821: {
            ChildVolAtm = input.ReadFloat();
            break;
          }
          case 2840: {
            ChildPosType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2864: {
            ChildFirmOptPosition = input.ReadInt32();
            break;
          }
          case 2888: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2912: {
            ChildFirmStkPosition = input.ReadInt32();
            break;
          }
          case 2936: {
            ChildFirmOpenOrders = input.ReadInt32();
            break;
          }
          case 2960: {
            ChildLocateQuan = input.ReadInt32();
            break;
          }
          case 2986: {
            ChildLocateFirm = input.ReadString();
            break;
          }
          case 3010: {
            ChildLocatePool = input.ReadString();
            break;
          }
          case 3032: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 3056: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3085: {
            ChildCxlFillLatency = input.ReadFloat();
            break;
          }
          case 3106: {
            ChildMethod = input.ReadString();
            break;
          }
          case 3130: {
            ChildSource = input.ReadString();
            break;
          }
          case 3152: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 3178: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 3202: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 3226: {
            DirectedClientFirm = input.ReadString();
            break;
          }
          case 3248: {
            IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3274: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 3297: {
            FillTs = input.ReadDouble();
            break;
          }
          case 3322: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 3346: {
            FillExch = input.ReadString();
            break;
          }
          case 3370: {
            FillExecId = input.ReadString();
            break;
          }
          case 3394: {
            FillExecRefId = input.ReadString();
            break;
          }
          case 3416: {
            FillLegRefId = input.ReadInt64();
            break;
          }
          case 3440: {
            FillLegRatio = input.ReadInt32();
            break;
          }
          case 3469: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 3490: {
            FillMarket = input.ReadString();
            break;
          }
          case 3513: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 3536: {
            FillQuantity = input.ReadInt32();
            break;
          }
          case 3562: {
            FillReportDetail = input.ReadString();
            break;
          }
          case 3585: {
            FillBid = input.ReadDouble();
            break;
          }
          case 3609: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 3633: {
            FillMark = input.ReadDouble();
            break;
          }
          case 3657: {
            FillFairWidth = input.ReadDouble();
            break;
          }
          case 3681: {
            FillUMark = input.ReadDouble();
            break;
          }
          case 3705: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 3729: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 3752: {
            FillUBidSz = input.ReadInt32();
            break;
          }
          case 3776: {
            FillUAskSz = input.ReadInt32();
            break;
          }
          case 3805: {
            FillVolAtm = input.ReadFloat();
            break;
          }
          case 3825: {
            FillMark1M = input.ReadDouble();
            break;
          }
          case 3849: {
            FillMark10M = input.ReadDouble();
            break;
          }
          case 3873: {
            FillBid1M = input.ReadDouble();
            break;
          }
          case 3897: {
            FillAsk1M = input.ReadDouble();
            break;
          }
          case 3921: {
            FillBid10M = input.ReadDouble();
            break;
          }
          case 3945: {
            FillAsk10M = input.ReadDouble();
            break;
          }
          case 3969: {
            FillUMark1M = input.ReadDouble();
            break;
          }
          case 3993: {
            FillUMark10M = input.ReadDouble();
            break;
          }
          case 4021: {
            FillVolAtm1M = input.ReadFloat();
            break;
          }
          case 4045: {
            FillVolAtm10M = input.ReadFloat();
            break;
          }
          case 4064: {
            FillState1M = (global::Spiderrock.Protobuf.FillMarkState) input.ReadEnum();
            break;
          }
          case 4088: {
            FillState10M = (global::Spiderrock.Protobuf.FillMarkState) input.ReadEnum();
            break;
          }
          case 4117: {
            FillVol = input.ReadFloat();
            break;
          }
          case 4141: {
            FillVolS = input.ReadFloat();
            break;
          }
          case 4165: {
            FillProb = input.ReadFloat();
            break;
          }
          case 4185: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 4209: {
            FillLimitRefSDiv = input.ReadDouble();
            break;
          }
          case 4233: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 4261: {
            FillVe = input.ReadFloat();
            break;
          }
          case 4285: {
            FillGa = input.ReadFloat();
            break;
          }
          case 4309: {
            FillDe = input.ReadFloat();
            break;
          }
          case 4333: {
            FillTh = input.ReadFloat();
            break;
          }
          case 4381: {
            FillVeRatio = input.ReadFloat();
            break;
          }
          case 4405: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 4837: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 4861: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 4880: {
            RiskCode = (global::Spiderrock.Protobuf.RiskCode) input.ReadEnum();
            break;
          }
          case 4904: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 4928: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 4954: {
            SpdrLiquidityTag = input.ReadString();
            break;
          }
          case 4978: {
            ExchLiquidityTag = input.ReadString();
            break;
          }
          case 5002: {
            FillExchDetail = input.ReadString();
            break;
          }
          case 5024: {
            LastCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 5050: {
            ExchFirmType = input.ReadString();
            break;
          }
          case 5074: {
            ExtExecBroker = input.ReadString();
            break;
          }
          case 5096: {
            RelationshipType = (global::Spiderrock.Protobuf.RelationshipType) input.ReadEnum();
            break;
          }
          case 5125: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 5146: {
            if (parentDttm_ == null) {
              ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ParentDttm);
            break;
          }
          case 5168: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 5193: {
            ParentUBid = input.ReadDouble();
            break;
          }
          case 5217: {
            ParentUAsk = input.ReadDouble();
            break;
          }
          case 5241: {
            ParentUMark = input.ReadDouble();
            break;
          }
          case 5265: {
            ParentBid = input.ReadDouble();
            break;
          }
          case 5289: {
            ParentAsk = input.ReadDouble();
            break;
          }
          case 5313: {
            ParentMark = input.ReadDouble();
            break;
          }
          case 5337: {
            ParentFairWidth = input.ReadDouble();
            break;
          }
          case 5361: {
            ParentSurfVol = input.ReadDouble();
            break;
          }
          case 5389: {
            ParentLimitVol = input.ReadFloat();
            break;
          }
          case 5409: {
            ParentLimitPrc = input.ReadDouble();
            break;
          }
          case 5433: {
            ParentLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 5461: {
            ParentTheoVol = input.ReadFloat();
            break;
          }
          case 5485: {
            ParentTheoPrc = input.ReadFloat();
            break;
          }
          case 5504: {
            ParentPosType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 5528: {
            ParentSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 5552: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 5576: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 5600: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 5624: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 5648: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 5672: {
            ExchMaskEnabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 5696: {
            TimeInForce = (global::Spiderrock.Protobuf.TimeInForce) input.ReadEnum();
            break;
          }
          case 5720: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 5744: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 5768: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 5792: {
            OrderLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 5816: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 5840: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 5864: {
            AlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 5890: {
            ParentStrategy = input.ReadString();
            break;
          }
          case 5914: {
            UserName = input.ReadString();
            break;
          }
          case 5936: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 5962: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 5984: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 6013: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 6032: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 6058: {
            UserData1 = input.ReadString();
            break;
          }
          case 6082: {
            UserData2 = input.ReadString();
            break;
          }
          case 6109: {
            Years = input.ReadFloat();
            break;
          }
          case 6128: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 6152: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 6181: {
            TickValue = input.ReadFloat();
            break;
          }
          case 6205: {
            PointValue = input.ReadFloat();
            break;
          }
          case 6224: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 6253: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 6277: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 6296: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 6320: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 6345: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 6369: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 6392: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 6416: {
            SgwTimestamp = input.ReadInt64();
            break;
          }
          case 6440: {
            EngTimestamp = input.ReadInt64();
            break;
          }
          case 6466: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 6474: {
            EngineName = input.ReadString();
            break;
          }
          case 6485: {
            RiskVega = input.ReadFloat();
            break;
          }
          case 6493: {
            RiskWtVega = input.ReadFloat();
            break;
          }
          case 6501: {
            RiskNValue = input.ReadFloat();
            break;
          }
          case 6509: {
            RiskDelta = input.ReadFloat();
            break;
          }
          case 6517: {
            RiskDDelta = input.ReadFloat();
            break;
          }
          case 6525: {
            RiskRm1 = input.ReadFloat();
            break;
          }
          case 6533: {
            RiskRm2 = input.ReadFloat();
            break;
          }
          case 6541: {
            RiskRm3 = input.ReadFloat();
            break;
          }
          case 6549: {
            RiskRm4 = input.ReadFloat();
            break;
          }
          case 6557: {
            RiskRm5 = input.ReadFloat();
            break;
          }
          case 6565: {
            RiskRm6 = input.ReadFloat();
            break;
          }
          case 6573: {
            RiskRm7 = input.ReadFloat();
            break;
          }
          case 6581: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 6589: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 6597: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 6605: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 6613: {
            RiskU15Dn = input.ReadFloat();
            break;
          }
          case 6621: {
            RiskU15Up = input.ReadFloat();
            break;
          }
          case 6629: {
            RiskU50Dn = input.ReadFloat();
            break;
          }
          case 6637: {
            RiskU50Up = input.ReadFloat();
            break;
          }
          case 40000: {
            DataCenterV7 = (global::Spiderrock.Protobuf.SRDataCenter_V7) input.ReadEnum();
            break;
          }
          case 40008: {
            FaceSideV7 = (global::Spiderrock.Protobuf.FaceSide) input.ReadEnum();
            break;
          }
          case 40016: {
            FaceShapeV7 = (global::Spiderrock.Protobuf.FaceShape) input.ReadEnum();
            break;
          }
          case 40026: {
            ChildLocateSourceV7 = input.ReadString();
            break;
          }
          case 40037: {
            FillPrV7 = input.ReadFloat();
            break;
          }
          case 40045: {
            FillRiskMetric1V7 = input.ReadFloat();
            break;
          }
          case 40053: {
            FillRiskMetric2V7 = input.ReadFloat();
            break;
          }
          case 40061: {
            FillRiskMetric3V7 = input.ReadFloat();
            break;
          }
          case 40069: {
            FillRiskMetric4V7 = input.ReadFloat();
            break;
          }
          case 40077: {
            FillRiskMetric5V7 = input.ReadFloat();
            break;
          }
          case 40085: {
            FillRiskMetric6V7 = input.ReadFloat();
            break;
          }
          case 40093: {
            FillRiskMetric7V7 = input.ReadFloat();
            break;
          }
          case 40101: {
            FillS08DnV7 = input.ReadFloat();
            break;
          }
          case 40109: {
            FillS06UpV7 = input.ReadFloat();
            break;
          }
          case 40117: {
            FillS15DnV7 = input.ReadFloat();
            break;
          }
          case 40125: {
            FillS15UpV7 = input.ReadFloat();
            break;
          }
          case 40133: {
            FillS50DnV7 = input.ReadFloat();
            break;
          }
          case 40141: {
            FillS50UpV7 = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentExecution.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysRealm = (global::Spiderrock.Protobuf.SysRealm) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 872: {
            Version = input.ReadInt32();
            break;
          }
          case 896: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 920: {
            ExecShape = (global::Spiderrock.Protobuf.ExecShape) input.ReadEnum();
            break;
          }
          case 944: {
            PackageId = input.ReadInt64();
            break;
          }
          case 968: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 992: {
            ParentVersion = input.ReadInt32();
            break;
          }
          case 1016: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1040: {
            ClOrdId = input.ReadInt64();
            break;
          }
          case 1066: {
            ReviewClOrdId = input.ReadString();
            break;
          }
          case 1088: {
            AltFillId = input.ReadInt64();
            break;
          }
          case 1114: {
            AltOrderId = input.ReadString();
            break;
          }
          case 1138: {
            AltCrossId = input.ReadString();
            break;
          }
          case 1162: {
            AltLegRefId = input.ReadString();
            break;
          }
          case 1186: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1210: {
            AltUserName = input.ReadString();
            break;
          }
          case 1234: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 1256: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 1280: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 1304: {
            TriggerTimestamp = input.ReadInt64();
            break;
          }
          case 1330: {
            StreetClOrdId = input.ReadString();
            break;
          }
          case 1354: {
            StreetOrderId = input.ReadString();
            break;
          }
          case 1424: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 1450: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1472: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1498: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1522: {
            Accnt = input.ReadString();
            break;
          }
          case 1546: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1568: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1592: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1602: {
            CoreClientFirm = input.ReadString();
            break;
          }
          case 1610: {
            SponsorClientFirm = input.ReadString();
            break;
          }
          case 1618: {
            RoutingCode = input.ReadString();
            break;
          }
          case 1666: {
            GatewayName = input.ReadString();
            break;
          }
          case 1688: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 1714: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 1738: {
            ExecBrkrMPID = input.ReadString();
            break;
          }
          case 1762: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 1786: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 1810: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 1832: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 1858: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 1882: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 1906: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 1930: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 1954: {
            OrigExecID = input.ReadString();
            break;
          }
          case 1978: {
            LastExecID = input.ReadString();
            break;
          }
          case 2002: {
            RemoteText = input.ReadString();
            break;
          }
          case 2024: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2048: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 2072: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 2096: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 2121: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 2144: {
            CumLegFillQuantity = input.ReadInt32();
            break;
          }
          case 2169: {
            AvgLegFillPrice = input.ReadDouble();
            break;
          }
          case 2192: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 2216: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 2240: {
            ChildShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 2264: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 2289: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 2314: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 2338: {
            ChildExch = input.ReadString();
            break;
          }
          case 2362: {
            ChildExDest = input.ReadString();
            break;
          }
          case 2386: {
            ChildExecBroker = input.ReadString();
            break;
          }
          case 2408: {
            ChildIsDirected = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2432: {
            ChildIsoSweep = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2458: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 2480: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 2504: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 2528: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 2552: {
            ChildMakerTaker = (global::Spiderrock.Protobuf.MakerTaker) input.ReadEnum();
            break;
          }
          case 2577: {
            ChildUBid = input.ReadDouble();
            break;
          }
          case 2601: {
            ChildUAsk = input.ReadDouble();
            break;
          }
          case 2625: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 2649: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 2673: {
            ChildMark = input.ReadDouble();
            break;
          }
          case 2697: {
            ChildFairWidth = input.ReadDouble();
            break;
          }
          case 2725: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 2749: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 2769: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2793: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 2821: {
            ChildVolAtm = input.ReadFloat();
            break;
          }
          case 2840: {
            ChildPosType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2864: {
            ChildFirmOptPosition = input.ReadInt32();
            break;
          }
          case 2888: {
            ChildSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2912: {
            ChildFirmStkPosition = input.ReadInt32();
            break;
          }
          case 2936: {
            ChildFirmOpenOrders = input.ReadInt32();
            break;
          }
          case 2960: {
            ChildLocateQuan = input.ReadInt32();
            break;
          }
          case 2986: {
            ChildLocateFirm = input.ReadString();
            break;
          }
          case 3010: {
            ChildLocatePool = input.ReadString();
            break;
          }
          case 3032: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 3056: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3085: {
            ChildCxlFillLatency = input.ReadFloat();
            break;
          }
          case 3106: {
            ChildMethod = input.ReadString();
            break;
          }
          case 3130: {
            ChildSource = input.ReadString();
            break;
          }
          case 3152: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 3178: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 3202: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 3226: {
            DirectedClientFirm = input.ReadString();
            break;
          }
          case 3248: {
            IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3274: {
            if (fillTransactDttm_ == null) {
              FillTransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillTransactDttm);
            break;
          }
          case 3297: {
            FillTs = input.ReadDouble();
            break;
          }
          case 3322: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 3346: {
            FillExch = input.ReadString();
            break;
          }
          case 3370: {
            FillExecId = input.ReadString();
            break;
          }
          case 3394: {
            FillExecRefId = input.ReadString();
            break;
          }
          case 3416: {
            FillLegRefId = input.ReadInt64();
            break;
          }
          case 3440: {
            FillLegRatio = input.ReadInt32();
            break;
          }
          case 3469: {
            FillExchFee = input.ReadFloat();
            break;
          }
          case 3490: {
            FillMarket = input.ReadString();
            break;
          }
          case 3513: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 3536: {
            FillQuantity = input.ReadInt32();
            break;
          }
          case 3562: {
            FillReportDetail = input.ReadString();
            break;
          }
          case 3585: {
            FillBid = input.ReadDouble();
            break;
          }
          case 3609: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 3633: {
            FillMark = input.ReadDouble();
            break;
          }
          case 3657: {
            FillFairWidth = input.ReadDouble();
            break;
          }
          case 3681: {
            FillUMark = input.ReadDouble();
            break;
          }
          case 3705: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 3729: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 3752: {
            FillUBidSz = input.ReadInt32();
            break;
          }
          case 3776: {
            FillUAskSz = input.ReadInt32();
            break;
          }
          case 3805: {
            FillVolAtm = input.ReadFloat();
            break;
          }
          case 3825: {
            FillMark1M = input.ReadDouble();
            break;
          }
          case 3849: {
            FillMark10M = input.ReadDouble();
            break;
          }
          case 3873: {
            FillBid1M = input.ReadDouble();
            break;
          }
          case 3897: {
            FillAsk1M = input.ReadDouble();
            break;
          }
          case 3921: {
            FillBid10M = input.ReadDouble();
            break;
          }
          case 3945: {
            FillAsk10M = input.ReadDouble();
            break;
          }
          case 3969: {
            FillUMark1M = input.ReadDouble();
            break;
          }
          case 3993: {
            FillUMark10M = input.ReadDouble();
            break;
          }
          case 4021: {
            FillVolAtm1M = input.ReadFloat();
            break;
          }
          case 4045: {
            FillVolAtm10M = input.ReadFloat();
            break;
          }
          case 4064: {
            FillState1M = (global::Spiderrock.Protobuf.FillMarkState) input.ReadEnum();
            break;
          }
          case 4088: {
            FillState10M = (global::Spiderrock.Protobuf.FillMarkState) input.ReadEnum();
            break;
          }
          case 4117: {
            FillVol = input.ReadFloat();
            break;
          }
          case 4141: {
            FillVolS = input.ReadFloat();
            break;
          }
          case 4165: {
            FillProb = input.ReadFloat();
            break;
          }
          case 4185: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 4209: {
            FillLimitRefSDiv = input.ReadDouble();
            break;
          }
          case 4233: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 4261: {
            FillVe = input.ReadFloat();
            break;
          }
          case 4285: {
            FillGa = input.ReadFloat();
            break;
          }
          case 4309: {
            FillDe = input.ReadFloat();
            break;
          }
          case 4333: {
            FillTh = input.ReadFloat();
            break;
          }
          case 4381: {
            FillVeRatio = input.ReadFloat();
            break;
          }
          case 4405: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 4837: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 4861: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 4880: {
            RiskCode = (global::Spiderrock.Protobuf.RiskCode) input.ReadEnum();
            break;
          }
          case 4904: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 4928: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 4954: {
            SpdrLiquidityTag = input.ReadString();
            break;
          }
          case 4978: {
            ExchLiquidityTag = input.ReadString();
            break;
          }
          case 5002: {
            FillExchDetail = input.ReadString();
            break;
          }
          case 5024: {
            LastCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 5050: {
            ExchFirmType = input.ReadString();
            break;
          }
          case 5074: {
            ExtExecBroker = input.ReadString();
            break;
          }
          case 5096: {
            RelationshipType = (global::Spiderrock.Protobuf.RelationshipType) input.ReadEnum();
            break;
          }
          case 5125: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 5146: {
            if (parentDttm_ == null) {
              ParentDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ParentDttm);
            break;
          }
          case 5168: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 5193: {
            ParentUBid = input.ReadDouble();
            break;
          }
          case 5217: {
            ParentUAsk = input.ReadDouble();
            break;
          }
          case 5241: {
            ParentUMark = input.ReadDouble();
            break;
          }
          case 5265: {
            ParentBid = input.ReadDouble();
            break;
          }
          case 5289: {
            ParentAsk = input.ReadDouble();
            break;
          }
          case 5313: {
            ParentMark = input.ReadDouble();
            break;
          }
          case 5337: {
            ParentFairWidth = input.ReadDouble();
            break;
          }
          case 5361: {
            ParentSurfVol = input.ReadDouble();
            break;
          }
          case 5389: {
            ParentLimitVol = input.ReadFloat();
            break;
          }
          case 5409: {
            ParentLimitPrc = input.ReadDouble();
            break;
          }
          case 5433: {
            ParentLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 5461: {
            ParentTheoVol = input.ReadFloat();
            break;
          }
          case 5485: {
            ParentTheoPrc = input.ReadFloat();
            break;
          }
          case 5504: {
            ParentPosType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 5528: {
            ParentSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 5552: {
            NoticeNumber = input.ReadInt64();
            break;
          }
          case 5576: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 5600: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 5624: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 5648: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 5672: {
            ExchMaskEnabled = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 5696: {
            TimeInForce = (global::Spiderrock.Protobuf.TimeInForce) input.ReadEnum();
            break;
          }
          case 5720: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 5744: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 5768: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 5792: {
            OrderLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 5816: {
            TakeReachRule = (global::Spiderrock.Protobuf.ReachRule) input.ReadEnum();
            break;
          }
          case 5840: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 5864: {
            AlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 5890: {
            ParentStrategy = input.ReadString();
            break;
          }
          case 5914: {
            UserName = input.ReadString();
            break;
          }
          case 5936: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 5962: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 5984: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 6013: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 6032: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 6058: {
            UserData1 = input.ReadString();
            break;
          }
          case 6082: {
            UserData2 = input.ReadString();
            break;
          }
          case 6109: {
            Years = input.ReadFloat();
            break;
          }
          case 6128: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 6152: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 6181: {
            TickValue = input.ReadFloat();
            break;
          }
          case 6205: {
            PointValue = input.ReadFloat();
            break;
          }
          case 6224: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 6253: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 6277: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 6296: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 6320: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 6345: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 6369: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 6392: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 6416: {
            SgwTimestamp = input.ReadInt64();
            break;
          }
          case 6440: {
            EngTimestamp = input.ReadInt64();
            break;
          }
          case 6466: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 6474: {
            EngineName = input.ReadString();
            break;
          }
          case 6485: {
            RiskVega = input.ReadFloat();
            break;
          }
          case 6493: {
            RiskWtVega = input.ReadFloat();
            break;
          }
          case 6501: {
            RiskNValue = input.ReadFloat();
            break;
          }
          case 6509: {
            RiskDelta = input.ReadFloat();
            break;
          }
          case 6517: {
            RiskDDelta = input.ReadFloat();
            break;
          }
          case 6525: {
            RiskRm1 = input.ReadFloat();
            break;
          }
          case 6533: {
            RiskRm2 = input.ReadFloat();
            break;
          }
          case 6541: {
            RiskRm3 = input.ReadFloat();
            break;
          }
          case 6549: {
            RiskRm4 = input.ReadFloat();
            break;
          }
          case 6557: {
            RiskRm5 = input.ReadFloat();
            break;
          }
          case 6565: {
            RiskRm6 = input.ReadFloat();
            break;
          }
          case 6573: {
            RiskRm7 = input.ReadFloat();
            break;
          }
          case 6581: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 6589: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 6597: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 6605: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 6613: {
            RiskU15Dn = input.ReadFloat();
            break;
          }
          case 6621: {
            RiskU15Up = input.ReadFloat();
            break;
          }
          case 6629: {
            RiskU50Dn = input.ReadFloat();
            break;
          }
          case 6637: {
            RiskU50Up = input.ReadFloat();
            break;
          }
          case 40000: {
            DataCenterV7 = (global::Spiderrock.Protobuf.SRDataCenter_V7) input.ReadEnum();
            break;
          }
          case 40008: {
            FaceSideV7 = (global::Spiderrock.Protobuf.FaceSide) input.ReadEnum();
            break;
          }
          case 40016: {
            FaceShapeV7 = (global::Spiderrock.Protobuf.FaceShape) input.ReadEnum();
            break;
          }
          case 40026: {
            ChildLocateSourceV7 = input.ReadString();
            break;
          }
          case 40037: {
            FillPrV7 = input.ReadFloat();
            break;
          }
          case 40045: {
            FillRiskMetric1V7 = input.ReadFloat();
            break;
          }
          case 40053: {
            FillRiskMetric2V7 = input.ReadFloat();
            break;
          }
          case 40061: {
            FillRiskMetric3V7 = input.ReadFloat();
            break;
          }
          case 40069: {
            FillRiskMetric4V7 = input.ReadFloat();
            break;
          }
          case 40077: {
            FillRiskMetric5V7 = input.ReadFloat();
            break;
          }
          case 40085: {
            FillRiskMetric6V7 = input.ReadFloat();
            break;
          }
          case 40093: {
            FillRiskMetric7V7 = input.ReadFloat();
            break;
          }
          case 40101: {
            FillS08DnV7 = input.ReadFloat();
            break;
          }
          case 40109: {
            FillS06UpV7 = input.ReadFloat();
            break;
          }
          case 40117: {
            FillS15DnV7 = input.ReadFloat();
            break;
          }
          case 40125: {
            FillS15UpV7 = input.ReadFloat();
            break;
          }
          case 40133: {
            FillS50DnV7 = input.ReadFloat();
            break;
          }
          case 40141: {
            FillS50UpV7 = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrParentExecution message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentExecution.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fillNumber_ = other.fillNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fill_number" field.</summary>
        public const int FillNumberFieldNumber = 10;
        private long fillNumber_;
        /// <summary>
        /// SpiderRock execution number (globally unique over trailing 10 days)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FillNumber {
          get { return fillNumber_; }
          set {
            fillNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FillNumber != other.FillNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FillNumber != 0L) hash ^= FillNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FillNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FillNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.FillNumber != 0L) {
            FillNumber = other.FillNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
