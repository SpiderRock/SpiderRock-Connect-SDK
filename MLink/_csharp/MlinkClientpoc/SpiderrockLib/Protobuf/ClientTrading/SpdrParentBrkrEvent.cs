// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrParentBrkrEvent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrParentBrkrEvent.proto</summary>
  public static partial class SpdrParentBrkrEventReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrParentBrkrEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrParentBrkrEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJQYXJlbnRCcmtyRXZlbnQu",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvItcYChNT",
            "cGRyUGFyZW50QnJrckV2ZW50EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzItLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuU3BkclBhcmVudEJya3JFdmVudC5QS2V5Ei8K",
            "B3NlY19rZXkYZCABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktl",
            "eRIyCghzZWNfdHlwZRhnIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bk",
            "cktleVR5cGUSDQoFYWNjbnQYaiABKAkSNAoLc3Bkcl9zb3VyY2UYbSABKA4y",
            "Hy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJTb3VyY2USFQoNZ3JvdXBpbmdf",
            "Y29kZRhwIAEoAxIwCgpvcmRlcl9zaWRlGHMgASgOMhwuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5CdXlTZWxsEhMKC2NsaWVudF9maXJtGHYgASgJEhEKCWFsdF9h",
            "Y2NudBh5IAEoCRIVCg1hbHRfdXNlcl9uYW1lGHwgASgJEhQKDGV2ZW50X251",
            "bWJlchh/IAEoDRI3CgpzdGFnZV90eXBlGIIBIAEoDjIiLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuU3BkclN0YWdlVHlwZRI3CgxzdGFnZV9yZXZpZXcY9QIgASgO",
            "MiAuc3BpZGVycm9jay5wcm90b2J1Zi5TdGFnZVJldmlldxIbChJiYXNlX3Bh",
            "cmVudF9udW1iZXIYhQEgASgDEhsKEnByZXZfcGFyZW50X251bWJlchiIASAB",
            "KAMSFAoLZW5naW5lX25hbWUYiwEgASgJEi8KBnRpY2tlchiOASABKAsyHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRJCChJzcGRyX2Jyb2tlcl9z",
            "dGF0dXMYkQEgASgOMiUuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyQnJva2Vy",
            "U3RhdHVzEkAKEXNwZHJfb3JkZXJfc3RhdHVzGJQBIAEoDjIkLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3Bkck9yZGVyU3RhdHVzEkAKEXNwZHJfY2xvc2VfcmVh",
            "c29uGJcBIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkckNsb3NlUmVh",
            "c29uEkIKEnNwZHJfcmVqZWN0X3JlYXNvbhiaASABKA4yJS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJSZWplY3RSZWFzb24SFQoMc3Bkcl9jb21tZW50GJ0B",
            "IAEoCRIQCgdiaWRfcHJjGLIBIAEoARIQCgdhc2tfcHJjGLUBIAEoARIRCghi",
            "aWRfaVZvbBi4ASABKAISEQoIYXNrX2lWb2wYuwEgASgCEhEKCGJpZF9zaXpl",
            "GL4BIAEoBRIRCghhc2tfc2l6ZRjBASABKAUSDgoFdV9iaWQYxAEgASgBEg4K",
            "BXVfYXNrGMcBIAEoARIUCgtzdXJmYWNlX3ByYxjKASABKAISFAoLc3VyZmFj",
            "ZV92b2wYzQEgASgCEhQKC3N1cmZhY2VfeXJzGNABIAEoAhIVCgxzdXJmYWNl",
            "X3NEaXYY0wEgASgCEhUKDHN1cmZhY2VfcmF0ZRjWASABKAISFQoMc3VyZmFj",
            "ZV91UHJjGNkBIAEoAhITCgpzdXJmYWNlX2RlGNwBIAEoAhITCgpzdXJmYWNl",
            "X2dhGN8BIAEoAhITCgpzdXJmYWNlX3RoGOIBIAEoAhITCgpzdXJmYWNlX3Zl",
            "GOUBIAEoAhITCgpzdXJmYWNlX3JvGOgBIAEoAhITCgpzdXJmYWNlX3BoGOsB",
            "IAEoAhIZChBhcnJpdmVfbmJib19zaXplGO4BIAEoBRI3ChBhcnJpdmVfbmJi",
            "b19leGNoGPEBIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0RXhjaBIY",
            "Cg9hcnJpdmVfY3VtX3NpemUY9AEgASgFEhgKD2Fycml2ZV9udW1fZXhjaBj3",
            "ASABKAUSGgoRYXJyaXZlX2xpbWl0X3NpemUY+gEgASgFEhkKEGFycml2ZV9s",
            "aW1pdF9wcmMY/QEgASgBEhUKDGF2Z19maWxsX3ByYxiAAiABKAESFgoNY3Vt",
            "X2ZpbGxfcXVhbhiDAiABKAUSGQoQbnVtX2NoaWxkX29yZGVycxiGAiABKA0S",
            "HQoUbnVtX2RheV9jaGlsZF9vcmRlcnMYiQIgASgNEhgKD29wZW5fb3JkZXJf",
            "c2l6ZRiMAiABKAUSGgoRYWN0aW9uX29yZGVyX3NpemUYjwIgASgFEhgKD3Jp",
            "c2tfbGltaXRfc2l6ZRiSAiABKAUSNwoPcmlza19saW1pdF9kZXNjGJUCIAEo",
            "DjIdLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkclJpc2sSPQoQcmlza19saW1p",
            "dF9sZXZlbBj0AiABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJSaXNr",
            "TGV2ZWwSGgoRcmlza19saW1pdF9kZXRhaWwYmAIgASgJEhcKDmxpbWl0X3Jl",
            "Zl91UHJjGJsCIAEoARIUCgtsaW1pdF9wcmljZRieAiABKAESEgoJbGltaXRf",
            "dm9sGKECIAEoAhIZChBtYWtlX2xpbWl0X3ByaWNlGKQCIAEoARI4Cg5tYWtl",
            "X2xpbWl0X2VychinAiABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLkxpbWl0",
            "RXJyb3ISHAoTbWFrZV9saW1pdF9lcnJfZGVzYxiqAiABKAkSGQoQdGFrZV9s",
            "aW1pdF9wcmljZRitAiABKAESOAoOdGFrZV9saW1pdF9lcnIYsAIgASgOMh8u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5MaW1pdEVycm9yEhwKE3Rha2VfbGltaXRf",
            "ZXJyX2Rlc2MYswIgASgJEjcKDGJyb2tlcl9zdGF0ZRi2AiABKA4yIC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkJyb2tlclN0YXRlEjMKCm1ha2Vfc3RhdGUYuQIg",
            "ASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BbGdvU3RhdGUSMwoKdGFrZV9z",
            "dGF0ZRi8AiABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkFsZ29TdGF0ZRI8",
            "Cg9ta3RfY3Jvc3Nfc3RhdGUYvwIgASgOMiIuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5Na3RDcm9zc1N0YXRlEjoKEGxhc3RfY2hpbGRfZXZlbnQYwgIgASgOMh8u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5DaGlsZEV2ZW50Ej0KDnNwZHJfbWt0X3N0",
            "YXRlGMUCIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck1hcmtldFN0",
            "YXRlEhMKCm51bV9vcmRlcnMYyAIgASgFEhMKCmxlYXZlc19xdHkYywIgASgF",
            "EhsKEmNoaWxkX29yZGVyX2xlYXZlcxjOAiABKAUSFQoMYXJyaXZhbF9zRGl2",
            "GNECIAEoAhIVCgxhcnJpdmFsX3JhdGUY1AIgASgCEhUKDGFycml2YWxfZERp",
            "dhjXAiABKAISNgoNaGVkZ2Vfc2VjX2tleRjaAiABKAsyHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkV4cGlyeUtleRI5Cg5oZWRnZV9zZWNfdHlwZRjdAiABKA4y",
            "IC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEhEKCHRoZW9fb3B4",
            "GOACIAEoAhIRCgh0aGVvX3ZvbBjjAiABKAISGQoQY2hpbGRfb3JkZXJfbWFz",
            "axjmAiABKA0SNwoMcHJpY2VfZm9ybWF0GOkCIAEoDjIgLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuUHJpY2VGb3JtYXQSOQoOdV9wcmljZV9mb3JtYXQY7AIgASgO",
            "MiAuc3BpZGVycm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBISCgl1c2VyX25h",
            "bWUY7wIgASgJEi4KCXRpbWVzdGFtcBjyAiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wGlIKBFBLZXkSFQoNcGFyZW50X251bWJlchgKIAEoAxIz",
            "CghyZWNfdHlwZRgLIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuRXZlbnRS",
            "ZWNUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentBrkrEvent), global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Parser, new[]{ "Meta", "Pkey", "SecKey", "SecType", "Accnt", "SpdrSource", "GroupingCode", "OrderSide", "ClientFirm", "AltAccnt", "AltUserName", "EventNumber", "StageType", "StageReview", "BaseParentNumber", "PrevParentNumber", "EngineName", "Ticker", "SpdrBrokerStatus", "SpdrOrderStatus", "SpdrCloseReason", "SpdrRejectReason", "SpdrComment", "BidPrc", "AskPrc", "BidIVol", "AskIVol", "BidSize", "AskSize", "UBid", "UAsk", "SurfacePrc", "SurfaceVol", "SurfaceYrs", "SurfaceSDiv", "SurfaceRate", "SurfaceUPrc", "SurfaceDe", "SurfaceGa", "SurfaceTh", "SurfaceVe", "SurfaceRo", "SurfacePh", "ArriveNbboSize", "ArriveNbboExch", "ArriveCumSize", "ArriveNumExch", "ArriveLimitSize", "ArriveLimitPrc", "AvgFillPrc", "CumFillQuan", "NumChildOrders", "NumDayChildOrders", "OpenOrderSize", "ActionOrderSize", "RiskLimitSize", "RiskLimitDesc", "RiskLimitLevel", "RiskLimitDetail", "LimitRefUPrc", "LimitPrice", "LimitVol", "MakeLimitPrice", "MakeLimitErr", "MakeLimitErrDesc", "TakeLimitPrice", "TakeLimitErr", "TakeLimitErrDesc", "BrokerState", "MakeState", "TakeState", "MktCrossState", "LastChildEvent", "SpdrMktState", "NumOrders", "LeavesQty", "ChildOrderLeaves", "ArrivalSDiv", "ArrivalRate", "ArrivalDDiv", "HedgeSecKey", "HedgeSecType", "TheoOpx", "TheoVol", "ChildOrderMask", "PriceFormat", "UPriceFormat", "UserName", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey), global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey.Parser, new[]{ "ParentNumber", "RecType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrParentBrkrEvent records are published when a new or cxl/replace parent order arrives causes a broker to begin working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
  /// </summary>
  public sealed partial class SpdrParentBrkrEvent : pb::IMessage<SpdrParentBrkrEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrParentBrkrEvent> _parser = new pb::MessageParser<SpdrParentBrkrEvent>(() => new SpdrParentBrkrEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrParentBrkrEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrParentBrkrEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrEvent(SpdrParentBrkrEvent other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      accnt_ = other.accnt_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      orderSide_ = other.orderSide_;
      clientFirm_ = other.clientFirm_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      eventNumber_ = other.eventNumber_;
      stageType_ = other.stageType_;
      stageReview_ = other.stageReview_;
      baseParentNumber_ = other.baseParentNumber_;
      prevParentNumber_ = other.prevParentNumber_;
      engineName_ = other.engineName_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      spdrBrokerStatus_ = other.spdrBrokerStatus_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      spdrRejectReason_ = other.spdrRejectReason_;
      spdrComment_ = other.spdrComment_;
      bidPrc_ = other.bidPrc_;
      askPrc_ = other.askPrc_;
      bidIVol_ = other.bidIVol_;
      askIVol_ = other.askIVol_;
      bidSize_ = other.bidSize_;
      askSize_ = other.askSize_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      surfacePrc_ = other.surfacePrc_;
      surfaceVol_ = other.surfaceVol_;
      surfaceYrs_ = other.surfaceYrs_;
      surfaceSDiv_ = other.surfaceSDiv_;
      surfaceRate_ = other.surfaceRate_;
      surfaceUPrc_ = other.surfaceUPrc_;
      surfaceDe_ = other.surfaceDe_;
      surfaceGa_ = other.surfaceGa_;
      surfaceTh_ = other.surfaceTh_;
      surfaceVe_ = other.surfaceVe_;
      surfaceRo_ = other.surfaceRo_;
      surfacePh_ = other.surfacePh_;
      arriveNbboSize_ = other.arriveNbboSize_;
      arriveNbboExch_ = other.arriveNbboExch_;
      arriveCumSize_ = other.arriveCumSize_;
      arriveNumExch_ = other.arriveNumExch_;
      arriveLimitSize_ = other.arriveLimitSize_;
      arriveLimitPrc_ = other.arriveLimitPrc_;
      avgFillPrc_ = other.avgFillPrc_;
      cumFillQuan_ = other.cumFillQuan_;
      numChildOrders_ = other.numChildOrders_;
      numDayChildOrders_ = other.numDayChildOrders_;
      openOrderSize_ = other.openOrderSize_;
      actionOrderSize_ = other.actionOrderSize_;
      riskLimitSize_ = other.riskLimitSize_;
      riskLimitDesc_ = other.riskLimitDesc_;
      riskLimitLevel_ = other.riskLimitLevel_;
      riskLimitDetail_ = other.riskLimitDetail_;
      limitRefUPrc_ = other.limitRefUPrc_;
      limitPrice_ = other.limitPrice_;
      limitVol_ = other.limitVol_;
      makeLimitPrice_ = other.makeLimitPrice_;
      makeLimitErr_ = other.makeLimitErr_;
      makeLimitErrDesc_ = other.makeLimitErrDesc_;
      takeLimitPrice_ = other.takeLimitPrice_;
      takeLimitErr_ = other.takeLimitErr_;
      takeLimitErrDesc_ = other.takeLimitErrDesc_;
      brokerState_ = other.brokerState_;
      makeState_ = other.makeState_;
      takeState_ = other.takeState_;
      mktCrossState_ = other.mktCrossState_;
      lastChildEvent_ = other.lastChildEvent_;
      spdrMktState_ = other.spdrMktState_;
      numOrders_ = other.numOrders_;
      leavesQty_ = other.leavesQty_;
      childOrderLeaves_ = other.childOrderLeaves_;
      arrivalSDiv_ = other.arrivalSDiv_;
      arrivalRate_ = other.arrivalRate_;
      arrivalDDiv_ = other.arrivalDDiv_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeSecType_ = other.hedgeSecType_;
      theoOpx_ = other.theoOpx_;
      theoVol_ = other.theoVol_;
      childOrderMask_ = other.childOrderMask_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      userName_ = other.userName_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrEvent Clone() {
      return new SpdrParentBrkrEvent(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 100;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 103;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 106;
    private string accnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 109;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 112;
    private long groupingCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "order_side" field.</summary>
    public const int OrderSideFieldNumber = 115;
    private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell OrderSide {
      get { return orderSide_; }
      set {
        orderSide_ = value;
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 118;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 121;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 124;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 127;
    private uint eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 130;
    private global::Spiderrock.Protobuf.SpdrStageType stageType_ = global::Spiderrock.Protobuf.SpdrStageType.Unspecified;
    /// <summary>
    /// parent is a staged order [ToolVisible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrStageType StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "stage_review" field.</summary>
    public const int StageReviewFieldNumber = 373;
    private global::Spiderrock.Protobuf.StageReview stageReview_ = global::Spiderrock.Protobuf.StageReview.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StageReview StageReview {
      get { return stageReview_; }
      set {
        stageReview_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 133;
    private long baseParentNumber_;
    /// <summary>
    /// SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "prev_parent_number" field.</summary>
    public const int PrevParentNumberFieldNumber = 136;
    private long prevParentNumber_;
    /// <summary>
    /// SPDR order number (order being cancelled/replaced) (zero if none)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PrevParentNumber {
      get { return prevParentNumber_; }
      set {
        prevParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 139;
    private string engineName_ = "";
    /// <summary>
    /// server stripe
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 142;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SpiderRock underlier stock key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "spdr_broker_status" field.</summary>
    public const int SpdrBrokerStatusFieldNumber = 145;
    private global::Spiderrock.Protobuf.SpdrBrokerStatus spdrBrokerStatus_ = global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrBrokerStatus SpdrBrokerStatus {
      get { return spdrBrokerStatus_; }
      set {
        spdrBrokerStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 148;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    /// <summary>
    /// parent order status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 151;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    /// <summary>
    /// parent order close reason (if closed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_reject_reason" field.</summary>
    public const int SpdrRejectReasonFieldNumber = 154;
    private global::Spiderrock.Protobuf.SpdrRejectReason spdrRejectReason_ = global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified;
    /// <summary>
    /// parent order reject reason (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRejectReason SpdrRejectReason {
      get { return spdrRejectReason_; }
      set {
        spdrRejectReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_comment" field.</summary>
    public const int SpdrCommentFieldNumber = 157;
    private string spdrComment_ = "";
    /// <summary>
    /// additional detail (close/reject reason; last child order error)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrComment {
      get { return spdrComment_; }
      set {
        spdrComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bid_prc" field.</summary>
    public const int BidPrcFieldNumber = 178;
    private double bidPrc_;
    /// <summary>
    /// bid (nbbo) price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPrc {
      get { return bidPrc_; }
      set {
        bidPrc_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc" field.</summary>
    public const int AskPrcFieldNumber = 181;
    private double askPrc_;
    /// <summary>
    /// ask (nbbo) price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPrc {
      get { return askPrc_; }
      set {
        askPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_iVol" field.</summary>
    public const int BidIVolFieldNumber = 184;
    private float bidIVol_;
    /// <summary>
    /// bid (nbbo) ivol @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidIVol {
      get { return bidIVol_; }
      set {
        bidIVol_ = value;
      }
    }

    /// <summary>Field number for the "ask_iVol" field.</summary>
    public const int AskIVolFieldNumber = 187;
    private float askIVol_;
    /// <summary>
    /// ask (nbbo) ivol @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskIVol {
      get { return askIVol_; }
      set {
        askIVol_ = value;
      }
    }

    /// <summary>Field number for the "bid_size" field.</summary>
    public const int BidSizeFieldNumber = 190;
    private int bidSize_;
    /// <summary>
    /// bid size (nbbo cum) @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSize {
      get { return bidSize_; }
      set {
        bidSize_ = value;
      }
    }

    /// <summary>Field number for the "ask_size" field.</summary>
    public const int AskSizeFieldNumber = 193;
    private int askSize_;
    /// <summary>
    /// ask size (nbbo cum) @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSize {
      get { return askSize_; }
      set {
        askSize_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 196;
    private double uBid_;
    /// <summary>
    /// underlier bid price @ record publish (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 199;
    private double uAsk_;
    /// <summary>
    /// underlier ask price @ record publish (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "surface_prc" field.</summary>
    public const int SurfacePrcFieldNumber = 202;
    private float surfacePrc_;
    /// <summary>
    /// SR surface price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfacePrc {
      get { return surfacePrc_; }
      set {
        surfacePrc_ = value;
      }
    }

    /// <summary>Field number for the "surface_vol" field.</summary>
    public const int SurfaceVolFieldNumber = 205;
    private float surfaceVol_;
    /// <summary>
    /// SR surface volatility @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceVol {
      get { return surfaceVol_; }
      set {
        surfaceVol_ = value;
      }
    }

    /// <summary>Field number for the "surface_yrs" field.</summary>
    public const int SurfaceYrsFieldNumber = 208;
    private float surfaceYrs_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceYrs {
      get { return surfaceYrs_; }
      set {
        surfaceYrs_ = value;
      }
    }

    /// <summary>Field number for the "surface_sDiv" field.</summary>
    public const int SurfaceSDivFieldNumber = 211;
    private float surfaceSDiv_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceSDiv {
      get { return surfaceSDiv_; }
      set {
        surfaceSDiv_ = value;
      }
    }

    /// <summary>Field number for the "surface_rate" field.</summary>
    public const int SurfaceRateFieldNumber = 214;
    private float surfaceRate_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceRate {
      get { return surfaceRate_; }
      set {
        surfaceRate_ = value;
      }
    }

    /// <summary>Field number for the "surface_uPrc" field.</summary>
    public const int SurfaceUPrcFieldNumber = 217;
    private float surfaceUPrc_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceUPrc {
      get { return surfaceUPrc_; }
      set {
        surfaceUPrc_ = value;
      }
    }

    /// <summary>Field number for the "surface_de" field.</summary>
    public const int SurfaceDeFieldNumber = 220;
    private float surfaceDe_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceDe {
      get { return surfaceDe_; }
      set {
        surfaceDe_ = value;
      }
    }

    /// <summary>Field number for the "surface_ga" field.</summary>
    public const int SurfaceGaFieldNumber = 223;
    private float surfaceGa_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceGa {
      get { return surfaceGa_; }
      set {
        surfaceGa_ = value;
      }
    }

    /// <summary>Field number for the "surface_th" field.</summary>
    public const int SurfaceThFieldNumber = 226;
    private float surfaceTh_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceTh {
      get { return surfaceTh_; }
      set {
        surfaceTh_ = value;
      }
    }

    /// <summary>Field number for the "surface_ve" field.</summary>
    public const int SurfaceVeFieldNumber = 229;
    private float surfaceVe_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceVe {
      get { return surfaceVe_; }
      set {
        surfaceVe_ = value;
      }
    }

    /// <summary>Field number for the "surface_ro" field.</summary>
    public const int SurfaceRoFieldNumber = 232;
    private float surfaceRo_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceRo {
      get { return surfaceRo_; }
      set {
        surfaceRo_ = value;
      }
    }

    /// <summary>Field number for the "surface_ph" field.</summary>
    public const int SurfacePhFieldNumber = 235;
    private float surfacePh_;
    /// <summary>
    /// SR surface calc value @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfacePh {
      get { return surfacePh_; }
      set {
        surfacePh_ = value;
      }
    }

    /// <summary>Field number for the "arrive_nbbo_size" field.</summary>
    public const int ArriveNbboSizeFieldNumber = 238;
    private int arriveNbboSize_;
    /// <summary>
    /// size of the single largest exchange @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArriveNbboSize {
      get { return arriveNbboSize_; }
      set {
        arriveNbboSize_ = value;
      }
    }

    /// <summary>Field number for the "arrive_nbbo_exch" field.</summary>
    public const int ArriveNbboExchFieldNumber = 241;
    private global::Spiderrock.Protobuf.OptExch arriveNbboExch_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
    /// <summary>
    /// exchange representing largest size @ order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptExch ArriveNbboExch {
      get { return arriveNbboExch_; }
      set {
        arriveNbboExch_ = value;
      }
    }

    /// <summary>Field number for the "arrive_cum_size" field.</summary>
    public const int ArriveCumSizeFieldNumber = 244;
    private int arriveCumSize_;
    /// <summary>
    /// cum size of all exchanges at NBBO price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArriveCumSize {
      get { return arriveCumSize_; }
      set {
        arriveCumSize_ = value;
      }
    }

    /// <summary>Field number for the "arrive_num_exch" field.</summary>
    public const int ArriveNumExchFieldNumber = 247;
    private int arriveNumExch_;
    /// <summary>
    /// num exchanges making up cum size @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArriveNumExch {
      get { return arriveNumExch_; }
      set {
        arriveNumExch_ = value;
      }
    }

    /// <summary>Field number for the "arrive_limit_size" field.</summary>
    public const int ArriveLimitSizeFieldNumber = 250;
    private int arriveLimitSize_;
    /// <summary>
    /// immediately marketable size up to limit price on parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArriveLimitSize {
      get { return arriveLimitSize_; }
      set {
        arriveLimitSize_ = value;
      }
    }

    /// <summary>Field number for the "arrive_limit_prc" field.</summary>
    public const int ArriveLimitPrcFieldNumber = 253;
    private double arriveLimitPrc_;
    /// <summary>
    /// expected average fill price if all immediately marketable size executed as advertized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ArriveLimitPrc {
      get { return arriveLimitPrc_; }
      set {
        arriveLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_prc" field.</summary>
    public const int AvgFillPrcFieldNumber = 256;
    private double avgFillPrc_;
    /// <summary>
    /// average fill price of all fills attributed parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrc {
      get { return avgFillPrc_; }
      set {
        avgFillPrc_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quan" field.</summary>
    public const int CumFillQuanFieldNumber = 259;
    private int cumFillQuan_;
    /// <summary>
    /// cumulative fill quantity attributed to parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuan {
      get { return cumFillQuan_; }
      set {
        cumFillQuan_ = value;
      }
    }

    /// <summary>Field number for the "num_child_orders" field.</summary>
    public const int NumChildOrdersFieldNumber = 262;
    private uint numChildOrders_;
    /// <summary>
    /// total number of child orders generated by this parent broker (parent number)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumChildOrders {
      get { return numChildOrders_; }
      set {
        numChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "num_day_child_orders" field.</summary>
    public const int NumDayChildOrdersFieldNumber = 265;
    private uint numDayChildOrders_;
    /// <summary>
    /// total number of child orders generated by this parent broker (all day; base parent number)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumDayChildOrders {
      get { return numDayChildOrders_; }
      set {
        numDayChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "open_order_size" field.</summary>
    public const int OpenOrderSizeFieldNumber = 268;
    private int openOrderSize_;
    /// <summary>
    /// open order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenOrderSize {
      get { return openOrderSize_; }
      set {
        openOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "action_order_size" field.</summary>
    public const int ActionOrderSizeFieldNumber = 271;
    private int actionOrderSize_;
    /// <summary>
    /// order size available for immediate action (note: not all algo combinations allow immediate action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionOrderSize {
      get { return actionOrderSize_; }
      set {
        actionOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_size" field.</summary>
    public const int RiskLimitSizeFieldNumber = 274;
    private int riskLimitSize_;
    /// <summary>
    /// risk limit size (distance to most restrictive risk limit associated with this parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RiskLimitSize {
      get { return riskLimitSize_; }
      set {
        riskLimitSize_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_desc" field.</summary>
    public const int RiskLimitDescFieldNumber = 277;
    private global::Spiderrock.Protobuf.SpdrRisk riskLimitDesc_ = global::Spiderrock.Protobuf.SpdrRisk.Unspecified;
    /// <summary>
    /// reason for size reduction (identifies the most restrictive risk limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRisk RiskLimitDesc {
      get { return riskLimitDesc_; }
      set {
        riskLimitDesc_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_level" field.</summary>
    public const int RiskLimitLevelFieldNumber = 372;
    private global::Spiderrock.Protobuf.SpdrRiskLevel riskLimitLevel_ = global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified;
    /// <summary>
    /// risk limit level responsible for reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskLevel RiskLimitLevel {
      get { return riskLimitLevel_; }
      set {
        riskLimitLevel_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_detail" field.</summary>
    public const int RiskLimitDetailFieldNumber = 280;
    private string riskLimitDetail_ = "";
    /// <summary>
    /// risk limit level responsible for reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskLimitDetail {
      get { return riskLimitDetail_; }
      set {
        riskLimitDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_ref_uPrc" field.</summary>
    public const int LimitRefUPrcFieldNumber = 283;
    private double limitRefUPrc_;
    /// <summary>
    /// effective reference underlier price @ record publish (usually either mid or bid/ask depending on limit type)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitRefUPrc {
      get { return limitRefUPrc_; }
      set {
        limitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 286;
    private double limitPrice_;
    /// <summary>
    /// parent simple prc limit (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_vol" field.</summary>
    public const int LimitVolFieldNumber = 289;
    private float limitVol_;
    /// <summary>
    /// parent simple vol limit (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LimitVol {
      get { return limitVol_; }
      set {
        limitVol_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_price" field.</summary>
    public const int MakeLimitPriceFieldNumber = 292;
    private double makeLimitPrice_;
    /// <summary>
    /// effective order limit price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeLimitPrice {
      get { return makeLimitPrice_; }
      set {
        makeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_err" field.</summary>
    public const int MakeLimitErrFieldNumber = 295;
    private global::Spiderrock.Protobuf.LimitError makeLimitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    /// <summary>
    /// limit price error code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError MakeLimitErr {
      get { return makeLimitErr_; }
      set {
        makeLimitErr_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_err_desc" field.</summary>
    public const int MakeLimitErrDescFieldNumber = 298;
    private string makeLimitErrDesc_ = "";
    /// <summary>
    /// additional limit price error descriptive text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MakeLimitErrDesc {
      get { return makeLimitErrDesc_; }
      set {
        makeLimitErrDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "take_limit_price" field.</summary>
    public const int TakeLimitPriceFieldNumber = 301;
    private double takeLimitPrice_;
    /// <summary>
    /// effective order limit price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeLimitPrice {
      get { return takeLimitPrice_; }
      set {
        takeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_err" field.</summary>
    public const int TakeLimitErrFieldNumber = 304;
    private global::Spiderrock.Protobuf.LimitError takeLimitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    /// <summary>
    /// limit price error code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError TakeLimitErr {
      get { return takeLimitErr_; }
      set {
        takeLimitErr_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_err_desc" field.</summary>
    public const int TakeLimitErrDescFieldNumber = 307;
    private string takeLimitErrDesc_ = "";
    /// <summary>
    /// additional limit price error descriptive text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TakeLimitErrDesc {
      get { return takeLimitErrDesc_; }
      set {
        takeLimitErrDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broker_state" field.</summary>
    public const int BrokerStateFieldNumber = 310;
    private global::Spiderrock.Protobuf.BrokerState brokerState_ = global::Spiderrock.Protobuf.BrokerState.Unspecified;
    /// <summary>
    /// broker monitor state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BrokerState BrokerState {
      get { return brokerState_; }
      set {
        brokerState_ = value;
      }
    }

    /// <summary>Field number for the "make_state" field.</summary>
    public const int MakeStateFieldNumber = 313;
    private global::Spiderrock.Protobuf.AlgoState makeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of non-marketable order handler (maker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState MakeState {
      get { return makeState_; }
      set {
        makeState_ = value;
      }
    }

    /// <summary>Field number for the "take_state" field.</summary>
    public const int TakeStateFieldNumber = 316;
    private global::Spiderrock.Protobuf.AlgoState takeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of marketable order handler (taker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState TakeState {
      get { return takeState_; }
      set {
        takeState_ = value;
      }
    }

    /// <summary>Field number for the "mkt_cross_state" field.</summary>
    public const int MktCrossStateFieldNumber = 319;
    private global::Spiderrock.Protobuf.MktCrossState mktCrossState_ = global::Spiderrock.Protobuf.MktCrossState.Unspecified;
    /// <summary>
    /// [enum] current state of mkt cross handler (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktCrossState MktCrossState {
      get { return mktCrossState_; }
      set {
        mktCrossState_ = value;
      }
    }

    /// <summary>Field number for the "last_child_event" field.</summary>
    public const int LastChildEventFieldNumber = 322;
    private global::Spiderrock.Protobuf.ChildEvent lastChildEvent_ = global::Spiderrock.Protobuf.ChildEvent.Unspecified;
    /// <summary>
    /// most recent child handling event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildEvent LastChildEvent {
      get { return lastChildEvent_; }
      set {
        lastChildEvent_ = value;
      }
    }

    /// <summary>Field number for the "spdr_mkt_state" field.</summary>
    public const int SpdrMktStateFieldNumber = 325;
    private global::Spiderrock.Protobuf.SpdrMarketState spdrMktState_ = global::Spiderrock.Protobuf.SpdrMarketState.Unspecified;
    /// <summary>
    /// market state code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMarketState SpdrMktState {
      get { return spdrMktState_; }
      set {
        spdrMktState_ = value;
      }
    }

    /// <summary>Field number for the "num_orders" field.</summary>
    public const int NumOrdersFieldNumber = 328;
    private int numOrders_;
    /// <summary>
    /// number active child orders @ record send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    /// <summary>Field number for the "leaves_qty" field.</summary>
    public const int LeavesQtyFieldNumber = 331;
    private int leavesQty_;
    /// <summary>
    /// number of active child order contracts (sum of all active child orders) @ record send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeavesQty {
      get { return leavesQty_; }
      set {
        leavesQty_ = value;
      }
    }

    /// <summary>Field number for the "child_order_leaves" field.</summary>
    public const int ChildOrderLeavesFieldNumber = 334;
    private int childOrderLeaves_;
    /// <summary>
    /// number of open child orders @ record send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildOrderLeaves {
      get { return childOrderLeaves_; }
      set {
        childOrderLeaves_ = value;
      }
    }

    /// <summary>Field number for the "arrival_sDiv" field.</summary>
    public const int ArrivalSDivFieldNumber = 337;
    private float arrivalSDiv_;
    /// <summary>
    /// effective sdiv rate @ parent order arrival (fixed for life of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArrivalSDiv {
      get { return arrivalSDiv_; }
      set {
        arrivalSDiv_ = value;
      }
    }

    /// <summary>Field number for the "arrival_rate" field.</summary>
    public const int ArrivalRateFieldNumber = 340;
    private float arrivalRate_;
    /// <summary>
    /// effective interest rate @ parent order arrival (fixed for life of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArrivalRate {
      get { return arrivalRate_; }
      set {
        arrivalRate_ = value;
      }
    }

    /// <summary>Field number for the "arrival_dDiv" field.</summary>
    public const int ArrivalDDivFieldNumber = 343;
    private float arrivalDDiv_;
    /// <summary>
    /// effective cumulative discrete dividend @ parent order arrival (fixed for life of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArrivalDDiv {
      get { return arrivalDDiv_; }
      set {
        arrivalDDiv_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 346;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// auto-hedge sec key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_type" field.</summary>
    public const int HedgeSecTypeFieldNumber = 349;
    private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// auto-hedge sec type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
      get { return hedgeSecType_; }
      set {
        hedgeSecType_ = value;
      }
    }

    /// <summary>Field number for the "theo_opx" field.</summary>
    public const int TheoOpxFieldNumber = 352;
    private float theoOpx_;
    /// <summary>
    /// option theo prc (from theoVol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoOpx {
      get { return theoOpx_; }
      set {
        theoOpx_ = value;
      }
    }

    /// <summary>Field number for the "theo_vol" field.</summary>
    public const int TheoVolFieldNumber = 355;
    private float theoVol_;
    /// <summary>
    /// option theo vol (from theoModel;if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoVol {
      get { return theoVol_; }
      set {
        theoVol_ = value;
      }
    }

    /// <summary>Field number for the "child_order_mask" field.</summary>
    public const int ChildOrderMaskFieldNumber = 358;
    private uint childOrderMask_;
    /// <summary>
    /// bit-mask of all exchange for which a child order was generated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChildOrderMask {
      get { return childOrderMask_; }
      set {
        childOrderMask_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 361;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 364;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// underlier price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 367;
    private string userName_ = "";
    /// <summary>
    /// user associated with the most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 370;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrParentBrkrEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrParentBrkrEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (Accnt != other.Accnt) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (OrderSide != other.OrderSide) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (EventNumber != other.EventNumber) return false;
      if (StageType != other.StageType) return false;
      if (StageReview != other.StageReview) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (PrevParentNumber != other.PrevParentNumber) return false;
      if (EngineName != other.EngineName) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SpdrBrokerStatus != other.SpdrBrokerStatus) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (SpdrRejectReason != other.SpdrRejectReason) return false;
      if (SpdrComment != other.SpdrComment) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrc, other.BidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrc, other.AskPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidIVol, other.BidIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskIVol, other.AskIVol)) return false;
      if (BidSize != other.BidSize) return false;
      if (AskSize != other.AskSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfacePrc, other.SurfacePrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceVol, other.SurfaceVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceYrs, other.SurfaceYrs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceSDiv, other.SurfaceSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceRate, other.SurfaceRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceUPrc, other.SurfaceUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceDe, other.SurfaceDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceGa, other.SurfaceGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceTh, other.SurfaceTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceVe, other.SurfaceVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceRo, other.SurfaceRo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfacePh, other.SurfacePh)) return false;
      if (ArriveNbboSize != other.ArriveNbboSize) return false;
      if (ArriveNbboExch != other.ArriveNbboExch) return false;
      if (ArriveCumSize != other.ArriveCumSize) return false;
      if (ArriveNumExch != other.ArriveNumExch) return false;
      if (ArriveLimitSize != other.ArriveLimitSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArriveLimitPrc, other.ArriveLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrc, other.AvgFillPrc)) return false;
      if (CumFillQuan != other.CumFillQuan) return false;
      if (NumChildOrders != other.NumChildOrders) return false;
      if (NumDayChildOrders != other.NumDayChildOrders) return false;
      if (OpenOrderSize != other.OpenOrderSize) return false;
      if (ActionOrderSize != other.ActionOrderSize) return false;
      if (RiskLimitSize != other.RiskLimitSize) return false;
      if (RiskLimitDesc != other.RiskLimitDesc) return false;
      if (RiskLimitLevel != other.RiskLimitLevel) return false;
      if (RiskLimitDetail != other.RiskLimitDetail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitRefUPrc, other.LimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LimitVol, other.LimitVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeLimitPrice, other.MakeLimitPrice)) return false;
      if (MakeLimitErr != other.MakeLimitErr) return false;
      if (MakeLimitErrDesc != other.MakeLimitErrDesc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeLimitPrice, other.TakeLimitPrice)) return false;
      if (TakeLimitErr != other.TakeLimitErr) return false;
      if (TakeLimitErrDesc != other.TakeLimitErrDesc) return false;
      if (BrokerState != other.BrokerState) return false;
      if (MakeState != other.MakeState) return false;
      if (TakeState != other.TakeState) return false;
      if (MktCrossState != other.MktCrossState) return false;
      if (LastChildEvent != other.LastChildEvent) return false;
      if (SpdrMktState != other.SpdrMktState) return false;
      if (NumOrders != other.NumOrders) return false;
      if (LeavesQty != other.LeavesQty) return false;
      if (ChildOrderLeaves != other.ChildOrderLeaves) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArrivalSDiv, other.ArrivalSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArrivalRate, other.ArrivalRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArrivalDDiv, other.ArrivalDDiv)) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (HedgeSecType != other.HedgeSecType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoOpx, other.TheoOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoVol, other.TheoVol)) return false;
      if (ChildOrderMask != other.ChildOrderMask) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (UserName != other.UserName) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (EventNumber != 0) hash ^= EventNumber.GetHashCode();
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) hash ^= StageType.GetHashCode();
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) hash ^= StageReview.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (PrevParentNumber != 0L) hash ^= PrevParentNumber.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) hash ^= SpdrBrokerStatus.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) hash ^= SpdrRejectReason.GetHashCode();
      if (SpdrComment.Length != 0) hash ^= SpdrComment.GetHashCode();
      if (BidPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrc);
      if (AskPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrc);
      if (BidIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidIVol);
      if (AskIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskIVol);
      if (BidSize != 0) hash ^= BidSize.GetHashCode();
      if (AskSize != 0) hash ^= AskSize.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (SurfacePrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfacePrc);
      if (SurfaceVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceVol);
      if (SurfaceYrs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceYrs);
      if (SurfaceSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceSDiv);
      if (SurfaceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceRate);
      if (SurfaceUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceUPrc);
      if (SurfaceDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceDe);
      if (SurfaceGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceGa);
      if (SurfaceTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceTh);
      if (SurfaceVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceVe);
      if (SurfaceRo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceRo);
      if (SurfacePh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfacePh);
      if (ArriveNbboSize != 0) hash ^= ArriveNbboSize.GetHashCode();
      if (ArriveNbboExch != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= ArriveNbboExch.GetHashCode();
      if (ArriveCumSize != 0) hash ^= ArriveCumSize.GetHashCode();
      if (ArriveNumExch != 0) hash ^= ArriveNumExch.GetHashCode();
      if (ArriveLimitSize != 0) hash ^= ArriveLimitSize.GetHashCode();
      if (ArriveLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArriveLimitPrc);
      if (AvgFillPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrc);
      if (CumFillQuan != 0) hash ^= CumFillQuan.GetHashCode();
      if (NumChildOrders != 0) hash ^= NumChildOrders.GetHashCode();
      if (NumDayChildOrders != 0) hash ^= NumDayChildOrders.GetHashCode();
      if (OpenOrderSize != 0) hash ^= OpenOrderSize.GetHashCode();
      if (ActionOrderSize != 0) hash ^= ActionOrderSize.GetHashCode();
      if (RiskLimitSize != 0) hash ^= RiskLimitSize.GetHashCode();
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) hash ^= RiskLimitDesc.GetHashCode();
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) hash ^= RiskLimitLevel.GetHashCode();
      if (RiskLimitDetail.Length != 0) hash ^= RiskLimitDetail.GetHashCode();
      if (LimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitRefUPrc);
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (LimitVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LimitVol);
      if (MakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeLimitPrice);
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= MakeLimitErr.GetHashCode();
      if (MakeLimitErrDesc.Length != 0) hash ^= MakeLimitErrDesc.GetHashCode();
      if (TakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeLimitPrice);
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= TakeLimitErr.GetHashCode();
      if (TakeLimitErrDesc.Length != 0) hash ^= TakeLimitErrDesc.GetHashCode();
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) hash ^= BrokerState.GetHashCode();
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= MakeState.GetHashCode();
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= TakeState.GetHashCode();
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) hash ^= MktCrossState.GetHashCode();
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) hash ^= LastChildEvent.GetHashCode();
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) hash ^= SpdrMktState.GetHashCode();
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (LeavesQty != 0) hash ^= LeavesQty.GetHashCode();
      if (ChildOrderLeaves != 0) hash ^= ChildOrderLeaves.GetHashCode();
      if (ArrivalSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArrivalSDiv);
      if (ArrivalRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArrivalRate);
      if (ArrivalDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArrivalDDiv);
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
      if (TheoOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoOpx);
      if (TheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoVol);
      if (ChildOrderMask != 0) hash ^= ChildOrderMask.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (secKey_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SecType);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(AltUserName);
      }
      if (EventNumber != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) StageType);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(PrevParentNumber);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(EngineName);
      }
      if (ticker_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(Ticker);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(SpdrComment);
      }
      if (BidPrc != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(BidPrc);
      }
      if (AskPrc != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(AskPrc);
      }
      if (BidIVol != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(BidIVol);
      }
      if (AskIVol != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(AskIVol);
      }
      if (BidSize != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(BidSize);
      }
      if (AskSize != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(AskSize);
      }
      if (UBid != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(UAsk);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SurfaceVol);
      }
      if (SurfaceYrs != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(SurfaceYrs);
      }
      if (SurfaceSDiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(SurfaceSDiv);
      }
      if (SurfaceRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(SurfaceRate);
      }
      if (SurfaceUPrc != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(SurfaceUPrc);
      }
      if (SurfaceDe != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(SurfaceDe);
      }
      if (SurfaceGa != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(SurfaceGa);
      }
      if (SurfaceTh != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(SurfaceTh);
      }
      if (SurfaceVe != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(SurfaceVe);
      }
      if (SurfaceRo != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(SurfaceRo);
      }
      if (SurfacePh != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(SurfacePh);
      }
      if (ArriveNbboSize != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(ArriveNbboSize);
      }
      if (ArriveNbboExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) ArriveNbboExch);
      }
      if (ArriveCumSize != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(ArriveCumSize);
      }
      if (ArriveNumExch != 0) {
        output.WriteRawTag(184, 15);
        output.WriteInt32(ArriveNumExch);
      }
      if (ArriveLimitSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ArriveLimitSize);
      }
      if (ArriveLimitPrc != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(ArriveLimitPrc);
      }
      if (AvgFillPrc != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(AvgFillPrc);
      }
      if (CumFillQuan != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(CumFillQuan);
      }
      if (NumChildOrders != 0) {
        output.WriteRawTag(176, 16);
        output.WriteUInt32(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        output.WriteRawTag(200, 16);
        output.WriteUInt32(NumDayChildOrders);
      }
      if (OpenOrderSize != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(OpenOrderSize);
      }
      if (ActionOrderSize != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(ActionOrderSize);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(194, 17);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitRefUPrc != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(LimitRefUPrc);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(LimitPrice);
      }
      if (LimitVol != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(LimitVol);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(161, 18);
        output.WriteDouble(MakeLimitPrice);
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) MakeLimitErr);
      }
      if (MakeLimitErrDesc.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(MakeLimitErrDesc);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(TakeLimitPrice);
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) TakeLimitErr);
      }
      if (TakeLimitErrDesc.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(TakeLimitErrDesc);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) BrokerState);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) MakeState);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) TakeState);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) MktCrossState);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) LastChildEvent);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) SpdrMktState);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(NumOrders);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(216, 20);
        output.WriteInt32(LeavesQty);
      }
      if (ChildOrderLeaves != 0) {
        output.WriteRawTag(240, 20);
        output.WriteInt32(ChildOrderLeaves);
      }
      if (ArrivalSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(ArrivalSDiv);
      }
      if (ArrivalRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(ArrivalRate);
      }
      if (ArrivalDDiv != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(ArrivalDDiv);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(210, 21);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) HedgeSecType);
      }
      if (TheoOpx != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(TheoOpx);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(TheoVol);
      }
      if (ChildOrderMask != 0) {
        output.WriteRawTag(176, 22);
        output.WriteUInt32(ChildOrderMask);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(200, 22);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 22);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 22);
        output.WriteString(UserName);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(146, 23);
        output.WriteMessage(Timestamp);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(160, 23);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) StageReview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (secKey_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SecType);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(AltUserName);
      }
      if (EventNumber != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) StageType);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        output.WriteRawTag(192, 8);
        output.WriteInt64(PrevParentNumber);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(EngineName);
      }
      if (ticker_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(Ticker);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(SpdrComment);
      }
      if (BidPrc != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(BidPrc);
      }
      if (AskPrc != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(AskPrc);
      }
      if (BidIVol != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(BidIVol);
      }
      if (AskIVol != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(AskIVol);
      }
      if (BidSize != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(BidSize);
      }
      if (AskSize != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(AskSize);
      }
      if (UBid != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(UAsk);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(SurfaceVol);
      }
      if (SurfaceYrs != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(SurfaceYrs);
      }
      if (SurfaceSDiv != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(SurfaceSDiv);
      }
      if (SurfaceRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(SurfaceRate);
      }
      if (SurfaceUPrc != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(SurfaceUPrc);
      }
      if (SurfaceDe != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(SurfaceDe);
      }
      if (SurfaceGa != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(SurfaceGa);
      }
      if (SurfaceTh != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(SurfaceTh);
      }
      if (SurfaceVe != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(SurfaceVe);
      }
      if (SurfaceRo != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(SurfaceRo);
      }
      if (SurfacePh != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(SurfacePh);
      }
      if (ArriveNbboSize != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(ArriveNbboSize);
      }
      if (ArriveNbboExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        output.WriteRawTag(136, 15);
        output.WriteEnum((int) ArriveNbboExch);
      }
      if (ArriveCumSize != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(ArriveCumSize);
      }
      if (ArriveNumExch != 0) {
        output.WriteRawTag(184, 15);
        output.WriteInt32(ArriveNumExch);
      }
      if (ArriveLimitSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ArriveLimitSize);
      }
      if (ArriveLimitPrc != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(ArriveLimitPrc);
      }
      if (AvgFillPrc != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(AvgFillPrc);
      }
      if (CumFillQuan != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(CumFillQuan);
      }
      if (NumChildOrders != 0) {
        output.WriteRawTag(176, 16);
        output.WriteUInt32(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        output.WriteRawTag(200, 16);
        output.WriteUInt32(NumDayChildOrders);
      }
      if (OpenOrderSize != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(OpenOrderSize);
      }
      if (ActionOrderSize != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(ActionOrderSize);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(194, 17);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitRefUPrc != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(LimitRefUPrc);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(LimitPrice);
      }
      if (LimitVol != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(LimitVol);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(161, 18);
        output.WriteDouble(MakeLimitPrice);
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) MakeLimitErr);
      }
      if (MakeLimitErrDesc.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(MakeLimitErrDesc);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(233, 18);
        output.WriteDouble(TakeLimitPrice);
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) TakeLimitErr);
      }
      if (TakeLimitErrDesc.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(TakeLimitErrDesc);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) BrokerState);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) MakeState);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) TakeState);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) MktCrossState);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) LastChildEvent);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) SpdrMktState);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(NumOrders);
      }
      if (LeavesQty != 0) {
        output.WriteRawTag(216, 20);
        output.WriteInt32(LeavesQty);
      }
      if (ChildOrderLeaves != 0) {
        output.WriteRawTag(240, 20);
        output.WriteInt32(ChildOrderLeaves);
      }
      if (ArrivalSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(ArrivalSDiv);
      }
      if (ArrivalRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(ArrivalRate);
      }
      if (ArrivalDDiv != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(ArrivalDDiv);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(210, 21);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 21);
        output.WriteEnum((int) HedgeSecType);
      }
      if (TheoOpx != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(TheoOpx);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(TheoVol);
      }
      if (ChildOrderMask != 0) {
        output.WriteRawTag(176, 22);
        output.WriteUInt32(ChildOrderMask);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(200, 22);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 22);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 22);
        output.WriteString(UserName);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(146, 23);
        output.WriteMessage(Timestamp);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(160, 23);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) StageReview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (EventNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventNumber);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
      }
      if (StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageReview);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (PrevParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PrevParentNumber);
      }
      if (EngineName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrRejectReason);
      }
      if (SpdrComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrComment);
      }
      if (BidPrc != 0D) {
        size += 2 + 8;
      }
      if (AskPrc != 0D) {
        size += 2 + 8;
      }
      if (BidIVol != 0F) {
        size += 2 + 4;
      }
      if (AskIVol != 0F) {
        size += 2 + 4;
      }
      if (BidSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSize);
      }
      if (AskSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSize);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (SurfacePrc != 0F) {
        size += 2 + 4;
      }
      if (SurfaceVol != 0F) {
        size += 2 + 4;
      }
      if (SurfaceYrs != 0F) {
        size += 2 + 4;
      }
      if (SurfaceSDiv != 0F) {
        size += 2 + 4;
      }
      if (SurfaceRate != 0F) {
        size += 2 + 4;
      }
      if (SurfaceUPrc != 0F) {
        size += 2 + 4;
      }
      if (SurfaceDe != 0F) {
        size += 2 + 4;
      }
      if (SurfaceGa != 0F) {
        size += 2 + 4;
      }
      if (SurfaceTh != 0F) {
        size += 2 + 4;
      }
      if (SurfaceVe != 0F) {
        size += 2 + 4;
      }
      if (SurfaceRo != 0F) {
        size += 2 + 4;
      }
      if (SurfacePh != 0F) {
        size += 2 + 4;
      }
      if (ArriveNbboSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArriveNbboSize);
      }
      if (ArriveNbboExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ArriveNbboExch);
      }
      if (ArriveCumSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArriveCumSize);
      }
      if (ArriveNumExch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArriveNumExch);
      }
      if (ArriveLimitSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArriveLimitSize);
      }
      if (ArriveLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (AvgFillPrc != 0D) {
        size += 2 + 8;
      }
      if (CumFillQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuan);
      }
      if (NumChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumChildOrders);
      }
      if (NumDayChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumDayChildOrders);
      }
      if (OpenOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenOrderSize);
      }
      if (ActionOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionOrderSize);
      }
      if (RiskLimitSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitLevel);
      }
      if (RiskLimitDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskLimitDetail);
      }
      if (LimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (LimitVol != 0F) {
        size += 2 + 4;
      }
      if (MakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitErr);
      }
      if (MakeLimitErrDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeLimitErrDesc);
      }
      if (TakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitErr);
      }
      if (TakeLimitErrDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TakeLimitErrDesc);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BrokerState);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeState);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeState);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MktCrossState);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LastChildEvent);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrMktState);
      }
      if (NumOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOrders);
      }
      if (LeavesQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeavesQty);
      }
      if (ChildOrderLeaves != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildOrderLeaves);
      }
      if (ArrivalSDiv != 0F) {
        size += 2 + 4;
      }
      if (ArrivalRate != 0F) {
        size += 2 + 4;
      }
      if (ArrivalDDiv != 0F) {
        size += 2 + 4;
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
      }
      if (TheoOpx != 0F) {
        size += 2 + 4;
      }
      if (TheoVol != 0F) {
        size += 2 + 4;
      }
      if (ChildOrderMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ChildOrderMask);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrParentBrkrEvent other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        OrderSide = other.OrderSide;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.EventNumber != 0) {
        EventNumber = other.EventNumber;
      }
      if (other.StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        StageType = other.StageType;
      }
      if (other.StageReview != global::Spiderrock.Protobuf.StageReview.Unspecified) {
        StageReview = other.StageReview;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.PrevParentNumber != 0L) {
        PrevParentNumber = other.PrevParentNumber;
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        SpdrBrokerStatus = other.SpdrBrokerStatus;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        SpdrRejectReason = other.SpdrRejectReason;
      }
      if (other.SpdrComment.Length != 0) {
        SpdrComment = other.SpdrComment;
      }
      if (other.BidPrc != 0D) {
        BidPrc = other.BidPrc;
      }
      if (other.AskPrc != 0D) {
        AskPrc = other.AskPrc;
      }
      if (other.BidIVol != 0F) {
        BidIVol = other.BidIVol;
      }
      if (other.AskIVol != 0F) {
        AskIVol = other.AskIVol;
      }
      if (other.BidSize != 0) {
        BidSize = other.BidSize;
      }
      if (other.AskSize != 0) {
        AskSize = other.AskSize;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.SurfacePrc != 0F) {
        SurfacePrc = other.SurfacePrc;
      }
      if (other.SurfaceVol != 0F) {
        SurfaceVol = other.SurfaceVol;
      }
      if (other.SurfaceYrs != 0F) {
        SurfaceYrs = other.SurfaceYrs;
      }
      if (other.SurfaceSDiv != 0F) {
        SurfaceSDiv = other.SurfaceSDiv;
      }
      if (other.SurfaceRate != 0F) {
        SurfaceRate = other.SurfaceRate;
      }
      if (other.SurfaceUPrc != 0F) {
        SurfaceUPrc = other.SurfaceUPrc;
      }
      if (other.SurfaceDe != 0F) {
        SurfaceDe = other.SurfaceDe;
      }
      if (other.SurfaceGa != 0F) {
        SurfaceGa = other.SurfaceGa;
      }
      if (other.SurfaceTh != 0F) {
        SurfaceTh = other.SurfaceTh;
      }
      if (other.SurfaceVe != 0F) {
        SurfaceVe = other.SurfaceVe;
      }
      if (other.SurfaceRo != 0F) {
        SurfaceRo = other.SurfaceRo;
      }
      if (other.SurfacePh != 0F) {
        SurfacePh = other.SurfacePh;
      }
      if (other.ArriveNbboSize != 0) {
        ArriveNbboSize = other.ArriveNbboSize;
      }
      if (other.ArriveNbboExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
        ArriveNbboExch = other.ArriveNbboExch;
      }
      if (other.ArriveCumSize != 0) {
        ArriveCumSize = other.ArriveCumSize;
      }
      if (other.ArriveNumExch != 0) {
        ArriveNumExch = other.ArriveNumExch;
      }
      if (other.ArriveLimitSize != 0) {
        ArriveLimitSize = other.ArriveLimitSize;
      }
      if (other.ArriveLimitPrc != 0D) {
        ArriveLimitPrc = other.ArriveLimitPrc;
      }
      if (other.AvgFillPrc != 0D) {
        AvgFillPrc = other.AvgFillPrc;
      }
      if (other.CumFillQuan != 0) {
        CumFillQuan = other.CumFillQuan;
      }
      if (other.NumChildOrders != 0) {
        NumChildOrders = other.NumChildOrders;
      }
      if (other.NumDayChildOrders != 0) {
        NumDayChildOrders = other.NumDayChildOrders;
      }
      if (other.OpenOrderSize != 0) {
        OpenOrderSize = other.OpenOrderSize;
      }
      if (other.ActionOrderSize != 0) {
        ActionOrderSize = other.ActionOrderSize;
      }
      if (other.RiskLimitSize != 0) {
        RiskLimitSize = other.RiskLimitSize;
      }
      if (other.RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        RiskLimitDesc = other.RiskLimitDesc;
      }
      if (other.RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        RiskLimitLevel = other.RiskLimitLevel;
      }
      if (other.RiskLimitDetail.Length != 0) {
        RiskLimitDetail = other.RiskLimitDetail;
      }
      if (other.LimitRefUPrc != 0D) {
        LimitRefUPrc = other.LimitRefUPrc;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.LimitVol != 0F) {
        LimitVol = other.LimitVol;
      }
      if (other.MakeLimitPrice != 0D) {
        MakeLimitPrice = other.MakeLimitPrice;
      }
      if (other.MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        MakeLimitErr = other.MakeLimitErr;
      }
      if (other.MakeLimitErrDesc.Length != 0) {
        MakeLimitErrDesc = other.MakeLimitErrDesc;
      }
      if (other.TakeLimitPrice != 0D) {
        TakeLimitPrice = other.TakeLimitPrice;
      }
      if (other.TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        TakeLimitErr = other.TakeLimitErr;
      }
      if (other.TakeLimitErrDesc.Length != 0) {
        TakeLimitErrDesc = other.TakeLimitErrDesc;
      }
      if (other.BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        BrokerState = other.BrokerState;
      }
      if (other.MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        MakeState = other.MakeState;
      }
      if (other.TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        TakeState = other.TakeState;
      }
      if (other.MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        MktCrossState = other.MktCrossState;
      }
      if (other.LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        LastChildEvent = other.LastChildEvent;
      }
      if (other.SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        SpdrMktState = other.SpdrMktState;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      if (other.LeavesQty != 0) {
        LeavesQty = other.LeavesQty;
      }
      if (other.ChildOrderLeaves != 0) {
        ChildOrderLeaves = other.ChildOrderLeaves;
      }
      if (other.ArrivalSDiv != 0F) {
        ArrivalSDiv = other.ArrivalSDiv;
      }
      if (other.ArrivalRate != 0F) {
        ArrivalRate = other.ArrivalRate;
      }
      if (other.ArrivalDDiv != 0F) {
        ArrivalDDiv = other.ArrivalDDiv;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        HedgeSecType = other.HedgeSecType;
      }
      if (other.TheoOpx != 0F) {
        TheoOpx = other.TheoOpx;
      }
      if (other.TheoVol != 0F) {
        TheoVol = other.TheoVol;
      }
      if (other.ChildOrderMask != 0) {
        ChildOrderMask = other.ChildOrderMask;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 824: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 850: {
            Accnt = input.ReadString();
            break;
          }
          case 872: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 896: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 920: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 946: {
            ClientFirm = input.ReadString();
            break;
          }
          case 970: {
            AltAccnt = input.ReadString();
            break;
          }
          case 994: {
            AltUserName = input.ReadString();
            break;
          }
          case 1016: {
            EventNumber = input.ReadUInt32();
            break;
          }
          case 1040: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1064: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1088: {
            PrevParentNumber = input.ReadInt64();
            break;
          }
          case 1114: {
            EngineName = input.ReadString();
            break;
          }
          case 1138: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1160: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1184: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1208: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1232: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1258: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1425: {
            BidPrc = input.ReadDouble();
            break;
          }
          case 1449: {
            AskPrc = input.ReadDouble();
            break;
          }
          case 1477: {
            BidIVol = input.ReadFloat();
            break;
          }
          case 1501: {
            AskIVol = input.ReadFloat();
            break;
          }
          case 1520: {
            BidSize = input.ReadInt32();
            break;
          }
          case 1544: {
            AskSize = input.ReadInt32();
            break;
          }
          case 1569: {
            UBid = input.ReadDouble();
            break;
          }
          case 1593: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1621: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 1645: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 1669: {
            SurfaceYrs = input.ReadFloat();
            break;
          }
          case 1693: {
            SurfaceSDiv = input.ReadFloat();
            break;
          }
          case 1717: {
            SurfaceRate = input.ReadFloat();
            break;
          }
          case 1741: {
            SurfaceUPrc = input.ReadFloat();
            break;
          }
          case 1765: {
            SurfaceDe = input.ReadFloat();
            break;
          }
          case 1789: {
            SurfaceGa = input.ReadFloat();
            break;
          }
          case 1813: {
            SurfaceTh = input.ReadFloat();
            break;
          }
          case 1837: {
            SurfaceVe = input.ReadFloat();
            break;
          }
          case 1861: {
            SurfaceRo = input.ReadFloat();
            break;
          }
          case 1885: {
            SurfacePh = input.ReadFloat();
            break;
          }
          case 1904: {
            ArriveNbboSize = input.ReadInt32();
            break;
          }
          case 1928: {
            ArriveNbboExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1952: {
            ArriveCumSize = input.ReadInt32();
            break;
          }
          case 1976: {
            ArriveNumExch = input.ReadInt32();
            break;
          }
          case 2000: {
            ArriveLimitSize = input.ReadInt32();
            break;
          }
          case 2025: {
            ArriveLimitPrc = input.ReadDouble();
            break;
          }
          case 2049: {
            AvgFillPrc = input.ReadDouble();
            break;
          }
          case 2072: {
            CumFillQuan = input.ReadInt32();
            break;
          }
          case 2096: {
            NumChildOrders = input.ReadUInt32();
            break;
          }
          case 2120: {
            NumDayChildOrders = input.ReadUInt32();
            break;
          }
          case 2144: {
            OpenOrderSize = input.ReadInt32();
            break;
          }
          case 2168: {
            ActionOrderSize = input.ReadInt32();
            break;
          }
          case 2192: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 2216: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 2242: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 2265: {
            LimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2289: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 2317: {
            LimitVol = input.ReadFloat();
            break;
          }
          case 2337: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2360: {
            MakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2386: {
            MakeLimitErrDesc = input.ReadString();
            break;
          }
          case 2409: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2432: {
            TakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2458: {
            TakeLimitErrDesc = input.ReadString();
            break;
          }
          case 2480: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 2504: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2528: {
            TakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2552: {
            MktCrossState = (global::Spiderrock.Protobuf.MktCrossState) input.ReadEnum();
            break;
          }
          case 2576: {
            LastChildEvent = (global::Spiderrock.Protobuf.ChildEvent) input.ReadEnum();
            break;
          }
          case 2600: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 2624: {
            NumOrders = input.ReadInt32();
            break;
          }
          case 2648: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 2672: {
            ChildOrderLeaves = input.ReadInt32();
            break;
          }
          case 2701: {
            ArrivalSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            ArrivalRate = input.ReadFloat();
            break;
          }
          case 2749: {
            ArrivalDDiv = input.ReadFloat();
            break;
          }
          case 2770: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 2792: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2821: {
            TheoOpx = input.ReadFloat();
            break;
          }
          case 2845: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 2864: {
            ChildOrderMask = input.ReadUInt32();
            break;
          }
          case 2888: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2912: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2938: {
            UserName = input.ReadString();
            break;
          }
          case 2962: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2976: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2984: {
            StageReview = (global::Spiderrock.Protobuf.StageReview) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 824: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 850: {
            Accnt = input.ReadString();
            break;
          }
          case 872: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 896: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 920: {
            OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 946: {
            ClientFirm = input.ReadString();
            break;
          }
          case 970: {
            AltAccnt = input.ReadString();
            break;
          }
          case 994: {
            AltUserName = input.ReadString();
            break;
          }
          case 1016: {
            EventNumber = input.ReadUInt32();
            break;
          }
          case 1040: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1064: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 1088: {
            PrevParentNumber = input.ReadInt64();
            break;
          }
          case 1114: {
            EngineName = input.ReadString();
            break;
          }
          case 1138: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1160: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1184: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1208: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1232: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1258: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1425: {
            BidPrc = input.ReadDouble();
            break;
          }
          case 1449: {
            AskPrc = input.ReadDouble();
            break;
          }
          case 1477: {
            BidIVol = input.ReadFloat();
            break;
          }
          case 1501: {
            AskIVol = input.ReadFloat();
            break;
          }
          case 1520: {
            BidSize = input.ReadInt32();
            break;
          }
          case 1544: {
            AskSize = input.ReadInt32();
            break;
          }
          case 1569: {
            UBid = input.ReadDouble();
            break;
          }
          case 1593: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1621: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 1645: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 1669: {
            SurfaceYrs = input.ReadFloat();
            break;
          }
          case 1693: {
            SurfaceSDiv = input.ReadFloat();
            break;
          }
          case 1717: {
            SurfaceRate = input.ReadFloat();
            break;
          }
          case 1741: {
            SurfaceUPrc = input.ReadFloat();
            break;
          }
          case 1765: {
            SurfaceDe = input.ReadFloat();
            break;
          }
          case 1789: {
            SurfaceGa = input.ReadFloat();
            break;
          }
          case 1813: {
            SurfaceTh = input.ReadFloat();
            break;
          }
          case 1837: {
            SurfaceVe = input.ReadFloat();
            break;
          }
          case 1861: {
            SurfaceRo = input.ReadFloat();
            break;
          }
          case 1885: {
            SurfacePh = input.ReadFloat();
            break;
          }
          case 1904: {
            ArriveNbboSize = input.ReadInt32();
            break;
          }
          case 1928: {
            ArriveNbboExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
            break;
          }
          case 1952: {
            ArriveCumSize = input.ReadInt32();
            break;
          }
          case 1976: {
            ArriveNumExch = input.ReadInt32();
            break;
          }
          case 2000: {
            ArriveLimitSize = input.ReadInt32();
            break;
          }
          case 2025: {
            ArriveLimitPrc = input.ReadDouble();
            break;
          }
          case 2049: {
            AvgFillPrc = input.ReadDouble();
            break;
          }
          case 2072: {
            CumFillQuan = input.ReadInt32();
            break;
          }
          case 2096: {
            NumChildOrders = input.ReadUInt32();
            break;
          }
          case 2120: {
            NumDayChildOrders = input.ReadUInt32();
            break;
          }
          case 2144: {
            OpenOrderSize = input.ReadInt32();
            break;
          }
          case 2168: {
            ActionOrderSize = input.ReadInt32();
            break;
          }
          case 2192: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 2216: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 2242: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 2265: {
            LimitRefUPrc = input.ReadDouble();
            break;
          }
          case 2289: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 2317: {
            LimitVol = input.ReadFloat();
            break;
          }
          case 2337: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2360: {
            MakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2386: {
            MakeLimitErrDesc = input.ReadString();
            break;
          }
          case 2409: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2432: {
            TakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2458: {
            TakeLimitErrDesc = input.ReadString();
            break;
          }
          case 2480: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 2504: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2528: {
            TakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2552: {
            MktCrossState = (global::Spiderrock.Protobuf.MktCrossState) input.ReadEnum();
            break;
          }
          case 2576: {
            LastChildEvent = (global::Spiderrock.Protobuf.ChildEvent) input.ReadEnum();
            break;
          }
          case 2600: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 2624: {
            NumOrders = input.ReadInt32();
            break;
          }
          case 2648: {
            LeavesQty = input.ReadInt32();
            break;
          }
          case 2672: {
            ChildOrderLeaves = input.ReadInt32();
            break;
          }
          case 2701: {
            ArrivalSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            ArrivalRate = input.ReadFloat();
            break;
          }
          case 2749: {
            ArrivalDDiv = input.ReadFloat();
            break;
          }
          case 2770: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 2792: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2821: {
            TheoOpx = input.ReadFloat();
            break;
          }
          case 2845: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 2864: {
            ChildOrderMask = input.ReadUInt32();
            break;
          }
          case 2888: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2912: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 2938: {
            UserName = input.ReadString();
            break;
          }
          case 2962: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2976: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2984: {
            StageReview = (global::Spiderrock.Protobuf.StageReview) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrParentBrkrEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentBrkrEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          parentNumber_ = other.parentNumber_;
          recType_ = other.recType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "parent_number" field.</summary>
        public const int ParentNumberFieldNumber = 10;
        private long parentNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ParentNumber {
          get { return parentNumber_; }
          set {
            parentNumber_ = value;
          }
        }

        /// <summary>Field number for the "rec_type" field.</summary>
        public const int RecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.EventRecType recType_ = global::Spiderrock.Protobuf.EventRecType.Unspecified;
        /// <summary>
        /// type of record [New,Modify,Replace,Close,Reject]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.EventRecType RecType {
          get { return recType_; }
          set {
            recType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParentNumber != other.ParentNumber) return false;
          if (RecType != other.RecType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) hash ^= RecType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) RecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ParentNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) RecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ParentNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
          }
          if (RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ParentNumber != 0L) {
            ParentNumber = other.ParentNumber;
          }
          if (other.RecType != global::Spiderrock.Protobuf.EventRecType.Unspecified) {
            RecType = other.RecType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
              case 88: {
                RecType = (global::Spiderrock.Protobuf.EventRecType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                ParentNumber = input.ReadInt64();
                break;
              }
              case 88: {
                RecType = (global::Spiderrock.Protobuf.EventRecType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
