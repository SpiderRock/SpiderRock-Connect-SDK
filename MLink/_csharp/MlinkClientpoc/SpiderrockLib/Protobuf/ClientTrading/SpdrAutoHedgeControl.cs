// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrAutoHedgeControl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrAutoHedgeControl.proto</summary>
  public static partial class SpdrAutoHedgeControlReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrAutoHedgeControl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrAutoHedgeControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJBdXRvSGVkZ2VDb250cm9s",
            "LnByb3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1v",
            "bi5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKgEwoU",
            "U3BkckF1dG9IZWRnZUNvbnRyb2wSMwoFX21ldGEYASABKAsyJC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI8CgRwa2V5GAIgASgLMi4u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5TcGRyQXV0b0hlZGdlQ29udHJvbC5QS2V5",
            "EhQKDGFsdF9vcmRlcl9pZBhnIAEoCRIRCglhbHRfYWNjbnQYaiABKAkSFQoN",
            "YWx0X3VzZXJfbmFtZRhtIAEoCRIYChBzcmNfcm91dGluZ19jb2RlGHAgASgJ",
            "EhcKDmV4ZWNfYnJrcl9jb2RlGP4BIAEoCRIXCg5leHRlcm5fZXhfZGVzdBj/",
            "ASABKAkSFQoNZXh0ZXJuX3BhcmFtcxh5IAEoCRIQCghzdHJhdGVneRh8IAEo",
            "CRIRCgl1c2VyX25hbWUYfyABKAkSMwoKYXV0b19oZWRnZRiCASABKA4yHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkF1dG9IZWRnZRI3CgxoZWRnZV90YXJnZXQY",
            "hQEgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5IZWRnZVRhcmdldBIZChBt",
            "aW5faGVkZ2VfZERlbHRhGIgBIAEoAhIZChBtYXhfaGVkZ2VfZERlbHRhGIsB",
            "IAEoAhITCgpvcmRlcl9zaXplGI4BIAEoBRI3Cgpzc2FsZV9mbGFnGJEBIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU2hvcnRTYWxlRmxhZxI5Cg1wb3Np",
            "dGlvbl90eXBlGPsBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuUG9zaXRp",
            "b25UeXBlEhoKEW1heF9leHBvc3VyZV9zaXplGJQBIAEoBRIbChJudW1fbWFr",
            "ZV9leGNoYW5nZXMYlwEgASgFEj0KC3B1YmxpY19zaXplGJoBIAEoDjInLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuUHVibGljU2l6ZUhhbmRsaW5nEjkKFGNhbl9v",
            "dmVybGFwX2N4bF9yZXBsGJ0BIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "WWVzTm8SOQoNcHJvZ3Jlc3NfcnVsZRigASABKA4yIS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlByb2dyZXNzUnVsZRIbChJwcm9ncmVzc19zbGljZV9jbnQYowEg",
            "ASgFEh0KFHByb2dyZXNzX2V4cG9zZV90aW1lGKYBIAEoBRIbChJ2d2FwX3Bh",
            "cnRpY2lwYXRpb24YqQEgASgCEh0KFG1pbl9ta3Rfb25fY2xvc2VfcGN0GKwB",
            "IAEoBRIaChFtYXhfbWFrZV9leGNoX2ZlZRivASABKAISGgoRbWF4X3Rha2Vf",
            "ZXhjaF9mZWUYsgEgASgCEjsKEWluY190YWtlX2V4Y2hfZmVlGLUBIAEoDjIf",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuSW5jRXhjaEZlZRI7ChFpbmNfbWFrZV9l",
            "eGNoX2ZlZRi4ASABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLkluY0V4Y2hG",
            "ZWUSOgoObWFrZV9leGNoX3J1bGUYuwEgASgOMiEuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5NYWtlRXhjaFJ1bGUSGQoQbWF4X2NoaWxkX29yZGVycxi+ASABKAUS",
            "EgoJZXhjaF9tYXNrGMEBIAEoDRI7Cg5tYXJrZXRfc2Vzc2lvbhj8ASABKA4y",
            "Ii5zcGlkZXJyb2NrLnByb3RvYnVmLk1hcmtldFNlc3Npb24SLwoKc3RhcnRf",
            "ZHR0bRjHASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhcKDm9y",
            "ZGVyX2R1cmF0aW9uGMoBIAEoBRIYCg9hY3RpdmVfZHVyYXRpb24Y/QEgASgF",
            "EjMKDmdvb2RfdGlsbF9kdHRtGM0BIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASSAoVcGFyZW50X29yZGVyX2hhbmRsaW5nGNABIAEoDjIoLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuUGFyZW50T3JkZXJIYW5kbGluZxJMChdwYXJl",
            "bnRfYmFsYW5jZV9oYW5kbGluZxjTASABKA4yKi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlBhcmVudEJhbGFuY2VIYW5kbGluZxI9ChBvcmRlcl9saW1pdF90eXBl",
            "GNYBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkckxpbWl0VHlwZRI+",
            "ChB0YWtlX2xpbWl0X2NsYXNzGNkBIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3BkckxpbWl0Q2xhc3MSPgoQbWFrZV9saW1pdF9jbGFzcxjcASABKA4y",
            "Iy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJMaW1pdENsYXNzEj0KGGhlZGdl",
            "X2ZpbGxfdU1hcmtfbG10X3ByYxiAAiABKA4yGi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlllc05vEhgKD29yZGVyX3ByY19saW1pdBjfASABKAESGQoQb3JkZXJf",
            "cHJjX29mZnNldBjiASABKAESNQoLc3RhdGVfbW9kZWwY5QEgASgOMh8uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TdGF0ZU1vZGVsEjgKD3Rha2VfYWxwaGFfdHlw",
            "ZRjoASABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkFscGhhVHlwZRI4Cg9t",
            "YWtlX2FscGhhX3R5cGUY6wEgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5B",
            "bHBoYVR5cGUSGgoRdGFrZV9hbHBoYV9mYWN0b3IY7gEgASgCEhoKEW1ha2Vf",
            "YWxwaGFfZmFjdG9yGPEBIAEoAhIZChB0YWtlX3Byb2JhYmlsaXR5GPQBIAEo",
            "AhIZChBtYWtlX3Byb2JhYmlsaXR5GPcBIAEoAhIuCgl0aW1lc3RhbXAY+gEg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBqyAQoEUEtleRINCgVh",
            "Y2NudBgKIAEoCRIVCg1yaXNrX2dyb3VwX2lkGAsgASgDEjUKDWhlZGdlX3Nl",
            "Y19rZXkYDCABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRI4",
            "Cg5oZWRnZV9zZWNfdHlwZRgNIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3BkcktleVR5cGUSEwoLY2xpZW50X2Zpcm0YDiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAutoHedgeControl), global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Parser, new[]{ "Meta", "Pkey", "AltOrderId", "AltAccnt", "AltUserName", "SrcRoutingCode", "ExecBrkrCode", "ExternExDest", "ExternParams", "Strategy", "UserName", "AutoHedge", "HedgeTarget", "MinHedgeDDelta", "MaxHedgeDDelta", "OrderSize", "SsaleFlag", "PositionType", "MaxExposureSize", "NumMakeExchanges", "PublicSize", "CanOverlapCxlRepl", "ProgressRule", "ProgressSliceCnt", "ProgressExposeTime", "VwapParticipation", "MinMktOnClosePct", "MaxMakeExchFee", "MaxTakeExchFee", "IncTakeExchFee", "IncMakeExchFee", "MakeExchRule", "MaxChildOrders", "ExchMask", "MarketSession", "StartDttm", "OrderDuration", "ActiveDuration", "GoodTillDttm", "ParentOrderHandling", "ParentBalanceHandling", "OrderLimitType", "TakeLimitClass", "MakeLimitClass", "HedgeFillUMarkLmtPrc", "OrderPrcLimit", "OrderPrcOffset", "StateModel", "TakeAlphaType", "MakeAlphaType", "TakeAlphaFactor", "MakeAlphaFactor", "TakeProbability", "MakeProbability", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey), global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey.Parser, new[]{ "Accnt", "RiskGroupId", "HedgeSecKey", "HedgeSecType", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.
  ///BridgeFromV7:SpdrRiskGroupControl
  /// </summary>
  public sealed partial class SpdrAutoHedgeControl : pb::IMessage<SpdrAutoHedgeControl>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrAutoHedgeControl> _parser = new pb::MessageParser<SpdrAutoHedgeControl>(() => new SpdrAutoHedgeControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrAutoHedgeControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrAutoHedgeControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeControl(SpdrAutoHedgeControl other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      altOrderId_ = other.altOrderId_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      srcRoutingCode_ = other.srcRoutingCode_;
      execBrkrCode_ = other.execBrkrCode_;
      externExDest_ = other.externExDest_;
      externParams_ = other.externParams_;
      strategy_ = other.strategy_;
      userName_ = other.userName_;
      autoHedge_ = other.autoHedge_;
      hedgeTarget_ = other.hedgeTarget_;
      minHedgeDDelta_ = other.minHedgeDDelta_;
      maxHedgeDDelta_ = other.maxHedgeDDelta_;
      orderSize_ = other.orderSize_;
      ssaleFlag_ = other.ssaleFlag_;
      positionType_ = other.positionType_;
      maxExposureSize_ = other.maxExposureSize_;
      numMakeExchanges_ = other.numMakeExchanges_;
      publicSize_ = other.publicSize_;
      canOverlapCxlRepl_ = other.canOverlapCxlRepl_;
      progressRule_ = other.progressRule_;
      progressSliceCnt_ = other.progressSliceCnt_;
      progressExposeTime_ = other.progressExposeTime_;
      vwapParticipation_ = other.vwapParticipation_;
      minMktOnClosePct_ = other.minMktOnClosePct_;
      maxMakeExchFee_ = other.maxMakeExchFee_;
      maxTakeExchFee_ = other.maxTakeExchFee_;
      incTakeExchFee_ = other.incTakeExchFee_;
      incMakeExchFee_ = other.incMakeExchFee_;
      makeExchRule_ = other.makeExchRule_;
      maxChildOrders_ = other.maxChildOrders_;
      exchMask_ = other.exchMask_;
      marketSession_ = other.marketSession_;
      startDttm_ = other.startDttm_ != null ? other.startDttm_.Clone() : null;
      orderDuration_ = other.orderDuration_;
      activeDuration_ = other.activeDuration_;
      goodTillDttm_ = other.goodTillDttm_ != null ? other.goodTillDttm_.Clone() : null;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      orderLimitType_ = other.orderLimitType_;
      takeLimitClass_ = other.takeLimitClass_;
      makeLimitClass_ = other.makeLimitClass_;
      hedgeFillUMarkLmtPrc_ = other.hedgeFillUMarkLmtPrc_;
      orderPrcLimit_ = other.orderPrcLimit_;
      orderPrcOffset_ = other.orderPrcOffset_;
      stateModel_ = other.stateModel_;
      takeAlphaType_ = other.takeAlphaType_;
      makeAlphaType_ = other.makeAlphaType_;
      takeAlphaFactor_ = other.takeAlphaFactor_;
      makeAlphaFactor_ = other.makeAlphaFactor_;
      takeProbability_ = other.takeProbability_;
      makeProbability_ = other.makeProbability_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAutoHedgeControl Clone() {
      return new SpdrAutoHedgeControl(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 103;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 106;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 109;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_routing_code" field.</summary>
    public const int SrcRoutingCodeFieldNumber = 112;
    private string srcRoutingCode_ = "";
    /// <summary>
    /// inbound FIX routing code or SRSE/tool server appID (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcRoutingCode {
      get { return srcRoutingCode_; }
      set {
        srcRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 254;
    private string execBrkrCode_ = "";
    /// <summary>
    /// (optional) override the default execBrkrCode for this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_ex_dest" field.</summary>
    public const int ExternExDestFieldNumber = 255;
    private string externExDest_ = "";
    /// <summary>
    /// routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternExDest {
      get { return externExDest_; }
      set {
        externExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_params" field.</summary>
    public const int ExternParamsFieldNumber = 121;
    private string externParams_ = "";
    /// <summary>
    /// external algo names/parameters (usually just an algo name)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternParams {
      get { return externParams_; }
      set {
        externParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 124;
    private string strategy_ = "";
    /// <summary>
    /// client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 127;
    private string userName_ = "";
    /// <summary>
    /// name of the user entering the order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 130;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    /// <summary>
    /// auto-hedge algorithm (used for restoring tickets)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_target" field.</summary>
    public const int HedgeTargetFieldNumber = 133;
    private global::Spiderrock.Protobuf.HedgeTarget hedgeTarget_ = global::Spiderrock.Protobuf.HedgeTarget.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeTarget HedgeTarget {
      get { return hedgeTarget_; }
      set {
        hedgeTarget_ = value;
      }
    }

    /// <summary>Field number for the "min_hedge_dDelta" field.</summary>
    public const int MinHedgeDDeltaFieldNumber = 136;
    private float minHedgeDDelta_;
    /// <summary>
    /// do not generate autohedge orders if total group $Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-$100,000, +$100,000])
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinHedgeDDelta {
      get { return minHedgeDDelta_; }
      set {
        minHedgeDDelta_ = value;
      }
    }

    /// <summary>Field number for the "max_hedge_dDelta" field.</summary>
    public const int MaxHedgeDDeltaFieldNumber = 139;
    private float maxHedgeDDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxHedgeDDelta {
      get { return maxHedgeDDelta_; }
      set {
        maxHedgeDDelta_ = value;
      }
    }

    /// <summary>Field number for the "order_size" field.</summary>
    public const int OrderSizeFieldNumber = 142;
    private int orderSize_;
    /// <summary>
    /// initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderSize {
      get { return orderSize_; }
      set {
        orderSize_ = value;
      }
    }

    /// <summary>Field number for the "ssale_flag" field.</summary>
    public const int SsaleFlagFieldNumber = 145;
    private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
      get { return ssaleFlag_; }
      set {
        ssaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 251;
    private global::Spiderrock.Protobuf.PositionType positionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "max_exposure_size" field.</summary>
    public const int MaxExposureSizeFieldNumber = 148;
    private int maxExposureSize_;
    /// <summary>
    /// maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxExposureSize {
      get { return maxExposureSize_; }
      set {
        maxExposureSize_ = value;
      }
    }

    /// <summary>Field number for the "num_make_exchanges" field.</summary>
    public const int NumMakeExchangesFieldNumber = 151;
    private int numMakeExchanges_;
    /// <summary>
    /// number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMakeExchanges {
      get { return numMakeExchanges_; }
      set {
        numMakeExchanges_ = value;
      }
    }

    /// <summary>Field number for the "public_size" field.</summary>
    public const int PublicSizeFieldNumber = 154;
    private global::Spiderrock.Protobuf.PublicSizeHandling publicSize_ = global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified;
    /// <summary>
    /// public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PublicSizeHandling PublicSize {
      get { return publicSize_; }
      set {
        publicSize_ = value;
      }
    }

    /// <summary>Field number for the "can_overlap_cxl_repl" field.</summary>
    public const int CanOverlapCxlReplFieldNumber = 157;
    private global::Spiderrock.Protobuf.YesNo canOverlapCxlRepl_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CanOverlapCxlRepl {
      get { return canOverlapCxlRepl_; }
      set {
        canOverlapCxlRepl_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule" field.</summary>
    public const int ProgressRuleFieldNumber = 160;
    private global::Spiderrock.Protobuf.ProgressRule progressRule_ = global::Spiderrock.Protobuf.ProgressRule.Unspecified;
    /// <summary>
    /// Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProgressRule ProgressRule {
      get { return progressRule_; }
      set {
        progressRule_ = value;
      }
    }

    /// <summary>Field number for the "progress_slice_cnt" field.</summary>
    public const int ProgressSliceCntFieldNumber = 163;
    private int progressSliceCnt_;
    /// <summary>
    /// number of twap slices to use (default = 4 or 8) [max 20]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressSliceCnt {
      get { return progressSliceCnt_; }
      set {
        progressSliceCnt_ = value;
      }
    }

    /// <summary>Field number for the "progress_expose_time" field.</summary>
    public const int ProgressExposeTimeFieldNumber = 166;
    private int progressExposeTime_;
    /// <summary>
    /// minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressExposeTime {
      get { return progressExposeTime_; }
      set {
        progressExposeTime_ = value;
      }
    }

    /// <summary>Field number for the "vwap_participation" field.</summary>
    public const int VwapParticipationFieldNumber = 169;
    private float vwapParticipation_;
    /// <summary>
    /// target vwap participation rate (target % of trade activity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VwapParticipation {
      get { return vwapParticipation_; }
      set {
        vwapParticipation_ = value;
      }
    }

    /// <summary>Field number for the "min_mkt_on_close_pct" field.</summary>
    public const int MinMktOnClosePctFieldNumber = 172;
    private int minMktOnClosePct_;
    /// <summary>
    /// Minimum pct [0 - 100] of order reserved for the on-close auction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinMktOnClosePct {
      get { return minMktOnClosePct_; }
      set {
        minMktOnClosePct_ = value;
      }
    }

    /// <summary>Field number for the "max_make_exch_fee" field.</summary>
    public const int MaxMakeExchFeeFieldNumber = 175;
    private float maxMakeExchFee_;
    /// <summary>
    /// maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMakeExchFee {
      get { return maxMakeExchFee_; }
      set {
        maxMakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "max_take_exch_fee" field.</summary>
    public const int MaxTakeExchFeeFieldNumber = 178;
    private float maxTakeExchFee_;
    /// <summary>
    /// maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxTakeExchFee {
      get { return maxTakeExchFee_; }
      set {
        maxTakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "inc_take_exch_fee" field.</summary>
    public const int IncTakeExchFeeFieldNumber = 181;
    private global::Spiderrock.Protobuf.IncExchFee incTakeExchFee_ = global::Spiderrock.Protobuf.IncExchFee.Unspecified;
    /// <summary>
    /// include exchange fee in probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.IncExchFee IncTakeExchFee {
      get { return incTakeExchFee_; }
      set {
        incTakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "inc_make_exch_fee" field.</summary>
    public const int IncMakeExchFeeFieldNumber = 184;
    private global::Spiderrock.Protobuf.IncExchFee incMakeExchFee_ = global::Spiderrock.Protobuf.IncExchFee.Unspecified;
    /// <summary>
    /// include exchange fee in probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.IncExchFee IncMakeExchFee {
      get { return incMakeExchFee_; }
      set {
        incMakeExchFee_ = value;
      }
    }

    /// <summary>Field number for the "make_exch_rule" field.</summary>
    public const int MakeExchRuleFieldNumber = 187;
    private global::Spiderrock.Protobuf.MakeExchRule makeExchRule_ = global::Spiderrock.Protobuf.MakeExchRule.Unspecified;
    /// <summary>
    /// ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MakeExchRule MakeExchRule {
      get { return makeExchRule_; }
      set {
        makeExchRule_ = value;
      }
    }

    /// <summary>Field number for the "max_child_orders" field.</summary>
    public const int MaxChildOrdersFieldNumber = 190;
    private int maxChildOrders_;
    /// <summary>
    /// maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxChildOrders {
      get { return maxChildOrders_; }
      set {
        maxChildOrders_ = value;
      }
    }

    /// <summary>Field number for the "exch_mask" field.</summary>
    public const int ExchMaskFieldNumber = 193;
    private uint exchMask_;
    /// <summary>
    /// eligible exchanges (0 = all)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExchMask {
      get { return exchMask_; }
      set {
        exchMask_ = value;
      }
    }

    /// <summary>Field number for the "market_session" field.</summary>
    public const int MarketSessionFieldNumber = 252;
    private global::Spiderrock.Protobuf.MarketSession marketSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession MarketSession {
      get { return marketSession_; }
      set {
        marketSession_ = value;
      }
    }

    /// <summary>Field number for the "start_dttm" field.</summary>
    public const int StartDttmFieldNumber = 199;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDttm_;
    /// <summary>
    /// [optional] (parent order start time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDttm {
      get { return startDttm_; }
      set {
        startDttm_ = value;
      }
    }

    /// <summary>Field number for the "order_duration" field.</summary>
    public const int OrderDurationFieldNumber = 202;
    private int orderDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderDuration {
      get { return orderDuration_; }
      set {
        orderDuration_ = value;
      }
    }

    /// <summary>Field number for the "active_duration" field.</summary>
    public const int ActiveDurationFieldNumber = 253;
    private int activeDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveDuration {
      get { return activeDuration_; }
      set {
        activeDuration_ = value;
      }
    }

    /// <summary>Field number for the "good_till_dttm" field.</summary>
    public const int GoodTillDttmFieldNumber = 205;
    private global::Google.Protobuf.WellKnownTypes.Timestamp goodTillDttm_;
    /// <summary>
    /// [optional] (default: 2099-01-01)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp GoodTillDttm {
      get { return goodTillDttm_; }
      set {
        goodTillDttm_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 208;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 211;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 214;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_class" field.</summary>
    public const int TakeLimitClassFieldNumber = 217;
    private global::Spiderrock.Protobuf.SpdrLimitClass takeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass TakeLimitClass {
      get { return takeLimitClass_; }
      set {
        takeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_class" field.</summary>
    public const int MakeLimitClassFieldNumber = 220;
    private global::Spiderrock.Protobuf.SpdrLimitClass makeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass MakeLimitClass {
      get { return makeLimitClass_; }
      set {
        makeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "hedge_fill_uMark_lmt_prc" field.</summary>
    public const int HedgeFillUMarkLmtPrcFieldNumber = 256;
    private global::Spiderrock.Protobuf.YesNo hedgeFillUMarkLmtPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// set a price limit on the autohedge order based on the most recent option fillUMark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HedgeFillUMarkLmtPrc {
      get { return hedgeFillUMarkLmtPrc_; }
      set {
        hedgeFillUMarkLmtPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_limit" field.</summary>
    public const int OrderPrcLimitFieldNumber = 223;
    private double orderPrcLimit_;
    /// <summary>
    /// Applies if LimitType = Prc[]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcLimit {
      get { return orderPrcLimit_; }
      set {
        orderPrcLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_offset" field.</summary>
    public const int OrderPrcOffsetFieldNumber = 226;
    private double orderPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcOffset {
      get { return orderPrcOffset_; }
      set {
        orderPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "state_model" field.</summary>
    public const int StateModelFieldNumber = 229;
    private global::Spiderrock.Protobuf.StateModel stateModel_ = global::Spiderrock.Protobuf.StateModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StateModel StateModel {
      get { return stateModel_; }
      set {
        stateModel_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_type" field.</summary>
    public const int TakeAlphaTypeFieldNumber = 232;
    private global::Spiderrock.Protobuf.AlphaType takeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if takeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType TakeAlphaType {
      get { return takeAlphaType_; }
      set {
        takeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_type" field.</summary>
    public const int MakeAlphaTypeFieldNumber = 235;
    private global::Spiderrock.Protobuf.AlphaType makeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if makeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType MakeAlphaType {
      get { return makeAlphaType_; }
      set {
        makeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_factor" field.</summary>
    public const int TakeAlphaFactorFieldNumber = 238;
    private float takeAlphaFactor_;
    /// <summary>
    /// [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeAlphaFactor {
      get { return takeAlphaFactor_; }
      set {
        takeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_factor" field.</summary>
    public const int MakeAlphaFactorFieldNumber = 241;
    private float makeAlphaFactor_;
    /// <summary>
    /// [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeAlphaFactor {
      get { return makeAlphaFactor_; }
      set {
        makeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "take_probability" field.</summary>
    public const int TakeProbabilityFieldNumber = 244;
    private float takeProbability_;
    /// <summary>
    /// takeProbLimit = takeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeProbability {
      get { return takeProbability_; }
      set {
        takeProbability_ = value;
      }
    }

    /// <summary>Field number for the "make_probability" field.</summary>
    public const int MakeProbabilityFieldNumber = 247;
    private float makeProbability_;
    /// <summary>
    /// makeProbLimit = makeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeProbability {
      get { return makeProbability_; }
      set {
        makeProbability_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 250;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// record timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrAutoHedgeControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrAutoHedgeControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (SrcRoutingCode != other.SrcRoutingCode) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ExternExDest != other.ExternExDest) return false;
      if (ExternParams != other.ExternParams) return false;
      if (Strategy != other.Strategy) return false;
      if (UserName != other.UserName) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (HedgeTarget != other.HedgeTarget) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinHedgeDDelta, other.MinHedgeDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHedgeDDelta, other.MaxHedgeDDelta)) return false;
      if (OrderSize != other.OrderSize) return false;
      if (SsaleFlag != other.SsaleFlag) return false;
      if (PositionType != other.PositionType) return false;
      if (MaxExposureSize != other.MaxExposureSize) return false;
      if (NumMakeExchanges != other.NumMakeExchanges) return false;
      if (PublicSize != other.PublicSize) return false;
      if (CanOverlapCxlRepl != other.CanOverlapCxlRepl) return false;
      if (ProgressRule != other.ProgressRule) return false;
      if (ProgressSliceCnt != other.ProgressSliceCnt) return false;
      if (ProgressExposeTime != other.ProgressExposeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VwapParticipation, other.VwapParticipation)) return false;
      if (MinMktOnClosePct != other.MinMktOnClosePct) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMakeExchFee, other.MaxMakeExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTakeExchFee, other.MaxTakeExchFee)) return false;
      if (IncTakeExchFee != other.IncTakeExchFee) return false;
      if (IncMakeExchFee != other.IncMakeExchFee) return false;
      if (MakeExchRule != other.MakeExchRule) return false;
      if (MaxChildOrders != other.MaxChildOrders) return false;
      if (ExchMask != other.ExchMask) return false;
      if (MarketSession != other.MarketSession) return false;
      if (!object.Equals(StartDttm, other.StartDttm)) return false;
      if (OrderDuration != other.OrderDuration) return false;
      if (ActiveDuration != other.ActiveDuration) return false;
      if (!object.Equals(GoodTillDttm, other.GoodTillDttm)) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (TakeLimitClass != other.TakeLimitClass) return false;
      if (MakeLimitClass != other.MakeLimitClass) return false;
      if (HedgeFillUMarkLmtPrc != other.HedgeFillUMarkLmtPrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcLimit, other.OrderPrcLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcOffset, other.OrderPrcOffset)) return false;
      if (StateModel != other.StateModel) return false;
      if (TakeAlphaType != other.TakeAlphaType) return false;
      if (MakeAlphaType != other.MakeAlphaType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeAlphaFactor, other.TakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeAlphaFactor, other.MakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeProbability, other.TakeProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeProbability, other.MakeProbability)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (SrcRoutingCode.Length != 0) hash ^= SrcRoutingCode.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ExternExDest.Length != 0) hash ^= ExternExDest.GetHashCode();
      if (ExternParams.Length != 0) hash ^= ExternParams.GetHashCode();
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (HedgeTarget != global::Spiderrock.Protobuf.HedgeTarget.Unspecified) hash ^= HedgeTarget.GetHashCode();
      if (MinHedgeDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinHedgeDDelta);
      if (MaxHedgeDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHedgeDDelta);
      if (OrderSize != 0) hash ^= OrderSize.GetHashCode();
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType.GetHashCode();
      if (MaxExposureSize != 0) hash ^= MaxExposureSize.GetHashCode();
      if (NumMakeExchanges != 0) hash ^= NumMakeExchanges.GetHashCode();
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) hash ^= PublicSize.GetHashCode();
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CanOverlapCxlRepl.GetHashCode();
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) hash ^= ProgressRule.GetHashCode();
      if (ProgressSliceCnt != 0) hash ^= ProgressSliceCnt.GetHashCode();
      if (ProgressExposeTime != 0) hash ^= ProgressExposeTime.GetHashCode();
      if (VwapParticipation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VwapParticipation);
      if (MinMktOnClosePct != 0) hash ^= MinMktOnClosePct.GetHashCode();
      if (MaxMakeExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMakeExchFee);
      if (MaxTakeExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTakeExchFee);
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) hash ^= IncTakeExchFee.GetHashCode();
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) hash ^= IncMakeExchFee.GetHashCode();
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) hash ^= MakeExchRule.GetHashCode();
      if (MaxChildOrders != 0) hash ^= MaxChildOrders.GetHashCode();
      if (ExchMask != 0) hash ^= ExchMask.GetHashCode();
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= MarketSession.GetHashCode();
      if (startDttm_ != null) hash ^= StartDttm.GetHashCode();
      if (OrderDuration != 0) hash ^= OrderDuration.GetHashCode();
      if (ActiveDuration != 0) hash ^= ActiveDuration.GetHashCode();
      if (goodTillDttm_ != null) hash ^= GoodTillDttm.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= TakeLimitClass.GetHashCode();
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= MakeLimitClass.GetHashCode();
      if (HedgeFillUMarkLmtPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HedgeFillUMarkLmtPrc.GetHashCode();
      if (OrderPrcLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcLimit);
      if (OrderPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcOffset);
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) hash ^= StateModel.GetHashCode();
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= TakeAlphaType.GetHashCode();
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= MakeAlphaType.GetHashCode();
      if (TakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeAlphaFactor);
      if (MakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeAlphaFactor);
      if (TakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeProbability);
      if (MakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeProbability);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(AltOrderId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SrcRoutingCode);
      }
      if (ExternParams.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(ExternParams);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeTarget != global::Spiderrock.Protobuf.HedgeTarget.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HedgeTarget);
      }
      if (MinHedgeDDelta != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(MinHedgeDDelta);
      }
      if (MaxHedgeDDelta != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(MaxHedgeDDelta);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(OrderSize);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SsaleFlag);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(VwapParticipation);
      }
      if (MinMktOnClosePct != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(MinMktOnClosePct);
      }
      if (MaxMakeExchFee != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(MaxMakeExchFee);
      }
      if (MaxTakeExchFee != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(MaxTakeExchFee);
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) MakeExchRule);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(136, 12);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(GoodTillDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) StateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(216, 14);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MakeProbability);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(210, 15);
        output.WriteMessage(Timestamp);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(216, 15);
        output.WriteEnum((int) PositionType);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(224, 15);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(ActiveDuration);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(242, 15);
        output.WriteString(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(250, 15);
        output.WriteString(ExternExDest);
      }
      if (HedgeFillUMarkLmtPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) HedgeFillUMarkLmtPrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(AltOrderId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SrcRoutingCode);
      }
      if (ExternParams.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(ExternParams);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeTarget != global::Spiderrock.Protobuf.HedgeTarget.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HedgeTarget);
      }
      if (MinHedgeDDelta != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(MinHedgeDDelta);
      }
      if (MaxHedgeDDelta != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(MaxHedgeDDelta);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(OrderSize);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) SsaleFlag);
      }
      if (MaxExposureSize != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(VwapParticipation);
      }
      if (MinMktOnClosePct != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(MinMktOnClosePct);
      }
      if (MaxMakeExchFee != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(MaxMakeExchFee);
      }
      if (MaxTakeExchFee != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(MaxTakeExchFee);
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) MakeExchRule);
      }
      if (MaxChildOrders != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(MaxChildOrders);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(136, 12);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(StartDttm);
      }
      if (OrderDuration != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OrderDuration);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(GoodTillDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(152, 13);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) StateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(192, 14);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(216, 14);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MakeProbability);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(210, 15);
        output.WriteMessage(Timestamp);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(216, 15);
        output.WriteEnum((int) PositionType);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(224, 15);
        output.WriteEnum((int) MarketSession);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(ActiveDuration);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(242, 15);
        output.WriteString(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        output.WriteRawTag(250, 15);
        output.WriteString(ExternExDest);
      }
      if (HedgeFillUMarkLmtPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) HedgeFillUMarkLmtPrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (SrcRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcRoutingCode);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ExternExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternExDest);
      }
      if (ExternParams.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternParams);
      }
      if (Strategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (HedgeTarget != global::Spiderrock.Protobuf.HedgeTarget.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeTarget);
      }
      if (MinHedgeDDelta != 0F) {
        size += 2 + 4;
      }
      if (MaxHedgeDDelta != 0F) {
        size += 2 + 4;
      }
      if (OrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderSize);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (MaxExposureSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxExposureSize);
      }
      if (NumMakeExchanges != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMakeExchanges);
      }
      if (PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PublicSize);
      }
      if (CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CanOverlapCxlRepl);
      }
      if (ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProgressRule);
      }
      if (ProgressSliceCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressSliceCnt);
      }
      if (ProgressExposeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressExposeTime);
      }
      if (VwapParticipation != 0F) {
        size += 2 + 4;
      }
      if (MinMktOnClosePct != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinMktOnClosePct);
      }
      if (MaxMakeExchFee != 0F) {
        size += 2 + 4;
      }
      if (MaxTakeExchFee != 0F) {
        size += 2 + 4;
      }
      if (IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncTakeExchFee);
      }
      if (IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncMakeExchFee);
      }
      if (MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeExchRule);
      }
      if (MaxChildOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxChildOrders);
      }
      if (ExchMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExchMask);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketSession);
      }
      if (startDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartDttm);
      }
      if (OrderDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderDuration);
      }
      if (ActiveDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveDuration);
      }
      if (goodTillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodTillDttm);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitClass);
      }
      if (HedgeFillUMarkLmtPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeFillUMarkLmtPrc);
      }
      if (OrderPrcLimit != 0D) {
        size += 2 + 8;
      }
      if (OrderPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (MakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (TakeProbability != 0F) {
        size += 2 + 4;
      }
      if (MakeProbability != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrAutoHedgeControl other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.SrcRoutingCode.Length != 0) {
        SrcRoutingCode = other.SrcRoutingCode;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ExternExDest.Length != 0) {
        ExternExDest = other.ExternExDest;
      }
      if (other.ExternParams.Length != 0) {
        ExternParams = other.ExternParams;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.HedgeTarget != global::Spiderrock.Protobuf.HedgeTarget.Unspecified) {
        HedgeTarget = other.HedgeTarget;
      }
      if (other.MinHedgeDDelta != 0F) {
        MinHedgeDDelta = other.MinHedgeDDelta;
      }
      if (other.MaxHedgeDDelta != 0F) {
        MaxHedgeDDelta = other.MaxHedgeDDelta;
      }
      if (other.OrderSize != 0) {
        OrderSize = other.OrderSize;
      }
      if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SsaleFlag = other.SsaleFlag;
      }
      if (other.PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType = other.PositionType;
      }
      if (other.MaxExposureSize != 0) {
        MaxExposureSize = other.MaxExposureSize;
      }
      if (other.NumMakeExchanges != 0) {
        NumMakeExchanges = other.NumMakeExchanges;
      }
      if (other.PublicSize != global::Spiderrock.Protobuf.PublicSizeHandling.Unspecified) {
        PublicSize = other.PublicSize;
      }
      if (other.CanOverlapCxlRepl != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CanOverlapCxlRepl = other.CanOverlapCxlRepl;
      }
      if (other.ProgressRule != global::Spiderrock.Protobuf.ProgressRule.Unspecified) {
        ProgressRule = other.ProgressRule;
      }
      if (other.ProgressSliceCnt != 0) {
        ProgressSliceCnt = other.ProgressSliceCnt;
      }
      if (other.ProgressExposeTime != 0) {
        ProgressExposeTime = other.ProgressExposeTime;
      }
      if (other.VwapParticipation != 0F) {
        VwapParticipation = other.VwapParticipation;
      }
      if (other.MinMktOnClosePct != 0) {
        MinMktOnClosePct = other.MinMktOnClosePct;
      }
      if (other.MaxMakeExchFee != 0F) {
        MaxMakeExchFee = other.MaxMakeExchFee;
      }
      if (other.MaxTakeExchFee != 0F) {
        MaxTakeExchFee = other.MaxTakeExchFee;
      }
      if (other.IncTakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        IncTakeExchFee = other.IncTakeExchFee;
      }
      if (other.IncMakeExchFee != global::Spiderrock.Protobuf.IncExchFee.Unspecified) {
        IncMakeExchFee = other.IncMakeExchFee;
      }
      if (other.MakeExchRule != global::Spiderrock.Protobuf.MakeExchRule.Unspecified) {
        MakeExchRule = other.MakeExchRule;
      }
      if (other.MaxChildOrders != 0) {
        MaxChildOrders = other.MaxChildOrders;
      }
      if (other.ExchMask != 0) {
        ExchMask = other.ExchMask;
      }
      if (other.MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        MarketSession = other.MarketSession;
      }
      if (other.startDttm_ != null) {
        if (startDttm_ == null) {
          StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDttm.MergeFrom(other.StartDttm);
      }
      if (other.OrderDuration != 0) {
        OrderDuration = other.OrderDuration;
      }
      if (other.ActiveDuration != 0) {
        ActiveDuration = other.ActiveDuration;
      }
      if (other.goodTillDttm_ != null) {
        if (goodTillDttm_ == null) {
          GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        GoodTillDttm.MergeFrom(other.GoodTillDttm);
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        TakeLimitClass = other.TakeLimitClass;
      }
      if (other.MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        MakeLimitClass = other.MakeLimitClass;
      }
      if (other.HedgeFillUMarkLmtPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HedgeFillUMarkLmtPrc = other.HedgeFillUMarkLmtPrc;
      }
      if (other.OrderPrcLimit != 0D) {
        OrderPrcLimit = other.OrderPrcLimit;
      }
      if (other.OrderPrcOffset != 0D) {
        OrderPrcOffset = other.OrderPrcOffset;
      }
      if (other.StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        StateModel = other.StateModel;
      }
      if (other.TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        TakeAlphaType = other.TakeAlphaType;
      }
      if (other.MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        MakeAlphaType = other.MakeAlphaType;
      }
      if (other.TakeAlphaFactor != 0F) {
        TakeAlphaFactor = other.TakeAlphaFactor;
      }
      if (other.MakeAlphaFactor != 0F) {
        MakeAlphaFactor = other.MakeAlphaFactor;
      }
      if (other.TakeProbability != 0F) {
        TakeProbability = other.TakeProbability;
      }
      if (other.MakeProbability != 0F) {
        MakeProbability = other.MakeProbability;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            AltOrderId = input.ReadString();
            break;
          }
          case 850: {
            AltAccnt = input.ReadString();
            break;
          }
          case 874: {
            AltUserName = input.ReadString();
            break;
          }
          case 898: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 970: {
            ExternParams = input.ReadString();
            break;
          }
          case 994: {
            Strategy = input.ReadString();
            break;
          }
          case 1018: {
            UserName = input.ReadString();
            break;
          }
          case 1040: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 1064: {
            HedgeTarget = (global::Spiderrock.Protobuf.HedgeTarget) input.ReadEnum();
            break;
          }
          case 1093: {
            MinHedgeDDelta = input.ReadFloat();
            break;
          }
          case 1117: {
            MaxHedgeDDelta = input.ReadFloat();
            break;
          }
          case 1136: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1160: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1184: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 1208: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 1232: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 1256: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1280: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 1304: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 1328: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1357: {
            VwapParticipation = input.ReadFloat();
            break;
          }
          case 1376: {
            MinMktOnClosePct = input.ReadInt32();
            break;
          }
          case 1405: {
            MaxMakeExchFee = input.ReadFloat();
            break;
          }
          case 1429: {
            MaxTakeExchFee = input.ReadFloat();
            break;
          }
          case 1448: {
            IncTakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1472: {
            IncMakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1496: {
            MakeExchRule = (global::Spiderrock.Protobuf.MakeExchRule) input.ReadEnum();
            break;
          }
          case 1520: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 1544: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 1594: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 1616: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 1642: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 1664: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 1688: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 1712: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1736: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1760: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1785: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 1809: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 1832: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1856: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1880: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1909: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1933: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1957: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 1981: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 2002: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2008: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2016: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 2024: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 2034: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 2042: {
            ExternExDest = input.ReadString();
            break;
          }
          case 2048: {
            HedgeFillUMarkLmtPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            AltOrderId = input.ReadString();
            break;
          }
          case 850: {
            AltAccnt = input.ReadString();
            break;
          }
          case 874: {
            AltUserName = input.ReadString();
            break;
          }
          case 898: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 970: {
            ExternParams = input.ReadString();
            break;
          }
          case 994: {
            Strategy = input.ReadString();
            break;
          }
          case 1018: {
            UserName = input.ReadString();
            break;
          }
          case 1040: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 1064: {
            HedgeTarget = (global::Spiderrock.Protobuf.HedgeTarget) input.ReadEnum();
            break;
          }
          case 1093: {
            MinHedgeDDelta = input.ReadFloat();
            break;
          }
          case 1117: {
            MaxHedgeDDelta = input.ReadFloat();
            break;
          }
          case 1136: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1160: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 1184: {
            MaxExposureSize = input.ReadInt32();
            break;
          }
          case 1208: {
            NumMakeExchanges = input.ReadInt32();
            break;
          }
          case 1232: {
            PublicSize = (global::Spiderrock.Protobuf.PublicSizeHandling) input.ReadEnum();
            break;
          }
          case 1256: {
            CanOverlapCxlRepl = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1280: {
            ProgressRule = (global::Spiderrock.Protobuf.ProgressRule) input.ReadEnum();
            break;
          }
          case 1304: {
            ProgressSliceCnt = input.ReadInt32();
            break;
          }
          case 1328: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1357: {
            VwapParticipation = input.ReadFloat();
            break;
          }
          case 1376: {
            MinMktOnClosePct = input.ReadInt32();
            break;
          }
          case 1405: {
            MaxMakeExchFee = input.ReadFloat();
            break;
          }
          case 1429: {
            MaxTakeExchFee = input.ReadFloat();
            break;
          }
          case 1448: {
            IncTakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1472: {
            IncMakeExchFee = (global::Spiderrock.Protobuf.IncExchFee) input.ReadEnum();
            break;
          }
          case 1496: {
            MakeExchRule = (global::Spiderrock.Protobuf.MakeExchRule) input.ReadEnum();
            break;
          }
          case 1520: {
            MaxChildOrders = input.ReadInt32();
            break;
          }
          case 1544: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 1594: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 1616: {
            OrderDuration = input.ReadInt32();
            break;
          }
          case 1642: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 1664: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 1688: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 1712: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1736: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1760: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 1785: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 1809: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 1832: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1856: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1880: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1909: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1933: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1957: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 1981: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 2002: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2008: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2016: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 2024: {
            ActiveDuration = input.ReadInt32();
            break;
          }
          case 2034: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 2042: {
            ExternExDest = input.ReadString();
            break;
          }
          case 2048: {
            HedgeFillUMarkLmtPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrAutoHedgeControl message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAutoHedgeControl.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          riskGroupId_ = other.riskGroupId_;
          hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
          hedgeSecType_ = other.hedgeSecType_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "risk_group_id" field.</summary>
        public const int RiskGroupIdFieldNumber = 11;
        private long riskGroupId_;
        /// <summary>
        /// riskGroupId = 0 means hedgeScope = Accnt
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long RiskGroupId {
          get { return riskGroupId_; }
          set {
            riskGroupId_ = value;
          }
        }

        /// <summary>Field number for the "hedge_sec_key" field.</summary>
        public const int HedgeSecKeyFieldNumber = 12;
        private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
        /// <summary>
        /// Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
          get { return hedgeSecKey_; }
          set {
            hedgeSecKey_ = value;
          }
        }

        /// <summary>Field number for the "hedge_sec_type" field.</summary>
        public const int HedgeSecTypeFieldNumber = 13;
        private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        /// <summary>
        /// Execution Hedge SecType (Stock or Future)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
          get { return hedgeSecType_; }
          set {
            hedgeSecType_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (RiskGroupId != other.RiskGroupId) return false;
          if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
          if (HedgeSecType != other.HedgeSecType) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
          if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (RiskGroupId != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (RiskGroupId != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (RiskGroupId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
          }
          if (hedgeSecKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
          }
          if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.RiskGroupId != 0L) {
            RiskGroupId = other.RiskGroupId;
          }
          if (other.hedgeSecKey_ != null) {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            HedgeSecKey.MergeFrom(other.HedgeSecKey);
          }
          if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            HedgeSecType = other.HedgeSecType;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                RiskGroupId = input.ReadInt64();
                break;
              }
              case 98: {
                if (hedgeSecKey_ == null) {
                  HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(HedgeSecKey);
                break;
              }
              case 104: {
                HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                RiskGroupId = input.ReadInt64();
                break;
              }
              case 98: {
                if (hedgeSecKey_ == null) {
                  HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(HedgeSecKey);
                break;
              }
              case 104: {
                HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
