// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrParentLimit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrParentLimit.proto</summary>
  public static partial class SpdrParentLimitReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrParentLimit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrParentLimitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJQYXJlbnRMaW1pdC5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i+RsKD1NwZHJQ",
            "YXJlbnRMaW1pdBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuTWVzc2FnZU1ldGFkYXRhEjcKBHBrZXkYAiABKAsyKS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJQYXJlbnRMaW1pdC5QS2V5EjwKD3N5c19lbnZpcm9u",
            "bWVudBhkIAEoDjIjLnNwaWRlcnJvY2sucHJvdG9idWYuU3lzRW52aXJvbm1l",
            "bnQSMgoKcnVuX3N0YXR1cxhnIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "UnVuU3RhdHVzEhkKEW9yZGVyX2FjdGl2ZV9zaXplGGogASgFEjkKFWFkZF9j",
            "dW1fZmlsbF9xdWFudGl0eRhtIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "WWVzTm8SPAoQb3JkZXJfbGltaXRfdHlwZRhwIAEoDjIiLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuU3BkckxpbWl0VHlwZRI9ChB0YWtlX2xpbWl0X2NsYXNzGHMg",
            "ASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyTGltaXRDbGFzcxI9ChBt",
            "YWtlX2xpbWl0X2NsYXNzGHYgASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5T",
            "cGRyTGltaXRDbGFzcxIXCg9vcmRlcl9wcmNfbGltaXQYeSABKAESFgoOb3Jk",
            "ZXJfcmVmX3VQcmMYfCABKAESFwoPb3JkZXJfcmVmX2RlbHRhGH8gASgCEhgK",
            "D29yZGVyX3JlZl9nYW1tYRiCASABKAISGAoPb3JkZXJfdm9sX2xpbWl0GIUB",
            "IAEoAhIWCg1yYXRlX292ZXJyaWRlGIgBIAEoAhIWCg1zZGl2X292ZXJyaWRl",
            "GIsBIAEoAhIWCg1kZGl2X292ZXJyaWRlGI4BIAEoCRI5Cg1vdmVycmlkZV9j",
            "b2RlGJEBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuT3ZlcnJpZGVDb2Rl",
            "EhkKEG9yZGVyX3ByY19vZmZzZXQYlAEgASgBEjUKC3N0YXRlX21vZGVsGJcB",
            "IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuU3RhdGVNb2RlbBI3Cg11X3N0",
            "YXRlX21vZGVsGJoBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuU3RhdGVN",
            "b2RlbBI4Cg90YWtlX2FscGhhX3R5cGUYnQEgASgOMh4uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5BbHBoYVR5cGUSOAoPbWFrZV9hbHBoYV90eXBlGKABIAEoDjIe",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuQWxwaGFUeXBlEhoKEXRha2VfYWxwaGFf",
            "ZmFjdG9yGKMBIAEoAhIaChFtYWtlX2FscGhhX2ZhY3RvchimASABKAISGQoQ",
            "dGFrZV9wcm9iYWJpbGl0eRipASABKAISGQoQbWFrZV9wcm9iYWJpbGl0eRis",
            "ASABKAISHQoUdGFrZV9zdXJmX3ByY19vZmZzZXQYrwEgASgBEh0KFHRha2Vf",
            "c3VyZl92b2xfb2Zmc2V0GLIBIAEoAhIfChZ0YWtlX3N1cmZfd2lkdGhfb2Zm",
            "c2V0GLUBIAEoAhIdChRtYWtlX3N1cmZfcHJjX29mZnNldBi4ASABKAESHQoU",
            "bWFrZV9zdXJmX3ZvbF9vZmZzZXQYuwEgASgCEh8KFm1ha2Vfc3VyZl93aWR0",
            "aF9vZmZzZXQYvgEgASgCEh0KFG9yZGVyX3JlZl9ldmVudF9tdWx0GMEBIAEo",
            "AhI5ChRvcmRlcl9yZWZfZXZlbnRfZHR0bRjEASABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhIKCWV4Y2hfbWFzaxjHASABKA0SNQoOY3hsX3VQ",
            "cmNfcmFuZ2UYkQMgASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5VUHJjQ3hs",
            "EhEKCG1pbl91QmlkGJIDIAEoAhIRCghtYXhfdUFzaxiTAyABKAISNgoMbWlu",
            "X21heF90eXBlGJQDIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTWluTWF4",
            "VHlwZRIWCg1taW5fb3B0aW9uX3B4GJUDIAEoAhIvCgpzdGFydF9kdHRtGM0B",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGAoPYWN0aXZlX2R1",
            "cmF0aW9uGJYDIAEoBRIdChRwcm9ncmVzc19leHBvc2VfdGltZRjWASABKAUS",
            "HwoWZXhwX2RheV93dF92ZWdhX29mZnNldBjxASABKAISHwoWbWF4X2V4cF9k",
            "YXlfd3RfdmVnYV9sbhjrASABKAISHwoWbWF4X2V4cF9kYXlfd3RfdmVnYV9z",
            "aBjuASABKAISIAoXbWF4X2V4cF9kYXlfck1ldHJpYzZfbG4YjwIgASgCEiAK",
            "F21heF9leHBfZGF5X3JNZXRyaWM2X3NoGJICIAEoAhIeChVzeW1fZGF5X2RE",
            "ZWx0YV9vZmZzZXQYjAIgASgCEh4KFW1heF9zeW1fZGF5X2REZWx0YV9sbhiG",
            "AiABKAISHgoVbWF4X3N5bV9kYXlfZERlbHRhX3NoGIkCIAEoAhIcChNzeW1f",
            "ZGF5X3ZlZ2Ffb2Zmc2V0GPoBIAEoAhIcChNtYXhfc3ltX2RheV92ZWdhX2xu",
            "GPQBIAEoAhIcChNtYXhfc3ltX2RheV92ZWdhX3NoGPcBIAEoAhIfChZzeW1f",
            "ZGF5X3d0X3ZlZ2Ffb2Zmc2V0GIMCIAEoAhIfChZtYXhfc3ltX2RheV93dF92",
            "ZWdhX2xuGP0BIAEoAhIfChZtYXhfc3ltX2RheV93dF92ZWdhX3NoGIACIAEo",
            "AhIgChdtYXhfc3ltX2RheV9yTWV0cmljN19sbhiYAiABKAISIAoXbWF4X3N5",
            "bV9kYXlfck1ldHJpYzdfc2gYmwIgASgCEh4KFW1heF9ncnBfZGF5X2REZWx0",
            "YV9sbhihAiABKAISHgoVbWF4X2dycF9kYXlfZERlbHRhX3NoGKQCIAEoAhIc",
            "ChNtYXhfZ3JwX2RheV92ZWdhX2xuGKoCIAEoAhIcChNtYXhfZ3JwX2RheV92",
            "ZWdhX3NoGK0CIAEoAhIdChRtYXhfZ3JwX2RheV92ZWdhX2FicxiwAiABKAIS",
            "GwoSZ3JwX2RheV92ZWdhX3JhdGlvGLMCIAEoAhIhChhtYXhfZ3JwX2RheV9j",
            "b250cmFjdHNfbG4Y5gIgASgFEiEKGG1heF9ncnBfZGF5X2NvbnRyYWN0c19z",
            "aBjpAiABKAUSIgoZbWF4X2dycF9kYXlfY29udHJhY3RzX2FicxjsAiABKAUS",
            "IAoXbWF4X2dycF9kYXlfck1ldHJpYzFfbG4YwgIgASgCEiAKF21heF9ncnBf",
            "ZGF5X3JNZXRyaWMxX3NoGMUCIAEoAhIhChhtYXhfZ3JwX2RheV9yTWV0cmlj",
            "MV9hYnMYyAIgASgCEh8KFmdycF9kYXlfck1ldHJpYzFfcmF0aW8YywIgASgC",
            "EiAKF21heF9ncnBfZGF5X3JNZXRyaWMyX2xuGM4CIAEoAhIgChdtYXhfZ3Jw",
            "X2RheV9yTWV0cmljMl9zaBjRAiABKAISIAoXbWF4X2dycF9kYXlfck1ldHJp",
            "YzNfbG4Y1AIgASgCEiAKF21heF9ncnBfZGF5X3JNZXRyaWMzX3NoGNcCIAEo",
            "AhIgChdtYXhfZ3JwX2RheV9yTWV0cmljNF9sbhjaAiABKAISIAoXbWF4X2dy",
            "cF9kYXlfck1ldHJpYzRfc2gY3QIgASgCEiAKF21heF9ncnBfZGF5X3JNZXRy",
            "aWM1X2xuGOACIAEoAhIgChdtYXhfZ3JwX2RheV9yTWV0cmljNV9zaBjjAiAB",
            "KAISHgoVc3ltX2VtYV9jeGxfZERlbHRhX2xuGO8CIAEoAhIeChVzeW1fZW1h",
            "X2N4bF9kRGVsdGFfc2gY8gIgASgCEh8KFnN5bV9lbWFfY3hsX3d0X3ZlZ2Ff",
            "bG4Y9QIgASgCEh8KFnN5bV9lbWFfY3hsX3d0X3ZlZ2Ffc2gY+AIgASgCEhEK",
            "CHRoZW9fdm9sGPsCIAEoAhIXCg5jbF9hcnJpdmVfbWFyaxj+AiABKAISEwoK",
            "dXNlcl9kYXRhMRiBAyABKAkSEwoKdXNlcl9kYXRhMhiEAyABKAkSFwoOZXhl",
            "Y19icmtyX2NvZGUYhwMgASgJEhQKC21vZGlmaWVkX2J5GIoDIAEoCRI5Cgtt",
            "b2RpZmllZF9pbhiNAyABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlN5c0Vu",
            "dmlyb25tZW50Ei4KCXRpbWVzdGFtcBiQAyABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wGo4CCgRQS2V5Eg0KBWFjY250GAogASgJEi8KB3NlY19r",
            "ZXkYCyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRIyCghz",
            "ZWNfdHlwZRgMIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5",
            "cGUSNAoLc3Bkcl9zb3VyY2UYDSABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlNwZHJTb3VyY2USMAoKb3JkZXJfc2lkZRgOIAEoDjIcLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuQnV5U2VsbBIVCg1ncm91cGluZ19jb2RlGA8gASgDEhMKC2Ns",
            "aWVudF9maXJtGBAgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentLimit), global::Spiderrock.Protobuf.SpdrParentLimit.Parser, new[]{ "Meta", "Pkey", "SysEnvironment", "RunStatus", "OrderActiveSize", "AddCumFillQuantity", "OrderLimitType", "TakeLimitClass", "MakeLimitClass", "OrderPrcLimit", "OrderRefUPrc", "OrderRefDelta", "OrderRefGamma", "OrderVolLimit", "RateOverride", "SdivOverride", "DdivOverride", "OverrideCode", "OrderPrcOffset", "StateModel", "UStateModel", "TakeAlphaType", "MakeAlphaType", "TakeAlphaFactor", "MakeAlphaFactor", "TakeProbability", "MakeProbability", "TakeSurfPrcOffset", "TakeSurfVolOffset", "TakeSurfWidthOffset", "MakeSurfPrcOffset", "MakeSurfVolOffset", "MakeSurfWidthOffset", "OrderRefEventMult", "OrderRefEventDttm", "ExchMask", "CxlUPrcRange", "MinUBid", "MaxUAsk", "MinMaxType", "MinOptionPx", "StartDttm", "ActiveDuration", "ProgressExposeTime", "ExpDayWtVegaOffset", "MaxExpDayWtVegaLn", "MaxExpDayWtVegaSh", "MaxExpDayRMetric6Ln", "MaxExpDayRMetric6Sh", "SymDayDDeltaOffset", "MaxSymDayDDeltaLn", "MaxSymDayDDeltaSh", "SymDayVegaOffset", "MaxSymDayVegaLn", "MaxSymDayVegaSh", "SymDayWtVegaOffset", "MaxSymDayWtVegaLn", "MaxSymDayWtVegaSh", "MaxSymDayRMetric7Ln", "MaxSymDayRMetric7Sh", "MaxGrpDayDDeltaLn", "MaxGrpDayDDeltaSh", "MaxGrpDayVegaLn", "MaxGrpDayVegaSh", "MaxGrpDayVegaAbs", "GrpDayVegaRatio", "MaxGrpDayContractsLn", "MaxGrpDayContractsSh", "MaxGrpDayContractsAbs", "MaxGrpDayRMetric1Ln", "MaxGrpDayRMetric1Sh", "MaxGrpDayRMetric1Abs", "GrpDayRMetric1Ratio", "MaxGrpDayRMetric2Ln", "MaxGrpDayRMetric2Sh", "MaxGrpDayRMetric3Ln", "MaxGrpDayRMetric3Sh", "MaxGrpDayRMetric4Ln", "MaxGrpDayRMetric4Sh", "MaxGrpDayRMetric5Ln", "MaxGrpDayRMetric5Sh", "SymEmaCxlDDeltaLn", "SymEmaCxlDDeltaSh", "SymEmaCxlWtVegaLn", "SymEmaCxlWtVegaSh", "TheoVol", "ClArriveMark", "UserData1", "UserData2", "ExecBrkrCode", "ModifiedBy", "ModifiedIn", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey), global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey.Parser, new[]{ "Accnt", "SecKey", "SecType", "SpdrSource", "OrderSide", "GroupingCode", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrParentLimit records are supplied by clients (via SRSE) for use with parent orders having orderLimitType=Aux.  This table can be updated either before or after a parent order begins working and will influence the limit(s) used when working child orders.  Updates to this table do not constitute cancel/replace operations for the parent order.
  /// </summary>
  public sealed partial class SpdrParentLimit : pb::IMessage<SpdrParentLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrParentLimit> _parser = new pb::MessageParser<SpdrParentLimit>(() => new SpdrParentLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrParentLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrParentLimitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentLimit(SpdrParentLimit other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      sysEnvironment_ = other.sysEnvironment_;
      runStatus_ = other.runStatus_;
      orderActiveSize_ = other.orderActiveSize_;
      addCumFillQuantity_ = other.addCumFillQuantity_;
      orderLimitType_ = other.orderLimitType_;
      takeLimitClass_ = other.takeLimitClass_;
      makeLimitClass_ = other.makeLimitClass_;
      orderPrcLimit_ = other.orderPrcLimit_;
      orderRefUPrc_ = other.orderRefUPrc_;
      orderRefDelta_ = other.orderRefDelta_;
      orderRefGamma_ = other.orderRefGamma_;
      orderVolLimit_ = other.orderVolLimit_;
      rateOverride_ = other.rateOverride_;
      sdivOverride_ = other.sdivOverride_;
      ddivOverride_ = other.ddivOverride_;
      overrideCode_ = other.overrideCode_;
      orderPrcOffset_ = other.orderPrcOffset_;
      stateModel_ = other.stateModel_;
      uStateModel_ = other.uStateModel_;
      takeAlphaType_ = other.takeAlphaType_;
      makeAlphaType_ = other.makeAlphaType_;
      takeAlphaFactor_ = other.takeAlphaFactor_;
      makeAlphaFactor_ = other.makeAlphaFactor_;
      takeProbability_ = other.takeProbability_;
      makeProbability_ = other.makeProbability_;
      takeSurfPrcOffset_ = other.takeSurfPrcOffset_;
      takeSurfVolOffset_ = other.takeSurfVolOffset_;
      takeSurfWidthOffset_ = other.takeSurfWidthOffset_;
      makeSurfPrcOffset_ = other.makeSurfPrcOffset_;
      makeSurfVolOffset_ = other.makeSurfVolOffset_;
      makeSurfWidthOffset_ = other.makeSurfWidthOffset_;
      orderRefEventMult_ = other.orderRefEventMult_;
      orderRefEventDttm_ = other.orderRefEventDttm_ != null ? other.orderRefEventDttm_.Clone() : null;
      exchMask_ = other.exchMask_;
      cxlUPrcRange_ = other.cxlUPrcRange_;
      minUBid_ = other.minUBid_;
      maxUAsk_ = other.maxUAsk_;
      minMaxType_ = other.minMaxType_;
      minOptionPx_ = other.minOptionPx_;
      startDttm_ = other.startDttm_ != null ? other.startDttm_.Clone() : null;
      activeDuration_ = other.activeDuration_;
      progressExposeTime_ = other.progressExposeTime_;
      expDayWtVegaOffset_ = other.expDayWtVegaOffset_;
      maxExpDayWtVegaLn_ = other.maxExpDayWtVegaLn_;
      maxExpDayWtVegaSh_ = other.maxExpDayWtVegaSh_;
      maxExpDayRMetric6Ln_ = other.maxExpDayRMetric6Ln_;
      maxExpDayRMetric6Sh_ = other.maxExpDayRMetric6Sh_;
      symDayDDeltaOffset_ = other.symDayDDeltaOffset_;
      maxSymDayDDeltaLn_ = other.maxSymDayDDeltaLn_;
      maxSymDayDDeltaSh_ = other.maxSymDayDDeltaSh_;
      symDayVegaOffset_ = other.symDayVegaOffset_;
      maxSymDayVegaLn_ = other.maxSymDayVegaLn_;
      maxSymDayVegaSh_ = other.maxSymDayVegaSh_;
      symDayWtVegaOffset_ = other.symDayWtVegaOffset_;
      maxSymDayWtVegaLn_ = other.maxSymDayWtVegaLn_;
      maxSymDayWtVegaSh_ = other.maxSymDayWtVegaSh_;
      maxSymDayRMetric7Ln_ = other.maxSymDayRMetric7Ln_;
      maxSymDayRMetric7Sh_ = other.maxSymDayRMetric7Sh_;
      maxGrpDayDDeltaLn_ = other.maxGrpDayDDeltaLn_;
      maxGrpDayDDeltaSh_ = other.maxGrpDayDDeltaSh_;
      maxGrpDayVegaLn_ = other.maxGrpDayVegaLn_;
      maxGrpDayVegaSh_ = other.maxGrpDayVegaSh_;
      maxGrpDayVegaAbs_ = other.maxGrpDayVegaAbs_;
      grpDayVegaRatio_ = other.grpDayVegaRatio_;
      maxGrpDayContractsLn_ = other.maxGrpDayContractsLn_;
      maxGrpDayContractsSh_ = other.maxGrpDayContractsSh_;
      maxGrpDayContractsAbs_ = other.maxGrpDayContractsAbs_;
      maxGrpDayRMetric1Ln_ = other.maxGrpDayRMetric1Ln_;
      maxGrpDayRMetric1Sh_ = other.maxGrpDayRMetric1Sh_;
      maxGrpDayRMetric1Abs_ = other.maxGrpDayRMetric1Abs_;
      grpDayRMetric1Ratio_ = other.grpDayRMetric1Ratio_;
      maxGrpDayRMetric2Ln_ = other.maxGrpDayRMetric2Ln_;
      maxGrpDayRMetric2Sh_ = other.maxGrpDayRMetric2Sh_;
      maxGrpDayRMetric3Ln_ = other.maxGrpDayRMetric3Ln_;
      maxGrpDayRMetric3Sh_ = other.maxGrpDayRMetric3Sh_;
      maxGrpDayRMetric4Ln_ = other.maxGrpDayRMetric4Ln_;
      maxGrpDayRMetric4Sh_ = other.maxGrpDayRMetric4Sh_;
      maxGrpDayRMetric5Ln_ = other.maxGrpDayRMetric5Ln_;
      maxGrpDayRMetric5Sh_ = other.maxGrpDayRMetric5Sh_;
      symEmaCxlDDeltaLn_ = other.symEmaCxlDDeltaLn_;
      symEmaCxlDDeltaSh_ = other.symEmaCxlDDeltaSh_;
      symEmaCxlWtVegaLn_ = other.symEmaCxlWtVegaLn_;
      symEmaCxlWtVegaSh_ = other.symEmaCxlWtVegaSh_;
      theoVol_ = other.theoVol_;
      clArriveMark_ = other.clArriveMark_;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      execBrkrCode_ = other.execBrkrCode_;
      modifiedBy_ = other.modifiedBy_;
      modifiedIn_ = other.modifiedIn_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentLimit Clone() {
      return new SpdrParentLimit(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 100;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    /// <summary>
    /// original (source) sys environment [Stable, Current, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "run_status" field.</summary>
    public const int RunStatusFieldNumber = 103;
    private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
    /// <summary>
    /// original (source) run status [Prod,Beta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RunStatus RunStatus {
      get { return runStatus_; }
      set {
        runStatus_ = value;
      }
    }

    /// <summary>Field number for the "order_active_size" field.</summary>
    public const int OrderActiveSizeFieldNumber = 106;
    private int orderActiveSize_;
    /// <summary>
    /// OrderActiveSize = -1 will use all available parent order size; OrderActiveSize = 0 will cancel any existing child orders;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderActiveSize {
      get { return orderActiveSize_; }
      set {
        orderActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "add_cum_fill_quantity" field.</summary>
    public const int AddCumFillQuantityFieldNumber = 109;
    private global::Spiderrock.Protobuf.YesNo addCumFillQuantity_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// If Yes then OrderActiveSize is calculated @ order arrival as requested OrderActiveSize + existing 'CumFillQuantity'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo AddCumFillQuantity {
      get { return addCumFillQuantity_; }
      set {
        addCumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_class" field.</summary>
    public const int TakeLimitClassFieldNumber = 115;
    private global::Spiderrock.Protobuf.SpdrLimitClass takeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass TakeLimitClass {
      get { return takeLimitClass_; }
      set {
        takeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_class" field.</summary>
    public const int MakeLimitClassFieldNumber = 118;
    private global::Spiderrock.Protobuf.SpdrLimitClass makeLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass MakeLimitClass {
      get { return makeLimitClass_; }
      set {
        makeLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_limit" field.</summary>
    public const int OrderPrcLimitFieldNumber = 121;
    private double orderPrcLimit_;
    /// <summary>
    /// Applies if LimitType = Prc[]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcLimit {
      get { return orderPrcLimit_; }
      set {
        orderPrcLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_uPrc" field.</summary>
    public const int OrderRefUPrcFieldNumber = 124;
    private double orderRefUPrc_;
    /// <summary>
    /// default=underlier.mid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderRefUPrc {
      get { return orderRefUPrc_; }
      set {
        orderRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_delta" field.</summary>
    public const int OrderRefDeltaFieldNumber = 127;
    private float orderRefDelta_;
    /// <summary>
    /// default=option.delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefDelta {
      get { return orderRefDelta_; }
      set {
        orderRefDelta_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_gamma" field.</summary>
    public const int OrderRefGammaFieldNumber = 130;
    private float orderRefGamma_;
    /// <summary>
    /// default=option.gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefGamma {
      get { return orderRefGamma_; }
      set {
        orderRefGamma_ = value;
      }
    }

    /// <summary>Field number for the "order_vol_limit" field.</summary>
    public const int OrderVolLimitFieldNumber = 133;
    private float orderVolLimit_;
    /// <summary>
    /// Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderVolLimit {
      get { return orderVolLimit_; }
      set {
        orderVolLimit_ = value;
      }
    }

    /// <summary>Field number for the "rate_override" field.</summary>
    public const int RateOverrideFieldNumber = 136;
    private float rateOverride_;
    /// <summary>
    /// (depricated) zero = ignore;> zero = override
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RateOverride {
      get { return rateOverride_; }
      set {
        rateOverride_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_override" field.</summary>
    public const int SdivOverrideFieldNumber = 139;
    private float sdivOverride_;
    /// <summary>
    /// (depricated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivOverride {
      get { return sdivOverride_; }
      set {
        sdivOverride_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_override" field.</summary>
    public const int DdivOverrideFieldNumber = 142;
    private string ddivOverride_ = "";
    /// <summary>
    /// (depricated) discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DdivOverride {
      get { return ddivOverride_; }
      set {
        ddivOverride_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "override_code" field.</summary>
    public const int OverrideCodeFieldNumber = 145;
    private global::Spiderrock.Protobuf.OverrideCode overrideCode_ = global::Spiderrock.Protobuf.OverrideCode.Unspecified;
    /// <summary>
    /// (depricated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OverrideCode OverrideCode {
      get { return overrideCode_; }
      set {
        overrideCode_ = value;
      }
    }

    /// <summary>Field number for the "order_prc_offset" field.</summary>
    public const int OrderPrcOffsetFieldNumber = 148;
    private double orderPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderPrcOffset {
      get { return orderPrcOffset_; }
      set {
        orderPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "state_model" field.</summary>
    public const int StateModelFieldNumber = 151;
    private global::Spiderrock.Protobuf.StateModel stateModel_ = global::Spiderrock.Protobuf.StateModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StateModel StateModel {
      get { return stateModel_; }
      set {
        stateModel_ = value;
      }
    }

    /// <summary>Field number for the "u_state_model" field.</summary>
    public const int UStateModelFieldNumber = 154;
    private global::Spiderrock.Protobuf.StateModel uStateModel_ = global::Spiderrock.Protobuf.StateModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StateModel UStateModel {
      get { return uStateModel_; }
      set {
        uStateModel_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_type" field.</summary>
    public const int TakeAlphaTypeFieldNumber = 157;
    private global::Spiderrock.Protobuf.AlphaType takeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if takeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType TakeAlphaType {
      get { return takeAlphaType_; }
      set {
        takeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_type" field.</summary>
    public const int MakeAlphaTypeFieldNumber = 160;
    private global::Spiderrock.Protobuf.AlphaType makeAlphaType_ = global::Spiderrock.Protobuf.AlphaType.Unspecified;
    /// <summary>
    /// Applies if makeLimitClass = Probability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlphaType MakeAlphaType {
      get { return makeAlphaType_; }
      set {
        makeAlphaType_ = value;
      }
    }

    /// <summary>Field number for the "take_alpha_factor" field.</summary>
    public const int TakeAlphaFactorFieldNumber = 163;
    private float takeAlphaFactor_;
    /// <summary>
    /// [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeAlphaFactor {
      get { return takeAlphaFactor_; }
      set {
        takeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "make_alpha_factor" field.</summary>
    public const int MakeAlphaFactorFieldNumber = 166;
    private float makeAlphaFactor_;
    /// <summary>
    /// [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeAlphaFactor {
      get { return makeAlphaFactor_; }
      set {
        makeAlphaFactor_ = value;
      }
    }

    /// <summary>Field number for the "take_probability" field.</summary>
    public const int TakeProbabilityFieldNumber = 169;
    private float takeProbability_;
    /// <summary>
    /// takeProbLimit = takeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeProbability {
      get { return takeProbability_; }
      set {
        takeProbability_ = value;
      }
    }

    /// <summary>Field number for the "make_probability" field.</summary>
    public const int MakeProbabilityFieldNumber = 172;
    private float makeProbability_;
    /// <summary>
    /// makeProbLimit = makeProbability [if AlphaType = Static]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeProbability {
      get { return makeProbability_; }
      set {
        makeProbability_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_prc_offset" field.</summary>
    public const int TakeSurfPrcOffsetFieldNumber = 175;
    private double takeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeSurfPrcOffset {
      get { return takeSurfPrcOffset_; }
      set {
        takeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_vol_offset" field.</summary>
    public const int TakeSurfVolOffsetFieldNumber = 178;
    private float takeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfVolOffset {
      get { return takeSurfVolOffset_; }
      set {
        takeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_width_offset" field.</summary>
    public const int TakeSurfWidthOffsetFieldNumber = 181;
    private float takeSurfWidthOffset_;
    /// <summary>
    /// [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfWidthOffset {
      get { return takeSurfWidthOffset_; }
      set {
        takeSurfWidthOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_prc_offset" field.</summary>
    public const int MakeSurfPrcOffsetFieldNumber = 184;
    private double makeSurfPrcOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeSurfPrcOffset {
      get { return makeSurfPrcOffset_; }
      set {
        makeSurfPrcOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_vol_offset" field.</summary>
    public const int MakeSurfVolOffsetFieldNumber = 187;
    private float makeSurfVolOffset_;
    /// <summary>
    /// default=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfVolOffset {
      get { return makeSurfVolOffset_; }
      set {
        makeSurfVolOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_width_offset" field.</summary>
    public const int MakeSurfWidthOffsetFieldNumber = 190;
    private float makeSurfWidthOffset_;
    /// <summary>
    /// [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfWidthOffset {
      get { return makeSurfWidthOffset_; }
      set {
        makeSurfWidthOffset_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_mult" field.</summary>
    public const int OrderRefEventMultFieldNumber = 193;
    private float orderRefEventMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefEventMult {
      get { return orderRefEventMult_; }
      set {
        orderRefEventMult_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_event_dttm" field.</summary>
    public const int OrderRefEventDttmFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderRefEventDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderRefEventDttm {
      get { return orderRefEventDttm_; }
      set {
        orderRefEventDttm_ = value;
      }
    }

    /// <summary>Field number for the "exch_mask" field.</summary>
    public const int ExchMaskFieldNumber = 199;
    private uint exchMask_;
    /// <summary>
    /// eligible exchanges (0 = all), a non-zero mask must be in the subset of the SpdrParentOrder exchMask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExchMask {
      get { return exchMask_; }
      set {
        exchMask_ = value;
      }
    }

    /// <summary>Field number for the "cxl_uPrc_range" field.</summary>
    public const int CxlUPrcRangeFieldNumber = 401;
    private global::Spiderrock.Protobuf.UPrcCxl cxlUPrcRange_ = global::Spiderrock.Protobuf.UPrcCxl.Unspecified;
    /// <summary>
    /// cancel parent order if/when outside the uPrice range [ _Halt = also cancel if halted ]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UPrcCxl CxlUPrcRange {
      get { return cxlUPrcRange_; }
      set {
        cxlUPrcRange_ = value;
      }
    }

    /// <summary>Field number for the "min_uBid" field.</summary>
    public const int MinUBidFieldNumber = 402;
    private float minUBid_;
    /// <summary>
    /// [optional]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinUBid {
      get { return minUBid_; }
      set {
        minUBid_ = value;
      }
    }

    /// <summary>Field number for the "max_uAsk" field.</summary>
    public const int MaxUAskFieldNumber = 403;
    private float maxUAsk_;
    /// <summary>
    /// [optional] (&lt; $0.01 = none)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxUAsk {
      get { return maxUAsk_; }
      set {
        maxUAsk_ = value;
      }
    }

    /// <summary>Field number for the "min_max_type" field.</summary>
    public const int MinMaxTypeFieldNumber = 404;
    private global::Spiderrock.Protobuf.MinMaxType minMaxType_ = global::Spiderrock.Protobuf.MinMaxType.Unspecified;
    /// <summary>
    /// if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MinMaxType MinMaxType {
      get { return minMaxType_; }
      set {
        minMaxType_ = value;
      }
    }

    /// <summary>Field number for the "min_option_px" field.</summary>
    public const int MinOptionPxFieldNumber = 405;
    private float minOptionPx_;
    /// <summary>
    /// [optional] option price floor for tied to stock orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinOptionPx {
      get { return minOptionPx_; }
      set {
        minOptionPx_ = value;
      }
    }

    /// <summary>Field number for the "start_dttm" field.</summary>
    public const int StartDttmFieldNumber = 205;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDttm {
      get { return startDttm_; }
      set {
        startDttm_ = value;
      }
    }

    /// <summary>Field number for the "active_duration" field.</summary>
    public const int ActiveDurationFieldNumber = 406;
    private int activeDuration_;
    /// <summary>
    /// [optional] (number of seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveDuration {
      get { return activeDuration_; }
      set {
        activeDuration_ = value;
      }
    }

    /// <summary>Field number for the "progress_expose_time" field.</summary>
    public const int ProgressExposeTimeFieldNumber = 214;
    private int progressExposeTime_;
    /// <summary>
    /// minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking) (If the order is an Alpha type order, updating this will reset the alpha progression)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProgressExposeTime {
      get { return progressExposeTime_; }
      set {
        progressExposeTime_ = value;
      }
    }

    /// <summary>Field number for the "exp_day_wt_vega_offset" field.</summary>
    public const int ExpDayWtVegaOffsetFieldNumber = 241;
    private float expDayWtVegaOffset_;
    /// <summary>
    /// max acct+symbol day wtVega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExpDayWtVegaOffset {
      get { return expDayWtVegaOffset_; }
      set {
        expDayWtVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_wt_vega_ln" field.</summary>
    public const int MaxExpDayWtVegaLnFieldNumber = 235;
    private float maxExpDayWtVegaLn_;
    /// <summary>
    /// max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayWtVegaLn {
      get { return maxExpDayWtVegaLn_; }
      set {
        maxExpDayWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_wt_vega_sh" field.</summary>
    public const int MaxExpDayWtVegaShFieldNumber = 238;
    private float maxExpDayWtVegaSh_;
    /// <summary>
    /// max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayWtVegaSh {
      get { return maxExpDayWtVegaSh_; }
      set {
        maxExpDayWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_rMetric6_ln" field.</summary>
    public const int MaxExpDayRMetric6LnFieldNumber = 271;
    private float maxExpDayRMetric6Ln_;
    /// <summary>
    /// max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayRMetric6Ln {
      get { return maxExpDayRMetric6Ln_; }
      set {
        maxExpDayRMetric6Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_exp_day_rMetric6_sh" field.</summary>
    public const int MaxExpDayRMetric6ShFieldNumber = 274;
    private float maxExpDayRMetric6Sh_;
    /// <summary>
    /// max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxExpDayRMetric6Sh {
      get { return maxExpDayRMetric6Sh_; }
      set {
        maxExpDayRMetric6Sh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_dDelta_offset" field.</summary>
    public const int SymDayDDeltaOffsetFieldNumber = 268;
    private float symDayDDeltaOffset_;
    /// <summary>
    /// max acct+symbol day $delta offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayDDeltaOffset {
      get { return symDayDDeltaOffset_; }
      set {
        symDayDDeltaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_dDelta_ln" field.</summary>
    public const int MaxSymDayDDeltaLnFieldNumber = 262;
    private float maxSymDayDDeltaLn_;
    /// <summary>
    /// max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayDDeltaLn {
      get { return maxSymDayDDeltaLn_; }
      set {
        maxSymDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_dDelta_sh" field.</summary>
    public const int MaxSymDayDDeltaShFieldNumber = 265;
    private float maxSymDayDDeltaSh_;
    /// <summary>
    /// max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayDDeltaSh {
      get { return maxSymDayDDeltaSh_; }
      set {
        maxSymDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_vega_offset" field.</summary>
    public const int SymDayVegaOffsetFieldNumber = 250;
    private float symDayVegaOffset_;
    /// <summary>
    /// max acct+symbol day vega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayVegaOffset {
      get { return symDayVegaOffset_; }
      set {
        symDayVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_vega_ln" field.</summary>
    public const int MaxSymDayVegaLnFieldNumber = 244;
    private float maxSymDayVegaLn_;
    /// <summary>
    /// max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayVegaLn {
      get { return maxSymDayVegaLn_; }
      set {
        maxSymDayVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_vega_sh" field.</summary>
    public const int MaxSymDayVegaShFieldNumber = 247;
    private float maxSymDayVegaSh_;
    /// <summary>
    /// max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayVegaSh {
      get { return maxSymDayVegaSh_; }
      set {
        maxSymDayVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_day_wt_vega_offset" field.</summary>
    public const int SymDayWtVegaOffsetFieldNumber = 259;
    private float symDayWtVegaOffset_;
    /// <summary>
    /// max acct+symbol day wtVega offset (target)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymDayWtVegaOffset {
      get { return symDayWtVegaOffset_; }
      set {
        symDayWtVegaOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_wt_vega_ln" field.</summary>
    public const int MaxSymDayWtVegaLnFieldNumber = 253;
    private float maxSymDayWtVegaLn_;
    /// <summary>
    /// max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayWtVegaLn {
      get { return maxSymDayWtVegaLn_; }
      set {
        maxSymDayWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_wt_vega_sh" field.</summary>
    public const int MaxSymDayWtVegaShFieldNumber = 256;
    private float maxSymDayWtVegaSh_;
    /// <summary>
    /// max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayWtVegaSh {
      get { return maxSymDayWtVegaSh_; }
      set {
        maxSymDayWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_rMetric7_ln" field.</summary>
    public const int MaxSymDayRMetric7LnFieldNumber = 280;
    private float maxSymDayRMetric7Ln_;
    /// <summary>
    /// max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayRMetric7Ln {
      get { return maxSymDayRMetric7Ln_; }
      set {
        maxSymDayRMetric7Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_sym_day_rMetric7_sh" field.</summary>
    public const int MaxSymDayRMetric7ShFieldNumber = 283;
    private float maxSymDayRMetric7Sh_;
    /// <summary>
    /// max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSymDayRMetric7Sh {
      get { return maxSymDayRMetric7Sh_; }
      set {
        maxSymDayRMetric7Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_ln" field.</summary>
    public const int MaxGrpDayDDeltaLnFieldNumber = 289;
    private float maxGrpDayDDeltaLn_;
    /// <summary>
    /// max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaLn {
      get { return maxGrpDayDDeltaLn_; }
      set {
        maxGrpDayDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_dDelta_sh" field.</summary>
    public const int MaxGrpDayDDeltaShFieldNumber = 292;
    private float maxGrpDayDDeltaSh_;
    /// <summary>
    /// max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayDDeltaSh {
      get { return maxGrpDayDDeltaSh_; }
      set {
        maxGrpDayDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_ln" field.</summary>
    public const int MaxGrpDayVegaLnFieldNumber = 298;
    private float maxGrpDayVegaLn_;
    /// <summary>
    /// max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaLn {
      get { return maxGrpDayVegaLn_; }
      set {
        maxGrpDayVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_sh" field.</summary>
    public const int MaxGrpDayVegaShFieldNumber = 301;
    private float maxGrpDayVegaSh_;
    /// <summary>
    /// max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaSh {
      get { return maxGrpDayVegaSh_; }
      set {
        maxGrpDayVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_vega_abs" field.</summary>
    public const int MaxGrpDayVegaAbsFieldNumber = 304;
    private float maxGrpDayVegaAbs_;
    /// <summary>
    /// max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayVegaAbs {
      get { return maxGrpDayVegaAbs_; }
      set {
        maxGrpDayVegaAbs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_vega_ratio" field.</summary>
    public const int GrpDayVegaRatioFieldNumber = 307;
    private float grpDayVegaRatio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayVegaRatio {
      get { return grpDayVegaRatio_; }
      set {
        grpDayVegaRatio_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_ln" field.</summary>
    public const int MaxGrpDayContractsLnFieldNumber = 358;
    private int maxGrpDayContractsLn_;
    /// <summary>
    /// max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsLn {
      get { return maxGrpDayContractsLn_; }
      set {
        maxGrpDayContractsLn_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_sh" field.</summary>
    public const int MaxGrpDayContractsShFieldNumber = 361;
    private int maxGrpDayContractsSh_;
    /// <summary>
    /// max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsSh {
      get { return maxGrpDayContractsSh_; }
      set {
        maxGrpDayContractsSh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_contracts_abs" field.</summary>
    public const int MaxGrpDayContractsAbsFieldNumber = 364;
    private int maxGrpDayContractsAbs_;
    /// <summary>
    /// max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxGrpDayContractsAbs {
      get { return maxGrpDayContractsAbs_; }
      set {
        maxGrpDayContractsAbs_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_ln" field.</summary>
    public const int MaxGrpDayRMetric1LnFieldNumber = 322;
    private float maxGrpDayRMetric1Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Ln {
      get { return maxGrpDayRMetric1Ln_; }
      set {
        maxGrpDayRMetric1Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_sh" field.</summary>
    public const int MaxGrpDayRMetric1ShFieldNumber = 325;
    private float maxGrpDayRMetric1Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Sh {
      get { return maxGrpDayRMetric1Sh_; }
      set {
        maxGrpDayRMetric1Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric1_abs" field.</summary>
    public const int MaxGrpDayRMetric1AbsFieldNumber = 328;
    private float maxGrpDayRMetric1Abs_;
    /// <summary>
    /// max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric1Abs {
      get { return maxGrpDayRMetric1Abs_; }
      set {
        maxGrpDayRMetric1Abs_ = value;
      }
    }

    /// <summary>Field number for the "grp_day_rMetric1_ratio" field.</summary>
    public const int GrpDayRMetric1RatioFieldNumber = 331;
    private float grpDayRMetric1Ratio_;
    /// <summary>
    /// target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GrpDayRMetric1Ratio {
      get { return grpDayRMetric1Ratio_; }
      set {
        grpDayRMetric1Ratio_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric2_ln" field.</summary>
    public const int MaxGrpDayRMetric2LnFieldNumber = 334;
    private float maxGrpDayRMetric2Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric2Ln {
      get { return maxGrpDayRMetric2Ln_; }
      set {
        maxGrpDayRMetric2Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric2_sh" field.</summary>
    public const int MaxGrpDayRMetric2ShFieldNumber = 337;
    private float maxGrpDayRMetric2Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric2Sh {
      get { return maxGrpDayRMetric2Sh_; }
      set {
        maxGrpDayRMetric2Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric3_ln" field.</summary>
    public const int MaxGrpDayRMetric3LnFieldNumber = 340;
    private float maxGrpDayRMetric3Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric3Ln {
      get { return maxGrpDayRMetric3Ln_; }
      set {
        maxGrpDayRMetric3Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric3_sh" field.</summary>
    public const int MaxGrpDayRMetric3ShFieldNumber = 343;
    private float maxGrpDayRMetric3Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric3Sh {
      get { return maxGrpDayRMetric3Sh_; }
      set {
        maxGrpDayRMetric3Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric4_ln" field.</summary>
    public const int MaxGrpDayRMetric4LnFieldNumber = 346;
    private float maxGrpDayRMetric4Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric4Ln {
      get { return maxGrpDayRMetric4Ln_; }
      set {
        maxGrpDayRMetric4Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric4_sh" field.</summary>
    public const int MaxGrpDayRMetric4ShFieldNumber = 349;
    private float maxGrpDayRMetric4Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric4Sh {
      get { return maxGrpDayRMetric4Sh_; }
      set {
        maxGrpDayRMetric4Sh_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric5_ln" field.</summary>
    public const int MaxGrpDayRMetric5LnFieldNumber = 352;
    private float maxGrpDayRMetric5Ln_;
    /// <summary>
    /// max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric5Ln {
      get { return maxGrpDayRMetric5Ln_; }
      set {
        maxGrpDayRMetric5Ln_ = value;
      }
    }

    /// <summary>Field number for the "max_grp_day_rMetric5_sh" field.</summary>
    public const int MaxGrpDayRMetric5ShFieldNumber = 355;
    private float maxGrpDayRMetric5Sh_;
    /// <summary>
    /// max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxGrpDayRMetric5Sh {
      get { return maxGrpDayRMetric5Sh_; }
      set {
        maxGrpDayRMetric5Sh_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_dDelta_ln" field.</summary>
    public const int SymEmaCxlDDeltaLnFieldNumber = 367;
    private float symEmaCxlDDeltaLn_;
    /// <summary>
    /// max acct+symbol 60s EMA $delta long (positive number; &lt;= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlDDeltaLn {
      get { return symEmaCxlDDeltaLn_; }
      set {
        symEmaCxlDDeltaLn_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_dDelta_sh" field.</summary>
    public const int SymEmaCxlDDeltaShFieldNumber = 370;
    private float symEmaCxlDDeltaSh_;
    /// <summary>
    /// max acct+symbol 60s EMA $delta short (positive number; &lt;= 0 is no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlDDeltaSh {
      get { return symEmaCxlDDeltaSh_; }
      set {
        symEmaCxlDDeltaSh_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_wt_vega_ln" field.</summary>
    public const int SymEmaCxlWtVegaLnFieldNumber = 373;
    private float symEmaCxlWtVegaLn_;
    /// <summary>
    /// max acct+symbol 60s EMA wtVega long (positive number; &lt;= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlWtVegaLn {
      get { return symEmaCxlWtVegaLn_; }
      set {
        symEmaCxlWtVegaLn_ = value;
      }
    }

    /// <summary>Field number for the "sym_ema_cxl_wt_vega_sh" field.</summary>
    public const int SymEmaCxlWtVegaShFieldNumber = 376;
    private float symEmaCxlWtVegaSh_;
    /// <summary>
    /// max acct+symbol 60s EMA wtVega short (positive number; &lt;= 0 is no limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymEmaCxlWtVegaSh {
      get { return symEmaCxlWtVegaSh_; }
      set {
        symEmaCxlWtVegaSh_ = value;
      }
    }

    /// <summary>Field number for the "theo_vol" field.</summary>
    public const int TheoVolFieldNumber = 379;
    private float theoVol_;
    /// <summary>
    /// client supplied theoretical volatility (used for markup only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoVol {
      get { return theoVol_; }
      set {
        theoVol_ = value;
      }
    }

    /// <summary>Field number for the "cl_arrive_mark" field.</summary>
    public const int ClArriveMarkFieldNumber = 382;
    private float clArriveMark_;
    /// <summary>
    /// client specified arrival mark (passed through to ParentExecution; markup only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClArriveMark {
      get { return clArriveMark_; }
      set {
        clArriveMark_ = value;
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 385;
    private string userData1_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 388;
    private string userData2_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 391;
    private string execBrkrCode_ = "";
    /// <summary>
    /// an SR assigned execBrkrCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_by" field.</summary>
    public const int ModifiedByFieldNumber = 394;
    private string modifiedBy_ = "";
    /// <summary>
    /// user who last modified this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_in" field.</summary>
    public const int ModifiedInFieldNumber = 397;
    private global::Spiderrock.Protobuf.SysEnvironment modifiedIn_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment ModifiedIn {
      get { return modifiedIn_; }
      set {
        modifiedIn_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 400;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// timestamp of last modification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrParentLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrParentLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (RunStatus != other.RunStatus) return false;
      if (OrderActiveSize != other.OrderActiveSize) return false;
      if (AddCumFillQuantity != other.AddCumFillQuantity) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (TakeLimitClass != other.TakeLimitClass) return false;
      if (MakeLimitClass != other.MakeLimitClass) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcLimit, other.OrderPrcLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderRefUPrc, other.OrderRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefDelta, other.OrderRefDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefGamma, other.OrderRefGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderVolLimit, other.OrderVolLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RateOverride, other.RateOverride)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivOverride, other.SdivOverride)) return false;
      if (DdivOverride != other.DdivOverride) return false;
      if (OverrideCode != other.OverrideCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderPrcOffset, other.OrderPrcOffset)) return false;
      if (StateModel != other.StateModel) return false;
      if (UStateModel != other.UStateModel) return false;
      if (TakeAlphaType != other.TakeAlphaType) return false;
      if (MakeAlphaType != other.MakeAlphaType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeAlphaFactor, other.TakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeAlphaFactor, other.MakeAlphaFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeProbability, other.TakeProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeProbability, other.MakeProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeSurfPrcOffset, other.TakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfVolOffset, other.TakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfWidthOffset, other.TakeSurfWidthOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeSurfPrcOffset, other.MakeSurfPrcOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfVolOffset, other.MakeSurfVolOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfWidthOffset, other.MakeSurfWidthOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefEventMult, other.OrderRefEventMult)) return false;
      if (!object.Equals(OrderRefEventDttm, other.OrderRefEventDttm)) return false;
      if (ExchMask != other.ExchMask) return false;
      if (CxlUPrcRange != other.CxlUPrcRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinUBid, other.MinUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxUAsk, other.MaxUAsk)) return false;
      if (MinMaxType != other.MinMaxType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinOptionPx, other.MinOptionPx)) return false;
      if (!object.Equals(StartDttm, other.StartDttm)) return false;
      if (ActiveDuration != other.ActiveDuration) return false;
      if (ProgressExposeTime != other.ProgressExposeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpDayWtVegaOffset, other.ExpDayWtVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayWtVegaLn, other.MaxExpDayWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayWtVegaSh, other.MaxExpDayWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayRMetric6Ln, other.MaxExpDayRMetric6Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExpDayRMetric6Sh, other.MaxExpDayRMetric6Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayDDeltaOffset, other.SymDayDDeltaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayDDeltaLn, other.MaxSymDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayDDeltaSh, other.MaxSymDayDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayVegaOffset, other.SymDayVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayVegaLn, other.MaxSymDayVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayVegaSh, other.MaxSymDayVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymDayWtVegaOffset, other.SymDayWtVegaOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayWtVegaLn, other.MaxSymDayWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayWtVegaSh, other.MaxSymDayWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayRMetric7Ln, other.MaxSymDayRMetric7Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSymDayRMetric7Sh, other.MaxSymDayRMetric7Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaLn, other.MaxGrpDayDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayDDeltaSh, other.MaxGrpDayDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaLn, other.MaxGrpDayVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaSh, other.MaxGrpDayVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayVegaAbs, other.MaxGrpDayVegaAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayVegaRatio, other.GrpDayVegaRatio)) return false;
      if (MaxGrpDayContractsLn != other.MaxGrpDayContractsLn) return false;
      if (MaxGrpDayContractsSh != other.MaxGrpDayContractsSh) return false;
      if (MaxGrpDayContractsAbs != other.MaxGrpDayContractsAbs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Ln, other.MaxGrpDayRMetric1Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Sh, other.MaxGrpDayRMetric1Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric1Abs, other.MaxGrpDayRMetric1Abs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrpDayRMetric1Ratio, other.GrpDayRMetric1Ratio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric2Ln, other.MaxGrpDayRMetric2Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric2Sh, other.MaxGrpDayRMetric2Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric3Ln, other.MaxGrpDayRMetric3Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric3Sh, other.MaxGrpDayRMetric3Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric4Ln, other.MaxGrpDayRMetric4Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric4Sh, other.MaxGrpDayRMetric4Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric5Ln, other.MaxGrpDayRMetric5Ln)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxGrpDayRMetric5Sh, other.MaxGrpDayRMetric5Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlDDeltaLn, other.SymEmaCxlDDeltaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlDDeltaSh, other.SymEmaCxlDDeltaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlWtVegaLn, other.SymEmaCxlWtVegaLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymEmaCxlWtVegaSh, other.SymEmaCxlWtVegaSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoVol, other.TheoVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClArriveMark, other.ClArriveMark)) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedIn != other.ModifiedIn) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
      if (OrderActiveSize != 0) hash ^= OrderActiveSize.GetHashCode();
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= AddCumFillQuantity.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= TakeLimitClass.GetHashCode();
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= MakeLimitClass.GetHashCode();
      if (OrderPrcLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcLimit);
      if (OrderRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderRefUPrc);
      if (OrderRefDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefDelta);
      if (OrderRefGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefGamma);
      if (OrderVolLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderVolLimit);
      if (RateOverride != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RateOverride);
      if (SdivOverride != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivOverride);
      if (DdivOverride.Length != 0) hash ^= DdivOverride.GetHashCode();
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) hash ^= OverrideCode.GetHashCode();
      if (OrderPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderPrcOffset);
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) hash ^= StateModel.GetHashCode();
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) hash ^= UStateModel.GetHashCode();
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= TakeAlphaType.GetHashCode();
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) hash ^= MakeAlphaType.GetHashCode();
      if (TakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeAlphaFactor);
      if (MakeAlphaFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeAlphaFactor);
      if (TakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeProbability);
      if (MakeProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeProbability);
      if (TakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeSurfPrcOffset);
      if (TakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfVolOffset);
      if (TakeSurfWidthOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfWidthOffset);
      if (MakeSurfPrcOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeSurfPrcOffset);
      if (MakeSurfVolOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfVolOffset);
      if (MakeSurfWidthOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfWidthOffset);
      if (OrderRefEventMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefEventMult);
      if (orderRefEventDttm_ != null) hash ^= OrderRefEventDttm.GetHashCode();
      if (ExchMask != 0) hash ^= ExchMask.GetHashCode();
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) hash ^= CxlUPrcRange.GetHashCode();
      if (MinUBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinUBid);
      if (MaxUAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxUAsk);
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) hash ^= MinMaxType.GetHashCode();
      if (MinOptionPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinOptionPx);
      if (startDttm_ != null) hash ^= StartDttm.GetHashCode();
      if (ActiveDuration != 0) hash ^= ActiveDuration.GetHashCode();
      if (ProgressExposeTime != 0) hash ^= ProgressExposeTime.GetHashCode();
      if (ExpDayWtVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpDayWtVegaOffset);
      if (MaxExpDayWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayWtVegaLn);
      if (MaxExpDayWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayWtVegaSh);
      if (MaxExpDayRMetric6Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayRMetric6Ln);
      if (MaxExpDayRMetric6Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExpDayRMetric6Sh);
      if (SymDayDDeltaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayDDeltaOffset);
      if (MaxSymDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayDDeltaLn);
      if (MaxSymDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayDDeltaSh);
      if (SymDayVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayVegaOffset);
      if (MaxSymDayVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayVegaLn);
      if (MaxSymDayVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayVegaSh);
      if (SymDayWtVegaOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymDayWtVegaOffset);
      if (MaxSymDayWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayWtVegaLn);
      if (MaxSymDayWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayWtVegaSh);
      if (MaxSymDayRMetric7Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayRMetric7Ln);
      if (MaxSymDayRMetric7Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSymDayRMetric7Sh);
      if (MaxGrpDayDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaLn);
      if (MaxGrpDayDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayDDeltaSh);
      if (MaxGrpDayVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaLn);
      if (MaxGrpDayVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaSh);
      if (MaxGrpDayVegaAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayVegaAbs);
      if (GrpDayVegaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayVegaRatio);
      if (MaxGrpDayContractsLn != 0) hash ^= MaxGrpDayContractsLn.GetHashCode();
      if (MaxGrpDayContractsSh != 0) hash ^= MaxGrpDayContractsSh.GetHashCode();
      if (MaxGrpDayContractsAbs != 0) hash ^= MaxGrpDayContractsAbs.GetHashCode();
      if (MaxGrpDayRMetric1Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Ln);
      if (MaxGrpDayRMetric1Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Sh);
      if (MaxGrpDayRMetric1Abs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric1Abs);
      if (GrpDayRMetric1Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrpDayRMetric1Ratio);
      if (MaxGrpDayRMetric2Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric2Ln);
      if (MaxGrpDayRMetric2Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric2Sh);
      if (MaxGrpDayRMetric3Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric3Ln);
      if (MaxGrpDayRMetric3Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric3Sh);
      if (MaxGrpDayRMetric4Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric4Ln);
      if (MaxGrpDayRMetric4Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric4Sh);
      if (MaxGrpDayRMetric5Ln != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric5Ln);
      if (MaxGrpDayRMetric5Sh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxGrpDayRMetric5Sh);
      if (SymEmaCxlDDeltaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlDDeltaLn);
      if (SymEmaCxlDDeltaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlDDeltaSh);
      if (SymEmaCxlWtVegaLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlWtVegaLn);
      if (SymEmaCxlWtVegaSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymEmaCxlWtVegaSh);
      if (TheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoVol);
      if (ClArriveMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClArriveMark);
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= ModifiedIn.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(OrderActiveSize);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AddCumFillQuantity);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDelta != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(OrderRefDelta);
      }
      if (OrderRefGamma != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OrderRefGamma);
      }
      if (OrderVolLimit != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(OrderVolLimit);
      }
      if (RateOverride != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(RateOverride);
      }
      if (SdivOverride != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(SdivOverride);
      }
      if (DdivOverride.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(MakeProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidthOffset != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(TakeSurfWidthOffset);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidthOffset != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MakeSurfWidthOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(184, 12);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(StartDttm);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(ProgressExposeTime);
      }
      if (MaxExpDayWtVegaLn != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(MaxExpDayWtVegaLn);
      }
      if (MaxExpDayWtVegaSh != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(MaxExpDayWtVegaSh);
      }
      if (ExpDayWtVegaOffset != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(ExpDayWtVegaOffset);
      }
      if (MaxSymDayVegaLn != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(MaxSymDayVegaLn);
      }
      if (MaxSymDayVegaSh != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MaxSymDayVegaSh);
      }
      if (SymDayVegaOffset != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SymDayVegaOffset);
      }
      if (MaxSymDayWtVegaLn != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(MaxSymDayWtVegaLn);
      }
      if (MaxSymDayWtVegaSh != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(MaxSymDayWtVegaSh);
      }
      if (SymDayWtVegaOffset != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SymDayWtVegaOffset);
      }
      if (MaxSymDayDDeltaLn != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(MaxSymDayDDeltaLn);
      }
      if (MaxSymDayDDeltaSh != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(MaxSymDayDDeltaSh);
      }
      if (SymDayDDeltaOffset != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SymDayDDeltaOffset);
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(MaxExpDayRMetric6Ln);
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(MaxExpDayRMetric6Sh);
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(MaxSymDayRMetric7Ln);
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(MaxSymDayRMetric7Sh);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(MaxGrpDayRMetric2Ln);
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(MaxGrpDayRMetric2Sh);
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(MaxGrpDayRMetric3Ln);
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(MaxGrpDayRMetric3Sh);
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(MaxGrpDayRMetric4Ln);
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(MaxGrpDayRMetric4Sh);
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(MaxGrpDayRMetric5Ln);
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(MaxGrpDayRMetric5Sh);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(176, 22);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(SymEmaCxlDDeltaLn);
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(SymEmaCxlDDeltaSh);
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(SymEmaCxlWtVegaLn);
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(SymEmaCxlWtVegaSh);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(TheoVol);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(ClArriveMark);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(138, 24);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(UserData2);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(ExecBrkrCode);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(210, 24);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(Timestamp);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(136, 25);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(149, 25);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(160, 25);
        output.WriteEnum((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        output.WriteRawTag(173, 25);
        output.WriteFloat(MinOptionPx);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(176, 25);
        output.WriteInt32(ActiveDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(OrderActiveSize);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AddCumFillQuantity);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) MakeLimitClass);
      }
      if (OrderPrcLimit != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(OrderPrcLimit);
      }
      if (OrderRefUPrc != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(OrderRefUPrc);
      }
      if (OrderRefDelta != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(OrderRefDelta);
      }
      if (OrderRefGamma != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OrderRefGamma);
      }
      if (OrderVolLimit != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(OrderVolLimit);
      }
      if (RateOverride != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(RateOverride);
      }
      if (SdivOverride != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(SdivOverride);
      }
      if (DdivOverride.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(OrderPrcOffset);
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TakeAlphaFactor);
      }
      if (MakeAlphaFactor != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(MakeAlphaFactor);
      }
      if (TakeProbability != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(TakeProbability);
      }
      if (MakeProbability != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(MakeProbability);
      }
      if (TakeSurfPrcOffset != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(TakeSurfPrcOffset);
      }
      if (TakeSurfVolOffset != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(TakeSurfVolOffset);
      }
      if (TakeSurfWidthOffset != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(TakeSurfWidthOffset);
      }
      if (MakeSurfPrcOffset != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(MakeSurfPrcOffset);
      }
      if (MakeSurfVolOffset != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(MakeSurfVolOffset);
      }
      if (MakeSurfWidthOffset != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MakeSurfWidthOffset);
      }
      if (OrderRefEventMult != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(OrderRefEventMult);
      }
      if (orderRefEventDttm_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(OrderRefEventDttm);
      }
      if (ExchMask != 0) {
        output.WriteRawTag(184, 12);
        output.WriteUInt32(ExchMask);
      }
      if (startDttm_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(StartDttm);
      }
      if (ProgressExposeTime != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(ProgressExposeTime);
      }
      if (MaxExpDayWtVegaLn != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(MaxExpDayWtVegaLn);
      }
      if (MaxExpDayWtVegaSh != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(MaxExpDayWtVegaSh);
      }
      if (ExpDayWtVegaOffset != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(ExpDayWtVegaOffset);
      }
      if (MaxSymDayVegaLn != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(MaxSymDayVegaLn);
      }
      if (MaxSymDayVegaSh != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MaxSymDayVegaSh);
      }
      if (SymDayVegaOffset != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SymDayVegaOffset);
      }
      if (MaxSymDayWtVegaLn != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(MaxSymDayWtVegaLn);
      }
      if (MaxSymDayWtVegaSh != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(MaxSymDayWtVegaSh);
      }
      if (SymDayWtVegaOffset != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SymDayWtVegaOffset);
      }
      if (MaxSymDayDDeltaLn != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(MaxSymDayDDeltaLn);
      }
      if (MaxSymDayDDeltaSh != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(MaxSymDayDDeltaSh);
      }
      if (SymDayDDeltaOffset != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SymDayDDeltaOffset);
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(MaxExpDayRMetric6Ln);
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(MaxExpDayRMetric6Sh);
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(MaxSymDayRMetric7Ln);
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(MaxSymDayRMetric7Sh);
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(MaxGrpDayDDeltaLn);
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(MaxGrpDayDDeltaSh);
      }
      if (MaxGrpDayVegaLn != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(MaxGrpDayVegaLn);
      }
      if (MaxGrpDayVegaSh != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(MaxGrpDayVegaSh);
      }
      if (MaxGrpDayVegaAbs != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(MaxGrpDayVegaAbs);
      }
      if (GrpDayVegaRatio != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(GrpDayVegaRatio);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(MaxGrpDayRMetric1Ln);
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(MaxGrpDayRMetric1Sh);
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(MaxGrpDayRMetric1Abs);
      }
      if (GrpDayRMetric1Ratio != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(GrpDayRMetric1Ratio);
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(MaxGrpDayRMetric2Ln);
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(MaxGrpDayRMetric2Sh);
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(MaxGrpDayRMetric3Ln);
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(MaxGrpDayRMetric3Sh);
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(MaxGrpDayRMetric4Ln);
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(MaxGrpDayRMetric4Sh);
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(MaxGrpDayRMetric5Ln);
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(MaxGrpDayRMetric5Sh);
      }
      if (MaxGrpDayContractsLn != 0) {
        output.WriteRawTag(176, 22);
        output.WriteInt32(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(MaxGrpDayContractsAbs);
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(SymEmaCxlDDeltaLn);
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(SymEmaCxlDDeltaSh);
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(SymEmaCxlWtVegaLn);
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(SymEmaCxlWtVegaSh);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(TheoVol);
      }
      if (ClArriveMark != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(ClArriveMark);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(138, 24);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(UserData2);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(186, 24);
        output.WriteString(ExecBrkrCode);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(210, 24);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(232, 24);
        output.WriteEnum((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 25);
        output.WriteMessage(Timestamp);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        output.WriteRawTag(136, 25);
        output.WriteEnum((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        output.WriteRawTag(149, 25);
        output.WriteFloat(MinUBid);
      }
      if (MaxUAsk != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(MaxUAsk);
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        output.WriteRawTag(160, 25);
        output.WriteEnum((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        output.WriteRawTag(173, 25);
        output.WriteFloat(MinOptionPx);
      }
      if (ActiveDuration != 0) {
        output.WriteRawTag(176, 25);
        output.WriteInt32(ActiveDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
      }
      if (OrderActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderActiveSize);
      }
      if (AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AddCumFillQuantity);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitClass);
      }
      if (MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitClass);
      }
      if (OrderPrcLimit != 0D) {
        size += 2 + 8;
      }
      if (OrderRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (OrderRefDelta != 0F) {
        size += 2 + 4;
      }
      if (OrderRefGamma != 0F) {
        size += 2 + 4;
      }
      if (OrderVolLimit != 0F) {
        size += 2 + 4;
      }
      if (RateOverride != 0F) {
        size += 2 + 4;
      }
      if (SdivOverride != 0F) {
        size += 2 + 4;
      }
      if (DdivOverride.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DdivOverride);
      }
      if (OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverrideCode);
      }
      if (OrderPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StateModel);
      }
      if (UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UStateModel);
      }
      if (TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeAlphaType);
      }
      if (MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeAlphaType);
      }
      if (TakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (MakeAlphaFactor != 0F) {
        size += 2 + 4;
      }
      if (TakeProbability != 0F) {
        size += 2 + 4;
      }
      if (MakeProbability != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (TakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfWidthOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfPrcOffset != 0D) {
        size += 2 + 8;
      }
      if (MakeSurfVolOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfWidthOffset != 0F) {
        size += 2 + 4;
      }
      if (OrderRefEventMult != 0F) {
        size += 2 + 4;
      }
      if (orderRefEventDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderRefEventDttm);
      }
      if (ExchMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExchMask);
      }
      if (CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CxlUPrcRange);
      }
      if (MinUBid != 0F) {
        size += 2 + 4;
      }
      if (MaxUAsk != 0F) {
        size += 2 + 4;
      }
      if (MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MinMaxType);
      }
      if (MinOptionPx != 0F) {
        size += 2 + 4;
      }
      if (startDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartDttm);
      }
      if (ActiveDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveDuration);
      }
      if (ProgressExposeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressExposeTime);
      }
      if (ExpDayWtVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayRMetric6Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxExpDayRMetric6Sh != 0F) {
        size += 2 + 4;
      }
      if (SymDayDDeltaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (SymDayVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayVegaSh != 0F) {
        size += 2 + 4;
      }
      if (SymDayWtVegaOffset != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayRMetric7Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxSymDayRMetric7Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaLn != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaSh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayVegaAbs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayVegaRatio != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayContractsLn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsLn);
      }
      if (MaxGrpDayContractsSh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsSh);
      }
      if (MaxGrpDayContractsAbs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGrpDayContractsAbs);
      }
      if (MaxGrpDayRMetric1Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric1Abs != 0F) {
        size += 2 + 4;
      }
      if (GrpDayRMetric1Ratio != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric2Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric2Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric3Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric3Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric4Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric4Sh != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric5Ln != 0F) {
        size += 2 + 4;
      }
      if (MaxGrpDayRMetric5Sh != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlDDeltaLn != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlDDeltaSh != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlWtVegaLn != 0F) {
        size += 2 + 4;
      }
      if (SymEmaCxlWtVegaSh != 0F) {
        size += 2 + 4;
      }
      if (TheoVol != 0F) {
        size += 2 + 4;
      }
      if (ClArriveMark != 0F) {
        size += 2 + 4;
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModifiedIn);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrParentLimit other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        RunStatus = other.RunStatus;
      }
      if (other.OrderActiveSize != 0) {
        OrderActiveSize = other.OrderActiveSize;
      }
      if (other.AddCumFillQuantity != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        AddCumFillQuantity = other.AddCumFillQuantity;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.TakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        TakeLimitClass = other.TakeLimitClass;
      }
      if (other.MakeLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        MakeLimitClass = other.MakeLimitClass;
      }
      if (other.OrderPrcLimit != 0D) {
        OrderPrcLimit = other.OrderPrcLimit;
      }
      if (other.OrderRefUPrc != 0D) {
        OrderRefUPrc = other.OrderRefUPrc;
      }
      if (other.OrderRefDelta != 0F) {
        OrderRefDelta = other.OrderRefDelta;
      }
      if (other.OrderRefGamma != 0F) {
        OrderRefGamma = other.OrderRefGamma;
      }
      if (other.OrderVolLimit != 0F) {
        OrderVolLimit = other.OrderVolLimit;
      }
      if (other.RateOverride != 0F) {
        RateOverride = other.RateOverride;
      }
      if (other.SdivOverride != 0F) {
        SdivOverride = other.SdivOverride;
      }
      if (other.DdivOverride.Length != 0) {
        DdivOverride = other.DdivOverride;
      }
      if (other.OverrideCode != global::Spiderrock.Protobuf.OverrideCode.Unspecified) {
        OverrideCode = other.OverrideCode;
      }
      if (other.OrderPrcOffset != 0D) {
        OrderPrcOffset = other.OrderPrcOffset;
      }
      if (other.StateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        StateModel = other.StateModel;
      }
      if (other.UStateModel != global::Spiderrock.Protobuf.StateModel.Unspecified) {
        UStateModel = other.UStateModel;
      }
      if (other.TakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        TakeAlphaType = other.TakeAlphaType;
      }
      if (other.MakeAlphaType != global::Spiderrock.Protobuf.AlphaType.Unspecified) {
        MakeAlphaType = other.MakeAlphaType;
      }
      if (other.TakeAlphaFactor != 0F) {
        TakeAlphaFactor = other.TakeAlphaFactor;
      }
      if (other.MakeAlphaFactor != 0F) {
        MakeAlphaFactor = other.MakeAlphaFactor;
      }
      if (other.TakeProbability != 0F) {
        TakeProbability = other.TakeProbability;
      }
      if (other.MakeProbability != 0F) {
        MakeProbability = other.MakeProbability;
      }
      if (other.TakeSurfPrcOffset != 0D) {
        TakeSurfPrcOffset = other.TakeSurfPrcOffset;
      }
      if (other.TakeSurfVolOffset != 0F) {
        TakeSurfVolOffset = other.TakeSurfVolOffset;
      }
      if (other.TakeSurfWidthOffset != 0F) {
        TakeSurfWidthOffset = other.TakeSurfWidthOffset;
      }
      if (other.MakeSurfPrcOffset != 0D) {
        MakeSurfPrcOffset = other.MakeSurfPrcOffset;
      }
      if (other.MakeSurfVolOffset != 0F) {
        MakeSurfVolOffset = other.MakeSurfVolOffset;
      }
      if (other.MakeSurfWidthOffset != 0F) {
        MakeSurfWidthOffset = other.MakeSurfWidthOffset;
      }
      if (other.OrderRefEventMult != 0F) {
        OrderRefEventMult = other.OrderRefEventMult;
      }
      if (other.orderRefEventDttm_ != null) {
        if (orderRefEventDttm_ == null) {
          OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderRefEventDttm.MergeFrom(other.OrderRefEventDttm);
      }
      if (other.ExchMask != 0) {
        ExchMask = other.ExchMask;
      }
      if (other.CxlUPrcRange != global::Spiderrock.Protobuf.UPrcCxl.Unspecified) {
        CxlUPrcRange = other.CxlUPrcRange;
      }
      if (other.MinUBid != 0F) {
        MinUBid = other.MinUBid;
      }
      if (other.MaxUAsk != 0F) {
        MaxUAsk = other.MaxUAsk;
      }
      if (other.MinMaxType != global::Spiderrock.Protobuf.MinMaxType.Unspecified) {
        MinMaxType = other.MinMaxType;
      }
      if (other.MinOptionPx != 0F) {
        MinOptionPx = other.MinOptionPx;
      }
      if (other.startDttm_ != null) {
        if (startDttm_ == null) {
          StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDttm.MergeFrom(other.StartDttm);
      }
      if (other.ActiveDuration != 0) {
        ActiveDuration = other.ActiveDuration;
      }
      if (other.ProgressExposeTime != 0) {
        ProgressExposeTime = other.ProgressExposeTime;
      }
      if (other.ExpDayWtVegaOffset != 0F) {
        ExpDayWtVegaOffset = other.ExpDayWtVegaOffset;
      }
      if (other.MaxExpDayWtVegaLn != 0F) {
        MaxExpDayWtVegaLn = other.MaxExpDayWtVegaLn;
      }
      if (other.MaxExpDayWtVegaSh != 0F) {
        MaxExpDayWtVegaSh = other.MaxExpDayWtVegaSh;
      }
      if (other.MaxExpDayRMetric6Ln != 0F) {
        MaxExpDayRMetric6Ln = other.MaxExpDayRMetric6Ln;
      }
      if (other.MaxExpDayRMetric6Sh != 0F) {
        MaxExpDayRMetric6Sh = other.MaxExpDayRMetric6Sh;
      }
      if (other.SymDayDDeltaOffset != 0F) {
        SymDayDDeltaOffset = other.SymDayDDeltaOffset;
      }
      if (other.MaxSymDayDDeltaLn != 0F) {
        MaxSymDayDDeltaLn = other.MaxSymDayDDeltaLn;
      }
      if (other.MaxSymDayDDeltaSh != 0F) {
        MaxSymDayDDeltaSh = other.MaxSymDayDDeltaSh;
      }
      if (other.SymDayVegaOffset != 0F) {
        SymDayVegaOffset = other.SymDayVegaOffset;
      }
      if (other.MaxSymDayVegaLn != 0F) {
        MaxSymDayVegaLn = other.MaxSymDayVegaLn;
      }
      if (other.MaxSymDayVegaSh != 0F) {
        MaxSymDayVegaSh = other.MaxSymDayVegaSh;
      }
      if (other.SymDayWtVegaOffset != 0F) {
        SymDayWtVegaOffset = other.SymDayWtVegaOffset;
      }
      if (other.MaxSymDayWtVegaLn != 0F) {
        MaxSymDayWtVegaLn = other.MaxSymDayWtVegaLn;
      }
      if (other.MaxSymDayWtVegaSh != 0F) {
        MaxSymDayWtVegaSh = other.MaxSymDayWtVegaSh;
      }
      if (other.MaxSymDayRMetric7Ln != 0F) {
        MaxSymDayRMetric7Ln = other.MaxSymDayRMetric7Ln;
      }
      if (other.MaxSymDayRMetric7Sh != 0F) {
        MaxSymDayRMetric7Sh = other.MaxSymDayRMetric7Sh;
      }
      if (other.MaxGrpDayDDeltaLn != 0F) {
        MaxGrpDayDDeltaLn = other.MaxGrpDayDDeltaLn;
      }
      if (other.MaxGrpDayDDeltaSh != 0F) {
        MaxGrpDayDDeltaSh = other.MaxGrpDayDDeltaSh;
      }
      if (other.MaxGrpDayVegaLn != 0F) {
        MaxGrpDayVegaLn = other.MaxGrpDayVegaLn;
      }
      if (other.MaxGrpDayVegaSh != 0F) {
        MaxGrpDayVegaSh = other.MaxGrpDayVegaSh;
      }
      if (other.MaxGrpDayVegaAbs != 0F) {
        MaxGrpDayVegaAbs = other.MaxGrpDayVegaAbs;
      }
      if (other.GrpDayVegaRatio != 0F) {
        GrpDayVegaRatio = other.GrpDayVegaRatio;
      }
      if (other.MaxGrpDayContractsLn != 0) {
        MaxGrpDayContractsLn = other.MaxGrpDayContractsLn;
      }
      if (other.MaxGrpDayContractsSh != 0) {
        MaxGrpDayContractsSh = other.MaxGrpDayContractsSh;
      }
      if (other.MaxGrpDayContractsAbs != 0) {
        MaxGrpDayContractsAbs = other.MaxGrpDayContractsAbs;
      }
      if (other.MaxGrpDayRMetric1Ln != 0F) {
        MaxGrpDayRMetric1Ln = other.MaxGrpDayRMetric1Ln;
      }
      if (other.MaxGrpDayRMetric1Sh != 0F) {
        MaxGrpDayRMetric1Sh = other.MaxGrpDayRMetric1Sh;
      }
      if (other.MaxGrpDayRMetric1Abs != 0F) {
        MaxGrpDayRMetric1Abs = other.MaxGrpDayRMetric1Abs;
      }
      if (other.GrpDayRMetric1Ratio != 0F) {
        GrpDayRMetric1Ratio = other.GrpDayRMetric1Ratio;
      }
      if (other.MaxGrpDayRMetric2Ln != 0F) {
        MaxGrpDayRMetric2Ln = other.MaxGrpDayRMetric2Ln;
      }
      if (other.MaxGrpDayRMetric2Sh != 0F) {
        MaxGrpDayRMetric2Sh = other.MaxGrpDayRMetric2Sh;
      }
      if (other.MaxGrpDayRMetric3Ln != 0F) {
        MaxGrpDayRMetric3Ln = other.MaxGrpDayRMetric3Ln;
      }
      if (other.MaxGrpDayRMetric3Sh != 0F) {
        MaxGrpDayRMetric3Sh = other.MaxGrpDayRMetric3Sh;
      }
      if (other.MaxGrpDayRMetric4Ln != 0F) {
        MaxGrpDayRMetric4Ln = other.MaxGrpDayRMetric4Ln;
      }
      if (other.MaxGrpDayRMetric4Sh != 0F) {
        MaxGrpDayRMetric4Sh = other.MaxGrpDayRMetric4Sh;
      }
      if (other.MaxGrpDayRMetric5Ln != 0F) {
        MaxGrpDayRMetric5Ln = other.MaxGrpDayRMetric5Ln;
      }
      if (other.MaxGrpDayRMetric5Sh != 0F) {
        MaxGrpDayRMetric5Sh = other.MaxGrpDayRMetric5Sh;
      }
      if (other.SymEmaCxlDDeltaLn != 0F) {
        SymEmaCxlDDeltaLn = other.SymEmaCxlDDeltaLn;
      }
      if (other.SymEmaCxlDDeltaSh != 0F) {
        SymEmaCxlDDeltaSh = other.SymEmaCxlDDeltaSh;
      }
      if (other.SymEmaCxlWtVegaLn != 0F) {
        SymEmaCxlWtVegaLn = other.SymEmaCxlWtVegaLn;
      }
      if (other.SymEmaCxlWtVegaSh != 0F) {
        SymEmaCxlWtVegaSh = other.SymEmaCxlWtVegaSh;
      }
      if (other.TheoVol != 0F) {
        TheoVol = other.TheoVol;
      }
      if (other.ClArriveMark != 0F) {
        ClArriveMark = other.ClArriveMark;
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedIn != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        ModifiedIn = other.ModifiedIn;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 824: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 848: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 872: {
            AddCumFillQuantity = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 896: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 920: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 944: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 969: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 993: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 1021: {
            OrderRefDelta = input.ReadFloat();
            break;
          }
          case 1045: {
            OrderRefGamma = input.ReadFloat();
            break;
          }
          case 1069: {
            OrderVolLimit = input.ReadFloat();
            break;
          }
          case 1093: {
            RateOverride = input.ReadFloat();
            break;
          }
          case 1117: {
            SdivOverride = input.ReadFloat();
            break;
          }
          case 1138: {
            DdivOverride = input.ReadString();
            break;
          }
          case 1160: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 1185: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 1208: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1232: {
            UStateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1256: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1280: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1309: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1333: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1357: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 1381: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 1401: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 1429: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 1453: {
            TakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 1473: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 1501: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 1525: {
            MakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 1549: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 1570: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 1592: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 1642: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 1712: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1885: {
            MaxExpDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 1909: {
            MaxExpDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 1933: {
            ExpDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 1957: {
            MaxSymDayVegaLn = input.ReadFloat();
            break;
          }
          case 1981: {
            MaxSymDayVegaSh = input.ReadFloat();
            break;
          }
          case 2005: {
            SymDayVegaOffset = input.ReadFloat();
            break;
          }
          case 2029: {
            MaxSymDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 2053: {
            MaxSymDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 2077: {
            SymDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 2101: {
            MaxSymDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 2125: {
            MaxSymDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 2149: {
            SymDayDDeltaOffset = input.ReadFloat();
            break;
          }
          case 2173: {
            MaxExpDayRMetric6Ln = input.ReadFloat();
            break;
          }
          case 2197: {
            MaxExpDayRMetric6Sh = input.ReadFloat();
            break;
          }
          case 2245: {
            MaxSymDayRMetric7Ln = input.ReadFloat();
            break;
          }
          case 2269: {
            MaxSymDayRMetric7Sh = input.ReadFloat();
            break;
          }
          case 2317: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 2341: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 2389: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 2413: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 2437: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 2461: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 2581: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 2605: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 2629: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 2653: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 2677: {
            MaxGrpDayRMetric2Ln = input.ReadFloat();
            break;
          }
          case 2701: {
            MaxGrpDayRMetric2Sh = input.ReadFloat();
            break;
          }
          case 2725: {
            MaxGrpDayRMetric3Ln = input.ReadFloat();
            break;
          }
          case 2749: {
            MaxGrpDayRMetric3Sh = input.ReadFloat();
            break;
          }
          case 2773: {
            MaxGrpDayRMetric4Ln = input.ReadFloat();
            break;
          }
          case 2797: {
            MaxGrpDayRMetric4Sh = input.ReadFloat();
            break;
          }
          case 2821: {
            MaxGrpDayRMetric5Ln = input.ReadFloat();
            break;
          }
          case 2845: {
            MaxGrpDayRMetric5Sh = input.ReadFloat();
            break;
          }
          case 2864: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 2888: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 2912: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 2941: {
            SymEmaCxlDDeltaLn = input.ReadFloat();
            break;
          }
          case 2965: {
            SymEmaCxlDDeltaSh = input.ReadFloat();
            break;
          }
          case 2989: {
            SymEmaCxlWtVegaLn = input.ReadFloat();
            break;
          }
          case 3013: {
            SymEmaCxlWtVegaSh = input.ReadFloat();
            break;
          }
          case 3037: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3061: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 3082: {
            UserData1 = input.ReadString();
            break;
          }
          case 3106: {
            UserData2 = input.ReadString();
            break;
          }
          case 3130: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 3154: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 3176: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 3202: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 3208: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 3221: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 3229: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 3232: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 3245: {
            MinOptionPx = input.ReadFloat();
            break;
          }
          case 3248: {
            ActiveDuration = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentLimit.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 824: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 848: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 872: {
            AddCumFillQuantity = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 896: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 920: {
            TakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 944: {
            MakeLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 969: {
            OrderPrcLimit = input.ReadDouble();
            break;
          }
          case 993: {
            OrderRefUPrc = input.ReadDouble();
            break;
          }
          case 1021: {
            OrderRefDelta = input.ReadFloat();
            break;
          }
          case 1045: {
            OrderRefGamma = input.ReadFloat();
            break;
          }
          case 1069: {
            OrderVolLimit = input.ReadFloat();
            break;
          }
          case 1093: {
            RateOverride = input.ReadFloat();
            break;
          }
          case 1117: {
            SdivOverride = input.ReadFloat();
            break;
          }
          case 1138: {
            DdivOverride = input.ReadString();
            break;
          }
          case 1160: {
            OverrideCode = (global::Spiderrock.Protobuf.OverrideCode) input.ReadEnum();
            break;
          }
          case 1185: {
            OrderPrcOffset = input.ReadDouble();
            break;
          }
          case 1208: {
            StateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1232: {
            UStateModel = (global::Spiderrock.Protobuf.StateModel) input.ReadEnum();
            break;
          }
          case 1256: {
            TakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1280: {
            MakeAlphaType = (global::Spiderrock.Protobuf.AlphaType) input.ReadEnum();
            break;
          }
          case 1309: {
            TakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1333: {
            MakeAlphaFactor = input.ReadFloat();
            break;
          }
          case 1357: {
            TakeProbability = input.ReadFloat();
            break;
          }
          case 1381: {
            MakeProbability = input.ReadFloat();
            break;
          }
          case 1401: {
            TakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 1429: {
            TakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 1453: {
            TakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 1473: {
            MakeSurfPrcOffset = input.ReadDouble();
            break;
          }
          case 1501: {
            MakeSurfVolOffset = input.ReadFloat();
            break;
          }
          case 1525: {
            MakeSurfWidthOffset = input.ReadFloat();
            break;
          }
          case 1549: {
            OrderRefEventMult = input.ReadFloat();
            break;
          }
          case 1570: {
            if (orderRefEventDttm_ == null) {
              OrderRefEventDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderRefEventDttm);
            break;
          }
          case 1592: {
            ExchMask = input.ReadUInt32();
            break;
          }
          case 1642: {
            if (startDttm_ == null) {
              StartDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDttm);
            break;
          }
          case 1712: {
            ProgressExposeTime = input.ReadInt32();
            break;
          }
          case 1885: {
            MaxExpDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 1909: {
            MaxExpDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 1933: {
            ExpDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 1957: {
            MaxSymDayVegaLn = input.ReadFloat();
            break;
          }
          case 1981: {
            MaxSymDayVegaSh = input.ReadFloat();
            break;
          }
          case 2005: {
            SymDayVegaOffset = input.ReadFloat();
            break;
          }
          case 2029: {
            MaxSymDayWtVegaLn = input.ReadFloat();
            break;
          }
          case 2053: {
            MaxSymDayWtVegaSh = input.ReadFloat();
            break;
          }
          case 2077: {
            SymDayWtVegaOffset = input.ReadFloat();
            break;
          }
          case 2101: {
            MaxSymDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 2125: {
            MaxSymDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 2149: {
            SymDayDDeltaOffset = input.ReadFloat();
            break;
          }
          case 2173: {
            MaxExpDayRMetric6Ln = input.ReadFloat();
            break;
          }
          case 2197: {
            MaxExpDayRMetric6Sh = input.ReadFloat();
            break;
          }
          case 2245: {
            MaxSymDayRMetric7Ln = input.ReadFloat();
            break;
          }
          case 2269: {
            MaxSymDayRMetric7Sh = input.ReadFloat();
            break;
          }
          case 2317: {
            MaxGrpDayDDeltaLn = input.ReadFloat();
            break;
          }
          case 2341: {
            MaxGrpDayDDeltaSh = input.ReadFloat();
            break;
          }
          case 2389: {
            MaxGrpDayVegaLn = input.ReadFloat();
            break;
          }
          case 2413: {
            MaxGrpDayVegaSh = input.ReadFloat();
            break;
          }
          case 2437: {
            MaxGrpDayVegaAbs = input.ReadFloat();
            break;
          }
          case 2461: {
            GrpDayVegaRatio = input.ReadFloat();
            break;
          }
          case 2581: {
            MaxGrpDayRMetric1Ln = input.ReadFloat();
            break;
          }
          case 2605: {
            MaxGrpDayRMetric1Sh = input.ReadFloat();
            break;
          }
          case 2629: {
            MaxGrpDayRMetric1Abs = input.ReadFloat();
            break;
          }
          case 2653: {
            GrpDayRMetric1Ratio = input.ReadFloat();
            break;
          }
          case 2677: {
            MaxGrpDayRMetric2Ln = input.ReadFloat();
            break;
          }
          case 2701: {
            MaxGrpDayRMetric2Sh = input.ReadFloat();
            break;
          }
          case 2725: {
            MaxGrpDayRMetric3Ln = input.ReadFloat();
            break;
          }
          case 2749: {
            MaxGrpDayRMetric3Sh = input.ReadFloat();
            break;
          }
          case 2773: {
            MaxGrpDayRMetric4Ln = input.ReadFloat();
            break;
          }
          case 2797: {
            MaxGrpDayRMetric4Sh = input.ReadFloat();
            break;
          }
          case 2821: {
            MaxGrpDayRMetric5Ln = input.ReadFloat();
            break;
          }
          case 2845: {
            MaxGrpDayRMetric5Sh = input.ReadFloat();
            break;
          }
          case 2864: {
            MaxGrpDayContractsLn = input.ReadInt32();
            break;
          }
          case 2888: {
            MaxGrpDayContractsSh = input.ReadInt32();
            break;
          }
          case 2912: {
            MaxGrpDayContractsAbs = input.ReadInt32();
            break;
          }
          case 2941: {
            SymEmaCxlDDeltaLn = input.ReadFloat();
            break;
          }
          case 2965: {
            SymEmaCxlDDeltaSh = input.ReadFloat();
            break;
          }
          case 2989: {
            SymEmaCxlWtVegaLn = input.ReadFloat();
            break;
          }
          case 3013: {
            SymEmaCxlWtVegaSh = input.ReadFloat();
            break;
          }
          case 3037: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3061: {
            ClArriveMark = input.ReadFloat();
            break;
          }
          case 3082: {
            UserData1 = input.ReadString();
            break;
          }
          case 3106: {
            UserData2 = input.ReadString();
            break;
          }
          case 3130: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 3154: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 3176: {
            ModifiedIn = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 3202: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 3208: {
            CxlUPrcRange = (global::Spiderrock.Protobuf.UPrcCxl) input.ReadEnum();
            break;
          }
          case 3221: {
            MinUBid = input.ReadFloat();
            break;
          }
          case 3229: {
            MaxUAsk = input.ReadFloat();
            break;
          }
          case 3232: {
            MinMaxType = (global::Spiderrock.Protobuf.MinMaxType) input.ReadEnum();
            break;
          }
          case 3245: {
            MinOptionPx = input.ReadFloat();
            break;
          }
          case 3248: {
            ActiveDuration = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrParentLimit message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentLimit.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          spdrSource_ = other.spdrSource_;
          orderSide_ = other.orderSide_;
          groupingCode_ = other.groupingCode_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 11;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 12;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "spdr_source" field.</summary>
        public const int SpdrSourceFieldNumber = 13;
        private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
          get { return spdrSource_; }
          set {
            spdrSource_ = value;
          }
        }

        /// <summary>Field number for the "order_side" field.</summary>
        public const int OrderSideFieldNumber = 14;
        private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell OrderSide {
          get { return orderSide_; }
          set {
            orderSide_ = value;
          }
        }

        /// <summary>Field number for the "grouping_code" field.</summary>
        public const int GroupingCodeFieldNumber = 15;
        private long groupingCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long GroupingCode {
          get { return groupingCode_; }
          set {
            groupingCode_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 16;
        private string clientFirm_ = "";
        /// <summary>
        /// SR client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (SpdrSource != other.SpdrSource) return false;
          if (OrderSide != other.OrderSide) return false;
          if (GroupingCode != other.GroupingCode) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
          if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) SpdrSource);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) OrderSide);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(GroupingCode);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) SpdrSource);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) OrderSide);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(GroupingCode);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
          }
          if (GroupingCode != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
          }
          if (ClientFirm.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            SpdrSource = other.SpdrSource;
          }
          if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            OrderSide = other.OrderSide;
          }
          if (other.GroupingCode != 0L) {
            GroupingCode = other.GroupingCode;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 104: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 112: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 120: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 130: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 104: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 112: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 120: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 130: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
