syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrParentOrder records are visible in SRSE immediately after receipt.  Parent orders received via FIX, SRSE or SpiderRock GUI tools, or 3rd party vendor systems are all visible in this table.
    Parent orders can be for stocks, futures, options or spreads.  And they can be one-sided (agency) or two-sided (facilitation) orders.  Parent order records should be immutable and not update.
    SpdrParentOrder records are published to the SpiderRock elatic cluster on arrival.
*/    
message SpdrParentOrder {
    message PKey {
        
        int64 parent_number = 10; // SPDR order number
    }

    message DirectedCounterParty {
        
        string client_firm = 697;
        InclExclDisclose incl_excl = 700;
    }

    message OrderLegs {
        
        TickerKey ticker = 754; // stock ticker
        BuySell stock_side = 757; // [Buy | Sell | None]
        int32 stock_shares = 760; // number of shares included (zero if none)
        int64 stock_leg_id = 763; // SR stock leg ID
        string alt_stk_leg_id = 766; // client stock leg ID (usually from a FIX order)
        ShortSaleFlag ssale_flag = 769; // stock short sale flag
        float ref_uPrc = 775; // reference underlier price (PrcDe orders)
        int32 num_legs = 778; // number of valid legs below
        OptionKey sec_key1 = 781; // leg #1
        SpdrKeyType sec_type1 = 784;
        uint32 mult1 = 787;
        BuySell side1 = 790;
        int64 leg_id1 = 793; // SR leg Id
        string alt_leg_id1 = 796; // client leg Id (usually from a FIX order)
        PositionType pos_type1 = 799;
        ShortSaleFlag ssale_flag1 = 805;
        float vega1 = 811;
        double ref_uPrc1 = 814; // reference underlier price (PrcDe orders)
        float ref_delta1 = 817; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt1 = 820; // reference # of earnings moves before expiration
        OptionKey sec_key2 = 823; // leg #2
        SpdrKeyType sec_type2 = 826;
        uint32 mult2 = 829;
        BuySell side2 = 832;
        int64 leg_id2 = 835; // SR leg Id
        string alt_leg_id2 = 838; // client leg Id (usually from a FIX order)
        PositionType pos_type2 = 841;
        ShortSaleFlag ssale_flag2 = 847;
        float vega2 = 853;
        double ref_uPrc2 = 856; // reference underlier price (PrcDe orders)
        float ref_delta2 = 859; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt2 = 862; // reference # of earnings moves before expiration
        OptionKey sec_key3 = 865; // leg #3
        SpdrKeyType sec_type3 = 868;
        uint32 mult3 = 871;
        BuySell side3 = 874;
        int64 leg_id3 = 877; // SR leg Id
        string alt_leg_id3 = 880; // client leg Id (usually from a FIX order)
        PositionType pos_type3 = 883;
        ShortSaleFlag ssale_flag3 = 889;
        float vega3 = 895;
        double ref_uPrc3 = 898; // reference underlier price (PrcDe orders)
        float ref_delta3 = 901; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt3 = 904; // reference # of earnings moves before expiration
        OptionKey sec_key4 = 907; // leg #4
        SpdrKeyType sec_type4 = 910;
        uint32 mult4 = 913;
        BuySell side4 = 916;
        int64 leg_id4 = 919; // SR leg Id
        string alt_leg_id4 = 922; // client leg Id (usually from a FIX order)
        PositionType pos_type4 = 925;
        ShortSaleFlag ssale_flag4 = 931;
        float vega4 = 937;
        double ref_uPrc4 = 940; // reference underlier price (PrcDe orders)
        float ref_delta4 = 943; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt4 = 946; // reference # of earnings moves before expiration
        OptionKey sec_key5 = 949; // leg #5
        SpdrKeyType sec_type5 = 952;
        uint32 mult5 = 955;
        BuySell side5 = 958;
        int64 leg_id5 = 961; // SR leg Id
        string alt_leg_id5 = 964; // client leg Id (usually from a FIX order)
        PositionType pos_type5 = 967;
        ShortSaleFlag ssale_flag5 = 973;
        float vega5 = 979;
        double ref_uPrc5 = 982; // reference underlier price (PrcDe orders)
        float ref_delta5 = 985; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt5 = 988; // reference # of earnings moves before expiration
        OptionKey sec_key6 = 991; // leg #6
        SpdrKeyType sec_type6 = 994;
        uint32 mult6 = 997;
        BuySell side6 = 1000;
        int64 leg_id6 = 1003; // SR leg Id
        string alt_leg_id6 = 1006; // client leg Id (usually from a FIX order)
        PositionType pos_type6 = 1009;
        ShortSaleFlag ssale_flag6 = 1015;
        float vega6 = 1021;
        double ref_uPrc6 = 1024; // reference underlier price (PrcDe orders)
        float ref_delta6 = 1027; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt6 = 1030; // reference # of earnings moves before expiration
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    SysEnvironment sys_environment = 100; // original (source) sys environment [Stable, Current, etc]
    RunStatus run_status = 103; // original (source) run status [Prod,Beta]
    SpdrActionType spdr_action_type = 106;
    SpdrOrderShape parent_shape = 109;
    int32 client_seq_num_in = 112; // inbound client seq number (FIX orders only)
    string alt_order_id = 115; // alternate order ID (usually clOrdId from client)
    string alt_prev_order_id = 118; // alternate prev order ID (usually origClOrdId from client during cxl/replace)
    string alt_auto_hedge_id = 124; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 127; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 130; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 133; // inbound FIX routing code or SRSE/tool server appID (if any)
    int64 package_id = 136; // references spread orderNumber, if a legged spread order or auto-hedge order
    OptionKey sec_key = 139; // Composite Security Key
    SpdrKeyType sec_type = 142; // Security Type [Stock, Future, Option]
    string security_desc = 145; // additional security description
    string accnt = 148; // SR trading account
    string client_firm = 151; // SR client firm
    SpdrSource spdr_source = 154;
    int64 grouping_code = 157; // unique broker code;broker.pkey = (key + accnt + spdrSource + groupingCode)
    string exec_brkr_code = 1039; // overrides the default executing broker for this parent order
    string extern_ex_dest = 163; // routing code for orders directed to an external order router (default = null); must match an exDest associated with a RouteDefinition
    string extern_params = 166; // external algo names/parameters (usually just an algo name)
    string strategy = 169; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 172; // name of the user entering the order
    SpdrSource user_source = 1031; // SpdrSource of this order (assumed to be the same as spdrSource if None)
    google.protobuf.Timestamp order_dttm = 178; // order entry time (from client;if any)
    BuySell order_side = 181;
    int32 order_size = 184; // maximum fill size (contracts)
    int32 order_active_size = 187; // total activated size (total size released for execution) (-1 = all available size)
    int32 cur_cum_fill_quantity = 190; // set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)
    YesNo add_cum_fill_quantity = 193; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    int32 max_exposure_size = 196; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 199; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 202; // public order size handling: None=algo default; Randomize=randomize public size; MktSize=expose typical market size; FullSize=expose entire order size where possible; FullSizeR=randomize full size
    YesNo can_overlap_cxl_repl = 205; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 208; // Immediate = all size immediately available; TWAP = work from arrival to expiration; VWAP = work order not faster than participation rate
    BlockVisibility block_visibility = 211; // for BlockAuction orders, visibility (to responders) is neither, side only, or side + price
    int32 progress_slice_cnt = 214; // number of slices to use (default = 4 or 8) [max 20]
    int32 progress_expose_time = 217; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 220; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 223; // Minimum pct [0 - 100] of order reserved for the on-close (MOC) auction
    TriggerType trigger_type = 226; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 229; // stop/trigger level for parent order to go active (can be either a price or vol)
    AuctionResponder auction_responder = 232; // if set, parent order can be an auction responder
    float max_make_exch_fee = 235; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 238; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 241; // include exchange fee in probability and surface based take limit calculations
    IncExchFee inc_make_exch_fee = 244; // include exchange fee in probability and surface based make limit calculations
    MakeExchRule make_exch_rule = 247; // ActiveMaker exch preference: 'MaxPart' = max participation; 'FeeOrder' = minimize fees [max rebates]; 'ImprvOnly' will only make when improving NBBO; 'RoundRobin' will rotate through exch list; 'ProRataOptim' will post on pro-rata only.
    UPrcCxl cxl_uPrc_range = 250; // cancel parent order if/when outside the uPrice range [ _Halt = also cancel if halted ]
    float min_uBid = 253; // [optional]
    float max_uAsk = 256; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 259; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 262; // [optional] option price floor for tied to stock orders
    int32 max_child_orders = 265; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    uint32 exch_mask = 268; // eligible exchanges (0 = all)
    SpdrStageType spdr_stage_type = 271; // note: stageType != None implies both KeepAlive behavior and makes the order visible on tools
    MarketSession market_session = 1032;
    google.protobuf.Timestamp start_dttm = 277; // [optional] (parent order start time)
    int32 order_duration = 280; // [optional] (number of seconds)
    int32 active_duration = 1033;
    google.protobuf.Timestamp good_till_dttm = 283; // [optional] (default: 2099-01-01)
    StartType start_type = 286; // WaitTrigger associates this order with a triggerGroupId.  The initial wave of child orders from the TriggerGroup will be send when a (final) parent order with startType=TriggerAll or when an external trigger signal is received.
    int64 trigger_group_id = 289; // triggerGroupId is required if startType=WaitTrigger; note that child orders from all parent orders in the trigger group will be organized and released optimally when the triggerGroup is released
    int64 trigger_timestamp = 292; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    ParentOrderHandling parent_order_handling = 298;
    ParentBalanceHandling parent_balance_handling = 301;
    SpdrLimitType order_limit_type = 304;
    SpdrLimitClass take_limit_class = 307; // Simple = LimitPrice +/- offset, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    SpdrLimitClass make_limit_class = 310; // Simple = LimitPrice +/- offset, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    ReachRule take_reach_rule = 313; // None = size immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 316; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 319; // default=underlier.mid
    float order_ref_delta = 322; // default=option.delta
    float order_ref_gamma = 325; // default=option.gamma
    float order_vol_limit = 328; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 331; // zero = ignore; > zero = override
    float sdiv_override = 334;
    string ddiv_override = 337; // discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 340;
    double order_prc_offset = 343; // default=0 [surface, relX and pegX limit offsets]
    StateModel state_model = 346;
    StateModel u_state_model = 349;
    AlphaType take_alpha_type = 352; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 355; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 358; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    float make_alpha_factor = 361; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    float take_probability = 364; // takeProbLimit = takeProbability [if AlphaType = Static]
    float make_probability = 367; // makeProbLimit = makeProbability [if AlphaType = Static]
    double take_surf_prc_offset = 370; // default=0
    float take_surf_vol_offset = 373; // default=0
    float take_surf_width_offset = 376; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 379; // default=0
    float make_surf_vol_offset = 382; // default=0
    float make_surf_width_offset = 385; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    float order_ref_event_mult = 388; // expected underlier abs move (0.01 = 1%) @ orderRefEventDttm
    google.protobuf.Timestamp order_ref_event_dttm = 391; // Date/time of the next event.  Note that events are usually earnings but are not required to be.
    AutoHedge auto_hedge = 394;
    HedgeInst hedge_instrument = 397; // Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    ExpiryKey hedge_sec_key = 400; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 403; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 406; // hedge group scope [RiskGroup or Accnt]
    MarketSession hedge_session = 1034; // market session for the autohedge order [defaults to pOrder.marketSession]
    string extern_hedge_ex_dest = 412; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 415; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    FirmType firm_type = 418; // used to override firmType in account config
    OrderCapacity order_capacity = 421;
    PositionType position_type = 424;
    ShortSaleFlag ssale_flag = 427; // used to determine stock auto-hedge flags
    string no_cross_group = 430;
    string exch_trader_id = 433;
    string large_trader_id = 436;
    string trading_location = 439;
    BuySell lead_side = 484; // for legged orders, which side to lead with.  (optional, None ok)
    double max_completion_slippage = 487; // maximum price slippage to complete an open basket
    float order_ref_premium = 490; // reference premium (mleg orders only)
    int64 notice_number = 1038; // required when parentOrderHandling = BlockResponse
    float theo_vol = 496; // client supplied theoretical volatility (used for markup only)
    float cl_arrive_mark = 499; // client specified arrival mark (passed through to ParentExecution; markup only)
    int64 risk_group_id = 502; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    YesNo req_aux_risk_group_ctrl = 1036;
    RMetricSource ref_rMetric1_src = 442;
    RMetricSource ref_rMetric2_src = 445;
    RMetricSource ref_rMetric3_src = 448;
    RMetricSource ref_rMetric4_src = 451;
    RMetricSource ref_rMetric5_src = 454;
    RMetricSource ref_rMetric6_src = 457;
    RMetricSource ref_rMetric7_src = 460;
    float order_ref_rMetric1 = 463; // user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    float order_ref_rMetric2 = 466; // user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    float order_ref_rMetric3 = 469; // user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    float order_ref_rMetric4 = 472; // user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    float order_ref_rMetric5 = 475; // user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    float order_ref_rMetric6 = 478; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 481; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    float exp_day_wt_vega_offset = 529; // max acct+symbol day wtVega offset (target)
    float max_exp_day_wt_vega_ln = 523; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 526; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float max_exp_day_rMetric6_ln = 559; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 562; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_dDelta_offset = 556; // max acct+symbol day $delta offset (target)
    float max_sym_day_dDelta_ln = 550; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 553; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 538; // max acct+symbol day vega offset (target)
    float max_sym_day_vega_ln = 532; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 535; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 547; // max acct+symbol day wtVega offset (target)
    float max_sym_day_wt_vega_ln = 541; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 544; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float max_sym_day_rMetric7_ln = 568; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 571; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_dDelta_ln = 577; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 580; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_ln = 586; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 589; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 592; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 595; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    int32 max_grp_day_contracts_ln = 646; // max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    int32 max_grp_day_contracts_sh = 649; // max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    int32 max_grp_day_contracts_abs = 652; // max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_rMetric1_ln = 610; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 613; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 616; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 619; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 622; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 625; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 628; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 631; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 634; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 637; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 640; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 643; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_ema_cxl_dDelta_ln = 655; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 658; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 661; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 664; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    google.protobuf.Timestamp last_fill_dttm = 667;
    string user_data1 = 670; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 673; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 676; // client supplied data field; passes through to down stream child orders
    int64 src_timestamp = 679;
    int64 sgw_timestamp = 682;
    google.protobuf.Timestamp timestamp = 685;
    InclExclDisclose include_sRNetwork = 1037;
    repeated DirectedCounterParty directed_counter_party = 694;
    repeated OrderLegs order_legs = 751;
}


