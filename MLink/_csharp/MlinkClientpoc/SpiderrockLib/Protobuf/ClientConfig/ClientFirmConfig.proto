syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message ClientFirmConfig {
    message PKey {
        
        string client_firm = 10; // SR assigned client firm acronym
    }

    message DirectedCounterParty {
        
        string client_firm = 247;
        YesNo is_comm_party = 250; // is a commission billing/collecting counter-party
    }

    message ExcludeCounterParty {
        
        string client_firm = 252;
    }

    message LocatePool {
        
        string locate_firm = 223; // acronym of firm used for locate requests (if any)
        string locate_pool = 226; // locate pool @ locate firm
    }

    message RawDataBilling {
        
        RawDataToken token = 256; // market data billing authorities (either external or internally controlled for billing purposes)
        RawDataScope scope = 259; // controls whether market data access is live or delayed
    }

    message SourceIP {
        
        string ip_v4_range = 265; // Use CIDR notation. "10.40.22.16/28" for 10.40.22.16 - 10.40.22.31
        string ip_v6_range = 268; // Use CIDR notation. "2001:4860:1723:0935:1845:9810:2960:4170/127" for 2001:4860:1723:0935:1845:9810:2960:4170 - 2001:4860:1723:0935:1845:9810:2960:4171
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    ClientFirmStatus client_firm_status = 100; // ClientFirm status
    google.protobuf.Timestamp client_firm_status_dttm = 103; // The date/time this status was last changed
    SysVersion enabled_in = 104;
    ClientFirmType client_firm_type = 106; // SponsorClientFirm [Accnts/Users] -> CoreClientFirm [Accnts/Users] -> SubClientFirm [Accnts/Users]
    string client_firm_name = 109; // SR assigned client firm Name
    string client_firm_short_code = 112; // SR assigned client firm short code (usually an MPID or equivalent)
    ClientFirmRelationship client_firm_relationship = 115;
    string rep_code_sR = 118; // SR client rep code
    string client_tag_pool = 121; // (optional) complete (unique) pool of user defined account tag(s) (tag bag JSON definition block) [max of 10,000 total chars (including seps)]
    string billing_account = 124; // billing account within the G/L system
    string billing_schedule = 127; // billing schedule code
    string billing_address1 = 130; // Billing Address - line 1
    string billing_address2 = 133; // Billing Address - line 2
    string billing_city = 136; // Billing Address - city
    string billing_state = 139; // Billing Address - state
    string billing_zip_code = 142; // Billing Address - zipCode
    string billing_country = 145; // Billing Address - country
    string billing_phone_number = 148; // Billing - phone
    string billing_email_address = 151; // Billing - emails (comma delimited string)
    string report_address1 = 154; // Reporting Address - line 1
    string report_address2 = 157; // Reporting Address - line 2
    string report_city = 160; // Reporting Address - city
    string report_state = 163; // Reporting Address - state
    string report_zip_code = 166; // Reporting Address - zipCode
    string report_country = 169; // Reporting Address - country
    string report_phone_number = 172; // Reporting - phone
    string report_email_address = 175; // Reporting - emails (comma delimited string)
    string core_client_firm = 178; // the core client firm this (Sub) client firm rolls up to [blank if none]
    string sponsor_client_firm = 181; // the sponsor client firm this (Sub or Core) client firm rolls up to [blank if none]
    YesNo can_have_trading_accnt = 184; // disables all accnt activity
    string legal_entity_id = 187; // (LEI) reg oversight committee assigned entity ID assigned to a firm.  20 character string, contains numbers and dashes.
    string sec_large_trader_id = 188; // SEC-assigned trading ID assigned to a firm.  13 character string, contains numbers and dashes.
    google.protobuf.Timestamp ltid_effective_date = 189; // LargeTraderID Effective Date
    CatCaisTidType cat_cais_tid_type = 190; // CAT CAIS TID (Transformed Identifiers) Type
    string cat_cais_tid_value = 191; // CAT CAIS TID Value
    CatCaisCustType cat_cais_cust_type = 192; // CAT CAIS CustomerType
    string sync_agg_groups = 193; // [tgt:src,tgt:src,...] target agg group [usually priAggGroup]; will accumulate SR executions; will sync w/srcAggGroup; tgt will follow (be made equal to) src
    float sync_threshold = 196; // number of idle seconds before syncing aggGroups (default: 5 seconds)
    YesNo view_gICS = 199; // client firm can see GICS codes in SRSE
    YesNo view_cUSIP = 202; // client firm can see CUSIP codes in SRSE
    YesNo restrict_locate_upload = 205; // restrict all associated users' ability to upload AwayStockLocate messages
    YesNo restrict_autohedge = 208; // restrict all associated users' ability to submit orders with autohedge enabled
    YesNo cxl_risk_group_on_review_hedge_reject = 211; // behavior if the stage/review hedge order is rejected.  "Yes" cancels the entire risk group.
    RateSource user_rate_source = 214; // Default GlobalRate (Discount Rate) source (uses system default curve unless otherwise specified)
    YesNo enable_srse_product_snapshots = 217; // If enabled 'Yes' daily_snapshots.py scripts will make create clientFirm-specific snapshots of SRSE products.  Grants are matched to UserConfig.SrseProductControl.
    AuthType auth_type = 229; // type of user logon allowed
    string auth_extern_name = 232; // eg.  CorpName
    string auth_extern_params = 235; // eg. 'https://corp.domain.com:xxxx'
    string pw_file_transfer = 238; // [SR] Password for securing files in transit
    YesNo drop_all_parent_tags = 241;
    YesNo enable_srse_prod = 271; // also requires srse pool instance in schedule.txt (which advertises as SRSE-{SysRealm}-{RunStatus}-V8.services.consul...)
    string modified_by = 274; // user who last modified this record
    SysEnvironment modified_in = 277;
    google.protobuf.Timestamp timestamp = 280; // timestamp of last modification
    string tool_product_acl__v7 = 5000; // only V7
    string elastic_product_acl__v7 = 5001; // only V7
    string market_data_acl__v7 = 5002; // only V7
    string gwt_product_acl__v7 = 5003; // only V7
    RiskServerCode_V7 risk_server_code__v7 = 5004; // only v7: enum values do not match with v8: V7[None=0,RS1=1,RS2=2,RS3=3,RS4=4,RS5=5,RS6=6,RS7=7,RS8=8,RS9=9,RS10=10,RS11=11,RS12=12,RS13=13,RS14=14,RS15=15,RS16=16,RS17=17,RS18=18,RS19=19,RS20=20,RST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code__v7 = 5005; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code2__v7 = 5006; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code3__v7 = 5007; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code4__v7 = 5008; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code5__v7 = 5009; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code6__v7 = 5010; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code7__v7 = 5011; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    DropServerCode_V7 drop_server_code8__v7 = 5012; // only v7: enum values do not match with v8: V7[None=0,DS1=1,DS2=2,DS3=3,DS4=4,DS5=5,DS6=6,DS7=7,DS8=8,DS9=9,DS10=10,DS11=11,DS12=12,DS13=13,DS14=14,DS15=15,DS16=16,DS17=17,DS18=18,DS19=19,DS20=20,DST=21], V8[Does Not Exist]
    PrivacyRule_V7 privacy_rule__v7 = 5013; // only v7: enum values do not match with v8: V7[None=0,Normal=1,Restricted=2,Strict=3,ZeroDarkThirty=4], V8[Does Not Exist]
    AllowedIngress_V7 allowed_ingress__v7 = 5014; // only v7: enum values do not match with v8: V7[None=0,Internet=1,VPN=2,Private=4,Extranet=8,Other=16], V8[Does Not Exist]
    YesNo restrict_iPSource__v7 = 5015; // only v7 - enum values match with v8
    string ip_access_mask__v7 = 5016; // only V7
    TwoPhaseType_V7 two_phase_type__v7 = 5017; // only v7: enum values do not match with v8: V7[None=0,SR=1,SAML=2,Other=3], V8[Does Not Exist]
    YesNo change_on_init_logon__v7 = 5018; // only v7 - enum values match with v8
    YesNo user_lockout__v7 = 5019; // only v7 - enum values match with v8
    YesNo enforce_history__v7 = 5020; // only v7 - enum values match with v8
    int32 pw_age__v7 = 5021; // only V7
    int32 pw_length__v7 = 5022; // only V7
    int32 pw_history__v7 = 5023; // only V7
    PwComplexity_V7 pw_complexity__v7 = 5024; // only v7: enum values do not match with v8: V7[None=0,Length=1,LengthCase=2,LengthCaseNum=3,LengthCaseNumSym=4], V8[Does Not Exist]
    string locate_req_firm__v7 = 5025; // only V7
    SRDataCenter_V7 locate_data_center__v7 = 5026; // only v7: enum values do not match with v8: V7[None=0,NY4=1,NY5=2,CH2=3,CH3=4], V8[Does Not Exist]
    string route_table__v7 = 5027; // only V7
    TickerSrc_V7 user_ticker_src__v7 = 5028; // only v7: enum values do not match with v8: V7[None=0,SR=1,NMS=2,CME=3,ICE=4,CFE=5,CBOT=6,TD=7,NYMEX=8,COMEX=9,RUT=10,CBOE=11,ISE=12,ARCA=13,NYSE=14,OTC=15,TST1=16,TST2=17,TST3=18,TST=19,USR1=20,USR2=21,USR3=22,NSDQ=23,MFQS=24,PHLX=25,MIAX=26,TSE=27,DJI=28,CBX=29,BXE=30,ESX=31,CXE=32,DXE=33,NXAM=34,NXBR=35,NXDUB=36,NXLS=37,NXLDN=38,NXML=39,NXMLT=40,NXOS=41,NXP=42,EUREX=43,CEDX=44], V8[None=0,SR=1,NMS=2,CME=3,ICE=4,CFE=5,CBOT=6,NYMEX=7,COMEX=8,RUT=9,CIDX=10,ARCA=11,NYSE=12,OTC=13,NSDQ=14,MFQS=15,MIAX=16,DJI=17,CUSIP=18,ISIN=19,BXE=20,ESX=21,ANY=22,CXE=23,DXE=24,NXAM=25,NXBR=26,NXDUB=27,NXLS=28,NXLDN=29,NXML=30,NXMLT=31,NXOS=32,NXP=33,EUREX=34,CEDX=35]
    string user_name__v7 = 5029; // only V7: using metaType
    repeated DirectedCounterParty directed_counter_party = 244;
    repeated ExcludeCounterParty exclude_counter_party = 251;
    repeated LocatePool locate_pool = 220;
    repeated RawDataBilling raw_data_billing = 253;
    repeated SourceIP source_i_p = 262;
}


