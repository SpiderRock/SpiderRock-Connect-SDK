// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptionDefinition/RootDefinition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptionDefinition/RootDefinition.proto</summary>
  public static partial class RootDefinitionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptionDefinition/RootDefinition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RootDefinitionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9PcHRpb25EZWZpbml0aW9uL1Jvb3REZWZpbml0aW9uLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKSEgoOUm9v",
            "dERlZmluaXRpb24SMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk1lc3NhZ2VNZXRhZGF0YRI2CgRwa2V5GAIgASgLMiguc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5Sb290RGVmaW5pdGlvbi5QS2V5Ei4KBnRpY2tlchhkIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EhAKCG9zaV9yb290",
            "GGcgASgJEi0KBWNjb2RlGGogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5U",
            "aWNrZXJLZXkSOAoQdV9wcmNfZHJpdmVyX2tleRhtIAEoCzIeLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuRXhwaXJ5S2V5EjsKEXVfcHJjX2RyaXZlcl90eXBlGHAg",
            "ASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyS2V5VHlwZRI5ChF1X3By",
            "Y19kcml2ZXJfa2V5MhhzIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuRXhw",
            "aXJ5S2V5EjwKEnVfcHJjX2RyaXZlcl90eXBlMhh2IAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuU3BkcktleVR5cGUSNQoRdV9wcmNfYm91bmRfY0NvZGUY",
            "eSABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjoKDmV4cGlyYXRp",
            "b25fbWFwGHwgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5FeHBpcmF0aW9u",
            "TWFwEjoKDnVuZGVybGllcl9tb2RlGH8gASgOMiIuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5VbmRlcmxpZXJNb2RlEjUKC29wdGlvbl90eXBlGIIBIAEoDjIfLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuT3B0aW9uVHlwZRI0CgptdWx0aWhlZGdlGIUB",
            "IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTXVsdGloZWRnZRI5Cg1leGVy",
            "Y2lzZV90aW1lGIgBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuRXhlcmNp",
            "c2VUaW1lEjkKDWV4ZXJjaXNlX3R5cGUYiwEgASgOMiEuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5FeGVyY2lzZVR5cGUSNQoLdGltZV9tZXRyaWMYjgEgASgOMh8u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5UaW1lTWV0cmljEjkKDXByaWNpbmdfbW9k",
            "ZWwYkQEgASgOMiEuc3BpZGVycm9jay5wcm90b2J1Zi5QcmljaW5nTW9kZWwS",
            "OwoObW9uZXluZXNzX3R5cGUYlAEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5Nb25leW5lc3NUeXBlEj4KEHByaWNlX3F1b3RlX3R5cGUYlwEgASgOMiMu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5QcmljZVF1b3RlVHlwZRI1Cgt2b2x1bWVf",
            "dGllchiaASABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVmLlZvbHVtZVRpZXIS",
            "FwoOcG9zaXRpb25fbGltaXQYnQEgASgFEhIKCWV4Y2hhbmdlcxigASABKAkS",
            "EwoKdGlja192YWx1ZRijASABKAISFAoLcG9pbnRfdmFsdWUYpgEgASgCEjYK",
            "DnBvaW50X2N1cnJlbmN5GKkBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "Q3VycmVuY3kSFQoMc3RyaWtlX3NjYWxlGKwBIAEoARIVCgxzdHJpa2VfcmF0",
            "aW8YrwEgASgCEhkKEGNhc2hfb25fZXhlcmNpc2UYsgEgASgCEhoKEXVuZGVy",
            "bGllcnNfcGVyX2NuGLUBIAEoBRIVCgxwcmVtaXVtX211bHQYuAEgASgBEjsK",
            "DmFkal9jb252ZW50aW9uGLsBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QWRqQ29udmVudGlvbhI4Cg1vcHRfcHJpY2VfaW5jGL4BIAEoDjIgLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuT3B0UHJpY2VJbmMSNwoMcHJpY2VfZm9ybWF0GMEB",
            "IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VGb3JtYXQSMgoKdHJh",
            "ZGVfY3VychjEASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkN1cnJlbmN5",
            "EjMKC3NldHRsZV9jdXJyGMcBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "Q3VycmVuY3kSMwoLc3RyaWtlX2N1cnIYygEgASgOMh0uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5DdXJyZW5jeRI9ChRkZWZhdWx0X3N1cmZhY2Vfcm9vdBjNASAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIRCghyaWNfcm9v",
            "dBjaASABKAkSLgoJdGltZXN0YW1wGNABIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASQgoScHJpY2luZ19zb3VyY2VfX3Y3GIgnIAEoDjIlLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuUHJpY2luZ1NvdXJjZV9WNxI/CghleGNoYW5n",
            "ZRjcASADKAsyLC5zcGlkZXJyb2NrLnByb3RvYnVmLlJvb3REZWZpbml0aW9u",
            "LkV4Y2hhbmdlEkMKCnVuZGVybHlpbmcY0wEgAygLMi4uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5Sb290RGVmaW5pdGlvbi5VbmRlcmx5aW5nGjQKBFBLZXkSLAoE",
            "cm9vdBgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5GlEK",
            "CEV4Y2hhbmdlEi8KCG9wdF9leGNoGN8BIAEoDjIcLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuT3B0RXhjaBIUCgtuYXRpdmVfcm9vdBjiASABKAkaSwoKVW5kZXJs",
            "eWluZxIvCgZ0aWNrZXIY1gEgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5U",
            "aWNrZXJLZXkSDAoDc3BjGNkBIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RootDefinition), global::Spiderrock.Protobuf.RootDefinition.Parser, new[]{ "Meta", "Pkey", "Ticker", "OsiRoot", "Ccode", "UPrcDriverKey", "UPrcDriverType", "UPrcDriverKey2", "UPrcDriverType2", "UPrcBoundCCode", "ExpirationMap", "UnderlierMode", "OptionType", "Multihedge", "ExerciseTime", "ExerciseType", "TimeMetric", "PricingModel", "MoneynessType", "PriceQuoteType", "VolumeTier", "PositionLimit", "Exchanges", "TickValue", "PointValue", "PointCurrency", "StrikeScale", "StrikeRatio", "CashOnExercise", "UnderliersPerCn", "PremiumMult", "AdjConvention", "OptPriceInc", "PriceFormat", "TradeCurr", "SettleCurr", "StrikeCurr", "DefaultSurfaceRoot", "RicRoot", "Timestamp", "PricingSourceV7", "Exchange", "Underlying" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RootDefinition.Types.PKey), global::Spiderrock.Protobuf.RootDefinition.Types.PKey.Parser, new[]{ "Root" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RootDefinition.Types.Exchange), global::Spiderrock.Protobuf.RootDefinition.Types.Exchange.Parser, new[]{ "OptExch", "NativeRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RootDefinition.Types.Underlying), global::Spiderrock.Protobuf.RootDefinition.Types.Underlying.Parser, new[]{ "Ticker", "Spc" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///RootDefinition records are sourced from the listing exchange for future options and from OCC for US equity options.  Records are updated as SpiderRock receives changes.
  /// </summary>
  public sealed partial class RootDefinition : pb::IMessage<RootDefinition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RootDefinition> _parser = new pb::MessageParser<RootDefinition>(() => new RootDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RootDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.RootDefinitionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RootDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RootDefinition(RootDefinition other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      osiRoot_ = other.osiRoot_;
      ccode_ = other.ccode_ != null ? other.ccode_.Clone() : null;
      uPrcDriverKey_ = other.uPrcDriverKey_ != null ? other.uPrcDriverKey_.Clone() : null;
      uPrcDriverType_ = other.uPrcDriverType_;
      uPrcDriverKey2_ = other.uPrcDriverKey2_ != null ? other.uPrcDriverKey2_.Clone() : null;
      uPrcDriverType2_ = other.uPrcDriverType2_;
      uPrcBoundCCode_ = other.uPrcBoundCCode_;
      expirationMap_ = other.expirationMap_;
      underlierMode_ = other.underlierMode_;
      optionType_ = other.optionType_;
      multihedge_ = other.multihedge_;
      exerciseTime_ = other.exerciseTime_;
      exerciseType_ = other.exerciseType_;
      timeMetric_ = other.timeMetric_;
      pricingModel_ = other.pricingModel_;
      moneynessType_ = other.moneynessType_;
      priceQuoteType_ = other.priceQuoteType_;
      volumeTier_ = other.volumeTier_;
      positionLimit_ = other.positionLimit_;
      exchanges_ = other.exchanges_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      strikeScale_ = other.strikeScale_;
      strikeRatio_ = other.strikeRatio_;
      cashOnExercise_ = other.cashOnExercise_;
      underliersPerCn_ = other.underliersPerCn_;
      premiumMult_ = other.premiumMult_;
      adjConvention_ = other.adjConvention_;
      optPriceInc_ = other.optPriceInc_;
      priceFormat_ = other.priceFormat_;
      tradeCurr_ = other.tradeCurr_;
      settleCurr_ = other.settleCurr_;
      strikeCurr_ = other.strikeCurr_;
      defaultSurfaceRoot_ = other.defaultSurfaceRoot_ != null ? other.defaultSurfaceRoot_.Clone() : null;
      ricRoot_ = other.ricRoot_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      pricingSourceV7_ = other.pricingSourceV7_;
      exchange_ = other.exchange_.Clone();
      underlying_ = other.underlying_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RootDefinition Clone() {
      return new RootDefinition(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.RootDefinition.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RootDefinition.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// master underlying (can be a stock/product group; eg. @ES)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "osi_root" field.</summary>
    public const int OsiRootFieldNumber = 103;
    private string osiRoot_ = "";
    /// <summary>
    /// long version of the root.  the short version is used in the TickerKey (for example RYAAY1, not RYAA1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OsiRoot {
      get { return osiRoot_; }
      set {
        osiRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ccode" field.</summary>
    public const int CcodeFieldNumber = 106;
    private global::Spiderrock.Protobuf.TickerKey ccode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ccode {
      get { return ccode_; }
      set {
        ccode_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_key" field.</summary>
    public const int UPrcDriverKeyFieldNumber = 109;
    private global::Spiderrock.Protobuf.ExpiryKey uPrcDriverKey_;
    /// <summary>
    /// (optional) option underlier price driver (all option expiries) (overrides optExpiryDefinition)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UPrcDriverKey {
      get { return uPrcDriverKey_; }
      set {
        uPrcDriverKey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_type" field.</summary>
    public const int UPrcDriverTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.SpdrKeyType uPrcDriverType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// Stock or Future (note: if Future and uPrcDriverKey does not have an expiry month then FrontMonth will be used)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UPrcDriverType {
      get { return uPrcDriverType_; }
      set {
        uPrcDriverType_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_key2" field.</summary>
    public const int UPrcDriverKey2FieldNumber = 115;
    private global::Spiderrock.Protobuf.ExpiryKey uPrcDriverKey2_;
    /// <summary>
    /// (optional) alternate option underlier price driver (all option expiries) (overrides optExpiryDefinition)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UPrcDriverKey2 {
      get { return uPrcDriverKey2_; }
      set {
        uPrcDriverKey2_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_type2" field.</summary>
    public const int UPrcDriverType2FieldNumber = 118;
    private global::Spiderrock.Protobuf.SpdrKeyType uPrcDriverType2_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// Stock or Future (note: if Future and uPrcDriverKey does not have an expiry month then FrontMonth will be used)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UPrcDriverType2 {
      get { return uPrcDriverType2_; }
      set {
        uPrcDriverType2_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_bound_cCode" field.</summary>
    public const int UPrcBoundCCodeFieldNumber = 121;
    private global::Spiderrock.Protobuf.YesNo uPrcBoundCCode_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if Yes and if a future exists with ccode=CCode and futExpiry = optExpiry the use this future as a pricing bound
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UPrcBoundCCode {
      get { return uPrcBoundCCode_; }
      set {
        uPrcBoundCCode_ = value;
      }
    }

    /// <summary>Field number for the "expiration_map" field.</summary>
    public const int ExpirationMapFieldNumber = 124;
    private global::Spiderrock.Protobuf.ExpirationMap expirationMap_ = global::Spiderrock.Protobuf.ExpirationMap.Unspecified;
    /// <summary>
    /// determines the underlying future (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpirationMap ExpirationMap {
      get { return expirationMap_; }
      set {
        expirationMap_ = value;
      }
    }

    /// <summary>Field number for the "underlier_mode" field.</summary>
    public const int UnderlierModeFieldNumber = 127;
    private global::Spiderrock.Protobuf.UnderlierMode underlierMode_ = global::Spiderrock.Protobuf.UnderlierMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierMode UnderlierMode {
      get { return underlierMode_; }
      set {
        underlierMode_ = value;
      }
    }

    /// <summary>Field number for the "option_type" field.</summary>
    public const int OptionTypeFieldNumber = 130;
    private global::Spiderrock.Protobuf.OptionType optionType_ = global::Spiderrock.Protobuf.OptionType.Unspecified;
    /// <summary>
    /// indicator for option type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionType OptionType {
      get { return optionType_; }
      set {
        optionType_ = value;
      }
    }

    /// <summary>Field number for the "multihedge" field.</summary>
    public const int MultihedgeFieldNumber = 133;
    private global::Spiderrock.Protobuf.Multihedge multihedge_ = global::Spiderrock.Protobuf.Multihedge.Unspecified;
    /// <summary>
    /// indicates type of multihedge (None = standard root; all other root types are not None)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Multihedge Multihedge {
      get { return multihedge_; }
      set {
        multihedge_ = value;
      }
    }

    /// <summary>Field number for the "exercise_time" field.</summary>
    public const int ExerciseTimeFieldNumber = 136;
    private global::Spiderrock.Protobuf.ExerciseTime exerciseTime_ = global::Spiderrock.Protobuf.ExerciseTime.Unspecified;
    /// <summary>
    /// Exercise time type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseTime ExerciseTime {
      get { return exerciseTime_; }
      set {
        exerciseTime_ = value;
      }
    }

    /// <summary>Field number for the "exercise_type" field.</summary>
    public const int ExerciseTypeFieldNumber = 139;
    private global::Spiderrock.Protobuf.ExerciseType exerciseType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// Exercise style
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExerciseType {
      get { return exerciseType_; }
      set {
        exerciseType_ = value;
      }
    }

    /// <summary>Field number for the "time_metric" field.</summary>
    public const int TimeMetricFieldNumber = 142;
    private global::Spiderrock.Protobuf.TimeMetric timeMetric_ = global::Spiderrock.Protobuf.TimeMetric.Unspecified;
    /// <summary>
    /// trading time metric - 252 or 365 trading days or a weekly cycle type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TimeMetric TimeMetric {
      get { return timeMetric_; }
      set {
        timeMetric_ = value;
      }
    }

    /// <summary>Field number for the "pricing_model" field.</summary>
    public const int PricingModelFieldNumber = 145;
    private global::Spiderrock.Protobuf.PricingModel pricingModel_ = global::Spiderrock.Protobuf.PricingModel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PricingModel PricingModel {
      get { return pricingModel_; }
      set {
        pricingModel_ = value;
      }
    }

    /// <summary>Field number for the "moneyness_type" field.</summary>
    public const int MoneynessTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.MoneynessType moneynessType_ = global::Spiderrock.Protobuf.MoneynessType.Unspecified;
    /// <summary>
    /// moneyness (xAxis) convention: PctStd = (K / fUPrc - 1) / (axisVol * RT), LogStd = LOG(K/fUPrc) / (axisVol * RT), NormStd = (K - fUPrc) / (axisVol * RT)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MoneynessType MoneynessType {
      get { return moneynessType_; }
      set {
        moneynessType_ = value;
      }
    }

    /// <summary>Field number for the "price_quote_type" field.</summary>
    public const int PriceQuoteTypeFieldNumber = 151;
    private global::Spiderrock.Protobuf.PriceQuoteType priceQuoteType_ = global::Spiderrock.Protobuf.PriceQuoteType.Unspecified;
    /// <summary>
    /// quoting style for the option series on the exchange, price (standard price quote) or volatility quoted (vol points)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceQuoteType PriceQuoteType {
      get { return priceQuoteType_; }
      set {
        priceQuoteType_ = value;
      }
    }

    /// <summary>Field number for the "volume_tier" field.</summary>
    public const int VolumeTierFieldNumber = 154;
    private global::Spiderrock.Protobuf.VolumeTier volumeTier_ = global::Spiderrock.Protobuf.VolumeTier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.VolumeTier VolumeTier {
      get { return volumeTier_; }
      set {
        volumeTier_ = value;
      }
    }

    /// <summary>Field number for the "position_limit" field.</summary>
    public const int PositionLimitFieldNumber = 157;
    private int positionLimit_;
    /// <summary>
    /// max contract limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PositionLimit {
      get { return positionLimit_; }
      set {
        positionLimit_ = value;
      }
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 160;
    private string exchanges_ = "";
    /// <summary>
    /// exchange codes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchanges {
      get { return exchanges_; }
      set {
        exchanges_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 163;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 166;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 169;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "strike_scale" field.</summary>
    public const int StrikeScaleFieldNumber = 172;
    private double strikeScale_;
    /// <summary>
    /// manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikeScale {
      get { return strikeScale_; }
      set {
        strikeScale_ = value;
      }
    }

    /// <summary>Field number for the "strike_ratio" field.</summary>
    public const int StrikeRatioFieldNumber = 175;
    private float strikeRatio_;
    /// <summary>
    /// note: effective strike = strike * strikeRatio - cashOnExercise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StrikeRatio {
      get { return strikeRatio_; }
      set {
        strikeRatio_ = value;
      }
    }

    /// <summary>Field number for the "cash_on_exercise" field.</summary>
    public const int CashOnExerciseFieldNumber = 178;
    private float cashOnExercise_;
    /// <summary>
    /// note: cashOnExercise is positive if it decreases the effective strike price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CashOnExercise {
      get { return cashOnExercise_; }
      set {
        cashOnExercise_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 181;
    private int underliersPerCn_;
    /// <summary>
    /// note: always 100 if underlying list is in use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "premium_mult" field.</summary>
    public const int PremiumMultFieldNumber = 184;
    private double premiumMult_;
    /// <summary>
    /// note: OCC premium/strike multiplier (usually 100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PremiumMult {
      get { return premiumMult_; }
      set {
        premiumMult_ = value;
      }
    }

    /// <summary>Field number for the "adj_convention" field.</summary>
    public const int AdjConventionFieldNumber = 187;
    private global::Spiderrock.Protobuf.AdjConvention adjConvention_ = global::Spiderrock.Protobuf.AdjConvention.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AdjConvention AdjConvention {
      get { return adjConvention_; }
      set {
        adjConvention_ = value;
      }
    }

    /// <summary>Field number for the "opt_price_inc" field.</summary>
    public const int OptPriceIncFieldNumber = 190;
    private global::Spiderrock.Protobuf.OptPriceInc optPriceInc_ = global::Spiderrock.Protobuf.OptPriceInc.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptPriceInc OptPriceInc {
      get { return optPriceInc_; }
      set {
        optPriceInc_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 193;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// price display format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "trade_curr" field.</summary>
    public const int TradeCurrFieldNumber = 196;
    private global::Spiderrock.Protobuf.Currency tradeCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency TradeCurr {
      get { return tradeCurr_; }
      set {
        tradeCurr_ = value;
      }
    }

    /// <summary>Field number for the "settle_curr" field.</summary>
    public const int SettleCurrFieldNumber = 199;
    private global::Spiderrock.Protobuf.Currency settleCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency SettleCurr {
      get { return settleCurr_; }
      set {
        settleCurr_ = value;
      }
    }

    /// <summary>Field number for the "strike_curr" field.</summary>
    public const int StrikeCurrFieldNumber = 202;
    private global::Spiderrock.Protobuf.Currency strikeCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency StrikeCurr {
      get { return strikeCurr_; }
      set {
        strikeCurr_ = value;
      }
    }

    /// <summary>Field number for the "default_surface_root" field.</summary>
    public const int DefaultSurfaceRootFieldNumber = 205;
    private global::Spiderrock.Protobuf.TickerKey defaultSurfaceRoot_;
    /// <summary>
    /// fallback ticker to use for option surfaces if no native surfaces are available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey DefaultSurfaceRoot {
      get { return defaultSurfaceRoot_; }
      set {
        defaultSurfaceRoot_ = value;
      }
    }

    /// <summary>Field number for the "ric_root" field.</summary>
    public const int RicRootFieldNumber = 218;
    private string ricRoot_ = "";
    /// <summary>
    /// RIC Root
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RicRoot {
      get { return ricRoot_; }
      set {
        ricRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 208;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "pricing_source__v7" field.</summary>
    public const int PricingSourceV7FieldNumber = 5000;
    private global::Spiderrock.Protobuf.PricingSource_V7 pricingSourceV7_ = global::Spiderrock.Protobuf.PricingSource_V7.Unspecified;
    /// <summary>
    /// only v7: enum values do not match with v8: V7[None=0,Native=1,SyntheticExpiry=2], V8[Does Not Exist]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PricingSource_V7 PricingSourceV7 {
      get { return pricingSourceV7_; }
      set {
        pricingSourceV7_ = value;
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 220;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.RootDefinition.Types.Exchange> _repeated_exchange_codec
        = pb::FieldCodec.ForMessage(1762, global::Spiderrock.Protobuf.RootDefinition.Types.Exchange.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Exchange> exchange_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Exchange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Exchange> Exchange {
      get { return exchange_; }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 211;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.RootDefinition.Types.Underlying> _repeated_underlying_codec
        = pb::FieldCodec.ForMessage(1690, global::Spiderrock.Protobuf.RootDefinition.Types.Underlying.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Underlying> underlying_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Underlying>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.RootDefinition.Types.Underlying> Underlying {
      get { return underlying_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RootDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RootDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (OsiRoot != other.OsiRoot) return false;
      if (!object.Equals(Ccode, other.Ccode)) return false;
      if (!object.Equals(UPrcDriverKey, other.UPrcDriverKey)) return false;
      if (UPrcDriverType != other.UPrcDriverType) return false;
      if (!object.Equals(UPrcDriverKey2, other.UPrcDriverKey2)) return false;
      if (UPrcDriverType2 != other.UPrcDriverType2) return false;
      if (UPrcBoundCCode != other.UPrcBoundCCode) return false;
      if (ExpirationMap != other.ExpirationMap) return false;
      if (UnderlierMode != other.UnderlierMode) return false;
      if (OptionType != other.OptionType) return false;
      if (Multihedge != other.Multihedge) return false;
      if (ExerciseTime != other.ExerciseTime) return false;
      if (ExerciseType != other.ExerciseType) return false;
      if (TimeMetric != other.TimeMetric) return false;
      if (PricingModel != other.PricingModel) return false;
      if (MoneynessType != other.MoneynessType) return false;
      if (PriceQuoteType != other.PriceQuoteType) return false;
      if (VolumeTier != other.VolumeTier) return false;
      if (PositionLimit != other.PositionLimit) return false;
      if (Exchanges != other.Exchanges) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikeScale, other.StrikeScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrikeRatio, other.StrikeRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CashOnExercise, other.CashOnExercise)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PremiumMult, other.PremiumMult)) return false;
      if (AdjConvention != other.AdjConvention) return false;
      if (OptPriceInc != other.OptPriceInc) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (TradeCurr != other.TradeCurr) return false;
      if (SettleCurr != other.SettleCurr) return false;
      if (StrikeCurr != other.StrikeCurr) return false;
      if (!object.Equals(DefaultSurfaceRoot, other.DefaultSurfaceRoot)) return false;
      if (RicRoot != other.RicRoot) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (PricingSourceV7 != other.PricingSourceV7) return false;
      if(!exchange_.Equals(other.exchange_)) return false;
      if(!underlying_.Equals(other.underlying_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (OsiRoot.Length != 0) hash ^= OsiRoot.GetHashCode();
      if (ccode_ != null) hash ^= Ccode.GetHashCode();
      if (uPrcDriverKey_ != null) hash ^= UPrcDriverKey.GetHashCode();
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UPrcDriverType.GetHashCode();
      if (uPrcDriverKey2_ != null) hash ^= UPrcDriverKey2.GetHashCode();
      if (UPrcDriverType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UPrcDriverType2.GetHashCode();
      if (UPrcBoundCCode != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UPrcBoundCCode.GetHashCode();
      if (ExpirationMap != global::Spiderrock.Protobuf.ExpirationMap.Unspecified) hash ^= ExpirationMap.GetHashCode();
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) hash ^= UnderlierMode.GetHashCode();
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) hash ^= OptionType.GetHashCode();
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) hash ^= Multihedge.GetHashCode();
      if (ExerciseTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) hash ^= ExerciseTime.GetHashCode();
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExerciseType.GetHashCode();
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) hash ^= TimeMetric.GetHashCode();
      if (PricingModel != global::Spiderrock.Protobuf.PricingModel.Unspecified) hash ^= PricingModel.GetHashCode();
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) hash ^= MoneynessType.GetHashCode();
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) hash ^= PriceQuoteType.GetHashCode();
      if (VolumeTier != global::Spiderrock.Protobuf.VolumeTier.Unspecified) hash ^= VolumeTier.GetHashCode();
      if (PositionLimit != 0) hash ^= PositionLimit.GetHashCode();
      if (Exchanges.Length != 0) hash ^= Exchanges.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (StrikeScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikeScale);
      if (StrikeRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrikeRatio);
      if (CashOnExercise != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CashOnExercise);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (PremiumMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PremiumMult);
      if (AdjConvention != global::Spiderrock.Protobuf.AdjConvention.Unspecified) hash ^= AdjConvention.GetHashCode();
      if (OptPriceInc != global::Spiderrock.Protobuf.OptPriceInc.Unspecified) hash ^= OptPriceInc.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= TradeCurr.GetHashCode();
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= SettleCurr.GetHashCode();
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= StrikeCurr.GetHashCode();
      if (defaultSurfaceRoot_ != null) hash ^= DefaultSurfaceRoot.GetHashCode();
      if (RicRoot.Length != 0) hash ^= RicRoot.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (PricingSourceV7 != global::Spiderrock.Protobuf.PricingSource_V7.Unspecified) hash ^= PricingSourceV7.GetHashCode();
      hash ^= exchange_.GetHashCode();
      hash ^= underlying_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (OsiRoot.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(OsiRoot);
      }
      if (ccode_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ccode);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (uPrcDriverKey2_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(UPrcDriverKey2);
      }
      if (UPrcDriverType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) UPrcDriverType2);
      }
      if (UPrcBoundCCode != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) UPrcBoundCCode);
      }
      if (ExpirationMap != global::Spiderrock.Protobuf.ExpirationMap.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) ExpirationMap);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) UnderlierMode);
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) OptionType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) Multihedge);
      }
      if (ExerciseTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) ExerciseTime);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ExerciseType);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) TimeMetric);
      }
      if (PricingModel != global::Spiderrock.Protobuf.PricingModel.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) PricingModel);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (VolumeTier != global::Spiderrock.Protobuf.VolumeTier.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) VolumeTier);
      }
      if (PositionLimit != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(PositionLimit);
      }
      if (Exchanges.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(Exchanges);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) PointCurrency);
      }
      if (StrikeScale != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(StrikeScale);
      }
      if (StrikeRatio != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(StrikeRatio);
      }
      if (CashOnExercise != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(CashOnExercise);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(UnderliersPerCn);
      }
      if (PremiumMult != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(PremiumMult);
      }
      if (AdjConvention != global::Spiderrock.Protobuf.AdjConvention.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) AdjConvention);
      }
      if (OptPriceInc != global::Spiderrock.Protobuf.OptPriceInc.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) OptPriceInc);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) PriceFormat);
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) StrikeCurr);
      }
      if (defaultSurfaceRoot_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(DefaultSurfaceRoot);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 13);
        output.WriteMessage(Timestamp);
      }
      underlying_.WriteTo(output, _repeated_underlying_codec);
      if (RicRoot.Length != 0) {
        output.WriteRawTag(210, 13);
        output.WriteString(RicRoot);
      }
      exchange_.WriteTo(output, _repeated_exchange_codec);
      if (PricingSourceV7 != global::Spiderrock.Protobuf.PricingSource_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) PricingSourceV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (OsiRoot.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(OsiRoot);
      }
      if (ccode_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ccode);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (uPrcDriverKey2_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(UPrcDriverKey2);
      }
      if (UPrcDriverType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) UPrcDriverType2);
      }
      if (UPrcBoundCCode != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) UPrcBoundCCode);
      }
      if (ExpirationMap != global::Spiderrock.Protobuf.ExpirationMap.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) ExpirationMap);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) UnderlierMode);
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) OptionType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) Multihedge);
      }
      if (ExerciseTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) ExerciseTime);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ExerciseType);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) TimeMetric);
      }
      if (PricingModel != global::Spiderrock.Protobuf.PricingModel.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) PricingModel);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (VolumeTier != global::Spiderrock.Protobuf.VolumeTier.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) VolumeTier);
      }
      if (PositionLimit != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(PositionLimit);
      }
      if (Exchanges.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(Exchanges);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) PointCurrency);
      }
      if (StrikeScale != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(StrikeScale);
      }
      if (StrikeRatio != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(StrikeRatio);
      }
      if (CashOnExercise != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(CashOnExercise);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(UnderliersPerCn);
      }
      if (PremiumMult != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(PremiumMult);
      }
      if (AdjConvention != global::Spiderrock.Protobuf.AdjConvention.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) AdjConvention);
      }
      if (OptPriceInc != global::Spiderrock.Protobuf.OptPriceInc.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) OptPriceInc);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) PriceFormat);
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) StrikeCurr);
      }
      if (defaultSurfaceRoot_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(DefaultSurfaceRoot);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 13);
        output.WriteMessage(Timestamp);
      }
      underlying_.WriteTo(ref output, _repeated_underlying_codec);
      if (RicRoot.Length != 0) {
        output.WriteRawTag(210, 13);
        output.WriteString(RicRoot);
      }
      exchange_.WriteTo(ref output, _repeated_exchange_codec);
      if (PricingSourceV7 != global::Spiderrock.Protobuf.PricingSource_V7.Unspecified) {
        output.WriteRawTag(192, 184, 2);
        output.WriteEnum((int) PricingSourceV7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (OsiRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OsiRoot);
      }
      if (ccode_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ccode);
      }
      if (uPrcDriverKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcDriverType);
      }
      if (uPrcDriverKey2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPrcDriverKey2);
      }
      if (UPrcDriverType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcDriverType2);
      }
      if (UPrcBoundCCode != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcBoundCCode);
      }
      if (ExpirationMap != global::Spiderrock.Protobuf.ExpirationMap.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpirationMap);
      }
      if (UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierMode);
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptionType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Multihedge);
      }
      if (ExerciseTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExerciseTime);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExerciseType);
      }
      if (TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeMetric);
      }
      if (PricingModel != global::Spiderrock.Protobuf.PricingModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PricingModel);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceQuoteType);
      }
      if (VolumeTier != global::Spiderrock.Protobuf.VolumeTier.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VolumeTier);
      }
      if (PositionLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PositionLimit);
      }
      if (Exchanges.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchanges);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (StrikeScale != 0D) {
        size += 2 + 8;
      }
      if (StrikeRatio != 0F) {
        size += 2 + 4;
      }
      if (CashOnExercise != 0F) {
        size += 2 + 4;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (PremiumMult != 0D) {
        size += 2 + 8;
      }
      if (AdjConvention != global::Spiderrock.Protobuf.AdjConvention.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AdjConvention);
      }
      if (OptPriceInc != global::Spiderrock.Protobuf.OptPriceInc.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptPriceInc);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StrikeCurr);
      }
      if (defaultSurfaceRoot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefaultSurfaceRoot);
      }
      if (RicRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RicRoot);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (PricingSourceV7 != global::Spiderrock.Protobuf.PricingSource_V7.Unspecified) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) PricingSourceV7);
      }
      size += exchange_.CalculateSize(_repeated_exchange_codec);
      size += underlying_.CalculateSize(_repeated_underlying_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RootDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.RootDefinition.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.OsiRoot.Length != 0) {
        OsiRoot = other.OsiRoot;
      }
      if (other.ccode_ != null) {
        if (ccode_ == null) {
          Ccode = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ccode.MergeFrom(other.Ccode);
      }
      if (other.uPrcDriverKey_ != null) {
        if (uPrcDriverKey_ == null) {
          UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UPrcDriverKey.MergeFrom(other.UPrcDriverKey);
      }
      if (other.UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UPrcDriverType = other.UPrcDriverType;
      }
      if (other.uPrcDriverKey2_ != null) {
        if (uPrcDriverKey2_ == null) {
          UPrcDriverKey2 = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UPrcDriverKey2.MergeFrom(other.UPrcDriverKey2);
      }
      if (other.UPrcDriverType2 != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UPrcDriverType2 = other.UPrcDriverType2;
      }
      if (other.UPrcBoundCCode != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UPrcBoundCCode = other.UPrcBoundCCode;
      }
      if (other.ExpirationMap != global::Spiderrock.Protobuf.ExpirationMap.Unspecified) {
        ExpirationMap = other.ExpirationMap;
      }
      if (other.UnderlierMode != global::Spiderrock.Protobuf.UnderlierMode.Unspecified) {
        UnderlierMode = other.UnderlierMode;
      }
      if (other.OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        OptionType = other.OptionType;
      }
      if (other.Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        Multihedge = other.Multihedge;
      }
      if (other.ExerciseTime != global::Spiderrock.Protobuf.ExerciseTime.Unspecified) {
        ExerciseTime = other.ExerciseTime;
      }
      if (other.ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExerciseType = other.ExerciseType;
      }
      if (other.TimeMetric != global::Spiderrock.Protobuf.TimeMetric.Unspecified) {
        TimeMetric = other.TimeMetric;
      }
      if (other.PricingModel != global::Spiderrock.Protobuf.PricingModel.Unspecified) {
        PricingModel = other.PricingModel;
      }
      if (other.MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        MoneynessType = other.MoneynessType;
      }
      if (other.PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        PriceQuoteType = other.PriceQuoteType;
      }
      if (other.VolumeTier != global::Spiderrock.Protobuf.VolumeTier.Unspecified) {
        VolumeTier = other.VolumeTier;
      }
      if (other.PositionLimit != 0) {
        PositionLimit = other.PositionLimit;
      }
      if (other.Exchanges.Length != 0) {
        Exchanges = other.Exchanges;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.StrikeScale != 0D) {
        StrikeScale = other.StrikeScale;
      }
      if (other.StrikeRatio != 0F) {
        StrikeRatio = other.StrikeRatio;
      }
      if (other.CashOnExercise != 0F) {
        CashOnExercise = other.CashOnExercise;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.PremiumMult != 0D) {
        PremiumMult = other.PremiumMult;
      }
      if (other.AdjConvention != global::Spiderrock.Protobuf.AdjConvention.Unspecified) {
        AdjConvention = other.AdjConvention;
      }
      if (other.OptPriceInc != global::Spiderrock.Protobuf.OptPriceInc.Unspecified) {
        OptPriceInc = other.OptPriceInc;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        TradeCurr = other.TradeCurr;
      }
      if (other.SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        SettleCurr = other.SettleCurr;
      }
      if (other.StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        StrikeCurr = other.StrikeCurr;
      }
      if (other.defaultSurfaceRoot_ != null) {
        if (defaultSurfaceRoot_ == null) {
          DefaultSurfaceRoot = new global::Spiderrock.Protobuf.TickerKey();
        }
        DefaultSurfaceRoot.MergeFrom(other.DefaultSurfaceRoot);
      }
      if (other.RicRoot.Length != 0) {
        RicRoot = other.RicRoot;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.PricingSourceV7 != global::Spiderrock.Protobuf.PricingSource_V7.Unspecified) {
        PricingSourceV7 = other.PricingSourceV7;
      }
      exchange_.Add(other.exchange_);
      underlying_.Add(other.underlying_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RootDefinition.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            OsiRoot = input.ReadString();
            break;
          }
          case 850: {
            if (ccode_ == null) {
              Ccode = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ccode);
            break;
          }
          case 874: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 896: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 922: {
            if (uPrcDriverKey2_ == null) {
              UPrcDriverKey2 = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey2);
            break;
          }
          case 944: {
            UPrcDriverType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 968: {
            UPrcBoundCCode = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 992: {
            ExpirationMap = (global::Spiderrock.Protobuf.ExpirationMap) input.ReadEnum();
            break;
          }
          case 1016: {
            UnderlierMode = (global::Spiderrock.Protobuf.UnderlierMode) input.ReadEnum();
            break;
          }
          case 1040: {
            OptionType = (global::Spiderrock.Protobuf.OptionType) input.ReadEnum();
            break;
          }
          case 1064: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 1088: {
            ExerciseTime = (global::Spiderrock.Protobuf.ExerciseTime) input.ReadEnum();
            break;
          }
          case 1112: {
            ExerciseType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1136: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 1160: {
            PricingModel = (global::Spiderrock.Protobuf.PricingModel) input.ReadEnum();
            break;
          }
          case 1184: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1232: {
            VolumeTier = (global::Spiderrock.Protobuf.VolumeTier) input.ReadEnum();
            break;
          }
          case 1256: {
            PositionLimit = input.ReadInt32();
            break;
          }
          case 1282: {
            Exchanges = input.ReadString();
            break;
          }
          case 1309: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1333: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1352: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1377: {
            StrikeScale = input.ReadDouble();
            break;
          }
          case 1405: {
            StrikeRatio = input.ReadFloat();
            break;
          }
          case 1429: {
            CashOnExercise = input.ReadFloat();
            break;
          }
          case 1448: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1473: {
            PremiumMult = input.ReadDouble();
            break;
          }
          case 1496: {
            AdjConvention = (global::Spiderrock.Protobuf.AdjConvention) input.ReadEnum();
            break;
          }
          case 1520: {
            OptPriceInc = (global::Spiderrock.Protobuf.OptPriceInc) input.ReadEnum();
            break;
          }
          case 1544: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1568: {
            TradeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1592: {
            SettleCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1616: {
            StrikeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1642: {
            if (defaultSurfaceRoot_ == null) {
              DefaultSurfaceRoot = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(DefaultSurfaceRoot);
            break;
          }
          case 1666: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1690: {
            underlying_.AddEntriesFrom(input, _repeated_underlying_codec);
            break;
          }
          case 1746: {
            RicRoot = input.ReadString();
            break;
          }
          case 1762: {
            exchange_.AddEntriesFrom(input, _repeated_exchange_codec);
            break;
          }
          case 40000: {
            PricingSourceV7 = (global::Spiderrock.Protobuf.PricingSource_V7) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RootDefinition.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            OsiRoot = input.ReadString();
            break;
          }
          case 850: {
            if (ccode_ == null) {
              Ccode = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ccode);
            break;
          }
          case 874: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 896: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 922: {
            if (uPrcDriverKey2_ == null) {
              UPrcDriverKey2 = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey2);
            break;
          }
          case 944: {
            UPrcDriverType2 = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 968: {
            UPrcBoundCCode = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 992: {
            ExpirationMap = (global::Spiderrock.Protobuf.ExpirationMap) input.ReadEnum();
            break;
          }
          case 1016: {
            UnderlierMode = (global::Spiderrock.Protobuf.UnderlierMode) input.ReadEnum();
            break;
          }
          case 1040: {
            OptionType = (global::Spiderrock.Protobuf.OptionType) input.ReadEnum();
            break;
          }
          case 1064: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 1088: {
            ExerciseTime = (global::Spiderrock.Protobuf.ExerciseTime) input.ReadEnum();
            break;
          }
          case 1112: {
            ExerciseType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1136: {
            TimeMetric = (global::Spiderrock.Protobuf.TimeMetric) input.ReadEnum();
            break;
          }
          case 1160: {
            PricingModel = (global::Spiderrock.Protobuf.PricingModel) input.ReadEnum();
            break;
          }
          case 1184: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1232: {
            VolumeTier = (global::Spiderrock.Protobuf.VolumeTier) input.ReadEnum();
            break;
          }
          case 1256: {
            PositionLimit = input.ReadInt32();
            break;
          }
          case 1282: {
            Exchanges = input.ReadString();
            break;
          }
          case 1309: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1333: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1352: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1377: {
            StrikeScale = input.ReadDouble();
            break;
          }
          case 1405: {
            StrikeRatio = input.ReadFloat();
            break;
          }
          case 1429: {
            CashOnExercise = input.ReadFloat();
            break;
          }
          case 1448: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1473: {
            PremiumMult = input.ReadDouble();
            break;
          }
          case 1496: {
            AdjConvention = (global::Spiderrock.Protobuf.AdjConvention) input.ReadEnum();
            break;
          }
          case 1520: {
            OptPriceInc = (global::Spiderrock.Protobuf.OptPriceInc) input.ReadEnum();
            break;
          }
          case 1544: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1568: {
            TradeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1592: {
            SettleCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1616: {
            StrikeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1642: {
            if (defaultSurfaceRoot_ == null) {
              DefaultSurfaceRoot = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(DefaultSurfaceRoot);
            break;
          }
          case 1666: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1690: {
            underlying_.AddEntriesFrom(ref input, _repeated_underlying_codec);
            break;
          }
          case 1746: {
            RicRoot = input.ReadString();
            break;
          }
          case 1762: {
            exchange_.AddEntriesFrom(ref input, _repeated_exchange_codec);
            break;
          }
          case 40000: {
            PricingSourceV7 = (global::Spiderrock.Protobuf.PricingSource_V7) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RootDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RootDefinition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          root_ = other.root_ != null ? other.root_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "root" field.</summary>
        public const int RootFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey root_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Root {
          get { return root_; }
          set {
            root_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Root, other.Root)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (root_ != null) hash ^= Root.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (root_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Root);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (root_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Root);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (root_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.root_ != null) {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            Root.MergeFrom(other.Root);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (root_ == null) {
                  Root = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Root);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (root_ == null) {
                  Root = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Root);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Exchange : pb::IMessage<Exchange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Exchange> _parser = new pb::MessageParser<Exchange>(() => new Exchange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Exchange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RootDefinition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Exchange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Exchange(Exchange other) : this() {
          optExch_ = other.optExch_;
          nativeRoot_ = other.nativeRoot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Exchange Clone() {
          return new Exchange(this);
        }

        /// <summary>Field number for the "opt_exch" field.</summary>
        public const int OptExchFieldNumber = 223;
        private global::Spiderrock.Protobuf.OptExch optExch_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptExch OptExch {
          get { return optExch_; }
          set {
            optExch_ = value;
          }
        }

        /// <summary>Field number for the "native_root" field.</summary>
        public const int NativeRootFieldNumber = 226;
        private string nativeRoot_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string NativeRoot {
          get { return nativeRoot_; }
          set {
            nativeRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Exchange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Exchange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OptExch != other.OptExch) return false;
          if (NativeRoot != other.NativeRoot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (OptExch != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= OptExch.GetHashCode();
          if (NativeRoot.Length != 0) hash ^= NativeRoot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (OptExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(248, 13);
            output.WriteEnum((int) OptExch);
          }
          if (NativeRoot.Length != 0) {
            output.WriteRawTag(146, 14);
            output.WriteString(NativeRoot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (OptExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(248, 13);
            output.WriteEnum((int) OptExch);
          }
          if (NativeRoot.Length != 0) {
            output.WriteRawTag(146, 14);
            output.WriteString(NativeRoot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (OptExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptExch);
          }
          if (NativeRoot.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(NativeRoot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Exchange other) {
          if (other == null) {
            return;
          }
          if (other.OptExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            OptExch = other.OptExch;
          }
          if (other.NativeRoot.Length != 0) {
            NativeRoot = other.NativeRoot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1784: {
                OptExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 1810: {
                NativeRoot = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1784: {
                OptExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 1810: {
                NativeRoot = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Underlying : pb::IMessage<Underlying>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Underlying> _parser = new pb::MessageParser<Underlying>(() => new Underlying());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Underlying> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RootDefinition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Underlying() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Underlying(Underlying other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          spc_ = other.spc_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Underlying Clone() {
          return new Underlying(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 214;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "spc" field.</summary>
        public const int SpcFieldNumber = 217;
        private float spc_;
        /// <summary>
        /// note: _root basket = sum(spc * ticker) / 100
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Spc {
          get { return spc_; }
          set {
            spc_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Underlying);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Underlying other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Spc, other.Spc)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (Spc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Spc);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(178, 13);
            output.WriteMessage(Ticker);
          }
          if (Spc != 0F) {
            output.WriteRawTag(205, 13);
            output.WriteFloat(Spc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(178, 13);
            output.WriteMessage(Ticker);
          }
          if (Spc != 0F) {
            output.WriteRawTag(205, 13);
            output.WriteFloat(Spc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (Spc != 0F) {
            size += 2 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Underlying other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.Spc != 0F) {
            Spc = other.Spc;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1714: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 1741: {
                Spc = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1714: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 1741: {
                Spc = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
