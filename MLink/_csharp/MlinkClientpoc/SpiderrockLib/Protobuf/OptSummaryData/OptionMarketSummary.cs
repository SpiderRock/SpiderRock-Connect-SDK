// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptSummaryData/OptionMarketSummary.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptSummaryData/OptionMarketSummary.proto</summary>
  public static partial class OptionMarketSummaryReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptSummaryData/OptionMarketSummary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionMarketSummaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFQcm90b2J1Zi9PcHRTdW1tYXJ5RGF0YS9PcHRpb25NYXJrZXRTdW1tYXJ5",
            "LnByb3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1v",
            "bi5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLmBQoT",
            "T3B0aW9uTWFya2V0U3VtbWFyeRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTWVzc2FnZU1ldGFkYXRhEjsKBHBrZXkYAiABKAsyLS5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbk1hcmtldFN1bW1hcnkuUEtleRIR",
            "CglvcG5fcHJpY2UYZCABKAESFgoOb3BuX3ZvbGF0aWxpdHkYZyABKAESEQoJ",
            "Y2xzX3ByaWNlGGogASgBEhYKDmNsc192b2xhdGlsaXR5GG0gASgBEhMKC21p",
            "bl9wcnRfcHJjGHAgASgBEhMKC21pbl9wcnRfdm9sGHMgASgBEhMKC21heF9w",
            "cnRfcHJjGHYgASgBEhMKC21heF9wcnRfdm9sGHkgASgBEhUKDW9wZW5faW50",
            "ZXJlc3QYfCABKAUSEQoJYmlkX2NvdW50GH8gASgFEhMKCmJpZF92b2x1bWUY",
            "ggEgASgFEhIKCWFza19jb3VudBiFASABKAUSEwoKYXNrX3ZvbHVtZRiIASAB",
            "KAUSEgoJbWlkX2NvdW50GIsBIAEoBRITCgptaWRfdm9sdW1lGI4BIAEoBRIS",
            "CglwcnRfY291bnQYkQEgASgFEhcKDmxhc3RfcHJ0X3ByaWNlGJQBIAEoARIc",
            "ChNsYXN0X3BydF92b2xhdGlsaXR5GJcBIAEoAhISCglhdmdfd2lkdGgYmgEg",
            "ASgBEhUKDGF2Z19iaWRfc2l6ZRidASABKAISFQoMYXZnX2Fza19zaXplGKAB",
            "IAEoAhIvCgpsYXN0X3ByaW50GKMBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASLgoJdGltZXN0YW1wGKYBIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXAaNAoEUEtleRIsCgRva2V5GAogASgLMh4uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5PcHRpb25LZXliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionMarketSummary), global::Spiderrock.Protobuf.OptionMarketSummary.Parser, new[]{ "Meta", "Pkey", "OpnPrice", "OpnVolatility", "ClsPrice", "ClsVolatility", "MinPrtPrc", "MinPrtVol", "MaxPrtPrc", "MaxPrtVol", "OpenInterest", "BidCount", "BidVolume", "AskCount", "AskVolume", "MidCount", "MidVolume", "PrtCount", "LastPrtPrice", "LastPrtVolatility", "AvgWidth", "AvgBidSize", "AvgAskSize", "LastPrint", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey), global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey.Parser, new[]{ "Okey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///These records represent live market summary snapshots for each active option
  /// </summary>
  public sealed partial class OptionMarketSummary : pb::IMessage<OptionMarketSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionMarketSummary> _parser = new pb::MessageParser<OptionMarketSummary>(() => new OptionMarketSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionMarketSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.OptionMarketSummaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMarketSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMarketSummary(OptionMarketSummary other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      opnPrice_ = other.opnPrice_;
      opnVolatility_ = other.opnVolatility_;
      clsPrice_ = other.clsPrice_;
      clsVolatility_ = other.clsVolatility_;
      minPrtPrc_ = other.minPrtPrc_;
      minPrtVol_ = other.minPrtVol_;
      maxPrtPrc_ = other.maxPrtPrc_;
      maxPrtVol_ = other.maxPrtVol_;
      openInterest_ = other.openInterest_;
      bidCount_ = other.bidCount_;
      bidVolume_ = other.bidVolume_;
      askCount_ = other.askCount_;
      askVolume_ = other.askVolume_;
      midCount_ = other.midCount_;
      midVolume_ = other.midVolume_;
      prtCount_ = other.prtCount_;
      lastPrtPrice_ = other.lastPrtPrice_;
      lastPrtVolatility_ = other.lastPrtVolatility_;
      avgWidth_ = other.avgWidth_;
      avgBidSize_ = other.avgBidSize_;
      avgAskSize_ = other.avgAskSize_;
      lastPrint_ = other.lastPrint_ != null ? other.lastPrint_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMarketSummary Clone() {
      return new OptionMarketSummary(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "opn_price" field.</summary>
    public const int OpnPriceFieldNumber = 100;
    private double opnPrice_;
    /// <summary>
    /// start of day (SR) open mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnPrice {
      get { return opnPrice_; }
      set {
        opnPrice_ = value;
      }
    }

    /// <summary>Field number for the "opn_volatility" field.</summary>
    public const int OpnVolatilityFieldNumber = 103;
    private double opnVolatility_;
    /// <summary>
    /// start of day (SR) open mark (volatility)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpnVolatility {
      get { return opnVolatility_; }
      set {
        opnVolatility_ = value;
      }
    }

    /// <summary>Field number for the "cls_price" field.</summary>
    public const int ClsPriceFieldNumber = 106;
    private double clsPrice_;
    /// <summary>
    /// end of day (SR) close mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsPrice {
      get { return clsPrice_; }
      set {
        clsPrice_ = value;
      }
    }

    /// <summary>Field number for the "cls_volatility" field.</summary>
    public const int ClsVolatilityFieldNumber = 109;
    private double clsVolatility_;
    /// <summary>
    /// end of day (SR) close mark (volatility)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ClsVolatility {
      get { return clsVolatility_; }
      set {
        clsVolatility_ = value;
      }
    }

    /// <summary>Field number for the "min_prt_prc" field.</summary>
    public const int MinPrtPrcFieldNumber = 112;
    private double minPrtPrc_;
    /// <summary>
    /// minimum print price within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinPrtPrc {
      get { return minPrtPrc_; }
      set {
        minPrtPrc_ = value;
      }
    }

    /// <summary>Field number for the "min_prt_vol" field.</summary>
    public const int MinPrtVolFieldNumber = 115;
    private double minPrtVol_;
    /// <summary>
    /// minimum print volatility within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinPrtVol {
      get { return minPrtVol_; }
      set {
        minPrtVol_ = value;
      }
    }

    /// <summary>Field number for the "max_prt_prc" field.</summary>
    public const int MaxPrtPrcFieldNumber = 118;
    private double maxPrtPrc_;
    /// <summary>
    /// maximum print price within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxPrtPrc {
      get { return maxPrtPrc_; }
      set {
        maxPrtPrc_ = value;
      }
    }

    /// <summary>Field number for the "max_prt_vol" field.</summary>
    public const int MaxPrtVolFieldNumber = 121;
    private double maxPrtVol_;
    /// <summary>
    /// maximum print volatility within market hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxPrtVol {
      get { return maxPrtVol_; }
      set {
        maxPrtVol_ = value;
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 124;
    private int openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "bid_count" field.</summary>
    public const int BidCountFieldNumber = 127;
    private int bidCount_;
    /// <summary>
    /// num prints &lt;= SR surface mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidCount {
      get { return bidCount_; }
      set {
        bidCount_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume" field.</summary>
    public const int BidVolumeFieldNumber = 130;
    private int bidVolume_;
    /// <summary>
    /// volume when prtPrice &lt;= quote.bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "ask_count" field.</summary>
    public const int AskCountFieldNumber = 133;
    private int askCount_;
    /// <summary>
    /// num prints >= SR surface mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskCount {
      get { return askCount_; }
      set {
        askCount_ = value;
      }
    }

    /// <summary>Field number for the "ask_volume" field.</summary>
    public const int AskVolumeFieldNumber = 136;
    private int askVolume_;
    /// <summary>
    /// volume when prtPrice >= quote.ask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "mid_count" field.</summary>
    public const int MidCountFieldNumber = 139;
    private int midCount_;
    /// <summary>
    /// num prints inside quote.ebid / quote.eask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MidCount {
      get { return midCount_; }
      set {
        midCount_ = value;
      }
    }

    /// <summary>Field number for the "mid_volume" field.</summary>
    public const int MidVolumeFieldNumber = 142;
    private int midVolume_;
    /// <summary>
    /// volume inside quote.ebid / quote.eask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MidVolume {
      get { return midVolume_; }
      set {
        midVolume_ = value;
      }
    }

    /// <summary>Field number for the "prt_count" field.</summary>
    public const int PrtCountFieldNumber = 145;
    private int prtCount_;
    /// <summary>
    /// number of distinct print reports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtCount {
      get { return prtCount_; }
      set {
        prtCount_ = value;
      }
    }

    /// <summary>Field number for the "last_prt_price" field.</summary>
    public const int LastPrtPriceFieldNumber = 148;
    private double lastPrtPrice_;
    /// <summary>
    /// last print price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LastPrtPrice {
      get { return lastPrtPrice_; }
      set {
        lastPrtPrice_ = value;
      }
    }

    /// <summary>Field number for the "last_prt_volatility" field.</summary>
    public const int LastPrtVolatilityFieldNumber = 151;
    private float lastPrtVolatility_;
    /// <summary>
    /// last print volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LastPrtVolatility {
      get { return lastPrtVolatility_; }
      set {
        lastPrtVolatility_ = value;
      }
    }

    /// <summary>Field number for the "avg_width" field.</summary>
    public const int AvgWidthFieldNumber = 154;
    private double avgWidth_;
    /// <summary>
    /// average market width (time weighted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgWidth {
      get { return avgWidth_; }
      set {
        avgWidth_ = value;
      }
    }

    /// <summary>Field number for the "avg_bid_size" field.</summary>
    public const int AvgBidSizeFieldNumber = 157;
    private float avgBidSize_;
    /// <summary>
    /// average bid size (time weighted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgBidSize {
      get { return avgBidSize_; }
      set {
        avgBidSize_ = value;
      }
    }

    /// <summary>Field number for the "avg_ask_size" field.</summary>
    public const int AvgAskSizeFieldNumber = 160;
    private float avgAskSize_;
    /// <summary>
    /// average ask size (time weighted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgAskSize {
      get { return avgAskSize_; }
      set {
        avgAskSize_ = value;
      }
    }

    /// <summary>Field number for the "last_print" field.</summary>
    public const int LastPrintFieldNumber = 163;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastPrint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastPrint {
      get { return lastPrint_; }
      set {
        lastPrint_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 166;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionMarketSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionMarketSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnPrice, other.OpnPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpnVolatility, other.OpnVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsPrice, other.ClsPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClsVolatility, other.ClsVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinPrtPrc, other.MinPrtPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinPrtVol, other.MinPrtVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxPrtPrc, other.MaxPrtPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxPrtVol, other.MaxPrtVol)) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (BidCount != other.BidCount) return false;
      if (BidVolume != other.BidVolume) return false;
      if (AskCount != other.AskCount) return false;
      if (AskVolume != other.AskVolume) return false;
      if (MidCount != other.MidCount) return false;
      if (MidVolume != other.MidVolume) return false;
      if (PrtCount != other.PrtCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastPrtPrice, other.LastPrtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LastPrtVolatility, other.LastPrtVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgWidth, other.AvgWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgBidSize, other.AvgBidSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgAskSize, other.AvgAskSize)) return false;
      if (!object.Equals(LastPrint, other.LastPrint)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (OpnPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnPrice);
      if (OpnVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpnVolatility);
      if (ClsPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsPrice);
      if (ClsVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClsVolatility);
      if (MinPrtPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinPrtPrc);
      if (MinPrtVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinPrtVol);
      if (MaxPrtPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxPrtPrc);
      if (MaxPrtVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxPrtVol);
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (BidCount != 0) hash ^= BidCount.GetHashCode();
      if (BidVolume != 0) hash ^= BidVolume.GetHashCode();
      if (AskCount != 0) hash ^= AskCount.GetHashCode();
      if (AskVolume != 0) hash ^= AskVolume.GetHashCode();
      if (MidCount != 0) hash ^= MidCount.GetHashCode();
      if (MidVolume != 0) hash ^= MidVolume.GetHashCode();
      if (PrtCount != 0) hash ^= PrtCount.GetHashCode();
      if (LastPrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastPrtPrice);
      if (LastPrtVolatility != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LastPrtVolatility);
      if (AvgWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgWidth);
      if (AvgBidSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgBidSize);
      if (AvgAskSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgAskSize);
      if (lastPrint_ != null) hash ^= LastPrint.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (OpnPrice != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(OpnPrice);
      }
      if (OpnVolatility != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(OpnVolatility);
      }
      if (ClsPrice != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(ClsPrice);
      }
      if (ClsVolatility != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(ClsVolatility);
      }
      if (MinPrtPrc != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MinPrtPrc);
      }
      if (MinPrtVol != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(MinPrtVol);
      }
      if (MaxPrtPrc != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(MaxPrtPrc);
      }
      if (MaxPrtVol != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(MaxPrtVol);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(OpenInterest);
      }
      if (BidCount != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(BidCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(BidVolume);
      }
      if (AskCount != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(AskCount);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AskVolume);
      }
      if (MidCount != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(MidCount);
      }
      if (MidVolume != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(MidVolume);
      }
      if (PrtCount != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(PrtCount);
      }
      if (LastPrtPrice != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(LastPrtPrice);
      }
      if (LastPrtVolatility != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(LastPrtVolatility);
      }
      if (AvgWidth != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(AvgWidth);
      }
      if (AvgBidSize != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AvgBidSize);
      }
      if (AvgAskSize != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AvgAskSize);
      }
      if (lastPrint_ != null) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(LastPrint);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (OpnPrice != 0D) {
        output.WriteRawTag(161, 6);
        output.WriteDouble(OpnPrice);
      }
      if (OpnVolatility != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(OpnVolatility);
      }
      if (ClsPrice != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(ClsPrice);
      }
      if (ClsVolatility != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(ClsVolatility);
      }
      if (MinPrtPrc != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(MinPrtPrc);
      }
      if (MinPrtVol != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(MinPrtVol);
      }
      if (MaxPrtPrc != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(MaxPrtPrc);
      }
      if (MaxPrtVol != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(MaxPrtVol);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(OpenInterest);
      }
      if (BidCount != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(BidCount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(BidVolume);
      }
      if (AskCount != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(AskCount);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AskVolume);
      }
      if (MidCount != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(MidCount);
      }
      if (MidVolume != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(MidVolume);
      }
      if (PrtCount != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(PrtCount);
      }
      if (LastPrtPrice != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(LastPrtPrice);
      }
      if (LastPrtVolatility != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(LastPrtVolatility);
      }
      if (AvgWidth != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(AvgWidth);
      }
      if (AvgBidSize != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(AvgBidSize);
      }
      if (AvgAskSize != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AvgAskSize);
      }
      if (lastPrint_ != null) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(LastPrint);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (OpnPrice != 0D) {
        size += 2 + 8;
      }
      if (OpnVolatility != 0D) {
        size += 2 + 8;
      }
      if (ClsPrice != 0D) {
        size += 2 + 8;
      }
      if (ClsVolatility != 0D) {
        size += 2 + 8;
      }
      if (MinPrtPrc != 0D) {
        size += 2 + 8;
      }
      if (MinPrtVol != 0D) {
        size += 2 + 8;
      }
      if (MaxPrtPrc != 0D) {
        size += 2 + 8;
      }
      if (MaxPrtVol != 0D) {
        size += 2 + 8;
      }
      if (OpenInterest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenInterest);
      }
      if (BidCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidCount);
      }
      if (BidVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidVolume);
      }
      if (AskCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskCount);
      }
      if (AskVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskVolume);
      }
      if (MidCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MidCount);
      }
      if (MidVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MidVolume);
      }
      if (PrtCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtCount);
      }
      if (LastPrtPrice != 0D) {
        size += 2 + 8;
      }
      if (LastPrtVolatility != 0F) {
        size += 2 + 4;
      }
      if (AvgWidth != 0D) {
        size += 2 + 8;
      }
      if (AvgBidSize != 0F) {
        size += 2 + 4;
      }
      if (AvgAskSize != 0F) {
        size += 2 + 4;
      }
      if (lastPrint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastPrint);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionMarketSummary other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.OpnPrice != 0D) {
        OpnPrice = other.OpnPrice;
      }
      if (other.OpnVolatility != 0D) {
        OpnVolatility = other.OpnVolatility;
      }
      if (other.ClsPrice != 0D) {
        ClsPrice = other.ClsPrice;
      }
      if (other.ClsVolatility != 0D) {
        ClsVolatility = other.ClsVolatility;
      }
      if (other.MinPrtPrc != 0D) {
        MinPrtPrc = other.MinPrtPrc;
      }
      if (other.MinPrtVol != 0D) {
        MinPrtVol = other.MinPrtVol;
      }
      if (other.MaxPrtPrc != 0D) {
        MaxPrtPrc = other.MaxPrtPrc;
      }
      if (other.MaxPrtVol != 0D) {
        MaxPrtVol = other.MaxPrtVol;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.BidCount != 0) {
        BidCount = other.BidCount;
      }
      if (other.BidVolume != 0) {
        BidVolume = other.BidVolume;
      }
      if (other.AskCount != 0) {
        AskCount = other.AskCount;
      }
      if (other.AskVolume != 0) {
        AskVolume = other.AskVolume;
      }
      if (other.MidCount != 0) {
        MidCount = other.MidCount;
      }
      if (other.MidVolume != 0) {
        MidVolume = other.MidVolume;
      }
      if (other.PrtCount != 0) {
        PrtCount = other.PrtCount;
      }
      if (other.LastPrtPrice != 0D) {
        LastPrtPrice = other.LastPrtPrice;
      }
      if (other.LastPrtVolatility != 0F) {
        LastPrtVolatility = other.LastPrtVolatility;
      }
      if (other.AvgWidth != 0D) {
        AvgWidth = other.AvgWidth;
      }
      if (other.AvgBidSize != 0F) {
        AvgBidSize = other.AvgBidSize;
      }
      if (other.AvgAskSize != 0F) {
        AvgAskSize = other.AvgAskSize;
      }
      if (other.lastPrint_ != null) {
        if (lastPrint_ == null) {
          LastPrint = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastPrint.MergeFrom(other.LastPrint);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            OpnPrice = input.ReadDouble();
            break;
          }
          case 825: {
            OpnVolatility = input.ReadDouble();
            break;
          }
          case 849: {
            ClsPrice = input.ReadDouble();
            break;
          }
          case 873: {
            ClsVolatility = input.ReadDouble();
            break;
          }
          case 897: {
            MinPrtPrc = input.ReadDouble();
            break;
          }
          case 921: {
            MinPrtVol = input.ReadDouble();
            break;
          }
          case 945: {
            MaxPrtPrc = input.ReadDouble();
            break;
          }
          case 969: {
            MaxPrtVol = input.ReadDouble();
            break;
          }
          case 992: {
            OpenInterest = input.ReadInt32();
            break;
          }
          case 1016: {
            BidCount = input.ReadInt32();
            break;
          }
          case 1040: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 1064: {
            AskCount = input.ReadInt32();
            break;
          }
          case 1088: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1112: {
            MidCount = input.ReadInt32();
            break;
          }
          case 1136: {
            MidVolume = input.ReadInt32();
            break;
          }
          case 1160: {
            PrtCount = input.ReadInt32();
            break;
          }
          case 1185: {
            LastPrtPrice = input.ReadDouble();
            break;
          }
          case 1213: {
            LastPrtVolatility = input.ReadFloat();
            break;
          }
          case 1233: {
            AvgWidth = input.ReadDouble();
            break;
          }
          case 1261: {
            AvgBidSize = input.ReadFloat();
            break;
          }
          case 1285: {
            AvgAskSize = input.ReadFloat();
            break;
          }
          case 1306: {
            if (lastPrint_ == null) {
              LastPrint = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPrint);
            break;
          }
          case 1330: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionMarketSummary.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 801: {
            OpnPrice = input.ReadDouble();
            break;
          }
          case 825: {
            OpnVolatility = input.ReadDouble();
            break;
          }
          case 849: {
            ClsPrice = input.ReadDouble();
            break;
          }
          case 873: {
            ClsVolatility = input.ReadDouble();
            break;
          }
          case 897: {
            MinPrtPrc = input.ReadDouble();
            break;
          }
          case 921: {
            MinPrtVol = input.ReadDouble();
            break;
          }
          case 945: {
            MaxPrtPrc = input.ReadDouble();
            break;
          }
          case 969: {
            MaxPrtVol = input.ReadDouble();
            break;
          }
          case 992: {
            OpenInterest = input.ReadInt32();
            break;
          }
          case 1016: {
            BidCount = input.ReadInt32();
            break;
          }
          case 1040: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 1064: {
            AskCount = input.ReadInt32();
            break;
          }
          case 1088: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 1112: {
            MidCount = input.ReadInt32();
            break;
          }
          case 1136: {
            MidVolume = input.ReadInt32();
            break;
          }
          case 1160: {
            PrtCount = input.ReadInt32();
            break;
          }
          case 1185: {
            LastPrtPrice = input.ReadDouble();
            break;
          }
          case 1213: {
            LastPrtVolatility = input.ReadFloat();
            break;
          }
          case 1233: {
            AvgWidth = input.ReadDouble();
            break;
          }
          case 1261: {
            AvgBidSize = input.ReadFloat();
            break;
          }
          case 1285: {
            AvgAskSize = input.ReadFloat();
            break;
          }
          case 1306: {
            if (lastPrint_ == null) {
              LastPrint = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPrint);
            break;
          }
          case 1330: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OptionMarketSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.OptionMarketSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
