// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientLive/RFQQuoteBroadcast.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientLive/RFQQuoteBroadcast.proto</summary>
  public static partial class RFQQuoteBroadcastReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientLive/RFQQuoteBroadcast.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RFQQuoteBroadcastReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9DbGllbnRMaXZlL1JGUVF1b3RlQnJvYWRjYXN0LnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "byLKDwoRUkZRUXVvdGVCcm9hZGNhc3QSMwoFX21ldGEYASABKAsyJC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgL",
            "Misuc3BpZGVycm9jay5wcm90b2J1Zi5SRlFRdW90ZUJyb2FkY2FzdC5QS2V5",
            "Ei4KBnRpY2tlchhkIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2Vy",
            "S2V5EhUKDXNlY3VyaXR5X2Rlc2MYZyABKAkSNgoKcmZxX3NvdXJjZRhqIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuUkZRU291cmNlVHlwZRI5CgxyZnFf",
            "c3RyYXRlZ3kYbSABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlNwcmVhZFN0",
            "cmF0ZWd5EjcKE2lzX2NvdmVyZWRfc3RyYXRlZ3kYcCABKA4yGi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlllc05vEjAKDGlzX3RyYWRlYWJsZRhzIAEoDjIaLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuWWVzTm8SFQoNcmZxX2JpZF9wcmljZRh2IAEo",
            "ARIUCgxyZnFfYmlkX3F1YW4YeSABKAUSFQoNcmZxX2Fza19wcmljZRh8IAEo",
            "ARIUCgxyZnFfYXNrX3F1YW4YfyABKAUSFgoNcmZxX3BydF9wcmljZRiCASAB",
            "KAESFQoMcmZxX3BydF9zaXplGIUBIAEoBRIXCg5yZnFfcHJ0X3ZvbHVtZRiI",
            "ASABKAUSFQoMcmZxX3BydF90aW1lGIsBIAEoAxISCgliaWRfcHJpY2UYjgEg",
            "ASgBEhEKCGJpZF9xdWFuGJEBIAEoBRISCglhc2tfcHJpY2UYlAEgASgBEhEK",
            "CGFza19xdWFuGJcBIAEoBRITCgpzdXJmX2RlbHRhGJoBIAEoAhISCglzdXJm",
            "X3ZlZ2EYnQEgASgCEhMKCnN1cmZfcHJpY2UYoAEgASgCEhMKCnRoZW9fcHJp",
            "Y2UYowEgASgCEhYKDXRoZW9fcHJpY2VfbG8YpgEgASgCEhYKDXRoZW9fcHJp",
            "Y2VfaGkYqQEgASgCEhEKCG1pbl91UHJjGKwBIAEoARIRCghtYXhfdVByYxiv",
            "ASABKAESEgoJbWluX3llYXJzGLIBIAEoAhISCgltYXhfeWVhcnMYtQEgASgC",
            "EjcKDWxlZ19zZWNfdHlwZXMYuAEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1",
            "Zi5MZWdTZWNUeXBlEhEKCGV4Y2hhbmdlGLsBIAEoCRIQCgdncnBfbnVtGL4B",
            "IAEoBRIPCgZzZWN0b3IYwQEgASgJEhMKCnJpc2tfY2xhc3MYxAEgASgJEjMK",
            "Cm9wdF9zdGF0dXMYxwEgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRT",
            "dGF0dXMSEQoIcG9zX3ZlZ2EYygEgASgCEhIKCXBvc19nYW1tYRjNASABKAIS",
            "EgoJcG9zX3RoZXRhGNABIAEoAhISCglwb3NfZGVsdGEY0wEgASgCEhYKDW5l",
            "dF90aW1lc3RhbXAY1gEgASgDEhIKCWZpbHRlcl9pZBjZASABKAMSEQoIbnVt",
            "X2xlZ3MY3AEgASgFEkUKCnF1b3RlX2xlZ3MY3wEgAygLMjAuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5SRlFRdW90ZUJyb2FkY2FzdC5RdW90ZUxlZ3MaUQoEUEtl",
            "eRITCgtzZWN1cml0eV9pRBgKIAEoAxI0CgtleGNoX3NvdXJjZRgLIAEoDjIf",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuRXhjaFNvdXJjZRrmBAoJUXVvdGVMZWdz",
            "EjAKB2xlZ19rZXkY4gEgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRp",
            "b25LZXkSNgoMbGVnX2tleV90eXBlGOUBIAEoDjIfLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTGVnS2V5VHlwZRIYCg9sZWdfc2VjdXJpdHlfaUQY6AEgASgDEhoK",
            "EWxlZ19wYXJlbnRfc2VjX2lEGOsBIAEoAxIaChFsZWdfc2VjdXJpdHlfZGVz",
            "YxjuASABKAkSEgoJbGVnX3JhdGlvGPEBIAEoDRIvCghsZWdfc2lkZRj0ASAB",
            "KA4yHC5zcGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGwSFgoNbGVnX2JpZF9w",
            "cmljZRj3ASABKAESFQoMbGVnX2JpZF9zaXplGPoBIAEoBRIWCg1sZWdfYXNr",
            "X3ByaWNlGP0BIAEoARIVCgxsZWdfYXNrX3NpemUYgAIgASgFEhIKCWxlZ195",
            "ZWFycxiDAiABKAISEQoIbGVnX3VQcmMYhgIgASgBEhUKDGxlZ19vcHRfbXVs",
            "dBiJAiABKAISFQoMbGVnX2Z1dF9tdWx0GIwCIAEoAhIVCgxsZWdfc3VyZl92",
            "b2wYjwIgASgCEhQKC2xlZ19zdXJmX2RlGJICIAEoAhIUCgtsZWdfc3VyZl92",
            "ZRiVAiABKAISFwoObGVnX3N1cmZfcHJpY2UYmAIgASgCEhcKDmxlZ190aGVv",
            "X3ByaWNlGJsCIAEoAhIXCg5sZWdfdGhlb19wcmNfYhieAiABKAISFwoObGVn",
            "X3RoZW9fcHJjX3MYoQIgASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RFQQuoteBroadcast), global::Spiderrock.Protobuf.RFQQuoteBroadcast.Parser, new[]{ "Meta", "Pkey", "Ticker", "SecurityDesc", "RfqSource", "RfqStrategy", "IsCoveredStrategy", "IsTradeable", "RfqBidPrice", "RfqBidQuan", "RfqAskPrice", "RfqAskQuan", "RfqPrtPrice", "RfqPrtSize", "RfqPrtVolume", "RfqPrtTime", "BidPrice", "BidQuan", "AskPrice", "AskQuan", "SurfDelta", "SurfVega", "SurfPrice", "TheoPrice", "TheoPriceLo", "TheoPriceHi", "MinUPrc", "MaxUPrc", "MinYears", "MaxYears", "LegSecTypes", "Exchange", "GrpNum", "Sector", "RiskClass", "OptStatus", "PosVega", "PosGamma", "PosTheta", "PosDelta", "NetTimestamp", "FilterId", "NumLegs", "QuoteLegs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey), global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey.Parser, new[]{ "SecurityID", "ExchSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs), global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs.Parser, new[]{ "LegKey", "LegKeyType", "LegSecurityID", "LegParentSecID", "LegSecurityDesc", "LegRatio", "LegSide", "LegBidPrice", "LegBidSize", "LegAskPrice", "LegAskSize", "LegYears", "LegUPrc", "LegOptMult", "LegFutMult", "LegSurfVol", "LegSurfDe", "LegSurfVe", "LegSurfPrice", "LegTheoPrice", "LegTheoPrcB", "LegTheoPrcS" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Live spread quotes with SpiderRock markup details for equity and future option spreads.  Legs details are included in a packed field.  This table contains the most recent market for each spread.
  /// </summary>
  public sealed partial class RFQQuoteBroadcast : pb::IMessage<RFQQuoteBroadcast>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RFQQuoteBroadcast> _parser = new pb::MessageParser<RFQQuoteBroadcast>(() => new RFQQuoteBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RFQQuoteBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.RFQQuoteBroadcastReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RFQQuoteBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RFQQuoteBroadcast(RFQQuoteBroadcast other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      securityDesc_ = other.securityDesc_;
      rfqSource_ = other.rfqSource_;
      rfqStrategy_ = other.rfqStrategy_;
      isCoveredStrategy_ = other.isCoveredStrategy_;
      isTradeable_ = other.isTradeable_;
      rfqBidPrice_ = other.rfqBidPrice_;
      rfqBidQuan_ = other.rfqBidQuan_;
      rfqAskPrice_ = other.rfqAskPrice_;
      rfqAskQuan_ = other.rfqAskQuan_;
      rfqPrtPrice_ = other.rfqPrtPrice_;
      rfqPrtSize_ = other.rfqPrtSize_;
      rfqPrtVolume_ = other.rfqPrtVolume_;
      rfqPrtTime_ = other.rfqPrtTime_;
      bidPrice_ = other.bidPrice_;
      bidQuan_ = other.bidQuan_;
      askPrice_ = other.askPrice_;
      askQuan_ = other.askQuan_;
      surfDelta_ = other.surfDelta_;
      surfVega_ = other.surfVega_;
      surfPrice_ = other.surfPrice_;
      theoPrice_ = other.theoPrice_;
      theoPriceLo_ = other.theoPriceLo_;
      theoPriceHi_ = other.theoPriceHi_;
      minUPrc_ = other.minUPrc_;
      maxUPrc_ = other.maxUPrc_;
      minYears_ = other.minYears_;
      maxYears_ = other.maxYears_;
      legSecTypes_ = other.legSecTypes_;
      exchange_ = other.exchange_;
      grpNum_ = other.grpNum_;
      sector_ = other.sector_;
      riskClass_ = other.riskClass_;
      optStatus_ = other.optStatus_;
      posVega_ = other.posVega_;
      posGamma_ = other.posGamma_;
      posTheta_ = other.posTheta_;
      posDelta_ = other.posDelta_;
      netTimestamp_ = other.netTimestamp_;
      filterId_ = other.filterId_;
      numLegs_ = other.numLegs_;
      quoteLegs_ = other.quoteLegs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RFQQuoteBroadcast Clone() {
      return new RFQQuoteBroadcast(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// first ticker in leg list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "security_desc" field.</summary>
    public const int SecurityDescFieldNumber = 103;
    private string securityDesc_ = "";
    /// <summary>
    /// SR constructed;blank on broadcast (filled by tool or SRSE proxy)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityDesc {
      get { return securityDesc_; }
      set {
        securityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rfq_source" field.</summary>
    public const int RfqSourceFieldNumber = 106;
    private global::Spiderrock.Protobuf.RFQSourceType rfqSource_ = global::Spiderrock.Protobuf.RFQSourceType.Any;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RFQSourceType RfqSource {
      get { return rfqSource_; }
      set {
        rfqSource_ = value;
      }
    }

    /// <summary>Field number for the "rfq_strategy" field.</summary>
    public const int RfqStrategyFieldNumber = 109;
    private global::Spiderrock.Protobuf.SpreadStrategy rfqStrategy_ = global::Spiderrock.Protobuf.SpreadStrategy.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadStrategy RfqStrategy {
      get { return rfqStrategy_; }
      set {
        rfqStrategy_ = value;
      }
    }

    /// <summary>Field number for the "is_covered_strategy" field.</summary>
    public const int IsCoveredStrategyFieldNumber = 112;
    private global::Spiderrock.Protobuf.YesNo isCoveredStrategy_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsCoveredStrategy {
      get { return isCoveredStrategy_; }
      set {
        isCoveredStrategy_ = value;
      }
    }

    /// <summary>Field number for the "is_tradeable" field.</summary>
    public const int IsTradeableFieldNumber = 115;
    private global::Spiderrock.Protobuf.YesNo isTradeable_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTradeable {
      get { return isTradeable_; }
      set {
        isTradeable_ = value;
      }
    }

    /// <summary>Field number for the "rfq_bid_price" field.</summary>
    public const int RfqBidPriceFieldNumber = 118;
    private double rfqBidPrice_;
    /// <summary>
    /// best bid (buy) price for this RFQ/Spread book
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RfqBidPrice {
      get { return rfqBidPrice_; }
      set {
        rfqBidPrice_ = value;
      }
    }

    /// <summary>Field number for the "rfq_bid_quan" field.</summary>
    public const int RfqBidQuanFieldNumber = 121;
    private int rfqBidQuan_;
    /// <summary>
    /// cumulative bid (buy) quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RfqBidQuan {
      get { return rfqBidQuan_; }
      set {
        rfqBidQuan_ = value;
      }
    }

    /// <summary>Field number for the "rfq_ask_price" field.</summary>
    public const int RfqAskPriceFieldNumber = 124;
    private double rfqAskPrice_;
    /// <summary>
    /// best ask (sell) price for this RFQ/Spread book
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RfqAskPrice {
      get { return rfqAskPrice_; }
      set {
        rfqAskPrice_ = value;
      }
    }

    /// <summary>Field number for the "rfq_ask_quan" field.</summary>
    public const int RfqAskQuanFieldNumber = 127;
    private int rfqAskQuan_;
    /// <summary>
    /// cumulative ask (sell) quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RfqAskQuan {
      get { return rfqAskQuan_; }
      set {
        rfqAskQuan_ = value;
      }
    }

    /// <summary>Field number for the "rfq_prt_price" field.</summary>
    public const int RfqPrtPriceFieldNumber = 130;
    private double rfqPrtPrice_;
    /// <summary>
    /// last print price for this RFQ/Spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RfqPrtPrice {
      get { return rfqPrtPrice_; }
      set {
        rfqPrtPrice_ = value;
      }
    }

    /// <summary>Field number for the "rfq_prt_size" field.</summary>
    public const int RfqPrtSizeFieldNumber = 133;
    private int rfqPrtSize_;
    /// <summary>
    /// last print size for this RFQ/Spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RfqPrtSize {
      get { return rfqPrtSize_; }
      set {
        rfqPrtSize_ = value;
      }
    }

    /// <summary>Field number for the "rfq_prt_volume" field.</summary>
    public const int RfqPrtVolumeFieldNumber = 136;
    private int rfqPrtVolume_;
    /// <summary>
    /// total print volume (for session) for this RFQ/Spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RfqPrtVolume {
      get { return rfqPrtVolume_; }
      set {
        rfqPrtVolume_ = value;
      }
    }

    /// <summary>Field number for the "rfq_prt_time" field.</summary>
    public const int RfqPrtTimeFieldNumber = 139;
    private long rfqPrtTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RfqPrtTime {
      get { return rfqPrtTime_; }
      set {
        rfqPrtTime_ = value;
      }
    }

    /// <summary>Field number for the "bid_price" field.</summary>
    public const int BidPriceFieldNumber = 142;
    private double bidPrice_;
    /// <summary>
    /// best bid (buy) price for this RFQ/Spread from individual legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "bid_quan" field.</summary>
    public const int BidQuanFieldNumber = 145;
    private int bidQuan_;
    /// <summary>
    /// minimum bid (buy) quantity from individual legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidQuan {
      get { return bidQuan_; }
      set {
        bidQuan_ = value;
      }
    }

    /// <summary>Field number for the "ask_price" field.</summary>
    public const int AskPriceFieldNumber = 148;
    private double askPrice_;
    /// <summary>
    /// best ask (sell) price for this RFQ/Spread from individual legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "ask_quan" field.</summary>
    public const int AskQuanFieldNumber = 151;
    private int askQuan_;
    /// <summary>
    /// minimum ask (sell) quantity from individual legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskQuan {
      get { return askQuan_; }
      set {
        askQuan_ = value;
      }
    }

    /// <summary>Field number for the "surf_delta" field.</summary>
    public const int SurfDeltaFieldNumber = 154;
    private float surfDelta_;
    /// <summary>
    /// delta of all legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfDelta {
      get { return surfDelta_; }
      set {
        surfDelta_ = value;
      }
    }

    /// <summary>Field number for the "surf_vega" field.</summary>
    public const int SurfVegaFieldNumber = 157;
    private float surfVega_;
    /// <summary>
    /// vega of all legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVega {
      get { return surfVega_; }
      set {
        surfVega_ = value;
      }
    }

    /// <summary>Field number for the "surf_price" field.</summary>
    public const int SurfPriceFieldNumber = 160;
    private float surfPrice_;
    /// <summary>
    /// surfPrice (SR mid-market) of all legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrice {
      get { return surfPrice_; }
      set {
        surfPrice_ = value;
      }
    }

    /// <summary>Field number for the "theo_price" field.</summary>
    public const int TheoPriceFieldNumber = 163;
    private float theoPrice_;
    /// <summary>
    /// theoPrice (if applicable) of all legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoPrice {
      get { return theoPrice_; }
      set {
        theoPrice_ = value;
      }
    }

    /// <summary>Field number for the "theo_price_lo" field.</summary>
    public const int TheoPriceLoFieldNumber = 166;
    private float theoPriceLo_;
    /// <summary>
    /// theoPrice (if applicable) of all legs (best way)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoPriceLo {
      get { return theoPriceLo_; }
      set {
        theoPriceLo_ = value;
      }
    }

    /// <summary>Field number for the "theo_price_hi" field.</summary>
    public const int TheoPriceHiFieldNumber = 169;
    private float theoPriceHi_;
    /// <summary>
    /// theoPrice (if applicable) of all legs (worst way)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoPriceHi {
      get { return theoPriceHi_; }
      set {
        theoPriceHi_ = value;
      }
    }

    /// <summary>Field number for the "min_uPrc" field.</summary>
    public const int MinUPrcFieldNumber = 172;
    private double minUPrc_;
    /// <summary>
    /// min uPrc of all option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinUPrc {
      get { return minUPrc_; }
      set {
        minUPrc_ = value;
      }
    }

    /// <summary>Field number for the "max_uPrc" field.</summary>
    public const int MaxUPrcFieldNumber = 175;
    private double maxUPrc_;
    /// <summary>
    /// max uPrc of all option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxUPrc {
      get { return maxUPrc_; }
      set {
        maxUPrc_ = value;
      }
    }

    /// <summary>Field number for the "min_years" field.</summary>
    public const int MinYearsFieldNumber = 178;
    private float minYears_;
    /// <summary>
    /// min years of all option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinYears {
      get { return minYears_; }
      set {
        minYears_ = value;
      }
    }

    /// <summary>Field number for the "max_years" field.</summary>
    public const int MaxYearsFieldNumber = 181;
    private float maxYears_;
    /// <summary>
    /// max years of all option legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxYears {
      get { return maxYears_; }
      set {
        maxYears_ = value;
      }
    }

    /// <summary>Field number for the "leg_sec_types" field.</summary>
    public const int LegSecTypesFieldNumber = 184;
    private global::Spiderrock.Protobuf.LegSecType legSecTypes_ = global::Spiderrock.Protobuf.LegSecType.Any;
    /// <summary>
    /// multi value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LegSecType LegSecTypes {
      get { return legSecTypes_; }
      set {
        legSecTypes_ = value;
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 187;
    private string exchange_ = "";
    /// <summary>
    /// comma separated list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 190;
    private int grpNum_;
    /// <summary>
    /// industry group number (equities only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 193;
    private string sector_ = "";
    /// <summary>
    /// user defined sector code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_class" field.</summary>
    public const int RiskClassFieldNumber = 196;
    private string riskClass_ = "";
    /// <summary>
    /// risk class letter code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskClass {
      get { return riskClass_; }
      set {
        riskClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opt_status" field.</summary>
    public const int OptStatusFieldNumber = 199;
    private global::Spiderrock.Protobuf.OptStatus optStatus_ = global::Spiderrock.Protobuf.OptStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptStatus OptStatus {
      get { return optStatus_; }
      set {
        optStatus_ = value;
      }
    }

    /// <summary>Field number for the "pos_vega" field.</summary>
    public const int PosVegaFieldNumber = 202;
    private float posVega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosVega {
      get { return posVega_; }
      set {
        posVega_ = value;
      }
    }

    /// <summary>Field number for the "pos_gamma" field.</summary>
    public const int PosGammaFieldNumber = 205;
    private float posGamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosGamma {
      get { return posGamma_; }
      set {
        posGamma_ = value;
      }
    }

    /// <summary>Field number for the "pos_theta" field.</summary>
    public const int PosThetaFieldNumber = 208;
    private float posTheta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTheta {
      get { return posTheta_; }
      set {
        posTheta_ = value;
      }
    }

    /// <summary>Field number for the "pos_delta" field.</summary>
    public const int PosDeltaFieldNumber = 211;
    private float posDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDelta {
      get { return posDelta_; }
      set {
        posDelta_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 214;
    private long netTimestamp_;
    /// <summary>
    /// PTP timestamp of most recent message update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "filter_id" field.</summary>
    public const int FilterIdFieldNumber = 217;
    private long filterId_;
    /// <summary>
    /// used by tool/toolServer session to multiplex filters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FilterId {
      get { return filterId_; }
      set {
        filterId_ = value;
      }
    }

    /// <summary>Field number for the "num_legs" field.</summary>
    public const int NumLegsFieldNumber = 220;
    private int numLegs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumLegs {
      get { return numLegs_; }
      set {
        numLegs_ = value;
      }
    }

    /// <summary>Field number for the "quote_legs" field.</summary>
    public const int QuoteLegsFieldNumber = 223;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs> _repeated_quoteLegs_codec
        = pb::FieldCodec.ForMessage(1786, global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs> quoteLegs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.QuoteLegs> QuoteLegs {
      get { return quoteLegs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RFQQuoteBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RFQQuoteBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SecurityDesc != other.SecurityDesc) return false;
      if (RfqSource != other.RfqSource) return false;
      if (RfqStrategy != other.RfqStrategy) return false;
      if (IsCoveredStrategy != other.IsCoveredStrategy) return false;
      if (IsTradeable != other.IsTradeable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RfqBidPrice, other.RfqBidPrice)) return false;
      if (RfqBidQuan != other.RfqBidQuan) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RfqAskPrice, other.RfqAskPrice)) return false;
      if (RfqAskQuan != other.RfqAskQuan) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RfqPrtPrice, other.RfqPrtPrice)) return false;
      if (RfqPrtSize != other.RfqPrtSize) return false;
      if (RfqPrtVolume != other.RfqPrtVolume) return false;
      if (RfqPrtTime != other.RfqPrtTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (BidQuan != other.BidQuan) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (AskQuan != other.AskQuan) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfDelta, other.SurfDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVega, other.SurfVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrice, other.SurfPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoPrice, other.TheoPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoPriceLo, other.TheoPriceLo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoPriceHi, other.TheoPriceHi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinUPrc, other.MinUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxUPrc, other.MaxUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinYears, other.MinYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxYears, other.MaxYears)) return false;
      if (LegSecTypes != other.LegSecTypes) return false;
      if (Exchange != other.Exchange) return false;
      if (GrpNum != other.GrpNum) return false;
      if (Sector != other.Sector) return false;
      if (RiskClass != other.RiskClass) return false;
      if (OptStatus != other.OptStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosVega, other.PosVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosGamma, other.PosGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTheta, other.PosTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDelta, other.PosDelta)) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (FilterId != other.FilterId) return false;
      if (NumLegs != other.NumLegs) return false;
      if(!quoteLegs_.Equals(other.quoteLegs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SecurityDesc.Length != 0) hash ^= SecurityDesc.GetHashCode();
      if (RfqSource != global::Spiderrock.Protobuf.RFQSourceType.Any) hash ^= RfqSource.GetHashCode();
      if (RfqStrategy != global::Spiderrock.Protobuf.SpreadStrategy.Unspecified) hash ^= RfqStrategy.GetHashCode();
      if (IsCoveredStrategy != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsCoveredStrategy.GetHashCode();
      if (IsTradeable != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTradeable.GetHashCode();
      if (RfqBidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RfqBidPrice);
      if (RfqBidQuan != 0) hash ^= RfqBidQuan.GetHashCode();
      if (RfqAskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RfqAskPrice);
      if (RfqAskQuan != 0) hash ^= RfqAskQuan.GetHashCode();
      if (RfqPrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RfqPrtPrice);
      if (RfqPrtSize != 0) hash ^= RfqPrtSize.GetHashCode();
      if (RfqPrtVolume != 0) hash ^= RfqPrtVolume.GetHashCode();
      if (RfqPrtTime != 0L) hash ^= RfqPrtTime.GetHashCode();
      if (BidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice);
      if (BidQuan != 0) hash ^= BidQuan.GetHashCode();
      if (AskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice);
      if (AskQuan != 0) hash ^= AskQuan.GetHashCode();
      if (SurfDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfDelta);
      if (SurfVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVega);
      if (SurfPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrice);
      if (TheoPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoPrice);
      if (TheoPriceLo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoPriceLo);
      if (TheoPriceHi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoPriceHi);
      if (MinUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinUPrc);
      if (MaxUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxUPrc);
      if (MinYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinYears);
      if (MaxYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxYears);
      if (LegSecTypes != global::Spiderrock.Protobuf.LegSecType.Any) hash ^= LegSecTypes.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (RiskClass.Length != 0) hash ^= RiskClass.GetHashCode();
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) hash ^= OptStatus.GetHashCode();
      if (PosVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosVega);
      if (PosGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosGamma);
      if (PosTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTheta);
      if (PosDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDelta);
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (FilterId != 0L) hash ^= FilterId.GetHashCode();
      if (NumLegs != 0) hash ^= NumLegs.GetHashCode();
      hash ^= quoteLegs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(SecurityDesc);
      }
      if (RfqSource != global::Spiderrock.Protobuf.RFQSourceType.Any) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RfqSource);
      }
      if (RfqStrategy != global::Spiderrock.Protobuf.SpreadStrategy.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) RfqStrategy);
      }
      if (IsCoveredStrategy != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) IsCoveredStrategy);
      }
      if (IsTradeable != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IsTradeable);
      }
      if (RfqBidPrice != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(RfqBidPrice);
      }
      if (RfqBidQuan != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(RfqBidQuan);
      }
      if (RfqAskPrice != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(RfqAskPrice);
      }
      if (RfqAskQuan != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(RfqAskQuan);
      }
      if (RfqPrtPrice != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(RfqPrtPrice);
      }
      if (RfqPrtSize != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(RfqPrtSize);
      }
      if (RfqPrtVolume != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(RfqPrtVolume);
      }
      if (RfqPrtTime != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(RfqPrtTime);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(BidPrice);
      }
      if (BidQuan != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(BidQuan);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(AskPrice);
      }
      if (AskQuan != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(AskQuan);
      }
      if (SurfDelta != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(SurfDelta);
      }
      if (SurfVega != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(SurfVega);
      }
      if (SurfPrice != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(SurfPrice);
      }
      if (TheoPrice != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TheoPrice);
      }
      if (TheoPriceLo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(TheoPriceLo);
      }
      if (TheoPriceHi != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(TheoPriceHi);
      }
      if (MinUPrc != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(MinUPrc);
      }
      if (MaxUPrc != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(MaxUPrc);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(MaxYears);
      }
      if (LegSecTypes != global::Spiderrock.Protobuf.LegSecType.Any) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) LegSecTypes);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(Exchange);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(GrpNum);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(Sector);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(162, 12);
        output.WriteString(RiskClass);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) OptStatus);
      }
      if (PosVega != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(PosVega);
      }
      if (PosGamma != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(PosGamma);
      }
      if (PosTheta != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PosTheta);
      }
      if (PosDelta != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PosDelta);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(176, 13);
        output.WriteInt64(NetTimestamp);
      }
      if (FilterId != 0L) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(FilterId);
      }
      if (NumLegs != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(NumLegs);
      }
      quoteLegs_.WriteTo(output, _repeated_quoteLegs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(SecurityDesc);
      }
      if (RfqSource != global::Spiderrock.Protobuf.RFQSourceType.Any) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) RfqSource);
      }
      if (RfqStrategy != global::Spiderrock.Protobuf.SpreadStrategy.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) RfqStrategy);
      }
      if (IsCoveredStrategy != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) IsCoveredStrategy);
      }
      if (IsTradeable != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) IsTradeable);
      }
      if (RfqBidPrice != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(RfqBidPrice);
      }
      if (RfqBidQuan != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(RfqBidQuan);
      }
      if (RfqAskPrice != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(RfqAskPrice);
      }
      if (RfqAskQuan != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(RfqAskQuan);
      }
      if (RfqPrtPrice != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(RfqPrtPrice);
      }
      if (RfqPrtSize != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(RfqPrtSize);
      }
      if (RfqPrtVolume != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(RfqPrtVolume);
      }
      if (RfqPrtTime != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(RfqPrtTime);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(BidPrice);
      }
      if (BidQuan != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(BidQuan);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(AskPrice);
      }
      if (AskQuan != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(AskQuan);
      }
      if (SurfDelta != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(SurfDelta);
      }
      if (SurfVega != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(SurfVega);
      }
      if (SurfPrice != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(SurfPrice);
      }
      if (TheoPrice != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(TheoPrice);
      }
      if (TheoPriceLo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(TheoPriceLo);
      }
      if (TheoPriceHi != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(TheoPriceHi);
      }
      if (MinUPrc != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(MinUPrc);
      }
      if (MaxUPrc != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(MaxUPrc);
      }
      if (MinYears != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(MinYears);
      }
      if (MaxYears != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(MaxYears);
      }
      if (LegSecTypes != global::Spiderrock.Protobuf.LegSecType.Any) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) LegSecTypes);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(Exchange);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(GrpNum);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(Sector);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(162, 12);
        output.WriteString(RiskClass);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) OptStatus);
      }
      if (PosVega != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(PosVega);
      }
      if (PosGamma != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(PosGamma);
      }
      if (PosTheta != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PosTheta);
      }
      if (PosDelta != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PosDelta);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(176, 13);
        output.WriteInt64(NetTimestamp);
      }
      if (FilterId != 0L) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(FilterId);
      }
      if (NumLegs != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(NumLegs);
      }
      quoteLegs_.WriteTo(ref output, _repeated_quoteLegs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SecurityDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityDesc);
      }
      if (RfqSource != global::Spiderrock.Protobuf.RFQSourceType.Any) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RfqSource);
      }
      if (RfqStrategy != global::Spiderrock.Protobuf.SpreadStrategy.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RfqStrategy);
      }
      if (IsCoveredStrategy != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsCoveredStrategy);
      }
      if (IsTradeable != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTradeable);
      }
      if (RfqBidPrice != 0D) {
        size += 2 + 8;
      }
      if (RfqBidQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RfqBidQuan);
      }
      if (RfqAskPrice != 0D) {
        size += 2 + 8;
      }
      if (RfqAskQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RfqAskQuan);
      }
      if (RfqPrtPrice != 0D) {
        size += 2 + 8;
      }
      if (RfqPrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RfqPrtSize);
      }
      if (RfqPrtVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RfqPrtVolume);
      }
      if (RfqPrtTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RfqPrtTime);
      }
      if (BidPrice != 0D) {
        size += 2 + 8;
      }
      if (BidQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidQuan);
      }
      if (AskPrice != 0D) {
        size += 2 + 8;
      }
      if (AskQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskQuan);
      }
      if (SurfDelta != 0F) {
        size += 2 + 4;
      }
      if (SurfVega != 0F) {
        size += 2 + 4;
      }
      if (SurfPrice != 0F) {
        size += 2 + 4;
      }
      if (TheoPrice != 0F) {
        size += 2 + 4;
      }
      if (TheoPriceLo != 0F) {
        size += 2 + 4;
      }
      if (TheoPriceHi != 0F) {
        size += 2 + 4;
      }
      if (MinUPrc != 0D) {
        size += 2 + 8;
      }
      if (MaxUPrc != 0D) {
        size += 2 + 8;
      }
      if (MinYears != 0F) {
        size += 2 + 4;
      }
      if (MaxYears != 0F) {
        size += 2 + 4;
      }
      if (LegSecTypes != global::Spiderrock.Protobuf.LegSecType.Any) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSecTypes);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (RiskClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskClass);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptStatus);
      }
      if (PosVega != 0F) {
        size += 2 + 4;
      }
      if (PosGamma != 0F) {
        size += 2 + 4;
      }
      if (PosTheta != 0F) {
        size += 2 + 4;
      }
      if (PosDelta != 0F) {
        size += 2 + 4;
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (FilterId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FilterId);
      }
      if (NumLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumLegs);
      }
      size += quoteLegs_.CalculateSize(_repeated_quoteLegs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RFQQuoteBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SecurityDesc.Length != 0) {
        SecurityDesc = other.SecurityDesc;
      }
      if (other.RfqSource != global::Spiderrock.Protobuf.RFQSourceType.Any) {
        RfqSource = other.RfqSource;
      }
      if (other.RfqStrategy != global::Spiderrock.Protobuf.SpreadStrategy.Unspecified) {
        RfqStrategy = other.RfqStrategy;
      }
      if (other.IsCoveredStrategy != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsCoveredStrategy = other.IsCoveredStrategy;
      }
      if (other.IsTradeable != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTradeable = other.IsTradeable;
      }
      if (other.RfqBidPrice != 0D) {
        RfqBidPrice = other.RfqBidPrice;
      }
      if (other.RfqBidQuan != 0) {
        RfqBidQuan = other.RfqBidQuan;
      }
      if (other.RfqAskPrice != 0D) {
        RfqAskPrice = other.RfqAskPrice;
      }
      if (other.RfqAskQuan != 0) {
        RfqAskQuan = other.RfqAskQuan;
      }
      if (other.RfqPrtPrice != 0D) {
        RfqPrtPrice = other.RfqPrtPrice;
      }
      if (other.RfqPrtSize != 0) {
        RfqPrtSize = other.RfqPrtSize;
      }
      if (other.RfqPrtVolume != 0) {
        RfqPrtVolume = other.RfqPrtVolume;
      }
      if (other.RfqPrtTime != 0L) {
        RfqPrtTime = other.RfqPrtTime;
      }
      if (other.BidPrice != 0D) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuan != 0) {
        BidQuan = other.BidQuan;
      }
      if (other.AskPrice != 0D) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuan != 0) {
        AskQuan = other.AskQuan;
      }
      if (other.SurfDelta != 0F) {
        SurfDelta = other.SurfDelta;
      }
      if (other.SurfVega != 0F) {
        SurfVega = other.SurfVega;
      }
      if (other.SurfPrice != 0F) {
        SurfPrice = other.SurfPrice;
      }
      if (other.TheoPrice != 0F) {
        TheoPrice = other.TheoPrice;
      }
      if (other.TheoPriceLo != 0F) {
        TheoPriceLo = other.TheoPriceLo;
      }
      if (other.TheoPriceHi != 0F) {
        TheoPriceHi = other.TheoPriceHi;
      }
      if (other.MinUPrc != 0D) {
        MinUPrc = other.MinUPrc;
      }
      if (other.MaxUPrc != 0D) {
        MaxUPrc = other.MaxUPrc;
      }
      if (other.MinYears != 0F) {
        MinYears = other.MinYears;
      }
      if (other.MaxYears != 0F) {
        MaxYears = other.MaxYears;
      }
      if (other.LegSecTypes != global::Spiderrock.Protobuf.LegSecType.Any) {
        LegSecTypes = other.LegSecTypes;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.RiskClass.Length != 0) {
        RiskClass = other.RiskClass;
      }
      if (other.OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        OptStatus = other.OptStatus;
      }
      if (other.PosVega != 0F) {
        PosVega = other.PosVega;
      }
      if (other.PosGamma != 0F) {
        PosGamma = other.PosGamma;
      }
      if (other.PosTheta != 0F) {
        PosTheta = other.PosTheta;
      }
      if (other.PosDelta != 0F) {
        PosDelta = other.PosDelta;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.FilterId != 0L) {
        FilterId = other.FilterId;
      }
      if (other.NumLegs != 0) {
        NumLegs = other.NumLegs;
      }
      quoteLegs_.Add(other.quoteLegs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 848: {
            RfqSource = (global::Spiderrock.Protobuf.RFQSourceType) input.ReadEnum();
            break;
          }
          case 872: {
            RfqStrategy = (global::Spiderrock.Protobuf.SpreadStrategy) input.ReadEnum();
            break;
          }
          case 896: {
            IsCoveredStrategy = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 920: {
            IsTradeable = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 945: {
            RfqBidPrice = input.ReadDouble();
            break;
          }
          case 968: {
            RfqBidQuan = input.ReadInt32();
            break;
          }
          case 993: {
            RfqAskPrice = input.ReadDouble();
            break;
          }
          case 1016: {
            RfqAskQuan = input.ReadInt32();
            break;
          }
          case 1041: {
            RfqPrtPrice = input.ReadDouble();
            break;
          }
          case 1064: {
            RfqPrtSize = input.ReadInt32();
            break;
          }
          case 1088: {
            RfqPrtVolume = input.ReadInt32();
            break;
          }
          case 1112: {
            RfqPrtTime = input.ReadInt64();
            break;
          }
          case 1137: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 1160: {
            BidQuan = input.ReadInt32();
            break;
          }
          case 1185: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 1208: {
            AskQuan = input.ReadInt32();
            break;
          }
          case 1237: {
            SurfDelta = input.ReadFloat();
            break;
          }
          case 1261: {
            SurfVega = input.ReadFloat();
            break;
          }
          case 1285: {
            SurfPrice = input.ReadFloat();
            break;
          }
          case 1309: {
            TheoPrice = input.ReadFloat();
            break;
          }
          case 1333: {
            TheoPriceLo = input.ReadFloat();
            break;
          }
          case 1357: {
            TheoPriceHi = input.ReadFloat();
            break;
          }
          case 1377: {
            MinUPrc = input.ReadDouble();
            break;
          }
          case 1401: {
            MaxUPrc = input.ReadDouble();
            break;
          }
          case 1429: {
            MinYears = input.ReadFloat();
            break;
          }
          case 1453: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 1472: {
            LegSecTypes = (global::Spiderrock.Protobuf.LegSecType) input.ReadEnum();
            break;
          }
          case 1498: {
            Exchange = input.ReadString();
            break;
          }
          case 1520: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1546: {
            Sector = input.ReadString();
            break;
          }
          case 1570: {
            RiskClass = input.ReadString();
            break;
          }
          case 1592: {
            OptStatus = (global::Spiderrock.Protobuf.OptStatus) input.ReadEnum();
            break;
          }
          case 1621: {
            PosVega = input.ReadFloat();
            break;
          }
          case 1645: {
            PosGamma = input.ReadFloat();
            break;
          }
          case 1669: {
            PosTheta = input.ReadFloat();
            break;
          }
          case 1693: {
            PosDelta = input.ReadFloat();
            break;
          }
          case 1712: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1736: {
            FilterId = input.ReadInt64();
            break;
          }
          case 1760: {
            NumLegs = input.ReadInt32();
            break;
          }
          case 1786: {
            quoteLegs_.AddEntriesFrom(input, _repeated_quoteLegs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RFQQuoteBroadcast.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 848: {
            RfqSource = (global::Spiderrock.Protobuf.RFQSourceType) input.ReadEnum();
            break;
          }
          case 872: {
            RfqStrategy = (global::Spiderrock.Protobuf.SpreadStrategy) input.ReadEnum();
            break;
          }
          case 896: {
            IsCoveredStrategy = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 920: {
            IsTradeable = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 945: {
            RfqBidPrice = input.ReadDouble();
            break;
          }
          case 968: {
            RfqBidQuan = input.ReadInt32();
            break;
          }
          case 993: {
            RfqAskPrice = input.ReadDouble();
            break;
          }
          case 1016: {
            RfqAskQuan = input.ReadInt32();
            break;
          }
          case 1041: {
            RfqPrtPrice = input.ReadDouble();
            break;
          }
          case 1064: {
            RfqPrtSize = input.ReadInt32();
            break;
          }
          case 1088: {
            RfqPrtVolume = input.ReadInt32();
            break;
          }
          case 1112: {
            RfqPrtTime = input.ReadInt64();
            break;
          }
          case 1137: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 1160: {
            BidQuan = input.ReadInt32();
            break;
          }
          case 1185: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 1208: {
            AskQuan = input.ReadInt32();
            break;
          }
          case 1237: {
            SurfDelta = input.ReadFloat();
            break;
          }
          case 1261: {
            SurfVega = input.ReadFloat();
            break;
          }
          case 1285: {
            SurfPrice = input.ReadFloat();
            break;
          }
          case 1309: {
            TheoPrice = input.ReadFloat();
            break;
          }
          case 1333: {
            TheoPriceLo = input.ReadFloat();
            break;
          }
          case 1357: {
            TheoPriceHi = input.ReadFloat();
            break;
          }
          case 1377: {
            MinUPrc = input.ReadDouble();
            break;
          }
          case 1401: {
            MaxUPrc = input.ReadDouble();
            break;
          }
          case 1429: {
            MinYears = input.ReadFloat();
            break;
          }
          case 1453: {
            MaxYears = input.ReadFloat();
            break;
          }
          case 1472: {
            LegSecTypes = (global::Spiderrock.Protobuf.LegSecType) input.ReadEnum();
            break;
          }
          case 1498: {
            Exchange = input.ReadString();
            break;
          }
          case 1520: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1546: {
            Sector = input.ReadString();
            break;
          }
          case 1570: {
            RiskClass = input.ReadString();
            break;
          }
          case 1592: {
            OptStatus = (global::Spiderrock.Protobuf.OptStatus) input.ReadEnum();
            break;
          }
          case 1621: {
            PosVega = input.ReadFloat();
            break;
          }
          case 1645: {
            PosGamma = input.ReadFloat();
            break;
          }
          case 1669: {
            PosTheta = input.ReadFloat();
            break;
          }
          case 1693: {
            PosDelta = input.ReadFloat();
            break;
          }
          case 1712: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1736: {
            FilterId = input.ReadInt64();
            break;
          }
          case 1760: {
            NumLegs = input.ReadInt32();
            break;
          }
          case 1786: {
            quoteLegs_.AddEntriesFrom(ref input, _repeated_quoteLegs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RFQQuoteBroadcast message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RFQQuoteBroadcast.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          securityID_ = other.securityID_;
          exchSource_ = other.exchSource_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "security_iD" field.</summary>
        public const int SecurityIDFieldNumber = 10;
        private long securityID_;
        /// <summary>
        /// exchange spread ID (eg. CME ProductID or ISE SecurityID)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long SecurityID {
          get { return securityID_; }
          set {
            securityID_ = value;
          }
        }

        /// <summary>Field number for the "exch_source" field.</summary>
        public const int ExchSourceFieldNumber = 11;
        private global::Spiderrock.Protobuf.ExchSource exchSource_ = global::Spiderrock.Protobuf.ExchSource.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExchSource ExchSource {
          get { return exchSource_; }
          set {
            exchSource_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SecurityID != other.SecurityID) return false;
          if (ExchSource != other.ExchSource) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (SecurityID != 0L) hash ^= SecurityID.GetHashCode();
          if (ExchSource != global::Spiderrock.Protobuf.ExchSource.Unspecified) hash ^= ExchSource.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (SecurityID != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(SecurityID);
          }
          if (ExchSource != global::Spiderrock.Protobuf.ExchSource.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) ExchSource);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (SecurityID != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(SecurityID);
          }
          if (ExchSource != global::Spiderrock.Protobuf.ExchSource.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) ExchSource);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (SecurityID != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecurityID);
          }
          if (ExchSource != global::Spiderrock.Protobuf.ExchSource.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExchSource);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.SecurityID != 0L) {
            SecurityID = other.SecurityID;
          }
          if (other.ExchSource != global::Spiderrock.Protobuf.ExchSource.Unspecified) {
            ExchSource = other.ExchSource;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                SecurityID = input.ReadInt64();
                break;
              }
              case 88: {
                ExchSource = (global::Spiderrock.Protobuf.ExchSource) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                SecurityID = input.ReadInt64();
                break;
              }
              case 88: {
                ExchSource = (global::Spiderrock.Protobuf.ExchSource) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class QuoteLegs : pb::IMessage<QuoteLegs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<QuoteLegs> _parser = new pb::MessageParser<QuoteLegs>(() => new QuoteLegs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<QuoteLegs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RFQQuoteBroadcast.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public QuoteLegs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public QuoteLegs(QuoteLegs other) : this() {
          legKey_ = other.legKey_ != null ? other.legKey_.Clone() : null;
          legKeyType_ = other.legKeyType_;
          legSecurityID_ = other.legSecurityID_;
          legParentSecID_ = other.legParentSecID_;
          legSecurityDesc_ = other.legSecurityDesc_;
          legRatio_ = other.legRatio_;
          legSide_ = other.legSide_;
          legBidPrice_ = other.legBidPrice_;
          legBidSize_ = other.legBidSize_;
          legAskPrice_ = other.legAskPrice_;
          legAskSize_ = other.legAskSize_;
          legYears_ = other.legYears_;
          legUPrc_ = other.legUPrc_;
          legOptMult_ = other.legOptMult_;
          legFutMult_ = other.legFutMult_;
          legSurfVol_ = other.legSurfVol_;
          legSurfDe_ = other.legSurfDe_;
          legSurfVe_ = other.legSurfVe_;
          legSurfPrice_ = other.legSurfPrice_;
          legTheoPrice_ = other.legTheoPrice_;
          legTheoPrcB_ = other.legTheoPrcB_;
          legTheoPrcS_ = other.legTheoPrcS_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public QuoteLegs Clone() {
          return new QuoteLegs(this);
        }

        /// <summary>Field number for the "leg_key" field.</summary>
        public const int LegKeyFieldNumber = 226;
        private global::Spiderrock.Protobuf.OptionKey legKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey LegKey {
          get { return legKey_; }
          set {
            legKey_ = value;
          }
        }

        /// <summary>Field number for the "leg_key_type" field.</summary>
        public const int LegKeyTypeFieldNumber = 229;
        private global::Spiderrock.Protobuf.LegKeyType legKeyType_ = global::Spiderrock.Protobuf.LegKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.LegKeyType LegKeyType {
          get { return legKeyType_; }
          set {
            legKeyType_ = value;
          }
        }

        /// <summary>Field number for the "leg_security_iD" field.</summary>
        public const int LegSecurityIDFieldNumber = 232;
        private long legSecurityID_;
        /// <summary>
        /// product securityID (if available, 0 otherwise) (can be another spread)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegSecurityID {
          get { return legSecurityID_; }
          set {
            legSecurityID_ = value;
          }
        }

        /// <summary>Field number for the "leg_parent_sec_iD" field.</summary>
        public const int LegParentSecIDFieldNumber = 235;
        private long legParentSecID_;
        /// <summary>
        /// product securityID of parent (if unrolled from a compound spread)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long LegParentSecID {
          get { return legParentSecID_; }
          set {
            legParentSecID_ = value;
          }
        }

        /// <summary>Field number for the "leg_security_desc" field.</summary>
        public const int LegSecurityDescFieldNumber = 238;
        private string legSecurityDesc_ = "";
        /// <summary>
        /// Security description
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string LegSecurityDesc {
          get { return legSecurityDesc_; }
          set {
            legSecurityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "leg_ratio" field.</summary>
        public const int LegRatioFieldNumber = 241;
        private uint legRatio_;
        /// <summary>
        /// leg ratio (1, 2, etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint LegRatio {
          get { return legRatio_; }
          set {
            legRatio_ = value;
          }
        }

        /// <summary>Field number for the "leg_side" field.</summary>
        public const int LegSideFieldNumber = 244;
        private global::Spiderrock.Protobuf.BuySell legSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell LegSide {
          get { return legSide_; }
          set {
            legSide_ = value;
          }
        }

        /// <summary>Field number for the "leg_bid_price" field.</summary>
        public const int LegBidPriceFieldNumber = 247;
        private double legBidPrice_;
        /// <summary>
        /// leg market bid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegBidPrice {
          get { return legBidPrice_; }
          set {
            legBidPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_bid_size" field.</summary>
        public const int LegBidSizeFieldNumber = 250;
        private int legBidSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LegBidSize {
          get { return legBidSize_; }
          set {
            legBidSize_ = value;
          }
        }

        /// <summary>Field number for the "leg_ask_price" field.</summary>
        public const int LegAskPriceFieldNumber = 253;
        private double legAskPrice_;
        /// <summary>
        /// leg market ask
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegAskPrice {
          get { return legAskPrice_; }
          set {
            legAskPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_ask_size" field.</summary>
        public const int LegAskSizeFieldNumber = 256;
        private int legAskSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LegAskSize {
          get { return legAskSize_; }
          set {
            legAskSize_ = value;
          }
        }

        /// <summary>Field number for the "leg_years" field.</summary>
        public const int LegYearsFieldNumber = 259;
        private float legYears_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegYears {
          get { return legYears_; }
          set {
            legYears_ = value;
          }
        }

        /// <summary>Field number for the "leg_uPrc" field.</summary>
        public const int LegUPrcFieldNumber = 262;
        private double legUPrc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double LegUPrc {
          get { return legUPrc_; }
          set {
            legUPrc_ = value;
          }
        }

        /// <summary>Field number for the "leg_opt_mult" field.</summary>
        public const int LegOptMultFieldNumber = 265;
        private float legOptMult_;
        /// <summary>
        /// SPC if equity, 1 if option/future
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegOptMult {
          get { return legOptMult_; }
          set {
            legOptMult_ = value;
          }
        }

        /// <summary>Field number for the "leg_fut_mult" field.</summary>
        public const int LegFutMultFieldNumber = 268;
        private float legFutMult_;
        /// <summary>
        /// 1 if equity, uMult if option/future
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegFutMult {
          get { return legFutMult_; }
          set {
            legFutMult_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_vol" field.</summary>
        public const int LegSurfVolFieldNumber = 271;
        private float legSurfVol_;
        /// <summary>
        /// leg surface volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfVol {
          get { return legSurfVol_; }
          set {
            legSurfVol_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_de" field.</summary>
        public const int LegSurfDeFieldNumber = 274;
        private float legSurfDe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfDe {
          get { return legSurfDe_; }
          set {
            legSurfDe_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_ve" field.</summary>
        public const int LegSurfVeFieldNumber = 277;
        private float legSurfVe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfVe {
          get { return legSurfVe_; }
          set {
            legSurfVe_ = value;
          }
        }

        /// <summary>Field number for the "leg_surf_price" field.</summary>
        public const int LegSurfPriceFieldNumber = 280;
        private float legSurfPrice_;
        /// <summary>
        /// surface price as of message arrival
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegSurfPrice {
          get { return legSurfPrice_; }
          set {
            legSurfPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_theo_price" field.</summary>
        public const int LegTheoPriceFieldNumber = 283;
        private float legTheoPrice_;
        /// <summary>
        /// theo price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegTheoPrice {
          get { return legTheoPrice_; }
          set {
            legTheoPrice_ = value;
          }
        }

        /// <summary>Field number for the "leg_theo_prc_b" field.</summary>
        public const int LegTheoPrcBFieldNumber = 286;
        private float legTheoPrcB_;
        /// <summary>
        /// theo buy price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegTheoPrcB {
          get { return legTheoPrcB_; }
          set {
            legTheoPrcB_ = value;
          }
        }

        /// <summary>Field number for the "leg_theo_prc_s" field.</summary>
        public const int LegTheoPrcSFieldNumber = 289;
        private float legTheoPrcS_;
        /// <summary>
        /// theo sell price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LegTheoPrcS {
          get { return legTheoPrcS_; }
          set {
            legTheoPrcS_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as QuoteLegs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(QuoteLegs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LegKey, other.LegKey)) return false;
          if (LegKeyType != other.LegKeyType) return false;
          if (LegSecurityID != other.LegSecurityID) return false;
          if (LegParentSecID != other.LegParentSecID) return false;
          if (LegSecurityDesc != other.LegSecurityDesc) return false;
          if (LegRatio != other.LegRatio) return false;
          if (LegSide != other.LegSide) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegBidPrice, other.LegBidPrice)) return false;
          if (LegBidSize != other.LegBidSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegAskPrice, other.LegAskPrice)) return false;
          if (LegAskSize != other.LegAskSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegYears, other.LegYears)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LegUPrc, other.LegUPrc)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegOptMult, other.LegOptMult)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegFutMult, other.LegFutMult)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfVol, other.LegSurfVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfDe, other.LegSurfDe)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfVe, other.LegSurfVe)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegSurfPrice, other.LegSurfPrice)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegTheoPrice, other.LegTheoPrice)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegTheoPrcB, other.LegTheoPrcB)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LegTheoPrcS, other.LegTheoPrcS)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (legKey_ != null) hash ^= LegKey.GetHashCode();
          if (LegKeyType != global::Spiderrock.Protobuf.LegKeyType.Unspecified) hash ^= LegKeyType.GetHashCode();
          if (LegSecurityID != 0L) hash ^= LegSecurityID.GetHashCode();
          if (LegParentSecID != 0L) hash ^= LegParentSecID.GetHashCode();
          if (LegSecurityDesc.Length != 0) hash ^= LegSecurityDesc.GetHashCode();
          if (LegRatio != 0) hash ^= LegRatio.GetHashCode();
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LegSide.GetHashCode();
          if (LegBidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegBidPrice);
          if (LegBidSize != 0) hash ^= LegBidSize.GetHashCode();
          if (LegAskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegAskPrice);
          if (LegAskSize != 0) hash ^= LegAskSize.GetHashCode();
          if (LegYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegYears);
          if (LegUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LegUPrc);
          if (LegOptMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegOptMult);
          if (LegFutMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegFutMult);
          if (LegSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfVol);
          if (LegSurfDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfDe);
          if (LegSurfVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfVe);
          if (LegSurfPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegSurfPrice);
          if (LegTheoPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegTheoPrice);
          if (LegTheoPrcB != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegTheoPrcB);
          if (LegTheoPrcS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LegTheoPrcS);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (legKey_ != null) {
            output.WriteRawTag(146, 14);
            output.WriteMessage(LegKey);
          }
          if (LegKeyType != global::Spiderrock.Protobuf.LegKeyType.Unspecified) {
            output.WriteRawTag(168, 14);
            output.WriteEnum((int) LegKeyType);
          }
          if (LegSecurityID != 0L) {
            output.WriteRawTag(192, 14);
            output.WriteInt64(LegSecurityID);
          }
          if (LegParentSecID != 0L) {
            output.WriteRawTag(216, 14);
            output.WriteInt64(LegParentSecID);
          }
          if (LegSecurityDesc.Length != 0) {
            output.WriteRawTag(242, 14);
            output.WriteString(LegSecurityDesc);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(136, 15);
            output.WriteUInt32(LegRatio);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(160, 15);
            output.WriteEnum((int) LegSide);
          }
          if (LegBidPrice != 0D) {
            output.WriteRawTag(185, 15);
            output.WriteDouble(LegBidPrice);
          }
          if (LegBidSize != 0) {
            output.WriteRawTag(208, 15);
            output.WriteInt32(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            output.WriteRawTag(233, 15);
            output.WriteDouble(LegAskPrice);
          }
          if (LegAskSize != 0) {
            output.WriteRawTag(128, 16);
            output.WriteInt32(LegAskSize);
          }
          if (LegYears != 0F) {
            output.WriteRawTag(157, 16);
            output.WriteFloat(LegYears);
          }
          if (LegUPrc != 0D) {
            output.WriteRawTag(177, 16);
            output.WriteDouble(LegUPrc);
          }
          if (LegOptMult != 0F) {
            output.WriteRawTag(205, 16);
            output.WriteFloat(LegOptMult);
          }
          if (LegFutMult != 0F) {
            output.WriteRawTag(229, 16);
            output.WriteFloat(LegFutMult);
          }
          if (LegSurfVol != 0F) {
            output.WriteRawTag(253, 16);
            output.WriteFloat(LegSurfVol);
          }
          if (LegSurfDe != 0F) {
            output.WriteRawTag(149, 17);
            output.WriteFloat(LegSurfDe);
          }
          if (LegSurfVe != 0F) {
            output.WriteRawTag(173, 17);
            output.WriteFloat(LegSurfVe);
          }
          if (LegSurfPrice != 0F) {
            output.WriteRawTag(197, 17);
            output.WriteFloat(LegSurfPrice);
          }
          if (LegTheoPrice != 0F) {
            output.WriteRawTag(221, 17);
            output.WriteFloat(LegTheoPrice);
          }
          if (LegTheoPrcB != 0F) {
            output.WriteRawTag(245, 17);
            output.WriteFloat(LegTheoPrcB);
          }
          if (LegTheoPrcS != 0F) {
            output.WriteRawTag(141, 18);
            output.WriteFloat(LegTheoPrcS);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (legKey_ != null) {
            output.WriteRawTag(146, 14);
            output.WriteMessage(LegKey);
          }
          if (LegKeyType != global::Spiderrock.Protobuf.LegKeyType.Unspecified) {
            output.WriteRawTag(168, 14);
            output.WriteEnum((int) LegKeyType);
          }
          if (LegSecurityID != 0L) {
            output.WriteRawTag(192, 14);
            output.WriteInt64(LegSecurityID);
          }
          if (LegParentSecID != 0L) {
            output.WriteRawTag(216, 14);
            output.WriteInt64(LegParentSecID);
          }
          if (LegSecurityDesc.Length != 0) {
            output.WriteRawTag(242, 14);
            output.WriteString(LegSecurityDesc);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(136, 15);
            output.WriteUInt32(LegRatio);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(160, 15);
            output.WriteEnum((int) LegSide);
          }
          if (LegBidPrice != 0D) {
            output.WriteRawTag(185, 15);
            output.WriteDouble(LegBidPrice);
          }
          if (LegBidSize != 0) {
            output.WriteRawTag(208, 15);
            output.WriteInt32(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            output.WriteRawTag(233, 15);
            output.WriteDouble(LegAskPrice);
          }
          if (LegAskSize != 0) {
            output.WriteRawTag(128, 16);
            output.WriteInt32(LegAskSize);
          }
          if (LegYears != 0F) {
            output.WriteRawTag(157, 16);
            output.WriteFloat(LegYears);
          }
          if (LegUPrc != 0D) {
            output.WriteRawTag(177, 16);
            output.WriteDouble(LegUPrc);
          }
          if (LegOptMult != 0F) {
            output.WriteRawTag(205, 16);
            output.WriteFloat(LegOptMult);
          }
          if (LegFutMult != 0F) {
            output.WriteRawTag(229, 16);
            output.WriteFloat(LegFutMult);
          }
          if (LegSurfVol != 0F) {
            output.WriteRawTag(253, 16);
            output.WriteFloat(LegSurfVol);
          }
          if (LegSurfDe != 0F) {
            output.WriteRawTag(149, 17);
            output.WriteFloat(LegSurfDe);
          }
          if (LegSurfVe != 0F) {
            output.WriteRawTag(173, 17);
            output.WriteFloat(LegSurfVe);
          }
          if (LegSurfPrice != 0F) {
            output.WriteRawTag(197, 17);
            output.WriteFloat(LegSurfPrice);
          }
          if (LegTheoPrice != 0F) {
            output.WriteRawTag(221, 17);
            output.WriteFloat(LegTheoPrice);
          }
          if (LegTheoPrcB != 0F) {
            output.WriteRawTag(245, 17);
            output.WriteFloat(LegTheoPrcB);
          }
          if (LegTheoPrcS != 0F) {
            output.WriteRawTag(141, 18);
            output.WriteFloat(LegTheoPrcS);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (legKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LegKey);
          }
          if (LegKeyType != global::Spiderrock.Protobuf.LegKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegKeyType);
          }
          if (LegSecurityID != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegSecurityID);
          }
          if (LegParentSecID != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegParentSecID);
          }
          if (LegSecurityDesc.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(LegSecurityDesc);
          }
          if (LegRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegRatio);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSide);
          }
          if (LegBidPrice != 0D) {
            size += 2 + 8;
          }
          if (LegBidSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegBidSize);
          }
          if (LegAskPrice != 0D) {
            size += 2 + 8;
          }
          if (LegAskSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LegAskSize);
          }
          if (LegYears != 0F) {
            size += 2 + 4;
          }
          if (LegUPrc != 0D) {
            size += 2 + 8;
          }
          if (LegOptMult != 0F) {
            size += 2 + 4;
          }
          if (LegFutMult != 0F) {
            size += 2 + 4;
          }
          if (LegSurfVol != 0F) {
            size += 2 + 4;
          }
          if (LegSurfDe != 0F) {
            size += 2 + 4;
          }
          if (LegSurfVe != 0F) {
            size += 2 + 4;
          }
          if (LegSurfPrice != 0F) {
            size += 2 + 4;
          }
          if (LegTheoPrice != 0F) {
            size += 2 + 4;
          }
          if (LegTheoPrcB != 0F) {
            size += 2 + 4;
          }
          if (LegTheoPrcS != 0F) {
            size += 2 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(QuoteLegs other) {
          if (other == null) {
            return;
          }
          if (other.legKey_ != null) {
            if (legKey_ == null) {
              LegKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            LegKey.MergeFrom(other.LegKey);
          }
          if (other.LegKeyType != global::Spiderrock.Protobuf.LegKeyType.Unspecified) {
            LegKeyType = other.LegKeyType;
          }
          if (other.LegSecurityID != 0L) {
            LegSecurityID = other.LegSecurityID;
          }
          if (other.LegParentSecID != 0L) {
            LegParentSecID = other.LegParentSecID;
          }
          if (other.LegSecurityDesc.Length != 0) {
            LegSecurityDesc = other.LegSecurityDesc;
          }
          if (other.LegRatio != 0) {
            LegRatio = other.LegRatio;
          }
          if (other.LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            LegSide = other.LegSide;
          }
          if (other.LegBidPrice != 0D) {
            LegBidPrice = other.LegBidPrice;
          }
          if (other.LegBidSize != 0) {
            LegBidSize = other.LegBidSize;
          }
          if (other.LegAskPrice != 0D) {
            LegAskPrice = other.LegAskPrice;
          }
          if (other.LegAskSize != 0) {
            LegAskSize = other.LegAskSize;
          }
          if (other.LegYears != 0F) {
            LegYears = other.LegYears;
          }
          if (other.LegUPrc != 0D) {
            LegUPrc = other.LegUPrc;
          }
          if (other.LegOptMult != 0F) {
            LegOptMult = other.LegOptMult;
          }
          if (other.LegFutMult != 0F) {
            LegFutMult = other.LegFutMult;
          }
          if (other.LegSurfVol != 0F) {
            LegSurfVol = other.LegSurfVol;
          }
          if (other.LegSurfDe != 0F) {
            LegSurfDe = other.LegSurfDe;
          }
          if (other.LegSurfVe != 0F) {
            LegSurfVe = other.LegSurfVe;
          }
          if (other.LegSurfPrice != 0F) {
            LegSurfPrice = other.LegSurfPrice;
          }
          if (other.LegTheoPrice != 0F) {
            LegTheoPrice = other.LegTheoPrice;
          }
          if (other.LegTheoPrcB != 0F) {
            LegTheoPrcB = other.LegTheoPrcB;
          }
          if (other.LegTheoPrcS != 0F) {
            LegTheoPrcS = other.LegTheoPrcS;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1810: {
                if (legKey_ == null) {
                  LegKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegKey);
                break;
              }
              case 1832: {
                LegKeyType = (global::Spiderrock.Protobuf.LegKeyType) input.ReadEnum();
                break;
              }
              case 1856: {
                LegSecurityID = input.ReadInt64();
                break;
              }
              case 1880: {
                LegParentSecID = input.ReadInt64();
                break;
              }
              case 1906: {
                LegSecurityDesc = input.ReadString();
                break;
              }
              case 1928: {
                LegRatio = input.ReadUInt32();
                break;
              }
              case 1952: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1977: {
                LegBidPrice = input.ReadDouble();
                break;
              }
              case 2000: {
                LegBidSize = input.ReadInt32();
                break;
              }
              case 2025: {
                LegAskPrice = input.ReadDouble();
                break;
              }
              case 2048: {
                LegAskSize = input.ReadInt32();
                break;
              }
              case 2077: {
                LegYears = input.ReadFloat();
                break;
              }
              case 2097: {
                LegUPrc = input.ReadDouble();
                break;
              }
              case 2125: {
                LegOptMult = input.ReadFloat();
                break;
              }
              case 2149: {
                LegFutMult = input.ReadFloat();
                break;
              }
              case 2173: {
                LegSurfVol = input.ReadFloat();
                break;
              }
              case 2197: {
                LegSurfDe = input.ReadFloat();
                break;
              }
              case 2221: {
                LegSurfVe = input.ReadFloat();
                break;
              }
              case 2245: {
                LegSurfPrice = input.ReadFloat();
                break;
              }
              case 2269: {
                LegTheoPrice = input.ReadFloat();
                break;
              }
              case 2293: {
                LegTheoPrcB = input.ReadFloat();
                break;
              }
              case 2317: {
                LegTheoPrcS = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1810: {
                if (legKey_ == null) {
                  LegKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegKey);
                break;
              }
              case 1832: {
                LegKeyType = (global::Spiderrock.Protobuf.LegKeyType) input.ReadEnum();
                break;
              }
              case 1856: {
                LegSecurityID = input.ReadInt64();
                break;
              }
              case 1880: {
                LegParentSecID = input.ReadInt64();
                break;
              }
              case 1906: {
                LegSecurityDesc = input.ReadString();
                break;
              }
              case 1928: {
                LegRatio = input.ReadUInt32();
                break;
              }
              case 1952: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1977: {
                LegBidPrice = input.ReadDouble();
                break;
              }
              case 2000: {
                LegBidSize = input.ReadInt32();
                break;
              }
              case 2025: {
                LegAskPrice = input.ReadDouble();
                break;
              }
              case 2048: {
                LegAskSize = input.ReadInt32();
                break;
              }
              case 2077: {
                LegYears = input.ReadFloat();
                break;
              }
              case 2097: {
                LegUPrc = input.ReadDouble();
                break;
              }
              case 2125: {
                LegOptMult = input.ReadFloat();
                break;
              }
              case 2149: {
                LegFutMult = input.ReadFloat();
                break;
              }
              case 2173: {
                LegSurfVol = input.ReadFloat();
                break;
              }
              case 2197: {
                LegSurfDe = input.ReadFloat();
                break;
              }
              case 2221: {
                LegSurfVe = input.ReadFloat();
                break;
              }
              case 2245: {
                LegSurfPrice = input.ReadFloat();
                break;
              }
              case 2269: {
                LegTheoPrice = input.ReadFloat();
                break;
              }
              case 2293: {
                LegTheoPrcB = input.ReadFloat();
                break;
              }
              case 2317: {
                LegTheoPrcS = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
