// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientLive/MarketHoursConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientLive/MarketHoursConfig.proto</summary>
  public static partial class MarketHoursConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientLive/MarketHoursConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketHoursConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9DbGllbnRMaXZlL01hcmtldEhvdXJzQ29uZmlnLnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJv",
            "dG9idWYvdGltZXN0YW1wLnByb3RvItUKChFNYXJrZXRIb3Vyc0NvbmZpZxIz",
            "CgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYuTWVzc2FnZU1l",
            "dGFkYXRhEjkKBHBrZXkYAiABKAsyKy5zcGlkZXJyb2NrLnByb3RvYnVmLk1h",
            "cmtldEhvdXJzQ29uZmlnLlBLZXkSMgoJdGltZV96b25lGGQgASgOMh8uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TUlRpbWVab25lEjsKD21hcmtldF9kYXlfdHlw",
            "ZRhlIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuTWFya2V0RGF5VHlwZRI1",
            "ChJzcl9jbG9zZV9tYXJrX3RpbWUYZiABKAsyGS5nb29nbGUucHJvdG9idWYu",
            "RHVyYXRpb24SNQoRaGFzX2Vhcmx5X3Nlc3Npb24YZyABKA4yGi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlllc05vEjYKE2Vhcmx5X3ByZV9vcGVuX3RpbWUYaCAB",
            "KAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SOgoXZWFybHlfc2Vzc2lv",
            "bl9vcGVuX3RpbWUYaSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24S",
            "OwoYZWFybHlfc2Vzc2lvbl9jbG9zZV90aW1lGGogASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uEjcKE2hhc19yZWd1bGFyX3Nlc3Npb24YayABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjQKEXJlZ19wcmVfb3Blbl90",
            "aW1lGGwgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjgKFXJlZ19z",
            "ZXNzaW9uX29wZW5fdGltZRhtIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbhI5ChZyZWdfc2Vzc2lvbl9jbG9zZV90aW1lGG4gASgLMhkuZ29vZ2xl",
            "LnByb3RvYnVmLkR1cmF0aW9uEjQKEGhhc19sYXRlX3Nlc3Npb24YbyABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjUKEmxhdGVfcHJlX29wZW5f",
            "dGltZRhwIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI5ChZsYXRl",
            "X3Nlc3Npb25fb3Blbl90aW1lGHEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1",
            "cmF0aW9uEjoKF2xhdGVfc2Vzc2lvbl9jbG9zZV90aW1lGHIgASgLMhkuZ29v",
            "Z2xlLnByb3RvYnVmLkR1cmF0aW9uEjYKEmhhc19leF9lYXJseV9jbG9zZRhz",
            "IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SNgoTZXhfZWFybHlf",
            "Y2xvc2VfdGltZRh0IAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIt",
            "Cgl0aW1lc3RhbXAYdSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "GtgBCgRQS2V5Ei4KBnRpY2tlchgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuVGlja2VyS2V5EjIKCHNlY190eXBlGAsgASgOMiAuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5TcGRyS2V5VHlwZRIwCgp0cmFkZV9kYXRlGAwgASgLMhwuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5EjoKDnRyYWRpbmdfcGVyaW9kGA0g",
            "ASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5UcmFkaW5nUGVyaW9kYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.MarketHoursConfig), global::Spiderrock.Protobuf.MarketHoursConfig.Parser, new[]{ "Meta", "Pkey", "TimeZone", "MarketDayType", "SrCloseMarkTime", "HasEarlySession", "EarlyPreOpenTime", "EarlySessionOpenTime", "EarlySessionCloseTime", "HasRegularSession", "RegPreOpenTime", "RegSessionOpenTime", "RegSessionCloseTime", "HasLateSession", "LatePreOpenTime", "LateSessionOpenTime", "LateSessionCloseTime", "HasExEarlyClose", "ExEarlyCloseTime", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey), global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey.Parser, new[]{ "Ticker", "SecType", "TradeDate", "TradingPeriod" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Expected trading day market schedule for each TradingPeriod and SecType.  Including schedules for equity, futures, and options markets.  The NMS schedule is the NYSE announced trading calendar.  Other markets are from the listing exchange.
  ///Typically includes records for the current week, previous week and next week
  /// </summary>
  public sealed partial class MarketHoursConfig : pb::IMessage<MarketHoursConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketHoursConfig> _parser = new pb::MessageParser<MarketHoursConfig>(() => new MarketHoursConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarketHoursConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.MarketHoursConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketHoursConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketHoursConfig(MarketHoursConfig other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      timeZone_ = other.timeZone_;
      marketDayType_ = other.marketDayType_;
      srCloseMarkTime_ = other.srCloseMarkTime_ != null ? other.srCloseMarkTime_.Clone() : null;
      hasEarlySession_ = other.hasEarlySession_;
      earlyPreOpenTime_ = other.earlyPreOpenTime_ != null ? other.earlyPreOpenTime_.Clone() : null;
      earlySessionOpenTime_ = other.earlySessionOpenTime_ != null ? other.earlySessionOpenTime_.Clone() : null;
      earlySessionCloseTime_ = other.earlySessionCloseTime_ != null ? other.earlySessionCloseTime_.Clone() : null;
      hasRegularSession_ = other.hasRegularSession_;
      regPreOpenTime_ = other.regPreOpenTime_ != null ? other.regPreOpenTime_.Clone() : null;
      regSessionOpenTime_ = other.regSessionOpenTime_ != null ? other.regSessionOpenTime_.Clone() : null;
      regSessionCloseTime_ = other.regSessionCloseTime_ != null ? other.regSessionCloseTime_.Clone() : null;
      hasLateSession_ = other.hasLateSession_;
      latePreOpenTime_ = other.latePreOpenTime_ != null ? other.latePreOpenTime_.Clone() : null;
      lateSessionOpenTime_ = other.lateSessionOpenTime_ != null ? other.lateSessionOpenTime_.Clone() : null;
      lateSessionCloseTime_ = other.lateSessionCloseTime_ != null ? other.lateSessionCloseTime_.Clone() : null;
      hasExEarlyClose_ = other.hasExEarlyClose_;
      exEarlyCloseTime_ = other.exEarlyCloseTime_ != null ? other.exEarlyCloseTime_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketHoursConfig Clone() {
      return new MarketHoursConfig(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 100;
    private global::Spiderrock.Protobuf.SRTimeZone timeZone_ = global::Spiderrock.Protobuf.SRTimeZone.Unspecified;
    /// <summary>
    /// note: this does not have to match the associated TradingPeriod timeZone (default is TradingPeriod.TimeZone)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SRTimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "market_day_type" field.</summary>
    public const int MarketDayTypeFieldNumber = 101;
    private global::Spiderrock.Protobuf.MarketDayType marketDayType_ = global::Spiderrock.Protobuf.MarketDayType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketDayType MarketDayType {
      get { return marketDayType_; }
      set {
        marketDayType_ = value;
      }
    }

    /// <summary>Field number for the "sr_close_mark_time" field.</summary>
    public const int SrCloseMarkTimeFieldNumber = 102;
    private global::Google.Protobuf.WellKnownTypes.Duration srCloseMarkTime_;
    /// <summary>
    /// SR Close Mark Time; usually regular market close - 5 minute (C - 5M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration SrCloseMarkTime {
      get { return srCloseMarkTime_; }
      set {
        srCloseMarkTime_ = value;
      }
    }

    /// <summary>Field number for the "has_early_session" field.</summary>
    public const int HasEarlySessionFieldNumber = 103;
    private global::Spiderrock.Protobuf.YesNo hasEarlySession_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// note: early session can start the previous day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasEarlySession {
      get { return hasEarlySession_; }
      set {
        hasEarlySession_ = value;
      }
    }

    /// <summary>Field number for the "early_pre_open_time" field.</summary>
    public const int EarlyPreOpenTimeFieldNumber = 104;
    private global::Google.Protobuf.WellKnownTypes.Duration earlyPreOpenTime_;
    /// <summary>
    /// early session pre-open (orders accepted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration EarlyPreOpenTime {
      get { return earlyPreOpenTime_; }
      set {
        earlyPreOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "early_session_open_time" field.</summary>
    public const int EarlySessionOpenTimeFieldNumber = 105;
    private global::Google.Protobuf.WellKnownTypes.Duration earlySessionOpenTime_;
    /// <summary>
    /// early session market open
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration EarlySessionOpenTime {
      get { return earlySessionOpenTime_; }
      set {
        earlySessionOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "early_session_close_time" field.</summary>
    public const int EarlySessionCloseTimeFieldNumber = 106;
    private global::Google.Protobuf.WellKnownTypes.Duration earlySessionCloseTime_;
    /// <summary>
    /// early session market close
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration EarlySessionCloseTime {
      get { return earlySessionCloseTime_; }
      set {
        earlySessionCloseTime_ = value;
      }
    }

    /// <summary>Field number for the "has_regular_session" field.</summary>
    public const int HasRegularSessionFieldNumber = 107;
    private global::Spiderrock.Protobuf.YesNo hasRegularSession_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasRegularSession {
      get { return hasRegularSession_; }
      set {
        hasRegularSession_ = value;
      }
    }

    /// <summary>Field number for the "reg_pre_open_time" field.</summary>
    public const int RegPreOpenTimeFieldNumber = 108;
    private global::Google.Protobuf.WellKnownTypes.Duration regPreOpenTime_;
    /// <summary>
    /// regular session pre-open (order accepted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration RegPreOpenTime {
      get { return regPreOpenTime_; }
      set {
        regPreOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "reg_session_open_time" field.</summary>
    public const int RegSessionOpenTimeFieldNumber = 109;
    private global::Google.Protobuf.WellKnownTypes.Duration regSessionOpenTime_;
    /// <summary>
    /// regular session open
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration RegSessionOpenTime {
      get { return regSessionOpenTime_; }
      set {
        regSessionOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "reg_session_close_time" field.</summary>
    public const int RegSessionCloseTimeFieldNumber = 110;
    private global::Google.Protobuf.WellKnownTypes.Duration regSessionCloseTime_;
    /// <summary>
    /// regular session close
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration RegSessionCloseTime {
      get { return regSessionCloseTime_; }
      set {
        regSessionCloseTime_ = value;
      }
    }

    /// <summary>Field number for the "has_late_session" field.</summary>
    public const int HasLateSessionFieldNumber = 111;
    private global::Spiderrock.Protobuf.YesNo hasLateSession_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasLateSession {
      get { return hasLateSession_; }
      set {
        hasLateSession_ = value;
      }
    }

    /// <summary>Field number for the "late_pre_open_time" field.</summary>
    public const int LatePreOpenTimeFieldNumber = 112;
    private global::Google.Protobuf.WellKnownTypes.Duration latePreOpenTime_;
    /// <summary>
    /// extended session pre-open (orders accepted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration LatePreOpenTime {
      get { return latePreOpenTime_; }
      set {
        latePreOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "late_session_open_time" field.</summary>
    public const int LateSessionOpenTimeFieldNumber = 113;
    private global::Google.Protobuf.WellKnownTypes.Duration lateSessionOpenTime_;
    /// <summary>
    /// extended session open
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration LateSessionOpenTime {
      get { return lateSessionOpenTime_; }
      set {
        lateSessionOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "late_session_close_time" field.</summary>
    public const int LateSessionCloseTimeFieldNumber = 114;
    private global::Google.Protobuf.WellKnownTypes.Duration lateSessionCloseTime_;
    /// <summary>
    /// extended session close
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration LateSessionCloseTime {
      get { return lateSessionCloseTime_; }
      set {
        lateSessionCloseTime_ = value;
      }
    }

    /// <summary>Field number for the "has_ex_early_close" field.</summary>
    public const int HasExEarlyCloseFieldNumber = 115;
    private global::Spiderrock.Protobuf.YesNo hasExEarlyClose_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// options have an early close on expiry day (secType = Option only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasExEarlyClose {
      get { return hasExEarlyClose_; }
      set {
        hasExEarlyClose_ = value;
      }
    }

    /// <summary>Field number for the "ex_early_close_time" field.</summary>
    public const int ExEarlyCloseTimeFieldNumber = 116;
    private global::Google.Protobuf.WellKnownTypes.Duration exEarlyCloseTime_;
    /// <summary>
    /// expiry day early close time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration ExEarlyCloseTime {
      get { return exEarlyCloseTime_; }
      set {
        exEarlyCloseTime_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 117;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarketHoursConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarketHoursConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (TimeZone != other.TimeZone) return false;
      if (MarketDayType != other.MarketDayType) return false;
      if (!object.Equals(SrCloseMarkTime, other.SrCloseMarkTime)) return false;
      if (HasEarlySession != other.HasEarlySession) return false;
      if (!object.Equals(EarlyPreOpenTime, other.EarlyPreOpenTime)) return false;
      if (!object.Equals(EarlySessionOpenTime, other.EarlySessionOpenTime)) return false;
      if (!object.Equals(EarlySessionCloseTime, other.EarlySessionCloseTime)) return false;
      if (HasRegularSession != other.HasRegularSession) return false;
      if (!object.Equals(RegPreOpenTime, other.RegPreOpenTime)) return false;
      if (!object.Equals(RegSessionOpenTime, other.RegSessionOpenTime)) return false;
      if (!object.Equals(RegSessionCloseTime, other.RegSessionCloseTime)) return false;
      if (HasLateSession != other.HasLateSession) return false;
      if (!object.Equals(LatePreOpenTime, other.LatePreOpenTime)) return false;
      if (!object.Equals(LateSessionOpenTime, other.LateSessionOpenTime)) return false;
      if (!object.Equals(LateSessionCloseTime, other.LateSessionCloseTime)) return false;
      if (HasExEarlyClose != other.HasExEarlyClose) return false;
      if (!object.Equals(ExEarlyCloseTime, other.ExEarlyCloseTime)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (TimeZone != global::Spiderrock.Protobuf.SRTimeZone.Unspecified) hash ^= TimeZone.GetHashCode();
      if (MarketDayType != global::Spiderrock.Protobuf.MarketDayType.Unspecified) hash ^= MarketDayType.GetHashCode();
      if (srCloseMarkTime_ != null) hash ^= SrCloseMarkTime.GetHashCode();
      if (HasEarlySession != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasEarlySession.GetHashCode();
      if (earlyPreOpenTime_ != null) hash ^= EarlyPreOpenTime.GetHashCode();
      if (earlySessionOpenTime_ != null) hash ^= EarlySessionOpenTime.GetHashCode();
      if (earlySessionCloseTime_ != null) hash ^= EarlySessionCloseTime.GetHashCode();
      if (HasRegularSession != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasRegularSession.GetHashCode();
      if (regPreOpenTime_ != null) hash ^= RegPreOpenTime.GetHashCode();
      if (regSessionOpenTime_ != null) hash ^= RegSessionOpenTime.GetHashCode();
      if (regSessionCloseTime_ != null) hash ^= RegSessionCloseTime.GetHashCode();
      if (HasLateSession != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasLateSession.GetHashCode();
      if (latePreOpenTime_ != null) hash ^= LatePreOpenTime.GetHashCode();
      if (lateSessionOpenTime_ != null) hash ^= LateSessionOpenTime.GetHashCode();
      if (lateSessionCloseTime_ != null) hash ^= LateSessionCloseTime.GetHashCode();
      if (HasExEarlyClose != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasExEarlyClose.GetHashCode();
      if (exEarlyCloseTime_ != null) hash ^= ExEarlyCloseTime.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (TimeZone != global::Spiderrock.Protobuf.SRTimeZone.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) TimeZone);
      }
      if (MarketDayType != global::Spiderrock.Protobuf.MarketDayType.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) MarketDayType);
      }
      if (srCloseMarkTime_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(SrCloseMarkTime);
      }
      if (HasEarlySession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) HasEarlySession);
      }
      if (earlyPreOpenTime_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(EarlyPreOpenTime);
      }
      if (earlySessionOpenTime_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(EarlySessionOpenTime);
      }
      if (earlySessionCloseTime_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(EarlySessionCloseTime);
      }
      if (HasRegularSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) HasRegularSession);
      }
      if (regPreOpenTime_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(RegPreOpenTime);
      }
      if (regSessionOpenTime_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(RegSessionOpenTime);
      }
      if (regSessionCloseTime_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(RegSessionCloseTime);
      }
      if (HasLateSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) HasLateSession);
      }
      if (latePreOpenTime_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(LatePreOpenTime);
      }
      if (lateSessionOpenTime_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LateSessionOpenTime);
      }
      if (lateSessionCloseTime_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(LateSessionCloseTime);
      }
      if (HasExEarlyClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) HasExEarlyClose);
      }
      if (exEarlyCloseTime_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(ExEarlyCloseTime);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (TimeZone != global::Spiderrock.Protobuf.SRTimeZone.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) TimeZone);
      }
      if (MarketDayType != global::Spiderrock.Protobuf.MarketDayType.Unspecified) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) MarketDayType);
      }
      if (srCloseMarkTime_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(SrCloseMarkTime);
      }
      if (HasEarlySession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) HasEarlySession);
      }
      if (earlyPreOpenTime_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(EarlyPreOpenTime);
      }
      if (earlySessionOpenTime_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(EarlySessionOpenTime);
      }
      if (earlySessionCloseTime_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(EarlySessionCloseTime);
      }
      if (HasRegularSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) HasRegularSession);
      }
      if (regPreOpenTime_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(RegPreOpenTime);
      }
      if (regSessionOpenTime_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(RegSessionOpenTime);
      }
      if (regSessionCloseTime_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(RegSessionCloseTime);
      }
      if (HasLateSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) HasLateSession);
      }
      if (latePreOpenTime_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(LatePreOpenTime);
      }
      if (lateSessionOpenTime_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LateSessionOpenTime);
      }
      if (lateSessionCloseTime_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(LateSessionCloseTime);
      }
      if (HasExEarlyClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) HasExEarlyClose);
      }
      if (exEarlyCloseTime_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(ExEarlyCloseTime);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (TimeZone != global::Spiderrock.Protobuf.SRTimeZone.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeZone);
      }
      if (MarketDayType != global::Spiderrock.Protobuf.MarketDayType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketDayType);
      }
      if (srCloseMarkTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SrCloseMarkTime);
      }
      if (HasEarlySession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasEarlySession);
      }
      if (earlyPreOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EarlyPreOpenTime);
      }
      if (earlySessionOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EarlySessionOpenTime);
      }
      if (earlySessionCloseTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EarlySessionCloseTime);
      }
      if (HasRegularSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasRegularSession);
      }
      if (regPreOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegPreOpenTime);
      }
      if (regSessionOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegSessionOpenTime);
      }
      if (regSessionCloseTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegSessionCloseTime);
      }
      if (HasLateSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasLateSession);
      }
      if (latePreOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatePreOpenTime);
      }
      if (lateSessionOpenTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LateSessionOpenTime);
      }
      if (lateSessionCloseTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LateSessionCloseTime);
      }
      if (HasExEarlyClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasExEarlyClose);
      }
      if (exEarlyCloseTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExEarlyCloseTime);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarketHoursConfig other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.TimeZone != global::Spiderrock.Protobuf.SRTimeZone.Unspecified) {
        TimeZone = other.TimeZone;
      }
      if (other.MarketDayType != global::Spiderrock.Protobuf.MarketDayType.Unspecified) {
        MarketDayType = other.MarketDayType;
      }
      if (other.srCloseMarkTime_ != null) {
        if (srCloseMarkTime_ == null) {
          SrCloseMarkTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        SrCloseMarkTime.MergeFrom(other.SrCloseMarkTime);
      }
      if (other.HasEarlySession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasEarlySession = other.HasEarlySession;
      }
      if (other.earlyPreOpenTime_ != null) {
        if (earlyPreOpenTime_ == null) {
          EarlyPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EarlyPreOpenTime.MergeFrom(other.EarlyPreOpenTime);
      }
      if (other.earlySessionOpenTime_ != null) {
        if (earlySessionOpenTime_ == null) {
          EarlySessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EarlySessionOpenTime.MergeFrom(other.EarlySessionOpenTime);
      }
      if (other.earlySessionCloseTime_ != null) {
        if (earlySessionCloseTime_ == null) {
          EarlySessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EarlySessionCloseTime.MergeFrom(other.EarlySessionCloseTime);
      }
      if (other.HasRegularSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasRegularSession = other.HasRegularSession;
      }
      if (other.regPreOpenTime_ != null) {
        if (regPreOpenTime_ == null) {
          RegPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RegPreOpenTime.MergeFrom(other.RegPreOpenTime);
      }
      if (other.regSessionOpenTime_ != null) {
        if (regSessionOpenTime_ == null) {
          RegSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RegSessionOpenTime.MergeFrom(other.RegSessionOpenTime);
      }
      if (other.regSessionCloseTime_ != null) {
        if (regSessionCloseTime_ == null) {
          RegSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RegSessionCloseTime.MergeFrom(other.RegSessionCloseTime);
      }
      if (other.HasLateSession != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasLateSession = other.HasLateSession;
      }
      if (other.latePreOpenTime_ != null) {
        if (latePreOpenTime_ == null) {
          LatePreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LatePreOpenTime.MergeFrom(other.LatePreOpenTime);
      }
      if (other.lateSessionOpenTime_ != null) {
        if (lateSessionOpenTime_ == null) {
          LateSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LateSessionOpenTime.MergeFrom(other.LateSessionOpenTime);
      }
      if (other.lateSessionCloseTime_ != null) {
        if (lateSessionCloseTime_ == null) {
          LateSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LateSessionCloseTime.MergeFrom(other.LateSessionCloseTime);
      }
      if (other.HasExEarlyClose != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasExEarlyClose = other.HasExEarlyClose;
      }
      if (other.exEarlyCloseTime_ != null) {
        if (exEarlyCloseTime_ == null) {
          ExEarlyCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        ExEarlyCloseTime.MergeFrom(other.ExEarlyCloseTime);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            TimeZone = (global::Spiderrock.Protobuf.SRTimeZone) input.ReadEnum();
            break;
          }
          case 808: {
            MarketDayType = (global::Spiderrock.Protobuf.MarketDayType) input.ReadEnum();
            break;
          }
          case 818: {
            if (srCloseMarkTime_ == null) {
              SrCloseMarkTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SrCloseMarkTime);
            break;
          }
          case 824: {
            HasEarlySession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 834: {
            if (earlyPreOpenTime_ == null) {
              EarlyPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlyPreOpenTime);
            break;
          }
          case 842: {
            if (earlySessionOpenTime_ == null) {
              EarlySessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlySessionOpenTime);
            break;
          }
          case 850: {
            if (earlySessionCloseTime_ == null) {
              EarlySessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlySessionCloseTime);
            break;
          }
          case 856: {
            HasRegularSession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 866: {
            if (regPreOpenTime_ == null) {
              RegPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegPreOpenTime);
            break;
          }
          case 874: {
            if (regSessionOpenTime_ == null) {
              RegSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegSessionOpenTime);
            break;
          }
          case 882: {
            if (regSessionCloseTime_ == null) {
              RegSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegSessionCloseTime);
            break;
          }
          case 888: {
            HasLateSession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 898: {
            if (latePreOpenTime_ == null) {
              LatePreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LatePreOpenTime);
            break;
          }
          case 906: {
            if (lateSessionOpenTime_ == null) {
              LateSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LateSessionOpenTime);
            break;
          }
          case 914: {
            if (lateSessionCloseTime_ == null) {
              LateSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LateSessionCloseTime);
            break;
          }
          case 920: {
            HasExEarlyClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 930: {
            if (exEarlyCloseTime_ == null) {
              ExEarlyCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(ExEarlyCloseTime);
            break;
          }
          case 938: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.MarketHoursConfig.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            TimeZone = (global::Spiderrock.Protobuf.SRTimeZone) input.ReadEnum();
            break;
          }
          case 808: {
            MarketDayType = (global::Spiderrock.Protobuf.MarketDayType) input.ReadEnum();
            break;
          }
          case 818: {
            if (srCloseMarkTime_ == null) {
              SrCloseMarkTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SrCloseMarkTime);
            break;
          }
          case 824: {
            HasEarlySession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 834: {
            if (earlyPreOpenTime_ == null) {
              EarlyPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlyPreOpenTime);
            break;
          }
          case 842: {
            if (earlySessionOpenTime_ == null) {
              EarlySessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlySessionOpenTime);
            break;
          }
          case 850: {
            if (earlySessionCloseTime_ == null) {
              EarlySessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EarlySessionCloseTime);
            break;
          }
          case 856: {
            HasRegularSession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 866: {
            if (regPreOpenTime_ == null) {
              RegPreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegPreOpenTime);
            break;
          }
          case 874: {
            if (regSessionOpenTime_ == null) {
              RegSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegSessionOpenTime);
            break;
          }
          case 882: {
            if (regSessionCloseTime_ == null) {
              RegSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RegSessionCloseTime);
            break;
          }
          case 888: {
            HasLateSession = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 898: {
            if (latePreOpenTime_ == null) {
              LatePreOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LatePreOpenTime);
            break;
          }
          case 906: {
            if (lateSessionOpenTime_ == null) {
              LateSessionOpenTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LateSessionOpenTime);
            break;
          }
          case 914: {
            if (lateSessionCloseTime_ == null) {
              LateSessionCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LateSessionCloseTime);
            break;
          }
          case 920: {
            HasExEarlyClose = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 930: {
            if (exEarlyCloseTime_ == null) {
              ExEarlyCloseTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(ExEarlyCloseTime);
            break;
          }
          case 938: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarketHoursConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.MarketHoursConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          secType_ = other.secType_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          tradingPeriod_ = other.tradingPeriod_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        /// <summary>
        /// note: should be "*-ANY-ANY" (wildcard) for the per-TradingPeriod default MarketHoursConfig messages
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "trading_period" field.</summary>
        public const int TradingPeriodFieldNumber = 13;
        private global::Spiderrock.Protobuf.TradingPeriod tradingPeriod_ = global::Spiderrock.Protobuf.TradingPeriod.Unspecified;
        /// <summary>
        /// note: this trading period should be the same for all tradeDates for each [ticker/secType] pair
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TradingPeriod TradingPeriod {
          get { return tradingPeriod_; }
          set {
            tradingPeriod_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (SecType != other.SecType) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (TradingPeriod != other.TradingPeriod) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (TradingPeriod != global::Spiderrock.Protobuf.TradingPeriod.Unspecified) hash ^= TradingPeriod.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (TradingPeriod != global::Spiderrock.Protobuf.TradingPeriod.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) TradingPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (TradingPeriod != global::Spiderrock.Protobuf.TradingPeriod.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) TradingPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (TradingPeriod != global::Spiderrock.Protobuf.TradingPeriod.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradingPeriod);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.TradingPeriod != global::Spiderrock.Protobuf.TradingPeriod.Unspecified) {
            TradingPeriod = other.TradingPeriod;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                TradingPeriod = (global::Spiderrock.Protobuf.TradingPeriod) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                TradingPeriod = (global::Spiderrock.Protobuf.TradingPeriod) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
