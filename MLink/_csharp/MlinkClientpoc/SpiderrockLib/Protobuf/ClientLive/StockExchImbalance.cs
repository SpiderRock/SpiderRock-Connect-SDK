// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientLive/StockExchImbalance.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientLive/StockExchImbalance.proto</summary>
  public static partial class StockExchImbalanceReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientLive/StockExchImbalance.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockExchImbalanceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRMaXZlL1N0b2NrRXhjaEltYmFsYW5jZS5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i9gYKElN0b2Nr",
            "RXhjaEltYmFsYW5jZRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlN0b2NrRXhjaEltYmFsYW5jZS5QS2V5EhQKDHJlZmVy",
            "ZW5jZV9weBhkIAEoAhISCgpwYWlyZWRfcXR5GGcgASgFEhsKE3RvdGFsX2lt",
            "YmFsYW5jZV9xdHkYaiABKAUSHAoUbWFya2V0X2ltYmFsYW5jZV9xdHkYbSAB",
            "KAUSOgoOaW1iYWxhbmNlX3NpZGUYcCABKA4yIi5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkltYmFsYW5jZVNpZGUSHgoWY29udGludW91c19ib29rX2Nscl9weBhz",
            "IAEoAhIbChNjbG9zaW5nX29ubHlfY2xyX3B4GHYgASgCEhYKDnNzcl9maWxs",
            "aW5nX3B4GHkgASgCEhsKE2luZGljYXRpdmVfbWF0Y2hfcHgYfCABKAISFAoM",
            "dXBwZXJfY29sbGFyGH8gASgCEhUKDGxvd2VyX2NvbGxhchiCASABKAISOwoO",
            "YXVjdGlvbl9zdGF0dXMYhQEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5B",
            "dWN0aW9uU3RhdHVzEjIKDWZyZWV6ZV9zdGF0dXMYiAEgASgOMhouc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5ZZXNObxIXCg5udW1fZXh0ZW5zaW9ucxiLASABKAUS",
            "MAoLc291cmNlX3RpbWUYjgEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIWCg1uZXRfdGltZXN0YW1wGJEBIAEoAxraAQoEUEtleRIuCgZ0aWNr",
            "ZXIYCiABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIwCgxh",
            "dWN0aW9uX3RpbWUYCyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EjgKDGF1Y3Rpb25fdHlwZRgMIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QXVjdGlvblJlYXNvbhI2CghleGNoYW5nZRgNIAEoDjIkLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuUHJpbWFyeUV4Y2hhbmdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockExchImbalance), global::Spiderrock.Protobuf.StockExchImbalance.Parser, new[]{ "Meta", "Pkey", "ReferencePx", "PairedQty", "TotalImbalanceQty", "MarketImbalanceQty", "ImbalanceSide", "ContinuousBookClrPx", "ClosingOnlyClrPx", "SsrFillingPx", "IndicativeMatchPx", "UpperCollar", "LowerCollar", "AuctionStatus", "FreezeStatus", "NumExtensions", "SourceTime", "NetTimestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey), global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey.Parser, new[]{ "Ticker", "AuctionTime", "AuctionType", "Exchange" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///StockExchImbalance records contain live exchange closing auction imbalance details.  Imbalance information can be available from more than one exchange for each ticker.
  ///Final StockExchImbalance records are published to the SpiderRock elastic cluster nightly after the auction close.
  /// </summary>
  public sealed partial class StockExchImbalance : pb::IMessage<StockExchImbalance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StockExchImbalance> _parser = new pb::MessageParser<StockExchImbalance>(() => new StockExchImbalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StockExchImbalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.StockExchImbalanceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockExchImbalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockExchImbalance(StockExchImbalance other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      referencePx_ = other.referencePx_;
      pairedQty_ = other.pairedQty_;
      totalImbalanceQty_ = other.totalImbalanceQty_;
      marketImbalanceQty_ = other.marketImbalanceQty_;
      imbalanceSide_ = other.imbalanceSide_;
      continuousBookClrPx_ = other.continuousBookClrPx_;
      closingOnlyClrPx_ = other.closingOnlyClrPx_;
      ssrFillingPx_ = other.ssrFillingPx_;
      indicativeMatchPx_ = other.indicativeMatchPx_;
      upperCollar_ = other.upperCollar_;
      lowerCollar_ = other.lowerCollar_;
      auctionStatus_ = other.auctionStatus_;
      freezeStatus_ = other.freezeStatus_;
      numExtensions_ = other.numExtensions_;
      sourceTime_ = other.sourceTime_ != null ? other.sourceTime_.Clone() : null;
      netTimestamp_ = other.netTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockExchImbalance Clone() {
      return new StockExchImbalance(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "reference_px" field.</summary>
    public const int ReferencePxFieldNumber = 100;
    private float referencePx_;
    /// <summary>
    /// For Pillar-powered markets, the Reference Price is used to calculate the Indicative Match Price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ReferencePx {
      get { return referencePx_; }
      set {
        referencePx_ = value;
      }
    }

    /// <summary>Field number for the "paired_qty" field.</summary>
    public const int PairedQtyFieldNumber = 103;
    private int pairedQty_;
    /// <summary>
    /// For Pillar-powered markets, the number of shares paired off at the Indicative Match Price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PairedQty {
      get { return pairedQty_; }
      set {
        pairedQty_ = value;
      }
    }

    /// <summary>Field number for the "total_imbalance_qty" field.</summary>
    public const int TotalImbalanceQtyFieldNumber = 106;
    private int totalImbalanceQty_;
    /// <summary>
    /// For Pillar-powered markets, the total imbalance quantity at the Indicative Match Price. If the value is negative, the imbalance is on the sell side; if the value is positive, the imbalance is on the buy side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalImbalanceQty {
      get { return totalImbalanceQty_; }
      set {
        totalImbalanceQty_ = value;
      }
    }

    /// <summary>Field number for the "market_imbalance_qty" field.</summary>
    public const int MarketImbalanceQtyFieldNumber = 109;
    private int marketImbalanceQty_;
    /// <summary>
    /// For Pillar-powered markets, the total market order imbalance quantity at the Indicative Match Price. If the value is negative, the imbalance is on the sell side; if the value is positive the imbalance is on the buy side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarketImbalanceQty {
      get { return marketImbalanceQty_; }
      set {
        marketImbalanceQty_ = value;
      }
    }

    /// <summary>Field number for the "imbalance_side" field.</summary>
    public const int ImbalanceSideFieldNumber = 112;
    private global::Spiderrock.Protobuf.ImbalanceSide imbalanceSide_ = global::Spiderrock.Protobuf.ImbalanceSide.Unspecified;
    /// <summary>
    /// The side of the TotalImbalanceQty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ImbalanceSide ImbalanceSide {
      get { return imbalanceSide_; }
      set {
        imbalanceSide_ = value;
      }
    }

    /// <summary>Field number for the "continuous_book_clr_px" field.</summary>
    public const int ContinuousBookClrPxFieldNumber = 115;
    private float continuousBookClrPx_;
    /// <summary>
    /// For Pillar-powered markets, the price at which all interest on the book can trade, including auction and imbalance offset interest, and disregarding auction collars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContinuousBookClrPx {
      get { return continuousBookClrPx_; }
      set {
        continuousBookClrPx_ = value;
      }
    }

    /// <summary>Field number for the "closing_only_clr_px" field.</summary>
    public const int ClosingOnlyClrPxFieldNumber = 118;
    private float closingOnlyClrPx_;
    /// <summary>
    /// For Pillar-powered markets, the price at which all eligible auction-only interest would trade, subject to auction collars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClosingOnlyClrPx {
      get { return closingOnlyClrPx_; }
      set {
        closingOnlyClrPx_ = value;
      }
    }

    /// <summary>Field number for the "ssr_filling_px" field.</summary>
    public const int SsrFillingPxFieldNumber = 121;
    private float ssrFillingPx_;
    /// <summary>
    /// For Pillar-powered markets, not supported and defaulted to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SsrFillingPx {
      get { return ssrFillingPx_; }
      set {
        ssrFillingPx_ = value;
      }
    }

    /// <summary>Field number for the "indicative_match_px" field.</summary>
    public const int IndicativeMatchPxFieldNumber = 124;
    private float indicativeMatchPx_;
    /// <summary>
    /// For Pillar-powered markets, the price that has the highest executable volume of auction-eligible shares, subject to auction collars. It includes the non-displayed quantity of Reserve Orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IndicativeMatchPx {
      get { return indicativeMatchPx_; }
      set {
        indicativeMatchPx_ = value;
      }
    }

    /// <summary>Field number for the "upper_collar" field.</summary>
    public const int UpperCollarFieldNumber = 127;
    private float upperCollar_;
    /// <summary>
    /// If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UpperCollar {
      get { return upperCollar_; }
      set {
        upperCollar_ = value;
      }
    }

    /// <summary>Field number for the "lower_collar" field.</summary>
    public const int LowerCollarFieldNumber = 130;
    private float lowerCollar_;
    /// <summary>
    /// If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LowerCollar {
      get { return lowerCollar_; }
      set {
        lowerCollar_ = value;
      }
    }

    /// <summary>Field number for the "auction_status" field.</summary>
    public const int AuctionStatusFieldNumber = 133;
    private global::Spiderrock.Protobuf.AuctionStatus auctionStatus_ = global::Spiderrock.Protobuf.AuctionStatus.Unspecified;
    /// <summary>
    /// Indicates whether the auction will run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionStatus AuctionStatus {
      get { return auctionStatus_; }
      set {
        auctionStatus_ = value;
      }
    }

    /// <summary>Field number for the "freeze_status" field.</summary>
    public const int FreezeStatusFieldNumber = 136;
    private global::Spiderrock.Protobuf.YesNo freezeStatus_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Indicates freeze
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo FreezeStatus {
      get { return freezeStatus_; }
      set {
        freezeStatus_ = value;
      }
    }

    /// <summary>Field number for the "num_extensions" field.</summary>
    public const int NumExtensionsFieldNumber = 139;
    private int numExtensions_;
    /// <summary>
    /// Number of times the halt period has been extended.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumExtensions {
      get { return numExtensions_; }
      set {
        numExtensions_ = value;
      }
    }

    /// <summary>Field number for the "source_time" field.</summary>
    public const int SourceTimeFieldNumber = 142;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sourceTime_;
    /// <summary>
    /// Time record was generated in the order book (in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SourceTime {
      get { return sourceTime_; }
      set {
        sourceTime_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 145;
    private long netTimestamp_;
    /// <summary>
    /// PTP timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StockExchImbalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StockExchImbalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReferencePx, other.ReferencePx)) return false;
      if (PairedQty != other.PairedQty) return false;
      if (TotalImbalanceQty != other.TotalImbalanceQty) return false;
      if (MarketImbalanceQty != other.MarketImbalanceQty) return false;
      if (ImbalanceSide != other.ImbalanceSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContinuousBookClrPx, other.ContinuousBookClrPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClosingOnlyClrPx, other.ClosingOnlyClrPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SsrFillingPx, other.SsrFillingPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IndicativeMatchPx, other.IndicativeMatchPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UpperCollar, other.UpperCollar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LowerCollar, other.LowerCollar)) return false;
      if (AuctionStatus != other.AuctionStatus) return false;
      if (FreezeStatus != other.FreezeStatus) return false;
      if (NumExtensions != other.NumExtensions) return false;
      if (!object.Equals(SourceTime, other.SourceTime)) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ReferencePx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReferencePx);
      if (PairedQty != 0) hash ^= PairedQty.GetHashCode();
      if (TotalImbalanceQty != 0) hash ^= TotalImbalanceQty.GetHashCode();
      if (MarketImbalanceQty != 0) hash ^= MarketImbalanceQty.GetHashCode();
      if (ImbalanceSide != global::Spiderrock.Protobuf.ImbalanceSide.Unspecified) hash ^= ImbalanceSide.GetHashCode();
      if (ContinuousBookClrPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContinuousBookClrPx);
      if (ClosingOnlyClrPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClosingOnlyClrPx);
      if (SsrFillingPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SsrFillingPx);
      if (IndicativeMatchPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IndicativeMatchPx);
      if (UpperCollar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UpperCollar);
      if (LowerCollar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LowerCollar);
      if (AuctionStatus != global::Spiderrock.Protobuf.AuctionStatus.Unspecified) hash ^= AuctionStatus.GetHashCode();
      if (FreezeStatus != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= FreezeStatus.GetHashCode();
      if (NumExtensions != 0) hash ^= NumExtensions.GetHashCode();
      if (sourceTime_ != null) hash ^= SourceTime.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ReferencePx != 0F) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(ReferencePx);
      }
      if (PairedQty != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(PairedQty);
      }
      if (TotalImbalanceQty != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(TotalImbalanceQty);
      }
      if (MarketImbalanceQty != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(MarketImbalanceQty);
      }
      if (ImbalanceSide != global::Spiderrock.Protobuf.ImbalanceSide.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ImbalanceSide);
      }
      if (ContinuousBookClrPx != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(ContinuousBookClrPx);
      }
      if (ClosingOnlyClrPx != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(ClosingOnlyClrPx);
      }
      if (SsrFillingPx != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(SsrFillingPx);
      }
      if (IndicativeMatchPx != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(IndicativeMatchPx);
      }
      if (UpperCollar != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(UpperCollar);
      }
      if (LowerCollar != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(LowerCollar);
      }
      if (AuctionStatus != global::Spiderrock.Protobuf.AuctionStatus.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) AuctionStatus);
      }
      if (FreezeStatus != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) FreezeStatus);
      }
      if (NumExtensions != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(NumExtensions);
      }
      if (sourceTime_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(SourceTime);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(136, 9);
        output.WriteInt64(NetTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ReferencePx != 0F) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(ReferencePx);
      }
      if (PairedQty != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(PairedQty);
      }
      if (TotalImbalanceQty != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(TotalImbalanceQty);
      }
      if (MarketImbalanceQty != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(MarketImbalanceQty);
      }
      if (ImbalanceSide != global::Spiderrock.Protobuf.ImbalanceSide.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) ImbalanceSide);
      }
      if (ContinuousBookClrPx != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(ContinuousBookClrPx);
      }
      if (ClosingOnlyClrPx != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(ClosingOnlyClrPx);
      }
      if (SsrFillingPx != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(SsrFillingPx);
      }
      if (IndicativeMatchPx != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(IndicativeMatchPx);
      }
      if (UpperCollar != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(UpperCollar);
      }
      if (LowerCollar != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(LowerCollar);
      }
      if (AuctionStatus != global::Spiderrock.Protobuf.AuctionStatus.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) AuctionStatus);
      }
      if (FreezeStatus != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) FreezeStatus);
      }
      if (NumExtensions != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(NumExtensions);
      }
      if (sourceTime_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(SourceTime);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(136, 9);
        output.WriteInt64(NetTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ReferencePx != 0F) {
        size += 2 + 4;
      }
      if (PairedQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PairedQty);
      }
      if (TotalImbalanceQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalImbalanceQty);
      }
      if (MarketImbalanceQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketImbalanceQty);
      }
      if (ImbalanceSide != global::Spiderrock.Protobuf.ImbalanceSide.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ImbalanceSide);
      }
      if (ContinuousBookClrPx != 0F) {
        size += 2 + 4;
      }
      if (ClosingOnlyClrPx != 0F) {
        size += 2 + 4;
      }
      if (SsrFillingPx != 0F) {
        size += 2 + 4;
      }
      if (IndicativeMatchPx != 0F) {
        size += 2 + 4;
      }
      if (UpperCollar != 0F) {
        size += 2 + 4;
      }
      if (LowerCollar != 0F) {
        size += 2 + 4;
      }
      if (AuctionStatus != global::Spiderrock.Protobuf.AuctionStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionStatus);
      }
      if (FreezeStatus != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FreezeStatus);
      }
      if (NumExtensions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumExtensions);
      }
      if (sourceTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SourceTime);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StockExchImbalance other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ReferencePx != 0F) {
        ReferencePx = other.ReferencePx;
      }
      if (other.PairedQty != 0) {
        PairedQty = other.PairedQty;
      }
      if (other.TotalImbalanceQty != 0) {
        TotalImbalanceQty = other.TotalImbalanceQty;
      }
      if (other.MarketImbalanceQty != 0) {
        MarketImbalanceQty = other.MarketImbalanceQty;
      }
      if (other.ImbalanceSide != global::Spiderrock.Protobuf.ImbalanceSide.Unspecified) {
        ImbalanceSide = other.ImbalanceSide;
      }
      if (other.ContinuousBookClrPx != 0F) {
        ContinuousBookClrPx = other.ContinuousBookClrPx;
      }
      if (other.ClosingOnlyClrPx != 0F) {
        ClosingOnlyClrPx = other.ClosingOnlyClrPx;
      }
      if (other.SsrFillingPx != 0F) {
        SsrFillingPx = other.SsrFillingPx;
      }
      if (other.IndicativeMatchPx != 0F) {
        IndicativeMatchPx = other.IndicativeMatchPx;
      }
      if (other.UpperCollar != 0F) {
        UpperCollar = other.UpperCollar;
      }
      if (other.LowerCollar != 0F) {
        LowerCollar = other.LowerCollar;
      }
      if (other.AuctionStatus != global::Spiderrock.Protobuf.AuctionStatus.Unspecified) {
        AuctionStatus = other.AuctionStatus;
      }
      if (other.FreezeStatus != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        FreezeStatus = other.FreezeStatus;
      }
      if (other.NumExtensions != 0) {
        NumExtensions = other.NumExtensions;
      }
      if (other.sourceTime_ != null) {
        if (sourceTime_ == null) {
          SourceTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SourceTime.MergeFrom(other.SourceTime);
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 805: {
            ReferencePx = input.ReadFloat();
            break;
          }
          case 824: {
            PairedQty = input.ReadInt32();
            break;
          }
          case 848: {
            TotalImbalanceQty = input.ReadInt32();
            break;
          }
          case 872: {
            MarketImbalanceQty = input.ReadInt32();
            break;
          }
          case 896: {
            ImbalanceSide = (global::Spiderrock.Protobuf.ImbalanceSide) input.ReadEnum();
            break;
          }
          case 925: {
            ContinuousBookClrPx = input.ReadFloat();
            break;
          }
          case 949: {
            ClosingOnlyClrPx = input.ReadFloat();
            break;
          }
          case 973: {
            SsrFillingPx = input.ReadFloat();
            break;
          }
          case 997: {
            IndicativeMatchPx = input.ReadFloat();
            break;
          }
          case 1021: {
            UpperCollar = input.ReadFloat();
            break;
          }
          case 1045: {
            LowerCollar = input.ReadFloat();
            break;
          }
          case 1064: {
            AuctionStatus = (global::Spiderrock.Protobuf.AuctionStatus) input.ReadEnum();
            break;
          }
          case 1088: {
            FreezeStatus = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1112: {
            NumExtensions = input.ReadInt32();
            break;
          }
          case 1138: {
            if (sourceTime_ == null) {
              SourceTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SourceTime);
            break;
          }
          case 1160: {
            NetTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockExchImbalance.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 805: {
            ReferencePx = input.ReadFloat();
            break;
          }
          case 824: {
            PairedQty = input.ReadInt32();
            break;
          }
          case 848: {
            TotalImbalanceQty = input.ReadInt32();
            break;
          }
          case 872: {
            MarketImbalanceQty = input.ReadInt32();
            break;
          }
          case 896: {
            ImbalanceSide = (global::Spiderrock.Protobuf.ImbalanceSide) input.ReadEnum();
            break;
          }
          case 925: {
            ContinuousBookClrPx = input.ReadFloat();
            break;
          }
          case 949: {
            ClosingOnlyClrPx = input.ReadFloat();
            break;
          }
          case 973: {
            SsrFillingPx = input.ReadFloat();
            break;
          }
          case 997: {
            IndicativeMatchPx = input.ReadFloat();
            break;
          }
          case 1021: {
            UpperCollar = input.ReadFloat();
            break;
          }
          case 1045: {
            LowerCollar = input.ReadFloat();
            break;
          }
          case 1064: {
            AuctionStatus = (global::Spiderrock.Protobuf.AuctionStatus) input.ReadEnum();
            break;
          }
          case 1088: {
            FreezeStatus = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1112: {
            NumExtensions = input.ReadInt32();
            break;
          }
          case 1138: {
            if (sourceTime_ == null) {
              SourceTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SourceTime);
            break;
          }
          case 1160: {
            NetTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StockExchImbalance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.StockExchImbalance.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          auctionTime_ = other.auctionTime_ != null ? other.auctionTime_.Clone() : null;
          auctionType_ = other.auctionType_;
          exchange_ = other.exchange_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "auction_time" field.</summary>
        public const int AuctionTimeFieldNumber = 11;
        private global::Google.Protobuf.WellKnownTypes.Timestamp auctionTime_;
        /// <summary>
        /// Projected Auction Time (hhmm).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp AuctionTime {
          get { return auctionTime_; }
          set {
            auctionTime_ = value;
          }
        }

        /// <summary>Field number for the "auction_type" field.</summary>
        public const int AuctionTypeFieldNumber = 12;
        private global::Spiderrock.Protobuf.AuctionReason auctionType_ = global::Spiderrock.Protobuf.AuctionReason.Unspecified;
        /// <summary>
        /// Auction type: None; Open; Market; Halt; Closing; RegulatoryImbalance
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.AuctionReason AuctionType {
          get { return auctionType_; }
          set {
            auctionType_ = value;
          }
        }

        /// <summary>Field number for the "exchange" field.</summary>
        public const int ExchangeFieldNumber = 13;
        private global::Spiderrock.Protobuf.PrimaryExchange exchange_ = global::Spiderrock.Protobuf.PrimaryExchange.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.PrimaryExchange Exchange {
          get { return exchange_; }
          set {
            exchange_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (!object.Equals(AuctionTime, other.AuctionTime)) return false;
          if (AuctionType != other.AuctionType) return false;
          if (Exchange != other.Exchange) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (auctionTime_ != null) hash ^= AuctionTime.GetHashCode();
          if (AuctionType != global::Spiderrock.Protobuf.AuctionReason.Unspecified) hash ^= AuctionType.GetHashCode();
          if (Exchange != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) hash ^= Exchange.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (auctionTime_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(AuctionTime);
          }
          if (AuctionType != global::Spiderrock.Protobuf.AuctionReason.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionType);
          }
          if (Exchange != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) Exchange);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (auctionTime_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(AuctionTime);
          }
          if (AuctionType != global::Spiderrock.Protobuf.AuctionReason.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionType);
          }
          if (Exchange != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) Exchange);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (auctionTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuctionTime);
          }
          if (AuctionType != global::Spiderrock.Protobuf.AuctionReason.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
          }
          if (Exchange != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.auctionTime_ != null) {
            if (auctionTime_ == null) {
              AuctionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            AuctionTime.MergeFrom(other.AuctionTime);
          }
          if (other.AuctionType != global::Spiderrock.Protobuf.AuctionReason.Unspecified) {
            AuctionType = other.AuctionType;
          }
          if (other.Exchange != global::Spiderrock.Protobuf.PrimaryExchange.Unspecified) {
            Exchange = other.Exchange;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                if (auctionTime_ == null) {
                  AuctionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(AuctionTime);
                break;
              }
              case 96: {
                AuctionType = (global::Spiderrock.Protobuf.AuctionReason) input.ReadEnum();
                break;
              }
              case 104: {
                Exchange = (global::Spiderrock.Protobuf.PrimaryExchange) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                if (auctionTime_ == null) {
                  AuctionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(AuctionTime);
                break;
              }
              case 96: {
                AuctionType = (global::Spiderrock.Protobuf.AuctionReason) input.ReadEnum();
                break;
              }
              case 104: {
                Exchange = (global::Spiderrock.Protobuf.PrimaryExchange) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
