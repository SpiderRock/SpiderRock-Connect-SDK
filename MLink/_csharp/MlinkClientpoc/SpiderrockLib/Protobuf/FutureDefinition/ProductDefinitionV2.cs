// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/FutureDefinition/ProductDefinitionV2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/FutureDefinition/ProductDefinitionV2.proto</summary>
  public static partial class ProductDefinitionV2Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/FutureDefinition/ProductDefinitionV2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProductDefinitionV2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNQcm90b2J1Zi9GdXR1cmVEZWZpbml0aW9uL1Byb2R1Y3REZWZpbml0aW9u",
            "VjIucHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29t",
            "bW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIrEQ",
            "ChNQcm9kdWN0RGVmaW5pdGlvblYyEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzIt",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuUHJvZHVjdERlZmluaXRpb25WMi5QS2V5",
            "EhQKC3NlY3VyaXR5X2lEGPgBIAEoCRIuCgZ0aWNrZXIYZyABKAsyHi5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRITCgtzUnNwcmVhZF9pRBhoIAEo",
            "AxI4Cg1wcm9kdWN0X2NsYXNzGGogASgOMiEuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5Qcm9kdWN0Q2xhc3MSFAoMdW5kZXJsaWVyX2lEGG0gASgDEi8KB3VuZF9r",
            "ZXkYcCABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRIyCgh1",
            "bmRfdHlwZRhzIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3BkcktleVR5",
            "cGUSFQoNcHJvZHVjdF9ncm91cBh2IAEoCRIWCg5zZWN1cml0eV9ncm91cBh5",
            "IAEoCRIZChFtYXJrZXRfc2VnbWVudF9pRBh8IAEoBRIRCghyaWNfY29kZRj6",
            "ASABKAkSFgoNc2VjdXJpdHlfZGVzYxj5ASABKAkSEQoIZXhjaGFuZ2UYggEg",
            "ASgJEjcKDHByb2R1Y3RfdHlwZRiFASABKA4yIC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlByb2R1Y3RUeXBlEjcKDHByb2R1Y3RfdGVybRiIASABKA4yIC5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlByb2R1Y3RUZXJtEkIKEnByb2R1Y3RfaW5kZXhf",
            "dHlwZRiLASABKA4yJS5zcGlkZXJyb2NrLnByb3RvYnVmLlByb2R1Y3RJbmRl",
            "eFR5cGUSFQoMcHJvZHVjdF9yYXRlGI4BIAEoAhIWCg1jb250cmFjdF9zaXpl",
            "GJEBIAEoAhI5Cg1jb250cmFjdF91bml0GJQBIAEoDjIhLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuQ29udHJhY3RVbml0EjcKDHByaWNlX2Zvcm1hdBiXASABKA4y",
            "IC5zcGlkZXJyb2NrLnByb3RvYnVmLlByaWNlRm9ybWF0EhYKDW1pbl90aWNr",
            "X3NpemUYmgEgASgBEhcKDmRpc3BsYXlfZmFjdG9yGJ0BIAEoARIVCgxzdHJp",
            "a2Vfc2NhbGUYoAEgASgBEhUKDG1pbl9sb3Rfc2l6ZRijASABKAUSEwoKYm9v",
            "a19kZXB0aBimASABKAUSGwoSaW1wbGllZF9ib29rX2RlcHRoGKkBIAEoBRIX",
            "Cg5pbXBfbWFya2V0X2luZBisASABKAUSIwoabWluX3ByaWNlX2luY3JlbWVu",
            "dF9hbW91bnQYrwEgASgCEhIKCXBhcl92YWx1ZRiyASABKAISGAoPY29udF9t",
            "dWx0aXBsaWVyGLUBIAEoAhISCgljYWJfcHJpY2UYuAEgASgBEjIKCnRyYWRl",
            "X2N1cnIYuwEgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5DdXJyZW5jeRIz",
            "CgtzZXR0bGVfY3Vychi+ASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkN1",
            "cnJlbmN5EjMKC3N0cmlrZV9jdXJyGMEBIAEoDjIdLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQ3VycmVuY3kSLwoKZXhwaXJhdGlvbhjEASABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEi8KCG1hdHVyaXR5GMcBIAEoCzIcLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuRGF0ZUtleRI5Cg1leGVyY2lzZV90eXBlGMoBIAEo",
            "DjIhLnNwaWRlcnJvY2sucHJvdG9idWYuRXhlcmNpc2VUeXBlEjEKDHVzZXJf",
            "ZGVmaW5lZBjNASABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEhkK",
            "EGRlY2F5X3N0YXJ0X3llYXIY0AEgASgFEhoKEWRlY2F5X3N0YXJ0X21vbnRo",
            "GNMBIAEoBRIYCg9kZWNheV9zdGFydF9kYXkY1gEgASgFEhIKCWRlY2F5X3F0",
            "eRjZASABKAUSFAoLcHJpY2VfcmF0aW8Y3AEgASgBEi4KCXRpbWVzdGFtcBj3",
            "ASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjwKBGxlZ3MY3wEg",
            "AygLMi0uc3BpZGVycm9jay5wcm90b2J1Zi5Qcm9kdWN0RGVmaW5pdGlvblYy",
            "LkxlZ3MaawoEUEtleRIvCgdzZWNfa2V5GAogASgLMh4uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5PcHRpb25LZXkSMgoIc2VjX3R5cGUYCyABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlGuEBCgRMZWdzEg8KBmxlZ19pRBji",
            "ASABKAkSMAoHc2VjX2tleRjlASABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVm",
            "Lk9wdGlvbktleRIzCghzZWNfdHlwZRjoASABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlNwZHJLZXlUeXBlEisKBHNpZGUY6wEgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5CdXlTZWxsEg4KBXJhdGlvGO4BIAEoDRISCglyZWZfZGVs",
            "dGEY8QEgASgCEhAKB3JlZl9wcmMY9AEgASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ProductDefinitionV2), global::Spiderrock.Protobuf.ProductDefinitionV2.Parser, new[]{ "Meta", "Pkey", "SecurityID", "Ticker", "SRspreadID", "ProductClass", "UnderlierID", "UndKey", "UndType", "ProductGroup", "SecurityGroup", "MarketSegmentID", "RicCode", "SecurityDesc", "Exchange", "ProductType", "ProductTerm", "ProductIndexType", "ProductRate", "ContractSize", "ContractUnit", "PriceFormat", "MinTickSize", "DisplayFactor", "StrikeScale", "MinLotSize", "BookDepth", "ImpliedBookDepth", "ImpMarketInd", "MinPriceIncrementAmount", "ParValue", "ContMultiplier", "CabPrice", "TradeCurr", "SettleCurr", "StrikeCurr", "Expiration", "Maturity", "ExerciseType", "UserDefined", "DecayStartYear", "DecayStartMonth", "DecayStartDay", "DecayQty", "PriceRatio", "Timestamp", "Legs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey), global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey.Parser, new[]{ "SecKey", "SecType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs), global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs.Parser, new[]{ "LegID", "SecKey", "SecType", "Side", "Ratio", "RefDelta", "RefPrc" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpiderRock normalized exchange product definitions.  Includes future, option, and spread definitions from a number of exchanges.  TickerDefinitions, RootDefinitions and CCodeDefinitions are consistent with these records.
  /// </summary>
  public sealed partial class ProductDefinitionV2 : pb::IMessage<ProductDefinitionV2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProductDefinitionV2> _parser = new pb::MessageParser<ProductDefinitionV2>(() => new ProductDefinitionV2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProductDefinitionV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ProductDefinitionV2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductDefinitionV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductDefinitionV2(ProductDefinitionV2 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      securityID_ = other.securityID_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      sRspreadID_ = other.sRspreadID_;
      productClass_ = other.productClass_;
      underlierID_ = other.underlierID_;
      undKey_ = other.undKey_ != null ? other.undKey_.Clone() : null;
      undType_ = other.undType_;
      productGroup_ = other.productGroup_;
      securityGroup_ = other.securityGroup_;
      marketSegmentID_ = other.marketSegmentID_;
      ricCode_ = other.ricCode_;
      securityDesc_ = other.securityDesc_;
      exchange_ = other.exchange_;
      productType_ = other.productType_;
      productTerm_ = other.productTerm_;
      productIndexType_ = other.productIndexType_;
      productRate_ = other.productRate_;
      contractSize_ = other.contractSize_;
      contractUnit_ = other.contractUnit_;
      priceFormat_ = other.priceFormat_;
      minTickSize_ = other.minTickSize_;
      displayFactor_ = other.displayFactor_;
      strikeScale_ = other.strikeScale_;
      minLotSize_ = other.minLotSize_;
      bookDepth_ = other.bookDepth_;
      impliedBookDepth_ = other.impliedBookDepth_;
      impMarketInd_ = other.impMarketInd_;
      minPriceIncrementAmount_ = other.minPriceIncrementAmount_;
      parValue_ = other.parValue_;
      contMultiplier_ = other.contMultiplier_;
      cabPrice_ = other.cabPrice_;
      tradeCurr_ = other.tradeCurr_;
      settleCurr_ = other.settleCurr_;
      strikeCurr_ = other.strikeCurr_;
      expiration_ = other.expiration_ != null ? other.expiration_.Clone() : null;
      maturity_ = other.maturity_ != null ? other.maturity_.Clone() : null;
      exerciseType_ = other.exerciseType_;
      userDefined_ = other.userDefined_;
      decayStartYear_ = other.decayStartYear_;
      decayStartMonth_ = other.decayStartMonth_;
      decayStartDay_ = other.decayStartDay_;
      decayQty_ = other.decayQty_;
      priceRatio_ = other.priceRatio_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      legs_ = other.legs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductDefinitionV2 Clone() {
      return new ProductDefinitionV2(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "security_iD" field.</summary>
    public const int SecurityIDFieldNumber = 248;
    private string securityID_ = "";
    /// <summary>
    /// unique exchange id (exch assigned)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityID {
      get { return securityID_; }
      set {
        securityID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 103;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// master underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "sRspread_iD" field.</summary>
    public const int SRspreadIDFieldNumber = 104;
    private long sRspreadID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SRspreadID {
      get { return sRspreadID_; }
      set {
        sRspreadID_ = value;
      }
    }

    /// <summary>Field number for the "product_class" field.</summary>
    public const int ProductClassFieldNumber = 106;
    private global::Spiderrock.Protobuf.ProductClass productClass_ = global::Spiderrock.Protobuf.ProductClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProductClass ProductClass {
      get { return productClass_; }
      set {
        productClass_ = value;
      }
    }

    /// <summary>Field number for the "underlier_iD" field.</summary>
    public const int UnderlierIDFieldNumber = 109;
    private long underlierID_;
    /// <summary>
    /// underlier product id (option only) [securityID of undKey/undType product]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UnderlierID {
      get { return underlierID_; }
      set {
        underlierID_ = value;
      }
    }

    /// <summary>Field number for the "und_key" field.</summary>
    public const int UndKeyFieldNumber = 112;
    private global::Spiderrock.Protobuf.ExpiryKey undKey_;
    /// <summary>
    /// SR Underlier Security Key [can be partially filled in (look at undType)] (option only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UndKey {
      get { return undKey_; }
      set {
        undKey_ = value;
      }
    }

    /// <summary>Field number for the "und_type" field.</summary>
    public const int UndTypeFieldNumber = 115;
    private global::Spiderrock.Protobuf.SpdrKeyType undType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// Underlier Security Type [Stock, Future] (option only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UndType {
      get { return undType_; }
      set {
        undType_ = value;
      }
    }

    /// <summary>Field number for the "product_group" field.</summary>
    public const int ProductGroupFieldNumber = 118;
    private string productGroup_ = "";
    /// <summary>
    /// Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductGroup {
      get { return productGroup_; }
      set {
        productGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security_group" field.</summary>
    public const int SecurityGroupFieldNumber = 121;
    private string securityGroup_ = "";
    /// <summary>
    /// Exchange specific code for a group of related securities that are all affected by market events.  I.E. All E-mini weekly options (EW) - This is SecurityGroup field from the SecurityDefinition messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityGroup {
      get { return securityGroup_; }
      set {
        securityGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "market_segment_iD" field.</summary>
    public const int MarketSegmentIDFieldNumber = 124;
    private int marketSegmentID_;
    /// <summary>
    /// Exchange specific market segment identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarketSegmentID {
      get { return marketSegmentID_; }
      set {
        marketSegmentID_ = value;
      }
    }

    /// <summary>Field number for the "ric_code" field.</summary>
    public const int RicCodeFieldNumber = 250;
    private string ricCode_ = "";
    /// <summary>
    /// Full RIC Code - only provided for non-user defined instruments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RicCode {
      get { return ricCode_; }
      set {
        ricCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security_desc" field.</summary>
    public const int SecurityDescFieldNumber = 249;
    private string securityDesc_ = "";
    /// <summary>
    /// full exchange symbol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityDesc {
      get { return securityDesc_; }
      set {
        securityDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 130;
    private string exchange_ = "";
    /// <summary>
    /// listing exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_type" field.</summary>
    public const int ProductTypeFieldNumber = 133;
    private global::Spiderrock.Protobuf.ProductType productType_ = global::Spiderrock.Protobuf.ProductType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProductType ProductType {
      get { return productType_; }
      set {
        productType_ = value;
      }
    }

    /// <summary>Field number for the "product_term" field.</summary>
    public const int ProductTermFieldNumber = 136;
    private global::Spiderrock.Protobuf.ProductTerm productTerm_ = global::Spiderrock.Protobuf.ProductTerm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProductTerm ProductTerm {
      get { return productTerm_; }
      set {
        productTerm_ = value;
      }
    }

    /// <summary>Field number for the "product_index_type" field.</summary>
    public const int ProductIndexTypeFieldNumber = 139;
    private global::Spiderrock.Protobuf.ProductIndexType productIndexType_ = global::Spiderrock.Protobuf.ProductIndexType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ProductIndexType ProductIndexType {
      get { return productIndexType_; }
      set {
        productIndexType_ = value;
      }
    }

    /// <summary>Field number for the "product_rate" field.</summary>
    public const int ProductRateFieldNumber = 142;
    private float productRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ProductRate {
      get { return productRate_; }
      set {
        productRate_ = value;
      }
    }

    /// <summary>Field number for the "contract_size" field.</summary>
    public const int ContractSizeFieldNumber = 145;
    private float contractSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContractSize {
      get { return contractSize_; }
      set {
        contractSize_ = value;
      }
    }

    /// <summary>Field number for the "contract_unit" field.</summary>
    public const int ContractUnitFieldNumber = 148;
    private global::Spiderrock.Protobuf.ContractUnit contractUnit_ = global::Spiderrock.Protobuf.ContractUnit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ContractUnit ContractUnit {
      get { return contractUnit_; }
      set {
        contractUnit_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 151;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "min_tick_size" field.</summary>
    public const int MinTickSizeFieldNumber = 154;
    private double minTickSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinTickSize {
      get { return minTickSize_; }
      set {
        minTickSize_ = value;
      }
    }

    /// <summary>Field number for the "display_factor" field.</summary>
    public const int DisplayFactorFieldNumber = 157;
    private double displayFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DisplayFactor {
      get { return displayFactor_; }
      set {
        displayFactor_ = value;
      }
    }

    /// <summary>Field number for the "strike_scale" field.</summary>
    public const int StrikeScaleFieldNumber = 160;
    private double strikeScale_;
    /// <summary>
    /// manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikeScale {
      get { return strikeScale_; }
      set {
        strikeScale_ = value;
      }
    }

    /// <summary>Field number for the "min_lot_size" field.</summary>
    public const int MinLotSizeFieldNumber = 163;
    private int minLotSize_;
    /// <summary>
    /// minimum lot size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinLotSize {
      get { return minLotSize_; }
      set {
        minLotSize_ = value;
      }
    }

    /// <summary>Field number for the "book_depth" field.</summary>
    public const int BookDepthFieldNumber = 166;
    private int bookDepth_;
    /// <summary>
    /// levels in the Globex quote book
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BookDepth {
      get { return bookDepth_; }
      set {
        bookDepth_ = value;
      }
    }

    /// <summary>Field number for the "implied_book_depth" field.</summary>
    public const int ImpliedBookDepthFieldNumber = 169;
    private int impliedBookDepth_;
    /// <summary>
    /// levels in the globex implied quote book (0 if no implied depth)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImpliedBookDepth {
      get { return impliedBookDepth_; }
      set {
        impliedBookDepth_ = value;
      }
    }

    /// <summary>Field number for the "imp_market_ind" field.</summary>
    public const int ImpMarketIndFieldNumber = 172;
    private int impMarketInd_;
    /// <summary>
    /// implied market type (0 = no implied, 1 = implied in, 2 = implied out, 3 = implied in &amp; out)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImpMarketInd {
      get { return impMarketInd_; }
      set {
        impMarketInd_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment_amount" field.</summary>
    public const int MinPriceIncrementAmountFieldNumber = 175;
    private float minPriceIncrementAmount_;
    /// <summary>
    /// (depricate) minimum price amount (points per handle)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinPriceIncrementAmount {
      get { return minPriceIncrementAmount_; }
      set {
        minPriceIncrementAmount_ = value;
      }
    }

    /// <summary>Field number for the "par_value" field.</summary>
    public const int ParValueFieldNumber = 178;
    private float parValue_;
    /// <summary>
    /// per contract par value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParValue {
      get { return parValue_; }
      set {
        parValue_ = value;
      }
    }

    /// <summary>Field number for the "cont_multiplier" field.</summary>
    public const int ContMultiplierFieldNumber = 181;
    private float contMultiplier_;
    /// <summary>
    /// contract deliverable multipler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContMultiplier {
      get { return contMultiplier_; }
      set {
        contMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "cab_price" field.</summary>
    public const int CabPriceFieldNumber = 184;
    private double cabPrice_;
    /// <summary>
    /// (depricate) cabinet price (minimum closing price for OOM options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CabPrice {
      get { return cabPrice_; }
      set {
        cabPrice_ = value;
      }
    }

    /// <summary>Field number for the "trade_curr" field.</summary>
    public const int TradeCurrFieldNumber = 187;
    private global::Spiderrock.Protobuf.Currency tradeCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency TradeCurr {
      get { return tradeCurr_; }
      set {
        tradeCurr_ = value;
      }
    }

    /// <summary>Field number for the "settle_curr" field.</summary>
    public const int SettleCurrFieldNumber = 190;
    private global::Spiderrock.Protobuf.Currency settleCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency SettleCurr {
      get { return settleCurr_; }
      set {
        settleCurr_ = value;
      }
    }

    /// <summary>Field number for the "strike_curr" field.</summary>
    public const int StrikeCurrFieldNumber = 193;
    private global::Spiderrock.Protobuf.Currency strikeCurr_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency StrikeCurr {
      get { return strikeCurr_; }
      set {
        strikeCurr_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiration_;
    /// <summary>
    /// future expiration or option expiration (if product is an option). we use the last TRADING day as the expiration date.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "maturity" field.</summary>
    public const int MaturityFieldNumber = 199;
    private global::Spiderrock.Protobuf.DateKey maturity_;
    /// <summary>
    /// future maturity date or option maturity date.  this is the delivery month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey Maturity {
      get { return maturity_; }
      set {
        maturity_ = value;
      }
    }

    /// <summary>Field number for the "exercise_type" field.</summary>
    public const int ExerciseTypeFieldNumber = 202;
    private global::Spiderrock.Protobuf.ExerciseType exerciseType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// (depricate; in RootDefinition) Exercise style
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExerciseType {
      get { return exerciseType_; }
      set {
        exerciseType_ = value;
      }
    }

    /// <summary>Field number for the "user_defined" field.</summary>
    public const int UserDefinedFieldNumber = 205;
    private global::Spiderrock.Protobuf.YesNo userDefined_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo UserDefined {
      get { return userDefined_; }
      set {
        userDefined_ = value;
      }
    }

    /// <summary>Field number for the "decay_start_year" field.</summary>
    public const int DecayStartYearFieldNumber = 208;
    private int decayStartYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DecayStartYear {
      get { return decayStartYear_; }
      set {
        decayStartYear_ = value;
      }
    }

    /// <summary>Field number for the "decay_start_month" field.</summary>
    public const int DecayStartMonthFieldNumber = 211;
    private int decayStartMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DecayStartMonth {
      get { return decayStartMonth_; }
      set {
        decayStartMonth_ = value;
      }
    }

    /// <summary>Field number for the "decay_start_day" field.</summary>
    public const int DecayStartDayFieldNumber = 214;
    private int decayStartDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DecayStartDay {
      get { return decayStartDay_; }
      set {
        decayStartDay_ = value;
      }
    }

    /// <summary>Field number for the "decay_qty" field.</summary>
    public const int DecayQtyFieldNumber = 217;
    private int decayQty_;
    /// <summary>
    /// daily decay quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DecayQty {
      get { return decayQty_; }
      set {
        decayQty_ = value;
      }
    }

    /// <summary>Field number for the "price_ratio" field.</summary>
    public const int PriceRatioFieldNumber = 220;
    private double priceRatio_;
    /// <summary>
    /// price ratio for interest rate intercommodity spreads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PriceRatio {
      get { return priceRatio_; }
      set {
        priceRatio_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 247;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "legs" field.</summary>
    public const int LegsFieldNumber = 223;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs> _repeated_legs_codec
        = pb::FieldCodec.ForMessage(1786, global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs> legs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.ProductDefinitionV2.Types.Legs> Legs {
      get { return legs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProductDefinitionV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProductDefinitionV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SecurityID != other.SecurityID) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (SRspreadID != other.SRspreadID) return false;
      if (ProductClass != other.ProductClass) return false;
      if (UnderlierID != other.UnderlierID) return false;
      if (!object.Equals(UndKey, other.UndKey)) return false;
      if (UndType != other.UndType) return false;
      if (ProductGroup != other.ProductGroup) return false;
      if (SecurityGroup != other.SecurityGroup) return false;
      if (MarketSegmentID != other.MarketSegmentID) return false;
      if (RicCode != other.RicCode) return false;
      if (SecurityDesc != other.SecurityDesc) return false;
      if (Exchange != other.Exchange) return false;
      if (ProductType != other.ProductType) return false;
      if (ProductTerm != other.ProductTerm) return false;
      if (ProductIndexType != other.ProductIndexType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProductRate, other.ProductRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContractSize, other.ContractSize)) return false;
      if (ContractUnit != other.ContractUnit) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinTickSize, other.MinTickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DisplayFactor, other.DisplayFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikeScale, other.StrikeScale)) return false;
      if (MinLotSize != other.MinLotSize) return false;
      if (BookDepth != other.BookDepth) return false;
      if (ImpliedBookDepth != other.ImpliedBookDepth) return false;
      if (ImpMarketInd != other.ImpMarketInd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPriceIncrementAmount, other.MinPriceIncrementAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParValue, other.ParValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContMultiplier, other.ContMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CabPrice, other.CabPrice)) return false;
      if (TradeCurr != other.TradeCurr) return false;
      if (SettleCurr != other.SettleCurr) return false;
      if (StrikeCurr != other.StrikeCurr) return false;
      if (!object.Equals(Expiration, other.Expiration)) return false;
      if (!object.Equals(Maturity, other.Maturity)) return false;
      if (ExerciseType != other.ExerciseType) return false;
      if (UserDefined != other.UserDefined) return false;
      if (DecayStartYear != other.DecayStartYear) return false;
      if (DecayStartMonth != other.DecayStartMonth) return false;
      if (DecayStartDay != other.DecayStartDay) return false;
      if (DecayQty != other.DecayQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceRatio, other.PriceRatio)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!legs_.Equals(other.legs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SecurityID.Length != 0) hash ^= SecurityID.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (SRspreadID != 0L) hash ^= SRspreadID.GetHashCode();
      if (ProductClass != global::Spiderrock.Protobuf.ProductClass.Unspecified) hash ^= ProductClass.GetHashCode();
      if (UnderlierID != 0L) hash ^= UnderlierID.GetHashCode();
      if (undKey_ != null) hash ^= UndKey.GetHashCode();
      if (UndType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UndType.GetHashCode();
      if (ProductGroup.Length != 0) hash ^= ProductGroup.GetHashCode();
      if (SecurityGroup.Length != 0) hash ^= SecurityGroup.GetHashCode();
      if (MarketSegmentID != 0) hash ^= MarketSegmentID.GetHashCode();
      if (RicCode.Length != 0) hash ^= RicCode.GetHashCode();
      if (SecurityDesc.Length != 0) hash ^= SecurityDesc.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ProductType != global::Spiderrock.Protobuf.ProductType.Unspecified) hash ^= ProductType.GetHashCode();
      if (ProductTerm != global::Spiderrock.Protobuf.ProductTerm.Unspecified) hash ^= ProductTerm.GetHashCode();
      if (ProductIndexType != global::Spiderrock.Protobuf.ProductIndexType.Unspecified) hash ^= ProductIndexType.GetHashCode();
      if (ProductRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProductRate);
      if (ContractSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContractSize);
      if (ContractUnit != global::Spiderrock.Protobuf.ContractUnit.Unspecified) hash ^= ContractUnit.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (MinTickSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinTickSize);
      if (DisplayFactor != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DisplayFactor);
      if (StrikeScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikeScale);
      if (MinLotSize != 0) hash ^= MinLotSize.GetHashCode();
      if (BookDepth != 0) hash ^= BookDepth.GetHashCode();
      if (ImpliedBookDepth != 0) hash ^= ImpliedBookDepth.GetHashCode();
      if (ImpMarketInd != 0) hash ^= ImpMarketInd.GetHashCode();
      if (MinPriceIncrementAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPriceIncrementAmount);
      if (ParValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParValue);
      if (ContMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContMultiplier);
      if (CabPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CabPrice);
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= TradeCurr.GetHashCode();
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= SettleCurr.GetHashCode();
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= StrikeCurr.GetHashCode();
      if (expiration_ != null) hash ^= Expiration.GetHashCode();
      if (maturity_ != null) hash ^= Maturity.GetHashCode();
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExerciseType.GetHashCode();
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= UserDefined.GetHashCode();
      if (DecayStartYear != 0) hash ^= DecayStartYear.GetHashCode();
      if (DecayStartMonth != 0) hash ^= DecayStartMonth.GetHashCode();
      if (DecayStartDay != 0) hash ^= DecayStartDay.GetHashCode();
      if (DecayQty != 0) hash ^= DecayQty.GetHashCode();
      if (PriceRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceRatio);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= legs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Ticker);
      }
      if (SRspreadID != 0L) {
        output.WriteRawTag(192, 6);
        output.WriteInt64(SRspreadID);
      }
      if (ProductClass != global::Spiderrock.Protobuf.ProductClass.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) ProductClass);
      }
      if (UnderlierID != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(UnderlierID);
      }
      if (undKey_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(UndKey);
      }
      if (UndType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) UndType);
      }
      if (ProductGroup.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ProductGroup);
      }
      if (SecurityGroup.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(SecurityGroup);
      }
      if (MarketSegmentID != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(MarketSegmentID);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Exchange);
      }
      if (ProductType != global::Spiderrock.Protobuf.ProductType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) ProductType);
      }
      if (ProductTerm != global::Spiderrock.Protobuf.ProductTerm.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) ProductTerm);
      }
      if (ProductIndexType != global::Spiderrock.Protobuf.ProductIndexType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ProductIndexType);
      }
      if (ProductRate != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(ProductRate);
      }
      if (ContractSize != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ContractSize);
      }
      if (ContractUnit != global::Spiderrock.Protobuf.ContractUnit.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) ContractUnit);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceFormat);
      }
      if (MinTickSize != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(MinTickSize);
      }
      if (DisplayFactor != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(DisplayFactor);
      }
      if (StrikeScale != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(StrikeScale);
      }
      if (MinLotSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(MinLotSize);
      }
      if (BookDepth != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(BookDepth);
      }
      if (ImpliedBookDepth != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(ImpliedBookDepth);
      }
      if (ImpMarketInd != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(ImpMarketInd);
      }
      if (MinPriceIncrementAmount != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(MinPriceIncrementAmount);
      }
      if (ParValue != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(ParValue);
      }
      if (ContMultiplier != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(ContMultiplier);
      }
      if (CabPrice != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(CabPrice);
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) StrikeCurr);
      }
      if (expiration_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Expiration);
      }
      if (maturity_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(Maturity);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) ExerciseType);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) UserDefined);
      }
      if (DecayStartYear != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(DecayStartYear);
      }
      if (DecayStartMonth != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(DecayStartMonth);
      }
      if (DecayStartDay != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(DecayStartDay);
      }
      if (DecayQty != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(DecayQty);
      }
      if (PriceRatio != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(PriceRatio);
      }
      legs_.WriteTo(output, _repeated_legs_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(Timestamp);
      }
      if (SecurityID.Length != 0) {
        output.WriteRawTag(194, 15);
        output.WriteString(SecurityID);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(202, 15);
        output.WriteString(SecurityDesc);
      }
      if (RicCode.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(RicCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Ticker);
      }
      if (SRspreadID != 0L) {
        output.WriteRawTag(192, 6);
        output.WriteInt64(SRspreadID);
      }
      if (ProductClass != global::Spiderrock.Protobuf.ProductClass.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) ProductClass);
      }
      if (UnderlierID != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(UnderlierID);
      }
      if (undKey_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(UndKey);
      }
      if (UndType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) UndType);
      }
      if (ProductGroup.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ProductGroup);
      }
      if (SecurityGroup.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(SecurityGroup);
      }
      if (MarketSegmentID != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(MarketSegmentID);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Exchange);
      }
      if (ProductType != global::Spiderrock.Protobuf.ProductType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) ProductType);
      }
      if (ProductTerm != global::Spiderrock.Protobuf.ProductTerm.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) ProductTerm);
      }
      if (ProductIndexType != global::Spiderrock.Protobuf.ProductIndexType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ProductIndexType);
      }
      if (ProductRate != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(ProductRate);
      }
      if (ContractSize != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ContractSize);
      }
      if (ContractUnit != global::Spiderrock.Protobuf.ContractUnit.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) ContractUnit);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceFormat);
      }
      if (MinTickSize != 0D) {
        output.WriteRawTag(209, 9);
        output.WriteDouble(MinTickSize);
      }
      if (DisplayFactor != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(DisplayFactor);
      }
      if (StrikeScale != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(StrikeScale);
      }
      if (MinLotSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(MinLotSize);
      }
      if (BookDepth != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(BookDepth);
      }
      if (ImpliedBookDepth != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(ImpliedBookDepth);
      }
      if (ImpMarketInd != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(ImpMarketInd);
      }
      if (MinPriceIncrementAmount != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(MinPriceIncrementAmount);
      }
      if (ParValue != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(ParValue);
      }
      if (ContMultiplier != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(ContMultiplier);
      }
      if (CabPrice != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(CabPrice);
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) StrikeCurr);
      }
      if (expiration_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Expiration);
      }
      if (maturity_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(Maturity);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) ExerciseType);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) UserDefined);
      }
      if (DecayStartYear != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(DecayStartYear);
      }
      if (DecayStartMonth != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(DecayStartMonth);
      }
      if (DecayStartDay != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(DecayStartDay);
      }
      if (DecayQty != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(DecayQty);
      }
      if (PriceRatio != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(PriceRatio);
      }
      legs_.WriteTo(ref output, _repeated_legs_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(Timestamp);
      }
      if (SecurityID.Length != 0) {
        output.WriteRawTag(194, 15);
        output.WriteString(SecurityID);
      }
      if (SecurityDesc.Length != 0) {
        output.WriteRawTag(202, 15);
        output.WriteString(SecurityDesc);
      }
      if (RicCode.Length != 0) {
        output.WriteRawTag(210, 15);
        output.WriteString(RicCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SecurityID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityID);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (SRspreadID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SRspreadID);
      }
      if (ProductClass != global::Spiderrock.Protobuf.ProductClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProductClass);
      }
      if (UnderlierID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnderlierID);
      }
      if (undKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UndKey);
      }
      if (UndType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UndType);
      }
      if (ProductGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProductGroup);
      }
      if (SecurityGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityGroup);
      }
      if (MarketSegmentID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketSegmentID);
      }
      if (RicCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RicCode);
      }
      if (SecurityDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityDesc);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ProductType != global::Spiderrock.Protobuf.ProductType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProductType);
      }
      if (ProductTerm != global::Spiderrock.Protobuf.ProductTerm.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProductTerm);
      }
      if (ProductIndexType != global::Spiderrock.Protobuf.ProductIndexType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProductIndexType);
      }
      if (ProductRate != 0F) {
        size += 2 + 4;
      }
      if (ContractSize != 0F) {
        size += 2 + 4;
      }
      if (ContractUnit != global::Spiderrock.Protobuf.ContractUnit.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContractUnit);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (MinTickSize != 0D) {
        size += 2 + 8;
      }
      if (DisplayFactor != 0D) {
        size += 2 + 8;
      }
      if (StrikeScale != 0D) {
        size += 2 + 8;
      }
      if (MinLotSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinLotSize);
      }
      if (BookDepth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BookDepth);
      }
      if (ImpliedBookDepth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImpliedBookDepth);
      }
      if (ImpMarketInd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImpMarketInd);
      }
      if (MinPriceIncrementAmount != 0F) {
        size += 2 + 4;
      }
      if (ParValue != 0F) {
        size += 2 + 4;
      }
      if (ContMultiplier != 0F) {
        size += 2 + 4;
      }
      if (CabPrice != 0D) {
        size += 2 + 8;
      }
      if (TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeCurr);
      }
      if (SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettleCurr);
      }
      if (StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StrikeCurr);
      }
      if (expiration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Expiration);
      }
      if (maturity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Maturity);
      }
      if (ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExerciseType);
      }
      if (UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UserDefined);
      }
      if (DecayStartYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecayStartYear);
      }
      if (DecayStartMonth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecayStartMonth);
      }
      if (DecayStartDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecayStartDay);
      }
      if (DecayQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecayQty);
      }
      if (PriceRatio != 0D) {
        size += 2 + 8;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += legs_.CalculateSize(_repeated_legs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProductDefinitionV2 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SecurityID.Length != 0) {
        SecurityID = other.SecurityID;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.SRspreadID != 0L) {
        SRspreadID = other.SRspreadID;
      }
      if (other.ProductClass != global::Spiderrock.Protobuf.ProductClass.Unspecified) {
        ProductClass = other.ProductClass;
      }
      if (other.UnderlierID != 0L) {
        UnderlierID = other.UnderlierID;
      }
      if (other.undKey_ != null) {
        if (undKey_ == null) {
          UndKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UndKey.MergeFrom(other.UndKey);
      }
      if (other.UndType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UndType = other.UndType;
      }
      if (other.ProductGroup.Length != 0) {
        ProductGroup = other.ProductGroup;
      }
      if (other.SecurityGroup.Length != 0) {
        SecurityGroup = other.SecurityGroup;
      }
      if (other.MarketSegmentID != 0) {
        MarketSegmentID = other.MarketSegmentID;
      }
      if (other.RicCode.Length != 0) {
        RicCode = other.RicCode;
      }
      if (other.SecurityDesc.Length != 0) {
        SecurityDesc = other.SecurityDesc;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ProductType != global::Spiderrock.Protobuf.ProductType.Unspecified) {
        ProductType = other.ProductType;
      }
      if (other.ProductTerm != global::Spiderrock.Protobuf.ProductTerm.Unspecified) {
        ProductTerm = other.ProductTerm;
      }
      if (other.ProductIndexType != global::Spiderrock.Protobuf.ProductIndexType.Unspecified) {
        ProductIndexType = other.ProductIndexType;
      }
      if (other.ProductRate != 0F) {
        ProductRate = other.ProductRate;
      }
      if (other.ContractSize != 0F) {
        ContractSize = other.ContractSize;
      }
      if (other.ContractUnit != global::Spiderrock.Protobuf.ContractUnit.Unspecified) {
        ContractUnit = other.ContractUnit;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.MinTickSize != 0D) {
        MinTickSize = other.MinTickSize;
      }
      if (other.DisplayFactor != 0D) {
        DisplayFactor = other.DisplayFactor;
      }
      if (other.StrikeScale != 0D) {
        StrikeScale = other.StrikeScale;
      }
      if (other.MinLotSize != 0) {
        MinLotSize = other.MinLotSize;
      }
      if (other.BookDepth != 0) {
        BookDepth = other.BookDepth;
      }
      if (other.ImpliedBookDepth != 0) {
        ImpliedBookDepth = other.ImpliedBookDepth;
      }
      if (other.ImpMarketInd != 0) {
        ImpMarketInd = other.ImpMarketInd;
      }
      if (other.MinPriceIncrementAmount != 0F) {
        MinPriceIncrementAmount = other.MinPriceIncrementAmount;
      }
      if (other.ParValue != 0F) {
        ParValue = other.ParValue;
      }
      if (other.ContMultiplier != 0F) {
        ContMultiplier = other.ContMultiplier;
      }
      if (other.CabPrice != 0D) {
        CabPrice = other.CabPrice;
      }
      if (other.TradeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        TradeCurr = other.TradeCurr;
      }
      if (other.SettleCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        SettleCurr = other.SettleCurr;
      }
      if (other.StrikeCurr != global::Spiderrock.Protobuf.Currency.Unspecified) {
        StrikeCurr = other.StrikeCurr;
      }
      if (other.expiration_ != null) {
        if (expiration_ == null) {
          Expiration = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Expiration.MergeFrom(other.Expiration);
      }
      if (other.maturity_ != null) {
        if (maturity_ == null) {
          Maturity = new global::Spiderrock.Protobuf.DateKey();
        }
        Maturity.MergeFrom(other.Maturity);
      }
      if (other.ExerciseType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExerciseType = other.ExerciseType;
      }
      if (other.UserDefined != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        UserDefined = other.UserDefined;
      }
      if (other.DecayStartYear != 0) {
        DecayStartYear = other.DecayStartYear;
      }
      if (other.DecayStartMonth != 0) {
        DecayStartMonth = other.DecayStartMonth;
      }
      if (other.DecayStartDay != 0) {
        DecayStartDay = other.DecayStartDay;
      }
      if (other.DecayQty != 0) {
        DecayQty = other.DecayQty;
      }
      if (other.PriceRatio != 0D) {
        PriceRatio = other.PriceRatio;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      legs_.Add(other.legs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 832: {
            SRspreadID = input.ReadInt64();
            break;
          }
          case 848: {
            ProductClass = (global::Spiderrock.Protobuf.ProductClass) input.ReadEnum();
            break;
          }
          case 872: {
            UnderlierID = input.ReadInt64();
            break;
          }
          case 898: {
            if (undKey_ == null) {
              UndKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UndKey);
            break;
          }
          case 920: {
            UndType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 946: {
            ProductGroup = input.ReadString();
            break;
          }
          case 970: {
            SecurityGroup = input.ReadString();
            break;
          }
          case 992: {
            MarketSegmentID = input.ReadInt32();
            break;
          }
          case 1042: {
            Exchange = input.ReadString();
            break;
          }
          case 1064: {
            ProductType = (global::Spiderrock.Protobuf.ProductType) input.ReadEnum();
            break;
          }
          case 1088: {
            ProductTerm = (global::Spiderrock.Protobuf.ProductTerm) input.ReadEnum();
            break;
          }
          case 1112: {
            ProductIndexType = (global::Spiderrock.Protobuf.ProductIndexType) input.ReadEnum();
            break;
          }
          case 1141: {
            ProductRate = input.ReadFloat();
            break;
          }
          case 1165: {
            ContractSize = input.ReadFloat();
            break;
          }
          case 1184: {
            ContractUnit = (global::Spiderrock.Protobuf.ContractUnit) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1233: {
            MinTickSize = input.ReadDouble();
            break;
          }
          case 1257: {
            DisplayFactor = input.ReadDouble();
            break;
          }
          case 1281: {
            StrikeScale = input.ReadDouble();
            break;
          }
          case 1304: {
            MinLotSize = input.ReadInt32();
            break;
          }
          case 1328: {
            BookDepth = input.ReadInt32();
            break;
          }
          case 1352: {
            ImpliedBookDepth = input.ReadInt32();
            break;
          }
          case 1376: {
            ImpMarketInd = input.ReadInt32();
            break;
          }
          case 1405: {
            MinPriceIncrementAmount = input.ReadFloat();
            break;
          }
          case 1429: {
            ParValue = input.ReadFloat();
            break;
          }
          case 1453: {
            ContMultiplier = input.ReadFloat();
            break;
          }
          case 1473: {
            CabPrice = input.ReadDouble();
            break;
          }
          case 1496: {
            TradeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1520: {
            SettleCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1544: {
            StrikeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1570: {
            if (expiration_ == null) {
              Expiration = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Expiration);
            break;
          }
          case 1594: {
            if (maturity_ == null) {
              Maturity = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Maturity);
            break;
          }
          case 1616: {
            ExerciseType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1640: {
            UserDefined = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            DecayStartYear = input.ReadInt32();
            break;
          }
          case 1688: {
            DecayStartMonth = input.ReadInt32();
            break;
          }
          case 1712: {
            DecayStartDay = input.ReadInt32();
            break;
          }
          case 1736: {
            DecayQty = input.ReadInt32();
            break;
          }
          case 1761: {
            PriceRatio = input.ReadDouble();
            break;
          }
          case 1786: {
            legs_.AddEntriesFrom(input, _repeated_legs_codec);
            break;
          }
          case 1978: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1986: {
            SecurityID = input.ReadString();
            break;
          }
          case 1994: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 2002: {
            RicCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ProductDefinitionV2.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 832: {
            SRspreadID = input.ReadInt64();
            break;
          }
          case 848: {
            ProductClass = (global::Spiderrock.Protobuf.ProductClass) input.ReadEnum();
            break;
          }
          case 872: {
            UnderlierID = input.ReadInt64();
            break;
          }
          case 898: {
            if (undKey_ == null) {
              UndKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UndKey);
            break;
          }
          case 920: {
            UndType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 946: {
            ProductGroup = input.ReadString();
            break;
          }
          case 970: {
            SecurityGroup = input.ReadString();
            break;
          }
          case 992: {
            MarketSegmentID = input.ReadInt32();
            break;
          }
          case 1042: {
            Exchange = input.ReadString();
            break;
          }
          case 1064: {
            ProductType = (global::Spiderrock.Protobuf.ProductType) input.ReadEnum();
            break;
          }
          case 1088: {
            ProductTerm = (global::Spiderrock.Protobuf.ProductTerm) input.ReadEnum();
            break;
          }
          case 1112: {
            ProductIndexType = (global::Spiderrock.Protobuf.ProductIndexType) input.ReadEnum();
            break;
          }
          case 1141: {
            ProductRate = input.ReadFloat();
            break;
          }
          case 1165: {
            ContractSize = input.ReadFloat();
            break;
          }
          case 1184: {
            ContractUnit = (global::Spiderrock.Protobuf.ContractUnit) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1233: {
            MinTickSize = input.ReadDouble();
            break;
          }
          case 1257: {
            DisplayFactor = input.ReadDouble();
            break;
          }
          case 1281: {
            StrikeScale = input.ReadDouble();
            break;
          }
          case 1304: {
            MinLotSize = input.ReadInt32();
            break;
          }
          case 1328: {
            BookDepth = input.ReadInt32();
            break;
          }
          case 1352: {
            ImpliedBookDepth = input.ReadInt32();
            break;
          }
          case 1376: {
            ImpMarketInd = input.ReadInt32();
            break;
          }
          case 1405: {
            MinPriceIncrementAmount = input.ReadFloat();
            break;
          }
          case 1429: {
            ParValue = input.ReadFloat();
            break;
          }
          case 1453: {
            ContMultiplier = input.ReadFloat();
            break;
          }
          case 1473: {
            CabPrice = input.ReadDouble();
            break;
          }
          case 1496: {
            TradeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1520: {
            SettleCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1544: {
            StrikeCurr = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1570: {
            if (expiration_ == null) {
              Expiration = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Expiration);
            break;
          }
          case 1594: {
            if (maturity_ == null) {
              Maturity = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Maturity);
            break;
          }
          case 1616: {
            ExerciseType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1640: {
            UserDefined = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1664: {
            DecayStartYear = input.ReadInt32();
            break;
          }
          case 1688: {
            DecayStartMonth = input.ReadInt32();
            break;
          }
          case 1712: {
            DecayStartDay = input.ReadInt32();
            break;
          }
          case 1736: {
            DecayQty = input.ReadInt32();
            break;
          }
          case 1761: {
            PriceRatio = input.ReadDouble();
            break;
          }
          case 1786: {
            legs_.AddEntriesFrom(ref input, _repeated_legs_codec);
            break;
          }
          case 1978: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1986: {
            SecurityID = input.ReadString();
            break;
          }
          case 1994: {
            SecurityDesc = input.ReadString();
            break;
          }
          case 2002: {
            RicCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ProductDefinitionV2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ProductDefinitionV2.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        /// <summary>
        /// SR Security Key [can be partially filled in (look at secType)]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        /// <summary>
        /// Security Type [Stock, Future, Option]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Legs : pb::IMessage<Legs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Legs> _parser = new pb::MessageParser<Legs>(() => new Legs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Legs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ProductDefinitionV2.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs(Legs other) : this() {
          legID_ = other.legID_;
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          side_ = other.side_;
          ratio_ = other.ratio_;
          refDelta_ = other.refDelta_;
          refPrc_ = other.refPrc_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs Clone() {
          return new Legs(this);
        }

        /// <summary>Field number for the "leg_iD" field.</summary>
        public const int LegIDFieldNumber = 226;
        private string legID_ = "";
        /// <summary>
        /// leg SecurityId (exch assigned)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string LegID {
          get { return legID_; }
          set {
            legID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 229;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 232;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 235;
        private global::Spiderrock.Protobuf.BuySell side_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "ratio" field.</summary>
        public const int RatioFieldNumber = 238;
        private uint ratio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Ratio {
          get { return ratio_; }
          set {
            ratio_ = value;
          }
        }

        /// <summary>Field number for the "ref_delta" field.</summary>
        public const int RefDeltaFieldNumber = 241;
        private float refDelta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RefDelta {
          get { return refDelta_; }
          set {
            refDelta_ = value;
          }
        }

        /// <summary>Field number for the "ref_prc" field.</summary>
        public const int RefPrcFieldNumber = 244;
        private double refPrc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RefPrc {
          get { return refPrc_; }
          set {
            refPrc_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Legs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Legs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LegID != other.LegID) return false;
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (Side != other.Side) return false;
          if (Ratio != other.Ratio) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefDelta, other.RefDelta)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefPrc, other.RefPrc)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (LegID.Length != 0) hash ^= LegID.GetHashCode();
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side.GetHashCode();
          if (Ratio != 0) hash ^= Ratio.GetHashCode();
          if (RefDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefDelta);
          if (RefPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefPrc);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (LegID.Length != 0) {
            output.WriteRawTag(146, 14);
            output.WriteString(LegID);
          }
          if (secKey_ != null) {
            output.WriteRawTag(170, 14);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(192, 14);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(216, 14);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(240, 14);
            output.WriteUInt32(Ratio);
          }
          if (RefDelta != 0F) {
            output.WriteRawTag(141, 15);
            output.WriteFloat(RefDelta);
          }
          if (RefPrc != 0D) {
            output.WriteRawTag(161, 15);
            output.WriteDouble(RefPrc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (LegID.Length != 0) {
            output.WriteRawTag(146, 14);
            output.WriteString(LegID);
          }
          if (secKey_ != null) {
            output.WriteRawTag(170, 14);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(192, 14);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(216, 14);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(240, 14);
            output.WriteUInt32(Ratio);
          }
          if (RefDelta != 0F) {
            output.WriteRawTag(141, 15);
            output.WriteFloat(RefDelta);
          }
          if (RefPrc != 0D) {
            output.WriteRawTag(161, 15);
            output.WriteDouble(RefPrc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (LegID.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(LegID);
          }
          if (secKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Ratio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio);
          }
          if (RefDelta != 0F) {
            size += 2 + 4;
          }
          if (RefPrc != 0D) {
            size += 2 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Legs other) {
          if (other == null) {
            return;
          }
          if (other.LegID.Length != 0) {
            LegID = other.LegID;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side = other.Side;
          }
          if (other.Ratio != 0) {
            Ratio = other.Ratio;
          }
          if (other.RefDelta != 0F) {
            RefDelta = other.RefDelta;
          }
          if (other.RefPrc != 0D) {
            RefPrc = other.RefPrc;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1810: {
                LegID = input.ReadString();
                break;
              }
              case 1834: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 1856: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1880: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1904: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 1933: {
                RefDelta = input.ReadFloat();
                break;
              }
              case 1953: {
                RefPrc = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1810: {
                LegID = input.ReadString();
                break;
              }
              case 1834: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 1856: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1880: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1904: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 1933: {
                RefDelta = input.ReadFloat();
                break;
              }
              case 1953: {
                RefPrc = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
