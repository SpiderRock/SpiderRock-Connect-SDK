syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpiderRock normalized exchange product definitions.  Includes future, option, and spread definitions from a number of exchanges.  TickerDefinitions, RootDefinitions and CCodeDefinitions are consistent with these records.
*/    
message ProductDefinitionV2 {
    message PKey {
        
        OptionKey sec_key = 10; // SR Security Key [can be partially filled in (look at secType)]
        SpdrKeyType sec_type = 11; // Security Type [Stock, Future, Option]
    }

    message Legs {
        
        string leg_iD = 226; // leg SecurityId (exch assigned)
        OptionKey sec_key = 229;
        SpdrKeyType sec_type = 232;
        BuySell side = 235;
        uint32 ratio = 238;
        float ref_delta = 241;
        double ref_prc = 244;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string security_iD = 248; // unique exchange id (exch assigned)
    TickerKey ticker = 103; // master underlier
    int64 sRspread_iD = 104;
    ProductClass product_class = 106;
    int64 underlier_iD = 109; // underlier product id (option only) [securityID of undKey/undType product]
    ExpiryKey und_key = 112; // SR Underlier Security Key [can be partially filled in (look at undType)] (option only)
    SpdrKeyType und_type = 115; // Underlier Security Type [Stock, Future] (option only)
    string product_group = 118; // Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message
    string security_group = 121; // Exchange specific code for a group of related securities that are all affected by market events.  I.E. All E-mini weekly options (EW) - This is SecurityGroup field from the SecurityDefinition messages
    int32 market_segment_iD = 124; // Exchange specific market segment identifier
    string ric_code = 250; // Full RIC Code - only provided for non-user defined instruments
    string security_desc = 249; // full exchange symbol
    string exchange = 130; // listing exchange
    ProductType product_type = 133;
    ProductTerm product_term = 136;
    ProductIndexType product_index_type = 139;
    float product_rate = 142;
    float contract_size = 145;
    ContractUnit contract_unit = 148;
    PriceFormat price_format = 151;
    double min_tick_size = 154;
    double display_factor = 157;
    double strike_scale = 160; // manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    int32 min_lot_size = 163; // minimum lot size
    int32 book_depth = 166; // levels in the Globex quote book
    int32 implied_book_depth = 169; // levels in the globex implied quote book (0 if no implied depth)
    int32 imp_market_ind = 172; // implied market type (0 = no implied, 1 = implied in, 2 = implied out, 3 = implied in & out)
    float min_price_increment_amount = 175; // (depricate) minimum price amount (points per handle)
    float par_value = 178; // per contract par value
    float cont_multiplier = 181; // contract deliverable multipler
    double cab_price = 184; // (depricate) cabinet price (minimum closing price for OOM options)
    Currency trade_curr = 187;
    Currency settle_curr = 190;
    Currency strike_curr = 193;
    google.protobuf.Timestamp expiration = 196; // future expiration or option expiration (if product is an option). we use the last TRADING day as the expiration date.
    DateKey maturity = 199; // future maturity date or option maturity date.  this is the delivery month.
    ExerciseType exercise_type = 202; // (depricate; in RootDefinition) Exercise style
    YesNo user_defined = 205;
    int32 decay_start_year = 208;
    int32 decay_start_month = 211;
    int32 decay_start_day = 214;
    int32 decay_qty = 217; // daily decay quantity
    double price_ratio = 220; // price ratio for interest rate intercommodity spreads
    google.protobuf.Timestamp timestamp = 247;
    repeated Legs legs = 223;
}


