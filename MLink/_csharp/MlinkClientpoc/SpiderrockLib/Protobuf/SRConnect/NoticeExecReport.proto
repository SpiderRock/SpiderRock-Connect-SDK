syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message NoticeExecReport {
    message PKey {
        
        int64 notice_number = 10; // AuctionNotice.noticeNumber
        int64 base_parent_number = 11;
    }

    message OrderLegs {
        
        OptionKey sec_key = 166;
        SpdrKeyType sec_type = 169;
        BuySell side = 172;
        int32 ratio = 175;
        LegPositionType position_type = 178;
        int32 leg_cum_fill_qty = 181;
        double leg_avg_fill_price = 184;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlier ticker
    DateKey trade_date = 103;
    string accnt = 113; // SR Accnt
    string client_firm = 114; // SR ClientFirm
    google.protobuf.Timestamp notice_dttm = 104; // either notice create datetime or notice arrival@SR datetime (high precision)
    string response_id = 106; // from NoticeResponse.responseId (most recently processed response to noticeNumber for this accnt/clientFirm pair)
    SpdrSource resp_origin = 107;
    SpdrStageType stage_type = 109;
    AuctionType auction_type = 110;
    AuctionSource auction_source = 111; // source of the auction notice (eg. SRC, MIAX, etc.)
    google.protobuf.Timestamp resp_dttm = 112; // response arrival dttm (high precision)
    BuySell resp_side = 115;
    int32 resp_size = 118;
    int32 resp_active_size = 121; // active response order size (zero for ActiveHold)
    double resp_price = 124; // effRespPrice = respPrice + de * (uMid - refUPrc) + 0.5 * ga * (uMid - refUPrc)^2
    double ref_uPrc = 127; // reference price for tied to underlier orders (mid-market tie) (block auctions only)
    float ref_de = 130; // reference delta for tied to underlier orders (zero if tie is not desired) (block auctions only)
    float ref_ga = 133; // reference gamma for tied to underlier orders (zero if tie is not desired) (block auctions only)
    RoundRule round_rule = 136; // Exact (100%) or Fuzzy (90%) [default is Exact] (block auctions only)
    double step_up_incr = 139; // additional price increment (best price) (typically only used if auction is competitive)
    int64 risk_group_id = 142; // any auction response is associated with this riskGroupID (and SpdrRiskGroupControl)
    string strategy = 145; // user strategy field (visible on SR tools)
    string user_data1 = 148; // user data field (free text) (from NoticeResponse)
    SpdrOrderStatus resp_status = 151;
    string resp_detail = 154;
    double last_uPrc = 155; // effective uPrc (mid-market) from last trial pass
    double last_trial_prc = 156; // effective response price from last trial pass
    int32 leaves_qty = 157; // open order quantity
    int32 cum_fill_qty = 158; // pkg cumFillQty if MLeg
    double avg_fill_price = 160; // pkg avgFillPrice if MLeg
    double add_latency = 161; // latency from notice arrival@SR to external response send (in seconds) OR latency from notice create to response accepted (in seconds) (SRC Auctions)
    double ack_latency = 162; // latency from external response send to external response ack (FRT) (in seconds) (external auctions only)
    NoticeResult response_result = 187;
    int32 response_time = 190; // notice response arrival time (milliseconds since auction start)
    double prt_price = 193; // reported print price (pkgPrice if MLeg)
    int32 prt_size = 196; // reported print size (pgkSize if MLeg)
    google.protobuf.Timestamp prt_time = 199; // reported print time (1st print if MLeg)
    double prt_uBid = 202; // best estimate of uBid @ auction print time
    double prt_uAsk = 205; // best estimate of uAsk @ auction print time
    google.protobuf.Timestamp timestamp = 208;
    repeated OrderLegs order_legs = 163;
}


