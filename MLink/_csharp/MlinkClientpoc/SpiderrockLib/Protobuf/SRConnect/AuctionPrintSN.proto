syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message AuctionPrintSN {
    message PKey {
        
        int64 notice_number = 10; // AuctionNotice.noticeNumber
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlier ticker
    DateKey trade_date = 101;
    YesNo is_test_auction = 102; // if yes, auction is a test auction (not a prod/live auction)
    google.protobuf.Timestamp notice_time = 103; // notice create timestamp (high precision)
    AuctionType auction_type = 104; // (eg. Block, Flash, Improvement, Facilitation, etc.)
    AuctionSource auction_source = 105; // source of the auction notice (eg. SRC, MIAX, etc.)
    YesNo contains_flex = 106; // Flex = European
    TickerKey root = 107; // option root
    DateKey expiry = 108;
    double strike = 109; // rev/con strike
    string industry = 110; // industry string
    SymbolType symbol_type = 111;
    float u_avg_daily_vlm = 112; // underlier average daily trading volume
    BuySell cust_side = 113; // from AuctionNotice (if known)
    int32 cust_qty = 114; // from AuctionNotice (if known)
    double cust_prc = 115; // from AuctionNotice (if known)
    YesNo has_cust_prc = 116; // from AuctionNotice (if known)
    FirmType cust_firm_type = 117; // cust firm type (if disclosed)
    string cust_agent_mPID = 118; // cust agent exchange member initiating the auction (if disclosed)
    float comm_enhancement = 119; // additional commission (if any) paid by responder
    double notice_uBid = 120;
    double notice_uAsk = 121;
    float net_surf_prc = 122; // SR Surface Price (entire package)
    double i_days = 123; // iDays = effective interest days [SR supplied]
    double i_years = 124; // iYears = iDays / 360.0
    double money_rate = 125; // effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365] [SR Supplied Estimate]
    double ddiv_pv = 126; // present value of any expected dividends to expiry [SR Supplied Estimate]
    YesNo has_est_dDivs = 127; // Yes if one or more expected ddiv is an estimate (not yet announced) [SR Supplied]
    double s_vol = 128; // surface volatility for rev/con strike [SR Supplied Estimate]
    double rc_eEx_prem = 129; // rcEExPrem = (pRv.price - pRvE.price) - (cRv.price - cRvE.price) [american price - european price] [same model parameters; SR supplied parameters including DDivs; is zero for flex revcons]
    double strike_pv = 130; // strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    double prt_price = 131; // reported OPRA print price (pkgPrice if MLeg)
    double prt_price2 = 132; // if reported as 2 separate prints at different prices (ie, partial size improvement)
    int32 prt_size = 133; // reported OPRA print size (pgkSize if MLeg)
    int32 prt_size2 = 134; // reported OPRA print size (pgkSize if MLeg)
    google.protobuf.Timestamp prt_time = 135; // reported OPRA print time (1st print if MLeg) (high precision)
    PrtType prt_type = 136; // reported OPRA print type
    double prt_uBid = 137; // best estimate of uBid @ auction print time
    double prt_uAsk = 138; // best estimate of uAsk @ auction print time
    double prt_uPrc = 139; // best estimate of uPrc @ auction print time
    float prt_surf_prc = 140; // surface prc @ auction print time (@ uMid) (pkgSurfPrc if MLeg)
    float u_prc1m = 141; // uPrc (mid market) @ auction print time + 1m
    float bid_prc1m = 142; // option nbbo bid @ auction print time + 1m
    float ask_prc1m = 143; // option nbbo ask @ auction print time + 1m
    float surf_prc1m = 144; // surface prc @ auction print time + 1m (@ uMid)
    float u_prc10m = 145; // uPrc (mid market) @ auction print time + 10m
    float bid_prc10m = 146; // option nbbo bid @ auction print time + 10m
    float ask_prc10m = 147; // option nbbo ask @ auction print time + 10m
    float surf_prc10m = 148; // surface prc @ auction print time + 10m (@ uMid)
    google.protobuf.Timestamp timestamp = 149;
}


