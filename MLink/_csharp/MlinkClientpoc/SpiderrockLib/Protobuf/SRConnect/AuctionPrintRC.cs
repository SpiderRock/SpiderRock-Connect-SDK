// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRConnect/AuctionPrintRC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRConnect/AuctionPrintRC.proto</summary>
  public static partial class AuctionPrintRCReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRConnect/AuctionPrintRC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuctionPrintRCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidQcm90b2J1Zi9TUkNvbm5lY3QvQXVjdGlvblByaW50UkMucHJvdG8SE3Nw",
            "aWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnByb3RvGh9n",
            "b29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIv4OCg5BdWN0aW9uUHJp",
            "bnRSQxIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYuTWVz",
            "c2FnZU1ldGFkYXRhEjYKBHBrZXkYAiABKAsyKC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkF1Y3Rpb25QcmludFJDLlBLZXkSLgoGdGlja2VyGGQgASgLMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSMAoKdHJhZGVfZGF0ZRhnIAEo",
            "CzIcLnNwaWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRIzCg9pc190ZXN0X2F1",
            "Y3Rpb24YaiABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEi8KC25v",
            "dGljZV90aW1lGG0gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI2",
            "CgxhdWN0aW9uX3R5cGUYcCABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLkF1",
            "Y3Rpb25UeXBlEjoKDmF1Y3Rpb25fc291cmNlGHMgASgOMiIuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5BdWN0aW9uU291cmNlEjEKDWNvbnRhaW5zX2ZsZXgYdiAB",
            "KA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEiwKBHJvb3QYeSABKAsy",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIsCgZleHBpcnkYfCAB",
            "KAsyHC5zcGlkZXJyb2NrLnByb3RvYnVmLkRhdGVLZXkSDgoGc3RyaWtlGH8g",
            "ASgBEhEKCGluZHVzdHJ5GIIBIAEoCRI1CgtzeW1ib2xfdHlwZRiFASABKA4y",
            "Hy5zcGlkZXJyb2NrLnByb3RvYnVmLlN5bWJvbFR5cGUSGAoPdV9hdmdfZGFp",
            "bHlfdmxtGIgBIAEoAhIwCgljdXN0X3NpZGUYiwEgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5CdXlTZWxsEhEKCGN1c3RfcXR5GI4BIAEoBRIRCghjdXN0",
            "X3ByYxiRASABKAESMQoMaGFzX2N1c3RfcHJjGJQBIAEoDjIaLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuWWVzTm8SNgoOY3VzdF9maXJtX3R5cGUYlwEgASgOMh0u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5GaXJtVHlwZRIYCg9jdXN0X2FnZW50X21Q",
            "SUQYmgEgASgJEhkKEGNvbW1fZW5oYW5jZW1lbnQYnQEgASgCEhQKC25vdGlj",
            "ZV91QmlkGKABIAEoARIUCgtub3RpY2VfdUFzaxijASABKAESFQoMbmV0X3N1",
            "cmZfcHJjGKYBIAEoAhIPCgZpX2RheXMYqQEgASgBEhAKB2lfeWVhcnMYrAEg",
            "ASgBEhMKCm1vbmV5X3JhdGUYrwEgASgBEhAKB2RkaXZfcHYYsgEgASgBEjIK",
            "DWhhc19lc3RfZERpdnMYtQEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5Z",
            "ZXNObxIOCgVzX3ZvbBi4ASABKAESFAoLcmNfZUV4X3ByZW0YuwEgASgBEhIK",
            "CXN0cmlrZV9wdhi+ASABKAESGgoRZWZmX3N0b2NrX2xlbmRfcHYYwQEgASgB",
            "EhcKDmVmZl9zdG9ja19yYXRlGMQBIAEoARISCglwcnRfcHJpY2UYxwEgASgB",
            "EhMKCnBydF9wcmljZTIYygEgASgBEhEKCHBydF9zaXplGM0BIAEoBRISCglw",
            "cnRfc2l6ZTIY0AEgASgFEi0KCHBydF90aW1lGNMBIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASLwoIcHJ0X3R5cGUY1gEgASgOMhwuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5QcnRUeXBlEhEKCHBydF91QmlkGNkBIAEoARIRCghw",
            "cnRfdUFzaxjcASABKAESEQoIcHJ0X3VQcmMY3wEgASgBEhUKDHBydF9zdXJm",
            "X3ByYxjiASABKAISGgoRcHJ0X3N0b2NrX2xlbmRfcHYY5QEgASgBEhcKDnBy",
            "dF9zdG9ja19yYXRlGOgBIAEoARIQCgd1X3ByYzFtGOsBIAEoAhISCgliaWRf",
            "cHJjMW0Y7gEgASgCEhIKCWFza19wcmMxbRjxASABKAISEwoKc3VyZl9wcmMx",
            "bRj0ASABKAISHAoTcHJ0X3N0b2NrX2xlbmRfcHYxbRj3ASABKAESGQoQcHJ0",
            "X3N0b2NrX3JhdGUxbRj6ASABKAESEQoIdV9wcmMxMG0Y/QEgASgCEhMKCmJp",
            "ZF9wcmMxMG0YgAIgASgCEhMKCmFza19wcmMxMG0YgwIgASgCEhQKC3N1cmZf",
            "cHJjMTBtGIYCIAEoAhIdChRwcnRfc3RvY2tfbGVuZF9wdjEwbRiJAiABKAES",
            "GgoRcHJ0X3N0b2NrX3JhdGUxMG0YjAIgASgBEi4KCXRpbWVzdGFtcBiPAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGh0KBFBLZXkSFQoNbm90",
            "aWNlX251bWJlchgKIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrintRC), global::Spiderrock.Protobuf.AuctionPrintRC.Parser, new[]{ "Meta", "Pkey", "Ticker", "TradeDate", "IsTestAuction", "NoticeTime", "AuctionType", "AuctionSource", "ContainsFlex", "Root", "Expiry", "Strike", "Industry", "SymbolType", "UAvgDailyVlm", "CustSide", "CustQty", "CustPrc", "HasCustPrc", "CustFirmType", "CustAgentMPID", "CommEnhancement", "NoticeUBid", "NoticeUAsk", "NetSurfPrc", "IDays", "IYears", "MoneyRate", "DdivPv", "HasEstDDivs", "SVol", "RcEExPrem", "StrikePv", "EffStockLendPv", "EffStockRate", "PrtPrice", "PrtPrice2", "PrtSize", "PrtSize2", "PrtTime", "PrtType", "PrtUBid", "PrtUAsk", "PrtUPrc", "PrtSurfPrc", "PrtStockLendPv", "PrtStockRate", "UPrc1M", "BidPrc1M", "AskPrc1M", "SurfPrc1M", "PrtStockLendPv1M", "PrtStockRate1M", "UPrc10M", "BidPrc10M", "AskPrc10M", "SurfPrc10M", "PrtStockLendPv10M", "PrtStockRate10M", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey), global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey.Parser, new[]{ "NoticeNumber" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuctionPrintRC : pb::IMessage<AuctionPrintRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuctionPrintRC> _parser = new pb::MessageParser<AuctionPrintRC>(() => new AuctionPrintRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuctionPrintRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AuctionPrintRCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrintRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrintRC(AuctionPrintRC other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      isTestAuction_ = other.isTestAuction_;
      noticeTime_ = other.noticeTime_ != null ? other.noticeTime_.Clone() : null;
      auctionType_ = other.auctionType_;
      auctionSource_ = other.auctionSource_;
      containsFlex_ = other.containsFlex_;
      root_ = other.root_ != null ? other.root_.Clone() : null;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      strike_ = other.strike_;
      industry_ = other.industry_;
      symbolType_ = other.symbolType_;
      uAvgDailyVlm_ = other.uAvgDailyVlm_;
      custSide_ = other.custSide_;
      custQty_ = other.custQty_;
      custPrc_ = other.custPrc_;
      hasCustPrc_ = other.hasCustPrc_;
      custFirmType_ = other.custFirmType_;
      custAgentMPID_ = other.custAgentMPID_;
      commEnhancement_ = other.commEnhancement_;
      noticeUBid_ = other.noticeUBid_;
      noticeUAsk_ = other.noticeUAsk_;
      netSurfPrc_ = other.netSurfPrc_;
      iDays_ = other.iDays_;
      iYears_ = other.iYears_;
      moneyRate_ = other.moneyRate_;
      ddivPv_ = other.ddivPv_;
      hasEstDDivs_ = other.hasEstDDivs_;
      sVol_ = other.sVol_;
      rcEExPrem_ = other.rcEExPrem_;
      strikePv_ = other.strikePv_;
      effStockLendPv_ = other.effStockLendPv_;
      effStockRate_ = other.effStockRate_;
      prtPrice_ = other.prtPrice_;
      prtPrice2_ = other.prtPrice2_;
      prtSize_ = other.prtSize_;
      prtSize2_ = other.prtSize2_;
      prtTime_ = other.prtTime_ != null ? other.prtTime_.Clone() : null;
      prtType_ = other.prtType_;
      prtUBid_ = other.prtUBid_;
      prtUAsk_ = other.prtUAsk_;
      prtUPrc_ = other.prtUPrc_;
      prtSurfPrc_ = other.prtSurfPrc_;
      prtStockLendPv_ = other.prtStockLendPv_;
      prtStockRate_ = other.prtStockRate_;
      uPrc1M_ = other.uPrc1M_;
      bidPrc1M_ = other.bidPrc1M_;
      askPrc1M_ = other.askPrc1M_;
      surfPrc1M_ = other.surfPrc1M_;
      prtStockLendPv1M_ = other.prtStockLendPv1M_;
      prtStockRate1M_ = other.prtStockRate1M_;
      uPrc10M_ = other.uPrc10M_;
      bidPrc10M_ = other.bidPrc10M_;
      askPrc10M_ = other.askPrc10M_;
      surfPrc10M_ = other.surfPrc10M_;
      prtStockLendPv10M_ = other.prtStockLendPv10M_;
      prtStockRate10M_ = other.prtStockRate10M_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrintRC Clone() {
      return new AuctionPrintRC(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 103;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "is_test_auction" field.</summary>
    public const int IsTestAuctionFieldNumber = 106;
    private global::Spiderrock.Protobuf.YesNo isTestAuction_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, auction is a test auction (not a prod/live auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTestAuction {
      get { return isTestAuction_; }
      set {
        isTestAuction_ = value;
      }
    }

    /// <summary>Field number for the "notice_time" field.</summary>
    public const int NoticeTimeFieldNumber = 109;
    private global::Google.Protobuf.WellKnownTypes.Timestamp noticeTime_;
    /// <summary>
    /// notice create timestamp (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NoticeTime {
      get { return noticeTime_; }
      set {
        noticeTime_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    /// <summary>
    /// (eg. Block, Flash, Improvement, Facilitation, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_source" field.</summary>
    public const int AuctionSourceFieldNumber = 115;
    private global::Spiderrock.Protobuf.AuctionSource auctionSource_ = global::Spiderrock.Protobuf.AuctionSource.Unspecified;
    /// <summary>
    /// source of the auction notice (eg. SRC, MIAX, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionSource AuctionSource {
      get { return auctionSource_; }
      set {
        auctionSource_ = value;
      }
    }

    /// <summary>Field number for the "contains_flex" field.</summary>
    public const int ContainsFlexFieldNumber = 118;
    private global::Spiderrock.Protobuf.YesNo containsFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Flex = European
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsFlex {
      get { return containsFlex_; }
      set {
        containsFlex_ = value;
      }
    }

    /// <summary>Field number for the "root" field.</summary>
    public const int RootFieldNumber = 121;
    private global::Spiderrock.Protobuf.TickerKey root_;
    /// <summary>
    /// option root
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Root {
      get { return root_; }
      set {
        root_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 124;
    private global::Spiderrock.Protobuf.DateKey expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 127;
    private double strike_;
    /// <summary>
    /// rev/con strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 130;
    private string industry_ = "";
    /// <summary>
    /// industry string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 133;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "u_avg_daily_vlm" field.</summary>
    public const int UAvgDailyVlmFieldNumber = 136;
    private float uAvgDailyVlm_;
    /// <summary>
    /// underlier average daily trading volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAvgDailyVlm {
      get { return uAvgDailyVlm_; }
      set {
        uAvgDailyVlm_ = value;
      }
    }

    /// <summary>Field number for the "cust_side" field.</summary>
    public const int CustSideFieldNumber = 139;
    private global::Spiderrock.Protobuf.BuySell custSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell CustSide {
      get { return custSide_; }
      set {
        custSide_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty" field.</summary>
    public const int CustQtyFieldNumber = 142;
    private int custQty_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CustQty {
      get { return custQty_; }
      set {
        custQty_ = value;
      }
    }

    /// <summary>Field number for the "cust_prc" field.</summary>
    public const int CustPrcFieldNumber = 145;
    private double custPrc_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CustPrc {
      get { return custPrc_; }
      set {
        custPrc_ = value;
      }
    }

    /// <summary>Field number for the "has_cust_prc" field.</summary>
    public const int HasCustPrcFieldNumber = 148;
    private global::Spiderrock.Protobuf.YesNo hasCustPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasCustPrc {
      get { return hasCustPrc_; }
      set {
        hasCustPrc_ = value;
      }
    }

    /// <summary>Field number for the "cust_firm_type" field.</summary>
    public const int CustFirmTypeFieldNumber = 151;
    private global::Spiderrock.Protobuf.FirmType custFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// cust firm type (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType CustFirmType {
      get { return custFirmType_; }
      set {
        custFirmType_ = value;
      }
    }

    /// <summary>Field number for the "cust_agent_mPID" field.</summary>
    public const int CustAgentMPIDFieldNumber = 154;
    private string custAgentMPID_ = "";
    /// <summary>
    /// cust agent exchange member initiating the auction (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustAgentMPID {
      get { return custAgentMPID_; }
      set {
        custAgentMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comm_enhancement" field.</summary>
    public const int CommEnhancementFieldNumber = 157;
    private float commEnhancement_;
    /// <summary>
    /// additional commission (if any) paid by responder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CommEnhancement {
      get { return commEnhancement_; }
      set {
        commEnhancement_ = value;
      }
    }

    /// <summary>Field number for the "notice_uBid" field.</summary>
    public const int NoticeUBidFieldNumber = 160;
    private double noticeUBid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NoticeUBid {
      get { return noticeUBid_; }
      set {
        noticeUBid_ = value;
      }
    }

    /// <summary>Field number for the "notice_uAsk" field.</summary>
    public const int NoticeUAskFieldNumber = 163;
    private double noticeUAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NoticeUAsk {
      get { return noticeUAsk_; }
      set {
        noticeUAsk_ = value;
      }
    }

    /// <summary>Field number for the "net_surf_prc" field.</summary>
    public const int NetSurfPrcFieldNumber = 166;
    private float netSurfPrc_;
    /// <summary>
    /// SR Surface Price (entire package)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetSurfPrc {
      get { return netSurfPrc_; }
      set {
        netSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 169;
    private double iDays_;
    /// <summary>
    /// iDays = effective interest days [SR supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "i_years" field.</summary>
    public const int IYearsFieldNumber = 172;
    private double iYears_;
    /// <summary>
    /// iYears = iDays / 360.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IYears {
      get { return iYears_; }
      set {
        iYears_ = value;
      }
    }

    /// <summary>Field number for the "money_rate" field.</summary>
    public const int MoneyRateFieldNumber = 175;
    private double moneyRate_;
    /// <summary>
    /// effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365] [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MoneyRate {
      get { return moneyRate_; }
      set {
        moneyRate_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 178;
    private double ddivPv_;
    /// <summary>
    /// present value of any expected dividends to expiry [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "has_est_dDivs" field.</summary>
    public const int HasEstDDivsFieldNumber = 181;
    private global::Spiderrock.Protobuf.YesNo hasEstDDivs_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Yes if one or more expected ddiv is an estimate (not yet announced) [SR Supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasEstDDivs {
      get { return hasEstDDivs_; }
      set {
        hasEstDDivs_ = value;
      }
    }

    /// <summary>Field number for the "s_vol" field.</summary>
    public const int SVolFieldNumber = 184;
    private double sVol_;
    /// <summary>
    /// surface volatility for rev/con strike [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SVol {
      get { return sVol_; }
      set {
        sVol_ = value;
      }
    }

    /// <summary>Field number for the "rc_eEx_prem" field.</summary>
    public const int RcEExPremFieldNumber = 187;
    private double rcEExPrem_;
    /// <summary>
    /// rcEExPrem = (pRv.price - pRvE.price) - (cRv.price - cRvE.price) [american price - european price] [same model parameters; SR supplied parameters including DDivs; is zero for flex revcons]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RcEExPrem {
      get { return rcEExPrem_; }
      set {
        rcEExPrem_ = value;
      }
    }

    /// <summary>Field number for the "strike_pv" field.</summary>
    public const int StrikePvFieldNumber = 190;
    private double strikePv_;
    /// <summary>
    /// strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikePv {
      get { return strikePv_; }
      set {
        strikePv_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_lend_pv" field.</summary>
    public const int EffStockLendPvFieldNumber = 193;
    private double effStockLendPv_;
    /// <summary>
    /// effStockLendPv = custPrice - strikePv - ddivPv - rcEExPrem  [if cust price is visible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockLendPv {
      get { return effStockLendPv_; }
      set {
        effStockLendPv_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_rate" field.</summary>
    public const int EffStockRateFieldNumber = 196;
    private double effStockRate_;
    /// <summary>
    /// effStockRate = effStockLendPv / (uMid * iYears) [if cust price is visible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockRate {
      get { return effStockRate_; }
      set {
        effStockRate_ = value;
      }
    }

    /// <summary>Field number for the "prt_price" field.</summary>
    public const int PrtPriceFieldNumber = 199;
    private double prtPrice_;
    /// <summary>
    /// reported OPRA print price (pkgPrice if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice {
      get { return prtPrice_; }
      set {
        prtPrice_ = value;
      }
    }

    /// <summary>Field number for the "prt_price2" field.</summary>
    public const int PrtPrice2FieldNumber = 202;
    private double prtPrice2_;
    /// <summary>
    /// if reported as 2 separate prints at different prices (ie, partial size improvement)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice2 {
      get { return prtPrice2_; }
      set {
        prtPrice2_ = value;
      }
    }

    /// <summary>Field number for the "prt_size" field.</summary>
    public const int PrtSizeFieldNumber = 205;
    private int prtSize_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize {
      get { return prtSize_; }
      set {
        prtSize_ = value;
      }
    }

    /// <summary>Field number for the "prt_size2" field.</summary>
    public const int PrtSize2FieldNumber = 208;
    private int prtSize2_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize2 {
      get { return prtSize2_; }
      set {
        prtSize2_ = value;
      }
    }

    /// <summary>Field number for the "prt_time" field.</summary>
    public const int PrtTimeFieldNumber = 211;
    private global::Google.Protobuf.WellKnownTypes.Timestamp prtTime_;
    /// <summary>
    /// reported OPRA print time (1st print if MLeg) (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PrtTime {
      get { return prtTime_; }
      set {
        prtTime_ = value;
      }
    }

    /// <summary>Field number for the "prt_type" field.</summary>
    public const int PrtTypeFieldNumber = 214;
    private global::Spiderrock.Protobuf.PrtType prtType_ = global::Spiderrock.Protobuf.PrtType.Unspecified;
    /// <summary>
    /// reported OPRA print type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtType PrtType {
      get { return prtType_; }
      set {
        prtType_ = value;
      }
    }

    /// <summary>Field number for the "prt_uBid" field.</summary>
    public const int PrtUBidFieldNumber = 217;
    private double prtUBid_;
    /// <summary>
    /// best estimate of uBid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUBid {
      get { return prtUBid_; }
      set {
        prtUBid_ = value;
      }
    }

    /// <summary>Field number for the "prt_uAsk" field.</summary>
    public const int PrtUAskFieldNumber = 220;
    private double prtUAsk_;
    /// <summary>
    /// best estimate of uAsk @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUAsk {
      get { return prtUAsk_; }
      set {
        prtUAsk_ = value;
      }
    }

    /// <summary>Field number for the "prt_uPrc" field.</summary>
    public const int PrtUPrcFieldNumber = 223;
    private double prtUPrc_;
    /// <summary>
    /// best estimate of uPrc @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUPrc {
      get { return prtUPrc_; }
      set {
        prtUPrc_ = value;
      }
    }

    /// <summary>Field number for the "prt_surf_prc" field.</summary>
    public const int PrtSurfPrcFieldNumber = 226;
    private float prtSurfPrc_;
    /// <summary>
    /// surface prc @ auction print time (@ uMid) (pkgSurfPrc if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtSurfPrc {
      get { return prtSurfPrc_; }
      set {
        prtSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_lend_pv" field.</summary>
    public const int PrtStockLendPvFieldNumber = 229;
    private double prtStockLendPv_;
    /// <summary>
    /// prtStockLendPv = prtPrice - strikePv - ddivPv - rcEExPrem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockLendPv {
      get { return prtStockLendPv_; }
      set {
        prtStockLendPv_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_rate" field.</summary>
    public const int PrtStockRateFieldNumber = 232;
    private double prtStockRate_;
    /// <summary>
    /// prtStockRate = prtStockLendPv / (prtUPrc * iYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockRate {
      get { return prtStockRate_; }
      set {
        prtStockRate_ = value;
      }
    }

    /// <summary>Field number for the "u_prc1m" field.</summary>
    public const int UPrc1MFieldNumber = 235;
    private float uPrc1M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc1M {
      get { return uPrc1M_; }
      set {
        uPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc1m" field.</summary>
    public const int BidPrc1MFieldNumber = 238;
    private float bidPrc1M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc1M {
      get { return bidPrc1M_; }
      set {
        bidPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc1m" field.</summary>
    public const int AskPrc1MFieldNumber = 241;
    private float askPrc1M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc1M {
      get { return askPrc1M_; }
      set {
        askPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc1m" field.</summary>
    public const int SurfPrc1MFieldNumber = 244;
    private float surfPrc1M_;
    /// <summary>
    /// surface prc @ auction print time + 1m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc1M {
      get { return surfPrc1M_; }
      set {
        surfPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_lend_pv1m" field.</summary>
    public const int PrtStockLendPv1MFieldNumber = 247;
    private double prtStockLendPv1M_;
    /// <summary>
    /// prtStockLendPv1m = surfPrc1m - strikePv - ddivPv - rcEExPrem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockLendPv1M {
      get { return prtStockLendPv1M_; }
      set {
        prtStockLendPv1M_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_rate1m" field.</summary>
    public const int PrtStockRate1MFieldNumber = 250;
    private double prtStockRate1M_;
    /// <summary>
    /// prtStockRate1m = prtStockLendPv1m / (uPrc1m * iYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockRate1M {
      get { return prtStockRate1M_; }
      set {
        prtStockRate1M_ = value;
      }
    }

    /// <summary>Field number for the "u_prc10m" field.</summary>
    public const int UPrc10MFieldNumber = 253;
    private float uPrc10M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc10M {
      get { return uPrc10M_; }
      set {
        uPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc10m" field.</summary>
    public const int BidPrc10MFieldNumber = 256;
    private float bidPrc10M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc10M {
      get { return bidPrc10M_; }
      set {
        bidPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc10m" field.</summary>
    public const int AskPrc10MFieldNumber = 259;
    private float askPrc10M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc10M {
      get { return askPrc10M_; }
      set {
        askPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc10m" field.</summary>
    public const int SurfPrc10MFieldNumber = 262;
    private float surfPrc10M_;
    /// <summary>
    /// surface prc @ auction print time + 10m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc10M {
      get { return surfPrc10M_; }
      set {
        surfPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_lend_pv10m" field.</summary>
    public const int PrtStockLendPv10MFieldNumber = 265;
    private double prtStockLendPv10M_;
    /// <summary>
    /// prtStockLendPv10m = surfPrc10m - strikePv - ddivPv - rcEExPrem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockLendPv10M {
      get { return prtStockLendPv10M_; }
      set {
        prtStockLendPv10M_ = value;
      }
    }

    /// <summary>Field number for the "prt_stock_rate10m" field.</summary>
    public const int PrtStockRate10MFieldNumber = 268;
    private double prtStockRate10M_;
    /// <summary>
    /// prtStockRate10m = prtStockLendPv10m / (uPrc10m * iYears)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtStockRate10M {
      get { return prtStockRate10M_; }
      set {
        prtStockRate10M_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 271;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuctionPrintRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuctionPrintRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (IsTestAuction != other.IsTestAuction) return false;
      if (!object.Equals(NoticeTime, other.NoticeTime)) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionSource != other.AuctionSource) return false;
      if (ContainsFlex != other.ContainsFlex) return false;
      if (!object.Equals(Root, other.Root)) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (Industry != other.Industry) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAvgDailyVlm, other.UAvgDailyVlm)) return false;
      if (CustSide != other.CustSide) return false;
      if (CustQty != other.CustQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CustPrc, other.CustPrc)) return false;
      if (HasCustPrc != other.HasCustPrc) return false;
      if (CustFirmType != other.CustFirmType) return false;
      if (CustAgentMPID != other.CustAgentMPID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommEnhancement, other.CommEnhancement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NoticeUBid, other.NoticeUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NoticeUAsk, other.NoticeUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetSurfPrc, other.NetSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IDays, other.IDays)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IYears, other.IYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoneyRate, other.MoneyRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (HasEstDDivs != other.HasEstDDivs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SVol, other.SVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RcEExPrem, other.RcEExPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePv, other.StrikePv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockLendPv, other.EffStockLendPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockRate, other.EffStockRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice, other.PrtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice2, other.PrtPrice2)) return false;
      if (PrtSize != other.PrtSize) return false;
      if (PrtSize2 != other.PrtSize2) return false;
      if (!object.Equals(PrtTime, other.PrtTime)) return false;
      if (PrtType != other.PrtType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUBid, other.PrtUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUAsk, other.PrtUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUPrc, other.PrtUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtSurfPrc, other.PrtSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockLendPv, other.PrtStockLendPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockRate, other.PrtStockRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc1M, other.UPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc1M, other.BidPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc1M, other.AskPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc1M, other.SurfPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockLendPv1M, other.PrtStockLendPv1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockRate1M, other.PrtStockRate1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc10M, other.UPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc10M, other.BidPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc10M, other.AskPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc10M, other.SurfPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockLendPv10M, other.PrtStockLendPv10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtStockRate10M, other.PrtStockRate10M)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAuction.GetHashCode();
      if (noticeTime_ != null) hash ^= NoticeTime.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) hash ^= AuctionSource.GetHashCode();
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsFlex.GetHashCode();
      if (root_ != null) hash ^= Root.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (Strike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (Industry.Length != 0) hash ^= Industry.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (UAvgDailyVlm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAvgDailyVlm);
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= CustSide.GetHashCode();
      if (CustQty != 0) hash ^= CustQty.GetHashCode();
      if (CustPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CustPrc);
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasCustPrc.GetHashCode();
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= CustFirmType.GetHashCode();
      if (CustAgentMPID.Length != 0) hash ^= CustAgentMPID.GetHashCode();
      if (CommEnhancement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommEnhancement);
      if (NoticeUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NoticeUBid);
      if (NoticeUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NoticeUAsk);
      if (NetSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetSurfPrc);
      if (IDays != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IDays);
      if (IYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IYears);
      if (MoneyRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoneyRate);
      if (DdivPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DdivPv);
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasEstDDivs.GetHashCode();
      if (SVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SVol);
      if (RcEExPrem != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RcEExPrem);
      if (StrikePv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePv);
      if (EffStockLendPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockLendPv);
      if (EffStockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockRate);
      if (PrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice);
      if (PrtPrice2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice2);
      if (PrtSize != 0) hash ^= PrtSize.GetHashCode();
      if (PrtSize2 != 0) hash ^= PrtSize2.GetHashCode();
      if (prtTime_ != null) hash ^= PrtTime.GetHashCode();
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) hash ^= PrtType.GetHashCode();
      if (PrtUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUBid);
      if (PrtUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUAsk);
      if (PrtUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUPrc);
      if (PrtSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtSurfPrc);
      if (PrtStockLendPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockLendPv);
      if (PrtStockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockRate);
      if (UPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc1M);
      if (BidPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc1M);
      if (AskPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc1M);
      if (SurfPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc1M);
      if (PrtStockLendPv1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockLendPv1M);
      if (PrtStockRate1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockRate1M);
      if (UPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc10M);
      if (BidPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc10M);
      if (AskPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc10M);
      if (SurfPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc10M);
      if (PrtStockLendPv10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockLendPv10M);
      if (PrtStockRate10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtStockRate10M);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionSource);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) ContainsFlex);
      }
      if (root_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(Root);
      }
      if (expiry_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(Expiry);
      }
      if (Strike != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(Strike);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(CommEnhancement);
      }
      if (NoticeUBid != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(NoticeUBid);
      }
      if (NoticeUAsk != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(NoticeUAsk);
      }
      if (NetSurfPrc != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(NetSurfPrc);
      }
      if (IDays != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(IYears);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(DdivPv);
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(SVol);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(StrikePv);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(EffStockRate);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PrtSurfPrc);
      }
      if (PrtStockLendPv != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(PrtStockLendPv);
      }
      if (PrtStockRate != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(PrtStockRate);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SurfPrc1M);
      }
      if (PrtStockLendPv1M != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(PrtStockLendPv1M);
      }
      if (PrtStockRate1M != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(PrtStockRate1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SurfPrc10M);
      }
      if (PrtStockLendPv10M != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(PrtStockLendPv10M);
      }
      if (PrtStockRate10M != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(PrtStockRate10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(250, 16);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionSource);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) ContainsFlex);
      }
      if (root_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(Root);
      }
      if (expiry_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(Expiry);
      }
      if (Strike != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(Strike);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(CommEnhancement);
      }
      if (NoticeUBid != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(NoticeUBid);
      }
      if (NoticeUAsk != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(NoticeUAsk);
      }
      if (NetSurfPrc != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(NetSurfPrc);
      }
      if (IDays != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(IYears);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(DdivPv);
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(SVol);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(StrikePv);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(EffStockRate);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(176, 13);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PrtSurfPrc);
      }
      if (PrtStockLendPv != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(PrtStockLendPv);
      }
      if (PrtStockRate != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(PrtStockRate);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SurfPrc1M);
      }
      if (PrtStockLendPv1M != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(PrtStockLendPv1M);
      }
      if (PrtStockRate1M != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(PrtStockRate1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SurfPrc10M);
      }
      if (PrtStockLendPv10M != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(PrtStockLendPv10M);
      }
      if (PrtStockRate10M != 0D) {
        output.WriteRawTag(225, 16);
        output.WriteDouble(PrtStockRate10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(250, 16);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSource);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsFlex);
      }
      if (root_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Root);
      }
      if (expiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (Strike != 0D) {
        size += 2 + 8;
      }
      if (Industry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        size += 2 + 4;
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustSide);
      }
      if (CustQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustQty);
      }
      if (CustPrc != 0D) {
        size += 2 + 8;
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        size += 2 + 4;
      }
      if (NoticeUBid != 0D) {
        size += 2 + 8;
      }
      if (NoticeUAsk != 0D) {
        size += 2 + 8;
      }
      if (NetSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (IDays != 0D) {
        size += 2 + 8;
      }
      if (IYears != 0D) {
        size += 2 + 8;
      }
      if (MoneyRate != 0D) {
        size += 2 + 8;
      }
      if (DdivPv != 0D) {
        size += 2 + 8;
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        size += 2 + 8;
      }
      if (RcEExPrem != 0D) {
        size += 2 + 8;
      }
      if (StrikePv != 0D) {
        size += 2 + 8;
      }
      if (EffStockLendPv != 0D) {
        size += 2 + 8;
      }
      if (EffStockRate != 0D) {
        size += 2 + 8;
      }
      if (PrtPrice != 0D) {
        size += 2 + 8;
      }
      if (PrtPrice2 != 0D) {
        size += 2 + 8;
      }
      if (PrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize);
      }
      if (PrtSize2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize2);
      }
      if (prtTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtType);
      }
      if (PrtUBid != 0D) {
        size += 2 + 8;
      }
      if (PrtUAsk != 0D) {
        size += 2 + 8;
      }
      if (PrtUPrc != 0D) {
        size += 2 + 8;
      }
      if (PrtSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (PrtStockLendPv != 0D) {
        size += 2 + 8;
      }
      if (PrtStockRate != 0D) {
        size += 2 + 8;
      }
      if (UPrc1M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc1M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc1M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc1M != 0F) {
        size += 2 + 4;
      }
      if (PrtStockLendPv1M != 0D) {
        size += 2 + 8;
      }
      if (PrtStockRate1M != 0D) {
        size += 2 + 8;
      }
      if (UPrc10M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc10M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc10M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc10M != 0F) {
        size += 2 + 4;
      }
      if (PrtStockLendPv10M != 0D) {
        size += 2 + 8;
      }
      if (PrtStockRate10M != 0D) {
        size += 2 + 8;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuctionPrintRC other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTestAuction = other.IsTestAuction;
      }
      if (other.noticeTime_ != null) {
        if (noticeTime_ == null) {
          NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NoticeTime.MergeFrom(other.NoticeTime);
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        AuctionSource = other.AuctionSource;
      }
      if (other.ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsFlex = other.ContainsFlex;
      }
      if (other.root_ != null) {
        if (root_ == null) {
          Root = new global::Spiderrock.Protobuf.TickerKey();
        }
        Root.MergeFrom(other.Root);
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          Expiry = new global::Spiderrock.Protobuf.DateKey();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.Strike != 0D) {
        Strike = other.Strike;
      }
      if (other.Industry.Length != 0) {
        Industry = other.Industry;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.UAvgDailyVlm != 0F) {
        UAvgDailyVlm = other.UAvgDailyVlm;
      }
      if (other.CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        CustSide = other.CustSide;
      }
      if (other.CustQty != 0) {
        CustQty = other.CustQty;
      }
      if (other.CustPrc != 0D) {
        CustPrc = other.CustPrc;
      }
      if (other.HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasCustPrc = other.HasCustPrc;
      }
      if (other.CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        CustFirmType = other.CustFirmType;
      }
      if (other.CustAgentMPID.Length != 0) {
        CustAgentMPID = other.CustAgentMPID;
      }
      if (other.CommEnhancement != 0F) {
        CommEnhancement = other.CommEnhancement;
      }
      if (other.NoticeUBid != 0D) {
        NoticeUBid = other.NoticeUBid;
      }
      if (other.NoticeUAsk != 0D) {
        NoticeUAsk = other.NoticeUAsk;
      }
      if (other.NetSurfPrc != 0F) {
        NetSurfPrc = other.NetSurfPrc;
      }
      if (other.IDays != 0D) {
        IDays = other.IDays;
      }
      if (other.IYears != 0D) {
        IYears = other.IYears;
      }
      if (other.MoneyRate != 0D) {
        MoneyRate = other.MoneyRate;
      }
      if (other.DdivPv != 0D) {
        DdivPv = other.DdivPv;
      }
      if (other.HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasEstDDivs = other.HasEstDDivs;
      }
      if (other.SVol != 0D) {
        SVol = other.SVol;
      }
      if (other.RcEExPrem != 0D) {
        RcEExPrem = other.RcEExPrem;
      }
      if (other.StrikePv != 0D) {
        StrikePv = other.StrikePv;
      }
      if (other.EffStockLendPv != 0D) {
        EffStockLendPv = other.EffStockLendPv;
      }
      if (other.EffStockRate != 0D) {
        EffStockRate = other.EffStockRate;
      }
      if (other.PrtPrice != 0D) {
        PrtPrice = other.PrtPrice;
      }
      if (other.PrtPrice2 != 0D) {
        PrtPrice2 = other.PrtPrice2;
      }
      if (other.PrtSize != 0) {
        PrtSize = other.PrtSize;
      }
      if (other.PrtSize2 != 0) {
        PrtSize2 = other.PrtSize2;
      }
      if (other.prtTime_ != null) {
        if (prtTime_ == null) {
          PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PrtTime.MergeFrom(other.PrtTime);
      }
      if (other.PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        PrtType = other.PrtType;
      }
      if (other.PrtUBid != 0D) {
        PrtUBid = other.PrtUBid;
      }
      if (other.PrtUAsk != 0D) {
        PrtUAsk = other.PrtUAsk;
      }
      if (other.PrtUPrc != 0D) {
        PrtUPrc = other.PrtUPrc;
      }
      if (other.PrtSurfPrc != 0F) {
        PrtSurfPrc = other.PrtSurfPrc;
      }
      if (other.PrtStockLendPv != 0D) {
        PrtStockLendPv = other.PrtStockLendPv;
      }
      if (other.PrtStockRate != 0D) {
        PrtStockRate = other.PrtStockRate;
      }
      if (other.UPrc1M != 0F) {
        UPrc1M = other.UPrc1M;
      }
      if (other.BidPrc1M != 0F) {
        BidPrc1M = other.BidPrc1M;
      }
      if (other.AskPrc1M != 0F) {
        AskPrc1M = other.AskPrc1M;
      }
      if (other.SurfPrc1M != 0F) {
        SurfPrc1M = other.SurfPrc1M;
      }
      if (other.PrtStockLendPv1M != 0D) {
        PrtStockLendPv1M = other.PrtStockLendPv1M;
      }
      if (other.PrtStockRate1M != 0D) {
        PrtStockRate1M = other.PrtStockRate1M;
      }
      if (other.UPrc10M != 0F) {
        UPrc10M = other.UPrc10M;
      }
      if (other.BidPrc10M != 0F) {
        BidPrc10M = other.BidPrc10M;
      }
      if (other.AskPrc10M != 0F) {
        AskPrc10M = other.AskPrc10M;
      }
      if (other.SurfPrc10M != 0F) {
        SurfPrc10M = other.SurfPrc10M;
      }
      if (other.PrtStockLendPv10M != 0D) {
        PrtStockLendPv10M = other.PrtStockLendPv10M;
      }
      if (other.PrtStockRate10M != 0D) {
        PrtStockRate10M = other.PrtStockRate10M;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 848: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 874: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 896: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 944: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 970: {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Root);
            break;
          }
          case 994: {
            if (expiry_ == null) {
              Expiry = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 1017: {
            Strike = input.ReadDouble();
            break;
          }
          case 1042: {
            Industry = input.ReadString();
            break;
          }
          case 1064: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1093: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 1112: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1136: {
            CustQty = input.ReadInt32();
            break;
          }
          case 1161: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 1184: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1208: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1234: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1261: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 1281: {
            NoticeUBid = input.ReadDouble();
            break;
          }
          case 1305: {
            NoticeUAsk = input.ReadDouble();
            break;
          }
          case 1333: {
            NetSurfPrc = input.ReadFloat();
            break;
          }
          case 1353: {
            IDays = input.ReadDouble();
            break;
          }
          case 1377: {
            IYears = input.ReadDouble();
            break;
          }
          case 1401: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 1425: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 1448: {
            HasEstDDivs = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1473: {
            SVol = input.ReadDouble();
            break;
          }
          case 1497: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 1521: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1545: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1569: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1593: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 1617: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 1640: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 1664: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1690: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1712: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1737: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1761: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1785: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1813: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1833: {
            PrtStockLendPv = input.ReadDouble();
            break;
          }
          case 1857: {
            PrtStockRate = input.ReadDouble();
            break;
          }
          case 1885: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 1909: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 1933: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 1957: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 1977: {
            PrtStockLendPv1M = input.ReadDouble();
            break;
          }
          case 2001: {
            PrtStockRate1M = input.ReadDouble();
            break;
          }
          case 2029: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 2053: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 2077: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 2101: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 2121: {
            PrtStockLendPv10M = input.ReadDouble();
            break;
          }
          case 2145: {
            PrtStockRate10M = input.ReadDouble();
            break;
          }
          case 2170: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrintRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 848: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 874: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 896: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 944: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 970: {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Root);
            break;
          }
          case 994: {
            if (expiry_ == null) {
              Expiry = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 1017: {
            Strike = input.ReadDouble();
            break;
          }
          case 1042: {
            Industry = input.ReadString();
            break;
          }
          case 1064: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1093: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 1112: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1136: {
            CustQty = input.ReadInt32();
            break;
          }
          case 1161: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 1184: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1208: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1234: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1261: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 1281: {
            NoticeUBid = input.ReadDouble();
            break;
          }
          case 1305: {
            NoticeUAsk = input.ReadDouble();
            break;
          }
          case 1333: {
            NetSurfPrc = input.ReadFloat();
            break;
          }
          case 1353: {
            IDays = input.ReadDouble();
            break;
          }
          case 1377: {
            IYears = input.ReadDouble();
            break;
          }
          case 1401: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 1425: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 1448: {
            HasEstDDivs = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1473: {
            SVol = input.ReadDouble();
            break;
          }
          case 1497: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 1521: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1545: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1569: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1593: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 1617: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 1640: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 1664: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1690: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1712: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1737: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1761: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1785: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1813: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1833: {
            PrtStockLendPv = input.ReadDouble();
            break;
          }
          case 1857: {
            PrtStockRate = input.ReadDouble();
            break;
          }
          case 1885: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 1909: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 1933: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 1957: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 1977: {
            PrtStockLendPv1M = input.ReadDouble();
            break;
          }
          case 2001: {
            PrtStockRate1M = input.ReadDouble();
            break;
          }
          case 2029: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 2053: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 2077: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 2101: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 2121: {
            PrtStockLendPv10M = input.ReadDouble();
            break;
          }
          case 2145: {
            PrtStockRate10M = input.ReadDouble();
            break;
          }
          case 2170: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AuctionPrintRC message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionPrintRC.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          noticeNumber_ = other.noticeNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "notice_number" field.</summary>
        public const int NoticeNumberFieldNumber = 10;
        private long noticeNumber_;
        /// <summary>
        /// AuctionNotice.noticeNumber
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long NoticeNumber {
          get { return noticeNumber_; }
          set {
            noticeNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NoticeNumber != other.NoticeNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (NoticeNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.NoticeNumber != 0L) {
            NoticeNumber = other.NoticeNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
