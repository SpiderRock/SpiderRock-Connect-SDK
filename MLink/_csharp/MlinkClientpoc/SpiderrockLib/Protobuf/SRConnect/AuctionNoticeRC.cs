// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRConnect/AuctionNoticeRC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRConnect/AuctionNoticeRC.proto</summary>
  public static partial class AuctionNoticeRCReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRConnect/AuctionNoticeRC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuctionNoticeRCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihQcm90b2J1Zi9TUkNvbm5lY3QvQXVjdGlvbk5vdGljZVJDLnByb3RvEhNz",
            "cGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLnDgoPQXVjdGlvbk5v",
            "dGljZVJDEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5N",
            "ZXNzYWdlTWV0YWRhdGESNwoEcGtleRgCIAEoCzIpLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQXVjdGlvbk5vdGljZVJDLlBLZXkSLgoGdGlja2VyGGQgASgLMh4u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSMAoKdHJhZGVfZGF0ZRhl",
            "IAEoCzIcLnNwaWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRI2CgxhdWN0aW9u",
            "X3R5cGUYZiABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLkF1Y3Rpb25UeXBl",
            "EjgKDWF1Y3Rpb25fZXZlbnQYZyABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkF1Y3Rpb25FdmVudBIWCg5zcmNfYXVjdGlvbl9pRBhoIAEoCRIYChBzcmNf",
            "YXVjdGlvbl90eXBlGGkgASgJEjoKDmF1Y3Rpb25fc291cmNlGGogASgOMiIu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uU291cmNlEjMKD2lzX3Rlc3Rf",
            "YXVjdGlvbhhrIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SMQoN",
            "Y29udGFpbnNfZmxleBhsIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVz",
            "Tm8SEgoKc2hvcnRfY29kZRhtIAEoCRIQCghpbmR1c3RyeRhuIAEoCRI0Cgtz",
            "eW1ib2xfdHlwZRhvIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuU3ltYm9s",
            "VHlwZRIXCg91X2F2Z19kYWlseV92bG0YcCABKAISLAoEcm9vdBhxIAEoCzIe",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EiwKBmV4cGlyeRhyIAEo",
            "CzIcLnNwaWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRIOCgZzdHJpa2UYcyAB",
            "KAESLwoJY3VzdF9zaWRlGHQgASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5C",
            "dXlTZWxsEhAKCGN1c3RfcXR5GHUgASgFEhAKCGN1c3RfcHJjGHYgASgBEjAK",
            "DGhhc19jdXN0X3ByYxh3IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVz",
            "Tm8SNQoOY3VzdF9maXJtX3R5cGUYeCABKA4yHS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkZpcm1UeXBlEhcKD2N1c3RfYWdlbnRfbVBJRBh5IAEoCRIYChBjdXN0",
            "X2NsaWVudF9maXJtGHogASgJEhgKEGNvbW1fZW5oYW5jZW1lbnQYeyABKAIS",
            "NAoQY3VzdF9jb21tX3BheWluZxh8IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuWWVzTm8SNwoNY3VzdF9xdHlfY29uZBh9IAEoDjIgLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuQ3VzdFF0eUNvbmQSGAoQYXVjdGlvbl9kdXJhdGlvbhh+IAEo",
            "BRINCgV1X2JpZBh/IAEoARIOCgV1X2FzaxiAASABKAESDwoGaV9kYXlzGIEB",
            "IAEoARIQCgdpX3llYXJzGIIBIAEoARITCgptb25leV9yYXRlGIMBIAEoARIQ",
            "CgdkZGl2X3B2GIQBIAEoARIyCg1oYXNfZXN0X2REaXZzGIUBIAEoDjIaLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuWWVzTm8SDgoFc192b2wYhgEgASgBEhQKC3Jj",
            "X2VFeF9wcmVtGIcBIAEoARISCglzdHJpa2VfcHYYiAEgASgBEhoKEWVmZl9z",
            "dG9ja19sZW5kX3B2GIkBIAEoARIXCg5lZmZfc3RvY2tfcmF0ZRiKASABKAES",
            "FgoNc3JjX3RpbWVzdGFtcBiLASABKAMSFgoNbmV0X3RpbWVzdGFtcBiMASAB",
            "KAMSLgoJdGltZXN0YW1wGI0BIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASQQoRaW5jbHVkZV9zUk5ldHdvcmsYjgEgASgOMiUuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5JbmNsRXhjbERpc2Nsb3NlEloKFmRpcmVjdGVkX2NvdW50",
            "ZXJfcGFydHkYjwEgAygLMjkuc3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9u",
            "Tm90aWNlUkMuRGlyZWN0ZWRDb3VudGVyUGFydHkaHQoEUEtleRIVCg1ub3Rp",
            "Y2VfbnVtYmVyGAogASgDGpwBChREaXJlY3RlZENvdW50ZXJQYXJ0eRIUCgtj",
            "bGllbnRfZmlybRiQASABKAkSOQoJaW5jbF9leGNsGJEBIAEoDjIlLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuSW5jbEV4Y2xEaXNjbG9zZRIzCg5pc19jb21tX3Bh",
            "eWluZxiSASABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNoticeRC), global::Spiderrock.Protobuf.AuctionNoticeRC.Parser, new[]{ "Meta", "Pkey", "Ticker", "TradeDate", "AuctionType", "AuctionEvent", "SrcAuctionID", "SrcAuctionType", "AuctionSource", "IsTestAuction", "ContainsFlex", "ShortCode", "Industry", "SymbolType", "UAvgDailyVlm", "Root", "Expiry", "Strike", "CustSide", "CustQty", "CustPrc", "HasCustPrc", "CustFirmType", "CustAgentMPID", "CustClientFirm", "CommEnhancement", "CustCommPaying", "CustQtyCond", "AuctionDuration", "UBid", "UAsk", "IDays", "IYears", "MoneyRate", "DdivPv", "HasEstDDivs", "SVol", "RcEExPrem", "StrikePv", "EffStockLendPv", "EffStockRate", "SrcTimestamp", "NetTimestamp", "Timestamp", "IncludeSRNetwork", "DirectedCounterParty" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey), global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey.Parser, new[]{ "NoticeNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty), global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty.Parser, new[]{ "ClientFirm", "InclExcl", "IsCommPaying" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuctionNoticeRC : pb::IMessage<AuctionNoticeRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuctionNoticeRC> _parser = new pb::MessageParser<AuctionNoticeRC>(() => new AuctionNoticeRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuctionNoticeRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AuctionNoticeRCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNoticeRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNoticeRC(AuctionNoticeRC other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      auctionType_ = other.auctionType_;
      auctionEvent_ = other.auctionEvent_;
      srcAuctionID_ = other.srcAuctionID_;
      srcAuctionType_ = other.srcAuctionType_;
      auctionSource_ = other.auctionSource_;
      isTestAuction_ = other.isTestAuction_;
      containsFlex_ = other.containsFlex_;
      shortCode_ = other.shortCode_;
      industry_ = other.industry_;
      symbolType_ = other.symbolType_;
      uAvgDailyVlm_ = other.uAvgDailyVlm_;
      root_ = other.root_ != null ? other.root_.Clone() : null;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      strike_ = other.strike_;
      custSide_ = other.custSide_;
      custQty_ = other.custQty_;
      custPrc_ = other.custPrc_;
      hasCustPrc_ = other.hasCustPrc_;
      custFirmType_ = other.custFirmType_;
      custAgentMPID_ = other.custAgentMPID_;
      custClientFirm_ = other.custClientFirm_;
      commEnhancement_ = other.commEnhancement_;
      custCommPaying_ = other.custCommPaying_;
      custQtyCond_ = other.custQtyCond_;
      auctionDuration_ = other.auctionDuration_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      iDays_ = other.iDays_;
      iYears_ = other.iYears_;
      moneyRate_ = other.moneyRate_;
      ddivPv_ = other.ddivPv_;
      hasEstDDivs_ = other.hasEstDDivs_;
      sVol_ = other.sVol_;
      rcEExPrem_ = other.rcEExPrem_;
      strikePv_ = other.strikePv_;
      effStockLendPv_ = other.effStockLendPv_;
      effStockRate_ = other.effStockRate_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      includeSRNetwork_ = other.includeSRNetwork_;
      directedCounterParty_ = other.directedCounterParty_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionNoticeRC Clone() {
      return new AuctionNoticeRC(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 101;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 102;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_event" field.</summary>
    public const int AuctionEventFieldNumber = 103;
    private global::Spiderrock.Protobuf.AuctionEvent auctionEvent_ = global::Spiderrock.Protobuf.AuctionEvent.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionEvent AuctionEvent {
      get { return auctionEvent_; }
      set {
        auctionEvent_ = value;
      }
    }

    /// <summary>Field number for the "src_auction_iD" field.</summary>
    public const int SrcAuctionIDFieldNumber = 104;
    private string srcAuctionID_ = "";
    /// <summary>
    /// auction ID as known by the auction source (empty for SRC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcAuctionID {
      get { return srcAuctionID_; }
      set {
        srcAuctionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_auction_type" field.</summary>
    public const int SrcAuctionTypeFieldNumber = 105;
    private string srcAuctionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcAuctionType {
      get { return srcAuctionType_; }
      set {
        srcAuctionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auction_source" field.</summary>
    public const int AuctionSourceFieldNumber = 106;
    private global::Spiderrock.Protobuf.AuctionSource auctionSource_ = global::Spiderrock.Protobuf.AuctionSource.Unspecified;
    /// <summary>
    /// source of the auction notice (eg. SRC, MIAX, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionSource AuctionSource {
      get { return auctionSource_; }
      set {
        auctionSource_ = value;
      }
    }

    /// <summary>Field number for the "is_test_auction" field.</summary>
    public const int IsTestAuctionFieldNumber = 107;
    private global::Spiderrock.Protobuf.YesNo isTestAuction_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, auction is a test auction (not a prod/live auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTestAuction {
      get { return isTestAuction_; }
      set {
        isTestAuction_ = value;
      }
    }

    /// <summary>Field number for the "contains_flex" field.</summary>
    public const int ContainsFlexFieldNumber = 108;
    private global::Spiderrock.Protobuf.YesNo containsFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Flex = European
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsFlex {
      get { return containsFlex_; }
      set {
        containsFlex_ = value;
      }
    }

    /// <summary>Field number for the "short_code" field.</summary>
    public const int ShortCodeFieldNumber = 109;
    private string shortCode_ = "";
    /// <summary>
    /// 8 letter auction short code (unique per day) (block auctions only) (can be used to find auctions on SR tools)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortCode {
      get { return shortCode_; }
      set {
        shortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 110;
    private string industry_ = "";
    /// <summary>
    /// industry string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 111;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "u_avg_daily_vlm" field.</summary>
    public const int UAvgDailyVlmFieldNumber = 112;
    private float uAvgDailyVlm_;
    /// <summary>
    /// underlier average daily trading volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAvgDailyVlm {
      get { return uAvgDailyVlm_; }
      set {
        uAvgDailyVlm_ = value;
      }
    }

    /// <summary>Field number for the "root" field.</summary>
    public const int RootFieldNumber = 113;
    private global::Spiderrock.Protobuf.TickerKey root_;
    /// <summary>
    /// option root  (+C/-P/-U)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Root {
      get { return root_; }
      set {
        root_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 114;
    private global::Spiderrock.Protobuf.DateKey expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 115;
    private double strike_;
    /// <summary>
    /// rev/con strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "cust_side" field.</summary>
    public const int CustSideFieldNumber = 116;
    private global::Spiderrock.Protobuf.BuySell custSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// if available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell CustSide {
      get { return custSide_; }
      set {
        custSide_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty" field.</summary>
    public const int CustQtyFieldNumber = 117;
    private int custQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CustQty {
      get { return custQty_; }
      set {
        custQty_ = value;
      }
    }

    /// <summary>Field number for the "cust_prc" field.</summary>
    public const int CustPrcFieldNumber = 118;
    private double custPrc_;
    /// <summary>
    /// public cust price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CustPrc {
      get { return custPrc_; }
      set {
        custPrc_ = value;
      }
    }

    /// <summary>Field number for the "has_cust_prc" field.</summary>
    public const int HasCustPrcFieldNumber = 119;
    private global::Spiderrock.Protobuf.YesNo hasCustPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasCustPrc {
      get { return hasCustPrc_; }
      set {
        hasCustPrc_ = value;
      }
    }

    /// <summary>Field number for the "cust_firm_type" field.</summary>
    public const int CustFirmTypeFieldNumber = 120;
    private global::Spiderrock.Protobuf.FirmType custFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// cust firm type (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType CustFirmType {
      get { return custFirmType_; }
      set {
        custFirmType_ = value;
      }
    }

    /// <summary>Field number for the "cust_agent_mPID" field.</summary>
    public const int CustAgentMPIDFieldNumber = 121;
    private string custAgentMPID_ = "";
    /// <summary>
    /// cust agent exchange member initiating the auction (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustAgentMPID {
      get { return custAgentMPID_; }
      set {
        custAgentMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cust_client_firm" field.</summary>
    public const int CustClientFirmFieldNumber = 122;
    private string custClientFirm_ = "";
    /// <summary>
    /// cust client firm (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustClientFirm {
      get { return custClientFirm_; }
      set {
        custClientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comm_enhancement" field.</summary>
    public const int CommEnhancementFieldNumber = 123;
    private float commEnhancement_;
    /// <summary>
    /// additional commission (if any) paid by responder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CommEnhancement {
      get { return commEnhancement_; }
      set {
        commEnhancement_ = value;
      }
    }

    /// <summary>Field number for the "cust_comm_paying" field.</summary>
    public const int CustCommPayingFieldNumber = 124;
    private global::Spiderrock.Protobuf.YesNo custCommPaying_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// client is commission paying (to the responder)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo CustCommPaying {
      get { return custCommPaying_; }
      set {
        custCommPaying_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty_cond" field.</summary>
    public const int CustQtyCondFieldNumber = 125;
    private global::Spiderrock.Protobuf.CustQtyCond custQtyCond_ = global::Spiderrock.Protobuf.CustQtyCond.Unspecified;
    /// <summary>
    /// UpToQty, AllOrNone, QtyOrMore
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CustQtyCond CustQtyCond {
      get { return custQtyCond_; }
      set {
        custQtyCond_ = value;
      }
    }

    /// <summary>Field number for the "auction_duration" field.</summary>
    public const int AuctionDurationFieldNumber = 126;
    private int auctionDuration_;
    /// <summary>
    /// [expected] auction duration (in milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionDuration {
      get { return auctionDuration_; }
      set {
        auctionDuration_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 127;
    private double uBid_;
    /// <summary>
    /// live stock price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 128;
    private double uAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "i_days" field.</summary>
    public const int IDaysFieldNumber = 129;
    private double iDays_;
    /// <summary>
    /// iDays = effective interest days [SR supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IDays {
      get { return iDays_; }
      set {
        iDays_ = value;
      }
    }

    /// <summary>Field number for the "i_years" field.</summary>
    public const int IYearsFieldNumber = 130;
    private double iYears_;
    /// <summary>
    /// iYears = iDays / 360.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double IYears {
      get { return iYears_; }
      set {
        iYears_ = value;
      }
    }

    /// <summary>Field number for the "money_rate" field.</summary>
    public const int MoneyRateFieldNumber = 131;
    private double moneyRate_;
    /// <summary>
    /// effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365] [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MoneyRate {
      get { return moneyRate_; }
      set {
        moneyRate_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 132;
    private double ddivPv_;
    /// <summary>
    /// present value of any expected dividends to expiry [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "has_est_dDivs" field.</summary>
    public const int HasEstDDivsFieldNumber = 133;
    private global::Spiderrock.Protobuf.YesNo hasEstDDivs_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// Yes if one or more expected ddiv is an estimate (not yet announced) [SR Supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasEstDDivs {
      get { return hasEstDDivs_; }
      set {
        hasEstDDivs_ = value;
      }
    }

    /// <summary>Field number for the "s_vol" field.</summary>
    public const int SVolFieldNumber = 134;
    private double sVol_;
    /// <summary>
    /// surface volatility for rev/con strike [SR Supplied Estimate]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SVol {
      get { return sVol_; }
      set {
        sVol_ = value;
      }
    }

    /// <summary>Field number for the "rc_eEx_prem" field.</summary>
    public const int RcEExPremFieldNumber = 135;
    private double rcEExPrem_;
    /// <summary>
    /// rcEExPrem = (pRv.price - pRvE.price) - (cRv.price - cRvE.price) [american price - european price] [same model parameters; SR supplied parameters including DDivs; is zero for flex revcons]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RcEExPrem {
      get { return rcEExPrem_; }
      set {
        rcEExPrem_ = value;
      }
    }

    /// <summary>Field number for the "strike_pv" field.</summary>
    public const int StrikePvFieldNumber = 136;
    private double strikePv_;
    /// <summary>
    /// strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikePv {
      get { return strikePv_; }
      set {
        strikePv_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_lend_pv" field.</summary>
    public const int EffStockLendPvFieldNumber = 137;
    private double effStockLendPv_;
    /// <summary>
    /// effStockLendPv = custPrice - strikePv - ddivPv - rcEExPrem  [if cust price is visible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockLendPv {
      get { return effStockLendPv_; }
      set {
        effStockLendPv_ = value;
      }
    }

    /// <summary>Field number for the "eff_stock_rate" field.</summary>
    public const int EffStockRateFieldNumber = 138;
    private double effStockRate_;
    /// <summary>
    /// effStockRate = effStockLendPv / (uMid * iYears) [if cust price is visible]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EffStockRate {
      get { return effStockRate_; }
      set {
        effStockRate_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 139;
    private long srcTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 140;
    private long netTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 141;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// from ats / exchange net timestamp if possible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "include_sRNetwork" field.</summary>
    public const int IncludeSRNetworkFieldNumber = 142;
    private global::Spiderrock.Protobuf.InclExclDisclose includeSRNetwork_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.InclExclDisclose IncludeSRNetwork {
      get { return includeSRNetwork_; }
      set {
        includeSRNetwork_ = value;
      }
    }

    /// <summary>Field number for the "directed_counter_party" field.</summary>
    public const int DirectedCounterPartyFieldNumber = 143;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty> _repeated_directedCounterParty_codec
        = pb::FieldCodec.ForMessage(1146, global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty> directedCounterParty_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionNoticeRC.Types.DirectedCounterParty> DirectedCounterParty {
      get { return directedCounterParty_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuctionNoticeRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuctionNoticeRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionEvent != other.AuctionEvent) return false;
      if (SrcAuctionID != other.SrcAuctionID) return false;
      if (SrcAuctionType != other.SrcAuctionType) return false;
      if (AuctionSource != other.AuctionSource) return false;
      if (IsTestAuction != other.IsTestAuction) return false;
      if (ContainsFlex != other.ContainsFlex) return false;
      if (ShortCode != other.ShortCode) return false;
      if (Industry != other.Industry) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAvgDailyVlm, other.UAvgDailyVlm)) return false;
      if (!object.Equals(Root, other.Root)) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (CustSide != other.CustSide) return false;
      if (CustQty != other.CustQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CustPrc, other.CustPrc)) return false;
      if (HasCustPrc != other.HasCustPrc) return false;
      if (CustFirmType != other.CustFirmType) return false;
      if (CustAgentMPID != other.CustAgentMPID) return false;
      if (CustClientFirm != other.CustClientFirm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommEnhancement, other.CommEnhancement)) return false;
      if (CustCommPaying != other.CustCommPaying) return false;
      if (CustQtyCond != other.CustQtyCond) return false;
      if (AuctionDuration != other.AuctionDuration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IDays, other.IDays)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IYears, other.IYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoneyRate, other.MoneyRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (HasEstDDivs != other.HasEstDDivs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SVol, other.SVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RcEExPrem, other.RcEExPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePv, other.StrikePv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockLendPv, other.EffStockLendPv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffStockRate, other.EffStockRate)) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (IncludeSRNetwork != other.IncludeSRNetwork) return false;
      if(!directedCounterParty_.Equals(other.directedCounterParty_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) hash ^= AuctionEvent.GetHashCode();
      if (SrcAuctionID.Length != 0) hash ^= SrcAuctionID.GetHashCode();
      if (SrcAuctionType.Length != 0) hash ^= SrcAuctionType.GetHashCode();
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) hash ^= AuctionSource.GetHashCode();
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAuction.GetHashCode();
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsFlex.GetHashCode();
      if (ShortCode.Length != 0) hash ^= ShortCode.GetHashCode();
      if (Industry.Length != 0) hash ^= Industry.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (UAvgDailyVlm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAvgDailyVlm);
      if (root_ != null) hash ^= Root.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (Strike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= CustSide.GetHashCode();
      if (CustQty != 0) hash ^= CustQty.GetHashCode();
      if (CustPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CustPrc);
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasCustPrc.GetHashCode();
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= CustFirmType.GetHashCode();
      if (CustAgentMPID.Length != 0) hash ^= CustAgentMPID.GetHashCode();
      if (CustClientFirm.Length != 0) hash ^= CustClientFirm.GetHashCode();
      if (CommEnhancement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommEnhancement);
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= CustCommPaying.GetHashCode();
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) hash ^= CustQtyCond.GetHashCode();
      if (AuctionDuration != 0) hash ^= AuctionDuration.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (IDays != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IDays);
      if (IYears != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IYears);
      if (MoneyRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoneyRate);
      if (DdivPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DdivPv);
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasEstDDivs.GetHashCode();
      if (SVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SVol);
      if (RcEExPrem != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RcEExPrem);
      if (StrikePv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePv);
      if (EffStockLendPv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockLendPv);
      if (EffStockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffStockRate);
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= IncludeSRNetwork.GetHashCode();
      hash ^= directedCounterParty_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(176, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionEvent);
      }
      if (SrcAuctionID.Length != 0) {
        output.WriteRawTag(194, 6);
        output.WriteString(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(SrcAuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ShortCode.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ShortCode);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (root_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(Root);
      }
      if (expiry_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(Expiry);
      }
      if (Strike != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(Strike);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 7);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(210, 7);
        output.WriteString(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(221, 7);
        output.WriteFloat(CommEnhancement);
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        output.WriteRawTag(232, 7);
        output.WriteEnum((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(AuctionDuration);
      }
      if (UBid != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(UAsk);
      }
      if (IDays != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(IYears);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(153, 8);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(161, 8);
        output.WriteDouble(DdivPv);
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        output.WriteRawTag(177, 8);
        output.WriteDouble(SVol);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(185, 8);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(StrikePv);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(201, 8);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(209, 8);
        output.WriteDouble(EffStockRate);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(output, _repeated_directedCounterParty_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TradeDate);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(176, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) AuctionEvent);
      }
      if (SrcAuctionID.Length != 0) {
        output.WriteRawTag(194, 6);
        output.WriteString(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(SrcAuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) AuctionSource);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ShortCode.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ShortCode);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(248, 6);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (root_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(Root);
      }
      if (expiry_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(Expiry);
      }
      if (Strike != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(Strike);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(160, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(184, 7);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 7);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        output.WriteRawTag(210, 7);
        output.WriteString(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(221, 7);
        output.WriteFloat(CommEnhancement);
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        output.WriteRawTag(232, 7);
        output.WriteEnum((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(AuctionDuration);
      }
      if (UBid != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(129, 8);
        output.WriteDouble(UAsk);
      }
      if (IDays != 0D) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(IDays);
      }
      if (IYears != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(IYears);
      }
      if (MoneyRate != 0D) {
        output.WriteRawTag(153, 8);
        output.WriteDouble(MoneyRate);
      }
      if (DdivPv != 0D) {
        output.WriteRawTag(161, 8);
        output.WriteDouble(DdivPv);
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        output.WriteRawTag(177, 8);
        output.WriteDouble(SVol);
      }
      if (RcEExPrem != 0D) {
        output.WriteRawTag(185, 8);
        output.WriteDouble(RcEExPrem);
      }
      if (StrikePv != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(StrikePv);
      }
      if (EffStockLendPv != 0D) {
        output.WriteRawTag(201, 8);
        output.WriteDouble(EffStockLendPv);
      }
      if (EffStockRate != 0D) {
        output.WriteRawTag(209, 8);
        output.WriteDouble(EffStockRate);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(216, 8);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) IncludeSRNetwork);
      }
      directedCounterParty_.WriteTo(ref output, _repeated_directedCounterParty_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionEvent);
      }
      if (SrcAuctionID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcAuctionID);
      }
      if (SrcAuctionType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcAuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSource);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAuction);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsFlex);
      }
      if (ShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShortCode);
      }
      if (Industry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        size += 2 + 4;
      }
      if (root_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Root);
      }
      if (expiry_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (Strike != 0D) {
        size += 2 + 8;
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustSide);
      }
      if (CustQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustQty);
      }
      if (CustPrc != 0D) {
        size += 2 + 8;
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustAgentMPID);
      }
      if (CustClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustClientFirm);
      }
      if (CommEnhancement != 0F) {
        size += 2 + 4;
      }
      if (CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustCommPaying);
      }
      if (CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustQtyCond);
      }
      if (AuctionDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionDuration);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (IDays != 0D) {
        size += 2 + 8;
      }
      if (IYears != 0D) {
        size += 2 + 8;
      }
      if (MoneyRate != 0D) {
        size += 2 + 8;
      }
      if (DdivPv != 0D) {
        size += 2 + 8;
      }
      if (HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasEstDDivs);
      }
      if (SVol != 0D) {
        size += 2 + 8;
      }
      if (RcEExPrem != 0D) {
        size += 2 + 8;
      }
      if (StrikePv != 0D) {
        size += 2 + 8;
      }
      if (EffStockLendPv != 0D) {
        size += 2 + 8;
      }
      if (EffStockRate != 0D) {
        size += 2 + 8;
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IncludeSRNetwork);
      }
      size += directedCounterParty_.CalculateSize(_repeated_directedCounterParty_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuctionNoticeRC other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        AuctionEvent = other.AuctionEvent;
      }
      if (other.SrcAuctionID.Length != 0) {
        SrcAuctionID = other.SrcAuctionID;
      }
      if (other.SrcAuctionType.Length != 0) {
        SrcAuctionType = other.SrcAuctionType;
      }
      if (other.AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        AuctionSource = other.AuctionSource;
      }
      if (other.IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTestAuction = other.IsTestAuction;
      }
      if (other.ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsFlex = other.ContainsFlex;
      }
      if (other.ShortCode.Length != 0) {
        ShortCode = other.ShortCode;
      }
      if (other.Industry.Length != 0) {
        Industry = other.Industry;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.UAvgDailyVlm != 0F) {
        UAvgDailyVlm = other.UAvgDailyVlm;
      }
      if (other.root_ != null) {
        if (root_ == null) {
          Root = new global::Spiderrock.Protobuf.TickerKey();
        }
        Root.MergeFrom(other.Root);
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          Expiry = new global::Spiderrock.Protobuf.DateKey();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.Strike != 0D) {
        Strike = other.Strike;
      }
      if (other.CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        CustSide = other.CustSide;
      }
      if (other.CustQty != 0) {
        CustQty = other.CustQty;
      }
      if (other.CustPrc != 0D) {
        CustPrc = other.CustPrc;
      }
      if (other.HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasCustPrc = other.HasCustPrc;
      }
      if (other.CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        CustFirmType = other.CustFirmType;
      }
      if (other.CustAgentMPID.Length != 0) {
        CustAgentMPID = other.CustAgentMPID;
      }
      if (other.CustClientFirm.Length != 0) {
        CustClientFirm = other.CustClientFirm;
      }
      if (other.CommEnhancement != 0F) {
        CommEnhancement = other.CommEnhancement;
      }
      if (other.CustCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        CustCommPaying = other.CustCommPaying;
      }
      if (other.CustQtyCond != global::Spiderrock.Protobuf.CustQtyCond.Unspecified) {
        CustQtyCond = other.CustQtyCond;
      }
      if (other.AuctionDuration != 0) {
        AuctionDuration = other.AuctionDuration;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.IDays != 0D) {
        IDays = other.IDays;
      }
      if (other.IYears != 0D) {
        IYears = other.IYears;
      }
      if (other.MoneyRate != 0D) {
        MoneyRate = other.MoneyRate;
      }
      if (other.DdivPv != 0D) {
        DdivPv = other.DdivPv;
      }
      if (other.HasEstDDivs != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasEstDDivs = other.HasEstDDivs;
      }
      if (other.SVol != 0D) {
        SVol = other.SVol;
      }
      if (other.RcEExPrem != 0D) {
        RcEExPrem = other.RcEExPrem;
      }
      if (other.StrikePv != 0D) {
        StrikePv = other.StrikePv;
      }
      if (other.EffStockLendPv != 0D) {
        EffStockLendPv = other.EffStockLendPv;
      }
      if (other.EffStockRate != 0D) {
        EffStockRate = other.EffStockRate;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.IncludeSRNetwork != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
        IncludeSRNetwork = other.IncludeSRNetwork;
      }
      directedCounterParty_.Add(other.directedCounterParty_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 816: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 824: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 834: {
            SrcAuctionID = input.ReadString();
            break;
          }
          case 842: {
            SrcAuctionType = input.ReadString();
            break;
          }
          case 848: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 856: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 864: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 874: {
            ShortCode = input.ReadString();
            break;
          }
          case 882: {
            Industry = input.ReadString();
            break;
          }
          case 888: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 901: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 906: {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Root);
            break;
          }
          case 914: {
            if (expiry_ == null) {
              Expiry = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 921: {
            Strike = input.ReadDouble();
            break;
          }
          case 928: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 936: {
            CustQty = input.ReadInt32();
            break;
          }
          case 945: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 952: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 960: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 970: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 978: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 989: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 992: {
            CustCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1000: {
            CustQtyCond = (global::Spiderrock.Protobuf.CustQtyCond) input.ReadEnum();
            break;
          }
          case 1008: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1017: {
            UBid = input.ReadDouble();
            break;
          }
          case 1025: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1033: {
            IDays = input.ReadDouble();
            break;
          }
          case 1041: {
            IYears = input.ReadDouble();
            break;
          }
          case 1049: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 1057: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 1064: {
            HasEstDDivs = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1073: {
            SVol = input.ReadDouble();
            break;
          }
          case 1081: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 1089: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1097: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1105: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1112: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1120: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1130: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1136: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 1146: {
            directedCounterParty_.AddEntriesFrom(input, _repeated_directedCounterParty_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionNoticeRC.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 810: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 816: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 824: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 834: {
            SrcAuctionID = input.ReadString();
            break;
          }
          case 842: {
            SrcAuctionType = input.ReadString();
            break;
          }
          case 848: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 856: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 864: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 874: {
            ShortCode = input.ReadString();
            break;
          }
          case 882: {
            Industry = input.ReadString();
            break;
          }
          case 888: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 901: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 906: {
            if (root_ == null) {
              Root = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Root);
            break;
          }
          case 914: {
            if (expiry_ == null) {
              Expiry = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 921: {
            Strike = input.ReadDouble();
            break;
          }
          case 928: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 936: {
            CustQty = input.ReadInt32();
            break;
          }
          case 945: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 952: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 960: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 970: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 978: {
            CustClientFirm = input.ReadString();
            break;
          }
          case 989: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 992: {
            CustCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1000: {
            CustQtyCond = (global::Spiderrock.Protobuf.CustQtyCond) input.ReadEnum();
            break;
          }
          case 1008: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1017: {
            UBid = input.ReadDouble();
            break;
          }
          case 1025: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1033: {
            IDays = input.ReadDouble();
            break;
          }
          case 1041: {
            IYears = input.ReadDouble();
            break;
          }
          case 1049: {
            MoneyRate = input.ReadDouble();
            break;
          }
          case 1057: {
            DdivPv = input.ReadDouble();
            break;
          }
          case 1064: {
            HasEstDDivs = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1073: {
            SVol = input.ReadDouble();
            break;
          }
          case 1081: {
            RcEExPrem = input.ReadDouble();
            break;
          }
          case 1089: {
            StrikePv = input.ReadDouble();
            break;
          }
          case 1097: {
            EffStockLendPv = input.ReadDouble();
            break;
          }
          case 1105: {
            EffStockRate = input.ReadDouble();
            break;
          }
          case 1112: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1120: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1130: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1136: {
            IncludeSRNetwork = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
            break;
          }
          case 1146: {
            directedCounterParty_.AddEntriesFrom(ref input, _repeated_directedCounterParty_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AuctionNoticeRC message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionNoticeRC.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          noticeNumber_ = other.noticeNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "notice_number" field.</summary>
        public const int NoticeNumberFieldNumber = 10;
        private long noticeNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long NoticeNumber {
          get { return noticeNumber_; }
          set {
            noticeNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NoticeNumber != other.NoticeNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (NoticeNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.NoticeNumber != 0L) {
            NoticeNumber = other.NoticeNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class DirectedCounterParty : pb::IMessage<DirectedCounterParty>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DirectedCounterParty> _parser = new pb::MessageParser<DirectedCounterParty>(() => new DirectedCounterParty());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DirectedCounterParty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionNoticeRC.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty(DirectedCounterParty other) : this() {
          clientFirm_ = other.clientFirm_;
          inclExcl_ = other.inclExcl_;
          isCommPaying_ = other.isCommPaying_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectedCounterParty Clone() {
          return new DirectedCounterParty(this);
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 144;
        private string clientFirm_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "incl_excl" field.</summary>
        public const int InclExclFieldNumber = 145;
        private global::Spiderrock.Protobuf.InclExclDisclose inclExcl_ = global::Spiderrock.Protobuf.InclExclDisclose.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.InclExclDisclose InclExcl {
          get { return inclExcl_; }
          set {
            inclExcl_ = value;
          }
        }

        /// <summary>Field number for the "is_comm_paying" field.</summary>
        public const int IsCommPayingFieldNumber = 146;
        private global::Spiderrock.Protobuf.YesNo isCommPaying_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo IsCommPaying {
          get { return isCommPaying_; }
          set {
            isCommPaying_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DirectedCounterParty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DirectedCounterParty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientFirm != other.ClientFirm) return false;
          if (InclExcl != other.InclExcl) return false;
          if (IsCommPaying != other.IsCommPaying) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) hash ^= InclExcl.GetHashCode();
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsCommPaying.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(130, 9);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(136, 9);
            output.WriteEnum((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(144, 9);
            output.WriteEnum((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(130, 9);
            output.WriteString(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            output.WriteRawTag(136, 9);
            output.WriteEnum((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(144, 9);
            output.WriteEnum((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ClientFirm.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InclExcl);
          }
          if (IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsCommPaying);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DirectedCounterParty other) {
          if (other == null) {
            return;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          if (other.InclExcl != global::Spiderrock.Protobuf.InclExclDisclose.Unspecified) {
            InclExcl = other.InclExcl;
          }
          if (other.IsCommPaying != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            IsCommPaying = other.IsCommPaying;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1154: {
                ClientFirm = input.ReadString();
                break;
              }
              case 1160: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
              case 1168: {
                IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1154: {
                ClientFirm = input.ReadString();
                break;
              }
              case 1160: {
                InclExcl = (global::Spiderrock.Protobuf.InclExclDisclose) input.ReadEnum();
                break;
              }
              case 1168: {
                IsCommPaying = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
