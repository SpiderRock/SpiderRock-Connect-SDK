// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/SRConnect/AuctionPrint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/SRConnect/AuctionPrint.proto</summary>
  public static partial class AuctionPrintReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/SRConnect/AuctionPrint.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuctionPrintReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQcm90b2J1Zi9TUkNvbm5lY3QvQXVjdGlvblByaW50LnByb3RvEhNzcGlk",
            "ZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKIFQoMQXVjdGlvblByaW50",
            "EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1Zi5NZXNzYWdl",
            "TWV0YWRhdGESNAoEcGtleRgCIAEoCzImLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QXVjdGlvblByaW50LlBLZXkSLgoGdGlja2VyGGQgASgLMh4uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5UaWNrZXJLZXkSMAoKdHJhZGVfZGF0ZRhnIAEoCzIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRIzCg9pc190ZXN0X2F1Y3Rpb24Y",
            "aCABKA4yGi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEi8KC25vdGljZV90",
            "aW1lGGogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI2CgxhdWN0",
            "aW9uX3R5cGUYbSABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLkF1Y3Rpb25U",
            "eXBlEjoKDmF1Y3Rpb25fc291cmNlGHAgASgOMiIuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5BdWN0aW9uU291cmNlEhAKCGluZHVzdHJ5GHMgASgJEjQKC3N5bWJv",
            "bF90eXBlGHYgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5TeW1ib2xUeXBl",
            "EhcKD3VfYXZnX2RhaWx5X3ZsbRh5IAEoAhIvCgljdXN0X3NpZGUYfCABKA4y",
            "HC5zcGlkZXJyb2NrLnByb3RvYnVmLkJ1eVNlbGwSEAoIY3VzdF9xdHkYfyAB",
            "KAUSEQoIY3VzdF9wcmMYggEgASgBEjEKDGhhc19jdXN0X3ByYxiFASABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjYKDmN1c3RfZmlybV90eXBl",
            "GIgBIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuRmlybVR5cGUSGAoPY3Vz",
            "dF9hZ2VudF9tUElEGIsBIAEoCRIZChBjb21tX2VuaGFuY2VtZW50GI4BIAEo",
            "AhIVCgxudW1fb3B0X2xlZ3MYkQEgASgFEjsKDHNwcmVhZF9jbGFzcxiUASAB",
            "KA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLlRvb2xTcHJlYWRDbGFzcxI5Cg1z",
            "cHJlYWRfZmxhdm9yGJcBIAEoDjIhLnNwaWRlcnJvY2sucHJvdG9idWYuU3By",
            "ZWFkRmxhdm9yEjMKDmNvbnRhaW5zX2hlZGdlGJoBIAEoDjIaLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuWWVzTm8SMgoNY29udGFpbnNfZmxleBidASABKA4yGi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjkKFGNvbnRhaW5zX211bHRpX2hl",
            "ZGdlGKABIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SDgoFdV9i",
            "aWQYowEgASgBEg4KBXVfYXNrGKYBIAEoARIPCgZuZXRfZGUYqQEgASgCEg8K",
            "Bm5ldF9nYRisASABKAISDwoGbmV0X3RoGK8BIAEoAhIPCgZuZXRfdmUYsgEg",
            "ASgCEhUKDHBrZ19zdXJmX3ByYxi1ASABKAISFAoLcGtnX2JpZF9wcmMYuAEg",
            "ASgCEhQKC3BrZ19hc2tfcHJjGLsBIAEoAhISCglwcnRfcHJpY2UYvgEgASgB",
            "EhMKCnBydF9wcmljZTIYwQEgASgBEhEKCHBydF9zaXplGMQBIAEoBRISCglw",
            "cnRfc2l6ZTIYxwEgASgFEi0KCHBydF90aW1lGMoBIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASLwoIcHJ0X3R5cGUYzQEgASgOMhwuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5QcnRUeXBlEhEKCHBydF91QmlkGNABIAEoARIRCghw",
            "cnRfdUFzaxjTASABKAESEQoIcHJ0X3VQcmMY1gEgASgBEhUKDHBydF9zdXJm",
            "X3ZvbBjZASABKAISFQoMcHJ0X3N1cmZfcHJjGNwBIAEoAhIQCgdiaWRfcHJj",
            "GN8BIAEoAhIPCgZiaWRfc3oY4gEgASgFEhEKCGJpZF9tYXNrGOUBIAEoDRIQ",
            "Cgdhc2tfcHJjGOgBIAEoAhIPCgZhc2tfc3oY6wEgASgFEhEKCGFza19tYXNr",
            "GO4BIAEoDRIVCgxleGNoX2JpZF9wcmMY8QEgASgCEhQKC2V4Y2hfYmlkX3N6",
            "GPQBIAEoBRIVCgxleGNoX2Fza19wcmMY9wEgASgCEhQKC2V4Y2hfYXNrX3N6",
            "GPoBIAEoBRIQCgd1X3ByYzFtGP0BIAEoAhISCgliaWRfcHJjMW0YgAIgASgC",
            "EhIKCWFza19wcmMxbRiDAiABKAISEwoKc3VyZl92b2wxbRiGAiABKAISEwoK",
            "c3VyZl9wcmMxbRiJAiABKAISEQoIdV9wcmMxMG0YjAIgASgCEhMKCmJpZF9w",
            "cmMxMG0YjwIgASgCEhMKCmFza19wcmMxMG0YkgIgASgCEhQKC3N1cmZfdm9s",
            "MTBtGJUCIAEoAhIUCgtzdXJmX3ByYzEwbRiYAiABKAISLgoJdGltZXN0YW1w",
            "GJsCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASQAoKb3JkZXJf",
            "bGVncxieAiADKAsyKy5zcGlkZXJyb2NrLnByb3RvYnVmLkF1Y3Rpb25Qcmlu",
            "dC5PcmRlckxlZ3MaHQoEUEtleRIVCg1ub3RpY2VfbnVtYmVyGAogASgDGuQE",
            "CglPcmRlckxlZ3MSMAoHc2VjX2tleRihAiABKAsyHi5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk9wdGlvbktleRIzCghzZWNfdHlwZRikAiABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEisKBHNpZGUYpwIgASgOMhwuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5CdXlTZWxsEg4KBXJhdGlvGKoCIAEoDRITCgp1",
            "bmRfcGVyX2NuGK0CIAEoBRIUCgtwb2ludF92YWx1ZRiwAiABKAISMgoIZXhw",
            "X3R5cGUYswIgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5FeHBpcnlUeXBl",
            "Eg4KBXllYXJzGLYCIAEoAhINCgRyYXRlGLkCIAEoAhIQCgdhdG1fdm9sGLwC",
            "IAEoAhIQCgdkZGl2X3B2GL8CIAEoAhIOCgV0X3ZvbBjCAiABKAISDgoFc192",
            "b2wYxQIgASgCEg4KBXNfZGl2GMgCIAEoAhIOCgVzX3ByYxjLAiABKAISCwoC",
            "ZGUYzgIgASgCEgsKAmdhGNECIAEoAhILCgJ0aBjUAiABKAISCwoCdmUY1wIg",
            "ASgCEi0KCHNfdm9sX29rGNoCIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "WWVzTm8SDgoFb19iaWQY3QIgASgCEhEKCG9fYmlkX3N6GOACIAEoBRITCgpv",
            "X2JpZF9tYXNrGOMCIAEoDRIOCgVvX2FzaxjmAiABKAISEQoIb19hc2tfc3oY",
            "6QIgASgFEhMKCm9fYXNrX21hc2sY7AIgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrint), global::Spiderrock.Protobuf.AuctionPrint.Parser, new[]{ "Meta", "Pkey", "Ticker", "TradeDate", "IsTestAuction", "NoticeTime", "AuctionType", "AuctionSource", "Industry", "SymbolType", "UAvgDailyVlm", "CustSide", "CustQty", "CustPrc", "HasCustPrc", "CustFirmType", "CustAgentMPID", "CommEnhancement", "NumOptLegs", "SpreadClass", "SpreadFlavor", "ContainsHedge", "ContainsFlex", "ContainsMultiHedge", "UBid", "UAsk", "NetDe", "NetGa", "NetTh", "NetVe", "PkgSurfPrc", "PkgBidPrc", "PkgAskPrc", "PrtPrice", "PrtPrice2", "PrtSize", "PrtSize2", "PrtTime", "PrtType", "PrtUBid", "PrtUAsk", "PrtUPrc", "PrtSurfVol", "PrtSurfPrc", "BidPrc", "BidSz", "BidMask", "AskPrc", "AskSz", "AskMask", "ExchBidPrc", "ExchBidSz", "ExchAskPrc", "ExchAskSz", "UPrc1M", "BidPrc1M", "AskPrc1M", "SurfVol1M", "SurfPrc1M", "UPrc10M", "BidPrc10M", "AskPrc10M", "SurfVol10M", "SurfPrc10M", "Timestamp", "OrderLegs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrint.Types.PKey), global::Spiderrock.Protobuf.AuctionPrint.Types.PKey.Parser, new[]{ "NoticeNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs), global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs.Parser, new[]{ "SecKey", "SecType", "Side", "Ratio", "UndPerCn", "PointValue", "ExpType", "Years", "Rate", "AtmVol", "DdivPv", "TVol", "SVol", "SDiv", "SPrc", "De", "Ga", "Th", "Ve", "SVolOk", "OBid", "OBidSz", "OBidMask", "OAsk", "OAskSz", "OAskMask" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuctionPrint : pb::IMessage<AuctionPrint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuctionPrint> _parser = new pb::MessageParser<AuctionPrint>(() => new AuctionPrint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuctionPrint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AuctionPrintReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint(AuctionPrint other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
      isTestAuction_ = other.isTestAuction_;
      noticeTime_ = other.noticeTime_ != null ? other.noticeTime_.Clone() : null;
      auctionType_ = other.auctionType_;
      auctionSource_ = other.auctionSource_;
      industry_ = other.industry_;
      symbolType_ = other.symbolType_;
      uAvgDailyVlm_ = other.uAvgDailyVlm_;
      custSide_ = other.custSide_;
      custQty_ = other.custQty_;
      custPrc_ = other.custPrc_;
      hasCustPrc_ = other.hasCustPrc_;
      custFirmType_ = other.custFirmType_;
      custAgentMPID_ = other.custAgentMPID_;
      commEnhancement_ = other.commEnhancement_;
      numOptLegs_ = other.numOptLegs_;
      spreadClass_ = other.spreadClass_;
      spreadFlavor_ = other.spreadFlavor_;
      containsHedge_ = other.containsHedge_;
      containsFlex_ = other.containsFlex_;
      containsMultiHedge_ = other.containsMultiHedge_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      netDe_ = other.netDe_;
      netGa_ = other.netGa_;
      netTh_ = other.netTh_;
      netVe_ = other.netVe_;
      pkgSurfPrc_ = other.pkgSurfPrc_;
      pkgBidPrc_ = other.pkgBidPrc_;
      pkgAskPrc_ = other.pkgAskPrc_;
      prtPrice_ = other.prtPrice_;
      prtPrice2_ = other.prtPrice2_;
      prtSize_ = other.prtSize_;
      prtSize2_ = other.prtSize2_;
      prtTime_ = other.prtTime_ != null ? other.prtTime_.Clone() : null;
      prtType_ = other.prtType_;
      prtUBid_ = other.prtUBid_;
      prtUAsk_ = other.prtUAsk_;
      prtUPrc_ = other.prtUPrc_;
      prtSurfVol_ = other.prtSurfVol_;
      prtSurfPrc_ = other.prtSurfPrc_;
      bidPrc_ = other.bidPrc_;
      bidSz_ = other.bidSz_;
      bidMask_ = other.bidMask_;
      askPrc_ = other.askPrc_;
      askSz_ = other.askSz_;
      askMask_ = other.askMask_;
      exchBidPrc_ = other.exchBidPrc_;
      exchBidSz_ = other.exchBidSz_;
      exchAskPrc_ = other.exchAskPrc_;
      exchAskSz_ = other.exchAskSz_;
      uPrc1M_ = other.uPrc1M_;
      bidPrc1M_ = other.bidPrc1M_;
      askPrc1M_ = other.askPrc1M_;
      surfVol1M_ = other.surfVol1M_;
      surfPrc1M_ = other.surfPrc1M_;
      uPrc10M_ = other.uPrc10M_;
      bidPrc10M_ = other.bidPrc10M_;
      askPrc10M_ = other.askPrc10M_;
      surfVol10M_ = other.surfVol10M_;
      surfPrc10M_ = other.surfPrc10M_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      orderLegs_ = other.orderLegs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuctionPrint Clone() {
      return new AuctionPrint(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AuctionPrint.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionPrint.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 103;
    private global::Spiderrock.Protobuf.DateKey tradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DateKey TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = value;
      }
    }

    /// <summary>Field number for the "is_test_auction" field.</summary>
    public const int IsTestAuctionFieldNumber = 104;
    private global::Spiderrock.Protobuf.YesNo isTestAuction_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// if yes, auction is a test auction (not a prod/live auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTestAuction {
      get { return isTestAuction_; }
      set {
        isTestAuction_ = value;
      }
    }

    /// <summary>Field number for the "notice_time" field.</summary>
    public const int NoticeTimeFieldNumber = 106;
    private global::Google.Protobuf.WellKnownTypes.Timestamp noticeTime_;
    /// <summary>
    /// notice create timestamp (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NoticeTime {
      get { return noticeTime_; }
      set {
        noticeTime_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 109;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    /// <summary>
    /// (eg. Block, Flash, Improvement, Facilitation, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_source" field.</summary>
    public const int AuctionSourceFieldNumber = 112;
    private global::Spiderrock.Protobuf.AuctionSource auctionSource_ = global::Spiderrock.Protobuf.AuctionSource.Unspecified;
    /// <summary>
    /// source of the auction notice (eg. SRC, MIAX, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionSource AuctionSource {
      get { return auctionSource_; }
      set {
        auctionSource_ = value;
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 115;
    private string industry_ = "";
    /// <summary>
    /// industry string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 118;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "u_avg_daily_vlm" field.</summary>
    public const int UAvgDailyVlmFieldNumber = 121;
    private float uAvgDailyVlm_;
    /// <summary>
    /// underlier average daily trading volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAvgDailyVlm {
      get { return uAvgDailyVlm_; }
      set {
        uAvgDailyVlm_ = value;
      }
    }

    /// <summary>Field number for the "cust_side" field.</summary>
    public const int CustSideFieldNumber = 124;
    private global::Spiderrock.Protobuf.BuySell custSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell CustSide {
      get { return custSide_; }
      set {
        custSide_ = value;
      }
    }

    /// <summary>Field number for the "cust_qty" field.</summary>
    public const int CustQtyFieldNumber = 127;
    private int custQty_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CustQty {
      get { return custQty_; }
      set {
        custQty_ = value;
      }
    }

    /// <summary>Field number for the "cust_prc" field.</summary>
    public const int CustPrcFieldNumber = 130;
    private double custPrc_;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CustPrc {
      get { return custPrc_; }
      set {
        custPrc_ = value;
      }
    }

    /// <summary>Field number for the "has_cust_prc" field.</summary>
    public const int HasCustPrcFieldNumber = 133;
    private global::Spiderrock.Protobuf.YesNo hasCustPrc_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// from AuctionNotice (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo HasCustPrc {
      get { return hasCustPrc_; }
      set {
        hasCustPrc_ = value;
      }
    }

    /// <summary>Field number for the "cust_firm_type" field.</summary>
    public const int CustFirmTypeFieldNumber = 136;
    private global::Spiderrock.Protobuf.FirmType custFirmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// cust firm type (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType CustFirmType {
      get { return custFirmType_; }
      set {
        custFirmType_ = value;
      }
    }

    /// <summary>Field number for the "cust_agent_mPID" field.</summary>
    public const int CustAgentMPIDFieldNumber = 139;
    private string custAgentMPID_ = "";
    /// <summary>
    /// cust agent exchange member initiating the auction (if disclosed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustAgentMPID {
      get { return custAgentMPID_; }
      set {
        custAgentMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comm_enhancement" field.</summary>
    public const int CommEnhancementFieldNumber = 142;
    private float commEnhancement_;
    /// <summary>
    /// additional commission (if any) paid by responder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CommEnhancement {
      get { return commEnhancement_; }
      set {
        commEnhancement_ = value;
      }
    }

    /// <summary>Field number for the "num_opt_legs" field.</summary>
    public const int NumOptLegsFieldNumber = 145;
    private int numOptLegs_;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptLegs {
      get { return numOptLegs_; }
      set {
        numOptLegs_ = value;
      }
    }

    /// <summary>Field number for the "spread_class" field.</summary>
    public const int SpreadClassFieldNumber = 148;
    private global::Spiderrock.Protobuf.ToolSpreadClass spreadClass_ = global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ToolSpreadClass SpreadClass {
      get { return spreadClass_; }
      set {
        spreadClass_ = value;
      }
    }

    /// <summary>Field number for the "spread_flavor" field.</summary>
    public const int SpreadFlavorFieldNumber = 151;
    private global::Spiderrock.Protobuf.SpreadFlavor spreadFlavor_ = global::Spiderrock.Protobuf.SpreadFlavor.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpreadFlavor SpreadFlavor {
      get { return spreadFlavor_; }
      set {
        spreadFlavor_ = value;
      }
    }

    /// <summary>Field number for the "contains_hedge" field.</summary>
    public const int ContainsHedgeFieldNumber = 154;
    private global::Spiderrock.Protobuf.YesNo containsHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// MLEG Only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsHedge {
      get { return containsHedge_; }
      set {
        containsHedge_ = value;
      }
    }

    /// <summary>Field number for the "contains_flex" field.</summary>
    public const int ContainsFlexFieldNumber = 157;
    private global::Spiderrock.Protobuf.YesNo containsFlex_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains FLEX options (not regular listed options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsFlex {
      get { return containsFlex_; }
      set {
        containsFlex_ = value;
      }
    }

    /// <summary>Field number for the "contains_multi_hedge" field.</summary>
    public const int ContainsMultiHedgeFieldNumber = 160;
    private global::Spiderrock.Protobuf.YesNo containsMultiHedge_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// contains MultiHedge (corp action adjusted) options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ContainsMultiHedge {
      get { return containsMultiHedge_; }
      set {
        containsMultiHedge_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 163;
    private double uBid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 166;
    private double uAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "net_de" field.</summary>
    public const int NetDeFieldNumber = 169;
    private float netDe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetDe {
      get { return netDe_; }
      set {
        netDe_ = value;
      }
    }

    /// <summary>Field number for the "net_ga" field.</summary>
    public const int NetGaFieldNumber = 172;
    private float netGa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetGa {
      get { return netGa_; }
      set {
        netGa_ = value;
      }
    }

    /// <summary>Field number for the "net_th" field.</summary>
    public const int NetThFieldNumber = 175;
    private float netTh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetTh {
      get { return netTh_; }
      set {
        netTh_ = value;
      }
    }

    /// <summary>Field number for the "net_ve" field.</summary>
    public const int NetVeFieldNumber = 178;
    private float netVe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NetVe {
      get { return netVe_; }
      set {
        netVe_ = value;
      }
    }

    /// <summary>Field number for the "pkg_surf_prc" field.</summary>
    public const int PkgSurfPrcFieldNumber = 181;
    private float pkgSurfPrc_;
    /// <summary>
    /// SR Surface Price (entire package)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgSurfPrc {
      get { return pkgSurfPrc_; }
      set {
        pkgSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "pkg_bid_prc" field.</summary>
    public const int PkgBidPrcFieldNumber = 184;
    private float pkgBidPrc_;
    /// <summary>
    /// pkg bid price (best way price) (entire package)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgBidPrc {
      get { return pkgBidPrc_; }
      set {
        pkgBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "pkg_ask_prc" field.</summary>
    public const int PkgAskPrcFieldNumber = 187;
    private float pkgAskPrc_;
    /// <summary>
    /// pkg ask price (best way price) (entire package)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PkgAskPrc {
      get { return pkgAskPrc_; }
      set {
        pkgAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "prt_price" field.</summary>
    public const int PrtPriceFieldNumber = 190;
    private double prtPrice_;
    /// <summary>
    /// reported OPRA print price (pkgPrice if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice {
      get { return prtPrice_; }
      set {
        prtPrice_ = value;
      }
    }

    /// <summary>Field number for the "prt_price2" field.</summary>
    public const int PrtPrice2FieldNumber = 193;
    private double prtPrice2_;
    /// <summary>
    /// if reported as 2 separate prints at different prices (ie, partial size improvement)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtPrice2 {
      get { return prtPrice2_; }
      set {
        prtPrice2_ = value;
      }
    }

    /// <summary>Field number for the "prt_size" field.</summary>
    public const int PrtSizeFieldNumber = 196;
    private int prtSize_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize {
      get { return prtSize_; }
      set {
        prtSize_ = value;
      }
    }

    /// <summary>Field number for the "prt_size2" field.</summary>
    public const int PrtSize2FieldNumber = 199;
    private int prtSize2_;
    /// <summary>
    /// reported OPRA print size (pgkSize if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrtSize2 {
      get { return prtSize2_; }
      set {
        prtSize2_ = value;
      }
    }

    /// <summary>Field number for the "prt_time" field.</summary>
    public const int PrtTimeFieldNumber = 202;
    private global::Google.Protobuf.WellKnownTypes.Timestamp prtTime_;
    /// <summary>
    /// reported OPRA print time (1st print if MLeg) (high precision)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PrtTime {
      get { return prtTime_; }
      set {
        prtTime_ = value;
      }
    }

    /// <summary>Field number for the "prt_type" field.</summary>
    public const int PrtTypeFieldNumber = 205;
    private global::Spiderrock.Protobuf.PrtType prtType_ = global::Spiderrock.Protobuf.PrtType.Unspecified;
    /// <summary>
    /// reported OPRA print type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtType PrtType {
      get { return prtType_; }
      set {
        prtType_ = value;
      }
    }

    /// <summary>Field number for the "prt_uBid" field.</summary>
    public const int PrtUBidFieldNumber = 208;
    private double prtUBid_;
    /// <summary>
    /// best estimate of uBid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUBid {
      get { return prtUBid_; }
      set {
        prtUBid_ = value;
      }
    }

    /// <summary>Field number for the "prt_uAsk" field.</summary>
    public const int PrtUAskFieldNumber = 211;
    private double prtUAsk_;
    /// <summary>
    /// best estimate of uAsk @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUAsk {
      get { return prtUAsk_; }
      set {
        prtUAsk_ = value;
      }
    }

    /// <summary>Field number for the "prt_uPrc" field.</summary>
    public const int PrtUPrcFieldNumber = 214;
    private double prtUPrc_;
    /// <summary>
    /// best estimate of uPrc @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PrtUPrc {
      get { return prtUPrc_; }
      set {
        prtUPrc_ = value;
      }
    }

    /// <summary>Field number for the "prt_surf_vol" field.</summary>
    public const int PrtSurfVolFieldNumber = 217;
    private float prtSurfVol_;
    /// <summary>
    /// surface vol @ auction print time (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtSurfVol {
      get { return prtSurfVol_; }
      set {
        prtSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "prt_surf_prc" field.</summary>
    public const int PrtSurfPrcFieldNumber = 220;
    private float prtSurfPrc_;
    /// <summary>
    /// surface prc @ auction print time (@ uMid) (pkgSurfPrc if MLeg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrtSurfPrc {
      get { return prtSurfPrc_; }
      set {
        prtSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc" field.</summary>
    public const int BidPrcFieldNumber = 223;
    private float bidPrc_;
    /// <summary>
    /// option nbbo bid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc {
      get { return bidPrc_; }
      set {
        bidPrc_ = value;
      }
    }

    /// <summary>Field number for the "bid_sz" field.</summary>
    public const int BidSzFieldNumber = 226;
    private int bidSz_;
    /// <summary>
    /// nbbo bid cum size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSz {
      get { return bidSz_; }
      set {
        bidSz_ = value;
      }
    }

    /// <summary>Field number for the "bid_mask" field.</summary>
    public const int BidMaskFieldNumber = 229;
    private uint bidMask_;
    /// <summary>
    /// nbbo bid exch mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidMask {
      get { return bidMask_; }
      set {
        bidMask_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc" field.</summary>
    public const int AskPrcFieldNumber = 232;
    private float askPrc_;
    /// <summary>
    /// option nbbo ask @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc {
      get { return askPrc_; }
      set {
        askPrc_ = value;
      }
    }

    /// <summary>Field number for the "ask_sz" field.</summary>
    public const int AskSzFieldNumber = 235;
    private int askSz_;
    /// <summary>
    /// nbbo ask cum size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSz {
      get { return askSz_; }
      set {
        askSz_ = value;
      }
    }

    /// <summary>Field number for the "ask_mask" field.</summary>
    public const int AskMaskFieldNumber = 238;
    private uint askMask_;
    /// <summary>
    /// nbbo ask exch mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskMask {
      get { return askMask_; }
      set {
        askMask_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_prc" field.</summary>
    public const int ExchBidPrcFieldNumber = 241;
    private float exchBidPrc_;
    /// <summary>
    /// exch bid @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchBidPrc {
      get { return exchBidPrc_; }
      set {
        exchBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_sz" field.</summary>
    public const int ExchBidSzFieldNumber = 244;
    private int exchBidSz_;
    /// <summary>
    /// exch bid size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchBidSz {
      get { return exchBidSz_; }
      set {
        exchBidSz_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_prc" field.</summary>
    public const int ExchAskPrcFieldNumber = 247;
    private float exchAskPrc_;
    /// <summary>
    /// exch ask @ auction print time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchAskPrc {
      get { return exchAskPrc_; }
      set {
        exchAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_sz" field.</summary>
    public const int ExchAskSzFieldNumber = 250;
    private int exchAskSz_;
    /// <summary>
    /// exch ask size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchAskSz {
      get { return exchAskSz_; }
      set {
        exchAskSz_ = value;
      }
    }

    /// <summary>Field number for the "u_prc1m" field.</summary>
    public const int UPrc1MFieldNumber = 253;
    private float uPrc1M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc1M {
      get { return uPrc1M_; }
      set {
        uPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc1m" field.</summary>
    public const int BidPrc1MFieldNumber = 256;
    private float bidPrc1M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc1M {
      get { return bidPrc1M_; }
      set {
        bidPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc1m" field.</summary>
    public const int AskPrc1MFieldNumber = 259;
    private float askPrc1M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 1m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc1M {
      get { return askPrc1M_; }
      set {
        askPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "surf_vol1m" field.</summary>
    public const int SurfVol1MFieldNumber = 262;
    private float surfVol1M_;
    /// <summary>
    /// surface vol @ auction print time + 1m (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVol1M {
      get { return surfVol1M_; }
      set {
        surfVol1M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc1m" field.</summary>
    public const int SurfPrc1MFieldNumber = 265;
    private float surfPrc1M_;
    /// <summary>
    /// surface prc @ auction print time + 1m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc1M {
      get { return surfPrc1M_; }
      set {
        surfPrc1M_ = value;
      }
    }

    /// <summary>Field number for the "u_prc10m" field.</summary>
    public const int UPrc10MFieldNumber = 268;
    private float uPrc10M_;
    /// <summary>
    /// uPrc (mid market) @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc10M {
      get { return uPrc10M_; }
      set {
        uPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "bid_prc10m" field.</summary>
    public const int BidPrc10MFieldNumber = 271;
    private float bidPrc10M_;
    /// <summary>
    /// option nbbo bid @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrc10M {
      get { return bidPrc10M_; }
      set {
        bidPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "ask_prc10m" field.</summary>
    public const int AskPrc10MFieldNumber = 274;
    private float askPrc10M_;
    /// <summary>
    /// option nbbo ask @ auction print time + 10m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrc10M {
      get { return askPrc10M_; }
      set {
        askPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "surf_vol10m" field.</summary>
    public const int SurfVol10MFieldNumber = 277;
    private float surfVol10M_;
    /// <summary>
    /// surface vol @ auction print time + 10m (single option auction only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfVol10M {
      get { return surfVol10M_; }
      set {
        surfVol10M_ = value;
      }
    }

    /// <summary>Field number for the "surf_prc10m" field.</summary>
    public const int SurfPrc10MFieldNumber = 280;
    private float surfPrc10M_;
    /// <summary>
    /// surface prc @ auction print time + 10m (@ uMid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfPrc10M {
      get { return surfPrc10M_; }
      set {
        surfPrc10M_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 283;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "order_legs" field.</summary>
    public const int OrderLegsFieldNumber = 286;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs> _repeated_orderLegs_codec
        = pb::FieldCodec.ForMessage(2290, global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs> orderLegs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.AuctionPrint.Types.OrderLegs> OrderLegs {
      get { return orderLegs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuctionPrint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuctionPrint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(TradeDate, other.TradeDate)) return false;
      if (IsTestAuction != other.IsTestAuction) return false;
      if (!object.Equals(NoticeTime, other.NoticeTime)) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionSource != other.AuctionSource) return false;
      if (Industry != other.Industry) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAvgDailyVlm, other.UAvgDailyVlm)) return false;
      if (CustSide != other.CustSide) return false;
      if (CustQty != other.CustQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CustPrc, other.CustPrc)) return false;
      if (HasCustPrc != other.HasCustPrc) return false;
      if (CustFirmType != other.CustFirmType) return false;
      if (CustAgentMPID != other.CustAgentMPID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommEnhancement, other.CommEnhancement)) return false;
      if (NumOptLegs != other.NumOptLegs) return false;
      if (SpreadClass != other.SpreadClass) return false;
      if (SpreadFlavor != other.SpreadFlavor) return false;
      if (ContainsHedge != other.ContainsHedge) return false;
      if (ContainsFlex != other.ContainsFlex) return false;
      if (ContainsMultiHedge != other.ContainsMultiHedge) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetDe, other.NetDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetGa, other.NetGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetTh, other.NetTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetVe, other.NetVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgSurfPrc, other.PkgSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgBidPrc, other.PkgBidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PkgAskPrc, other.PkgAskPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice, other.PrtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtPrice2, other.PrtPrice2)) return false;
      if (PrtSize != other.PrtSize) return false;
      if (PrtSize2 != other.PrtSize2) return false;
      if (!object.Equals(PrtTime, other.PrtTime)) return false;
      if (PrtType != other.PrtType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUBid, other.PrtUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUAsk, other.PrtUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrtUPrc, other.PrtUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtSurfVol, other.PrtSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrtSurfPrc, other.PrtSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc, other.BidPrc)) return false;
      if (BidSz != other.BidSz) return false;
      if (BidMask != other.BidMask) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc, other.AskPrc)) return false;
      if (AskSz != other.AskSz) return false;
      if (AskMask != other.AskMask) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchBidPrc, other.ExchBidPrc)) return false;
      if (ExchBidSz != other.ExchBidSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchAskPrc, other.ExchAskPrc)) return false;
      if (ExchAskSz != other.ExchAskSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc1M, other.UPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc1M, other.BidPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc1M, other.AskPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVol1M, other.SurfVol1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc1M, other.SurfPrc1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc10M, other.UPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrc10M, other.BidPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrc10M, other.AskPrc10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfVol10M, other.SurfVol10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfPrc10M, other.SurfPrc10M)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!orderLegs_.Equals(other.orderLegs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAuction.GetHashCode();
      if (noticeTime_ != null) hash ^= NoticeTime.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) hash ^= AuctionSource.GetHashCode();
      if (Industry.Length != 0) hash ^= Industry.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (UAvgDailyVlm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAvgDailyVlm);
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= CustSide.GetHashCode();
      if (CustQty != 0) hash ^= CustQty.GetHashCode();
      if (CustPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CustPrc);
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= HasCustPrc.GetHashCode();
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= CustFirmType.GetHashCode();
      if (CustAgentMPID.Length != 0) hash ^= CustAgentMPID.GetHashCode();
      if (CommEnhancement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommEnhancement);
      if (NumOptLegs != 0) hash ^= NumOptLegs.GetHashCode();
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) hash ^= SpreadClass.GetHashCode();
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) hash ^= SpreadFlavor.GetHashCode();
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsHedge.GetHashCode();
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsFlex.GetHashCode();
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ContainsMultiHedge.GetHashCode();
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (NetDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetDe);
      if (NetGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetGa);
      if (NetTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetTh);
      if (NetVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetVe);
      if (PkgSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgSurfPrc);
      if (PkgBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgBidPrc);
      if (PkgAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PkgAskPrc);
      if (PrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice);
      if (PrtPrice2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtPrice2);
      if (PrtSize != 0) hash ^= PrtSize.GetHashCode();
      if (PrtSize2 != 0) hash ^= PrtSize2.GetHashCode();
      if (prtTime_ != null) hash ^= PrtTime.GetHashCode();
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) hash ^= PrtType.GetHashCode();
      if (PrtUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUBid);
      if (PrtUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUAsk);
      if (PrtUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrtUPrc);
      if (PrtSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtSurfVol);
      if (PrtSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrtSurfPrc);
      if (BidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc);
      if (BidSz != 0) hash ^= BidSz.GetHashCode();
      if (BidMask != 0) hash ^= BidMask.GetHashCode();
      if (AskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc);
      if (AskSz != 0) hash ^= AskSz.GetHashCode();
      if (AskMask != 0) hash ^= AskMask.GetHashCode();
      if (ExchBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchBidPrc);
      if (ExchBidSz != 0) hash ^= ExchBidSz.GetHashCode();
      if (ExchAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchAskPrc);
      if (ExchAskSz != 0) hash ^= ExchAskSz.GetHashCode();
      if (UPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc1M);
      if (BidPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc1M);
      if (AskPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc1M);
      if (SurfVol1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVol1M);
      if (SurfPrc1M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc1M);
      if (UPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc10M);
      if (BidPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrc10M);
      if (AskPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrc10M);
      if (SurfVol10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfVol10M);
      if (SurfPrc10M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfPrc10M);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= orderLegs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionSource);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(CommEnhancement);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (UBid != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(UAsk);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(NetVe);
      }
      if (PkgSurfPrc != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(PkgSurfPrc);
      }
      if (PkgBidPrc != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(PkgBidPrc);
      }
      if (PkgAskPrc != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(PkgAskPrc);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfVol != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PrtSurfVol);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PrtSurfPrc);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(BidPrc);
      }
      if (BidSz != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(BidSz);
      }
      if (BidMask != 0) {
        output.WriteRawTag(168, 14);
        output.WriteUInt32(BidMask);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(AskPrc);
      }
      if (AskSz != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(AskSz);
      }
      if (AskMask != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(AskMask);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchBidSz != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchAskSz != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ExchAskSz);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfVol1M != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SurfVol1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SurfPrc1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfVol10M != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SurfVol10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SurfPrc10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(Timestamp);
      }
      orderLegs_.WriteTo(output, _repeated_orderLegs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (tradeDate_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionSource);
      }
      if (Industry.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(UAvgDailyVlm);
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) CustSide);
      }
      if (CustQty != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(CustQty);
      }
      if (CustPrc != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(CustPrc);
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(CommEnhancement);
      }
      if (NumOptLegs != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) ContainsMultiHedge);
      }
      if (UBid != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(UAsk);
      }
      if (NetDe != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(NetDe);
      }
      if (NetGa != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(NetGa);
      }
      if (NetTh != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(NetTh);
      }
      if (NetVe != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(NetVe);
      }
      if (PkgSurfPrc != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(PkgSurfPrc);
      }
      if (PkgBidPrc != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(PkgBidPrc);
      }
      if (PkgAskPrc != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(PkgAskPrc);
      }
      if (PrtPrice != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(PrtPrice);
      }
      if (PrtPrice2 != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(PrtPrice2);
      }
      if (PrtSize != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(PrtSize);
      }
      if (PrtSize2 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(PrtSize2);
      }
      if (prtTime_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) PrtType);
      }
      if (PrtUBid != 0D) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(PrtUBid);
      }
      if (PrtUAsk != 0D) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(PrtUAsk);
      }
      if (PrtUPrc != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(PrtUPrc);
      }
      if (PrtSurfVol != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PrtSurfVol);
      }
      if (PrtSurfPrc != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PrtSurfPrc);
      }
      if (BidPrc != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(BidPrc);
      }
      if (BidSz != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(BidSz);
      }
      if (BidMask != 0) {
        output.WriteRawTag(168, 14);
        output.WriteUInt32(BidMask);
      }
      if (AskPrc != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(AskPrc);
      }
      if (AskSz != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(AskSz);
      }
      if (AskMask != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(AskMask);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchBidSz != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchAskSz != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ExchAskSz);
      }
      if (UPrc1M != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(UPrc1M);
      }
      if (BidPrc1M != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(BidPrc1M);
      }
      if (AskPrc1M != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(AskPrc1M);
      }
      if (SurfVol1M != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SurfVol1M);
      }
      if (SurfPrc1M != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SurfPrc1M);
      }
      if (UPrc10M != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(UPrc10M);
      }
      if (BidPrc10M != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BidPrc10M);
      }
      if (AskPrc10M != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(AskPrc10M);
      }
      if (SurfVol10M != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SurfVol10M);
      }
      if (SurfPrc10M != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SurfPrc10M);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 17);
        output.WriteMessage(Timestamp);
      }
      orderLegs_.WriteTo(ref output, _repeated_orderLegs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (tradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAuction);
      }
      if (noticeTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoticeTime);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSource);
      }
      if (Industry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (UAvgDailyVlm != 0F) {
        size += 2 + 4;
      }
      if (CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustSide);
      }
      if (CustQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustQty);
      }
      if (CustPrc != 0D) {
        size += 2 + 8;
      }
      if (HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCustPrc);
      }
      if (CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CustFirmType);
      }
      if (CustAgentMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustAgentMPID);
      }
      if (CommEnhancement != 0F) {
        size += 2 + 4;
      }
      if (NumOptLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptLegs);
      }
      if (SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadClass);
      }
      if (SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpreadFlavor);
      }
      if (ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsHedge);
      }
      if (ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsFlex);
      }
      if (ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContainsMultiHedge);
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (NetDe != 0F) {
        size += 2 + 4;
      }
      if (NetGa != 0F) {
        size += 2 + 4;
      }
      if (NetTh != 0F) {
        size += 2 + 4;
      }
      if (NetVe != 0F) {
        size += 2 + 4;
      }
      if (PkgSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (PkgBidPrc != 0F) {
        size += 2 + 4;
      }
      if (PkgAskPrc != 0F) {
        size += 2 + 4;
      }
      if (PrtPrice != 0D) {
        size += 2 + 8;
      }
      if (PrtPrice2 != 0D) {
        size += 2 + 8;
      }
      if (PrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize);
      }
      if (PrtSize2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrtSize2);
      }
      if (prtTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrtTime);
      }
      if (PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrtType);
      }
      if (PrtUBid != 0D) {
        size += 2 + 8;
      }
      if (PrtUAsk != 0D) {
        size += 2 + 8;
      }
      if (PrtUPrc != 0D) {
        size += 2 + 8;
      }
      if (PrtSurfVol != 0F) {
        size += 2 + 4;
      }
      if (PrtSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (BidPrc != 0F) {
        size += 2 + 4;
      }
      if (BidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSz);
      }
      if (BidMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask);
      }
      if (AskPrc != 0F) {
        size += 2 + 4;
      }
      if (AskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSz);
      }
      if (AskMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask);
      }
      if (ExchBidPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchBidSz);
      }
      if (ExchAskPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchAskSz);
      }
      if (UPrc1M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc1M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc1M != 0F) {
        size += 2 + 4;
      }
      if (SurfVol1M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc1M != 0F) {
        size += 2 + 4;
      }
      if (UPrc10M != 0F) {
        size += 2 + 4;
      }
      if (BidPrc10M != 0F) {
        size += 2 + 4;
      }
      if (AskPrc10M != 0F) {
        size += 2 + 4;
      }
      if (SurfVol10M != 0F) {
        size += 2 + 4;
      }
      if (SurfPrc10M != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += orderLegs_.CalculateSize(_repeated_orderLegs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuctionPrint other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.tradeDate_ != null) {
        if (tradeDate_ == null) {
          TradeDate = new global::Spiderrock.Protobuf.DateKey();
        }
        TradeDate.MergeFrom(other.TradeDate);
      }
      if (other.IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTestAuction = other.IsTestAuction;
      }
      if (other.noticeTime_ != null) {
        if (noticeTime_ == null) {
          NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NoticeTime.MergeFrom(other.NoticeTime);
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionSource != global::Spiderrock.Protobuf.AuctionSource.Unspecified) {
        AuctionSource = other.AuctionSource;
      }
      if (other.Industry.Length != 0) {
        Industry = other.Industry;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.UAvgDailyVlm != 0F) {
        UAvgDailyVlm = other.UAvgDailyVlm;
      }
      if (other.CustSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        CustSide = other.CustSide;
      }
      if (other.CustQty != 0) {
        CustQty = other.CustQty;
      }
      if (other.CustPrc != 0D) {
        CustPrc = other.CustPrc;
      }
      if (other.HasCustPrc != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        HasCustPrc = other.HasCustPrc;
      }
      if (other.CustFirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        CustFirmType = other.CustFirmType;
      }
      if (other.CustAgentMPID.Length != 0) {
        CustAgentMPID = other.CustAgentMPID;
      }
      if (other.CommEnhancement != 0F) {
        CommEnhancement = other.CommEnhancement;
      }
      if (other.NumOptLegs != 0) {
        NumOptLegs = other.NumOptLegs;
      }
      if (other.SpreadClass != global::Spiderrock.Protobuf.ToolSpreadClass.Unspecified) {
        SpreadClass = other.SpreadClass;
      }
      if (other.SpreadFlavor != global::Spiderrock.Protobuf.SpreadFlavor.Unspecified) {
        SpreadFlavor = other.SpreadFlavor;
      }
      if (other.ContainsHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsHedge = other.ContainsHedge;
      }
      if (other.ContainsFlex != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsFlex = other.ContainsFlex;
      }
      if (other.ContainsMultiHedge != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ContainsMultiHedge = other.ContainsMultiHedge;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.NetDe != 0F) {
        NetDe = other.NetDe;
      }
      if (other.NetGa != 0F) {
        NetGa = other.NetGa;
      }
      if (other.NetTh != 0F) {
        NetTh = other.NetTh;
      }
      if (other.NetVe != 0F) {
        NetVe = other.NetVe;
      }
      if (other.PkgSurfPrc != 0F) {
        PkgSurfPrc = other.PkgSurfPrc;
      }
      if (other.PkgBidPrc != 0F) {
        PkgBidPrc = other.PkgBidPrc;
      }
      if (other.PkgAskPrc != 0F) {
        PkgAskPrc = other.PkgAskPrc;
      }
      if (other.PrtPrice != 0D) {
        PrtPrice = other.PrtPrice;
      }
      if (other.PrtPrice2 != 0D) {
        PrtPrice2 = other.PrtPrice2;
      }
      if (other.PrtSize != 0) {
        PrtSize = other.PrtSize;
      }
      if (other.PrtSize2 != 0) {
        PrtSize2 = other.PrtSize2;
      }
      if (other.prtTime_ != null) {
        if (prtTime_ == null) {
          PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PrtTime.MergeFrom(other.PrtTime);
      }
      if (other.PrtType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        PrtType = other.PrtType;
      }
      if (other.PrtUBid != 0D) {
        PrtUBid = other.PrtUBid;
      }
      if (other.PrtUAsk != 0D) {
        PrtUAsk = other.PrtUAsk;
      }
      if (other.PrtUPrc != 0D) {
        PrtUPrc = other.PrtUPrc;
      }
      if (other.PrtSurfVol != 0F) {
        PrtSurfVol = other.PrtSurfVol;
      }
      if (other.PrtSurfPrc != 0F) {
        PrtSurfPrc = other.PrtSurfPrc;
      }
      if (other.BidPrc != 0F) {
        BidPrc = other.BidPrc;
      }
      if (other.BidSz != 0) {
        BidSz = other.BidSz;
      }
      if (other.BidMask != 0) {
        BidMask = other.BidMask;
      }
      if (other.AskPrc != 0F) {
        AskPrc = other.AskPrc;
      }
      if (other.AskSz != 0) {
        AskSz = other.AskSz;
      }
      if (other.AskMask != 0) {
        AskMask = other.AskMask;
      }
      if (other.ExchBidPrc != 0F) {
        ExchBidPrc = other.ExchBidPrc;
      }
      if (other.ExchBidSz != 0) {
        ExchBidSz = other.ExchBidSz;
      }
      if (other.ExchAskPrc != 0F) {
        ExchAskPrc = other.ExchAskPrc;
      }
      if (other.ExchAskSz != 0) {
        ExchAskSz = other.ExchAskSz;
      }
      if (other.UPrc1M != 0F) {
        UPrc1M = other.UPrc1M;
      }
      if (other.BidPrc1M != 0F) {
        BidPrc1M = other.BidPrc1M;
      }
      if (other.AskPrc1M != 0F) {
        AskPrc1M = other.AskPrc1M;
      }
      if (other.SurfVol1M != 0F) {
        SurfVol1M = other.SurfVol1M;
      }
      if (other.SurfPrc1M != 0F) {
        SurfPrc1M = other.SurfPrc1M;
      }
      if (other.UPrc10M != 0F) {
        UPrc10M = other.UPrc10M;
      }
      if (other.BidPrc10M != 0F) {
        BidPrc10M = other.BidPrc10M;
      }
      if (other.AskPrc10M != 0F) {
        AskPrc10M = other.AskPrc10M;
      }
      if (other.SurfVol10M != 0F) {
        SurfVol10M = other.SurfVol10M;
      }
      if (other.SurfPrc10M != 0F) {
        SurfPrc10M = other.SurfPrc10M;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      orderLegs_.Add(other.orderLegs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 832: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 850: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 872: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 922: {
            Industry = input.ReadString();
            break;
          }
          case 944: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 973: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 992: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1016: {
            CustQty = input.ReadInt32();
            break;
          }
          case 1041: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 1064: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1088: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1114: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1141: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 1160: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 1184: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 1208: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 1232: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1256: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1280: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1305: {
            UBid = input.ReadDouble();
            break;
          }
          case 1329: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1357: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1381: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1405: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1429: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1453: {
            PkgSurfPrc = input.ReadFloat();
            break;
          }
          case 1477: {
            PkgBidPrc = input.ReadFloat();
            break;
          }
          case 1501: {
            PkgAskPrc = input.ReadFloat();
            break;
          }
          case 1521: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 1545: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 1568: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 1592: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1618: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1640: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1665: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1689: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1713: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1741: {
            PrtSurfVol = input.ReadFloat();
            break;
          }
          case 1765: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1789: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1808: {
            BidSz = input.ReadInt32();
            break;
          }
          case 1832: {
            BidMask = input.ReadUInt32();
            break;
          }
          case 1861: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1880: {
            AskSz = input.ReadInt32();
            break;
          }
          case 1904: {
            AskMask = input.ReadUInt32();
            break;
          }
          case 1933: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1952: {
            ExchBidSz = input.ReadInt32();
            break;
          }
          case 1981: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 2000: {
            ExchAskSz = input.ReadInt32();
            break;
          }
          case 2029: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 2053: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 2077: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 2101: {
            SurfVol1M = input.ReadFloat();
            break;
          }
          case 2125: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 2149: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 2173: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 2197: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 2221: {
            SurfVol10M = input.ReadFloat();
            break;
          }
          case 2245: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 2266: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2290: {
            orderLegs_.AddEntriesFrom(input, _repeated_orderLegs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AuctionPrint.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            input.ReadMessage(TradeDate);
            break;
          }
          case 832: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 850: {
            if (noticeTime_ == null) {
              NoticeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NoticeTime);
            break;
          }
          case 872: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionSource = (global::Spiderrock.Protobuf.AuctionSource) input.ReadEnum();
            break;
          }
          case 922: {
            Industry = input.ReadString();
            break;
          }
          case 944: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 973: {
            UAvgDailyVlm = input.ReadFloat();
            break;
          }
          case 992: {
            CustSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 1016: {
            CustQty = input.ReadInt32();
            break;
          }
          case 1041: {
            CustPrc = input.ReadDouble();
            break;
          }
          case 1064: {
            HasCustPrc = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1088: {
            CustFirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1114: {
            CustAgentMPID = input.ReadString();
            break;
          }
          case 1141: {
            CommEnhancement = input.ReadFloat();
            break;
          }
          case 1160: {
            NumOptLegs = input.ReadInt32();
            break;
          }
          case 1184: {
            SpreadClass = (global::Spiderrock.Protobuf.ToolSpreadClass) input.ReadEnum();
            break;
          }
          case 1208: {
            SpreadFlavor = (global::Spiderrock.Protobuf.SpreadFlavor) input.ReadEnum();
            break;
          }
          case 1232: {
            ContainsHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1256: {
            ContainsFlex = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1280: {
            ContainsMultiHedge = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1305: {
            UBid = input.ReadDouble();
            break;
          }
          case 1329: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1357: {
            NetDe = input.ReadFloat();
            break;
          }
          case 1381: {
            NetGa = input.ReadFloat();
            break;
          }
          case 1405: {
            NetTh = input.ReadFloat();
            break;
          }
          case 1429: {
            NetVe = input.ReadFloat();
            break;
          }
          case 1453: {
            PkgSurfPrc = input.ReadFloat();
            break;
          }
          case 1477: {
            PkgBidPrc = input.ReadFloat();
            break;
          }
          case 1501: {
            PkgAskPrc = input.ReadFloat();
            break;
          }
          case 1521: {
            PrtPrice = input.ReadDouble();
            break;
          }
          case 1545: {
            PrtPrice2 = input.ReadDouble();
            break;
          }
          case 1568: {
            PrtSize = input.ReadInt32();
            break;
          }
          case 1592: {
            PrtSize2 = input.ReadInt32();
            break;
          }
          case 1618: {
            if (prtTime_ == null) {
              PrtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PrtTime);
            break;
          }
          case 1640: {
            PrtType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 1665: {
            PrtUBid = input.ReadDouble();
            break;
          }
          case 1689: {
            PrtUAsk = input.ReadDouble();
            break;
          }
          case 1713: {
            PrtUPrc = input.ReadDouble();
            break;
          }
          case 1741: {
            PrtSurfVol = input.ReadFloat();
            break;
          }
          case 1765: {
            PrtSurfPrc = input.ReadFloat();
            break;
          }
          case 1789: {
            BidPrc = input.ReadFloat();
            break;
          }
          case 1808: {
            BidSz = input.ReadInt32();
            break;
          }
          case 1832: {
            BidMask = input.ReadUInt32();
            break;
          }
          case 1861: {
            AskPrc = input.ReadFloat();
            break;
          }
          case 1880: {
            AskSz = input.ReadInt32();
            break;
          }
          case 1904: {
            AskMask = input.ReadUInt32();
            break;
          }
          case 1933: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1952: {
            ExchBidSz = input.ReadInt32();
            break;
          }
          case 1981: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 2000: {
            ExchAskSz = input.ReadInt32();
            break;
          }
          case 2029: {
            UPrc1M = input.ReadFloat();
            break;
          }
          case 2053: {
            BidPrc1M = input.ReadFloat();
            break;
          }
          case 2077: {
            AskPrc1M = input.ReadFloat();
            break;
          }
          case 2101: {
            SurfVol1M = input.ReadFloat();
            break;
          }
          case 2125: {
            SurfPrc1M = input.ReadFloat();
            break;
          }
          case 2149: {
            UPrc10M = input.ReadFloat();
            break;
          }
          case 2173: {
            BidPrc10M = input.ReadFloat();
            break;
          }
          case 2197: {
            AskPrc10M = input.ReadFloat();
            break;
          }
          case 2221: {
            SurfVol10M = input.ReadFloat();
            break;
          }
          case 2245: {
            SurfPrc10M = input.ReadFloat();
            break;
          }
          case 2266: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 2290: {
            orderLegs_.AddEntriesFrom(ref input, _repeated_orderLegs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AuctionPrint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionPrint.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          noticeNumber_ = other.noticeNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "notice_number" field.</summary>
        public const int NoticeNumberFieldNumber = 10;
        private long noticeNumber_;
        /// <summary>
        /// AuctionNotice.noticeNumber
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long NoticeNumber {
          get { return noticeNumber_; }
          set {
            noticeNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NoticeNumber != other.NoticeNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (NoticeNumber != 0L) hash ^= NoticeNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (NoticeNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(NoticeNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (NoticeNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.NoticeNumber != 0L) {
            NoticeNumber = other.NoticeNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                NoticeNumber = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class OrderLegs : pb::IMessage<OrderLegs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<OrderLegs> _parser = new pb::MessageParser<OrderLegs>(() => new OrderLegs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<OrderLegs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AuctionPrint.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs(OrderLegs other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          side_ = other.side_;
          ratio_ = other.ratio_;
          undPerCn_ = other.undPerCn_;
          pointValue_ = other.pointValue_;
          expType_ = other.expType_;
          years_ = other.years_;
          rate_ = other.rate_;
          atmVol_ = other.atmVol_;
          ddivPv_ = other.ddivPv_;
          tVol_ = other.tVol_;
          sVol_ = other.sVol_;
          sDiv_ = other.sDiv_;
          sPrc_ = other.sPrc_;
          de_ = other.de_;
          ga_ = other.ga_;
          th_ = other.th_;
          ve_ = other.ve_;
          sVolOk_ = other.sVolOk_;
          oBid_ = other.oBid_;
          oBidSz_ = other.oBidSz_;
          oBidMask_ = other.oBidMask_;
          oAsk_ = other.oAsk_;
          oAskSz_ = other.oAskSz_;
          oAskMask_ = other.oAskMask_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrderLegs Clone() {
          return new OrderLegs(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 289;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 292;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 295;
        private global::Spiderrock.Protobuf.BuySell side_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "ratio" field.</summary>
        public const int RatioFieldNumber = 298;
        private uint ratio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Ratio {
          get { return ratio_; }
          set {
            ratio_ = value;
          }
        }

        /// <summary>Field number for the "und_per_cn" field.</summary>
        public const int UndPerCnFieldNumber = 301;
        private int undPerCn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UndPerCn {
          get { return undPerCn_; }
          set {
            undPerCn_ = value;
          }
        }

        /// <summary>Field number for the "point_value" field.</summary>
        public const int PointValueFieldNumber = 304;
        private float pointValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float PointValue {
          get { return pointValue_; }
          set {
            pointValue_ = value;
          }
        }

        /// <summary>Field number for the "exp_type" field.</summary>
        public const int ExpTypeFieldNumber = 307;
        private global::Spiderrock.Protobuf.ExpiryType expType_ = global::Spiderrock.Protobuf.ExpiryType.Unspecified;
        /// <summary>
        /// ZDte,Daily,Weekly,Regular,Quarterly,LongTerm,OtherExp
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryType ExpType {
          get { return expType_; }
          set {
            expType_ = value;
          }
        }

        /// <summary>Field number for the "years" field.</summary>
        public const int YearsFieldNumber = 310;
        private float years_;
        /// <summary>
        /// SR volatility years to expiry
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Years {
          get { return years_; }
          set {
            years_ = value;
          }
        }

        /// <summary>Field number for the "rate" field.</summary>
        public const int RateFieldNumber = 313;
        private float rate_;
        /// <summary>
        /// SR global (discount) rate to expiry
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Rate {
          get { return rate_; }
          set {
            rate_ = value;
          }
        }

        /// <summary>Field number for the "atm_vol" field.</summary>
        public const int AtmVolFieldNumber = 316;
        private float atmVol_;
        /// <summary>
        /// ATM (fwd uPrc) SR surface volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float AtmVol {
          get { return atmVol_; }
          set {
            atmVol_ = value;
          }
        }

        /// <summary>Field number for the "ddiv_pv" field.</summary>
        public const int DdivPvFieldNumber = 319;
        private float ddivPv_;
        /// <summary>
        /// SR present value of ddiv stream
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float DdivPv {
          get { return ddivPv_; }
          set {
            ddivPv_ = value;
          }
        }

        /// <summary>Field number for the "t_vol" field.</summary>
        public const int TVolFieldNumber = 322;
        private float tVol_;
        /// <summary>
        /// client theo surface volatility (if client surfaces uploaded to SR)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float TVol {
          get { return tVol_; }
          set {
            tVol_ = value;
          }
        }

        /// <summary>Field number for the "s_vol" field.</summary>
        public const int SVolFieldNumber = 325;
        private float sVol_;
        /// <summary>
        /// SR Surface Volatility
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SVol {
          get { return sVol_; }
          set {
            sVol_ = value;
          }
        }

        /// <summary>Field number for the "s_div" field.</summary>
        public const int SDivFieldNumber = 328;
        private float sDiv_;
        /// <summary>
        /// SR Surface SDiv
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SDiv {
          get { return sDiv_; }
          set {
            sDiv_ = value;
          }
        }

        /// <summary>Field number for the "s_prc" field.</summary>
        public const int SPrcFieldNumber = 331;
        private float sPrc_;
        /// <summary>
        /// SR Surface Price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float SPrc {
          get { return sPrc_; }
          set {
            sPrc_ = value;
          }
        }

        /// <summary>Field number for the "de" field.</summary>
        public const int DeFieldNumber = 334;
        private float de_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float De {
          get { return de_; }
          set {
            de_ = value;
          }
        }

        /// <summary>Field number for the "ga" field.</summary>
        public const int GaFieldNumber = 337;
        private float ga_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Ga {
          get { return ga_; }
          set {
            ga_ = value;
          }
        }

        /// <summary>Field number for the "th" field.</summary>
        public const int ThFieldNumber = 340;
        private float th_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Th {
          get { return th_; }
          set {
            th_ = value;
          }
        }

        /// <summary>Field number for the "ve" field.</summary>
        public const int VeFieldNumber = 343;
        private float ve_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Ve {
          get { return ve_; }
          set {
            ve_ = value;
          }
        }

        /// <summary>Field number for the "s_vol_ok" field.</summary>
        public const int SVolOkFieldNumber = 346;
        private global::Spiderrock.Protobuf.YesNo sVolOk_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
        /// <summary>
        /// Yes if live market and sVol are tracking as expected
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.YesNo SVolOk {
          get { return sVolOk_; }
          set {
            sVolOk_ = value;
          }
        }

        /// <summary>Field number for the "o_bid" field.</summary>
        public const int OBidFieldNumber = 349;
        private float oBid_;
        /// <summary>
        /// NBBO bid price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float OBid {
          get { return oBid_; }
          set {
            oBid_ = value;
          }
        }

        /// <summary>Field number for the "o_bid_sz" field.</summary>
        public const int OBidSzFieldNumber = 352;
        private int oBidSz_;
        /// <summary>
        /// cumulative NBBO bid size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int OBidSz {
          get { return oBidSz_; }
          set {
            oBidSz_ = value;
          }
        }

        /// <summary>Field number for the "o_bid_mask" field.</summary>
        public const int OBidMaskFieldNumber = 355;
        private uint oBidMask_;
        /// <summary>
        /// bit-mask of participating NBBO exchanges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint OBidMask {
          get { return oBidMask_; }
          set {
            oBidMask_ = value;
          }
        }

        /// <summary>Field number for the "o_ask" field.</summary>
        public const int OAskFieldNumber = 358;
        private float oAsk_;
        /// <summary>
        /// NBBO ask price
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float OAsk {
          get { return oAsk_; }
          set {
            oAsk_ = value;
          }
        }

        /// <summary>Field number for the "o_ask_sz" field.</summary>
        public const int OAskSzFieldNumber = 361;
        private int oAskSz_;
        /// <summary>
        /// cumulative NBBO ask size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int OAskSz {
          get { return oAskSz_; }
          set {
            oAskSz_ = value;
          }
        }

        /// <summary>Field number for the "o_ask_mask" field.</summary>
        public const int OAskMaskFieldNumber = 364;
        private uint oAskMask_;
        /// <summary>
        /// bit-mask of participating NBBO exchanges
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint OAskMask {
          get { return oAskMask_; }
          set {
            oAskMask_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as OrderLegs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(OrderLegs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (Side != other.Side) return false;
          if (Ratio != other.Ratio) return false;
          if (UndPerCn != other.UndPerCn) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
          if (ExpType != other.ExpType) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVol, other.TVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVol, other.SVol)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDiv, other.SDiv)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SPrc, other.SPrc)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
          if (SVolOk != other.SVolOk) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBid, other.OBid)) return false;
          if (OBidSz != other.OBidSz) return false;
          if (OBidMask != other.OBidMask) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAsk, other.OAsk)) return false;
          if (OAskSz != other.OAskSz) return false;
          if (OAskMask != other.OAskMask) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side.GetHashCode();
          if (Ratio != 0) hash ^= Ratio.GetHashCode();
          if (UndPerCn != 0) hash ^= UndPerCn.GetHashCode();
          if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) hash ^= ExpType.GetHashCode();
          if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
          if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
          if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
          if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
          if (TVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVol);
          if (SVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVol);
          if (SDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDiv);
          if (SPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SPrc);
          if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
          if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
          if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
          if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= SVolOk.GetHashCode();
          if (OBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBid);
          if (OBidSz != 0) hash ^= OBidSz.GetHashCode();
          if (OBidMask != 0) hash ^= OBidMask.GetHashCode();
          if (OAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAsk);
          if (OAskSz != 0) hash ^= OAskSz.GetHashCode();
          if (OAskMask != 0) hash ^= OAskMask.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(138, 18);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(160, 18);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(184, 18);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(208, 18);
            output.WriteUInt32(Ratio);
          }
          if (UndPerCn != 0) {
            output.WriteRawTag(232, 18);
            output.WriteInt32(UndPerCn);
          }
          if (PointValue != 0F) {
            output.WriteRawTag(133, 19);
            output.WriteFloat(PointValue);
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            output.WriteRawTag(152, 19);
            output.WriteEnum((int) ExpType);
          }
          if (Years != 0F) {
            output.WriteRawTag(181, 19);
            output.WriteFloat(Years);
          }
          if (Rate != 0F) {
            output.WriteRawTag(205, 19);
            output.WriteFloat(Rate);
          }
          if (AtmVol != 0F) {
            output.WriteRawTag(229, 19);
            output.WriteFloat(AtmVol);
          }
          if (DdivPv != 0F) {
            output.WriteRawTag(253, 19);
            output.WriteFloat(DdivPv);
          }
          if (TVol != 0F) {
            output.WriteRawTag(149, 20);
            output.WriteFloat(TVol);
          }
          if (SVol != 0F) {
            output.WriteRawTag(173, 20);
            output.WriteFloat(SVol);
          }
          if (SDiv != 0F) {
            output.WriteRawTag(197, 20);
            output.WriteFloat(SDiv);
          }
          if (SPrc != 0F) {
            output.WriteRawTag(221, 20);
            output.WriteFloat(SPrc);
          }
          if (De != 0F) {
            output.WriteRawTag(245, 20);
            output.WriteFloat(De);
          }
          if (Ga != 0F) {
            output.WriteRawTag(141, 21);
            output.WriteFloat(Ga);
          }
          if (Th != 0F) {
            output.WriteRawTag(165, 21);
            output.WriteFloat(Th);
          }
          if (Ve != 0F) {
            output.WriteRawTag(189, 21);
            output.WriteFloat(Ve);
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(208, 21);
            output.WriteEnum((int) SVolOk);
          }
          if (OBid != 0F) {
            output.WriteRawTag(237, 21);
            output.WriteFloat(OBid);
          }
          if (OBidSz != 0) {
            output.WriteRawTag(128, 22);
            output.WriteInt32(OBidSz);
          }
          if (OBidMask != 0) {
            output.WriteRawTag(152, 22);
            output.WriteUInt32(OBidMask);
          }
          if (OAsk != 0F) {
            output.WriteRawTag(181, 22);
            output.WriteFloat(OAsk);
          }
          if (OAskSz != 0) {
            output.WriteRawTag(200, 22);
            output.WriteInt32(OAskSz);
          }
          if (OAskMask != 0) {
            output.WriteRawTag(224, 22);
            output.WriteUInt32(OAskMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(138, 18);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(160, 18);
            output.WriteEnum((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(184, 18);
            output.WriteEnum((int) Side);
          }
          if (Ratio != 0) {
            output.WriteRawTag(208, 18);
            output.WriteUInt32(Ratio);
          }
          if (UndPerCn != 0) {
            output.WriteRawTag(232, 18);
            output.WriteInt32(UndPerCn);
          }
          if (PointValue != 0F) {
            output.WriteRawTag(133, 19);
            output.WriteFloat(PointValue);
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            output.WriteRawTag(152, 19);
            output.WriteEnum((int) ExpType);
          }
          if (Years != 0F) {
            output.WriteRawTag(181, 19);
            output.WriteFloat(Years);
          }
          if (Rate != 0F) {
            output.WriteRawTag(205, 19);
            output.WriteFloat(Rate);
          }
          if (AtmVol != 0F) {
            output.WriteRawTag(229, 19);
            output.WriteFloat(AtmVol);
          }
          if (DdivPv != 0F) {
            output.WriteRawTag(253, 19);
            output.WriteFloat(DdivPv);
          }
          if (TVol != 0F) {
            output.WriteRawTag(149, 20);
            output.WriteFloat(TVol);
          }
          if (SVol != 0F) {
            output.WriteRawTag(173, 20);
            output.WriteFloat(SVol);
          }
          if (SDiv != 0F) {
            output.WriteRawTag(197, 20);
            output.WriteFloat(SDiv);
          }
          if (SPrc != 0F) {
            output.WriteRawTag(221, 20);
            output.WriteFloat(SPrc);
          }
          if (De != 0F) {
            output.WriteRawTag(245, 20);
            output.WriteFloat(De);
          }
          if (Ga != 0F) {
            output.WriteRawTag(141, 21);
            output.WriteFloat(Ga);
          }
          if (Th != 0F) {
            output.WriteRawTag(165, 21);
            output.WriteFloat(Th);
          }
          if (Ve != 0F) {
            output.WriteRawTag(189, 21);
            output.WriteFloat(Ve);
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            output.WriteRawTag(208, 21);
            output.WriteEnum((int) SVolOk);
          }
          if (OBid != 0F) {
            output.WriteRawTag(237, 21);
            output.WriteFloat(OBid);
          }
          if (OBidSz != 0) {
            output.WriteRawTag(128, 22);
            output.WriteInt32(OBidSz);
          }
          if (OBidMask != 0) {
            output.WriteRawTag(152, 22);
            output.WriteUInt32(OBidMask);
          }
          if (OAsk != 0F) {
            output.WriteRawTag(181, 22);
            output.WriteFloat(OAsk);
          }
          if (OAskSz != 0) {
            output.WriteRawTag(200, 22);
            output.WriteInt32(OAskSz);
          }
          if (OAskMask != 0) {
            output.WriteRawTag(224, 22);
            output.WriteUInt32(OAskMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Ratio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ratio);
          }
          if (UndPerCn != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UndPerCn);
          }
          if (PointValue != 0F) {
            size += 2 + 4;
          }
          if (ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpType);
          }
          if (Years != 0F) {
            size += 2 + 4;
          }
          if (Rate != 0F) {
            size += 2 + 4;
          }
          if (AtmVol != 0F) {
            size += 2 + 4;
          }
          if (DdivPv != 0F) {
            size += 2 + 4;
          }
          if (TVol != 0F) {
            size += 2 + 4;
          }
          if (SVol != 0F) {
            size += 2 + 4;
          }
          if (SDiv != 0F) {
            size += 2 + 4;
          }
          if (SPrc != 0F) {
            size += 2 + 4;
          }
          if (De != 0F) {
            size += 2 + 4;
          }
          if (Ga != 0F) {
            size += 2 + 4;
          }
          if (Th != 0F) {
            size += 2 + 4;
          }
          if (Ve != 0F) {
            size += 2 + 4;
          }
          if (SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SVolOk);
          }
          if (OBid != 0F) {
            size += 2 + 4;
          }
          if (OBidSz != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBidSz);
          }
          if (OBidMask != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OBidMask);
          }
          if (OAsk != 0F) {
            size += 2 + 4;
          }
          if (OAskSz != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OAskSz);
          }
          if (OAskMask != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OAskMask);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(OrderLegs other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            Side = other.Side;
          }
          if (other.Ratio != 0) {
            Ratio = other.Ratio;
          }
          if (other.UndPerCn != 0) {
            UndPerCn = other.UndPerCn;
          }
          if (other.PointValue != 0F) {
            PointValue = other.PointValue;
          }
          if (other.ExpType != global::Spiderrock.Protobuf.ExpiryType.Unspecified) {
            ExpType = other.ExpType;
          }
          if (other.Years != 0F) {
            Years = other.Years;
          }
          if (other.Rate != 0F) {
            Rate = other.Rate;
          }
          if (other.AtmVol != 0F) {
            AtmVol = other.AtmVol;
          }
          if (other.DdivPv != 0F) {
            DdivPv = other.DdivPv;
          }
          if (other.TVol != 0F) {
            TVol = other.TVol;
          }
          if (other.SVol != 0F) {
            SVol = other.SVol;
          }
          if (other.SDiv != 0F) {
            SDiv = other.SDiv;
          }
          if (other.SPrc != 0F) {
            SPrc = other.SPrc;
          }
          if (other.De != 0F) {
            De = other.De;
          }
          if (other.Ga != 0F) {
            Ga = other.Ga;
          }
          if (other.Th != 0F) {
            Th = other.Th;
          }
          if (other.Ve != 0F) {
            Ve = other.Ve;
          }
          if (other.SVolOk != global::Spiderrock.Protobuf.YesNo.Unspecified) {
            SVolOk = other.SVolOk;
          }
          if (other.OBid != 0F) {
            OBid = other.OBid;
          }
          if (other.OBidSz != 0) {
            OBidSz = other.OBidSz;
          }
          if (other.OBidMask != 0) {
            OBidMask = other.OBidMask;
          }
          if (other.OAsk != 0F) {
            OAsk = other.OAsk;
          }
          if (other.OAskSz != 0) {
            OAskSz = other.OAskSz;
          }
          if (other.OAskMask != 0) {
            OAskMask = other.OAskMask;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 2314: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 2336: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 2360: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 2384: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 2408: {
                UndPerCn = input.ReadInt32();
                break;
              }
              case 2437: {
                PointValue = input.ReadFloat();
                break;
              }
              case 2456: {
                ExpType = (global::Spiderrock.Protobuf.ExpiryType) input.ReadEnum();
                break;
              }
              case 2485: {
                Years = input.ReadFloat();
                break;
              }
              case 2509: {
                Rate = input.ReadFloat();
                break;
              }
              case 2533: {
                AtmVol = input.ReadFloat();
                break;
              }
              case 2557: {
                DdivPv = input.ReadFloat();
                break;
              }
              case 2581: {
                TVol = input.ReadFloat();
                break;
              }
              case 2605: {
                SVol = input.ReadFloat();
                break;
              }
              case 2629: {
                SDiv = input.ReadFloat();
                break;
              }
              case 2653: {
                SPrc = input.ReadFloat();
                break;
              }
              case 2677: {
                De = input.ReadFloat();
                break;
              }
              case 2701: {
                Ga = input.ReadFloat();
                break;
              }
              case 2725: {
                Th = input.ReadFloat();
                break;
              }
              case 2749: {
                Ve = input.ReadFloat();
                break;
              }
              case 2768: {
                SVolOk = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
              case 2797: {
                OBid = input.ReadFloat();
                break;
              }
              case 2816: {
                OBidSz = input.ReadInt32();
                break;
              }
              case 2840: {
                OBidMask = input.ReadUInt32();
                break;
              }
              case 2869: {
                OAsk = input.ReadFloat();
                break;
              }
              case 2888: {
                OAskSz = input.ReadInt32();
                break;
              }
              case 2912: {
                OAskMask = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 2314: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 2336: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 2360: {
                Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 2384: {
                Ratio = input.ReadUInt32();
                break;
              }
              case 2408: {
                UndPerCn = input.ReadInt32();
                break;
              }
              case 2437: {
                PointValue = input.ReadFloat();
                break;
              }
              case 2456: {
                ExpType = (global::Spiderrock.Protobuf.ExpiryType) input.ReadEnum();
                break;
              }
              case 2485: {
                Years = input.ReadFloat();
                break;
              }
              case 2509: {
                Rate = input.ReadFloat();
                break;
              }
              case 2533: {
                AtmVol = input.ReadFloat();
                break;
              }
              case 2557: {
                DdivPv = input.ReadFloat();
                break;
              }
              case 2581: {
                TVol = input.ReadFloat();
                break;
              }
              case 2605: {
                SVol = input.ReadFloat();
                break;
              }
              case 2629: {
                SDiv = input.ReadFloat();
                break;
              }
              case 2653: {
                SPrc = input.ReadFloat();
                break;
              }
              case 2677: {
                De = input.ReadFloat();
                break;
              }
              case 2701: {
                Ga = input.ReadFloat();
                break;
              }
              case 2725: {
                Th = input.ReadFloat();
                break;
              }
              case 2749: {
                Ve = input.ReadFloat();
                break;
              }
              case 2768: {
                SVolOk = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
                break;
              }
              case 2797: {
                OBid = input.ReadFloat();
                break;
              }
              case 2816: {
                OBidSz = input.ReadInt32();
                break;
              }
              case 2840: {
                OBidMask = input.ReadUInt32();
                break;
              }
              case 2869: {
                OAsk = input.ReadFloat();
                break;
              }
              case 2888: {
                OAskSz = input.ReadInt32();
                break;
              }
              case 2912: {
                OAskMask = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
