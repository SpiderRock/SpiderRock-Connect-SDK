syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message AuctionPrintBX {
    message PKey {
        
        int64 notice_number = 10; // AuctionNotice.noticeNumber
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlier ticker
    DateKey trade_date = 101;
    YesNo is_test_auction = 102; // if yes, auction is a test auction (not a prod/live auction)
    google.protobuf.Timestamp notice_time = 103; // notice create timestamp (high precision)
    AuctionType auction_type = 104; // (eg. Block, Flash, Improvement, Facilitation, etc.)
    AuctionSource auction_source = 105; // source of the auction notice (eg. SRC, MIAX, etc.)
    YesNo contains_flex = 106; // Flex = European
    TickerKey root = 107; // option root
    DateKey expiry = 108;
    double lo_strike = 109; // lo strike
    double hi_strike = 110; // hi strike
    string industry = 111; // industry string
    SymbolType symbol_type = 112;
    float u_avg_daily_vlm = 113; // underlier average daily trading volume
    BuySell cust_side = 114; // from AuctionNotice (if known)
    int32 cust_qty = 115; // from AuctionNotice (if known)
    double cust_prc = 116; // from AuctionNotice (if known)
    YesNo has_cust_prc = 117; // from AuctionNotice (if known)
    FirmType cust_firm_type = 118; // cust firm type (if disclosed)
    string cust_agent_mPID = 119; // cust agent exchange member initiating the auction (if disclosed)
    float comm_enhancement = 120; // additional commission (if any) paid by responder
    double notice_uBid = 121;
    double notice_uAsk = 122;
    float net_surf_prc = 123; // SR Surface Price (entire package)
    double i_days = 124; // iDays = effective interest days [SR supplied]
    double i_years = 125; // iYears = iDays / 360.0
    double money_rate = 126; // effective rate to borrow/lend money to expiry (360 day convention) [compares to globalRate * 360 / 365] [SR Supplied Estimate]
    double strike_pv = 127; // strikePv = strike * (1.0 - moneyRate * iYears) [moneyRate supplied above]
    double prt_price = 128; // reported OPRA print price (pkgPrice if MLeg)
    double prt_price2 = 129; // if reported as 2 separate prints at different prices (ie, partial size improvement)
    int32 prt_size = 130; // reported OPRA print size (pgkSize if MLeg)
    int32 prt_size2 = 131; // reported OPRA print size (pgkSize if MLeg)
    google.protobuf.Timestamp prt_time = 132; // reported OPRA print time (1st print if MLeg) (high precision)
    PrtType prt_type = 133; // reported OPRA print type
    double prt_uPrc = 134; // best estimate of uPrc @ auction print time
    float prt_surf_prc = 135; // surface prc @ auction print time (@ uMid) (pkgSurfPrc if MLeg)
    double prt_money_rate = 136; // prtMoneyRate = (1.0 - (prtPrice / (hiStrike - loStrike)) / iYears
    float u_prc1m = 137; // uPrc (mid market) @ auction print time + 1m
    float bid_prc1m = 138; // option nbbo bid @ auction print time + 1m
    float ask_prc1m = 139; // option nbbo ask @ auction print time + 1m
    float surf_prc1m = 140; // surface prc @ auction print time + 1m (@ uMid)
    double surf_rate1m = 141; // surfRate1m = (1.0 - (surfPrc1m / (hiStrike - loStrike)) / iYears
    float u_prc10m = 142; // uPrc (mid market) @ auction print time + 10m
    float bid_prc10m = 143; // option nbbo bid @ auction print time + 10m
    float ask_prc10m = 144; // option nbbo ask @ auction print time + 10m
    float surf_prc10m = 145; // surface prc @ auction print time + 10m (@ uMid)
    double surf_rate10m = 146; // surfRate10m = (1.0 - (surfPrc10m / (hiStrike - loStrike)) / iYears
    google.protobuf.Timestamp timestamp = 147;
}


