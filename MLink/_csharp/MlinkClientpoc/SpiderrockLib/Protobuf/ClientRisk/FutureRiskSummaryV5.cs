// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/FutureRiskSummaryV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/FutureRiskSummaryV5.proto</summary>
  public static partial class FutureRiskSummaryV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/FutureRiskSummaryV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FutureRiskSummaryV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1Qcm90b2J1Zi9DbGllbnRSaXNrL0Z1dHVyZVJpc2tTdW1tYXJ5VjUucHJv",
            "dG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIuMgChNGdXR1",
            "cmVSaXNrU3VtbWFyeVY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzItLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuRnV0dXJlUmlza1N1bW1hcnlWNS5QS2V5EhgKEHJp",
            "c2tfc2VydmVyX2NvZGUYZyABKAkSLgoGdGlja2VyGGogASgLMh4uc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDQoFdV9wcmMYbSABKAESDgoGdV9t",
            "YXJrGHAgASgBEhIKCnVfb3BuX21hcmsYcyABKAESDAoEYmV0YRh2IAEoAhI0",
            "CgtiZXRhX3NvdXJjZRh5IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuQmV0",
            "YVNvdXJjZRIRCglsbl9kRGVsdGEYfCABKAESEQoJc2hfZERlbHRhGH8gASgB",
            "EhoKEWZ1dF9ta3RfdmFsdWVfbWlkGIIBIAEoARIaChFvcHRfbWt0X3ZhbHVl",
            "X21pZBiFASABKAESGgoRb3B0X21rdF92YWx1ZV92b2wYiAEgASgBEhcKDmZj",
            "X2Fic19jdXJfcG9zGIsBIAEoBRIXCg5mY19hYnNfb3BuX2NschiOASABKAUS",
            "FwoOZmNfYWJzX29wbl9wcnYYkQEgASgFEhcKDmZjX2Fic19vcG5fcG9zGJQB",
            "IAEoBRIXCg5mY19hYnNfb3BuX2JyaxiXASABKAUSFwoOZmNfbmV0X2N1cl9w",
            "b3MYmgEgASgFEg8KBmZjX2JvdBidASABKAUSDwoGZmNfc2xkGKABIAEoBRIT",
            "CgpmY19ib3RfaGRnGKMBIAEoBRITCgpmY19zbGRfaGRnGKYBIAEoBRITCgpm",
            "Y19ib3RfdHJoGKkBIAEoBRITCgpmY19zbGRfdHJoGKwBIAEoBRITCgpmY19i",
            "b3Rfb3BuGK8BIAEoBRITCgpmY19zbGRfb3BuGLIBIAEoBRITCgpmY19ib3Rf",
            "dHJkGLUBIAEoBRITCgpmY19zbGRfdHJkGLgBIAEoBRITCgpmY19tbnlfYm90",
            "GLsBIAEoARITCgpmY19tbnlfc2xkGL4BIAEoARIxCgxtYXhfZnV0X2R0dG0Y",
            "wQEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBITCgpmY19wbmxf",
            "bWlkGMQBIAEoAhITCgpmY19wbmxfY2xyGMcBIAEoAhITCgpmY19wbmxfZGF5",
            "GMoBIAEoAhIaChFvcF9jbl9hYnNfY3VyX3BvcxjNASABKAUSGgoRb3BfY25f",
            "YWJzX29wbl9jbHIY0AEgASgFEhoKEW9wX2NuX2Fic19vcG5fcHJ2GNMBIAEo",
            "BRIaChFvcF9jbl9hYnNfb3BuX3BvcxjWASABKAUSGgoRb3BfY25fYWJzX29w",
            "bl9icmsY2QEgASgFEhcKDm9wX2NuX3Bvc19jYWxsGNwBIAEoBRIWCg1vcF9j",
            "bl9wb3NfcHV0GN8BIAEoBRIXCg5vcF9jbl9hYnNfcGFpchjiASABKAUSHAoT",
            "b3BfY25fYWJzX2F0bV9lcXVpdhjlASABKAISEgoJb3BfY25fYm90GOgBIAEo",
            "BRISCglvcF9jbl9zbGQY6wEgASgFEhMKCm9wX21ueV9ib3QY7gEgASgBEhMK",
            "Cm9wX21ueV9zbGQY8QEgASgBEhQKC29wX3ByZW1fYm90GPQBIAEoAhIUCgtv",
            "cF9wcmVtX3NsZBj3ASABKAISMQoMbWF4X29wdF9kdHRtGPoBIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoKb3BfcG5sX3ZvbBj9ASABKAES",
            "EwoKb3BfcG5sX21pZBiAAiABKAESEwoKb3BfcG5sX2NschiDAiABKAESEwoK",
            "b3BfcG5sX2JyaxiGAiABKAISEwoKb3BfcG5sX2RheRiJAiABKAISFgoNb3Bf",
            "ZG5fcG5sX2RheRiMAiABKAISFAoLb3BfZGF5X3ZlZ2EYjwIgASgCEhUKDG9w",
            "X2RheV93VmVnYRiSAiABKAISFQoMb3BfZGF5X3RWZWdhGJUCIAEoAhIXCg5v",
            "cF9kYXlfd3RfdmVnYRiYAiABKAISFQoMb3BfZGF5X3RoZXRhGJsCIAEoAhIV",
            "CgxvcF9kYXlfZGVsdGEYngIgASgCEhUKDG9wX3RyZF9kZWx0YRihAiABKAIS",
            "EgoJb3BuX2RlbHRhGKQCIAEoAhIXCg5jb250X2hlZGdlX3BubBinAiABKAIS",
            "GAoPY29udF9oZWRnZV9wbmwxGKoCIAEoAhIXCg5vcF9lZGdlX29wZW5lZBit",
            "AiABKAISFwoOb3BfZWRnZV9jbG9zZWQYsAIgASgCEg8KBnBubF9kbhizAiAB",
            "KAISDwoGcG5sX2RlGLYCIAEoAhIPCgZwbmxfc2wYuQIgASgCEg8KBnBubF9n",
            "YRi8AiABKAISDwoGcG5sX3RoGL8CIAEoAhIPCgZwbmxfdmUYwgIgASgCEg8K",
            "BnBubF92bxjFAiABKAISDwoGcG5sX3ZhGMgCIAEoAhIQCgdwbmxfZXJyGMsC",
            "IAEoAhIRCghwbmxfcmF0ZRjOAiABKAISEQoIcG5sX3NEaXYY0QIgASgCEhEK",
            "CHBubF9kRGl2GNQCIAEoAhIPCgZwbmxfdGUY1wIgASgCEhYKDXBjdF9pdl9j",
            "aGFuZ2UY2gIgASgCEhQKC3BjdF9pdl92ZWdhGN0CIAEoAhIWCg1wY3RfdHZf",
            "Y2hhbmdlGOACIAEoAhIUCgtwY3RfdHZfdmVnYRjjAiABKAISFgoNZnV0X3dp",
            "ZHRoX21ueRjmAiABKAISFgoNb3B0X3dpZHRoX21ueRjpAiABKAISEwoKZGF5",
            "X2REZWx0YRjsAiABKAISDgoFZGVsdGEY7wIgASgCEg8KBmRkZWx0YRjyAiAB",
            "KAISEQoIZGVfZGVjYXkY9QIgASgCEhEKCGRkX2RlY2F5GPgCIAEoAhIOCgVn",
            "YW1tYRj7AiABKAISEAoHZF9nYW1tYRj+AiABKAISDgoFdGhldGEYgQMgASgC",
            "EgwKA3JobxiEAyABKAISDQoEdmVnYRiHAyABKAISDwoGdF92ZWdhGIoDIAEo",
            "AhIPCgZ3X3ZlZ2EYjQMgASgCEhAKB3d0X3ZlZ2EYkAMgASgCEhAKB2l2b2xf",
            "dmUYkwMgASgCEg4KBXZvbGdhGJYDIAEoAhIOCgV2YW5uYRiZAyABKAISDgoF",
            "c2xvcGUYnAMgASgCEg4KBWF2ZWdhGJ8DIAEoAhIPCgZhdGhldGEYogMgASgC",
            "EhQKC2hlZGdlX2dhbW1hGKUDIAEoAhIVCgxoZWRnZV9kR2FtbWEYqAMgASgC",
            "EhQKC3ByZW1fb3ZfcGFyGKsDIAEoAhIRCgh3dF92ZV9kZBiuAyABKAISEQoI",
            "d3RfdmVfZG4YsQMgASgCEhEKCHd0X3ZlX2F0GLQDIAEoAhIRCgh3dF92ZV91",
            "cBi3AyABKAISEQoId3RfdmVfZHUYugMgASgCEhEKCHd0X3ZlX20xGL0DIAEo",
            "AhIRCgh3dF92ZV9tMhjAAyABKAISEQoId3RfdmVfbTMYwwMgASgCEhEKCHd0",
            "X3ZlX200GMYDIAEoAhIRCgh3dF92ZV9tNRjJAyABKAISDwoGcGluX3hYGMwD",
            "IAEoAhIVCgxvcG5fZGVfYmVsb3cYzwMgASgCEhUKDG9wbl9kZV9hYm92ZRjS",
            "AyABKAISFgoNb3BuX2REZV9iZWxvdxjVAyABKAISFgoNb3BuX2REZV9hYm92",
            "ZRjYAyABKAISFQoMcG9zX2RlX2JlbG93GNsDIAEoAhIVCgxwb3NfZGVfYWJv",
            "dmUY3gMgASgCEhYKDXBvc19kRGVfYmVsb3cY4QMgASgCEhYKDXBvc19kRGVf",
            "YWJvdmUY5AMgASgCEhsKEnBvc19oZWRnZV9kZWx0YV9leBjnAyABKAISHAoT",
            "cG9zX2hlZGdlX2REZWx0YV9leBjqAyABKAISDwoGdF9lZGdlGO0DIAEoAhIU",
            "Cgt0X2VkZ2VfbXVsdBjwAyABKAISEgoJdF9lZGdlX3ByGPMDIAEoAhIXCg50",
            "X2VkZ2VfbXVsdF9wchj2AyABKAISGAoPbnVtX3RWb2xfZXJyb3JzGPkDIAEo",
            "BRIRCghwYWlyX3BubBj8AyABKAISFQoMcG9zX3RFZGdlX3dWGP8DIAEoAhIV",
            "CgxuZWdfdEVkZ2Vfd1YYggQgASgCEhUKDGJhZF90RWRnZV93VhiFBCABKAIS",
            "FgoNcG9zX3RFZGdlX3BubBiIBCABKAISFgoNbmVnX3RFZGdlX3BubBiLBCAB",
            "KAISFgoNYmFkX3RFZGdlX3BubBiOBCABKAISDwoGc3BhbjAxGJEEIAEoAhIP",
            "CgZzcGFuMDIYlAQgASgCEg8KBnNwYW4wMxiXBCABKAISDwoGc3BhbjA0GJoE",
            "IAEoAhIPCgZzcGFuMDUYnQQgASgCEg8KBnNwYW4wNhigBCABKAISDwoGc3Bh",
            "bjA3GKMEIAEoAhIPCgZzcGFuMDgYpgQgASgCEg8KBnNwYW4wORipBCABKAIS",
            "DwoGc3BhbjEwGKwEIAEoAhIPCgZzcGFuMTEYrwQgASgCEg8KBnNwYW4xMhiy",
            "BCABKAISDwoGc3BhbjEzGLUEIAEoAhIPCgZzcGFuMTQYuAQgASgCEg8KBnNw",
            "YW4xNRi7BCABKAISDwoGc3BhbjE2GL4EIAEoAhIVCgxmdXRfbGlxX3Jpc2sY",
            "wQQgASgCEhUKDG9wdF9saXFfcmlzaxjEBCABKAISEgoJZmNfYm90X2MwGMcE",
            "IAEoBRISCglmY19zbGRfYzAYygQgASgFEhIKCWZjX21ueV9jMBjNBCABKAIS",
            "EgoJZmNfYm90X2MxGNAEIAEoBRISCglmY19zbGRfYzEY0wQgASgFEhIKCWZj",
            "X21ueV9jMRjWBCABKAISEwoKZnV0X21hcmdpbhjZBCABKAISFwoObnVtX2Z1",
            "dF9lcnJvcnMY3AQgASgFEhcKDm51bV9vcHRfZXJyb3JzGN8EIAEoBRI1Cg11",
            "cGRhdGVfc291cmNlGOIEIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuUjVT",
            "b3VyY2USNwoNZnV0X21hcmtfZmxhZxjlBCABKA4yHy5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLk1rdEVyckZsYWcSNwoNb3B0X21hcmtfZmxhZxjoBCABKA4yHy5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLk1rdEVyckZsYWcSLgoJdGltZXN0YW1wGOsE",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAawgEKBFBLZXkSLAoE",
            "ZmtleRgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5Eg0K",
            "BWFjY250GAsgASgJEjAKCnRyYWRlX2RhdGUYDCABKAsyHC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkRhdGVLZXkSNgoMcmlza19zZXNzaW9uGA0gASgOMiAuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5SaXNrU2Vzc2lvbhITCgtjbGllbnRfZmlybRgO",
            "IAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.FutureRiskSummaryV5), global::Spiderrock.Protobuf.FutureRiskSummaryV5.Parser, new[]{ "Meta", "Pkey", "RiskServerCode", "Ticker", "UPrc", "UMark", "UOpnMark", "Beta", "BetaSource", "LnDDelta", "ShDDelta", "FutMktValueMid", "OptMktValueMid", "OptMktValueVol", "FcAbsCurPos", "FcAbsOpnClr", "FcAbsOpnPrv", "FcAbsOpnPos", "FcAbsOpnBrk", "FcNetCurPos", "FcBot", "FcSld", "FcBotHdg", "FcSldHdg", "FcBotTrh", "FcSldTrh", "FcBotOpn", "FcSldOpn", "FcBotTrd", "FcSldTrd", "FcMnyBot", "FcMnySld", "MaxFutDttm", "FcPnlMid", "FcPnlClr", "FcPnlDay", "OpCnAbsCurPos", "OpCnAbsOpnClr", "OpCnAbsOpnPrv", "OpCnAbsOpnPos", "OpCnAbsOpnBrk", "OpCnPosCall", "OpCnPosPut", "OpCnAbsPair", "OpCnAbsAtmEquiv", "OpCnBot", "OpCnSld", "OpMnyBot", "OpMnySld", "OpPremBot", "OpPremSld", "MaxOptDttm", "OpPnlVol", "OpPnlMid", "OpPnlClr", "OpPnlBrk", "OpPnlDay", "OpDnPnlDay", "OpDayVega", "OpDayWVega", "OpDayTVega", "OpDayWtVega", "OpDayTheta", "OpDayDelta", "OpTrdDelta", "OpnDelta", "ContHedgePnl", "ContHedgePnl1", "OpEdgeOpened", "OpEdgeClosed", "PnlDn", "PnlDe", "PnlSl", "PnlGa", "PnlTh", "PnlVe", "PnlVo", "PnlVa", "PnlErr", "PnlRate", "PnlSDiv", "PnlDDiv", "PnlTe", "PctIvChange", "PctIvVega", "PctTvChange", "PctTvVega", "FutWidthMny", "OptWidthMny", "DayDDelta", "Delta", "Ddelta", "DeDecay", "DdDecay", "Gamma", "DGamma", "Theta", "Rho", "Vega", "TVega", "WVega", "WtVega", "IvolVe", "Volga", "Vanna", "Slope", "Avega", "Atheta", "HedgeGamma", "HedgeDGamma", "PremOvPar", "WtVeDd", "WtVeDn", "WtVeAt", "WtVeUp", "WtVeDu", "WtVeM1", "WtVeM2", "WtVeM3", "WtVeM4", "WtVeM5", "PinXX", "OpnDeBelow", "OpnDeAbove", "OpnDDeBelow", "OpnDDeAbove", "PosDeBelow", "PosDeAbove", "PosDDeBelow", "PosDDeAbove", "PosHedgeDeltaEx", "PosHedgeDDeltaEx", "TEdge", "TEdgeMult", "TEdgePr", "TEdgeMultPr", "NumTVolErrors", "PairPnl", "PosTEdgeWV", "NegTEdgeWV", "BadTEdgeWV", "PosTEdgePnl", "NegTEdgePnl", "BadTEdgePnl", "Span01", "Span02", "Span03", "Span04", "Span05", "Span06", "Span07", "Span08", "Span09", "Span10", "Span11", "Span12", "Span13", "Span14", "Span15", "Span16", "FutLiqRisk", "OptLiqRisk", "FcBotC0", "FcSldC0", "FcMnyC0", "FcBotC1", "FcSldC1", "FcMnyC1", "FutMargin", "NumFutErrors", "NumOptErrors", "UpdateSource", "FutMarkFlag", "OptMarkFlag", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey), global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey.Parser, new[]{ "Fkey", "Accnt", "TradeDate", "RiskSession", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///FutureRiskSummary records contain live future level risk aggregation of OptionPositionRecord and FuturePositionRecord details.
  ///Records are published if/when positions change and about once per minute otherwise.
  /// </summary>
  public sealed partial class FutureRiskSummaryV5 : pb::IMessage<FutureRiskSummaryV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FutureRiskSummaryV5> _parser = new pb::MessageParser<FutureRiskSummaryV5>(() => new FutureRiskSummaryV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FutureRiskSummaryV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.FutureRiskSummaryV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureRiskSummaryV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureRiskSummaryV5(FutureRiskSummaryV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      riskServerCode_ = other.riskServerCode_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      uPrc_ = other.uPrc_;
      uMark_ = other.uMark_;
      uOpnMark_ = other.uOpnMark_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      lnDDelta_ = other.lnDDelta_;
      shDDelta_ = other.shDDelta_;
      futMktValueMid_ = other.futMktValueMid_;
      optMktValueMid_ = other.optMktValueMid_;
      optMktValueVol_ = other.optMktValueVol_;
      fcAbsCurPos_ = other.fcAbsCurPos_;
      fcAbsOpnClr_ = other.fcAbsOpnClr_;
      fcAbsOpnPrv_ = other.fcAbsOpnPrv_;
      fcAbsOpnPos_ = other.fcAbsOpnPos_;
      fcAbsOpnBrk_ = other.fcAbsOpnBrk_;
      fcNetCurPos_ = other.fcNetCurPos_;
      fcBot_ = other.fcBot_;
      fcSld_ = other.fcSld_;
      fcBotHdg_ = other.fcBotHdg_;
      fcSldHdg_ = other.fcSldHdg_;
      fcBotTrh_ = other.fcBotTrh_;
      fcSldTrh_ = other.fcSldTrh_;
      fcBotOpn_ = other.fcBotOpn_;
      fcSldOpn_ = other.fcSldOpn_;
      fcBotTrd_ = other.fcBotTrd_;
      fcSldTrd_ = other.fcSldTrd_;
      fcMnyBot_ = other.fcMnyBot_;
      fcMnySld_ = other.fcMnySld_;
      maxFutDttm_ = other.maxFutDttm_ != null ? other.maxFutDttm_.Clone() : null;
      fcPnlMid_ = other.fcPnlMid_;
      fcPnlClr_ = other.fcPnlClr_;
      fcPnlDay_ = other.fcPnlDay_;
      opCnAbsCurPos_ = other.opCnAbsCurPos_;
      opCnAbsOpnClr_ = other.opCnAbsOpnClr_;
      opCnAbsOpnPrv_ = other.opCnAbsOpnPrv_;
      opCnAbsOpnPos_ = other.opCnAbsOpnPos_;
      opCnAbsOpnBrk_ = other.opCnAbsOpnBrk_;
      opCnPosCall_ = other.opCnPosCall_;
      opCnPosPut_ = other.opCnPosPut_;
      opCnAbsPair_ = other.opCnAbsPair_;
      opCnAbsAtmEquiv_ = other.opCnAbsAtmEquiv_;
      opCnBot_ = other.opCnBot_;
      opCnSld_ = other.opCnSld_;
      opMnyBot_ = other.opMnyBot_;
      opMnySld_ = other.opMnySld_;
      opPremBot_ = other.opPremBot_;
      opPremSld_ = other.opPremSld_;
      maxOptDttm_ = other.maxOptDttm_ != null ? other.maxOptDttm_.Clone() : null;
      opPnlVol_ = other.opPnlVol_;
      opPnlMid_ = other.opPnlMid_;
      opPnlClr_ = other.opPnlClr_;
      opPnlBrk_ = other.opPnlBrk_;
      opPnlDay_ = other.opPnlDay_;
      opDnPnlDay_ = other.opDnPnlDay_;
      opDayVega_ = other.opDayVega_;
      opDayWVega_ = other.opDayWVega_;
      opDayTVega_ = other.opDayTVega_;
      opDayWtVega_ = other.opDayWtVega_;
      opDayTheta_ = other.opDayTheta_;
      opDayDelta_ = other.opDayDelta_;
      opTrdDelta_ = other.opTrdDelta_;
      opnDelta_ = other.opnDelta_;
      contHedgePnl_ = other.contHedgePnl_;
      contHedgePnl1_ = other.contHedgePnl1_;
      opEdgeOpened_ = other.opEdgeOpened_;
      opEdgeClosed_ = other.opEdgeClosed_;
      pnlDn_ = other.pnlDn_;
      pnlDe_ = other.pnlDe_;
      pnlSl_ = other.pnlSl_;
      pnlGa_ = other.pnlGa_;
      pnlTh_ = other.pnlTh_;
      pnlVe_ = other.pnlVe_;
      pnlVo_ = other.pnlVo_;
      pnlVa_ = other.pnlVa_;
      pnlErr_ = other.pnlErr_;
      pnlRate_ = other.pnlRate_;
      pnlSDiv_ = other.pnlSDiv_;
      pnlDDiv_ = other.pnlDDiv_;
      pnlTe_ = other.pnlTe_;
      pctIvChange_ = other.pctIvChange_;
      pctIvVega_ = other.pctIvVega_;
      pctTvChange_ = other.pctTvChange_;
      pctTvVega_ = other.pctTvVega_;
      futWidthMny_ = other.futWidthMny_;
      optWidthMny_ = other.optWidthMny_;
      dayDDelta_ = other.dayDDelta_;
      delta_ = other.delta_;
      ddelta_ = other.ddelta_;
      deDecay_ = other.deDecay_;
      ddDecay_ = other.ddDecay_;
      gamma_ = other.gamma_;
      dGamma_ = other.dGamma_;
      theta_ = other.theta_;
      rho_ = other.rho_;
      vega_ = other.vega_;
      tVega_ = other.tVega_;
      wVega_ = other.wVega_;
      wtVega_ = other.wtVega_;
      ivolVe_ = other.ivolVe_;
      volga_ = other.volga_;
      vanna_ = other.vanna_;
      slope_ = other.slope_;
      avega_ = other.avega_;
      atheta_ = other.atheta_;
      hedgeGamma_ = other.hedgeGamma_;
      hedgeDGamma_ = other.hedgeDGamma_;
      premOvPar_ = other.premOvPar_;
      wtVeDd_ = other.wtVeDd_;
      wtVeDn_ = other.wtVeDn_;
      wtVeAt_ = other.wtVeAt_;
      wtVeUp_ = other.wtVeUp_;
      wtVeDu_ = other.wtVeDu_;
      wtVeM1_ = other.wtVeM1_;
      wtVeM2_ = other.wtVeM2_;
      wtVeM3_ = other.wtVeM3_;
      wtVeM4_ = other.wtVeM4_;
      wtVeM5_ = other.wtVeM5_;
      pinXX_ = other.pinXX_;
      opnDeBelow_ = other.opnDeBelow_;
      opnDeAbove_ = other.opnDeAbove_;
      opnDDeBelow_ = other.opnDDeBelow_;
      opnDDeAbove_ = other.opnDDeAbove_;
      posDeBelow_ = other.posDeBelow_;
      posDeAbove_ = other.posDeAbove_;
      posDDeBelow_ = other.posDDeBelow_;
      posDDeAbove_ = other.posDDeAbove_;
      posHedgeDeltaEx_ = other.posHedgeDeltaEx_;
      posHedgeDDeltaEx_ = other.posHedgeDDeltaEx_;
      tEdge_ = other.tEdge_;
      tEdgeMult_ = other.tEdgeMult_;
      tEdgePr_ = other.tEdgePr_;
      tEdgeMultPr_ = other.tEdgeMultPr_;
      numTVolErrors_ = other.numTVolErrors_;
      pairPnl_ = other.pairPnl_;
      posTEdgeWV_ = other.posTEdgeWV_;
      negTEdgeWV_ = other.negTEdgeWV_;
      badTEdgeWV_ = other.badTEdgeWV_;
      posTEdgePnl_ = other.posTEdgePnl_;
      negTEdgePnl_ = other.negTEdgePnl_;
      badTEdgePnl_ = other.badTEdgePnl_;
      span01_ = other.span01_;
      span02_ = other.span02_;
      span03_ = other.span03_;
      span04_ = other.span04_;
      span05_ = other.span05_;
      span06_ = other.span06_;
      span07_ = other.span07_;
      span08_ = other.span08_;
      span09_ = other.span09_;
      span10_ = other.span10_;
      span11_ = other.span11_;
      span12_ = other.span12_;
      span13_ = other.span13_;
      span14_ = other.span14_;
      span15_ = other.span15_;
      span16_ = other.span16_;
      futLiqRisk_ = other.futLiqRisk_;
      optLiqRisk_ = other.optLiqRisk_;
      fcBotC0_ = other.fcBotC0_;
      fcSldC0_ = other.fcSldC0_;
      fcMnyC0_ = other.fcMnyC0_;
      fcBotC1_ = other.fcBotC1_;
      fcSldC1_ = other.fcSldC1_;
      fcMnyC1_ = other.fcMnyC1_;
      futMargin_ = other.futMargin_;
      numFutErrors_ = other.numFutErrors_;
      numOptErrors_ = other.numOptErrors_;
      updateSource_ = other.updateSource_;
      futMarkFlag_ = other.futMarkFlag_;
      optMarkFlag_ = other.optMarkFlag_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureRiskSummaryV5 Clone() {
      return new FutureRiskSummaryV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 103;
    private string riskServerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 106;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// Ticker that this future is associated with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 109;
    private double uPrc_;
    /// <summary>
    /// current live underlier price (can be from risk server, tool server, or srse server)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_mark" field.</summary>
    public const int UMarkFieldNumber = 112;
    private double uMark_;
    /// <summary>
    /// current underlier price [as of risk server record publish] [freezes at 4pm EST]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UMark {
      get { return uMark_; }
      set {
        uMark_ = value;
      }
    }

    /// <summary>Field number for the "u_opn_mark" field.</summary>
    public const int UOpnMarkFieldNumber = 115;
    private double uOpnMark_;
    /// <summary>
    /// start-of-day SR underlier mark (rotated from prior day record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UOpnMark {
      get { return uOpnMark_; }
      set {
        uOpnMark_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 118;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 121;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "ln_dDelta" field.</summary>
    public const int LnDDeltaFieldNumber = 124;
    private double lnDDelta_;
    /// <summary>
    /// long net position delta value (today; SR marks )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LnDDelta {
      get { return lnDDelta_; }
      set {
        lnDDelta_ = value;
      }
    }

    /// <summary>Field number for the "sh_dDelta" field.</summary>
    public const int ShDDeltaFieldNumber = 127;
    private double shDDelta_;
    /// <summary>
    /// short net position delta value (today; SR marks )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ShDDelta {
      get { return shDDelta_; }
      set {
        shDDelta_ = value;
      }
    }

    /// <summary>Field number for the "fut_mkt_value_mid" field.</summary>
    public const int FutMktValueMidFieldNumber = 130;
    private double futMktValueMid_;
    /// <summary>
    /// future position market value (today; SR mid marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutMktValueMid {
      get { return futMktValueMid_; }
      set {
        futMktValueMid_ = value;
      }
    }

    /// <summary>Field number for the "opt_mkt_value_mid" field.</summary>
    public const int OptMktValueMidFieldNumber = 133;
    private double optMktValueMid_;
    /// <summary>
    /// option position market value (SR mid marks); =sum[opCurPosM * opr.optVolMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptMktValueMid {
      get { return optMktValueMid_; }
      set {
        optMktValueMid_ = value;
      }
    }

    /// <summary>Field number for the "opt_mkt_value_vol" field.</summary>
    public const int OptMktValueVolFieldNumber = 136;
    private double optMktValueVol_;
    /// <summary>
    /// option position market value (SR vol marks); =sum[opCurPosM * opr.optMidMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptMktValueVol {
      get { return optMktValueVol_; }
      set {
        optMktValueVol_ = value;
      }
    }

    /// <summary>Field number for the "fc_abs_cur_pos" field.</summary>
    public const int FcAbsCurPosFieldNumber = 139;
    private int fcAbsCurPos_;
    /// <summary>
    /// abs number of future contracts (position + fills);=sum[abs(fpr.cnCurPos)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcAbsCurPos {
      get { return fcAbsCurPos_; }
      set {
        fcAbsCurPos_ = value;
      }
    }

    /// <summary>Field number for the "fc_abs_opn_clr" field.</summary>
    public const int FcAbsOpnClrFieldNumber = 142;
    private int fcAbsOpnClr_;
    /// <summary>
    /// abs number of start of period future contracts (CLR view);=sum[abs(fpr.cnOpnClr)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcAbsOpnClr {
      get { return fcAbsOpnClr_; }
      set {
        fcAbsOpnClr_ = value;
      }
    }

    /// <summary>Field number for the "fc_abs_opn_prv" field.</summary>
    public const int FcAbsOpnPrvFieldNumber = 145;
    private int fcAbsOpnPrv_;
    /// <summary>
    /// abs number of start of period future contracts (SR view);=sum[abs(fpr.cnOpnPrv)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcAbsOpnPrv {
      get { return fcAbsOpnPrv_; }
      set {
        fcAbsOpnPrv_ = value;
      }
    }

    /// <summary>Field number for the "fc_abs_opn_pos" field.</summary>
    public const int FcAbsOpnPosFieldNumber = 148;
    private int fcAbsOpnPos_;
    /// <summary>
    /// abs number of start of period future contracts (effective);=sum[abs(fpr.cnOpnPos)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcAbsOpnPos {
      get { return fcAbsOpnPos_; }
      set {
        fcAbsOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "fc_abs_opn_brk" field.</summary>
    public const int FcAbsOpnBrkFieldNumber = 151;
    private int fcAbsOpnBrk_;
    /// <summary>
    /// abs number of future contract start of period breaks (CLR - PRV);=sum[abs(fpr.cnOpnClr - fpr.cnOpnPrv)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcAbsOpnBrk {
      get { return fcAbsOpnBrk_; }
      set {
        fcAbsOpnBrk_ = value;
      }
    }

    /// <summary>Field number for the "fc_net_cur_pos" field.</summary>
    public const int FcNetCurPosFieldNumber = 154;
    private int fcNetCurPos_;
    /// <summary>
    /// net future contract position;=sum[fpr.cnOpnClr + fpr.cnBot - fpr.cnSld]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcNetCurPos {
      get { return fcNetCurPos_; }
      set {
        fcNetCurPos_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot" field.</summary>
    public const int FcBotFieldNumber = 157;
    private int fcBot_;
    /// <summary>
    /// number of futures contracts bot today;=sum(frr.cnBot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBot {
      get { return fcBot_; }
      set {
        fcBot_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld" field.</summary>
    public const int FcSldFieldNumber = 160;
    private int fcSld_;
    /// <summary>
    /// number of futures contracts sld today;=sum(frr.cnSld)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSld {
      get { return fcSld_; }
      set {
        fcSld_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_hdg" field.</summary>
    public const int FcBotHdgFieldNumber = 163;
    private int fcBotHdg_;
    /// <summary>
    /// number of contracts bot today from hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotHdg {
      get { return fcBotHdg_; }
      set {
        fcBotHdg_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_hdg" field.</summary>
    public const int FcSldHdgFieldNumber = 166;
    private int fcSldHdg_;
    /// <summary>
    /// number of contracts sld today from hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldHdg {
      get { return fcSldHdg_; }
      set {
        fcSldHdg_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_trh" field.</summary>
    public const int FcBotTrhFieldNumber = 169;
    private int fcBotTrh_;
    /// <summary>
    /// number of contracts bot today from hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotTrh {
      get { return fcBotTrh_; }
      set {
        fcBotTrh_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_trh" field.</summary>
    public const int FcSldTrhFieldNumber = 172;
    private int fcSldTrh_;
    /// <summary>
    /// number of contracts sld today from hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldTrh {
      get { return fcSldTrh_; }
      set {
        fcSldTrh_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_opn" field.</summary>
    public const int FcBotOpnFieldNumber = 175;
    private int fcBotOpn_;
    /// <summary>
    /// number of contracts bot today from hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotOpn {
      get { return fcBotOpn_; }
      set {
        fcBotOpn_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_opn" field.</summary>
    public const int FcSldOpnFieldNumber = 178;
    private int fcSldOpn_;
    /// <summary>
    /// number of contracts sld today from hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldOpn {
      get { return fcSldOpn_; }
      set {
        fcSldOpn_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_trd" field.</summary>
    public const int FcBotTrdFieldNumber = 181;
    private int fcBotTrd_;
    /// <summary>
    /// number of contracts bot today from a trade hedging source (AutoHedge or Trades loop)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotTrd {
      get { return fcBotTrd_; }
      set {
        fcBotTrd_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_trd" field.</summary>
    public const int FcSldTrdFieldNumber = 184;
    private int fcSldTrd_;
    /// <summary>
    /// number of contracts sld today from a trade hedging source (AutoHedge or Trades loop)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldTrd {
      get { return fcSldTrd_; }
      set {
        fcSldTrd_ = value;
      }
    }

    /// <summary>Field number for the "fc_mny_bot" field.</summary>
    public const int FcMnyBotFieldNumber = 187;
    private double fcMnyBot_;
    /// <summary>
    /// futures money bot today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FcMnyBot {
      get { return fcMnyBot_; }
      set {
        fcMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "fc_mny_sld" field.</summary>
    public const int FcMnySldFieldNumber = 190;
    private double fcMnySld_;
    /// <summary>
    /// futures money sld today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FcMnySld {
      get { return fcMnySld_; }
      set {
        fcMnySld_ = value;
      }
    }

    /// <summary>Field number for the "max_fut_dttm" field.</summary>
    public const int MaxFutDttmFieldNumber = 193;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxFutDttm_;
    /// <summary>
    /// DateTime of most recent SpdrFuturenExecution (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxFutDttm {
      get { return maxFutDttm_; }
      set {
        maxFutDttm_ = value;
      }
    }

    /// <summary>Field number for the "fc_pnl_mid" field.</summary>
    public const int FcPnlMidFieldNumber = 196;
    private float fcPnlMid_;
    /// <summary>
    /// Futures Open Pnl (SR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnMidMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FcPnlMid {
      get { return fcPnlMid_; }
      set {
        fcPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "fc_pnl_clr" field.</summary>
    public const int FcPnlClrFieldNumber = 199;
    private float fcPnlClr_;
    /// <summary>
    /// Futures Open Pnl (CLR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnClrMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FcPnlClr {
      get { return fcPnlClr_; }
      set {
        fcPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "fc_pnl_day" field.</summary>
    public const int FcPnlDayFieldNumber = 202;
    private float fcPnlDay_;
    /// <summary>
    /// Futures Day Pnl;=sum(fpr.dayPnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FcPnlDay {
      get { return fcPnlDay_; }
      set {
        fcPnlDay_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_cur_pos" field.</summary>
    public const int OpCnAbsCurPosFieldNumber = 205;
    private int opCnAbsCurPos_;
    /// <summary>
    /// abs number of option contracts (position + fills);=sum[abs(opr.cnCurPos)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsCurPos {
      get { return opCnAbsCurPos_; }
      set {
        opCnAbsCurPos_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_opn_clr" field.</summary>
    public const int OpCnAbsOpnClrFieldNumber = 208;
    private int opCnAbsOpnClr_;
    /// <summary>
    /// abs number of start of period option contracts (CLR view); =sum[abs(opr.cnOpnClr)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsOpnClr {
      get { return opCnAbsOpnClr_; }
      set {
        opCnAbsOpnClr_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_opn_prv" field.</summary>
    public const int OpCnAbsOpnPrvFieldNumber = 211;
    private int opCnAbsOpnPrv_;
    /// <summary>
    /// abs number of start of period option contracts (SR view); =sum[abs(opr.cnOpnPrv)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsOpnPrv {
      get { return opCnAbsOpnPrv_; }
      set {
        opCnAbsOpnPrv_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_opn_pos" field.</summary>
    public const int OpCnAbsOpnPosFieldNumber = 214;
    private int opCnAbsOpnPos_;
    /// <summary>
    /// abs number of start of period option contracts; =sum[abs(opr.cnOpnPos)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsOpnPos {
      get { return opCnAbsOpnPos_; }
      set {
        opCnAbsOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_opn_brk" field.</summary>
    public const int OpCnAbsOpnBrkFieldNumber = 217;
    private int opCnAbsOpnBrk_;
    /// <summary>
    /// abs number of option contract start of period breaks (CLR - PRV);=sum[abs(opr.cnOpnClr - opr.cnOpnPrv)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsOpnBrk {
      get { return opCnAbsOpnBrk_; }
      set {
        opCnAbsOpnBrk_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_pos_call" field.</summary>
    public const int OpCnPosCallFieldNumber = 220;
    private int opCnPosCall_;
    /// <summary>
    /// net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if call)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnPosCall {
      get { return opCnPosCall_; }
      set {
        opCnPosCall_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_pos_put" field.</summary>
    public const int OpCnPosPutFieldNumber = 223;
    private int opCnPosPut_;
    /// <summary>
    /// net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if put)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnPosPut {
      get { return opCnPosPut_; }
      set {
        opCnPosPut_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_pair" field.</summary>
    public const int OpCnAbsPairFieldNumber = 226;
    private int opCnAbsPair_;
    /// <summary>
    /// abs number of option contracts with CP reversals removed; =sum[abs(opr.cnOpnClr + opr.cnBot - opr.cnSld) - abs(opr.cnNetPos)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnAbsPair {
      get { return opCnAbsPair_; }
      set {
        opCnAbsPair_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_abs_atm_equiv" field.</summary>
    public const int OpCnAbsAtmEquivFieldNumber = 229;
    private float opCnAbsAtmEquiv_;
    /// <summary>
    /// abs atm equivalent contracts; = sum[abs(opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpCnAbsAtmEquiv {
      get { return opCnAbsAtmEquiv_; }
      set {
        opCnAbsAtmEquiv_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_bot" field.</summary>
    public const int OpCnBotFieldNumber = 232;
    private int opCnBot_;
    /// <summary>
    /// number of option contracts bot today;=sum[opr.cnBot]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnBot {
      get { return opCnBot_; }
      set {
        opCnBot_ = value;
      }
    }

    /// <summary>Field number for the "op_cn_sld" field.</summary>
    public const int OpCnSldFieldNumber = 235;
    private int opCnSld_;
    /// <summary>
    /// number of option contracts sld today;=sum[opr.cnSld]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OpCnSld {
      get { return opCnSld_; }
      set {
        opCnSld_ = value;
      }
    }

    /// <summary>Field number for the "op_mny_bot" field.</summary>
    public const int OpMnyBotFieldNumber = 238;
    private double opMnyBot_;
    /// <summary>
    /// option money bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpMnyBot {
      get { return opMnyBot_; }
      set {
        opMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "op_mny_sld" field.</summary>
    public const int OpMnySldFieldNumber = 241;
    private double opMnySld_;
    /// <summary>
    /// option money sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpMnySld {
      get { return opMnySld_; }
      set {
        opMnySld_ = value;
      }
    }

    /// <summary>Field number for the "op_prem_bot" field.</summary>
    public const int OpPremBotFieldNumber = 244;
    private float opPremBot_;
    /// <summary>
    /// option premium bot today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnBot]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPremBot {
      get { return opPremBot_; }
      set {
        opPremBot_ = value;
      }
    }

    /// <summary>Field number for the "op_prem_sld" field.</summary>
    public const int OpPremSldFieldNumber = 247;
    private float opPremSld_;
    /// <summary>
    /// option premium sld today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnSld]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPremSld {
      get { return opPremSld_; }
      set {
        opPremSld_ = value;
      }
    }

    /// <summary>Field number for the "max_opt_dttm" field.</summary>
    public const int MaxOptDttmFieldNumber = 250;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxOptDttm_;
    /// <summary>
    /// DateTime of most recent SpdrOptionExecution (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxOptDttm {
      get { return maxOptDttm_; }
      set {
        maxOptDttm_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_vol" field.</summary>
    public const int OpPnlVolFieldNumber = 253;
    private double opPnlVol_;
    /// <summary>
    /// Option Open Pnl (SR vol marks); =sum[opr.opnPnlVolMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpPnlVol {
      get { return opPnlVol_; }
      set {
        opPnlVol_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_mid" field.</summary>
    public const int OpPnlMidFieldNumber = 256;
    private double opPnlMid_;
    /// <summary>
    /// Option Open Pnl (SR mid marks); =sum[opr.opnPnlMidMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpPnlMid {
      get { return opPnlMid_; }
      set {
        opPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_clr" field.</summary>
    public const int OpPnlClrFieldNumber = 259;
    private double opPnlClr_;
    /// <summary>
    /// Option Open Pnl (CLR marks); =sum[opr.opnPnlClrMark]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OpPnlClr {
      get { return opPnlClr_; }
      set {
        opPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_brk" field.</summary>
    public const int OpPnlBrkFieldNumber = 262;
    private float opPnlBrk_;
    /// <summary>
    /// Option Mark Break (catch-up) Pnl (SR vol marks to CLR marks);=sum[(opr.cnOpnClr * opr.pointValue) * (opr.optVolMark - opr.optClrMark)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPnlBrk {
      get { return opPnlBrk_; }
      set {
        opPnlBrk_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_day" field.</summary>
    public const int OpPnlDayFieldNumber = 265;
    private float opPnlDay_;
    /// <summary>
    /// Option Day Pnl;=sum[opr.dayPnl]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPnlDay {
      get { return opPnlDay_; }
      set {
        opPnlDay_ = value;
      }
    }

    /// <summary>Field number for the "op_dn_pnl_day" field.</summary>
    public const int OpDnPnlDayFieldNumber = 268;
    private float opDnPnlDay_;
    /// <summary>
    /// Option DN Day Pnl (delta neutral);=sum[opr.dnDayPnl]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDnPnlDay {
      get { return opDnPnlDay_; }
      set {
        opDnPnlDay_ = value;
      }
    }

    /// <summary>Field number for the "op_day_vega" field.</summary>
    public const int OpDayVegaFieldNumber = 271;
    private float opDayVega_;
    /// <summary>
    /// option vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayVega {
      get { return opDayVega_; }
      set {
        opDayVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wVega" field.</summary>
    public const int OpDayWVegaFieldNumber = 274;
    private float opDayWVega_;
    /// <summary>
    /// option (vol weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWVega {
      get { return opDayWVega_; }
      set {
        opDayWVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_tVega" field.</summary>
    public const int OpDayTVegaFieldNumber = 277;
    private float opDayTVega_;
    /// <summary>
    /// option (time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTVega {
      get { return opDayTVega_; }
      set {
        opDayTVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wt_vega" field.</summary>
    public const int OpDayWtVegaFieldNumber = 280;
    private float opDayWtVega_;
    /// <summary>
    /// option (vol time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWtVega {
      get { return opDayWtVega_; }
      set {
        opDayWtVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_theta" field.</summary>
    public const int OpDayThetaFieldNumber = 283;
    private float opDayTheta_;
    /// <summary>
    /// Option Day Theta;=sum[opr.th * ((opr.cnBot - opr.cnSld) * opr.pointValue)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTheta {
      get { return opDayTheta_; }
      set {
        opDayTheta_ = value;
      }
    }

    /// <summary>Field number for the "op_day_delta" field.</summary>
    public const int OpDayDeltaFieldNumber = 286;
    private float opDayDelta_;
    /// <summary>
    /// Option Day Delta;=sum[opr.de * ((opr.cnBot - opr.cnSld) * opr.underliersPerCn)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayDelta {
      get { return opDayDelta_; }
      set {
        opDayDelta_ = value;
      }
    }

    /// <summary>Field number for the "op_trd_delta" field.</summary>
    public const int OpTrdDeltaFieldNumber = 289;
    private float opTrdDelta_;
    /// <summary>
    /// Option Trade Delta (delta fixed at time of trade);=sum[opr.trdDelta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpTrdDelta {
      get { return opTrdDelta_; }
      set {
        opTrdDelta_ = value;
      }
    }

    /// <summary>Field number for the "opn_delta" field.</summary>
    public const int OpnDeltaFieldNumber = 292;
    private float opnDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnDelta {
      get { return opnDelta_; }
      set {
        opnDelta_ = value;
      }
    }

    /// <summary>Field number for the "cont_hedge_pnl" field.</summary>
    public const int ContHedgePnlFieldNumber = 295;
    private float contHedgePnl_;
    /// <summary>
    /// Estimated continuous hedging pnl (open positions only) [~1 minute intervals]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContHedgePnl {
      get { return contHedgePnl_; }
      set {
        contHedgePnl_ = value;
      }
    }

    /// <summary>Field number for the "cont_hedge_pnl1" field.</summary>
    public const int ContHedgePnl1FieldNumber = 298;
    private float contHedgePnl1_;
    /// <summary>
    /// Estimated continuous hedging pnl (open positions only) [~10 minute intervals]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ContHedgePnl1 {
      get { return contHedgePnl1_; }
      set {
        contHedgePnl1_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_opened" field.</summary>
    public const int OpEdgeOpenedFieldNumber = 301;
    private float opEdgeOpened_;
    /// <summary>
    /// Option Edge Opened (new risk);=sum[opr.edgeOpened]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeOpened {
      get { return opEdgeOpened_; }
      set {
        opEdgeOpened_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_closed" field.</summary>
    public const int OpEdgeClosedFieldNumber = 304;
    private float opEdgeClosed_;
    /// <summary>
    /// Option Edge Closed (new risk);=sum[opr.edgeClosed]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeClosed {
      get { return opEdgeClosed_; }
      set {
        opEdgeClosed_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dn" field.</summary>
    public const int PnlDnFieldNumber = 307;
    private float pnlDn_;
    /// <summary>
    /// Option Pnl Attr: delta neutral pnl: =sum[volPnl - shClrM * dUPrc * opr.dePr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDn {
      get { return pnlDn_; }
      set {
        pnlDn_ = value;
      }
    }

    /// <summary>Field number for the "pnl_de" field.</summary>
    public const int PnlDeFieldNumber = 310;
    private float pnlDe_;
    /// <summary>
    /// Option Pnl Attr: delta pnl;=sum[shClrM * dUPrc * opr.dePr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDe {
      get { return pnlDe_; }
      set {
        pnlDe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sl" field.</summary>
    public const int PnlSlFieldNumber = 313;
    private float pnlSl_;
    /// <summary>
    /// Option Pnl Attr: slope pnl;=sum[shClrM * dUPrc * opr.vePr * opr.slPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSl {
      get { return pnlSl_; }
      set {
        pnlSl_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ga" field.</summary>
    public const int PnlGaFieldNumber = 316;
    private float pnlGa_;
    /// <summary>
    /// Option Pnl Attr: gamma pnl;=sum[shClrM * 0.5 * dUPrc * dUPrc * (opr.ga + opr.gaPr)/2]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlGa {
      get { return pnlGa_; }
      set {
        pnlGa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_th" field.</summary>
    public const int PnlThFieldNumber = 319;
    private float pnlTh_;
    /// <summary>
    /// Option Pnl Attr: theta pnl;=sum[shClrM * dTime * -opr.thPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTh {
      get { return pnlTh_; }
      set {
        pnlTh_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ve" field.</summary>
    public const int PnlVeFieldNumber = 322;
    private float pnlVe_;
    /// <summary>
    /// Option Pnl Attr: vega pnl;=sum[shClrM * 100 * dVol * opr.vePr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVe {
      get { return pnlVe_; }
      set {
        pnlVe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_vo" field.</summary>
    public const int PnlVoFieldNumber = 325;
    private float pnlVo_;
    /// <summary>
    /// Option Pnl Attr: volga pnl;=sum[shClrM * 0.5 * 100 * 100 * dVol * dVol * opr.voPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVo {
      get { return pnlVo_; }
      set {
        pnlVo_ = value;
      }
    }

    /// <summary>Field number for the "pnl_va" field.</summary>
    public const int PnlVaFieldNumber = 328;
    private float pnlVa_;
    /// <summary>
    /// Option Pnl Attr: vanna pnl;=sum[shClrM * 100 * dVol * dUPrc * opr.vaPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVa {
      get { return pnlVa_; }
      set {
        pnlVa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_err" field.</summary>
    public const int PnlErrFieldNumber = 331;
    private float pnlErr_;
    /// <summary>
    /// Option Pnl Attr: error (unexplained) pnl;=sum[shClrM * (volPnl - pnlDe - pnlGa - pnlTh - pnlVe)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlErr {
      get { return pnlErr_; }
      set {
        pnlErr_ = value;
      }
    }

    /// <summary>Field number for the "pnl_rate" field.</summary>
    public const int PnlRateFieldNumber = 334;
    private float pnlRate_;
    /// <summary>
    /// Option Pnl Attr: rate pnl;=sum[shClrM * 100 * dRate * opr.rhPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlRate {
      get { return pnlRate_; }
      set {
        pnlRate_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sDiv" field.</summary>
    public const int PnlSDivFieldNumber = 337;
    private float pnlSDiv_;
    /// <summary>
    /// Option Pnl Attr: sdiv pnl;=sum[shClrM * 100 * dSDiv * opr.phPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSDiv {
      get { return pnlSDiv_; }
      set {
        pnlSDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dDiv" field.</summary>
    public const int PnlDDivFieldNumber = 340;
    private float pnlDDiv_;
    /// <summary>
    /// Option Pnl Attr: ddiv pnl;=sum[shClrM * 100 * (opr.ddiv - opr.ddivPr) / opr.uPrc * opr.phPr]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDDiv {
      get { return pnlDDiv_; }
      set {
        pnlDDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_te" field.</summary>
    public const int PnlTeFieldNumber = 343;
    private float pnlTe_;
    /// <summary>
    /// Option Pnl Attr: theo edge pnl;=sum[shClrM * ((opr.tOpx - opr.optVolMark) - (opr.tOpxPr - opr.optOpnVolMark))]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTe {
      get { return pnlTe_; }
      set {
        pnlTe_ = value;
      }
    }

    /// <summary>Field number for the "pct_iv_change" field.</summary>
    public const int PctIvChangeFieldNumber = 346;
    private float pctIvChange_;
    /// <summary>
    /// Option Avg IVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.iVol/opr.iVolPr)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PctIvChange {
      get { return pctIvChange_; }
      set {
        pctIvChange_ = value;
      }
    }

    /// <summary>Field number for the "pct_iv_vega" field.</summary>
    public const int PctIvVegaFieldNumber = 349;
    private float pctIvVega_;
    /// <summary>
    /// Option Avg IVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PctIvVega {
      get { return pctIvVega_; }
      set {
        pctIvVega_ = value;
      }
    }

    /// <summary>Field number for the "pct_tv_change" field.</summary>
    public const int PctTvChangeFieldNumber = 352;
    private float pctTvChange_;
    /// <summary>
    /// Option Avg TVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.tVol/opr.tVolPr)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PctTvChange {
      get { return pctTvChange_; }
      set {
        pctTvChange_ = value;
      }
    }

    /// <summary>Field number for the "pct_tv_vega" field.</summary>
    public const int PctTvVegaFieldNumber = 355;
    private float pctTvVega_;
    /// <summary>
    /// Option Avg TVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PctTvVega {
      get { return pctTvVega_; }
      set {
        pctTvVega_ = value;
      }
    }

    /// <summary>Field number for the "fut_width_mny" field.</summary>
    public const int FutWidthMnyFieldNumber = 358;
    private float futWidthMny_;
    /// <summary>
    /// Future Market Width Value;=sum[0.5 * abs(fcCurPosM) * (fpr.futAsk - fpr.futBid)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutWidthMny {
      get { return futWidthMny_; }
      set {
        futWidthMny_ = value;
      }
    }

    /// <summary>Field number for the "opt_width_mny" field.</summary>
    public const int OptWidthMnyFieldNumber = 361;
    private float optWidthMny_;
    /// <summary>
    /// Option Market Width Value;=sum[0.5 * abs(shCurPosM) * (opr.optAsk - opr.optBid)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptWidthMny {
      get { return optWidthMny_; }
      set {
        optWidthMny_ = value;
      }
    }

    /// <summary>Field number for the "day_dDelta" field.</summary>
    public const int DayDDeltaFieldNumber = 364;
    private float dayDDelta_;
    /// <summary>
    /// Day $Delta (bot or sld;all sources) today;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayDDelta {
      get { return dayDDelta_; }
      set {
        dayDDelta_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 367;
    private float delta_;
    /// <summary>
    /// Aggregate Position Delta;=sum[shCurPos] + sum[fcCurPosM] + sum[shCurPosM * opr.de] + sum[other.delta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "ddelta" field.</summary>
    public const int DdeltaFieldNumber = 370;
    private float ddelta_;
    /// <summary>
    /// Aggregate Position $Delta (Delta * DDMult)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddelta {
      get { return ddelta_; }
      set {
        ddelta_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 373;
    private float deDecay_;
    /// <summary>
    /// Aggregate Position DeltaDecay;=sum[shCurPosM * opr.deDecay] + sum[other.deDecay]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "dd_decay" field.</summary>
    public const int DdDecayFieldNumber = 376;
    private float ddDecay_;
    /// <summary>
    /// Aggregate Position $DeltaDecay (DeltaDecay * DDMult) [change in $delta when one trading day (1.0/252.0) is taken out of option pricing]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdDecay {
      get { return ddDecay_; }
      set {
        ddDecay_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 379;
    private float gamma_;
    /// <summary>
    /// Aggregate Position Gamma;=sum[shCurPosM * opr.ga] + sum[other.gamma]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "d_gamma" field.</summary>
    public const int DGammaFieldNumber = 382;
    private float dGamma_;
    /// <summary>
    /// Aggregate Position $Gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DGamma {
      get { return dGamma_; }
      set {
        dGamma_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 385;
    private float theta_;
    /// <summary>
    /// Aggregate Position Theta;=sum[shCurPosM * opr.th] + sum[other.theta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 388;
    private float rho_;
    /// <summary>
    /// Aggregate Position Rho;=sum[shCurPosM * opr.rh] + sum[other.rho]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 391;
    private float vega_;
    /// <summary>
    /// Aggregate Position Vega;=sum[shCurPosM * opr.ve] + sum[other.vega]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "t_vega" field.</summary>
    public const int TVegaFieldNumber = 394;
    private float tVega_;
    /// <summary>
    /// Aggregate Position Time Weight Vega;=sum[shCurPosM * opr.ve / sqrt(max(0.1, opr.years * 4))]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVega {
      get { return tVega_; }
      set {
        tVega_ = value;
      }
    }

    /// <summary>Field number for the "w_vega" field.</summary>
    public const int WVegaFieldNumber = 397;
    private float wVega_;
    /// <summary>
    /// Aggregate Position Vol Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WVega {
      get { return wVega_; }
      set {
        wVega_ = value;
      }
    }

    /// <summary>Field number for the "wt_vega" field.</summary>
    public const int WtVegaFieldNumber = 400;
    private float wtVega_;
    /// <summary>
    /// Aggregate Position Vol Time Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve / sqrt(max(0.1, opr.years * 4))]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVega {
      get { return wtVega_; }
      set {
        wtVega_ = value;
      }
    }

    /// <summary>Field number for the "ivol_ve" field.</summary>
    public const int IvolVeFieldNumber = 403;
    private float ivolVe_;
    /// <summary>
    /// Aggregate Position Avg Vol Numerator (vega weighted) (avg = ivolVe / avega);=sum[abs(shCurPosM) * opr.iVol * opr.ve]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolVe {
      get { return ivolVe_; }
      set {
        ivolVe_ = value;
      }
    }

    /// <summary>Field number for the "volga" field.</summary>
    public const int VolgaFieldNumber = 406;
    private float volga_;
    /// <summary>
    /// Aggregate Position Volga;=sum[shCurPosM * opr.vo] + sum[other.volga]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volga {
      get { return volga_; }
      set {
        volga_ = value;
      }
    }

    /// <summary>Field number for the "vanna" field.</summary>
    public const int VannaFieldNumber = 409;
    private float vanna_;
    /// <summary>
    /// Aggregate Position Vanna;=sum[shCurPosM * opr.va] + sum[other.vanna]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vanna {
      get { return vanna_; }
      set {
        vanna_ = value;
      }
    }

    /// <summary>Field number for the "slope" field.</summary>
    public const int SlopeFieldNumber = 412;
    private float slope_;
    /// <summary>
    /// Aggregate Position VegaDelta (uPrc/Vol correlation factor);=sum[shCurPosM * opr.sl * opr.ve] + sum[other.slope]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Slope {
      get { return slope_; }
      set {
        slope_ = value;
      }
    }

    /// <summary>Field number for the "avega" field.</summary>
    public const int AvegaFieldNumber = 415;
    private float avega_;
    /// <summary>
    /// Aggregate Postion Abs Vega;=sum[abs(shCurPosM ) * opr.ve]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Avega {
      get { return avega_; }
      set {
        avega_ = value;
      }
    }

    /// <summary>Field number for the "atheta" field.</summary>
    public const int AthetaFieldNumber = 418;
    private float atheta_;
    /// <summary>
    /// Aggregate Postion Abs Theta;= sum[abs(shCurPosM) * opr.th]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Atheta {
      get { return atheta_; }
      set {
        atheta_ = value;
      }
    }

    /// <summary>Field number for the "hedge_gamma" field.</summary>
    public const int HedgeGammaFieldNumber = 421;
    private float hedgeGamma_;
    /// <summary>
    /// Aggregate Postion Hedge Gamma (either iVol or tVol based;can go binary);=sum[shCurPos * opr.hedgeGa]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeGamma {
      get { return hedgeGamma_; }
      set {
        hedgeGamma_ = value;
      }
    }

    /// <summary>Field number for the "hedge_dGamma" field.</summary>
    public const int HedgeDGammaFieldNumber = 424;
    private float hedgeDGamma_;
    /// <summary>
    /// Aggregate Postion Hedge $Gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeDGamma {
      get { return hedgeDGamma_; }
      set {
        hedgeDGamma_ = value;
      }
    }

    /// <summary>Field number for the "prem_ov_par" field.</summary>
    public const int PremOvParFieldNumber = 427;
    private float premOvPar_;
    /// <summary>
    /// Aggregate Position Premium Over Parity;=sum[shCurPosM *  max(0, opr.optVolMark - opr.loBound)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PremOvPar {
      get { return premOvPar_; }
      set {
        premOvPar_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dd" field.</summary>
    public const int WtVeDdFieldNumber = 430;
    private float wtVeDd_;
    /// <summary>
    /// Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde &lt; -0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDd {
      get { return wtVeDd_; }
      set {
        wtVeDd_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dn" field.</summary>
    public const int WtVeDnFieldNumber = 433;
    private float wtVeDn_;
    /// <summary>
    /// Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 &lt;= opr.xde &lt; -0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDn {
      get { return wtVeDn_; }
      set {
        wtVeDn_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_at" field.</summary>
    public const int WtVeAtFieldNumber = 436;
    private float wtVeAt_;
    /// <summary>
    /// Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) &lt;= 0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeAt {
      get { return wtVeAt_; }
      set {
        wtVeAt_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_up" field.</summary>
    public const int WtVeUpFieldNumber = 439;
    private float wtVeUp_;
    /// <summary>
    /// Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 &lt; opr.xde &lt;= +0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeUp {
      get { return wtVeUp_; }
      set {
        wtVeUp_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_du" field.</summary>
    public const int WtVeDuFieldNumber = 442;
    private float wtVeDu_;
    /// <summary>
    /// Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 &lt; opr.xde
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDu {
      get { return wtVeDu_; }
      set {
        wtVeDu_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m1" field.</summary>
    public const int WtVeM1FieldNumber = 445;
    private float wtVeM1_;
    /// <summary>
    /// Aggregate M1 Time Weighted Vega; =sum[wtVega] if days &lt; 10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM1 {
      get { return wtVeM1_; }
      set {
        wtVeM1_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m2" field.</summary>
    public const int WtVeM2FieldNumber = 448;
    private float wtVeM2_;
    /// <summary>
    /// Aggregate M2 Time Weighted Vega; =sum[wtVega] if 10 &lt; days &lt; 25
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM2 {
      get { return wtVeM2_; }
      set {
        wtVeM2_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m3" field.</summary>
    public const int WtVeM3FieldNumber = 451;
    private float wtVeM3_;
    /// <summary>
    /// Aggregate M3 Time Weighted Vega; =sum[wtVega] if 25 &lt; days &lt; 65
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM3 {
      get { return wtVeM3_; }
      set {
        wtVeM3_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m4" field.</summary>
    public const int WtVeM4FieldNumber = 454;
    private float wtVeM4_;
    /// <summary>
    /// Aggregate M4 Time Weighted Vega; =sum[wtVega] if 65 &lt; days &lt; 130
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM4 {
      get { return wtVeM4_; }
      set {
        wtVeM4_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m5" field.</summary>
    public const int WtVeM5FieldNumber = 457;
    private float wtVeM5_;
    /// <summary>
    /// Aggregate M5 Time Weighted Vega; =sum[wtVega] if 130 &lt; days
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM5 {
      get { return wtVeM5_; }
      set {
        wtVeM5_ = value;
      }
    }

    /// <summary>Field number for the "pin_xX" field.</summary>
    public const int PinXXFieldNumber = 460;
    private float pinXX_;
    /// <summary>
    /// Pin Strike nearest to current uPrc (zero = none) (only exists near expirations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PinXX {
      get { return pinXX_; }
      set {
        pinXX_ = value;
      }
    }

    /// <summary>Field number for the "opn_de_below" field.</summary>
    public const int OpnDeBelowFieldNumber = 463;
    private float opnDeBelow_;
    /// <summary>
    /// Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc &lt; pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnDeBelow {
      get { return opnDeBelow_; }
      set {
        opnDeBelow_ = value;
      }
    }

    /// <summary>Field number for the "opn_de_above" field.</summary>
    public const int OpnDeAboveFieldNumber = 466;
    private float opnDeAbove_;
    /// <summary>
    /// Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnDeAbove {
      get { return opnDeAbove_; }
      set {
        opnDeAbove_ = value;
      }
    }

    /// <summary>Field number for the "opn_dDe_below" field.</summary>
    public const int OpnDDeBelowFieldNumber = 469;
    private float opnDDeBelow_;
    /// <summary>
    /// Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc &lt; pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnDDeBelow {
      get { return opnDDeBelow_; }
      set {
        opnDDeBelow_ = value;
      }
    }

    /// <summary>Field number for the "opn_dDe_above" field.</summary>
    public const int OpnDDeAboveFieldNumber = 472;
    private float opnDDeAbove_;
    /// <summary>
    /// Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnDDeAbove {
      get { return opnDDeAbove_; }
      set {
        opnDDeAbove_ = value;
      }
    }

    /// <summary>Field number for the "pos_de_below" field.</summary>
    public const int PosDeBelowFieldNumber = 475;
    private float posDeBelow_;
    /// <summary>
    /// Aggregate Position Hedge Delta (Current Position) if liveUPrc &lt; pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDeBelow {
      get { return posDeBelow_; }
      set {
        posDeBelow_ = value;
      }
    }

    /// <summary>Field number for the "pos_de_above" field.</summary>
    public const int PosDeAboveFieldNumber = 478;
    private float posDeAbove_;
    /// <summary>
    /// Aggregate Position Hedge Delta (Current Position) if liveUPrc > pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDeAbove {
      get { return posDeAbove_; }
      set {
        posDeAbove_ = value;
      }
    }

    /// <summary>Field number for the "pos_dDe_below" field.</summary>
    public const int PosDDeBelowFieldNumber = 481;
    private float posDDeBelow_;
    /// <summary>
    /// Aggregate Position Hedge Delta (Current Position) if liveUPrc &lt; pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDDeBelow {
      get { return posDDeBelow_; }
      set {
        posDDeBelow_ = value;
      }
    }

    /// <summary>Field number for the "pos_dDe_above" field.</summary>
    public const int PosDDeAboveFieldNumber = 484;
    private float posDDeAbove_;
    /// <summary>
    /// Aggregate Position Hedge Delta (Current Position) if liveUPrc > pinXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDDeAbove {
      get { return posDDeAbove_; }
      set {
        posDDeAbove_ = value;
      }
    }

    /// <summary>Field number for the "pos_hedge_delta_ex" field.</summary>
    public const int PosHedgeDeltaExFieldNumber = 487;
    private float posHedgeDeltaEx_;
    /// <summary>
    /// Aggregate Position Hedge Delta (Current Position) if exDate != today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHedgeDeltaEx {
      get { return posHedgeDeltaEx_; }
      set {
        posHedgeDeltaEx_ = value;
      }
    }

    /// <summary>Field number for the "pos_hedge_dDelta_ex" field.</summary>
    public const int PosHedgeDDeltaExFieldNumber = 490;
    private float posHedgeDDeltaEx_;
    /// <summary>
    /// Aggregate Position ($) Hedge Delta (Current Position) if exDate != today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHedgeDDeltaEx {
      get { return posHedgeDDeltaEx_; }
      set {
        posHedgeDDeltaEx_ = value;
      }
    }

    /// <summary>Field number for the "t_edge" field.</summary>
    public const int TEdgeFieldNumber = 493;
    private float tEdge_;
    /// <summary>
    /// Aggregate $ Theo Edge;=sum[shNetPosM * (opr.tOpx - opr.optVolMark)] if opr.tVol > 0.01 and opr.tOpx > 0.0 and opr.optVolMark > 0.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdge {
      get { return tEdge_; }
      set {
        tEdge_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_mult" field.</summary>
    public const int TEdgeMultFieldNumber = 496;
    private float tEdgeMult_;
    /// <summary>
    /// Aggregate Abs Net Contracts (Rev/Conv contracts removed);= sum[abs(shNetPosM)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMult {
      get { return tEdgeMult_; }
      set {
        tEdgeMult_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_pr" field.</summary>
    public const int TEdgePrFieldNumber = 499;
    private float tEdgePr_;
    /// <summary>
    /// Prior Day $ Theo Edge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgePr {
      get { return tEdgePr_; }
      set {
        tEdgePr_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_mult_pr" field.</summary>
    public const int TEdgeMultPrFieldNumber = 502;
    private float tEdgeMultPr_;
    /// <summary>
    /// Prior Day Aggregate Abs Net Contracts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMultPr {
      get { return tEdgeMultPr_; }
      set {
        tEdgeMultPr_ = value;
      }
    }

    /// <summary>Field number for the "num_tVol_errors" field.</summary>
    public const int NumTVolErrorsFieldNumber = 505;
    private int numTVolErrors_;
    /// <summary>
    /// number of opr.tErr != 0 or opr.tVol &lt; 0.01
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTVolErrors {
      get { return numTVolErrors_; }
      set {
        numTVolErrors_ = value;
      }
    }

    /// <summary>Field number for the "pair_pnl" field.</summary>
    public const int PairPnlFieldNumber = 508;
    private float pairPnl_;
    /// <summary>
    /// Aggregate Dn Pair Pnl;=sum[shNetClrM * (opr.optVolMark - opr.optOpnVolMark - opr.hedgeDePr * (opr.uMark - opr.uOpnMark))]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PairPnl {
      get { return pairPnl_; }
      set {
        pairPnl_ = value;
      }
    }

    /// <summary>Field number for the "pos_tEdge_wV" field.</summary>
    public const int PosTEdgeWVFieldNumber = 511;
    private float posTEdgeWV_;
    /// <summary>
    /// Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) >= 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTEdgeWV {
      get { return posTEdgeWV_; }
      set {
        posTEdgeWV_ = value;
      }
    }

    /// <summary>Field number for the "neg_tEdge_wV" field.</summary>
    public const int NegTEdgeWVFieldNumber = 514;
    private float negTEdgeWV_;
    /// <summary>
    /// Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) &lt; 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NegTEdgeWV {
      get { return negTEdgeWV_; }
      set {
        negTEdgeWV_ = value;
      }
    }

    /// <summary>Field number for the "bad_tEdge_wV" field.</summary>
    public const int BadTEdgeWVFieldNumber = 517;
    private float badTEdgeWV_;
    /// <summary>
    /// Aggregate Vol Weighted Vega (wvega) where (opr.tOpx = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BadTEdgeWV {
      get { return badTEdgeWV_; }
      set {
        badTEdgeWV_ = value;
      }
    }

    /// <summary>Field number for the "pos_tEdge_pnl" field.</summary>
    public const int PosTEdgePnlFieldNumber = 520;
    private float posTEdgePnl_;
    /// <summary>
    /// Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) >= 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTEdgePnl {
      get { return posTEdgePnl_; }
      set {
        posTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "neg_tEdge_pnl" field.</summary>
    public const int NegTEdgePnlFieldNumber = 523;
    private float negTEdgePnl_;
    /// <summary>
    /// Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) &lt; 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NegTEdgePnl {
      get { return negTEdgePnl_; }
      set {
        negTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "bad_tEdge_pnl" field.</summary>
    public const int BadTEdgePnlFieldNumber = 526;
    private float badTEdgePnl_;
    /// <summary>
    /// Aggregate Dn Pair Pnl where (opr.tOpxPr = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BadTEdgePnl {
      get { return badTEdgePnl_; }
      set {
        badTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "span01" field.</summary>
    public const int Span01FieldNumber = 529;
    private float span01_;
    /// <summary>
    /// span1: uPrc=unch, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span01 {
      get { return span01_; }
      set {
        span01_ = value;
      }
    }

    /// <summary>Field number for the "span02" field.</summary>
    public const int Span02FieldNumber = 532;
    private float span02_;
    /// <summary>
    /// span2: uPrc=unch, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span02 {
      get { return span02_; }
      set {
        span02_ = value;
      }
    }

    /// <summary>Field number for the "span03" field.</summary>
    public const int Span03FieldNumber = 535;
    private float span03_;
    /// <summary>
    /// span3: uPrc=+33.33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span03 {
      get { return span03_; }
      set {
        span03_ = value;
      }
    }

    /// <summary>Field number for the "span04" field.</summary>
    public const int Span04FieldNumber = 538;
    private float span04_;
    /// <summary>
    /// span4: uPrc=+33.33%, vol=dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span04 {
      get { return span04_; }
      set {
        span04_ = value;
      }
    }

    /// <summary>Field number for the "span05" field.</summary>
    public const int Span05FieldNumber = 541;
    private float span05_;
    /// <summary>
    /// span5: uPrc=-33.33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span05 {
      get { return span05_; }
      set {
        span05_ = value;
      }
    }

    /// <summary>Field number for the "span06" field.</summary>
    public const int Span06FieldNumber = 544;
    private float span06_;
    /// <summary>
    /// span6: uPrc=-33.33%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span06 {
      get { return span06_; }
      set {
        span06_ = value;
      }
    }

    /// <summary>Field number for the "span07" field.</summary>
    public const int Span07FieldNumber = 547;
    private float span07_;
    /// <summary>
    /// span7: uPrc=+66.67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span07 {
      get { return span07_; }
      set {
        span07_ = value;
      }
    }

    /// <summary>Field number for the "span08" field.</summary>
    public const int Span08FieldNumber = 550;
    private float span08_;
    /// <summary>
    /// span8: uPrc=+66.67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span08 {
      get { return span08_; }
      set {
        span08_ = value;
      }
    }

    /// <summary>Field number for the "span09" field.</summary>
    public const int Span09FieldNumber = 553;
    private float span09_;
    /// <summary>
    /// span9: uPrc=-66.67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span09 {
      get { return span09_; }
      set {
        span09_ = value;
      }
    }

    /// <summary>Field number for the "span10" field.</summary>
    public const int Span10FieldNumber = 556;
    private float span10_;
    /// <summary>
    /// span10: uPrc=-66.67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span10 {
      get { return span10_; }
      set {
        span10_ = value;
      }
    }

    /// <summary>Field number for the "span11" field.</summary>
    public const int Span11FieldNumber = 559;
    private float span11_;
    /// <summary>
    /// span11: uPrc=+100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span11 {
      get { return span11_; }
      set {
        span11_ = value;
      }
    }

    /// <summary>Field number for the "span12" field.</summary>
    public const int Span12FieldNumber = 562;
    private float span12_;
    /// <summary>
    /// span12: uPrc=+100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span12 {
      get { return span12_; }
      set {
        span12_ = value;
      }
    }

    /// <summary>Field number for the "span13" field.</summary>
    public const int Span13FieldNumber = 565;
    private float span13_;
    /// <summary>
    /// span13: uPrc=-100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span13 {
      get { return span13_; }
      set {
        span13_ = value;
      }
    }

    /// <summary>Field number for the "span14" field.</summary>
    public const int Span14FieldNumber = 568;
    private float span14_;
    /// <summary>
    /// span14: uPrc=-100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span14 {
      get { return span14_; }
      set {
        span14_ = value;
      }
    }

    /// <summary>Field number for the "span15" field.</summary>
    public const int Span15FieldNumber = 571;
    private float span15_;
    /// <summary>
    /// span15: uPrc=+300%; price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span15 {
      get { return span15_; }
      set {
        span15_ = value;
      }
    }

    /// <summary>Field number for the "span16" field.</summary>
    public const int Span16FieldNumber = 574;
    private float span16_;
    /// <summary>
    /// span16: uPrc=-300%, price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span16 {
      get { return span16_; }
      set {
        span16_ = value;
      }
    }

    /// <summary>Field number for the "fut_liq_risk" field.</summary>
    public const int FutLiqRiskFieldNumber = 577;
    private float futLiqRisk_;
    /// <summary>
    /// Aggregate Future Liquidation Risk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutLiqRisk {
      get { return futLiqRisk_; }
      set {
        futLiqRisk_ = value;
      }
    }

    /// <summary>Field number for the "opt_liq_risk" field.</summary>
    public const int OptLiqRiskFieldNumber = 580;
    private float optLiqRisk_;
    /// <summary>
    /// Aggregate Option Liquidation Risk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptLiqRisk {
      get { return optLiqRisk_; }
      set {
        optLiqRisk_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_c0" field.</summary>
    public const int FcBotC0FieldNumber = 583;
    private int fcBotC0_;
    /// <summary>
    /// hypothetical future contracts bot (~ 1 minute intervals)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotC0 {
      get { return fcBotC0_; }
      set {
        fcBotC0_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_c0" field.</summary>
    public const int FcSldC0FieldNumber = 586;
    private int fcSldC0_;
    /// <summary>
    /// hypothetical future contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldC0 {
      get { return fcSldC0_; }
      set {
        fcSldC0_ = value;
      }
    }

    /// <summary>Field number for the "fc_mny_c0" field.</summary>
    public const int FcMnyC0FieldNumber = 589;
    private float fcMnyC0_;
    /// <summary>
    /// hypothetical money
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FcMnyC0 {
      get { return fcMnyC0_; }
      set {
        fcMnyC0_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot_c1" field.</summary>
    public const int FcBotC1FieldNumber = 592;
    private int fcBotC1_;
    /// <summary>
    /// hypothetical future contracts bot (~ 10 minute intervals)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBotC1 {
      get { return fcBotC1_; }
      set {
        fcBotC1_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld_c1" field.</summary>
    public const int FcSldC1FieldNumber = 595;
    private int fcSldC1_;
    /// <summary>
    /// hypothetical future contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSldC1 {
      get { return fcSldC1_; }
      set {
        fcSldC1_ = value;
      }
    }

    /// <summary>Field number for the "fc_mny_c1" field.</summary>
    public const int FcMnyC1FieldNumber = 598;
    private float fcMnyC1_;
    /// <summary>
    /// hypothetical money
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FcMnyC1 {
      get { return fcMnyC1_; }
      set {
        fcMnyC1_ = value;
      }
    }

    /// <summary>Field number for the "fut_margin" field.</summary>
    public const int FutMarginFieldNumber = 601;
    private float futMargin_;
    /// <summary>
    /// Aggregate Future Risk Margin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutMargin {
      get { return futMargin_; }
      set {
        futMargin_ = value;
      }
    }

    /// <summary>Field number for the "num_fut_errors" field.</summary>
    public const int NumFutErrorsFieldNumber = 604;
    private int numFutErrors_;
    /// <summary>
    /// number of futures positions with a computation error (should be zero)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumFutErrors {
      get { return numFutErrors_; }
      set {
        numFutErrors_ = value;
      }
    }

    /// <summary>Field number for the "num_opt_errors" field.</summary>
    public const int NumOptErrorsFieldNumber = 607;
    private int numOptErrors_;
    /// <summary>
    /// number of options positions with a computation error (should be zero)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOptErrors {
      get { return numOptErrors_; }
      set {
        numOptErrors_ = value;
      }
    }

    /// <summary>Field number for the "update_source" field.</summary>
    public const int UpdateSourceFieldNumber = 610;
    private global::Spiderrock.Protobuf.R5Source updateSource_ = global::Spiderrock.Protobuf.R5Source.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.R5Source UpdateSource {
      get { return updateSource_; }
      set {
        updateSource_ = value;
      }
    }

    /// <summary>Field number for the "fut_mark_flag" field.</summary>
    public const int FutMarkFlagFieldNumber = 613;
    private global::Spiderrock.Protobuf.MktErrFlag futMarkFlag_ = global::Spiderrock.Protobuf.MktErrFlag.Unspecified;
    /// <summary>
    /// Future position error flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktErrFlag FutMarkFlag {
      get { return futMarkFlag_; }
      set {
        futMarkFlag_ = value;
      }
    }

    /// <summary>Field number for the "opt_mark_flag" field.</summary>
    public const int OptMarkFlagFieldNumber = 616;
    private global::Spiderrock.Protobuf.MktErrFlag optMarkFlag_ = global::Spiderrock.Protobuf.MktErrFlag.Unspecified;
    /// <summary>
    /// Option position error flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktErrFlag OptMarkFlag {
      get { return optMarkFlag_; }
      set {
        optMarkFlag_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 619;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FutureRiskSummaryV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FutureRiskSummaryV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UMark, other.UMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UOpnMark, other.UOpnMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LnDDelta, other.LnDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShDDelta, other.ShDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutMktValueMid, other.FutMktValueMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptMktValueMid, other.OptMktValueMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptMktValueVol, other.OptMktValueVol)) return false;
      if (FcAbsCurPos != other.FcAbsCurPos) return false;
      if (FcAbsOpnClr != other.FcAbsOpnClr) return false;
      if (FcAbsOpnPrv != other.FcAbsOpnPrv) return false;
      if (FcAbsOpnPos != other.FcAbsOpnPos) return false;
      if (FcAbsOpnBrk != other.FcAbsOpnBrk) return false;
      if (FcNetCurPos != other.FcNetCurPos) return false;
      if (FcBot != other.FcBot) return false;
      if (FcSld != other.FcSld) return false;
      if (FcBotHdg != other.FcBotHdg) return false;
      if (FcSldHdg != other.FcSldHdg) return false;
      if (FcBotTrh != other.FcBotTrh) return false;
      if (FcSldTrh != other.FcSldTrh) return false;
      if (FcBotOpn != other.FcBotOpn) return false;
      if (FcSldOpn != other.FcSldOpn) return false;
      if (FcBotTrd != other.FcBotTrd) return false;
      if (FcSldTrd != other.FcSldTrd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FcMnyBot, other.FcMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FcMnySld, other.FcMnySld)) return false;
      if (!object.Equals(MaxFutDttm, other.MaxFutDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FcPnlMid, other.FcPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FcPnlClr, other.FcPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FcPnlDay, other.FcPnlDay)) return false;
      if (OpCnAbsCurPos != other.OpCnAbsCurPos) return false;
      if (OpCnAbsOpnClr != other.OpCnAbsOpnClr) return false;
      if (OpCnAbsOpnPrv != other.OpCnAbsOpnPrv) return false;
      if (OpCnAbsOpnPos != other.OpCnAbsOpnPos) return false;
      if (OpCnAbsOpnBrk != other.OpCnAbsOpnBrk) return false;
      if (OpCnPosCall != other.OpCnPosCall) return false;
      if (OpCnPosPut != other.OpCnPosPut) return false;
      if (OpCnAbsPair != other.OpCnAbsPair) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpCnAbsAtmEquiv, other.OpCnAbsAtmEquiv)) return false;
      if (OpCnBot != other.OpCnBot) return false;
      if (OpCnSld != other.OpCnSld) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpMnyBot, other.OpMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpMnySld, other.OpMnySld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPremBot, other.OpPremBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPremSld, other.OpPremSld)) return false;
      if (!object.Equals(MaxOptDttm, other.MaxOptDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpPnlVol, other.OpPnlVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpPnlMid, other.OpPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpPnlClr, other.OpPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPnlBrk, other.OpPnlBrk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPnlDay, other.OpPnlDay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDnPnlDay, other.OpDnPnlDay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayVega, other.OpDayVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWVega, other.OpDayWVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTVega, other.OpDayTVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWtVega, other.OpDayWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTheta, other.OpDayTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayDelta, other.OpDayDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpTrdDelta, other.OpTrdDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnDelta, other.OpnDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContHedgePnl, other.ContHedgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContHedgePnl1, other.ContHedgePnl1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeOpened, other.OpEdgeOpened)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeClosed, other.OpEdgeClosed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDn, other.PnlDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDe, other.PnlDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSl, other.PnlSl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlGa, other.PnlGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTh, other.PnlTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVe, other.PnlVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVo, other.PnlVo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVa, other.PnlVa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlErr, other.PnlErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlRate, other.PnlRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSDiv, other.PnlSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDDiv, other.PnlDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTe, other.PnlTe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PctIvChange, other.PctIvChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PctIvVega, other.PctIvVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PctTvChange, other.PctTvChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PctTvVega, other.PctTvVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutWidthMny, other.FutWidthMny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptWidthMny, other.OptWidthMny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayDDelta, other.DayDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddelta, other.Ddelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdDecay, other.DdDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DGamma, other.DGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVega, other.TVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WVega, other.WVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVega, other.WtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolVe, other.IvolVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volga, other.Volga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vanna, other.Vanna)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Slope, other.Slope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Avega, other.Avega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Atheta, other.Atheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeGamma, other.HedgeGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeDGamma, other.HedgeDGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PremOvPar, other.PremOvPar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDd, other.WtVeDd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDn, other.WtVeDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeAt, other.WtVeAt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeUp, other.WtVeUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDu, other.WtVeDu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM1, other.WtVeM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM2, other.WtVeM2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM3, other.WtVeM3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM4, other.WtVeM4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM5, other.WtVeM5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PinXX, other.PinXX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnDeBelow, other.OpnDeBelow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnDeAbove, other.OpnDeAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnDDeBelow, other.OpnDDeBelow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnDDeAbove, other.OpnDDeAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDeBelow, other.PosDeBelow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDeAbove, other.PosDeAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDDeBelow, other.PosDDeBelow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDDeAbove, other.PosDDeAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHedgeDeltaEx, other.PosHedgeDeltaEx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHedgeDDeltaEx, other.PosHedgeDDeltaEx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdge, other.TEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMult, other.TEdgeMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgePr, other.TEdgePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMultPr, other.TEdgeMultPr)) return false;
      if (NumTVolErrors != other.NumTVolErrors) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PairPnl, other.PairPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTEdgeWV, other.PosTEdgeWV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegTEdgeWV, other.NegTEdgeWV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BadTEdgeWV, other.BadTEdgeWV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTEdgePnl, other.PosTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegTEdgePnl, other.NegTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BadTEdgePnl, other.BadTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span01, other.Span01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span02, other.Span02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span03, other.Span03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span04, other.Span04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span05, other.Span05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span06, other.Span06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span07, other.Span07)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span08, other.Span08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span09, other.Span09)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span10, other.Span10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span11, other.Span11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span12, other.Span12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span13, other.Span13)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span14, other.Span14)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span15, other.Span15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span16, other.Span16)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutLiqRisk, other.FutLiqRisk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptLiqRisk, other.OptLiqRisk)) return false;
      if (FcBotC0 != other.FcBotC0) return false;
      if (FcSldC0 != other.FcSldC0) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FcMnyC0, other.FcMnyC0)) return false;
      if (FcBotC1 != other.FcBotC1) return false;
      if (FcSldC1 != other.FcSldC1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FcMnyC1, other.FcMnyC1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutMargin, other.FutMargin)) return false;
      if (NumFutErrors != other.NumFutErrors) return false;
      if (NumOptErrors != other.NumOptErrors) return false;
      if (UpdateSource != other.UpdateSource) return false;
      if (FutMarkFlag != other.FutMarkFlag) return false;
      if (OptMarkFlag != other.OptMarkFlag) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UMark);
      if (UOpnMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UOpnMark);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (LnDDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LnDDelta);
      if (ShDDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShDDelta);
      if (FutMktValueMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutMktValueMid);
      if (OptMktValueMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptMktValueMid);
      if (OptMktValueVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptMktValueVol);
      if (FcAbsCurPos != 0) hash ^= FcAbsCurPos.GetHashCode();
      if (FcAbsOpnClr != 0) hash ^= FcAbsOpnClr.GetHashCode();
      if (FcAbsOpnPrv != 0) hash ^= FcAbsOpnPrv.GetHashCode();
      if (FcAbsOpnPos != 0) hash ^= FcAbsOpnPos.GetHashCode();
      if (FcAbsOpnBrk != 0) hash ^= FcAbsOpnBrk.GetHashCode();
      if (FcNetCurPos != 0) hash ^= FcNetCurPos.GetHashCode();
      if (FcBot != 0) hash ^= FcBot.GetHashCode();
      if (FcSld != 0) hash ^= FcSld.GetHashCode();
      if (FcBotHdg != 0) hash ^= FcBotHdg.GetHashCode();
      if (FcSldHdg != 0) hash ^= FcSldHdg.GetHashCode();
      if (FcBotTrh != 0) hash ^= FcBotTrh.GetHashCode();
      if (FcSldTrh != 0) hash ^= FcSldTrh.GetHashCode();
      if (FcBotOpn != 0) hash ^= FcBotOpn.GetHashCode();
      if (FcSldOpn != 0) hash ^= FcSldOpn.GetHashCode();
      if (FcBotTrd != 0) hash ^= FcBotTrd.GetHashCode();
      if (FcSldTrd != 0) hash ^= FcSldTrd.GetHashCode();
      if (FcMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FcMnyBot);
      if (FcMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FcMnySld);
      if (maxFutDttm_ != null) hash ^= MaxFutDttm.GetHashCode();
      if (FcPnlMid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FcPnlMid);
      if (FcPnlClr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FcPnlClr);
      if (FcPnlDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FcPnlDay);
      if (OpCnAbsCurPos != 0) hash ^= OpCnAbsCurPos.GetHashCode();
      if (OpCnAbsOpnClr != 0) hash ^= OpCnAbsOpnClr.GetHashCode();
      if (OpCnAbsOpnPrv != 0) hash ^= OpCnAbsOpnPrv.GetHashCode();
      if (OpCnAbsOpnPos != 0) hash ^= OpCnAbsOpnPos.GetHashCode();
      if (OpCnAbsOpnBrk != 0) hash ^= OpCnAbsOpnBrk.GetHashCode();
      if (OpCnPosCall != 0) hash ^= OpCnPosCall.GetHashCode();
      if (OpCnPosPut != 0) hash ^= OpCnPosPut.GetHashCode();
      if (OpCnAbsPair != 0) hash ^= OpCnAbsPair.GetHashCode();
      if (OpCnAbsAtmEquiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpCnAbsAtmEquiv);
      if (OpCnBot != 0) hash ^= OpCnBot.GetHashCode();
      if (OpCnSld != 0) hash ^= OpCnSld.GetHashCode();
      if (OpMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpMnyBot);
      if (OpMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpMnySld);
      if (OpPremBot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPremBot);
      if (OpPremSld != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPremSld);
      if (maxOptDttm_ != null) hash ^= MaxOptDttm.GetHashCode();
      if (OpPnlVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpPnlVol);
      if (OpPnlMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpPnlMid);
      if (OpPnlClr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpPnlClr);
      if (OpPnlBrk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPnlBrk);
      if (OpPnlDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPnlDay);
      if (OpDnPnlDay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDnPnlDay);
      if (OpDayVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayVega);
      if (OpDayWVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWVega);
      if (OpDayTVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTVega);
      if (OpDayWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWtVega);
      if (OpDayTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTheta);
      if (OpDayDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayDelta);
      if (OpTrdDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpTrdDelta);
      if (OpnDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnDelta);
      if (ContHedgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContHedgePnl);
      if (ContHedgePnl1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContHedgePnl1);
      if (OpEdgeOpened != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeOpened);
      if (OpEdgeClosed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeClosed);
      if (PnlDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDn);
      if (PnlDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDe);
      if (PnlSl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSl);
      if (PnlGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlGa);
      if (PnlTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTh);
      if (PnlVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVe);
      if (PnlVo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVo);
      if (PnlVa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVa);
      if (PnlErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlErr);
      if (PnlRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlRate);
      if (PnlSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSDiv);
      if (PnlDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDDiv);
      if (PnlTe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTe);
      if (PctIvChange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PctIvChange);
      if (PctIvVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PctIvVega);
      if (PctTvChange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PctTvChange);
      if (PctTvVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PctTvVega);
      if (FutWidthMny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutWidthMny);
      if (OptWidthMny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptWidthMny);
      if (DayDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayDDelta);
      if (Delta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delta);
      if (Ddelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddelta);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (DdDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdDecay);
      if (Gamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gamma);
      if (DGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DGamma);
      if (Theta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Theta);
      if (Rho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rho);
      if (Vega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega);
      if (TVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVega);
      if (WVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WVega);
      if (WtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVega);
      if (IvolVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolVe);
      if (Volga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volga);
      if (Vanna != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vanna);
      if (Slope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Slope);
      if (Avega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Avega);
      if (Atheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Atheta);
      if (HedgeGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeGamma);
      if (HedgeDGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeDGamma);
      if (PremOvPar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PremOvPar);
      if (WtVeDd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDd);
      if (WtVeDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDn);
      if (WtVeAt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeAt);
      if (WtVeUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeUp);
      if (WtVeDu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDu);
      if (WtVeM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM1);
      if (WtVeM2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM2);
      if (WtVeM3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM3);
      if (WtVeM4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM4);
      if (WtVeM5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM5);
      if (PinXX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PinXX);
      if (OpnDeBelow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnDeBelow);
      if (OpnDeAbove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnDeAbove);
      if (OpnDDeBelow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnDDeBelow);
      if (OpnDDeAbove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnDDeAbove);
      if (PosDeBelow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDeBelow);
      if (PosDeAbove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDeAbove);
      if (PosDDeBelow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDDeBelow);
      if (PosDDeAbove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDDeAbove);
      if (PosHedgeDeltaEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHedgeDeltaEx);
      if (PosHedgeDDeltaEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHedgeDDeltaEx);
      if (TEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdge);
      if (TEdgeMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMult);
      if (TEdgePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgePr);
      if (TEdgeMultPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMultPr);
      if (NumTVolErrors != 0) hash ^= NumTVolErrors.GetHashCode();
      if (PairPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PairPnl);
      if (PosTEdgeWV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTEdgeWV);
      if (NegTEdgeWV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegTEdgeWV);
      if (BadTEdgeWV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BadTEdgeWV);
      if (PosTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTEdgePnl);
      if (NegTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegTEdgePnl);
      if (BadTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BadTEdgePnl);
      if (Span01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span01);
      if (Span02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span02);
      if (Span03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span03);
      if (Span04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span04);
      if (Span05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span05);
      if (Span06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span06);
      if (Span07 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span07);
      if (Span08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span08);
      if (Span09 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span09);
      if (Span10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span10);
      if (Span11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span11);
      if (Span12 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span12);
      if (Span13 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span13);
      if (Span14 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span14);
      if (Span15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span15);
      if (Span16 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span16);
      if (FutLiqRisk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutLiqRisk);
      if (OptLiqRisk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptLiqRisk);
      if (FcBotC0 != 0) hash ^= FcBotC0.GetHashCode();
      if (FcSldC0 != 0) hash ^= FcSldC0.GetHashCode();
      if (FcMnyC0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FcMnyC0);
      if (FcBotC1 != 0) hash ^= FcBotC1.GetHashCode();
      if (FcSldC1 != 0) hash ^= FcSldC1.GetHashCode();
      if (FcMnyC1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FcMnyC1);
      if (FutMargin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutMargin);
      if (NumFutErrors != 0) hash ^= NumFutErrors.GetHashCode();
      if (NumOptErrors != 0) hash ^= NumOptErrors.GetHashCode();
      if (UpdateSource != global::Spiderrock.Protobuf.R5Source.Unspecified) hash ^= UpdateSource.GetHashCode();
      if (FutMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) hash ^= FutMarkFlag.GetHashCode();
      if (OptMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) hash ^= OptMarkFlag.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(UPrc);
      }
      if (UMark != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UMark);
      }
      if (UOpnMark != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UOpnMark);
      }
      if (Beta != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) BetaSource);
      }
      if (LnDDelta != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(LnDDelta);
      }
      if (ShDDelta != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(ShDDelta);
      }
      if (FutMktValueMid != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(FutMktValueMid);
      }
      if (OptMktValueMid != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(OptMktValueMid);
      }
      if (OptMktValueVol != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(OptMktValueVol);
      }
      if (FcAbsCurPos != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(FcAbsCurPos);
      }
      if (FcAbsOpnClr != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(FcAbsOpnClr);
      }
      if (FcAbsOpnPrv != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(FcAbsOpnPrv);
      }
      if (FcAbsOpnPos != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(FcAbsOpnPos);
      }
      if (FcAbsOpnBrk != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(FcAbsOpnBrk);
      }
      if (FcNetCurPos != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(FcNetCurPos);
      }
      if (FcBot != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(FcBot);
      }
      if (FcSld != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(FcSld);
      }
      if (FcBotHdg != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(FcBotHdg);
      }
      if (FcSldHdg != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(FcSldHdg);
      }
      if (FcBotTrh != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(FcBotTrh);
      }
      if (FcSldTrh != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(FcSldTrh);
      }
      if (FcBotOpn != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(FcBotOpn);
      }
      if (FcSldOpn != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(FcSldOpn);
      }
      if (FcBotTrd != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(FcBotTrd);
      }
      if (FcSldTrd != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(FcSldTrd);
      }
      if (FcMnyBot != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(FcMnyBot);
      }
      if (FcMnySld != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(FcMnySld);
      }
      if (maxFutDttm_ != null) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(MaxFutDttm);
      }
      if (FcPnlMid != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(FcPnlMid);
      }
      if (FcPnlClr != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(FcPnlClr);
      }
      if (FcPnlDay != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(FcPnlDay);
      }
      if (OpCnAbsCurPos != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OpCnAbsCurPos);
      }
      if (OpCnAbsOpnClr != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(OpCnAbsOpnClr);
      }
      if (OpCnAbsOpnPrv != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(OpCnAbsOpnPrv);
      }
      if (OpCnAbsOpnPos != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(OpCnAbsOpnPos);
      }
      if (OpCnAbsOpnBrk != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(OpCnAbsOpnBrk);
      }
      if (OpCnPosCall != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(OpCnPosCall);
      }
      if (OpCnPosPut != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(OpCnPosPut);
      }
      if (OpCnAbsPair != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(OpCnAbsPair);
      }
      if (OpCnAbsAtmEquiv != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(OpCnAbsAtmEquiv);
      }
      if (OpCnBot != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(OpCnBot);
      }
      if (OpCnSld != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(OpCnSld);
      }
      if (OpMnyBot != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(OpMnyBot);
      }
      if (OpMnySld != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(OpMnySld);
      }
      if (OpPremBot != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(OpPremBot);
      }
      if (OpPremSld != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(OpPremSld);
      }
      if (maxOptDttm_ != null) {
        output.WriteRawTag(210, 15);
        output.WriteMessage(MaxOptDttm);
      }
      if (OpPnlVol != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(OpPnlVol);
      }
      if (OpPnlMid != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(OpPnlMid);
      }
      if (OpPnlClr != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(OpPnlClr);
      }
      if (OpPnlBrk != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(OpPnlBrk);
      }
      if (OpPnlDay != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(OpPnlDay);
      }
      if (OpDnPnlDay != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(OpDnPnlDay);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(OpDayTheta);
      }
      if (OpDayDelta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(OpDayDelta);
      }
      if (OpTrdDelta != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OpTrdDelta);
      }
      if (OpnDelta != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpnDelta);
      }
      if (ContHedgePnl != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(ContHedgePnl);
      }
      if (ContHedgePnl1 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(ContHedgePnl1);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(PnlVa);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(PnlErr);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PnlRate);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlTe);
      }
      if (PctIvChange != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(PctIvChange);
      }
      if (PctIvVega != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PctIvVega);
      }
      if (PctTvChange != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(PctTvChange);
      }
      if (PctTvVega != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PctTvVega);
      }
      if (FutWidthMny != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(FutWidthMny);
      }
      if (OptWidthMny != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(OptWidthMny);
      }
      if (DayDDelta != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(DayDDelta);
      }
      if (Delta != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(Delta);
      }
      if (Ddelta != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(Ddelta);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(DeDecay);
      }
      if (DdDecay != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(DdDecay);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(Gamma);
      }
      if (DGamma != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(DGamma);
      }
      if (Theta != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Theta);
      }
      if (Rho != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(Rho);
      }
      if (Vega != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(Vega);
      }
      if (TVega != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(TVega);
      }
      if (WVega != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(WVega);
      }
      if (WtVega != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(WtVega);
      }
      if (IvolVe != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(IvolVe);
      }
      if (Volga != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(Volga);
      }
      if (Vanna != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Vanna);
      }
      if (Slope != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(Slope);
      }
      if (Avega != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(Avega);
      }
      if (Atheta != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(Atheta);
      }
      if (HedgeGamma != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(HedgeGamma);
      }
      if (HedgeDGamma != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(HedgeDGamma);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(PremOvPar);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(WtVeDu);
      }
      if (WtVeM1 != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(WtVeM1);
      }
      if (WtVeM2 != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(WtVeM2);
      }
      if (WtVeM3 != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(WtVeM3);
      }
      if (WtVeM4 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(WtVeM4);
      }
      if (WtVeM5 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(WtVeM5);
      }
      if (PinXX != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(PinXX);
      }
      if (OpnDeBelow != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(OpnDeBelow);
      }
      if (OpnDeAbove != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(OpnDeAbove);
      }
      if (OpnDDeBelow != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(OpnDDeBelow);
      }
      if (OpnDDeAbove != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(OpnDDeAbove);
      }
      if (PosDeBelow != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(PosDeBelow);
      }
      if (PosDeAbove != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(PosDeAbove);
      }
      if (PosDDeBelow != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(PosDDeBelow);
      }
      if (PosDDeAbove != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(PosDDeAbove);
      }
      if (PosHedgeDeltaEx != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(PosHedgeDeltaEx);
      }
      if (PosHedgeDDeltaEx != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(PosHedgeDDeltaEx);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(TEdgeMult);
      }
      if (TEdgePr != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(TEdgePr);
      }
      if (TEdgeMultPr != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(TEdgeMultPr);
      }
      if (NumTVolErrors != 0) {
        output.WriteRawTag(200, 31);
        output.WriteInt32(NumTVolErrors);
      }
      if (PairPnl != 0F) {
        output.WriteRawTag(229, 31);
        output.WriteFloat(PairPnl);
      }
      if (PosTEdgeWV != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(PosTEdgeWV);
      }
      if (NegTEdgeWV != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(NegTEdgeWV);
      }
      if (BadTEdgeWV != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(BadTEdgeWV);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(BadTEdgePnl);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(197, 35);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(221, 35);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(245, 35);
        output.WriteFloat(Span16);
      }
      if (FutLiqRisk != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(FutLiqRisk);
      }
      if (OptLiqRisk != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(OptLiqRisk);
      }
      if (FcBotC0 != 0) {
        output.WriteRawTag(184, 36);
        output.WriteInt32(FcBotC0);
      }
      if (FcSldC0 != 0) {
        output.WriteRawTag(208, 36);
        output.WriteInt32(FcSldC0);
      }
      if (FcMnyC0 != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(FcMnyC0);
      }
      if (FcBotC1 != 0) {
        output.WriteRawTag(128, 37);
        output.WriteInt32(FcBotC1);
      }
      if (FcSldC1 != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(FcSldC1);
      }
      if (FcMnyC1 != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(FcMnyC1);
      }
      if (FutMargin != 0F) {
        output.WriteRawTag(205, 37);
        output.WriteFloat(FutMargin);
      }
      if (NumFutErrors != 0) {
        output.WriteRawTag(224, 37);
        output.WriteInt32(NumFutErrors);
      }
      if (NumOptErrors != 0) {
        output.WriteRawTag(248, 37);
        output.WriteInt32(NumOptErrors);
      }
      if (UpdateSource != global::Spiderrock.Protobuf.R5Source.Unspecified) {
        output.WriteRawTag(144, 38);
        output.WriteEnum((int) UpdateSource);
      }
      if (FutMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        output.WriteRawTag(168, 38);
        output.WriteEnum((int) FutMarkFlag);
      }
      if (OptMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        output.WriteRawTag(192, 38);
        output.WriteEnum((int) OptMarkFlag);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 38);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (ticker_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(UPrc);
      }
      if (UMark != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UMark);
      }
      if (UOpnMark != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UOpnMark);
      }
      if (Beta != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) BetaSource);
      }
      if (LnDDelta != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(LnDDelta);
      }
      if (ShDDelta != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(ShDDelta);
      }
      if (FutMktValueMid != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(FutMktValueMid);
      }
      if (OptMktValueMid != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(OptMktValueMid);
      }
      if (OptMktValueVol != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(OptMktValueVol);
      }
      if (FcAbsCurPos != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(FcAbsCurPos);
      }
      if (FcAbsOpnClr != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(FcAbsOpnClr);
      }
      if (FcAbsOpnPrv != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(FcAbsOpnPrv);
      }
      if (FcAbsOpnPos != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(FcAbsOpnPos);
      }
      if (FcAbsOpnBrk != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(FcAbsOpnBrk);
      }
      if (FcNetCurPos != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(FcNetCurPos);
      }
      if (FcBot != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(FcBot);
      }
      if (FcSld != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(FcSld);
      }
      if (FcBotHdg != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(FcBotHdg);
      }
      if (FcSldHdg != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(FcSldHdg);
      }
      if (FcBotTrh != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(FcBotTrh);
      }
      if (FcSldTrh != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(FcSldTrh);
      }
      if (FcBotOpn != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(FcBotOpn);
      }
      if (FcSldOpn != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(FcSldOpn);
      }
      if (FcBotTrd != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(FcBotTrd);
      }
      if (FcSldTrd != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(FcSldTrd);
      }
      if (FcMnyBot != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(FcMnyBot);
      }
      if (FcMnySld != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(FcMnySld);
      }
      if (maxFutDttm_ != null) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(MaxFutDttm);
      }
      if (FcPnlMid != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(FcPnlMid);
      }
      if (FcPnlClr != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(FcPnlClr);
      }
      if (FcPnlDay != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(FcPnlDay);
      }
      if (OpCnAbsCurPos != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OpCnAbsCurPos);
      }
      if (OpCnAbsOpnClr != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(OpCnAbsOpnClr);
      }
      if (OpCnAbsOpnPrv != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(OpCnAbsOpnPrv);
      }
      if (OpCnAbsOpnPos != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(OpCnAbsOpnPos);
      }
      if (OpCnAbsOpnBrk != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(OpCnAbsOpnBrk);
      }
      if (OpCnPosCall != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(OpCnPosCall);
      }
      if (OpCnPosPut != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(OpCnPosPut);
      }
      if (OpCnAbsPair != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(OpCnAbsPair);
      }
      if (OpCnAbsAtmEquiv != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(OpCnAbsAtmEquiv);
      }
      if (OpCnBot != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(OpCnBot);
      }
      if (OpCnSld != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(OpCnSld);
      }
      if (OpMnyBot != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(OpMnyBot);
      }
      if (OpMnySld != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(OpMnySld);
      }
      if (OpPremBot != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(OpPremBot);
      }
      if (OpPremSld != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(OpPremSld);
      }
      if (maxOptDttm_ != null) {
        output.WriteRawTag(210, 15);
        output.WriteMessage(MaxOptDttm);
      }
      if (OpPnlVol != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(OpPnlVol);
      }
      if (OpPnlMid != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(OpPnlMid);
      }
      if (OpPnlClr != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(OpPnlClr);
      }
      if (OpPnlBrk != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(OpPnlBrk);
      }
      if (OpPnlDay != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(OpPnlDay);
      }
      if (OpDnPnlDay != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(OpDnPnlDay);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(OpDayTheta);
      }
      if (OpDayDelta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(OpDayDelta);
      }
      if (OpTrdDelta != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OpTrdDelta);
      }
      if (OpnDelta != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpnDelta);
      }
      if (ContHedgePnl != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(ContHedgePnl);
      }
      if (ContHedgePnl1 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(ContHedgePnl1);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(PnlVa);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(PnlErr);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PnlRate);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlTe);
      }
      if (PctIvChange != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(PctIvChange);
      }
      if (PctIvVega != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PctIvVega);
      }
      if (PctTvChange != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(PctTvChange);
      }
      if (PctTvVega != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PctTvVega);
      }
      if (FutWidthMny != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(FutWidthMny);
      }
      if (OptWidthMny != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(OptWidthMny);
      }
      if (DayDDelta != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(DayDDelta);
      }
      if (Delta != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(Delta);
      }
      if (Ddelta != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(Ddelta);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(DeDecay);
      }
      if (DdDecay != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(DdDecay);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(Gamma);
      }
      if (DGamma != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(DGamma);
      }
      if (Theta != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Theta);
      }
      if (Rho != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(Rho);
      }
      if (Vega != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(Vega);
      }
      if (TVega != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(TVega);
      }
      if (WVega != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(WVega);
      }
      if (WtVega != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(WtVega);
      }
      if (IvolVe != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(IvolVe);
      }
      if (Volga != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(Volga);
      }
      if (Vanna != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Vanna);
      }
      if (Slope != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(Slope);
      }
      if (Avega != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(Avega);
      }
      if (Atheta != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(Atheta);
      }
      if (HedgeGamma != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(HedgeGamma);
      }
      if (HedgeDGamma != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(HedgeDGamma);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(PremOvPar);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(WtVeDu);
      }
      if (WtVeM1 != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(WtVeM1);
      }
      if (WtVeM2 != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(WtVeM2);
      }
      if (WtVeM3 != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(WtVeM3);
      }
      if (WtVeM4 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(WtVeM4);
      }
      if (WtVeM5 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(WtVeM5);
      }
      if (PinXX != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(PinXX);
      }
      if (OpnDeBelow != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(OpnDeBelow);
      }
      if (OpnDeAbove != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(OpnDeAbove);
      }
      if (OpnDDeBelow != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(OpnDDeBelow);
      }
      if (OpnDDeAbove != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(OpnDDeAbove);
      }
      if (PosDeBelow != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(PosDeBelow);
      }
      if (PosDeAbove != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(PosDeAbove);
      }
      if (PosDDeBelow != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(PosDDeBelow);
      }
      if (PosDDeAbove != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(PosDDeAbove);
      }
      if (PosHedgeDeltaEx != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(PosHedgeDeltaEx);
      }
      if (PosHedgeDDeltaEx != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(PosHedgeDDeltaEx);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(TEdgeMult);
      }
      if (TEdgePr != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(TEdgePr);
      }
      if (TEdgeMultPr != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(TEdgeMultPr);
      }
      if (NumTVolErrors != 0) {
        output.WriteRawTag(200, 31);
        output.WriteInt32(NumTVolErrors);
      }
      if (PairPnl != 0F) {
        output.WriteRawTag(229, 31);
        output.WriteFloat(PairPnl);
      }
      if (PosTEdgeWV != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(PosTEdgeWV);
      }
      if (NegTEdgeWV != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(NegTEdgeWV);
      }
      if (BadTEdgeWV != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(BadTEdgeWV);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(BadTEdgePnl);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(197, 35);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(221, 35);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(245, 35);
        output.WriteFloat(Span16);
      }
      if (FutLiqRisk != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(FutLiqRisk);
      }
      if (OptLiqRisk != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(OptLiqRisk);
      }
      if (FcBotC0 != 0) {
        output.WriteRawTag(184, 36);
        output.WriteInt32(FcBotC0);
      }
      if (FcSldC0 != 0) {
        output.WriteRawTag(208, 36);
        output.WriteInt32(FcSldC0);
      }
      if (FcMnyC0 != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(FcMnyC0);
      }
      if (FcBotC1 != 0) {
        output.WriteRawTag(128, 37);
        output.WriteInt32(FcBotC1);
      }
      if (FcSldC1 != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(FcSldC1);
      }
      if (FcMnyC1 != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(FcMnyC1);
      }
      if (FutMargin != 0F) {
        output.WriteRawTag(205, 37);
        output.WriteFloat(FutMargin);
      }
      if (NumFutErrors != 0) {
        output.WriteRawTag(224, 37);
        output.WriteInt32(NumFutErrors);
      }
      if (NumOptErrors != 0) {
        output.WriteRawTag(248, 37);
        output.WriteInt32(NumOptErrors);
      }
      if (UpdateSource != global::Spiderrock.Protobuf.R5Source.Unspecified) {
        output.WriteRawTag(144, 38);
        output.WriteEnum((int) UpdateSource);
      }
      if (FutMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        output.WriteRawTag(168, 38);
        output.WriteEnum((int) FutMarkFlag);
      }
      if (OptMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        output.WriteRawTag(192, 38);
        output.WriteEnum((int) OptMarkFlag);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 38);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UMark != 0D) {
        size += 2 + 8;
      }
      if (UOpnMark != 0D) {
        size += 2 + 8;
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (LnDDelta != 0D) {
        size += 2 + 8;
      }
      if (ShDDelta != 0D) {
        size += 2 + 8;
      }
      if (FutMktValueMid != 0D) {
        size += 2 + 8;
      }
      if (OptMktValueMid != 0D) {
        size += 2 + 8;
      }
      if (OptMktValueVol != 0D) {
        size += 2 + 8;
      }
      if (FcAbsCurPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcAbsCurPos);
      }
      if (FcAbsOpnClr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcAbsOpnClr);
      }
      if (FcAbsOpnPrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcAbsOpnPrv);
      }
      if (FcAbsOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcAbsOpnPos);
      }
      if (FcAbsOpnBrk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcAbsOpnBrk);
      }
      if (FcNetCurPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcNetCurPos);
      }
      if (FcBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBot);
      }
      if (FcSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSld);
      }
      if (FcBotHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotHdg);
      }
      if (FcSldHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldHdg);
      }
      if (FcBotTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotTrh);
      }
      if (FcSldTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldTrh);
      }
      if (FcBotOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotOpn);
      }
      if (FcSldOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldOpn);
      }
      if (FcBotTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotTrd);
      }
      if (FcSldTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldTrd);
      }
      if (FcMnyBot != 0D) {
        size += 2 + 8;
      }
      if (FcMnySld != 0D) {
        size += 2 + 8;
      }
      if (maxFutDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxFutDttm);
      }
      if (FcPnlMid != 0F) {
        size += 2 + 4;
      }
      if (FcPnlClr != 0F) {
        size += 2 + 4;
      }
      if (FcPnlDay != 0F) {
        size += 2 + 4;
      }
      if (OpCnAbsCurPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsCurPos);
      }
      if (OpCnAbsOpnClr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsOpnClr);
      }
      if (OpCnAbsOpnPrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsOpnPrv);
      }
      if (OpCnAbsOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsOpnPos);
      }
      if (OpCnAbsOpnBrk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsOpnBrk);
      }
      if (OpCnPosCall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnPosCall);
      }
      if (OpCnPosPut != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnPosPut);
      }
      if (OpCnAbsPair != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnAbsPair);
      }
      if (OpCnAbsAtmEquiv != 0F) {
        size += 2 + 4;
      }
      if (OpCnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnBot);
      }
      if (OpCnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpCnSld);
      }
      if (OpMnyBot != 0D) {
        size += 2 + 8;
      }
      if (OpMnySld != 0D) {
        size += 2 + 8;
      }
      if (OpPremBot != 0F) {
        size += 2 + 4;
      }
      if (OpPremSld != 0F) {
        size += 2 + 4;
      }
      if (maxOptDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxOptDttm);
      }
      if (OpPnlVol != 0D) {
        size += 2 + 8;
      }
      if (OpPnlMid != 0D) {
        size += 2 + 8;
      }
      if (OpPnlClr != 0D) {
        size += 2 + 8;
      }
      if (OpPnlBrk != 0F) {
        size += 2 + 4;
      }
      if (OpPnlDay != 0F) {
        size += 2 + 4;
      }
      if (OpDnPnlDay != 0F) {
        size += 2 + 4;
      }
      if (OpDayVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWtVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTheta != 0F) {
        size += 2 + 4;
      }
      if (OpDayDelta != 0F) {
        size += 2 + 4;
      }
      if (OpTrdDelta != 0F) {
        size += 2 + 4;
      }
      if (OpnDelta != 0F) {
        size += 2 + 4;
      }
      if (ContHedgePnl != 0F) {
        size += 2 + 4;
      }
      if (ContHedgePnl1 != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeOpened != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeClosed != 0F) {
        size += 2 + 4;
      }
      if (PnlDn != 0F) {
        size += 2 + 4;
      }
      if (PnlDe != 0F) {
        size += 2 + 4;
      }
      if (PnlSl != 0F) {
        size += 2 + 4;
      }
      if (PnlGa != 0F) {
        size += 2 + 4;
      }
      if (PnlTh != 0F) {
        size += 2 + 4;
      }
      if (PnlVe != 0F) {
        size += 2 + 4;
      }
      if (PnlVo != 0F) {
        size += 2 + 4;
      }
      if (PnlVa != 0F) {
        size += 2 + 4;
      }
      if (PnlErr != 0F) {
        size += 2 + 4;
      }
      if (PnlRate != 0F) {
        size += 2 + 4;
      }
      if (PnlSDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlDDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlTe != 0F) {
        size += 2 + 4;
      }
      if (PctIvChange != 0F) {
        size += 2 + 4;
      }
      if (PctIvVega != 0F) {
        size += 2 + 4;
      }
      if (PctTvChange != 0F) {
        size += 2 + 4;
      }
      if (PctTvVega != 0F) {
        size += 2 + 4;
      }
      if (FutWidthMny != 0F) {
        size += 2 + 4;
      }
      if (OptWidthMny != 0F) {
        size += 2 + 4;
      }
      if (DayDDelta != 0F) {
        size += 2 + 4;
      }
      if (Delta != 0F) {
        size += 2 + 4;
      }
      if (Ddelta != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (DdDecay != 0F) {
        size += 2 + 4;
      }
      if (Gamma != 0F) {
        size += 2 + 4;
      }
      if (DGamma != 0F) {
        size += 2 + 4;
      }
      if (Theta != 0F) {
        size += 2 + 4;
      }
      if (Rho != 0F) {
        size += 2 + 4;
      }
      if (Vega != 0F) {
        size += 2 + 4;
      }
      if (TVega != 0F) {
        size += 2 + 4;
      }
      if (WVega != 0F) {
        size += 2 + 4;
      }
      if (WtVega != 0F) {
        size += 2 + 4;
      }
      if (IvolVe != 0F) {
        size += 2 + 4;
      }
      if (Volga != 0F) {
        size += 2 + 4;
      }
      if (Vanna != 0F) {
        size += 2 + 4;
      }
      if (Slope != 0F) {
        size += 2 + 4;
      }
      if (Avega != 0F) {
        size += 2 + 4;
      }
      if (Atheta != 0F) {
        size += 2 + 4;
      }
      if (HedgeGamma != 0F) {
        size += 2 + 4;
      }
      if (HedgeDGamma != 0F) {
        size += 2 + 4;
      }
      if (PremOvPar != 0F) {
        size += 2 + 4;
      }
      if (WtVeDd != 0F) {
        size += 2 + 4;
      }
      if (WtVeDn != 0F) {
        size += 2 + 4;
      }
      if (WtVeAt != 0F) {
        size += 2 + 4;
      }
      if (WtVeUp != 0F) {
        size += 2 + 4;
      }
      if (WtVeDu != 0F) {
        size += 2 + 4;
      }
      if (WtVeM1 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM2 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM3 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM4 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM5 != 0F) {
        size += 2 + 4;
      }
      if (PinXX != 0F) {
        size += 2 + 4;
      }
      if (OpnDeBelow != 0F) {
        size += 2 + 4;
      }
      if (OpnDeAbove != 0F) {
        size += 2 + 4;
      }
      if (OpnDDeBelow != 0F) {
        size += 2 + 4;
      }
      if (OpnDDeAbove != 0F) {
        size += 2 + 4;
      }
      if (PosDeBelow != 0F) {
        size += 2 + 4;
      }
      if (PosDeAbove != 0F) {
        size += 2 + 4;
      }
      if (PosDDeBelow != 0F) {
        size += 2 + 4;
      }
      if (PosDDeAbove != 0F) {
        size += 2 + 4;
      }
      if (PosHedgeDeltaEx != 0F) {
        size += 2 + 4;
      }
      if (PosHedgeDDeltaEx != 0F) {
        size += 2 + 4;
      }
      if (TEdge != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMult != 0F) {
        size += 2 + 4;
      }
      if (TEdgePr != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMultPr != 0F) {
        size += 2 + 4;
      }
      if (NumTVolErrors != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTVolErrors);
      }
      if (PairPnl != 0F) {
        size += 2 + 4;
      }
      if (PosTEdgeWV != 0F) {
        size += 2 + 4;
      }
      if (NegTEdgeWV != 0F) {
        size += 2 + 4;
      }
      if (BadTEdgeWV != 0F) {
        size += 2 + 4;
      }
      if (PosTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (NegTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (BadTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (Span01 != 0F) {
        size += 2 + 4;
      }
      if (Span02 != 0F) {
        size += 2 + 4;
      }
      if (Span03 != 0F) {
        size += 2 + 4;
      }
      if (Span04 != 0F) {
        size += 2 + 4;
      }
      if (Span05 != 0F) {
        size += 2 + 4;
      }
      if (Span06 != 0F) {
        size += 2 + 4;
      }
      if (Span07 != 0F) {
        size += 2 + 4;
      }
      if (Span08 != 0F) {
        size += 2 + 4;
      }
      if (Span09 != 0F) {
        size += 2 + 4;
      }
      if (Span10 != 0F) {
        size += 2 + 4;
      }
      if (Span11 != 0F) {
        size += 2 + 4;
      }
      if (Span12 != 0F) {
        size += 2 + 4;
      }
      if (Span13 != 0F) {
        size += 2 + 4;
      }
      if (Span14 != 0F) {
        size += 2 + 4;
      }
      if (Span15 != 0F) {
        size += 2 + 4;
      }
      if (Span16 != 0F) {
        size += 2 + 4;
      }
      if (FutLiqRisk != 0F) {
        size += 2 + 4;
      }
      if (OptLiqRisk != 0F) {
        size += 2 + 4;
      }
      if (FcBotC0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotC0);
      }
      if (FcSldC0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldC0);
      }
      if (FcMnyC0 != 0F) {
        size += 2 + 4;
      }
      if (FcBotC1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBotC1);
      }
      if (FcSldC1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSldC1);
      }
      if (FcMnyC1 != 0F) {
        size += 2 + 4;
      }
      if (FutMargin != 0F) {
        size += 2 + 4;
      }
      if (NumFutErrors != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumFutErrors);
      }
      if (NumOptErrors != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOptErrors);
      }
      if (UpdateSource != global::Spiderrock.Protobuf.R5Source.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateSource);
      }
      if (FutMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutMarkFlag);
      }
      if (OptMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptMarkFlag);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FutureRiskSummaryV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UMark != 0D) {
        UMark = other.UMark;
      }
      if (other.UOpnMark != 0D) {
        UOpnMark = other.UOpnMark;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.LnDDelta != 0D) {
        LnDDelta = other.LnDDelta;
      }
      if (other.ShDDelta != 0D) {
        ShDDelta = other.ShDDelta;
      }
      if (other.FutMktValueMid != 0D) {
        FutMktValueMid = other.FutMktValueMid;
      }
      if (other.OptMktValueMid != 0D) {
        OptMktValueMid = other.OptMktValueMid;
      }
      if (other.OptMktValueVol != 0D) {
        OptMktValueVol = other.OptMktValueVol;
      }
      if (other.FcAbsCurPos != 0) {
        FcAbsCurPos = other.FcAbsCurPos;
      }
      if (other.FcAbsOpnClr != 0) {
        FcAbsOpnClr = other.FcAbsOpnClr;
      }
      if (other.FcAbsOpnPrv != 0) {
        FcAbsOpnPrv = other.FcAbsOpnPrv;
      }
      if (other.FcAbsOpnPos != 0) {
        FcAbsOpnPos = other.FcAbsOpnPos;
      }
      if (other.FcAbsOpnBrk != 0) {
        FcAbsOpnBrk = other.FcAbsOpnBrk;
      }
      if (other.FcNetCurPos != 0) {
        FcNetCurPos = other.FcNetCurPos;
      }
      if (other.FcBot != 0) {
        FcBot = other.FcBot;
      }
      if (other.FcSld != 0) {
        FcSld = other.FcSld;
      }
      if (other.FcBotHdg != 0) {
        FcBotHdg = other.FcBotHdg;
      }
      if (other.FcSldHdg != 0) {
        FcSldHdg = other.FcSldHdg;
      }
      if (other.FcBotTrh != 0) {
        FcBotTrh = other.FcBotTrh;
      }
      if (other.FcSldTrh != 0) {
        FcSldTrh = other.FcSldTrh;
      }
      if (other.FcBotOpn != 0) {
        FcBotOpn = other.FcBotOpn;
      }
      if (other.FcSldOpn != 0) {
        FcSldOpn = other.FcSldOpn;
      }
      if (other.FcBotTrd != 0) {
        FcBotTrd = other.FcBotTrd;
      }
      if (other.FcSldTrd != 0) {
        FcSldTrd = other.FcSldTrd;
      }
      if (other.FcMnyBot != 0D) {
        FcMnyBot = other.FcMnyBot;
      }
      if (other.FcMnySld != 0D) {
        FcMnySld = other.FcMnySld;
      }
      if (other.maxFutDttm_ != null) {
        if (maxFutDttm_ == null) {
          MaxFutDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxFutDttm.MergeFrom(other.MaxFutDttm);
      }
      if (other.FcPnlMid != 0F) {
        FcPnlMid = other.FcPnlMid;
      }
      if (other.FcPnlClr != 0F) {
        FcPnlClr = other.FcPnlClr;
      }
      if (other.FcPnlDay != 0F) {
        FcPnlDay = other.FcPnlDay;
      }
      if (other.OpCnAbsCurPos != 0) {
        OpCnAbsCurPos = other.OpCnAbsCurPos;
      }
      if (other.OpCnAbsOpnClr != 0) {
        OpCnAbsOpnClr = other.OpCnAbsOpnClr;
      }
      if (other.OpCnAbsOpnPrv != 0) {
        OpCnAbsOpnPrv = other.OpCnAbsOpnPrv;
      }
      if (other.OpCnAbsOpnPos != 0) {
        OpCnAbsOpnPos = other.OpCnAbsOpnPos;
      }
      if (other.OpCnAbsOpnBrk != 0) {
        OpCnAbsOpnBrk = other.OpCnAbsOpnBrk;
      }
      if (other.OpCnPosCall != 0) {
        OpCnPosCall = other.OpCnPosCall;
      }
      if (other.OpCnPosPut != 0) {
        OpCnPosPut = other.OpCnPosPut;
      }
      if (other.OpCnAbsPair != 0) {
        OpCnAbsPair = other.OpCnAbsPair;
      }
      if (other.OpCnAbsAtmEquiv != 0F) {
        OpCnAbsAtmEquiv = other.OpCnAbsAtmEquiv;
      }
      if (other.OpCnBot != 0) {
        OpCnBot = other.OpCnBot;
      }
      if (other.OpCnSld != 0) {
        OpCnSld = other.OpCnSld;
      }
      if (other.OpMnyBot != 0D) {
        OpMnyBot = other.OpMnyBot;
      }
      if (other.OpMnySld != 0D) {
        OpMnySld = other.OpMnySld;
      }
      if (other.OpPremBot != 0F) {
        OpPremBot = other.OpPremBot;
      }
      if (other.OpPremSld != 0F) {
        OpPremSld = other.OpPremSld;
      }
      if (other.maxOptDttm_ != null) {
        if (maxOptDttm_ == null) {
          MaxOptDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxOptDttm.MergeFrom(other.MaxOptDttm);
      }
      if (other.OpPnlVol != 0D) {
        OpPnlVol = other.OpPnlVol;
      }
      if (other.OpPnlMid != 0D) {
        OpPnlMid = other.OpPnlMid;
      }
      if (other.OpPnlClr != 0D) {
        OpPnlClr = other.OpPnlClr;
      }
      if (other.OpPnlBrk != 0F) {
        OpPnlBrk = other.OpPnlBrk;
      }
      if (other.OpPnlDay != 0F) {
        OpPnlDay = other.OpPnlDay;
      }
      if (other.OpDnPnlDay != 0F) {
        OpDnPnlDay = other.OpDnPnlDay;
      }
      if (other.OpDayVega != 0F) {
        OpDayVega = other.OpDayVega;
      }
      if (other.OpDayWVega != 0F) {
        OpDayWVega = other.OpDayWVega;
      }
      if (other.OpDayTVega != 0F) {
        OpDayTVega = other.OpDayTVega;
      }
      if (other.OpDayWtVega != 0F) {
        OpDayWtVega = other.OpDayWtVega;
      }
      if (other.OpDayTheta != 0F) {
        OpDayTheta = other.OpDayTheta;
      }
      if (other.OpDayDelta != 0F) {
        OpDayDelta = other.OpDayDelta;
      }
      if (other.OpTrdDelta != 0F) {
        OpTrdDelta = other.OpTrdDelta;
      }
      if (other.OpnDelta != 0F) {
        OpnDelta = other.OpnDelta;
      }
      if (other.ContHedgePnl != 0F) {
        ContHedgePnl = other.ContHedgePnl;
      }
      if (other.ContHedgePnl1 != 0F) {
        ContHedgePnl1 = other.ContHedgePnl1;
      }
      if (other.OpEdgeOpened != 0F) {
        OpEdgeOpened = other.OpEdgeOpened;
      }
      if (other.OpEdgeClosed != 0F) {
        OpEdgeClosed = other.OpEdgeClosed;
      }
      if (other.PnlDn != 0F) {
        PnlDn = other.PnlDn;
      }
      if (other.PnlDe != 0F) {
        PnlDe = other.PnlDe;
      }
      if (other.PnlSl != 0F) {
        PnlSl = other.PnlSl;
      }
      if (other.PnlGa != 0F) {
        PnlGa = other.PnlGa;
      }
      if (other.PnlTh != 0F) {
        PnlTh = other.PnlTh;
      }
      if (other.PnlVe != 0F) {
        PnlVe = other.PnlVe;
      }
      if (other.PnlVo != 0F) {
        PnlVo = other.PnlVo;
      }
      if (other.PnlVa != 0F) {
        PnlVa = other.PnlVa;
      }
      if (other.PnlErr != 0F) {
        PnlErr = other.PnlErr;
      }
      if (other.PnlRate != 0F) {
        PnlRate = other.PnlRate;
      }
      if (other.PnlSDiv != 0F) {
        PnlSDiv = other.PnlSDiv;
      }
      if (other.PnlDDiv != 0F) {
        PnlDDiv = other.PnlDDiv;
      }
      if (other.PnlTe != 0F) {
        PnlTe = other.PnlTe;
      }
      if (other.PctIvChange != 0F) {
        PctIvChange = other.PctIvChange;
      }
      if (other.PctIvVega != 0F) {
        PctIvVega = other.PctIvVega;
      }
      if (other.PctTvChange != 0F) {
        PctTvChange = other.PctTvChange;
      }
      if (other.PctTvVega != 0F) {
        PctTvVega = other.PctTvVega;
      }
      if (other.FutWidthMny != 0F) {
        FutWidthMny = other.FutWidthMny;
      }
      if (other.OptWidthMny != 0F) {
        OptWidthMny = other.OptWidthMny;
      }
      if (other.DayDDelta != 0F) {
        DayDDelta = other.DayDDelta;
      }
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      if (other.Ddelta != 0F) {
        Ddelta = other.Ddelta;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.DdDecay != 0F) {
        DdDecay = other.DdDecay;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.DGamma != 0F) {
        DGamma = other.DGamma;
      }
      if (other.Theta != 0F) {
        Theta = other.Theta;
      }
      if (other.Rho != 0F) {
        Rho = other.Rho;
      }
      if (other.Vega != 0F) {
        Vega = other.Vega;
      }
      if (other.TVega != 0F) {
        TVega = other.TVega;
      }
      if (other.WVega != 0F) {
        WVega = other.WVega;
      }
      if (other.WtVega != 0F) {
        WtVega = other.WtVega;
      }
      if (other.IvolVe != 0F) {
        IvolVe = other.IvolVe;
      }
      if (other.Volga != 0F) {
        Volga = other.Volga;
      }
      if (other.Vanna != 0F) {
        Vanna = other.Vanna;
      }
      if (other.Slope != 0F) {
        Slope = other.Slope;
      }
      if (other.Avega != 0F) {
        Avega = other.Avega;
      }
      if (other.Atheta != 0F) {
        Atheta = other.Atheta;
      }
      if (other.HedgeGamma != 0F) {
        HedgeGamma = other.HedgeGamma;
      }
      if (other.HedgeDGamma != 0F) {
        HedgeDGamma = other.HedgeDGamma;
      }
      if (other.PremOvPar != 0F) {
        PremOvPar = other.PremOvPar;
      }
      if (other.WtVeDd != 0F) {
        WtVeDd = other.WtVeDd;
      }
      if (other.WtVeDn != 0F) {
        WtVeDn = other.WtVeDn;
      }
      if (other.WtVeAt != 0F) {
        WtVeAt = other.WtVeAt;
      }
      if (other.WtVeUp != 0F) {
        WtVeUp = other.WtVeUp;
      }
      if (other.WtVeDu != 0F) {
        WtVeDu = other.WtVeDu;
      }
      if (other.WtVeM1 != 0F) {
        WtVeM1 = other.WtVeM1;
      }
      if (other.WtVeM2 != 0F) {
        WtVeM2 = other.WtVeM2;
      }
      if (other.WtVeM3 != 0F) {
        WtVeM3 = other.WtVeM3;
      }
      if (other.WtVeM4 != 0F) {
        WtVeM4 = other.WtVeM4;
      }
      if (other.WtVeM5 != 0F) {
        WtVeM5 = other.WtVeM5;
      }
      if (other.PinXX != 0F) {
        PinXX = other.PinXX;
      }
      if (other.OpnDeBelow != 0F) {
        OpnDeBelow = other.OpnDeBelow;
      }
      if (other.OpnDeAbove != 0F) {
        OpnDeAbove = other.OpnDeAbove;
      }
      if (other.OpnDDeBelow != 0F) {
        OpnDDeBelow = other.OpnDDeBelow;
      }
      if (other.OpnDDeAbove != 0F) {
        OpnDDeAbove = other.OpnDDeAbove;
      }
      if (other.PosDeBelow != 0F) {
        PosDeBelow = other.PosDeBelow;
      }
      if (other.PosDeAbove != 0F) {
        PosDeAbove = other.PosDeAbove;
      }
      if (other.PosDDeBelow != 0F) {
        PosDDeBelow = other.PosDDeBelow;
      }
      if (other.PosDDeAbove != 0F) {
        PosDDeAbove = other.PosDDeAbove;
      }
      if (other.PosHedgeDeltaEx != 0F) {
        PosHedgeDeltaEx = other.PosHedgeDeltaEx;
      }
      if (other.PosHedgeDDeltaEx != 0F) {
        PosHedgeDDeltaEx = other.PosHedgeDDeltaEx;
      }
      if (other.TEdge != 0F) {
        TEdge = other.TEdge;
      }
      if (other.TEdgeMult != 0F) {
        TEdgeMult = other.TEdgeMult;
      }
      if (other.TEdgePr != 0F) {
        TEdgePr = other.TEdgePr;
      }
      if (other.TEdgeMultPr != 0F) {
        TEdgeMultPr = other.TEdgeMultPr;
      }
      if (other.NumTVolErrors != 0) {
        NumTVolErrors = other.NumTVolErrors;
      }
      if (other.PairPnl != 0F) {
        PairPnl = other.PairPnl;
      }
      if (other.PosTEdgeWV != 0F) {
        PosTEdgeWV = other.PosTEdgeWV;
      }
      if (other.NegTEdgeWV != 0F) {
        NegTEdgeWV = other.NegTEdgeWV;
      }
      if (other.BadTEdgeWV != 0F) {
        BadTEdgeWV = other.BadTEdgeWV;
      }
      if (other.PosTEdgePnl != 0F) {
        PosTEdgePnl = other.PosTEdgePnl;
      }
      if (other.NegTEdgePnl != 0F) {
        NegTEdgePnl = other.NegTEdgePnl;
      }
      if (other.BadTEdgePnl != 0F) {
        BadTEdgePnl = other.BadTEdgePnl;
      }
      if (other.Span01 != 0F) {
        Span01 = other.Span01;
      }
      if (other.Span02 != 0F) {
        Span02 = other.Span02;
      }
      if (other.Span03 != 0F) {
        Span03 = other.Span03;
      }
      if (other.Span04 != 0F) {
        Span04 = other.Span04;
      }
      if (other.Span05 != 0F) {
        Span05 = other.Span05;
      }
      if (other.Span06 != 0F) {
        Span06 = other.Span06;
      }
      if (other.Span07 != 0F) {
        Span07 = other.Span07;
      }
      if (other.Span08 != 0F) {
        Span08 = other.Span08;
      }
      if (other.Span09 != 0F) {
        Span09 = other.Span09;
      }
      if (other.Span10 != 0F) {
        Span10 = other.Span10;
      }
      if (other.Span11 != 0F) {
        Span11 = other.Span11;
      }
      if (other.Span12 != 0F) {
        Span12 = other.Span12;
      }
      if (other.Span13 != 0F) {
        Span13 = other.Span13;
      }
      if (other.Span14 != 0F) {
        Span14 = other.Span14;
      }
      if (other.Span15 != 0F) {
        Span15 = other.Span15;
      }
      if (other.Span16 != 0F) {
        Span16 = other.Span16;
      }
      if (other.FutLiqRisk != 0F) {
        FutLiqRisk = other.FutLiqRisk;
      }
      if (other.OptLiqRisk != 0F) {
        OptLiqRisk = other.OptLiqRisk;
      }
      if (other.FcBotC0 != 0) {
        FcBotC0 = other.FcBotC0;
      }
      if (other.FcSldC0 != 0) {
        FcSldC0 = other.FcSldC0;
      }
      if (other.FcMnyC0 != 0F) {
        FcMnyC0 = other.FcMnyC0;
      }
      if (other.FcBotC1 != 0) {
        FcBotC1 = other.FcBotC1;
      }
      if (other.FcSldC1 != 0) {
        FcSldC1 = other.FcSldC1;
      }
      if (other.FcMnyC1 != 0F) {
        FcMnyC1 = other.FcMnyC1;
      }
      if (other.FutMargin != 0F) {
        FutMargin = other.FutMargin;
      }
      if (other.NumFutErrors != 0) {
        NumFutErrors = other.NumFutErrors;
      }
      if (other.NumOptErrors != 0) {
        NumOptErrors = other.NumOptErrors;
      }
      if (other.UpdateSource != global::Spiderrock.Protobuf.R5Source.Unspecified) {
        UpdateSource = other.UpdateSource;
      }
      if (other.FutMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        FutMarkFlag = other.FutMarkFlag;
      }
      if (other.OptMarkFlag != global::Spiderrock.Protobuf.MktErrFlag.Unspecified) {
        OptMarkFlag = other.OptMarkFlag;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 873: {
            UPrc = input.ReadDouble();
            break;
          }
          case 897: {
            UMark = input.ReadDouble();
            break;
          }
          case 921: {
            UOpnMark = input.ReadDouble();
            break;
          }
          case 949: {
            Beta = input.ReadFloat();
            break;
          }
          case 968: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 993: {
            LnDDelta = input.ReadDouble();
            break;
          }
          case 1017: {
            ShDDelta = input.ReadDouble();
            break;
          }
          case 1041: {
            FutMktValueMid = input.ReadDouble();
            break;
          }
          case 1065: {
            OptMktValueMid = input.ReadDouble();
            break;
          }
          case 1089: {
            OptMktValueVol = input.ReadDouble();
            break;
          }
          case 1112: {
            FcAbsCurPos = input.ReadInt32();
            break;
          }
          case 1136: {
            FcAbsOpnClr = input.ReadInt32();
            break;
          }
          case 1160: {
            FcAbsOpnPrv = input.ReadInt32();
            break;
          }
          case 1184: {
            FcAbsOpnPos = input.ReadInt32();
            break;
          }
          case 1208: {
            FcAbsOpnBrk = input.ReadInt32();
            break;
          }
          case 1232: {
            FcNetCurPos = input.ReadInt32();
            break;
          }
          case 1256: {
            FcBot = input.ReadInt32();
            break;
          }
          case 1280: {
            FcSld = input.ReadInt32();
            break;
          }
          case 1304: {
            FcBotHdg = input.ReadInt32();
            break;
          }
          case 1328: {
            FcSldHdg = input.ReadInt32();
            break;
          }
          case 1352: {
            FcBotTrh = input.ReadInt32();
            break;
          }
          case 1376: {
            FcSldTrh = input.ReadInt32();
            break;
          }
          case 1400: {
            FcBotOpn = input.ReadInt32();
            break;
          }
          case 1424: {
            FcSldOpn = input.ReadInt32();
            break;
          }
          case 1448: {
            FcBotTrd = input.ReadInt32();
            break;
          }
          case 1472: {
            FcSldTrd = input.ReadInt32();
            break;
          }
          case 1497: {
            FcMnyBot = input.ReadDouble();
            break;
          }
          case 1521: {
            FcMnySld = input.ReadDouble();
            break;
          }
          case 1546: {
            if (maxFutDttm_ == null) {
              MaxFutDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxFutDttm);
            break;
          }
          case 1573: {
            FcPnlMid = input.ReadFloat();
            break;
          }
          case 1597: {
            FcPnlClr = input.ReadFloat();
            break;
          }
          case 1621: {
            FcPnlDay = input.ReadFloat();
            break;
          }
          case 1640: {
            OpCnAbsCurPos = input.ReadInt32();
            break;
          }
          case 1664: {
            OpCnAbsOpnClr = input.ReadInt32();
            break;
          }
          case 1688: {
            OpCnAbsOpnPrv = input.ReadInt32();
            break;
          }
          case 1712: {
            OpCnAbsOpnPos = input.ReadInt32();
            break;
          }
          case 1736: {
            OpCnAbsOpnBrk = input.ReadInt32();
            break;
          }
          case 1760: {
            OpCnPosCall = input.ReadInt32();
            break;
          }
          case 1784: {
            OpCnPosPut = input.ReadInt32();
            break;
          }
          case 1808: {
            OpCnAbsPair = input.ReadInt32();
            break;
          }
          case 1837: {
            OpCnAbsAtmEquiv = input.ReadFloat();
            break;
          }
          case 1856: {
            OpCnBot = input.ReadInt32();
            break;
          }
          case 1880: {
            OpCnSld = input.ReadInt32();
            break;
          }
          case 1905: {
            OpMnyBot = input.ReadDouble();
            break;
          }
          case 1929: {
            OpMnySld = input.ReadDouble();
            break;
          }
          case 1957: {
            OpPremBot = input.ReadFloat();
            break;
          }
          case 1981: {
            OpPremSld = input.ReadFloat();
            break;
          }
          case 2002: {
            if (maxOptDttm_ == null) {
              MaxOptDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxOptDttm);
            break;
          }
          case 2025: {
            OpPnlVol = input.ReadDouble();
            break;
          }
          case 2049: {
            OpPnlMid = input.ReadDouble();
            break;
          }
          case 2073: {
            OpPnlClr = input.ReadDouble();
            break;
          }
          case 2101: {
            OpPnlBrk = input.ReadFloat();
            break;
          }
          case 2125: {
            OpPnlDay = input.ReadFloat();
            break;
          }
          case 2149: {
            OpDnPnlDay = input.ReadFloat();
            break;
          }
          case 2173: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 2197: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 2221: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 2245: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 2269: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 2293: {
            OpDayDelta = input.ReadFloat();
            break;
          }
          case 2317: {
            OpTrdDelta = input.ReadFloat();
            break;
          }
          case 2341: {
            OpnDelta = input.ReadFloat();
            break;
          }
          case 2365: {
            ContHedgePnl = input.ReadFloat();
            break;
          }
          case 2389: {
            ContHedgePnl1 = input.ReadFloat();
            break;
          }
          case 2413: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 2437: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 2461: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 2485: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 2509: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 2533: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 2557: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 2581: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 2605: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 2629: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 2653: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 2677: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 2701: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 2773: {
            PctIvChange = input.ReadFloat();
            break;
          }
          case 2797: {
            PctIvVega = input.ReadFloat();
            break;
          }
          case 2821: {
            PctTvChange = input.ReadFloat();
            break;
          }
          case 2845: {
            PctTvVega = input.ReadFloat();
            break;
          }
          case 2869: {
            FutWidthMny = input.ReadFloat();
            break;
          }
          case 2893: {
            OptWidthMny = input.ReadFloat();
            break;
          }
          case 2917: {
            DayDDelta = input.ReadFloat();
            break;
          }
          case 2941: {
            Delta = input.ReadFloat();
            break;
          }
          case 2965: {
            Ddelta = input.ReadFloat();
            break;
          }
          case 2989: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 3013: {
            DdDecay = input.ReadFloat();
            break;
          }
          case 3037: {
            Gamma = input.ReadFloat();
            break;
          }
          case 3061: {
            DGamma = input.ReadFloat();
            break;
          }
          case 3085: {
            Theta = input.ReadFloat();
            break;
          }
          case 3109: {
            Rho = input.ReadFloat();
            break;
          }
          case 3133: {
            Vega = input.ReadFloat();
            break;
          }
          case 3157: {
            TVega = input.ReadFloat();
            break;
          }
          case 3181: {
            WVega = input.ReadFloat();
            break;
          }
          case 3205: {
            WtVega = input.ReadFloat();
            break;
          }
          case 3229: {
            IvolVe = input.ReadFloat();
            break;
          }
          case 3253: {
            Volga = input.ReadFloat();
            break;
          }
          case 3277: {
            Vanna = input.ReadFloat();
            break;
          }
          case 3301: {
            Slope = input.ReadFloat();
            break;
          }
          case 3325: {
            Avega = input.ReadFloat();
            break;
          }
          case 3349: {
            Atheta = input.ReadFloat();
            break;
          }
          case 3373: {
            HedgeGamma = input.ReadFloat();
            break;
          }
          case 3397: {
            HedgeDGamma = input.ReadFloat();
            break;
          }
          case 3421: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 3445: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 3469: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 3493: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 3517: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 3541: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 3565: {
            WtVeM1 = input.ReadFloat();
            break;
          }
          case 3589: {
            WtVeM2 = input.ReadFloat();
            break;
          }
          case 3613: {
            WtVeM3 = input.ReadFloat();
            break;
          }
          case 3637: {
            WtVeM4 = input.ReadFloat();
            break;
          }
          case 3661: {
            WtVeM5 = input.ReadFloat();
            break;
          }
          case 3685: {
            PinXX = input.ReadFloat();
            break;
          }
          case 3709: {
            OpnDeBelow = input.ReadFloat();
            break;
          }
          case 3733: {
            OpnDeAbove = input.ReadFloat();
            break;
          }
          case 3757: {
            OpnDDeBelow = input.ReadFloat();
            break;
          }
          case 3781: {
            OpnDDeAbove = input.ReadFloat();
            break;
          }
          case 3805: {
            PosDeBelow = input.ReadFloat();
            break;
          }
          case 3829: {
            PosDeAbove = input.ReadFloat();
            break;
          }
          case 3853: {
            PosDDeBelow = input.ReadFloat();
            break;
          }
          case 3877: {
            PosDDeAbove = input.ReadFloat();
            break;
          }
          case 3901: {
            PosHedgeDeltaEx = input.ReadFloat();
            break;
          }
          case 3925: {
            PosHedgeDDeltaEx = input.ReadFloat();
            break;
          }
          case 3949: {
            TEdge = input.ReadFloat();
            break;
          }
          case 3973: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 3997: {
            TEdgePr = input.ReadFloat();
            break;
          }
          case 4021: {
            TEdgeMultPr = input.ReadFloat();
            break;
          }
          case 4040: {
            NumTVolErrors = input.ReadInt32();
            break;
          }
          case 4069: {
            PairPnl = input.ReadFloat();
            break;
          }
          case 4093: {
            PosTEdgeWV = input.ReadFloat();
            break;
          }
          case 4117: {
            NegTEdgeWV = input.ReadFloat();
            break;
          }
          case 4141: {
            BadTEdgeWV = input.ReadFloat();
            break;
          }
          case 4165: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 4189: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 4213: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 4237: {
            Span01 = input.ReadFloat();
            break;
          }
          case 4261: {
            Span02 = input.ReadFloat();
            break;
          }
          case 4285: {
            Span03 = input.ReadFloat();
            break;
          }
          case 4309: {
            Span04 = input.ReadFloat();
            break;
          }
          case 4333: {
            Span05 = input.ReadFloat();
            break;
          }
          case 4357: {
            Span06 = input.ReadFloat();
            break;
          }
          case 4381: {
            Span07 = input.ReadFloat();
            break;
          }
          case 4405: {
            Span08 = input.ReadFloat();
            break;
          }
          case 4429: {
            Span09 = input.ReadFloat();
            break;
          }
          case 4453: {
            Span10 = input.ReadFloat();
            break;
          }
          case 4477: {
            Span11 = input.ReadFloat();
            break;
          }
          case 4501: {
            Span12 = input.ReadFloat();
            break;
          }
          case 4525: {
            Span13 = input.ReadFloat();
            break;
          }
          case 4549: {
            Span14 = input.ReadFloat();
            break;
          }
          case 4573: {
            Span15 = input.ReadFloat();
            break;
          }
          case 4597: {
            Span16 = input.ReadFloat();
            break;
          }
          case 4621: {
            FutLiqRisk = input.ReadFloat();
            break;
          }
          case 4645: {
            OptLiqRisk = input.ReadFloat();
            break;
          }
          case 4664: {
            FcBotC0 = input.ReadInt32();
            break;
          }
          case 4688: {
            FcSldC0 = input.ReadInt32();
            break;
          }
          case 4717: {
            FcMnyC0 = input.ReadFloat();
            break;
          }
          case 4736: {
            FcBotC1 = input.ReadInt32();
            break;
          }
          case 4760: {
            FcSldC1 = input.ReadInt32();
            break;
          }
          case 4789: {
            FcMnyC1 = input.ReadFloat();
            break;
          }
          case 4813: {
            FutMargin = input.ReadFloat();
            break;
          }
          case 4832: {
            NumFutErrors = input.ReadInt32();
            break;
          }
          case 4856: {
            NumOptErrors = input.ReadInt32();
            break;
          }
          case 4880: {
            UpdateSource = (global::Spiderrock.Protobuf.R5Source) input.ReadEnum();
            break;
          }
          case 4904: {
            FutMarkFlag = (global::Spiderrock.Protobuf.MktErrFlag) input.ReadEnum();
            break;
          }
          case 4928: {
            OptMarkFlag = (global::Spiderrock.Protobuf.MktErrFlag) input.ReadEnum();
            break;
          }
          case 4954: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.FutureRiskSummaryV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 873: {
            UPrc = input.ReadDouble();
            break;
          }
          case 897: {
            UMark = input.ReadDouble();
            break;
          }
          case 921: {
            UOpnMark = input.ReadDouble();
            break;
          }
          case 949: {
            Beta = input.ReadFloat();
            break;
          }
          case 968: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 993: {
            LnDDelta = input.ReadDouble();
            break;
          }
          case 1017: {
            ShDDelta = input.ReadDouble();
            break;
          }
          case 1041: {
            FutMktValueMid = input.ReadDouble();
            break;
          }
          case 1065: {
            OptMktValueMid = input.ReadDouble();
            break;
          }
          case 1089: {
            OptMktValueVol = input.ReadDouble();
            break;
          }
          case 1112: {
            FcAbsCurPos = input.ReadInt32();
            break;
          }
          case 1136: {
            FcAbsOpnClr = input.ReadInt32();
            break;
          }
          case 1160: {
            FcAbsOpnPrv = input.ReadInt32();
            break;
          }
          case 1184: {
            FcAbsOpnPos = input.ReadInt32();
            break;
          }
          case 1208: {
            FcAbsOpnBrk = input.ReadInt32();
            break;
          }
          case 1232: {
            FcNetCurPos = input.ReadInt32();
            break;
          }
          case 1256: {
            FcBot = input.ReadInt32();
            break;
          }
          case 1280: {
            FcSld = input.ReadInt32();
            break;
          }
          case 1304: {
            FcBotHdg = input.ReadInt32();
            break;
          }
          case 1328: {
            FcSldHdg = input.ReadInt32();
            break;
          }
          case 1352: {
            FcBotTrh = input.ReadInt32();
            break;
          }
          case 1376: {
            FcSldTrh = input.ReadInt32();
            break;
          }
          case 1400: {
            FcBotOpn = input.ReadInt32();
            break;
          }
          case 1424: {
            FcSldOpn = input.ReadInt32();
            break;
          }
          case 1448: {
            FcBotTrd = input.ReadInt32();
            break;
          }
          case 1472: {
            FcSldTrd = input.ReadInt32();
            break;
          }
          case 1497: {
            FcMnyBot = input.ReadDouble();
            break;
          }
          case 1521: {
            FcMnySld = input.ReadDouble();
            break;
          }
          case 1546: {
            if (maxFutDttm_ == null) {
              MaxFutDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxFutDttm);
            break;
          }
          case 1573: {
            FcPnlMid = input.ReadFloat();
            break;
          }
          case 1597: {
            FcPnlClr = input.ReadFloat();
            break;
          }
          case 1621: {
            FcPnlDay = input.ReadFloat();
            break;
          }
          case 1640: {
            OpCnAbsCurPos = input.ReadInt32();
            break;
          }
          case 1664: {
            OpCnAbsOpnClr = input.ReadInt32();
            break;
          }
          case 1688: {
            OpCnAbsOpnPrv = input.ReadInt32();
            break;
          }
          case 1712: {
            OpCnAbsOpnPos = input.ReadInt32();
            break;
          }
          case 1736: {
            OpCnAbsOpnBrk = input.ReadInt32();
            break;
          }
          case 1760: {
            OpCnPosCall = input.ReadInt32();
            break;
          }
          case 1784: {
            OpCnPosPut = input.ReadInt32();
            break;
          }
          case 1808: {
            OpCnAbsPair = input.ReadInt32();
            break;
          }
          case 1837: {
            OpCnAbsAtmEquiv = input.ReadFloat();
            break;
          }
          case 1856: {
            OpCnBot = input.ReadInt32();
            break;
          }
          case 1880: {
            OpCnSld = input.ReadInt32();
            break;
          }
          case 1905: {
            OpMnyBot = input.ReadDouble();
            break;
          }
          case 1929: {
            OpMnySld = input.ReadDouble();
            break;
          }
          case 1957: {
            OpPremBot = input.ReadFloat();
            break;
          }
          case 1981: {
            OpPremSld = input.ReadFloat();
            break;
          }
          case 2002: {
            if (maxOptDttm_ == null) {
              MaxOptDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxOptDttm);
            break;
          }
          case 2025: {
            OpPnlVol = input.ReadDouble();
            break;
          }
          case 2049: {
            OpPnlMid = input.ReadDouble();
            break;
          }
          case 2073: {
            OpPnlClr = input.ReadDouble();
            break;
          }
          case 2101: {
            OpPnlBrk = input.ReadFloat();
            break;
          }
          case 2125: {
            OpPnlDay = input.ReadFloat();
            break;
          }
          case 2149: {
            OpDnPnlDay = input.ReadFloat();
            break;
          }
          case 2173: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 2197: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 2221: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 2245: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 2269: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 2293: {
            OpDayDelta = input.ReadFloat();
            break;
          }
          case 2317: {
            OpTrdDelta = input.ReadFloat();
            break;
          }
          case 2341: {
            OpnDelta = input.ReadFloat();
            break;
          }
          case 2365: {
            ContHedgePnl = input.ReadFloat();
            break;
          }
          case 2389: {
            ContHedgePnl1 = input.ReadFloat();
            break;
          }
          case 2413: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 2437: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 2461: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 2485: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 2509: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 2533: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 2557: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 2581: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 2605: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 2629: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 2653: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 2677: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 2701: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 2773: {
            PctIvChange = input.ReadFloat();
            break;
          }
          case 2797: {
            PctIvVega = input.ReadFloat();
            break;
          }
          case 2821: {
            PctTvChange = input.ReadFloat();
            break;
          }
          case 2845: {
            PctTvVega = input.ReadFloat();
            break;
          }
          case 2869: {
            FutWidthMny = input.ReadFloat();
            break;
          }
          case 2893: {
            OptWidthMny = input.ReadFloat();
            break;
          }
          case 2917: {
            DayDDelta = input.ReadFloat();
            break;
          }
          case 2941: {
            Delta = input.ReadFloat();
            break;
          }
          case 2965: {
            Ddelta = input.ReadFloat();
            break;
          }
          case 2989: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 3013: {
            DdDecay = input.ReadFloat();
            break;
          }
          case 3037: {
            Gamma = input.ReadFloat();
            break;
          }
          case 3061: {
            DGamma = input.ReadFloat();
            break;
          }
          case 3085: {
            Theta = input.ReadFloat();
            break;
          }
          case 3109: {
            Rho = input.ReadFloat();
            break;
          }
          case 3133: {
            Vega = input.ReadFloat();
            break;
          }
          case 3157: {
            TVega = input.ReadFloat();
            break;
          }
          case 3181: {
            WVega = input.ReadFloat();
            break;
          }
          case 3205: {
            WtVega = input.ReadFloat();
            break;
          }
          case 3229: {
            IvolVe = input.ReadFloat();
            break;
          }
          case 3253: {
            Volga = input.ReadFloat();
            break;
          }
          case 3277: {
            Vanna = input.ReadFloat();
            break;
          }
          case 3301: {
            Slope = input.ReadFloat();
            break;
          }
          case 3325: {
            Avega = input.ReadFloat();
            break;
          }
          case 3349: {
            Atheta = input.ReadFloat();
            break;
          }
          case 3373: {
            HedgeGamma = input.ReadFloat();
            break;
          }
          case 3397: {
            HedgeDGamma = input.ReadFloat();
            break;
          }
          case 3421: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 3445: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 3469: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 3493: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 3517: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 3541: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 3565: {
            WtVeM1 = input.ReadFloat();
            break;
          }
          case 3589: {
            WtVeM2 = input.ReadFloat();
            break;
          }
          case 3613: {
            WtVeM3 = input.ReadFloat();
            break;
          }
          case 3637: {
            WtVeM4 = input.ReadFloat();
            break;
          }
          case 3661: {
            WtVeM5 = input.ReadFloat();
            break;
          }
          case 3685: {
            PinXX = input.ReadFloat();
            break;
          }
          case 3709: {
            OpnDeBelow = input.ReadFloat();
            break;
          }
          case 3733: {
            OpnDeAbove = input.ReadFloat();
            break;
          }
          case 3757: {
            OpnDDeBelow = input.ReadFloat();
            break;
          }
          case 3781: {
            OpnDDeAbove = input.ReadFloat();
            break;
          }
          case 3805: {
            PosDeBelow = input.ReadFloat();
            break;
          }
          case 3829: {
            PosDeAbove = input.ReadFloat();
            break;
          }
          case 3853: {
            PosDDeBelow = input.ReadFloat();
            break;
          }
          case 3877: {
            PosDDeAbove = input.ReadFloat();
            break;
          }
          case 3901: {
            PosHedgeDeltaEx = input.ReadFloat();
            break;
          }
          case 3925: {
            PosHedgeDDeltaEx = input.ReadFloat();
            break;
          }
          case 3949: {
            TEdge = input.ReadFloat();
            break;
          }
          case 3973: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 3997: {
            TEdgePr = input.ReadFloat();
            break;
          }
          case 4021: {
            TEdgeMultPr = input.ReadFloat();
            break;
          }
          case 4040: {
            NumTVolErrors = input.ReadInt32();
            break;
          }
          case 4069: {
            PairPnl = input.ReadFloat();
            break;
          }
          case 4093: {
            PosTEdgeWV = input.ReadFloat();
            break;
          }
          case 4117: {
            NegTEdgeWV = input.ReadFloat();
            break;
          }
          case 4141: {
            BadTEdgeWV = input.ReadFloat();
            break;
          }
          case 4165: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 4189: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 4213: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 4237: {
            Span01 = input.ReadFloat();
            break;
          }
          case 4261: {
            Span02 = input.ReadFloat();
            break;
          }
          case 4285: {
            Span03 = input.ReadFloat();
            break;
          }
          case 4309: {
            Span04 = input.ReadFloat();
            break;
          }
          case 4333: {
            Span05 = input.ReadFloat();
            break;
          }
          case 4357: {
            Span06 = input.ReadFloat();
            break;
          }
          case 4381: {
            Span07 = input.ReadFloat();
            break;
          }
          case 4405: {
            Span08 = input.ReadFloat();
            break;
          }
          case 4429: {
            Span09 = input.ReadFloat();
            break;
          }
          case 4453: {
            Span10 = input.ReadFloat();
            break;
          }
          case 4477: {
            Span11 = input.ReadFloat();
            break;
          }
          case 4501: {
            Span12 = input.ReadFloat();
            break;
          }
          case 4525: {
            Span13 = input.ReadFloat();
            break;
          }
          case 4549: {
            Span14 = input.ReadFloat();
            break;
          }
          case 4573: {
            Span15 = input.ReadFloat();
            break;
          }
          case 4597: {
            Span16 = input.ReadFloat();
            break;
          }
          case 4621: {
            FutLiqRisk = input.ReadFloat();
            break;
          }
          case 4645: {
            OptLiqRisk = input.ReadFloat();
            break;
          }
          case 4664: {
            FcBotC0 = input.ReadInt32();
            break;
          }
          case 4688: {
            FcSldC0 = input.ReadInt32();
            break;
          }
          case 4717: {
            FcMnyC0 = input.ReadFloat();
            break;
          }
          case 4736: {
            FcBotC1 = input.ReadInt32();
            break;
          }
          case 4760: {
            FcSldC1 = input.ReadInt32();
            break;
          }
          case 4789: {
            FcMnyC1 = input.ReadFloat();
            break;
          }
          case 4813: {
            FutMargin = input.ReadFloat();
            break;
          }
          case 4832: {
            NumFutErrors = input.ReadInt32();
            break;
          }
          case 4856: {
            NumOptErrors = input.ReadInt32();
            break;
          }
          case 4880: {
            UpdateSource = (global::Spiderrock.Protobuf.R5Source) input.ReadEnum();
            break;
          }
          case 4904: {
            FutMarkFlag = (global::Spiderrock.Protobuf.MktErrFlag) input.ReadEnum();
            break;
          }
          case 4928: {
            OptMarkFlag = (global::Spiderrock.Protobuf.MktErrFlag) input.ReadEnum();
            break;
          }
          case 4954: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FutureRiskSummaryV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.FutureRiskSummaryV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
          accnt_ = other.accnt_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fkey" field.</summary>
        public const int FkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey fkey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Fkey {
          get { return fkey_; }
          set {
            fkey_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 13;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fkey, other.Fkey)) return false;
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (fkey_ != null) hash ^= Fkey.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (fkey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Fkey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (fkey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Fkey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (fkey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.fkey_ != null) {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Fkey.MergeFrom(other.Fkey);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (fkey_ == null) {
                  Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Fkey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (fkey_ == null) {
                  Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Fkey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
