// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/OptionPositionRecordV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/OptionPositionRecordV5.proto</summary>
  public static partial class OptionPositionRecordV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/OptionPositionRecordV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionPositionRecordV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRSaXNrL09wdGlvblBvc2l0aW9uUmVjb3JkVjUu",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvItwhChZP",
            "cHRpb25Qb3NpdGlvblJlY29yZFY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESPgoEcGtleRgCIAEoCzIw",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuT3B0aW9uUG9zaXRpb25SZWNvcmRWNS5Q",
            "S2V5EhgKEHJpc2tfc2VydmVyX2NvZGUYZyABKAkSEQoJYWdnX2dyb3VwGGog",
            "ASgJEiwKBGZrZXkYbSABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGly",
            "eUtleRIuCgZ0aWNrZXIYcCABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRp",
            "Y2tlcktleRIyCgdleF90eXBlGHMgASgOMiEuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5FeGVyY2lzZVR5cGUSMwoKbXVsdGloZWRnZRh2IAEoDjIfLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTXVsdGloZWRnZRI5ChFtdWx0aWhlZGdlX3NvdXJjZRh5",
            "IAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EhoKEm11bHRp",
            "aGVkZ2VfcFZSYXRpbxh8IAEoAhI0CgtvcHRpb25fdHlwZRh/IAEoDjIfLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuT3B0aW9uVHlwZRITCgpjYXNoX29uX2V4GIIB",
            "IAEoAhIVCgxzdHJpa2VfcmF0aW8YhQEgASgCEhQKC3VfcHJjX3JhdGlvGIgB",
            "IAEoAhIaChF1bmRlcmxpZXJzX3Blcl9jbhiLASABKAUSOwoOdW5kZXJsaWVy",
            "X3R5cGUYjgEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5VbmRlcmxpZXJU",
            "eXBlEhMKCnRpY2tfdmFsdWUYkQEgASgCEhQKC3BvaW50X3ZhbHVlGJQBIAEo",
            "AhI2Cg5wb2ludF9jdXJyZW5jeRiXASABKA4yHS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkN1cnJlbmN5EjcKDHByaWNlX2Zvcm1hdBiaASABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlByaWNlRm9ybWF0EjkKDnVfcHJpY2VfZm9ybWF0GJ0B",
            "IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VGb3JtYXQSDgoFdV9w",
            "cmMYoAEgASgBEg4KBXVfYmlkGKMBIAEoARIOCgV1X2FzaximASABKAESDwoG",
            "dV9tYXJrGKkBIAEoARI4Cg11X21hcmtfc291cmNlGKwBIAEoDjIgLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuVU1hcmtTb3VyY2USEAoHb3B0X2JpZBivASABKAIS",
            "EAoHb3B0X2FzaxiyASABKAISFQoMb3B0X21pZF9tYXJrGLUBIAEoARIVCgxv",
            "cHRfdm9sX21hcmsYuAEgASgBEhMKCnVfb3BuX21hcmsYuwEgASgBEhkKEG9w",
            "dF9vcG5fdm9sX21hcmsYvgEgASgBEhkKEG9wdF9vcG5fbWlkX21hcmsYwQEg",
            "ASgBEhkKEG9wdF9vcG5fY2xyX21hcmsYxAEgASgBEhgKD29wdF9vcG5fcG9z",
            "X3BydhjHASABKAUSGAoPb3B0X29wbl9wb3NfY2xyGMoBIAEoBRIUCgtvcHRf",
            "b3BuX3BvcxjNASABKAUSPQoPb3B0X29wbl9wb3Nfc3JjGNABIAEoDjIjLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuUG9zaXRpb25Tb3VyY2USDwoGY25fYm90GNMB",
            "IAEoBRIPCgZjbl9zbGQY1gEgASgFEhIKCWNuX29wZW5lZBjZASABKAUSEgoJ",
            "Y25fY2xvc2VkGNwBIAEoBRIUCgtlZGdlX29wZW5lZBjfASABKAISFAoLZWRn",
            "ZV9jbG9zZWQY4gEgASgCEhIKCXRyZF9kZWx0YRjlASABKAISEgoJdHJkX2dh",
            "bW1hGOgBIAEoAhIWCg10cmRfZGVsdGFfbW55GOsBIAEoAhIUCgtvcHRfbW55",
            "X2JvdBjuASABKAESFAoLb3B0X21ueV9zbGQY8QEgASgBEhAKB2RheV9wbmwY",
            "9AEgASgCEhMKCmRuX2RheV9wbmwY9wEgASgCEhkKEG9wbl9wbmxfbWlkX21h",
            "cmsY+gEgASgCEhkKEG9wbl9wbmxfdm9sX21hcmsY/QEgASgCEhkKEG9wbl9w",
            "bmxfY2xyX21hcmsYgAIgASgCEhcKDmNuX25ldF9vcG5fcG9zGIMCIAEoBRIX",
            "Cg5jbl9uZXRfY3VyX3BvcxiGAiABKAUSFQoMY25fYXRtX2VxdWl2GIkCIAEo",
            "AhINCgRiZXRhGIwCIAEoAhI1CgtiZXRhX3NvdXJjZRiPAiABKA4yHy5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkJldGFTb3VyY2USEQoIZGl2X2RheXMYkgIgASgF",
            "Ej4KEGhlZGdlX2RlbHRhX3J1bGUYlQIgASgOMiMuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5IZWRnZURlbHRhUnVsZRIUCgtiaW5hcnlfZGF5cxiYAiABKAISDQoE",
            "ZGF5cxibAiABKAUSDgoFeWVhcnMYngIgASgCEg0KBHJhdGUYoQIgASgCEg0K",
            "BHNkaXYYpAIgASgCEg0KBGRkaXYYpwIgASgCEg0KBGRhZGoYqgIgASgCEhAK",
            "B2F0bV92b2wYrQIgASgCEhEKCGF0bV92ZWdhGLACIAEoAhIOCgVpX3ZvbBiz",
            "AiABKAISMwoJaV92b2xfc3JjGLYCIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuTWFya1NvdXJjZRILCgJkZRi5AiABKAISCwoCZ2EYvAIgASgCEgsKAnRo",
            "GL8CIAEoAhILCgJ2ZRjCAiABKAISCwoCcmgYxQIgASgCEgsKAnBoGMgCIAEo",
            "AhILCgJ2bxjLAiABKAISCwoCdmEYzgIgASgCEhEKCGRlX2RlY2F5GNECIAEo",
            "AhIMCgNlcnIY1AIgASgFEhEKCHZlX3Nsb3BlGNcCIAEoAhIRCghoZWRnZV9k",
            "ZRjaAiABKAISEQoIaGVkZ2VfZ2EY3QIgASgCEhEKCHNyX3Nsb3BlGOACIAEo",
            "AhIuCglpc19iaW5hcnkY4wIgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5Z",
            "ZXNObxIUCgtwcmVtX292X3BhchjmAiABKAISDAoDeGRlGOkCIAEoAhIRCghs",
            "b19ib3VuZBjsAiABKAISDQoEc3U5MBjvAiABKAISDQoEc2Q5MBjyAiABKAIS",
            "DQoEc3U1MBj1AiABKAISDQoEc2Q1MBj4AiABKAISDQoEc3UxNRj7AiABKAIS",
            "DQoEc2QxNRj+AiABKAISDQoEc3UxMBiBAyABKAISDQoEc2QxMBiEAyABKAIS",
            "DQoEc3UwNhiHAyABKAISDQoEc2QwOBiKAyABKAISDQoEc3UwNRiNAyABKAIS",
            "DQoEc2QwNRiQAyABKAISDQoEc3UxZRiTAyABKAISDQoEc2QxZRiWAyABKAIS",
            "DQoEc3UyZRiZAyABKAISDQoEc2QyZRicAyABKAISDQoEZWFybhifAyABKAIS",
            "DQoEY2FzaBiiAyABKAISEwoKdGhlb19tb2RlbBilAyABKAkSDgoFdF92b2wY",
            "qAMgASgCEg4KBXRfb3B4GKsDIAEoAhISCgl0X2JPcG5fcHgYrgMgASgCEhIK",
            "CXRfc09wbl9weBixAyABKAISEgoJdF9iQ2xzX3B4GLQDIAEoAhISCgl0X3ND",
            "bHNfcHgYtwMgASgCEg0KBHRfZGUYugMgASgCEg0KBHRfZ2EYvQMgASgCEg4K",
            "BXRfZXJyGMADIAEoBRIUCgt0aGVvX21vZGVsMhjDAyABKAkSDwoGdF92b2wy",
            "GMYDIAEoAhIPCgZ0X29weDIYyQMgASgCEg8KBnRfZXJyMhjMAyABKAUSEQoI",
            "eWVhcnNfcHIYzwMgASgCEhAKB3JhdGVfcHIY0gMgASgCEhAKB3NkaXZfcHIY",
            "1QMgASgCEhAKB2RkaXZfcHIY2AMgASgCEhEKCGlfdm9sX3ByGNsDIAEoAhIO",
            "CgVkZV9wchjeAyABKAISDgoFZ2FfcHIY4QMgASgCEg4KBXRoX3ByGOQDIAEo",
            "AhIOCgV2ZV9wchjnAyABKAISDgoFcmhfcHIY6gMgASgCEg4KBXBoX3ByGO0D",
            "IAEoAhIOCgV2b19wchjwAyABKAISDgoFdmFfcHIY8wMgASgCEg8KBmVycl9w",
            "chj2AyABKAUSFAoLdmVfc2xvcGVfcHIY+QMgASgCEhQKC2hlZGdlX2RlX3By",
            "GPwDIAEoAhIRCgh0X3ZvbF9wchj/AyABKAISEQoIdF9vcHhfcHIYggQgASgC",
            "EhAKB3RfZGVfcHIYhQQgASgCEhIKCXRfdm9sX3ByMhiIBCABKAISEgoJdF9v",
            "cHhfcHIyGIsEIAEoAhIRCgh0X2RlX3ByMhiOBCABKAISDwoGeGRlX3ByGJEE",
            "IAEoAhIXCg5tYXJnaW5fdURuX3ZEbhjaBCABKAISFwoObWFyZ2luX3VEbl92",
            "VXAY2wQgASgCEhcKDm1hcmdpbl91VXBfdkRuGNwEIAEoAhIXCg5tYXJnaW5f",
            "dVVwX3ZVcBjdBCABKAISEwoKb3BuX3BubF9kZRiUBCABKAISEwoKb3BuX3Bu",
            "bF9nYRiXBCABKAISEwoKb3BuX3BubF90aBiaBCABKAISEwoKb3BuX3BubF92",
            "ZRidBCABKAISEwoKb3BuX3BubF92bxigBCABKAISEwoKb3BuX3BubF92YRij",
            "BCABKAISEwoKb3BuX3BubF9zbBimBCABKAISFQoMb3BuX3BubF9yYXRlGKkE",
            "IAEoAhIVCgxvcG5fcG5sX3NEaXYYrAQgASgCEhUKDG9wbl9wbmxfZERpdhiv",
            "BCABKAISEwoKb3BuX3BubF9zdhiyBCABKAISFAoLb3BuX3BubF9lcnIYtQQg",
            "ASgCEhIKCXNoX2JvdF9jMBi4BCABKAUSEgoJc2hfc2xkX2MwGLsEIAEoBRIS",
            "CglzaF9tbnlfYzAYvgQgASgCEhIKCXNoX2JvdF9jMRjBBCABKAUSEgoJc2hf",
            "c2xkX2MxGMQEIAEoBRISCglzaF9tbnlfYzEYxwQgASgCEjsKDm1hcmtfZXJy",
            "X2NvZGVzGMoEIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuTWFya0Vycm9y",
            "Q29kZRIRCghleF92YWx1ZRjNBCABKAISMwoKcmlza19hbGVydBjQBCABKA4y",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLkFsZXJ0Q29kZRIXCg5udW1fZXhlY3V0",
            "aW9ucxjTBCABKAUSMgoNbWF4X2V4ZWNfZHR0bRjWBCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEi4KCXRpbWVzdGFtcBjZBCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wGsIBCgRQS2V5EiwKBG9rZXkYCiABKAsy",
            "Hi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRINCgVhY2NudBgLIAEo",
            "CRIwCgp0cmFkZV9kYXRlGAwgASgLMhwuc3BpZGVycm9jay5wcm90b2J1Zi5E",
            "YXRlS2V5EjYKDHJpc2tfc2Vzc2lvbhgNIAEoDjIgLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuUmlza1Nlc3Npb24SEwoLY2xpZW50X2Zpcm0YDiABKAliBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionPositionRecordV5), global::Spiderrock.Protobuf.OptionPositionRecordV5.Parser, new[]{ "Meta", "Pkey", "RiskServerCode", "AggGroup", "Fkey", "Ticker", "ExType", "Multihedge", "MultihedgeSource", "MultihedgePVRatio", "OptionType", "CashOnEx", "StrikeRatio", "UPrcRatio", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "PriceFormat", "UPriceFormat", "UPrc", "UBid", "UAsk", "UMark", "UMarkSource", "OptBid", "OptAsk", "OptMidMark", "OptVolMark", "UOpnMark", "OptOpnVolMark", "OptOpnMidMark", "OptOpnClrMark", "OptOpnPosPrv", "OptOpnPosClr", "OptOpnPos", "OptOpnPosSrc", "CnBot", "CnSld", "CnOpened", "CnClosed", "EdgeOpened", "EdgeClosed", "TrdDelta", "TrdGamma", "TrdDeltaMny", "OptMnyBot", "OptMnySld", "DayPnl", "DnDayPnl", "OpnPnlMidMark", "OpnPnlVolMark", "OpnPnlClrMark", "CnNetOpnPos", "CnNetCurPos", "CnAtmEquiv", "Beta", "BetaSource", "DivDays", "HedgeDeltaRule", "BinaryDays", "Days", "Years", "Rate", "Sdiv", "Ddiv", "Dadj", "AtmVol", "AtmVega", "IVol", "IVolSrc", "De", "Ga", "Th", "Ve", "Rh", "Ph", "Vo", "Va", "DeDecay", "Err", "VeSlope", "HedgeDe", "HedgeGa", "SrSlope", "IsBinary", "PremOvPar", "Xde", "LoBound", "Su90", "Sd90", "Su50", "Sd50", "Su15", "Sd15", "Su10", "Sd10", "Su06", "Sd08", "Su05", "Sd05", "Su1E", "Sd1E", "Su2E", "Sd2E", "Earn", "Cash", "TheoModel", "TVol", "TOpx", "TBOpnPx", "TSOpnPx", "TBClsPx", "TSClsPx", "TDe", "TGa", "TErr", "TheoModel2", "TVol2", "TOpx2", "TErr2", "YearsPr", "RatePr", "SdivPr", "DdivPr", "IVolPr", "DePr", "GaPr", "ThPr", "VePr", "RhPr", "PhPr", "VoPr", "VaPr", "ErrPr", "VeSlopePr", "HedgeDePr", "TVolPr", "TOpxPr", "TDePr", "TVolPr2", "TOpxPr2", "TDePr2", "XdePr", "MarginUDnVDn", "MarginUDnVUp", "MarginUUpVDn", "MarginUUpVUp", "OpnPnlDe", "OpnPnlGa", "OpnPnlTh", "OpnPnlVe", "OpnPnlVo", "OpnPnlVa", "OpnPnlSl", "OpnPnlRate", "OpnPnlSDiv", "OpnPnlDDiv", "OpnPnlSv", "OpnPnlErr", "ShBotC0", "ShSldC0", "ShMnyC0", "ShBotC1", "ShSldC1", "ShMnyC1", "MarkErrCodes", "ExValue", "RiskAlert", "NumExecutions", "MaxExecDttm", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey), global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey.Parser, new[]{ "Okey", "Accnt", "TradeDate", "RiskSession", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///OptionPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
  ///These records are published by a CoreRiskServer and represent the position and risk markup detail for a single option series.
  ///New records are published immediately when a position changes and about once per minute if no position has changed.
  ///Note that all records for a single underlier are published simultaneously and records for the same chain should have consistent marks.
  /// </summary>
  public sealed partial class OptionPositionRecordV5 : pb::IMessage<OptionPositionRecordV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionPositionRecordV5> _parser = new pb::MessageParser<OptionPositionRecordV5>(() => new OptionPositionRecordV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionPositionRecordV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.OptionPositionRecordV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPositionRecordV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPositionRecordV5(OptionPositionRecordV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      riskServerCode_ = other.riskServerCode_;
      aggGroup_ = other.aggGroup_;
      fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      exType_ = other.exType_;
      multihedge_ = other.multihedge_;
      multihedgeSource_ = other.multihedgeSource_ != null ? other.multihedgeSource_.Clone() : null;
      multihedgePVRatio_ = other.multihedgePVRatio_;
      optionType_ = other.optionType_;
      cashOnEx_ = other.cashOnEx_;
      strikeRatio_ = other.strikeRatio_;
      uPrcRatio_ = other.uPrcRatio_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      uPrc_ = other.uPrc_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      uMark_ = other.uMark_;
      uMarkSource_ = other.uMarkSource_;
      optBid_ = other.optBid_;
      optAsk_ = other.optAsk_;
      optMidMark_ = other.optMidMark_;
      optVolMark_ = other.optVolMark_;
      uOpnMark_ = other.uOpnMark_;
      optOpnVolMark_ = other.optOpnVolMark_;
      optOpnMidMark_ = other.optOpnMidMark_;
      optOpnClrMark_ = other.optOpnClrMark_;
      optOpnPosPrv_ = other.optOpnPosPrv_;
      optOpnPosClr_ = other.optOpnPosClr_;
      optOpnPos_ = other.optOpnPos_;
      optOpnPosSrc_ = other.optOpnPosSrc_;
      cnBot_ = other.cnBot_;
      cnSld_ = other.cnSld_;
      cnOpened_ = other.cnOpened_;
      cnClosed_ = other.cnClosed_;
      edgeOpened_ = other.edgeOpened_;
      edgeClosed_ = other.edgeClosed_;
      trdDelta_ = other.trdDelta_;
      trdGamma_ = other.trdGamma_;
      trdDeltaMny_ = other.trdDeltaMny_;
      optMnyBot_ = other.optMnyBot_;
      optMnySld_ = other.optMnySld_;
      dayPnl_ = other.dayPnl_;
      dnDayPnl_ = other.dnDayPnl_;
      opnPnlMidMark_ = other.opnPnlMidMark_;
      opnPnlVolMark_ = other.opnPnlVolMark_;
      opnPnlClrMark_ = other.opnPnlClrMark_;
      cnNetOpnPos_ = other.cnNetOpnPos_;
      cnNetCurPos_ = other.cnNetCurPos_;
      cnAtmEquiv_ = other.cnAtmEquiv_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      divDays_ = other.divDays_;
      hedgeDeltaRule_ = other.hedgeDeltaRule_;
      binaryDays_ = other.binaryDays_;
      days_ = other.days_;
      years_ = other.years_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      dadj_ = other.dadj_;
      atmVol_ = other.atmVol_;
      atmVega_ = other.atmVega_;
      iVol_ = other.iVol_;
      iVolSrc_ = other.iVolSrc_;
      de_ = other.de_;
      ga_ = other.ga_;
      th_ = other.th_;
      ve_ = other.ve_;
      rh_ = other.rh_;
      ph_ = other.ph_;
      vo_ = other.vo_;
      va_ = other.va_;
      deDecay_ = other.deDecay_;
      err_ = other.err_;
      veSlope_ = other.veSlope_;
      hedgeDe_ = other.hedgeDe_;
      hedgeGa_ = other.hedgeGa_;
      srSlope_ = other.srSlope_;
      isBinary_ = other.isBinary_;
      premOvPar_ = other.premOvPar_;
      xde_ = other.xde_;
      loBound_ = other.loBound_;
      su90_ = other.su90_;
      sd90_ = other.sd90_;
      su50_ = other.su50_;
      sd50_ = other.sd50_;
      su15_ = other.su15_;
      sd15_ = other.sd15_;
      su10_ = other.su10_;
      sd10_ = other.sd10_;
      su06_ = other.su06_;
      sd08_ = other.sd08_;
      su05_ = other.su05_;
      sd05_ = other.sd05_;
      su1E_ = other.su1E_;
      sd1E_ = other.sd1E_;
      su2E_ = other.su2E_;
      sd2E_ = other.sd2E_;
      earn_ = other.earn_;
      cash_ = other.cash_;
      theoModel_ = other.theoModel_;
      tVol_ = other.tVol_;
      tOpx_ = other.tOpx_;
      tBOpnPx_ = other.tBOpnPx_;
      tSOpnPx_ = other.tSOpnPx_;
      tBClsPx_ = other.tBClsPx_;
      tSClsPx_ = other.tSClsPx_;
      tDe_ = other.tDe_;
      tGa_ = other.tGa_;
      tErr_ = other.tErr_;
      theoModel2_ = other.theoModel2_;
      tVol2_ = other.tVol2_;
      tOpx2_ = other.tOpx2_;
      tErr2_ = other.tErr2_;
      yearsPr_ = other.yearsPr_;
      ratePr_ = other.ratePr_;
      sdivPr_ = other.sdivPr_;
      ddivPr_ = other.ddivPr_;
      iVolPr_ = other.iVolPr_;
      dePr_ = other.dePr_;
      gaPr_ = other.gaPr_;
      thPr_ = other.thPr_;
      vePr_ = other.vePr_;
      rhPr_ = other.rhPr_;
      phPr_ = other.phPr_;
      voPr_ = other.voPr_;
      vaPr_ = other.vaPr_;
      errPr_ = other.errPr_;
      veSlopePr_ = other.veSlopePr_;
      hedgeDePr_ = other.hedgeDePr_;
      tVolPr_ = other.tVolPr_;
      tOpxPr_ = other.tOpxPr_;
      tDePr_ = other.tDePr_;
      tVolPr2_ = other.tVolPr2_;
      tOpxPr2_ = other.tOpxPr2_;
      tDePr2_ = other.tDePr2_;
      xdePr_ = other.xdePr_;
      marginUDnVDn_ = other.marginUDnVDn_;
      marginUDnVUp_ = other.marginUDnVUp_;
      marginUUpVDn_ = other.marginUUpVDn_;
      marginUUpVUp_ = other.marginUUpVUp_;
      opnPnlDe_ = other.opnPnlDe_;
      opnPnlGa_ = other.opnPnlGa_;
      opnPnlTh_ = other.opnPnlTh_;
      opnPnlVe_ = other.opnPnlVe_;
      opnPnlVo_ = other.opnPnlVo_;
      opnPnlVa_ = other.opnPnlVa_;
      opnPnlSl_ = other.opnPnlSl_;
      opnPnlRate_ = other.opnPnlRate_;
      opnPnlSDiv_ = other.opnPnlSDiv_;
      opnPnlDDiv_ = other.opnPnlDDiv_;
      opnPnlSv_ = other.opnPnlSv_;
      opnPnlErr_ = other.opnPnlErr_;
      shBotC0_ = other.shBotC0_;
      shSldC0_ = other.shSldC0_;
      shMnyC0_ = other.shMnyC0_;
      shBotC1_ = other.shBotC1_;
      shSldC1_ = other.shSldC1_;
      shMnyC1_ = other.shMnyC1_;
      markErrCodes_ = other.markErrCodes_;
      exValue_ = other.exValue_;
      riskAlert_ = other.riskAlert_;
      numExecutions_ = other.numExecutions_;
      maxExecDttm_ = other.maxExecDttm_ != null ? other.maxExecDttm_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionPositionRecordV5 Clone() {
      return new OptionPositionRecordV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 103;
    private string riskServerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agg_group" field.</summary>
    public const int AggGroupFieldNumber = 106;
    private string aggGroup_ = "";
    /// <summary>
    /// SR assigned agg group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AggGroup {
      get { return aggGroup_; }
      set {
        aggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fkey" field.</summary>
    public const int FkeyFieldNumber = 109;
    private global::Spiderrock.Protobuf.ExpiryKey fkey_;
    /// <summary>
    /// underlying future (if written on a future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey Fkey {
      get { return fkey_; }
      set {
        fkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 112;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 115;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "multihedge" field.</summary>
    public const int MultihedgeFieldNumber = 118;
    private global::Spiderrock.Protobuf.Multihedge multihedge_ = global::Spiderrock.Protobuf.Multihedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Multihedge Multihedge {
      get { return multihedge_; }
      set {
        multihedge_ = value;
      }
    }

    /// <summary>Field number for the "multihedge_source" field.</summary>
    public const int MultihedgeSourceFieldNumber = 121;
    private global::Spiderrock.Protobuf.TickerKey multihedgeSource_;
    /// <summary>
    /// MH Ticker Key (starts with '_') (if exists)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey MultihedgeSource {
      get { return multihedgeSource_; }
      set {
        multihedgeSource_ = value;
      }
    }

    /// <summary>Field number for the "multihedge_pVRatio" field.</summary>
    public const int MultihedgePVRatioFieldNumber = 124;
    private float multihedgePVRatio_;
    /// <summary>
    /// pv multiplier (fraction of underlier value (uPerCn x uPrc) / SUM(uPerCn x uPrc) associated with this fragment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MultihedgePVRatio {
      get { return multihedgePVRatio_; }
      set {
        multihedgePVRatio_ = value;
      }
    }

    /// <summary>Field number for the "option_type" field.</summary>
    public const int OptionTypeFieldNumber = 127;
    private global::Spiderrock.Protobuf.OptionType optionType_ = global::Spiderrock.Protobuf.OptionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionType OptionType {
      get { return optionType_; }
      set {
        optionType_ = value;
      }
    }

    /// <summary>Field number for the "cash_on_ex" field.</summary>
    public const int CashOnExFieldNumber = 130;
    private float cashOnEx_;
    /// <summary>
    /// cash on settlement (multihedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CashOnEx {
      get { return cashOnEx_; }
      set {
        cashOnEx_ = value;
      }
    }

    /// <summary>Field number for the "strike_ratio" field.</summary>
    public const int StrikeRatioFieldNumber = 133;
    private float strikeRatio_;
    /// <summary>
    /// strike ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StrikeRatio {
      get { return strikeRatio_; }
      set {
        strikeRatio_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 136;
    private float uPrcRatio_;
    /// <summary>
    /// stock price multiplier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 139;
    private int underliersPerCn_;
    /// <summary>
    /// underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 142;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// type of underlier (affects $greek calculations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 145;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 148;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 151;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 154;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 157;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// underlier price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 160;
    private double uPrc_;
    /// <summary>
    /// current underlier price (any market session) (persists if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 163;
    private double uBid_;
    /// <summary>
    /// current underlier bid (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 166;
    private double uAsk_;
    /// <summary>
    /// current underlier ask (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "u_mark" field.</summary>
    public const int UMarkFieldNumber = 169;
    private double uMark_;
    /// <summary>
    /// current underlier mark (usually mid market) (freezes at SR CloseMarkTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UMark {
      get { return uMark_; }
      set {
        uMark_ = value;
      }
    }

    /// <summary>Field number for the "u_mark_source" field.</summary>
    public const int UMarkSourceFieldNumber = 172;
    private global::Spiderrock.Protobuf.UMarkSource uMarkSource_ = global::Spiderrock.Protobuf.UMarkSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UMarkSource UMarkSource {
      get { return uMarkSource_; }
      set {
        uMarkSource_ = value;
      }
    }

    /// <summary>Field number for the "opt_bid" field.</summary>
    public const int OptBidFieldNumber = 175;
    private float optBid_;
    /// <summary>
    /// current option market bid (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptBid {
      get { return optBid_; }
      set {
        optBid_ = value;
      }
    }

    /// <summary>Field number for the "opt_ask" field.</summary>
    public const int OptAskFieldNumber = 178;
    private float optAsk_;
    /// <summary>
    /// current option market ask (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptAsk {
      get { return optAsk_; }
      set {
        optAsk_ = value;
      }
    }

    /// <summary>Field number for the "opt_mid_mark" field.</summary>
    public const int OptMidMarkFieldNumber = 181;
    private double optMidMark_;
    /// <summary>
    /// current option mark (mid market) (freezes at SR CloseMarkTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptMidMark {
      get { return optMidMark_; }
      set {
        optMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opt_vol_mark" field.</summary>
    public const int OptVolMarkFieldNumber = 184;
    private double optVolMark_;
    /// <summary>
    /// current option mark (volatility surface) (freezes at SR CloseMarkTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptVolMark {
      get { return optVolMark_; }
      set {
        optVolMark_ = value;
      }
    }

    /// <summary>Field number for the "u_opn_mark" field.</summary>
    public const int UOpnMarkFieldNumber = 187;
    private double uOpnMark_;
    /// <summary>
    /// start-of-day SR underlier mark (rotated from prior day record) [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UOpnMark {
      get { return uOpnMark_; }
      set {
        uOpnMark_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_vol_mark" field.</summary>
    public const int OptOpnVolMarkFieldNumber = 190;
    private double optOpnVolMark_;
    /// <summary>
    /// start-of-day SR vol mark [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptOpnVolMark {
      get { return optOpnVolMark_; }
      set {
        optOpnVolMark_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_mid_mark" field.</summary>
    public const int OptOpnMidMarkFieldNumber = 193;
    private double optOpnMidMark_;
    /// <summary>
    /// start-of-day SR mid mark [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptOpnMidMark {
      get { return optOpnMidMark_; }
      set {
        optOpnMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_clr_mark" field.</summary>
    public const int OptOpnClrMarkFieldNumber = 196;
    private double optOpnClrMark_;
    /// <summary>
    /// start-of-day clearing mark [should be corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptOpnClrMark {
      get { return optOpnClrMark_; }
      set {
        optOpnClrMark_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_pos_prv" field.</summary>
    public const int OptOpnPosPrvFieldNumber = 199;
    private int optOpnPosPrv_;
    /// <summary>
    /// start-of-day SR contract position (rotated from prior day record) [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OptOpnPosPrv {
      get { return optOpnPosPrv_; }
      set {
        optOpnPosPrv_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_pos_clr" field.</summary>
    public const int OptOpnPosClrFieldNumber = 202;
    private int optOpnPosClr_;
    /// <summary>
    /// start-of-day CKR contract position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OptOpnPosClr {
      get { return optOpnPosClr_; }
      set {
        optOpnPosClr_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_pos" field.</summary>
    public const int OptOpnPosFieldNumber = 205;
    private int optOpnPos_;
    /// <summary>
    /// start of period contract position (effective; can be from either CLR or SR)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OptOpnPos {
      get { return optOpnPos_; }
      set {
        optOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "opt_opn_pos_src" field.</summary>
    public const int OptOpnPosSrcFieldNumber = 208;
    private global::Spiderrock.Protobuf.PositionSource optOpnPosSrc_ = global::Spiderrock.Protobuf.PositionSource.Unspecified;
    /// <summary>
    /// start of period position source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionSource OptOpnPosSrc {
      get { return optOpnPosSrc_; }
      set {
        optOpnPosSrc_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot" field.</summary>
    public const int CnBotFieldNumber = 211;
    private int cnBot_;
    /// <summary>
    /// number of contracts bot today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBot {
      get { return cnBot_; }
      set {
        cnBot_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld" field.</summary>
    public const int CnSldFieldNumber = 214;
    private int cnSld_;
    /// <summary>
    /// number of contracts sld today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSld {
      get { return cnSld_; }
      set {
        cnSld_ = value;
      }
    }

    /// <summary>Field number for the "cn_opened" field.</summary>
    public const int CnOpenedFieldNumber = 217;
    private int cnOpened_;
    /// <summary>
    /// number of contracts opened today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnOpened {
      get { return cnOpened_; }
      set {
        cnOpened_ = value;
      }
    }

    /// <summary>Field number for the "cn_closed" field.</summary>
    public const int CnClosedFieldNumber = 220;
    private int cnClosed_;
    /// <summary>
    /// number of contracts closed today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnClosed {
      get { return cnClosed_; }
      set {
        cnClosed_ = value;
      }
    }

    /// <summary>Field number for the "edge_opened" field.</summary>
    public const int EdgeOpenedFieldNumber = 223;
    private float edgeOpened_;
    /// <summary>
    /// edge from opening trades (model #1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EdgeOpened {
      get { return edgeOpened_; }
      set {
        edgeOpened_ = value;
      }
    }

    /// <summary>Field number for the "edge_closed" field.</summary>
    public const int EdgeClosedFieldNumber = 226;
    private float edgeClosed_;
    /// <summary>
    /// edge from closing trades (model #1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EdgeClosed {
      get { return edgeClosed_; }
      set {
        edgeClosed_ = value;
      }
    }

    /// <summary>Field number for the "trd_delta" field.</summary>
    public const int TrdDeltaFieldNumber = 229;
    private float trdDelta_;
    /// <summary>
    /// deltas from trades (fixed at the time of trade)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDelta {
      get { return trdDelta_; }
      set {
        trdDelta_ = value;
      }
    }

    /// <summary>Field number for the "trd_gamma" field.</summary>
    public const int TrdGammaFieldNumber = 232;
    private float trdGamma_;
    /// <summary>
    /// gamma from trades (fixed at the time of trade)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdGamma {
      get { return trdGamma_; }
      set {
        trdGamma_ = value;
      }
    }

    /// <summary>Field number for the "trd_delta_mny" field.</summary>
    public const int TrdDeltaMnyFieldNumber = 235;
    private float trdDeltaMny_;
    /// <summary>
    /// deltas x uPrc from trades (fixed at the time of trade)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDeltaMny {
      get { return trdDeltaMny_; }
      set {
        trdDeltaMny_ = value;
      }
    }

    /// <summary>Field number for the "opt_mny_bot" field.</summary>
    public const int OptMnyBotFieldNumber = 238;
    private double optMnyBot_;
    /// <summary>
    /// sum of settle cash for all buy executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptMnyBot {
      get { return optMnyBot_; }
      set {
        optMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "opt_mny_sld" field.</summary>
    public const int OptMnySldFieldNumber = 241;
    private double optMnySld_;
    /// <summary>
    /// sum of settle cash for all sell executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptMnySld {
      get { return optMnySld_; }
      set {
        optMnySld_ = value;
      }
    }

    /// <summary>Field number for the "day_pnl" field.</summary>
    public const int DayPnlFieldNumber = 244;
    private float dayPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnl {
      get { return dayPnl_; }
      set {
        dayPnl_ = value;
      }
    }

    /// <summary>Field number for the "dn_day_pnl" field.</summary>
    public const int DnDayPnlFieldNumber = 247;
    private float dnDayPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DnDayPnl {
      get { return dnDayPnl_; }
      set {
        dnDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_mid_mark" field.</summary>
    public const int OpnPnlMidMarkFieldNumber = 250;
    private float opnPnlMidMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlMidMark {
      get { return opnPnlMidMark_; }
      set {
        opnPnlMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_vol_mark" field.</summary>
    public const int OpnPnlVolMarkFieldNumber = 253;
    private float opnPnlVolMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVolMark {
      get { return opnPnlVolMark_; }
      set {
        opnPnlVolMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_clr_mark" field.</summary>
    public const int OpnPnlClrMarkFieldNumber = 256;
    private float opnPnlClrMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlClrMark {
      get { return opnPnlClrMark_; }
      set {
        opnPnlClrMark_ = value;
      }
    }

    /// <summary>Field number for the "cn_net_opn_pos" field.</summary>
    public const int CnNetOpnPosFieldNumber = 259;
    private int cnNetOpnPos_;
    /// <summary>
    /// opening position (cnOpnPos) net of reversals/conversions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnNetOpnPos {
      get { return cnNetOpnPos_; }
      set {
        cnNetOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "cn_net_cur_pos" field.</summary>
    public const int CnNetCurPosFieldNumber = 262;
    private int cnNetCurPos_;
    /// <summary>
    /// current position (cnOpnPos + cnBot - cnSld) net of reversals/conversions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnNetCurPos {
      get { return cnNetCurPos_; }
      set {
        cnNetCurPos_ = value;
      }
    }

    /// <summary>Field number for the "cn_atm_equiv" field.</summary>
    public const int CnAtmEquivFieldNumber = 265;
    private float cnAtmEquiv_;
    /// <summary>
    /// current position (atm equivalent contracts: (cnNetPos * ve / atmVega)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnAtmEquiv {
      get { return cnAtmEquiv_; }
      set {
        cnAtmEquiv_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 268;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 271;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "div_days" field.</summary>
    public const int DivDaysFieldNumber = 274;
    private int divDays_;
    /// <summary>
    /// days to the next dividend (0 = exDate is today, -1 = exDate is yesterday)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivDays {
      get { return divDays_; }
      set {
        divDays_ = value;
      }
    }

    /// <summary>Field number for the "hedge_delta_rule" field.</summary>
    public const int HedgeDeltaRuleFieldNumber = 277;
    private global::Spiderrock.Protobuf.HedgeDeltaRule hedgeDeltaRule_ = global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified;
    /// <summary>
    /// HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeDeltaRule HedgeDeltaRule {
      get { return hedgeDeltaRule_; }
      set {
        hedgeDeltaRule_ = value;
      }
    }

    /// <summary>Field number for the "binary_days" field.</summary>
    public const int BinaryDaysFieldNumber = 280;
    private float binaryDays_;
    /// <summary>
    /// hedgeDelta = -1.0,-0.5,0,+0.5,+1.0 if less than binary days to expiration;usually [0.0 - 2.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BinaryDays {
      get { return binaryDays_; }
      set {
        binaryDays_ = value;
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 283;
    private int days_;
    /// <summary>
    /// days to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 286;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 289;
    private float rate_;
    /// <summary>
    /// global rate to expiration (pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 292;
    private float sdiv_;
    /// <summary>
    /// continuous stock div (pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 295;
    private float ddiv_;
    /// <summary>
    /// present value of discrete dividends (pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "dadj" field.</summary>
    public const int DadjFieldNumber = 298;
    private float dadj_;
    /// <summary>
    /// dadj frational dividend value; 1.0 except for some multihedge roots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Dadj {
      get { return dadj_; }
      set {
        dadj_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 301;
    private float atmVol_;
    /// <summary>
    /// live surface atm volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_vega" field.</summary>
    public const int AtmVegaFieldNumber = 304;
    private float atmVega_;
    /// <summary>
    /// live surface atm vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVega {
      get { return atmVega_; }
      set {
        atmVega_ = value;
      }
    }

    /// <summary>Field number for the "i_vol" field.</summary>
    public const int IVolFieldNumber = 307;
    private float iVol_;
    /// <summary>
    /// surface volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IVol {
      get { return iVol_; }
      set {
        iVol_ = value;
      }
    }

    /// <summary>Field number for the "i_vol_src" field.</summary>
    public const int IVolSrcFieldNumber = 310;
    private global::Spiderrock.Protobuf.MarkSource iVolSrc_ = global::Spiderrock.Protobuf.MarkSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarkSource IVolSrc {
      get { return iVolSrc_; }
      set {
        iVolSrc_ = value;
      }
    }

    /// <summary>Field number for the "de" field.</summary>
    public const int DeFieldNumber = 313;
    private float de_;
    /// <summary>
    /// delta;(dOpx / dUPrc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float De {
      get { return de_; }
      set {
        de_ = value;
      }
    }

    /// <summary>Field number for the "ga" field.</summary>
    public const int GaFieldNumber = 316;
    private float ga_;
    /// <summary>
    /// gamma;(dDelta / dUPrc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ga {
      get { return ga_; }
      set {
        ga_ = value;
      }
    }

    /// <summary>Field number for the "th" field.</summary>
    public const int ThFieldNumber = 319;
    private float th_;
    /// <summary>
    /// theta;(dOpx / dTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Th {
      get { return th_; }
      set {
        th_ = value;
      }
    }

    /// <summary>Field number for the "ve" field.</summary>
    public const int VeFieldNumber = 322;
    private float ve_;
    /// <summary>
    /// vega;(dOpx / dVol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ve {
      get { return ve_; }
      set {
        ve_ = value;
      }
    }

    /// <summary>Field number for the "rh" field.</summary>
    public const int RhFieldNumber = 325;
    private float rh_;
    /// <summary>
    /// rho;(dOpx / dRate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rh {
      get { return rh_; }
      set {
        rh_ = value;
      }
    }

    /// <summary>Field number for the "ph" field.</summary>
    public const int PhFieldNumber = 328;
    private float ph_;
    /// <summary>
    /// phi;(dOpx / dSDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ph {
      get { return ph_; }
      set {
        ph_ = value;
      }
    }

    /// <summary>Field number for the "vo" field.</summary>
    public const int VoFieldNumber = 331;
    private float vo_;
    /// <summary>
    /// volga (SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vo {
      get { return vo_; }
      set {
        vo_ = value;
      }
    }

    /// <summary>Field number for the "va" field.</summary>
    public const int VaFieldNumber = 334;
    private float va_;
    /// <summary>
    /// vanna (SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Va {
      get { return va_; }
      set {
        va_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 337;
    private float deDecay_;
    /// <summary>
    /// delta decay, charm, delta bleed; (dDelta/dTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 340;
    private int err_;
    /// <summary>
    /// computation error code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "ve_slope" field.</summary>
    public const int VeSlopeFieldNumber = 343;
    private float veSlope_;
    /// <summary>
    /// ivol correlation (veSlope = dVol / dUPrc) [can be either SR surface veSlope or client theo veSlope]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VeSlope {
      get { return veSlope_; }
      set {
        veSlope_ = value;
      }
    }

    /// <summary>Field number for the "hedge_de" field.</summary>
    public const int HedgeDeFieldNumber = 346;
    private float hedgeDe_;
    /// <summary>
    /// hedge delta (either ivol or tvol based;follows binary rules)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeDe {
      get { return hedgeDe_; }
      set {
        hedgeDe_ = value;
      }
    }

    /// <summary>Field number for the "hedge_ga" field.</summary>
    public const int HedgeGaFieldNumber = 349;
    private float hedgeGa_;
    /// <summary>
    /// hedge gamma (either ivol or tvol based;follows binary rules)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeGa {
      get { return hedgeGa_; }
      set {
        hedgeGa_ = value;
      }
    }

    /// <summary>Field number for the "sr_slope" field.</summary>
    public const int SrSlopeFieldNumber = 352;
    private float srSlope_;
    /// <summary>
    /// ivol correlation (srSlope = dVol / dUPrc) [always SR surface veSlope]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrSlope {
      get { return srSlope_; }
      set {
        srSlope_ = value;
      }
    }

    /// <summary>Field number for the "is_binary" field.</summary>
    public const int IsBinaryFieldNumber = 355;
    private global::Spiderrock.Protobuf.YesNo isBinary_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// hedge delta/gamma has switched to 'binary'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsBinary {
      get { return isBinary_; }
      set {
        isBinary_ = value;
      }
    }

    /// <summary>Field number for the "prem_ov_par" field.</summary>
    public const int PremOvParFieldNumber = 358;
    private float premOvPar_;
    /// <summary>
    /// premium over parity for the option position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PremOvPar {
      get { return premOvPar_; }
      set {
        premOvPar_ = value;
      }
    }

    /// <summary>Field number for the "xde" field.</summary>
    public const int XdeFieldNumber = 361;
    private float xde_;
    /// <summary>
    /// xdelta (C: +0.5 - de, P: -0.5 - de)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Xde {
      get { return xde_; }
      set {
        xde_ = value;
      }
    }

    /// <summary>Field number for the "lo_bound" field.</summary>
    public const int LoBoundFieldNumber = 364;
    private float loBound_;
    /// <summary>
    /// minimum no-arb opx (zero volatility given sdiv/ddiv/years/rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LoBound {
      get { return loBound_; }
      set {
        loBound_ = value;
      }
    }

    /// <summary>Field number for the "su90" field.</summary>
    public const int Su90FieldNumber = 367;
    private float su90_;
    /// <summary>
    /// underlier up 90%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su90 {
      get { return su90_; }
      set {
        su90_ = value;
      }
    }

    /// <summary>Field number for the "sd90" field.</summary>
    public const int Sd90FieldNumber = 370;
    private float sd90_;
    /// <summary>
    /// underlier dn 90%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd90 {
      get { return sd90_; }
      set {
        sd90_ = value;
      }
    }

    /// <summary>Field number for the "su50" field.</summary>
    public const int Su50FieldNumber = 373;
    private float su50_;
    /// <summary>
    /// underlier up 50%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su50 {
      get { return su50_; }
      set {
        su50_ = value;
      }
    }

    /// <summary>Field number for the "sd50" field.</summary>
    public const int Sd50FieldNumber = 376;
    private float sd50_;
    /// <summary>
    /// underlier dn 50%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd50 {
      get { return sd50_; }
      set {
        sd50_ = value;
      }
    }

    /// <summary>Field number for the "su15" field.</summary>
    public const int Su15FieldNumber = 379;
    private float su15_;
    /// <summary>
    /// underlier up 15%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su15 {
      get { return su15_; }
      set {
        su15_ = value;
      }
    }

    /// <summary>Field number for the "sd15" field.</summary>
    public const int Sd15FieldNumber = 382;
    private float sd15_;
    /// <summary>
    /// underlier dn 15%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd15 {
      get { return sd15_; }
      set {
        sd15_ = value;
      }
    }

    /// <summary>Field number for the "su10" field.</summary>
    public const int Su10FieldNumber = 385;
    private float su10_;
    /// <summary>
    /// underlier up 10%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su10 {
      get { return su10_; }
      set {
        su10_ = value;
      }
    }

    /// <summary>Field number for the "sd10" field.</summary>
    public const int Sd10FieldNumber = 388;
    private float sd10_;
    /// <summary>
    /// underlier dn 10%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd10 {
      get { return sd10_; }
      set {
        sd10_ = value;
      }
    }

    /// <summary>Field number for the "su06" field.</summary>
    public const int Su06FieldNumber = 391;
    private float su06_;
    /// <summary>
    /// underlier up 6%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su06 {
      get { return su06_; }
      set {
        su06_ = value;
      }
    }

    /// <summary>Field number for the "sd08" field.</summary>
    public const int Sd08FieldNumber = 394;
    private float sd08_;
    /// <summary>
    /// underlier dn 8%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd08 {
      get { return sd08_; }
      set {
        sd08_ = value;
      }
    }

    /// <summary>Field number for the "su05" field.</summary>
    public const int Su05FieldNumber = 397;
    private float su05_;
    /// <summary>
    /// underlier up 5%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su05 {
      get { return su05_; }
      set {
        su05_ = value;
      }
    }

    /// <summary>Field number for the "sd05" field.</summary>
    public const int Sd05FieldNumber = 400;
    private float sd05_;
    /// <summary>
    /// underlier dn 5%, sticky delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd05 {
      get { return sd05_; }
      set {
        sd05_ = value;
      }
    }

    /// <summary>Field number for the "su1e" field.</summary>
    public const int Su1EFieldNumber = 403;
    private float su1E_;
    /// <summary>
    /// underlier up 1x implied earn move, vol ramp out, delta-neutral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su1E {
      get { return su1E_; }
      set {
        su1E_ = value;
      }
    }

    /// <summary>Field number for the "sd1e" field.</summary>
    public const int Sd1EFieldNumber = 406;
    private float sd1E_;
    /// <summary>
    /// underlier dn 1x implied earn move, vol ramp out, delta-neutral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd1E {
      get { return sd1E_; }
      set {
        sd1E_ = value;
      }
    }

    /// <summary>Field number for the "su2e" field.</summary>
    public const int Su2EFieldNumber = 409;
    private float su2E_;
    /// <summary>
    /// underlier up 2x implied earn move, vol ramp out, delta-neutral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Su2E {
      get { return su2E_; }
      set {
        su2E_ = value;
      }
    }

    /// <summary>Field number for the "sd2e" field.</summary>
    public const int Sd2EFieldNumber = 412;
    private float sd2E_;
    /// <summary>
    /// underlier dn 2x implied earn move, vol ramp out, delta-neutral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sd2E {
      get { return sd2E_; }
      set {
        sd2E_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 415;
    private float earn_;
    /// <summary>
    /// vol earn ramp out (no underlier move)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 418;
    private float cash_;
    /// <summary>
    /// underlier up 30%, vol = 0.10, 6mn deal close
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cash {
      get { return cash_; }
      set {
        cash_ = value;
      }
    }

    /// <summary>Field number for the "theo_model" field.</summary>
    public const int TheoModelFieldNumber = 421;
    private string theoModel_ = "";
    /// <summary>
    /// theo model #1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoModel {
      get { return theoModel_; }
      set {
        theoModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t_vol" field.</summary>
    public const int TVolFieldNumber = 424;
    private float tVol_;
    /// <summary>
    /// theo volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVol {
      get { return tVol_; }
      set {
        tVol_ = value;
      }
    }

    /// <summary>Field number for the "t_opx" field.</summary>
    public const int TOpxFieldNumber = 427;
    private float tOpx_;
    /// <summary>
    /// theo price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TOpx {
      get { return tOpx_; }
      set {
        tOpx_ = value;
      }
    }

    /// <summary>Field number for the "t_bOpn_px" field.</summary>
    public const int TBOpnPxFieldNumber = 430;
    private float tBOpnPx_;
    /// <summary>
    /// theo buy/open price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TBOpnPx {
      get { return tBOpnPx_; }
      set {
        tBOpnPx_ = value;
      }
    }

    /// <summary>Field number for the "t_sOpn_px" field.</summary>
    public const int TSOpnPxFieldNumber = 433;
    private float tSOpnPx_;
    /// <summary>
    /// theo sell/open price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TSOpnPx {
      get { return tSOpnPx_; }
      set {
        tSOpnPx_ = value;
      }
    }

    /// <summary>Field number for the "t_bCls_px" field.</summary>
    public const int TBClsPxFieldNumber = 436;
    private float tBClsPx_;
    /// <summary>
    /// theo buy/close price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TBClsPx {
      get { return tBClsPx_; }
      set {
        tBClsPx_ = value;
      }
    }

    /// <summary>Field number for the "t_sCls_px" field.</summary>
    public const int TSClsPxFieldNumber = 439;
    private float tSClsPx_;
    /// <summary>
    /// theo sell/close price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TSClsPx {
      get { return tSClsPx_; }
      set {
        tSClsPx_ = value;
      }
    }

    /// <summary>Field number for the "t_de" field.</summary>
    public const int TDeFieldNumber = 442;
    private float tDe_;
    /// <summary>
    /// theo delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TDe {
      get { return tDe_; }
      set {
        tDe_ = value;
      }
    }

    /// <summary>Field number for the "t_ga" field.</summary>
    public const int TGaFieldNumber = 445;
    private float tGa_;
    /// <summary>
    /// theo gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TGa {
      get { return tGa_; }
      set {
        tGa_ = value;
      }
    }

    /// <summary>Field number for the "t_err" field.</summary>
    public const int TErrFieldNumber = 448;
    private int tErr_;
    /// <summary>
    /// theo vol error code (TheoError)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TErr {
      get { return tErr_; }
      set {
        tErr_ = value;
      }
    }

    /// <summary>Field number for the "theo_model2" field.</summary>
    public const int TheoModel2FieldNumber = 451;
    private string theoModel2_ = "";
    /// <summary>
    /// theo model #2 (used for edge markup)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoModel2 {
      get { return theoModel2_; }
      set {
        theoModel2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t_vol2" field.</summary>
    public const int TVol2FieldNumber = 454;
    private float tVol2_;
    /// <summary>
    /// theo volatility (model #2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVol2 {
      get { return tVol2_; }
      set {
        tVol2_ = value;
      }
    }

    /// <summary>Field number for the "t_opx2" field.</summary>
    public const int TOpx2FieldNumber = 457;
    private float tOpx2_;
    /// <summary>
    /// theo price (model #2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TOpx2 {
      get { return tOpx2_; }
      set {
        tOpx2_ = value;
      }
    }

    /// <summary>Field number for the "t_err2" field.</summary>
    public const int TErr2FieldNumber = 460;
    private int tErr2_;
    /// <summary>
    /// theo vol error code (model #2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TErr2 {
      get { return tErr2_; }
      set {
        tErr2_ = value;
      }
    }

    /// <summary>Field number for the "years_pr" field.</summary>
    public const int YearsPrFieldNumber = 463;
    private float yearsPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YearsPr {
      get { return yearsPr_; }
      set {
        yearsPr_ = value;
      }
    }

    /// <summary>Field number for the "rate_pr" field.</summary>
    public const int RatePrFieldNumber = 466;
    private float ratePr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RatePr {
      get { return ratePr_; }
      set {
        ratePr_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_pr" field.</summary>
    public const int SdivPrFieldNumber = 469;
    private float sdivPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivPr {
      get { return sdivPr_; }
      set {
        sdivPr_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pr" field.</summary>
    public const int DdivPrFieldNumber = 472;
    private float ddivPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPr {
      get { return ddivPr_; }
      set {
        ddivPr_ = value;
      }
    }

    /// <summary>Field number for the "i_vol_pr" field.</summary>
    public const int IVolPrFieldNumber = 475;
    private float iVolPr_;
    /// <summary>
    /// prior period surface volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IVolPr {
      get { return iVolPr_; }
      set {
        iVolPr_ = value;
      }
    }

    /// <summary>Field number for the "de_pr" field.</summary>
    public const int DePrFieldNumber = 478;
    private float dePr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DePr {
      get { return dePr_; }
      set {
        dePr_ = value;
      }
    }

    /// <summary>Field number for the "ga_pr" field.</summary>
    public const int GaPrFieldNumber = 481;
    private float gaPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GaPr {
      get { return gaPr_; }
      set {
        gaPr_ = value;
      }
    }

    /// <summary>Field number for the "th_pr" field.</summary>
    public const int ThPrFieldNumber = 484;
    private float thPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThPr {
      get { return thPr_; }
      set {
        thPr_ = value;
      }
    }

    /// <summary>Field number for the "ve_pr" field.</summary>
    public const int VePrFieldNumber = 487;
    private float vePr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VePr {
      get { return vePr_; }
      set {
        vePr_ = value;
      }
    }

    /// <summary>Field number for the "rh_pr" field.</summary>
    public const int RhPrFieldNumber = 490;
    private float rhPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RhPr {
      get { return rhPr_; }
      set {
        rhPr_ = value;
      }
    }

    /// <summary>Field number for the "ph_pr" field.</summary>
    public const int PhPrFieldNumber = 493;
    private float phPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PhPr {
      get { return phPr_; }
      set {
        phPr_ = value;
      }
    }

    /// <summary>Field number for the "vo_pr" field.</summary>
    public const int VoPrFieldNumber = 496;
    private float voPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VoPr {
      get { return voPr_; }
      set {
        voPr_ = value;
      }
    }

    /// <summary>Field number for the "va_pr" field.</summary>
    public const int VaPrFieldNumber = 499;
    private float vaPr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaPr {
      get { return vaPr_; }
      set {
        vaPr_ = value;
      }
    }

    /// <summary>Field number for the "err_pr" field.</summary>
    public const int ErrPrFieldNumber = 502;
    private int errPr_;
    /// <summary>
    /// prior period computation error code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ErrPr {
      get { return errPr_; }
      set {
        errPr_ = value;
      }
    }

    /// <summary>Field number for the "ve_slope_pr" field.</summary>
    public const int VeSlopePrFieldNumber = 505;
    private float veSlopePr_;
    /// <summary>
    /// prior period veSlope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VeSlopePr {
      get { return veSlopePr_; }
      set {
        veSlopePr_ = value;
      }
    }

    /// <summary>Field number for the "hedge_de_pr" field.</summary>
    public const int HedgeDePrFieldNumber = 508;
    private float hedgeDePr_;
    /// <summary>
    /// prior period hedge delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeDePr {
      get { return hedgeDePr_; }
      set {
        hedgeDePr_ = value;
      }
    }

    /// <summary>Field number for the "t_vol_pr" field.</summary>
    public const int TVolPrFieldNumber = 511;
    private float tVolPr_;
    /// <summary>
    /// prior period theo volatility (theoModel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVolPr {
      get { return tVolPr_; }
      set {
        tVolPr_ = value;
      }
    }

    /// <summary>Field number for the "t_opx_pr" field.</summary>
    public const int TOpxPrFieldNumber = 514;
    private float tOpxPr_;
    /// <summary>
    /// prior period theo price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TOpxPr {
      get { return tOpxPr_; }
      set {
        tOpxPr_ = value;
      }
    }

    /// <summary>Field number for the "t_de_pr" field.</summary>
    public const int TDePrFieldNumber = 517;
    private float tDePr_;
    /// <summary>
    /// prior period theo delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TDePr {
      get { return tDePr_; }
      set {
        tDePr_ = value;
      }
    }

    /// <summary>Field number for the "t_vol_pr2" field.</summary>
    public const int TVolPr2FieldNumber = 520;
    private float tVolPr2_;
    /// <summary>
    /// prior period theo volatility (theoModel#2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVolPr2 {
      get { return tVolPr2_; }
      set {
        tVolPr2_ = value;
      }
    }

    /// <summary>Field number for the "t_opx_pr2" field.</summary>
    public const int TOpxPr2FieldNumber = 523;
    private float tOpxPr2_;
    /// <summary>
    /// prior period theo price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TOpxPr2 {
      get { return tOpxPr2_; }
      set {
        tOpxPr2_ = value;
      }
    }

    /// <summary>Field number for the "t_de_pr2" field.</summary>
    public const int TDePr2FieldNumber = 526;
    private float tDePr2_;
    /// <summary>
    /// prior period theo delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TDePr2 {
      get { return tDePr2_; }
      set {
        tDePr2_ = value;
      }
    }

    /// <summary>Field number for the "xde_pr" field.</summary>
    public const int XdePrFieldNumber = 529;
    private float xdePr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XdePr {
      get { return xdePr_; }
      set {
        xdePr_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vDn" field.</summary>
    public const int MarginUDnVDnFieldNumber = 602;
    private float marginUDnVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVDn {
      get { return marginUDnVDn_; }
      set {
        marginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vUp" field.</summary>
    public const int MarginUDnVUpFieldNumber = 603;
    private float marginUDnVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVUp {
      get { return marginUDnVUp_; }
      set {
        marginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vDn" field.</summary>
    public const int MarginUUpVDnFieldNumber = 604;
    private float marginUUpVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVDn {
      get { return marginUUpVDn_; }
      set {
        marginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vUp" field.</summary>
    public const int MarginUUpVUpFieldNumber = 605;
    private float marginUUpVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVUp {
      get { return marginUUpVUp_; }
      set {
        marginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_de" field.</summary>
    public const int OpnPnlDeFieldNumber = 532;
    private float opnPnlDe_;
    /// <summary>
    /// open position * mult * hedgeDe * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlDe {
      get { return opnPnlDe_; }
      set {
        opnPnlDe_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_ga" field.</summary>
    public const int OpnPnlGaFieldNumber = 535;
    private float opnPnlGa_;
    /// <summary>
    /// open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlGa {
      get { return opnPnlGa_; }
      set {
        opnPnlGa_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_th" field.</summary>
    public const int OpnPnlThFieldNumber = 538;
    private float opnPnlTh_;
    /// <summary>
    /// open position * mult * optTheta * dTime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlTh {
      get { return opnPnlTh_; }
      set {
        opnPnlTh_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_ve" field.</summary>
    public const int OpnPnlVeFieldNumber = 541;
    private float opnPnlVe_;
    /// <summary>
    /// open position * mult * optVega * dVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVe {
      get { return opnPnlVe_; }
      set {
        opnPnlVe_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_vo" field.</summary>
    public const int OpnPnlVoFieldNumber = 544;
    private float opnPnlVo_;
    /// <summary>
    /// open position * mult * 0.5 * optVolga * dVol * dVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVo {
      get { return opnPnlVo_; }
      set {
        opnPnlVo_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_va" field.</summary>
    public const int OpnPnlVaFieldNumber = 547;
    private float opnPnlVa_;
    /// <summary>
    /// open position * mult * optVanna * dVol * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVa {
      get { return opnPnlVa_; }
      set {
        opnPnlVa_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_sl" field.</summary>
    public const int OpnPnlSlFieldNumber = 550;
    private float opnPnlSl_;
    /// <summary>
    /// open position * mult * vol/uPrc * slope * optVega * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlSl {
      get { return opnPnlSl_; }
      set {
        opnPnlSl_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_rate" field.</summary>
    public const int OpnPnlRateFieldNumber = 553;
    private float opnPnlRate_;
    /// <summary>
    /// open position * mult * optRho * dRate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlRate {
      get { return opnPnlRate_; }
      set {
        opnPnlRate_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_sDiv" field.</summary>
    public const int OpnPnlSDivFieldNumber = 556;
    private float opnPnlSDiv_;
    /// <summary>
    /// open position * mult * optPhi * dSDv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlSDiv {
      get { return opnPnlSDiv_; }
      set {
        opnPnlSDiv_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_dDiv" field.</summary>
    public const int OpnPnlDDivFieldNumber = 559;
    private float opnPnlDDiv_;
    /// <summary>
    /// open position * mult * optPhi * dDDv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlDDiv {
      get { return opnPnlDDiv_; }
      set {
        opnPnlDDiv_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_sv" field.</summary>
    public const int OpnPnlSvFieldNumber = 562;
    private float opnPnlSv_;
    /// <summary>
    /// open position * mult * (SR Vol Pnl - opnPnlDe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlSv {
      get { return opnPnlSv_; }
      set {
        opnPnlSv_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_err" field.</summary>
    public const int OpnPnlErrFieldNumber = 565;
    private float opnPnlErr_;
    /// <summary>
    /// unattributed pnl: SR Vol Pnl - opnPnlDe - opnPnlGa - opnPnlTh - opnPnlVe - opnPnlRat - opnPnlSDiv - opnPnlDDiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlErr {
      get { return opnPnlErr_; }
      set {
        opnPnlErr_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_c0" field.</summary>
    public const int ShBotC0FieldNumber = 568;
    private int shBotC0_;
    /// <summary>
    /// hypothetical shares bot (~1/minute intervals)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotC0 {
      get { return shBotC0_; }
      set {
        shBotC0_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_c0" field.</summary>
    public const int ShSldC0FieldNumber = 571;
    private int shSldC0_;
    /// <summary>
    /// hypothetical shares sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldC0 {
      get { return shSldC0_; }
      set {
        shSldC0_ = value;
      }
    }

    /// <summary>Field number for the "sh_mny_c0" field.</summary>
    public const int ShMnyC0FieldNumber = 574;
    private float shMnyC0_;
    /// <summary>
    /// hypothetical money
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ShMnyC0 {
      get { return shMnyC0_; }
      set {
        shMnyC0_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_c1" field.</summary>
    public const int ShBotC1FieldNumber = 577;
    private int shBotC1_;
    /// <summary>
    /// hypothetical shares bot (~10/minute intervals)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotC1 {
      get { return shBotC1_; }
      set {
        shBotC1_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_c1" field.</summary>
    public const int ShSldC1FieldNumber = 580;
    private int shSldC1_;
    /// <summary>
    /// hypothetical shares sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldC1 {
      get { return shSldC1_; }
      set {
        shSldC1_ = value;
      }
    }

    /// <summary>Field number for the "sh_mny_c1" field.</summary>
    public const int ShMnyC1FieldNumber = 583;
    private float shMnyC1_;
    /// <summary>
    /// hypothetical money
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ShMnyC1 {
      get { return shMnyC1_; }
      set {
        shMnyC1_ = value;
      }
    }

    /// <summary>Field number for the "mark_err_codes" field.</summary>
    public const int MarkErrCodesFieldNumber = 586;
    private global::Spiderrock.Protobuf.MarkErrorCode markErrCodes_ = global::Spiderrock.Protobuf.MarkErrorCode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarkErrorCode MarkErrCodes {
      get { return markErrCodes_; }
      set {
        markErrCodes_ = value;
      }
    }

    /// <summary>Field number for the "ex_value" field.</summary>
    public const int ExValueFieldNumber = 589;
    private float exValue_;
    /// <summary>
    /// early exercise value (amLimit - bsPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExValue {
      get { return exValue_; }
      set {
        exValue_ = value;
      }
    }

    /// <summary>Field number for the "risk_alert" field.</summary>
    public const int RiskAlertFieldNumber = 592;
    private global::Spiderrock.Protobuf.AlertCode riskAlert_ = global::Spiderrock.Protobuf.AlertCode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlertCode RiskAlert {
      get { return riskAlert_; }
      set {
        riskAlert_ = value;
      }
    }

    /// <summary>Field number for the "num_executions" field.</summary>
    public const int NumExecutionsFieldNumber = 595;
    private int numExecutions_;
    /// <summary>
    /// number of included SpdrParentExecution records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumExecutions {
      get { return numExecutions_; }
      set {
        numExecutions_ = value;
      }
    }

    /// <summary>Field number for the "max_exec_dttm" field.</summary>
    public const int MaxExecDttmFieldNumber = 598;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxExecDttm_;
    /// <summary>
    /// maximum activity dttm of execution records included in this option risk summary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxExecDttm {
      get { return maxExecDttm_; }
      set {
        maxExecDttm_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 601;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionPositionRecordV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionPositionRecordV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (AggGroup != other.AggGroup) return false;
      if (!object.Equals(Fkey, other.Fkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (ExType != other.ExType) return false;
      if (Multihedge != other.Multihedge) return false;
      if (!object.Equals(MultihedgeSource, other.MultihedgeSource)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MultihedgePVRatio, other.MultihedgePVRatio)) return false;
      if (OptionType != other.OptionType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CashOnEx, other.CashOnEx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrikeRatio, other.StrikeRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UMark, other.UMark)) return false;
      if (UMarkSource != other.UMarkSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptBid, other.OptBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptAsk, other.OptAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptMidMark, other.OptMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptVolMark, other.OptVolMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UOpnMark, other.UOpnMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptOpnVolMark, other.OptOpnVolMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptOpnMidMark, other.OptOpnMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptOpnClrMark, other.OptOpnClrMark)) return false;
      if (OptOpnPosPrv != other.OptOpnPosPrv) return false;
      if (OptOpnPosClr != other.OptOpnPosClr) return false;
      if (OptOpnPos != other.OptOpnPos) return false;
      if (OptOpnPosSrc != other.OptOpnPosSrc) return false;
      if (CnBot != other.CnBot) return false;
      if (CnSld != other.CnSld) return false;
      if (CnOpened != other.CnOpened) return false;
      if (CnClosed != other.CnClosed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EdgeOpened, other.EdgeOpened)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EdgeClosed, other.EdgeClosed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDelta, other.TrdDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdGamma, other.TrdGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDeltaMny, other.TrdDeltaMny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptMnyBot, other.OptMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptMnySld, other.OptMnySld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnl, other.DayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DnDayPnl, other.DnDayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlMidMark, other.OpnPnlMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVolMark, other.OpnPnlVolMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlClrMark, other.OpnPnlClrMark)) return false;
      if (CnNetOpnPos != other.CnNetOpnPos) return false;
      if (CnNetCurPos != other.CnNetCurPos) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnAtmEquiv, other.CnAtmEquiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (DivDays != other.DivDays) return false;
      if (HedgeDeltaRule != other.HedgeDeltaRule) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BinaryDays, other.BinaryDays)) return false;
      if (Days != other.Days) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dadj, other.Dadj)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVega, other.AtmVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IVol, other.IVol)) return false;
      if (IVolSrc != other.IVolSrc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rh, other.Rh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ph, other.Ph)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vo, other.Vo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Va, other.Va)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (Err != other.Err) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VeSlope, other.VeSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeDe, other.HedgeDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeGa, other.HedgeGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrSlope, other.SrSlope)) return false;
      if (IsBinary != other.IsBinary) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PremOvPar, other.PremOvPar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xde, other.Xde)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoBound, other.LoBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su90, other.Su90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd90, other.Sd90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su50, other.Su50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd50, other.Sd50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su15, other.Su15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd15, other.Sd15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su10, other.Su10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd10, other.Sd10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su06, other.Su06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd08, other.Sd08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su05, other.Su05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd05, other.Sd05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su1E, other.Su1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd1E, other.Sd1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Su2E, other.Su2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sd2E, other.Sd2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Earn, other.Earn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cash, other.Cash)) return false;
      if (TheoModel != other.TheoModel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVol, other.TVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TOpx, other.TOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TBOpnPx, other.TBOpnPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TSOpnPx, other.TSOpnPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TBClsPx, other.TBClsPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TSClsPx, other.TSClsPx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TDe, other.TDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TGa, other.TGa)) return false;
      if (TErr != other.TErr) return false;
      if (TheoModel2 != other.TheoModel2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVol2, other.TVol2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TOpx2, other.TOpx2)) return false;
      if (TErr2 != other.TErr2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YearsPr, other.YearsPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RatePr, other.RatePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivPr, other.SdivPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPr, other.DdivPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IVolPr, other.IVolPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DePr, other.DePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GaPr, other.GaPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThPr, other.ThPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VePr, other.VePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhPr, other.RhPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhPr, other.PhPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VoPr, other.VoPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaPr, other.VaPr)) return false;
      if (ErrPr != other.ErrPr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VeSlopePr, other.VeSlopePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeDePr, other.HedgeDePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVolPr, other.TVolPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TOpxPr, other.TOpxPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TDePr, other.TDePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVolPr2, other.TVolPr2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TOpxPr2, other.TOpxPr2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TDePr2, other.TDePr2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XdePr, other.XdePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVDn, other.MarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVUp, other.MarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVDn, other.MarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVUp, other.MarginUUpVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlDe, other.OpnPnlDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlGa, other.OpnPnlGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlTh, other.OpnPnlTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVe, other.OpnPnlVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVo, other.OpnPnlVo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVa, other.OpnPnlVa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlSl, other.OpnPnlSl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlRate, other.OpnPnlRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlSDiv, other.OpnPnlSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlDDiv, other.OpnPnlDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlSv, other.OpnPnlSv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlErr, other.OpnPnlErr)) return false;
      if (ShBotC0 != other.ShBotC0) return false;
      if (ShSldC0 != other.ShSldC0) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShMnyC0, other.ShMnyC0)) return false;
      if (ShBotC1 != other.ShBotC1) return false;
      if (ShSldC1 != other.ShSldC1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShMnyC1, other.ShMnyC1)) return false;
      if (MarkErrCodes != other.MarkErrCodes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExValue, other.ExValue)) return false;
      if (RiskAlert != other.RiskAlert) return false;
      if (NumExecutions != other.NumExecutions) return false;
      if (!object.Equals(MaxExecDttm, other.MaxExecDttm)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (AggGroup.Length != 0) hash ^= AggGroup.GetHashCode();
      if (fkey_ != null) hash ^= Fkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) hash ^= Multihedge.GetHashCode();
      if (multihedgeSource_ != null) hash ^= MultihedgeSource.GetHashCode();
      if (MultihedgePVRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MultihedgePVRatio);
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) hash ^= OptionType.GetHashCode();
      if (CashOnEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CashOnEx);
      if (StrikeRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrikeRatio);
      if (UPrcRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcRatio);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (UMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UMark);
      if (UMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) hash ^= UMarkSource.GetHashCode();
      if (OptBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptBid);
      if (OptAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptAsk);
      if (OptMidMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptMidMark);
      if (OptVolMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptVolMark);
      if (UOpnMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UOpnMark);
      if (OptOpnVolMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptOpnVolMark);
      if (OptOpnMidMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptOpnMidMark);
      if (OptOpnClrMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptOpnClrMark);
      if (OptOpnPosPrv != 0) hash ^= OptOpnPosPrv.GetHashCode();
      if (OptOpnPosClr != 0) hash ^= OptOpnPosClr.GetHashCode();
      if (OptOpnPos != 0) hash ^= OptOpnPos.GetHashCode();
      if (OptOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) hash ^= OptOpnPosSrc.GetHashCode();
      if (CnBot != 0) hash ^= CnBot.GetHashCode();
      if (CnSld != 0) hash ^= CnSld.GetHashCode();
      if (CnOpened != 0) hash ^= CnOpened.GetHashCode();
      if (CnClosed != 0) hash ^= CnClosed.GetHashCode();
      if (EdgeOpened != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EdgeOpened);
      if (EdgeClosed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EdgeClosed);
      if (TrdDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDelta);
      if (TrdGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdGamma);
      if (TrdDeltaMny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDeltaMny);
      if (OptMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptMnyBot);
      if (OptMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptMnySld);
      if (DayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnl);
      if (DnDayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DnDayPnl);
      if (OpnPnlMidMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlMidMark);
      if (OpnPnlVolMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVolMark);
      if (OpnPnlClrMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlClrMark);
      if (CnNetOpnPos != 0) hash ^= CnNetOpnPos.GetHashCode();
      if (CnNetCurPos != 0) hash ^= CnNetCurPos.GetHashCode();
      if (CnAtmEquiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnAtmEquiv);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (DivDays != 0) hash ^= DivDays.GetHashCode();
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) hash ^= HedgeDeltaRule.GetHashCode();
      if (BinaryDays != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BinaryDays);
      if (Days != 0) hash ^= Days.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (Dadj != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dadj);
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (AtmVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVega);
      if (IVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IVol);
      if (IVolSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) hash ^= IVolSrc.GetHashCode();
      if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
      if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
      if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
      if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
      if (Rh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rh);
      if (Ph != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ph);
      if (Vo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vo);
      if (Va != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Va);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (Err != 0) hash ^= Err.GetHashCode();
      if (VeSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VeSlope);
      if (HedgeDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeDe);
      if (HedgeGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeGa);
      if (SrSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrSlope);
      if (IsBinary != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsBinary.GetHashCode();
      if (PremOvPar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PremOvPar);
      if (Xde != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xde);
      if (LoBound != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoBound);
      if (Su90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su90);
      if (Sd90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd90);
      if (Su50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su50);
      if (Sd50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd50);
      if (Su15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su15);
      if (Sd15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd15);
      if (Su10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su10);
      if (Sd10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd10);
      if (Su06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su06);
      if (Sd08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd08);
      if (Su05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su05);
      if (Sd05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd05);
      if (Su1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su1E);
      if (Sd1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd1E);
      if (Su2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Su2E);
      if (Sd2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sd2E);
      if (Earn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Earn);
      if (Cash != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cash);
      if (TheoModel.Length != 0) hash ^= TheoModel.GetHashCode();
      if (TVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVol);
      if (TOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TOpx);
      if (TBOpnPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TBOpnPx);
      if (TSOpnPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TSOpnPx);
      if (TBClsPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TBClsPx);
      if (TSClsPx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TSClsPx);
      if (TDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TDe);
      if (TGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TGa);
      if (TErr != 0) hash ^= TErr.GetHashCode();
      if (TheoModel2.Length != 0) hash ^= TheoModel2.GetHashCode();
      if (TVol2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVol2);
      if (TOpx2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TOpx2);
      if (TErr2 != 0) hash ^= TErr2.GetHashCode();
      if (YearsPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YearsPr);
      if (RatePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RatePr);
      if (SdivPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivPr);
      if (DdivPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPr);
      if (IVolPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IVolPr);
      if (DePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DePr);
      if (GaPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GaPr);
      if (ThPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThPr);
      if (VePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VePr);
      if (RhPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhPr);
      if (PhPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhPr);
      if (VoPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VoPr);
      if (VaPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaPr);
      if (ErrPr != 0) hash ^= ErrPr.GetHashCode();
      if (VeSlopePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VeSlopePr);
      if (HedgeDePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeDePr);
      if (TVolPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVolPr);
      if (TOpxPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TOpxPr);
      if (TDePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TDePr);
      if (TVolPr2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVolPr2);
      if (TOpxPr2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TOpxPr2);
      if (TDePr2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TDePr2);
      if (XdePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XdePr);
      if (MarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVDn);
      if (MarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVUp);
      if (MarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVDn);
      if (MarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVUp);
      if (OpnPnlDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlDe);
      if (OpnPnlGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlGa);
      if (OpnPnlTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlTh);
      if (OpnPnlVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVe);
      if (OpnPnlVo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVo);
      if (OpnPnlVa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVa);
      if (OpnPnlSl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlSl);
      if (OpnPnlRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlRate);
      if (OpnPnlSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlSDiv);
      if (OpnPnlDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlDDiv);
      if (OpnPnlSv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlSv);
      if (OpnPnlErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlErr);
      if (ShBotC0 != 0) hash ^= ShBotC0.GetHashCode();
      if (ShSldC0 != 0) hash ^= ShSldC0.GetHashCode();
      if (ShMnyC0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShMnyC0);
      if (ShBotC1 != 0) hash ^= ShBotC1.GetHashCode();
      if (ShSldC1 != 0) hash ^= ShSldC1.GetHashCode();
      if (ShMnyC1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShMnyC1);
      if (MarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) hash ^= MarkErrCodes.GetHashCode();
      if (ExValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExValue);
      if (RiskAlert != global::Spiderrock.Protobuf.AlertCode.Unspecified) hash ^= RiskAlert.GetHashCode();
      if (NumExecutions != 0) hash ^= NumExecutions.GetHashCode();
      if (maxExecDttm_ != null) hash ^= MaxExecDttm.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AggGroup);
      }
      if (fkey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Fkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(MultihedgePVRatio);
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) OptionType);
      }
      if (CashOnEx != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(CashOnEx);
      }
      if (StrikeRatio != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StrikeRatio);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(UPrcRatio);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(UPrc);
      }
      if (UBid != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(UAsk);
      }
      if (UMark != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(UMark);
      }
      if (UMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) UMarkSource);
      }
      if (OptBid != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(OptBid);
      }
      if (OptAsk != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(OptAsk);
      }
      if (OptMidMark != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(OptMidMark);
      }
      if (OptVolMark != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(OptVolMark);
      }
      if (UOpnMark != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(UOpnMark);
      }
      if (OptOpnVolMark != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(OptOpnVolMark);
      }
      if (OptOpnMidMark != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(OptOpnMidMark);
      }
      if (OptOpnClrMark != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(OptOpnClrMark);
      }
      if (OptOpnPosPrv != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OptOpnPosPrv);
      }
      if (OptOpnPosClr != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OptOpnPosClr);
      }
      if (OptOpnPos != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OptOpnPos);
      }
      if (OptOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) OptOpnPosSrc);
      }
      if (CnBot != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(CnSld);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(CnClosed);
      }
      if (EdgeOpened != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(EdgeOpened);
      }
      if (EdgeClosed != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(EdgeClosed);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(TrdDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(TrdGamma);
      }
      if (TrdDeltaMny != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(TrdDeltaMny);
      }
      if (OptMnyBot != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(OptMnyBot);
      }
      if (OptMnySld != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(OptMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(DayPnl);
      }
      if (DnDayPnl != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(DnDayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlVolMark != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(OpnPnlVolMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (CnNetOpnPos != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(CnNetOpnPos);
      }
      if (CnNetCurPos != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(CnNetCurPos);
      }
      if (CnAtmEquiv != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(CnAtmEquiv);
      }
      if (Beta != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) BetaSource);
      }
      if (DivDays != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(DivDays);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) HedgeDeltaRule);
      }
      if (BinaryDays != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(BinaryDays);
      }
      if (Days != 0) {
        output.WriteRawTag(216, 17);
        output.WriteInt32(Days);
      }
      if (Years != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(Ddiv);
      }
      if (Dadj != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(Dadj);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(AtmVol);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(AtmVega);
      }
      if (IVol != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(IVol);
      }
      if (IVolSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) IVolSrc);
      }
      if (De != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(Ve);
      }
      if (Rh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(Rh);
      }
      if (Ph != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(Ph);
      }
      if (Vo != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(Va);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(DeDecay);
      }
      if (Err != 0) {
        output.WriteRawTag(160, 21);
        output.WriteInt32(Err);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(VeSlope);
      }
      if (HedgeDe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(HedgeDe);
      }
      if (HedgeGa != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(HedgeGa);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(SrSlope);
      }
      if (IsBinary != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) IsBinary);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(PremOvPar);
      }
      if (Xde != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(Xde);
      }
      if (LoBound != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(LoBound);
      }
      if (Su90 != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(Su90);
      }
      if (Sd90 != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(Sd90);
      }
      if (Su50 != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(Su50);
      }
      if (Sd50 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(Sd50);
      }
      if (Su15 != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(Su15);
      }
      if (Sd15 != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(Sd15);
      }
      if (Su10 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Su10);
      }
      if (Sd10 != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(Sd10);
      }
      if (Su06 != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(Su06);
      }
      if (Sd08 != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(Sd08);
      }
      if (Su05 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(Su05);
      }
      if (Sd05 != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(Sd05);
      }
      if (Su1E != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(Su1E);
      }
      if (Sd1E != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(Sd1E);
      }
      if (Su2E != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Su2E);
      }
      if (Sd2E != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(Sd2E);
      }
      if (Earn != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(Earn);
      }
      if (Cash != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(Cash);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(170, 26);
        output.WriteString(TheoModel);
      }
      if (TVol != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(TVol);
      }
      if (TOpx != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(TOpx);
      }
      if (TBOpnPx != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(TBOpnPx);
      }
      if (TSOpnPx != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(TSOpnPx);
      }
      if (TBClsPx != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(TBClsPx);
      }
      if (TSClsPx != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(TSClsPx);
      }
      if (TDe != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(TDe);
      }
      if (TGa != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(TGa);
      }
      if (TErr != 0) {
        output.WriteRawTag(128, 28);
        output.WriteInt32(TErr);
      }
      if (TheoModel2.Length != 0) {
        output.WriteRawTag(154, 28);
        output.WriteString(TheoModel2);
      }
      if (TVol2 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(TVol2);
      }
      if (TOpx2 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TOpx2);
      }
      if (TErr2 != 0) {
        output.WriteRawTag(224, 28);
        output.WriteInt32(TErr2);
      }
      if (YearsPr != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(YearsPr);
      }
      if (RatePr != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(RatePr);
      }
      if (SdivPr != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(SdivPr);
      }
      if (DdivPr != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(DdivPr);
      }
      if (IVolPr != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(IVolPr);
      }
      if (DePr != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(DePr);
      }
      if (GaPr != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(GaPr);
      }
      if (ThPr != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(ThPr);
      }
      if (VePr != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(VePr);
      }
      if (RhPr != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(RhPr);
      }
      if (PhPr != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(PhPr);
      }
      if (VoPr != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(VoPr);
      }
      if (VaPr != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(VaPr);
      }
      if (ErrPr != 0) {
        output.WriteRawTag(176, 31);
        output.WriteInt32(ErrPr);
      }
      if (VeSlopePr != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(VeSlopePr);
      }
      if (HedgeDePr != 0F) {
        output.WriteRawTag(229, 31);
        output.WriteFloat(HedgeDePr);
      }
      if (TVolPr != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(TVolPr);
      }
      if (TOpxPr != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(TOpxPr);
      }
      if (TDePr != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(TDePr);
      }
      if (TVolPr2 != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(TVolPr2);
      }
      if (TOpxPr2 != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(TOpxPr2);
      }
      if (TDePr2 != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(TDePr2);
      }
      if (XdePr != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(XdePr);
      }
      if (OpnPnlDe != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(OpnPnlDe);
      }
      if (OpnPnlGa != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(OpnPnlGa);
      }
      if (OpnPnlTh != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(OpnPnlTh);
      }
      if (OpnPnlVe != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(OpnPnlVe);
      }
      if (OpnPnlVo != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(OpnPnlVo);
      }
      if (OpnPnlVa != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(OpnPnlVa);
      }
      if (OpnPnlSl != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(OpnPnlSl);
      }
      if (OpnPnlRate != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(OpnPnlRate);
      }
      if (OpnPnlSDiv != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(OpnPnlSDiv);
      }
      if (OpnPnlDDiv != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(OpnPnlDDiv);
      }
      if (OpnPnlSv != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(OpnPnlSv);
      }
      if (OpnPnlErr != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(OpnPnlErr);
      }
      if (ShBotC0 != 0) {
        output.WriteRawTag(192, 35);
        output.WriteInt32(ShBotC0);
      }
      if (ShSldC0 != 0) {
        output.WriteRawTag(216, 35);
        output.WriteInt32(ShSldC0);
      }
      if (ShMnyC0 != 0F) {
        output.WriteRawTag(245, 35);
        output.WriteFloat(ShMnyC0);
      }
      if (ShBotC1 != 0) {
        output.WriteRawTag(136, 36);
        output.WriteInt32(ShBotC1);
      }
      if (ShSldC1 != 0) {
        output.WriteRawTag(160, 36);
        output.WriteInt32(ShSldC1);
      }
      if (ShMnyC1 != 0F) {
        output.WriteRawTag(189, 36);
        output.WriteFloat(ShMnyC1);
      }
      if (MarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(208, 36);
        output.WriteEnum((int) MarkErrCodes);
      }
      if (ExValue != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(ExValue);
      }
      if (RiskAlert != global::Spiderrock.Protobuf.AlertCode.Unspecified) {
        output.WriteRawTag(128, 37);
        output.WriteEnum((int) RiskAlert);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(178, 37);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 37);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(213, 37);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(221, 37);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(237, 37);
        output.WriteFloat(MarginUUpVUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AggGroup);
      }
      if (fkey_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Fkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) ExType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(MultihedgePVRatio);
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) OptionType);
      }
      if (CashOnEx != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(CashOnEx);
      }
      if (StrikeRatio != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StrikeRatio);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(UPrcRatio);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 9);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(UPrc);
      }
      if (UBid != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(UAsk);
      }
      if (UMark != 0D) {
        output.WriteRawTag(201, 10);
        output.WriteDouble(UMark);
      }
      if (UMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) UMarkSource);
      }
      if (OptBid != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(OptBid);
      }
      if (OptAsk != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(OptAsk);
      }
      if (OptMidMark != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(OptMidMark);
      }
      if (OptVolMark != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(OptVolMark);
      }
      if (UOpnMark != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(UOpnMark);
      }
      if (OptOpnVolMark != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(OptOpnVolMark);
      }
      if (OptOpnMidMark != 0D) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(OptOpnMidMark);
      }
      if (OptOpnClrMark != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(OptOpnClrMark);
      }
      if (OptOpnPosPrv != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(OptOpnPosPrv);
      }
      if (OptOpnPosClr != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OptOpnPosClr);
      }
      if (OptOpnPos != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OptOpnPos);
      }
      if (OptOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) OptOpnPosSrc);
      }
      if (CnBot != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(CnSld);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(CnClosed);
      }
      if (EdgeOpened != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(EdgeOpened);
      }
      if (EdgeClosed != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(EdgeClosed);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(TrdDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(TrdGamma);
      }
      if (TrdDeltaMny != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(TrdDeltaMny);
      }
      if (OptMnyBot != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(OptMnyBot);
      }
      if (OptMnySld != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(OptMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(DayPnl);
      }
      if (DnDayPnl != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(DnDayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlVolMark != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(OpnPnlVolMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (CnNetOpnPos != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(CnNetOpnPos);
      }
      if (CnNetCurPos != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(CnNetCurPos);
      }
      if (CnAtmEquiv != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(CnAtmEquiv);
      }
      if (Beta != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(248, 16);
        output.WriteEnum((int) BetaSource);
      }
      if (DivDays != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(DivDays);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        output.WriteRawTag(168, 17);
        output.WriteEnum((int) HedgeDeltaRule);
      }
      if (BinaryDays != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(BinaryDays);
      }
      if (Days != 0) {
        output.WriteRawTag(216, 17);
        output.WriteInt32(Days);
      }
      if (Years != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(Ddiv);
      }
      if (Dadj != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(Dadj);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(AtmVol);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(AtmVega);
      }
      if (IVol != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(IVol);
      }
      if (IVolSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        output.WriteRawTag(176, 19);
        output.WriteEnum((int) IVolSrc);
      }
      if (De != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(Ve);
      }
      if (Rh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(Rh);
      }
      if (Ph != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(Ph);
      }
      if (Vo != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(Vo);
      }
      if (Va != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(Va);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(DeDecay);
      }
      if (Err != 0) {
        output.WriteRawTag(160, 21);
        output.WriteInt32(Err);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(VeSlope);
      }
      if (HedgeDe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(HedgeDe);
      }
      if (HedgeGa != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(HedgeGa);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(SrSlope);
      }
      if (IsBinary != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(152, 22);
        output.WriteEnum((int) IsBinary);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(PremOvPar);
      }
      if (Xde != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(Xde);
      }
      if (LoBound != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(LoBound);
      }
      if (Su90 != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(Su90);
      }
      if (Sd90 != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(Sd90);
      }
      if (Su50 != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(Su50);
      }
      if (Sd50 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(Sd50);
      }
      if (Su15 != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(Su15);
      }
      if (Sd15 != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(Sd15);
      }
      if (Su10 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Su10);
      }
      if (Sd10 != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(Sd10);
      }
      if (Su06 != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(Su06);
      }
      if (Sd08 != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(Sd08);
      }
      if (Su05 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(Su05);
      }
      if (Sd05 != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(Sd05);
      }
      if (Su1E != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(Su1E);
      }
      if (Sd1E != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(Sd1E);
      }
      if (Su2E != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(Su2E);
      }
      if (Sd2E != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(Sd2E);
      }
      if (Earn != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(Earn);
      }
      if (Cash != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(Cash);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(170, 26);
        output.WriteString(TheoModel);
      }
      if (TVol != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(TVol);
      }
      if (TOpx != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(TOpx);
      }
      if (TBOpnPx != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(TBOpnPx);
      }
      if (TSOpnPx != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(TSOpnPx);
      }
      if (TBClsPx != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(TBClsPx);
      }
      if (TSClsPx != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(TSClsPx);
      }
      if (TDe != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(TDe);
      }
      if (TGa != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(TGa);
      }
      if (TErr != 0) {
        output.WriteRawTag(128, 28);
        output.WriteInt32(TErr);
      }
      if (TheoModel2.Length != 0) {
        output.WriteRawTag(154, 28);
        output.WriteString(TheoModel2);
      }
      if (TVol2 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(TVol2);
      }
      if (TOpx2 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TOpx2);
      }
      if (TErr2 != 0) {
        output.WriteRawTag(224, 28);
        output.WriteInt32(TErr2);
      }
      if (YearsPr != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(YearsPr);
      }
      if (RatePr != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(RatePr);
      }
      if (SdivPr != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(SdivPr);
      }
      if (DdivPr != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(DdivPr);
      }
      if (IVolPr != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(IVolPr);
      }
      if (DePr != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(DePr);
      }
      if (GaPr != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(GaPr);
      }
      if (ThPr != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(ThPr);
      }
      if (VePr != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(VePr);
      }
      if (RhPr != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(RhPr);
      }
      if (PhPr != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(PhPr);
      }
      if (VoPr != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(VoPr);
      }
      if (VaPr != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(VaPr);
      }
      if (ErrPr != 0) {
        output.WriteRawTag(176, 31);
        output.WriteInt32(ErrPr);
      }
      if (VeSlopePr != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(VeSlopePr);
      }
      if (HedgeDePr != 0F) {
        output.WriteRawTag(229, 31);
        output.WriteFloat(HedgeDePr);
      }
      if (TVolPr != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(TVolPr);
      }
      if (TOpxPr != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(TOpxPr);
      }
      if (TDePr != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(TDePr);
      }
      if (TVolPr2 != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(TVolPr2);
      }
      if (TOpxPr2 != 0F) {
        output.WriteRawTag(221, 32);
        output.WriteFloat(TOpxPr2);
      }
      if (TDePr2 != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(TDePr2);
      }
      if (XdePr != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(XdePr);
      }
      if (OpnPnlDe != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(OpnPnlDe);
      }
      if (OpnPnlGa != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(OpnPnlGa);
      }
      if (OpnPnlTh != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(OpnPnlTh);
      }
      if (OpnPnlVe != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(OpnPnlVe);
      }
      if (OpnPnlVo != 0F) {
        output.WriteRawTag(133, 34);
        output.WriteFloat(OpnPnlVo);
      }
      if (OpnPnlVa != 0F) {
        output.WriteRawTag(157, 34);
        output.WriteFloat(OpnPnlVa);
      }
      if (OpnPnlSl != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(OpnPnlSl);
      }
      if (OpnPnlRate != 0F) {
        output.WriteRawTag(205, 34);
        output.WriteFloat(OpnPnlRate);
      }
      if (OpnPnlSDiv != 0F) {
        output.WriteRawTag(229, 34);
        output.WriteFloat(OpnPnlSDiv);
      }
      if (OpnPnlDDiv != 0F) {
        output.WriteRawTag(253, 34);
        output.WriteFloat(OpnPnlDDiv);
      }
      if (OpnPnlSv != 0F) {
        output.WriteRawTag(149, 35);
        output.WriteFloat(OpnPnlSv);
      }
      if (OpnPnlErr != 0F) {
        output.WriteRawTag(173, 35);
        output.WriteFloat(OpnPnlErr);
      }
      if (ShBotC0 != 0) {
        output.WriteRawTag(192, 35);
        output.WriteInt32(ShBotC0);
      }
      if (ShSldC0 != 0) {
        output.WriteRawTag(216, 35);
        output.WriteInt32(ShSldC0);
      }
      if (ShMnyC0 != 0F) {
        output.WriteRawTag(245, 35);
        output.WriteFloat(ShMnyC0);
      }
      if (ShBotC1 != 0) {
        output.WriteRawTag(136, 36);
        output.WriteInt32(ShBotC1);
      }
      if (ShSldC1 != 0) {
        output.WriteRawTag(160, 36);
        output.WriteInt32(ShSldC1);
      }
      if (ShMnyC1 != 0F) {
        output.WriteRawTag(189, 36);
        output.WriteFloat(ShMnyC1);
      }
      if (MarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(208, 36);
        output.WriteEnum((int) MarkErrCodes);
      }
      if (ExValue != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(ExValue);
      }
      if (RiskAlert != global::Spiderrock.Protobuf.AlertCode.Unspecified) {
        output.WriteRawTag(128, 37);
        output.WriteEnum((int) RiskAlert);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(152, 37);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(178, 37);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 37);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(213, 37);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(221, 37);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(237, 37);
        output.WriteFloat(MarginUUpVUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AggGroup);
      }
      if (fkey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        size += 2 + 4;
      }
      if (OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptionType);
      }
      if (CashOnEx != 0F) {
        size += 2 + 4;
      }
      if (StrikeRatio != 0F) {
        size += 2 + 4;
      }
      if (UPrcRatio != 0F) {
        size += 2 + 4;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (UMark != 0D) {
        size += 2 + 8;
      }
      if (UMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UMarkSource);
      }
      if (OptBid != 0F) {
        size += 2 + 4;
      }
      if (OptAsk != 0F) {
        size += 2 + 4;
      }
      if (OptMidMark != 0D) {
        size += 2 + 8;
      }
      if (OptVolMark != 0D) {
        size += 2 + 8;
      }
      if (UOpnMark != 0D) {
        size += 2 + 8;
      }
      if (OptOpnVolMark != 0D) {
        size += 2 + 8;
      }
      if (OptOpnMidMark != 0D) {
        size += 2 + 8;
      }
      if (OptOpnClrMark != 0D) {
        size += 2 + 8;
      }
      if (OptOpnPosPrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OptOpnPosPrv);
      }
      if (OptOpnPosClr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OptOpnPosClr);
      }
      if (OptOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OptOpnPos);
      }
      if (OptOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptOpnPosSrc);
      }
      if (CnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBot);
      }
      if (CnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSld);
      }
      if (CnOpened != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnOpened);
      }
      if (CnClosed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnClosed);
      }
      if (EdgeOpened != 0F) {
        size += 2 + 4;
      }
      if (EdgeClosed != 0F) {
        size += 2 + 4;
      }
      if (TrdDelta != 0F) {
        size += 2 + 4;
      }
      if (TrdGamma != 0F) {
        size += 2 + 4;
      }
      if (TrdDeltaMny != 0F) {
        size += 2 + 4;
      }
      if (OptMnyBot != 0D) {
        size += 2 + 8;
      }
      if (OptMnySld != 0D) {
        size += 2 + 8;
      }
      if (DayPnl != 0F) {
        size += 2 + 4;
      }
      if (DnDayPnl != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlMidMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVolMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlClrMark != 0F) {
        size += 2 + 4;
      }
      if (CnNetOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnNetOpnPos);
      }
      if (CnNetCurPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnNetCurPos);
      }
      if (CnAtmEquiv != 0F) {
        size += 2 + 4;
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (DivDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivDays);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeDeltaRule);
      }
      if (BinaryDays != 0F) {
        size += 2 + 4;
      }
      if (Days != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (Dadj != 0F) {
        size += 2 + 4;
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (AtmVega != 0F) {
        size += 2 + 4;
      }
      if (IVol != 0F) {
        size += 2 + 4;
      }
      if (IVolSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IVolSrc);
      }
      if (De != 0F) {
        size += 2 + 4;
      }
      if (Ga != 0F) {
        size += 2 + 4;
      }
      if (Th != 0F) {
        size += 2 + 4;
      }
      if (Ve != 0F) {
        size += 2 + 4;
      }
      if (Rh != 0F) {
        size += 2 + 4;
      }
      if (Ph != 0F) {
        size += 2 + 4;
      }
      if (Vo != 0F) {
        size += 2 + 4;
      }
      if (Va != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (Err != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (VeSlope != 0F) {
        size += 2 + 4;
      }
      if (HedgeDe != 0F) {
        size += 2 + 4;
      }
      if (HedgeGa != 0F) {
        size += 2 + 4;
      }
      if (SrSlope != 0F) {
        size += 2 + 4;
      }
      if (IsBinary != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsBinary);
      }
      if (PremOvPar != 0F) {
        size += 2 + 4;
      }
      if (Xde != 0F) {
        size += 2 + 4;
      }
      if (LoBound != 0F) {
        size += 2 + 4;
      }
      if (Su90 != 0F) {
        size += 2 + 4;
      }
      if (Sd90 != 0F) {
        size += 2 + 4;
      }
      if (Su50 != 0F) {
        size += 2 + 4;
      }
      if (Sd50 != 0F) {
        size += 2 + 4;
      }
      if (Su15 != 0F) {
        size += 2 + 4;
      }
      if (Sd15 != 0F) {
        size += 2 + 4;
      }
      if (Su10 != 0F) {
        size += 2 + 4;
      }
      if (Sd10 != 0F) {
        size += 2 + 4;
      }
      if (Su06 != 0F) {
        size += 2 + 4;
      }
      if (Sd08 != 0F) {
        size += 2 + 4;
      }
      if (Su05 != 0F) {
        size += 2 + 4;
      }
      if (Sd05 != 0F) {
        size += 2 + 4;
      }
      if (Su1E != 0F) {
        size += 2 + 4;
      }
      if (Sd1E != 0F) {
        size += 2 + 4;
      }
      if (Su2E != 0F) {
        size += 2 + 4;
      }
      if (Sd2E != 0F) {
        size += 2 + 4;
      }
      if (Earn != 0F) {
        size += 2 + 4;
      }
      if (Cash != 0F) {
        size += 2 + 4;
      }
      if (TheoModel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoModel);
      }
      if (TVol != 0F) {
        size += 2 + 4;
      }
      if (TOpx != 0F) {
        size += 2 + 4;
      }
      if (TBOpnPx != 0F) {
        size += 2 + 4;
      }
      if (TSOpnPx != 0F) {
        size += 2 + 4;
      }
      if (TBClsPx != 0F) {
        size += 2 + 4;
      }
      if (TSClsPx != 0F) {
        size += 2 + 4;
      }
      if (TDe != 0F) {
        size += 2 + 4;
      }
      if (TGa != 0F) {
        size += 2 + 4;
      }
      if (TErr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TErr);
      }
      if (TheoModel2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoModel2);
      }
      if (TVol2 != 0F) {
        size += 2 + 4;
      }
      if (TOpx2 != 0F) {
        size += 2 + 4;
      }
      if (TErr2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TErr2);
      }
      if (YearsPr != 0F) {
        size += 2 + 4;
      }
      if (RatePr != 0F) {
        size += 2 + 4;
      }
      if (SdivPr != 0F) {
        size += 2 + 4;
      }
      if (DdivPr != 0F) {
        size += 2 + 4;
      }
      if (IVolPr != 0F) {
        size += 2 + 4;
      }
      if (DePr != 0F) {
        size += 2 + 4;
      }
      if (GaPr != 0F) {
        size += 2 + 4;
      }
      if (ThPr != 0F) {
        size += 2 + 4;
      }
      if (VePr != 0F) {
        size += 2 + 4;
      }
      if (RhPr != 0F) {
        size += 2 + 4;
      }
      if (PhPr != 0F) {
        size += 2 + 4;
      }
      if (VoPr != 0F) {
        size += 2 + 4;
      }
      if (VaPr != 0F) {
        size += 2 + 4;
      }
      if (ErrPr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ErrPr);
      }
      if (VeSlopePr != 0F) {
        size += 2 + 4;
      }
      if (HedgeDePr != 0F) {
        size += 2 + 4;
      }
      if (TVolPr != 0F) {
        size += 2 + 4;
      }
      if (TOpxPr != 0F) {
        size += 2 + 4;
      }
      if (TDePr != 0F) {
        size += 2 + 4;
      }
      if (TVolPr2 != 0F) {
        size += 2 + 4;
      }
      if (TOpxPr2 != 0F) {
        size += 2 + 4;
      }
      if (TDePr2 != 0F) {
        size += 2 + 4;
      }
      if (XdePr != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlDe != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlGa != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlTh != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVe != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVo != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVa != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlSl != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlRate != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlSDiv != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlDDiv != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlSv != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlErr != 0F) {
        size += 2 + 4;
      }
      if (ShBotC0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotC0);
      }
      if (ShSldC0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldC0);
      }
      if (ShMnyC0 != 0F) {
        size += 2 + 4;
      }
      if (ShBotC1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotC1);
      }
      if (ShSldC1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldC1);
      }
      if (ShMnyC1 != 0F) {
        size += 2 + 4;
      }
      if (MarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarkErrCodes);
      }
      if (ExValue != 0F) {
        size += 2 + 4;
      }
      if (RiskAlert != global::Spiderrock.Protobuf.AlertCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskAlert);
      }
      if (NumExecutions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxExecDttm);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionPositionRecordV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.AggGroup.Length != 0) {
        AggGroup = other.AggGroup;
      }
      if (other.fkey_ != null) {
        if (fkey_ == null) {
          Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        Fkey.MergeFrom(other.Fkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        Multihedge = other.Multihedge;
      }
      if (other.multihedgeSource_ != null) {
        if (multihedgeSource_ == null) {
          MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
        }
        MultihedgeSource.MergeFrom(other.MultihedgeSource);
      }
      if (other.MultihedgePVRatio != 0F) {
        MultihedgePVRatio = other.MultihedgePVRatio;
      }
      if (other.OptionType != global::Spiderrock.Protobuf.OptionType.Unspecified) {
        OptionType = other.OptionType;
      }
      if (other.CashOnEx != 0F) {
        CashOnEx = other.CashOnEx;
      }
      if (other.StrikeRatio != 0F) {
        StrikeRatio = other.StrikeRatio;
      }
      if (other.UPrcRatio != 0F) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.UMark != 0D) {
        UMark = other.UMark;
      }
      if (other.UMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        UMarkSource = other.UMarkSource;
      }
      if (other.OptBid != 0F) {
        OptBid = other.OptBid;
      }
      if (other.OptAsk != 0F) {
        OptAsk = other.OptAsk;
      }
      if (other.OptMidMark != 0D) {
        OptMidMark = other.OptMidMark;
      }
      if (other.OptVolMark != 0D) {
        OptVolMark = other.OptVolMark;
      }
      if (other.UOpnMark != 0D) {
        UOpnMark = other.UOpnMark;
      }
      if (other.OptOpnVolMark != 0D) {
        OptOpnVolMark = other.OptOpnVolMark;
      }
      if (other.OptOpnMidMark != 0D) {
        OptOpnMidMark = other.OptOpnMidMark;
      }
      if (other.OptOpnClrMark != 0D) {
        OptOpnClrMark = other.OptOpnClrMark;
      }
      if (other.OptOpnPosPrv != 0) {
        OptOpnPosPrv = other.OptOpnPosPrv;
      }
      if (other.OptOpnPosClr != 0) {
        OptOpnPosClr = other.OptOpnPosClr;
      }
      if (other.OptOpnPos != 0) {
        OptOpnPos = other.OptOpnPos;
      }
      if (other.OptOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        OptOpnPosSrc = other.OptOpnPosSrc;
      }
      if (other.CnBot != 0) {
        CnBot = other.CnBot;
      }
      if (other.CnSld != 0) {
        CnSld = other.CnSld;
      }
      if (other.CnOpened != 0) {
        CnOpened = other.CnOpened;
      }
      if (other.CnClosed != 0) {
        CnClosed = other.CnClosed;
      }
      if (other.EdgeOpened != 0F) {
        EdgeOpened = other.EdgeOpened;
      }
      if (other.EdgeClosed != 0F) {
        EdgeClosed = other.EdgeClosed;
      }
      if (other.TrdDelta != 0F) {
        TrdDelta = other.TrdDelta;
      }
      if (other.TrdGamma != 0F) {
        TrdGamma = other.TrdGamma;
      }
      if (other.TrdDeltaMny != 0F) {
        TrdDeltaMny = other.TrdDeltaMny;
      }
      if (other.OptMnyBot != 0D) {
        OptMnyBot = other.OptMnyBot;
      }
      if (other.OptMnySld != 0D) {
        OptMnySld = other.OptMnySld;
      }
      if (other.DayPnl != 0F) {
        DayPnl = other.DayPnl;
      }
      if (other.DnDayPnl != 0F) {
        DnDayPnl = other.DnDayPnl;
      }
      if (other.OpnPnlMidMark != 0F) {
        OpnPnlMidMark = other.OpnPnlMidMark;
      }
      if (other.OpnPnlVolMark != 0F) {
        OpnPnlVolMark = other.OpnPnlVolMark;
      }
      if (other.OpnPnlClrMark != 0F) {
        OpnPnlClrMark = other.OpnPnlClrMark;
      }
      if (other.CnNetOpnPos != 0) {
        CnNetOpnPos = other.CnNetOpnPos;
      }
      if (other.CnNetCurPos != 0) {
        CnNetCurPos = other.CnNetCurPos;
      }
      if (other.CnAtmEquiv != 0F) {
        CnAtmEquiv = other.CnAtmEquiv;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.DivDays != 0) {
        DivDays = other.DivDays;
      }
      if (other.HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        HedgeDeltaRule = other.HedgeDeltaRule;
      }
      if (other.BinaryDays != 0F) {
        BinaryDays = other.BinaryDays;
      }
      if (other.Days != 0) {
        Days = other.Days;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.Dadj != 0F) {
        Dadj = other.Dadj;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmVega != 0F) {
        AtmVega = other.AtmVega;
      }
      if (other.IVol != 0F) {
        IVol = other.IVol;
      }
      if (other.IVolSrc != global::Spiderrock.Protobuf.MarkSource.Unspecified) {
        IVolSrc = other.IVolSrc;
      }
      if (other.De != 0F) {
        De = other.De;
      }
      if (other.Ga != 0F) {
        Ga = other.Ga;
      }
      if (other.Th != 0F) {
        Th = other.Th;
      }
      if (other.Ve != 0F) {
        Ve = other.Ve;
      }
      if (other.Rh != 0F) {
        Rh = other.Rh;
      }
      if (other.Ph != 0F) {
        Ph = other.Ph;
      }
      if (other.Vo != 0F) {
        Vo = other.Vo;
      }
      if (other.Va != 0F) {
        Va = other.Va;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.VeSlope != 0F) {
        VeSlope = other.VeSlope;
      }
      if (other.HedgeDe != 0F) {
        HedgeDe = other.HedgeDe;
      }
      if (other.HedgeGa != 0F) {
        HedgeGa = other.HedgeGa;
      }
      if (other.SrSlope != 0F) {
        SrSlope = other.SrSlope;
      }
      if (other.IsBinary != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsBinary = other.IsBinary;
      }
      if (other.PremOvPar != 0F) {
        PremOvPar = other.PremOvPar;
      }
      if (other.Xde != 0F) {
        Xde = other.Xde;
      }
      if (other.LoBound != 0F) {
        LoBound = other.LoBound;
      }
      if (other.Su90 != 0F) {
        Su90 = other.Su90;
      }
      if (other.Sd90 != 0F) {
        Sd90 = other.Sd90;
      }
      if (other.Su50 != 0F) {
        Su50 = other.Su50;
      }
      if (other.Sd50 != 0F) {
        Sd50 = other.Sd50;
      }
      if (other.Su15 != 0F) {
        Su15 = other.Su15;
      }
      if (other.Sd15 != 0F) {
        Sd15 = other.Sd15;
      }
      if (other.Su10 != 0F) {
        Su10 = other.Su10;
      }
      if (other.Sd10 != 0F) {
        Sd10 = other.Sd10;
      }
      if (other.Su06 != 0F) {
        Su06 = other.Su06;
      }
      if (other.Sd08 != 0F) {
        Sd08 = other.Sd08;
      }
      if (other.Su05 != 0F) {
        Su05 = other.Su05;
      }
      if (other.Sd05 != 0F) {
        Sd05 = other.Sd05;
      }
      if (other.Su1E != 0F) {
        Su1E = other.Su1E;
      }
      if (other.Sd1E != 0F) {
        Sd1E = other.Sd1E;
      }
      if (other.Su2E != 0F) {
        Su2E = other.Su2E;
      }
      if (other.Sd2E != 0F) {
        Sd2E = other.Sd2E;
      }
      if (other.Earn != 0F) {
        Earn = other.Earn;
      }
      if (other.Cash != 0F) {
        Cash = other.Cash;
      }
      if (other.TheoModel.Length != 0) {
        TheoModel = other.TheoModel;
      }
      if (other.TVol != 0F) {
        TVol = other.TVol;
      }
      if (other.TOpx != 0F) {
        TOpx = other.TOpx;
      }
      if (other.TBOpnPx != 0F) {
        TBOpnPx = other.TBOpnPx;
      }
      if (other.TSOpnPx != 0F) {
        TSOpnPx = other.TSOpnPx;
      }
      if (other.TBClsPx != 0F) {
        TBClsPx = other.TBClsPx;
      }
      if (other.TSClsPx != 0F) {
        TSClsPx = other.TSClsPx;
      }
      if (other.TDe != 0F) {
        TDe = other.TDe;
      }
      if (other.TGa != 0F) {
        TGa = other.TGa;
      }
      if (other.TErr != 0) {
        TErr = other.TErr;
      }
      if (other.TheoModel2.Length != 0) {
        TheoModel2 = other.TheoModel2;
      }
      if (other.TVol2 != 0F) {
        TVol2 = other.TVol2;
      }
      if (other.TOpx2 != 0F) {
        TOpx2 = other.TOpx2;
      }
      if (other.TErr2 != 0) {
        TErr2 = other.TErr2;
      }
      if (other.YearsPr != 0F) {
        YearsPr = other.YearsPr;
      }
      if (other.RatePr != 0F) {
        RatePr = other.RatePr;
      }
      if (other.SdivPr != 0F) {
        SdivPr = other.SdivPr;
      }
      if (other.DdivPr != 0F) {
        DdivPr = other.DdivPr;
      }
      if (other.IVolPr != 0F) {
        IVolPr = other.IVolPr;
      }
      if (other.DePr != 0F) {
        DePr = other.DePr;
      }
      if (other.GaPr != 0F) {
        GaPr = other.GaPr;
      }
      if (other.ThPr != 0F) {
        ThPr = other.ThPr;
      }
      if (other.VePr != 0F) {
        VePr = other.VePr;
      }
      if (other.RhPr != 0F) {
        RhPr = other.RhPr;
      }
      if (other.PhPr != 0F) {
        PhPr = other.PhPr;
      }
      if (other.VoPr != 0F) {
        VoPr = other.VoPr;
      }
      if (other.VaPr != 0F) {
        VaPr = other.VaPr;
      }
      if (other.ErrPr != 0) {
        ErrPr = other.ErrPr;
      }
      if (other.VeSlopePr != 0F) {
        VeSlopePr = other.VeSlopePr;
      }
      if (other.HedgeDePr != 0F) {
        HedgeDePr = other.HedgeDePr;
      }
      if (other.TVolPr != 0F) {
        TVolPr = other.TVolPr;
      }
      if (other.TOpxPr != 0F) {
        TOpxPr = other.TOpxPr;
      }
      if (other.TDePr != 0F) {
        TDePr = other.TDePr;
      }
      if (other.TVolPr2 != 0F) {
        TVolPr2 = other.TVolPr2;
      }
      if (other.TOpxPr2 != 0F) {
        TOpxPr2 = other.TOpxPr2;
      }
      if (other.TDePr2 != 0F) {
        TDePr2 = other.TDePr2;
      }
      if (other.XdePr != 0F) {
        XdePr = other.XdePr;
      }
      if (other.MarginUDnVDn != 0F) {
        MarginUDnVDn = other.MarginUDnVDn;
      }
      if (other.MarginUDnVUp != 0F) {
        MarginUDnVUp = other.MarginUDnVUp;
      }
      if (other.MarginUUpVDn != 0F) {
        MarginUUpVDn = other.MarginUUpVDn;
      }
      if (other.MarginUUpVUp != 0F) {
        MarginUUpVUp = other.MarginUUpVUp;
      }
      if (other.OpnPnlDe != 0F) {
        OpnPnlDe = other.OpnPnlDe;
      }
      if (other.OpnPnlGa != 0F) {
        OpnPnlGa = other.OpnPnlGa;
      }
      if (other.OpnPnlTh != 0F) {
        OpnPnlTh = other.OpnPnlTh;
      }
      if (other.OpnPnlVe != 0F) {
        OpnPnlVe = other.OpnPnlVe;
      }
      if (other.OpnPnlVo != 0F) {
        OpnPnlVo = other.OpnPnlVo;
      }
      if (other.OpnPnlVa != 0F) {
        OpnPnlVa = other.OpnPnlVa;
      }
      if (other.OpnPnlSl != 0F) {
        OpnPnlSl = other.OpnPnlSl;
      }
      if (other.OpnPnlRate != 0F) {
        OpnPnlRate = other.OpnPnlRate;
      }
      if (other.OpnPnlSDiv != 0F) {
        OpnPnlSDiv = other.OpnPnlSDiv;
      }
      if (other.OpnPnlDDiv != 0F) {
        OpnPnlDDiv = other.OpnPnlDDiv;
      }
      if (other.OpnPnlSv != 0F) {
        OpnPnlSv = other.OpnPnlSv;
      }
      if (other.OpnPnlErr != 0F) {
        OpnPnlErr = other.OpnPnlErr;
      }
      if (other.ShBotC0 != 0) {
        ShBotC0 = other.ShBotC0;
      }
      if (other.ShSldC0 != 0) {
        ShSldC0 = other.ShSldC0;
      }
      if (other.ShMnyC0 != 0F) {
        ShMnyC0 = other.ShMnyC0;
      }
      if (other.ShBotC1 != 0) {
        ShBotC1 = other.ShBotC1;
      }
      if (other.ShSldC1 != 0) {
        ShSldC1 = other.ShSldC1;
      }
      if (other.ShMnyC1 != 0F) {
        ShMnyC1 = other.ShMnyC1;
      }
      if (other.MarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        MarkErrCodes = other.MarkErrCodes;
      }
      if (other.ExValue != 0F) {
        ExValue = other.ExValue;
      }
      if (other.RiskAlert != global::Spiderrock.Protobuf.AlertCode.Unspecified) {
        RiskAlert = other.RiskAlert;
      }
      if (other.NumExecutions != 0) {
        NumExecutions = other.NumExecutions;
      }
      if (other.maxExecDttm_ != null) {
        if (maxExecDttm_ == null) {
          MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxExecDttm.MergeFrom(other.MaxExecDttm);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            AggGroup = input.ReadString();
            break;
          }
          case 874: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 898: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 920: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 944: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 970: {
            if (multihedgeSource_ == null) {
              MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(MultihedgeSource);
            break;
          }
          case 997: {
            MultihedgePVRatio = input.ReadFloat();
            break;
          }
          case 1016: {
            OptionType = (global::Spiderrock.Protobuf.OptionType) input.ReadEnum();
            break;
          }
          case 1045: {
            CashOnEx = input.ReadFloat();
            break;
          }
          case 1069: {
            StrikeRatio = input.ReadFloat();
            break;
          }
          case 1093: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 1112: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1136: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1165: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1189: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1208: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1232: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1256: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1281: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1305: {
            UBid = input.ReadDouble();
            break;
          }
          case 1329: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1353: {
            UMark = input.ReadDouble();
            break;
          }
          case 1376: {
            UMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1405: {
            OptBid = input.ReadFloat();
            break;
          }
          case 1429: {
            OptAsk = input.ReadFloat();
            break;
          }
          case 1449: {
            OptMidMark = input.ReadDouble();
            break;
          }
          case 1473: {
            OptVolMark = input.ReadDouble();
            break;
          }
          case 1497: {
            UOpnMark = input.ReadDouble();
            break;
          }
          case 1521: {
            OptOpnVolMark = input.ReadDouble();
            break;
          }
          case 1545: {
            OptOpnMidMark = input.ReadDouble();
            break;
          }
          case 1569: {
            OptOpnClrMark = input.ReadDouble();
            break;
          }
          case 1592: {
            OptOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1616: {
            OptOpnPosClr = input.ReadInt32();
            break;
          }
          case 1640: {
            OptOpnPos = input.ReadInt32();
            break;
          }
          case 1664: {
            OptOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1688: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1712: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1736: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1760: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1789: {
            EdgeOpened = input.ReadFloat();
            break;
          }
          case 1813: {
            EdgeClosed = input.ReadFloat();
            break;
          }
          case 1837: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 1861: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 1885: {
            TrdDeltaMny = input.ReadFloat();
            break;
          }
          case 1905: {
            OptMnyBot = input.ReadDouble();
            break;
          }
          case 1929: {
            OptMnySld = input.ReadDouble();
            break;
          }
          case 1957: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1981: {
            DnDayPnl = input.ReadFloat();
            break;
          }
          case 2005: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 2029: {
            OpnPnlVolMark = input.ReadFloat();
            break;
          }
          case 2053: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 2072: {
            CnNetOpnPos = input.ReadInt32();
            break;
          }
          case 2096: {
            CnNetCurPos = input.ReadInt32();
            break;
          }
          case 2125: {
            CnAtmEquiv = input.ReadFloat();
            break;
          }
          case 2149: {
            Beta = input.ReadFloat();
            break;
          }
          case 2168: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 2192: {
            DivDays = input.ReadInt32();
            break;
          }
          case 2216: {
            HedgeDeltaRule = (global::Spiderrock.Protobuf.HedgeDeltaRule) input.ReadEnum();
            break;
          }
          case 2245: {
            BinaryDays = input.ReadFloat();
            break;
          }
          case 2264: {
            Days = input.ReadInt32();
            break;
          }
          case 2293: {
            Years = input.ReadFloat();
            break;
          }
          case 2317: {
            Rate = input.ReadFloat();
            break;
          }
          case 2341: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 2365: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 2389: {
            Dadj = input.ReadFloat();
            break;
          }
          case 2413: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 2437: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 2461: {
            IVol = input.ReadFloat();
            break;
          }
          case 2480: {
            IVolSrc = (global::Spiderrock.Protobuf.MarkSource) input.ReadEnum();
            break;
          }
          case 2509: {
            De = input.ReadFloat();
            break;
          }
          case 2533: {
            Ga = input.ReadFloat();
            break;
          }
          case 2557: {
            Th = input.ReadFloat();
            break;
          }
          case 2581: {
            Ve = input.ReadFloat();
            break;
          }
          case 2605: {
            Rh = input.ReadFloat();
            break;
          }
          case 2629: {
            Ph = input.ReadFloat();
            break;
          }
          case 2653: {
            Vo = input.ReadFloat();
            break;
          }
          case 2677: {
            Va = input.ReadFloat();
            break;
          }
          case 2701: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 2720: {
            Err = input.ReadInt32();
            break;
          }
          case 2749: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 2773: {
            HedgeDe = input.ReadFloat();
            break;
          }
          case 2797: {
            HedgeGa = input.ReadFloat();
            break;
          }
          case 2821: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 2840: {
            IsBinary = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2869: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 2893: {
            Xde = input.ReadFloat();
            break;
          }
          case 2917: {
            LoBound = input.ReadFloat();
            break;
          }
          case 2941: {
            Su90 = input.ReadFloat();
            break;
          }
          case 2965: {
            Sd90 = input.ReadFloat();
            break;
          }
          case 2989: {
            Su50 = input.ReadFloat();
            break;
          }
          case 3013: {
            Sd50 = input.ReadFloat();
            break;
          }
          case 3037: {
            Su15 = input.ReadFloat();
            break;
          }
          case 3061: {
            Sd15 = input.ReadFloat();
            break;
          }
          case 3085: {
            Su10 = input.ReadFloat();
            break;
          }
          case 3109: {
            Sd10 = input.ReadFloat();
            break;
          }
          case 3133: {
            Su06 = input.ReadFloat();
            break;
          }
          case 3157: {
            Sd08 = input.ReadFloat();
            break;
          }
          case 3181: {
            Su05 = input.ReadFloat();
            break;
          }
          case 3205: {
            Sd05 = input.ReadFloat();
            break;
          }
          case 3229: {
            Su1E = input.ReadFloat();
            break;
          }
          case 3253: {
            Sd1E = input.ReadFloat();
            break;
          }
          case 3277: {
            Su2E = input.ReadFloat();
            break;
          }
          case 3301: {
            Sd2E = input.ReadFloat();
            break;
          }
          case 3325: {
            Earn = input.ReadFloat();
            break;
          }
          case 3349: {
            Cash = input.ReadFloat();
            break;
          }
          case 3370: {
            TheoModel = input.ReadString();
            break;
          }
          case 3397: {
            TVol = input.ReadFloat();
            break;
          }
          case 3421: {
            TOpx = input.ReadFloat();
            break;
          }
          case 3445: {
            TBOpnPx = input.ReadFloat();
            break;
          }
          case 3469: {
            TSOpnPx = input.ReadFloat();
            break;
          }
          case 3493: {
            TBClsPx = input.ReadFloat();
            break;
          }
          case 3517: {
            TSClsPx = input.ReadFloat();
            break;
          }
          case 3541: {
            TDe = input.ReadFloat();
            break;
          }
          case 3565: {
            TGa = input.ReadFloat();
            break;
          }
          case 3584: {
            TErr = input.ReadInt32();
            break;
          }
          case 3610: {
            TheoModel2 = input.ReadString();
            break;
          }
          case 3637: {
            TVol2 = input.ReadFloat();
            break;
          }
          case 3661: {
            TOpx2 = input.ReadFloat();
            break;
          }
          case 3680: {
            TErr2 = input.ReadInt32();
            break;
          }
          case 3709: {
            YearsPr = input.ReadFloat();
            break;
          }
          case 3733: {
            RatePr = input.ReadFloat();
            break;
          }
          case 3757: {
            SdivPr = input.ReadFloat();
            break;
          }
          case 3781: {
            DdivPr = input.ReadFloat();
            break;
          }
          case 3805: {
            IVolPr = input.ReadFloat();
            break;
          }
          case 3829: {
            DePr = input.ReadFloat();
            break;
          }
          case 3853: {
            GaPr = input.ReadFloat();
            break;
          }
          case 3877: {
            ThPr = input.ReadFloat();
            break;
          }
          case 3901: {
            VePr = input.ReadFloat();
            break;
          }
          case 3925: {
            RhPr = input.ReadFloat();
            break;
          }
          case 3949: {
            PhPr = input.ReadFloat();
            break;
          }
          case 3973: {
            VoPr = input.ReadFloat();
            break;
          }
          case 3997: {
            VaPr = input.ReadFloat();
            break;
          }
          case 4016: {
            ErrPr = input.ReadInt32();
            break;
          }
          case 4045: {
            VeSlopePr = input.ReadFloat();
            break;
          }
          case 4069: {
            HedgeDePr = input.ReadFloat();
            break;
          }
          case 4093: {
            TVolPr = input.ReadFloat();
            break;
          }
          case 4117: {
            TOpxPr = input.ReadFloat();
            break;
          }
          case 4141: {
            TDePr = input.ReadFloat();
            break;
          }
          case 4165: {
            TVolPr2 = input.ReadFloat();
            break;
          }
          case 4189: {
            TOpxPr2 = input.ReadFloat();
            break;
          }
          case 4213: {
            TDePr2 = input.ReadFloat();
            break;
          }
          case 4237: {
            XdePr = input.ReadFloat();
            break;
          }
          case 4261: {
            OpnPnlDe = input.ReadFloat();
            break;
          }
          case 4285: {
            OpnPnlGa = input.ReadFloat();
            break;
          }
          case 4309: {
            OpnPnlTh = input.ReadFloat();
            break;
          }
          case 4333: {
            OpnPnlVe = input.ReadFloat();
            break;
          }
          case 4357: {
            OpnPnlVo = input.ReadFloat();
            break;
          }
          case 4381: {
            OpnPnlVa = input.ReadFloat();
            break;
          }
          case 4405: {
            OpnPnlSl = input.ReadFloat();
            break;
          }
          case 4429: {
            OpnPnlRate = input.ReadFloat();
            break;
          }
          case 4453: {
            OpnPnlSDiv = input.ReadFloat();
            break;
          }
          case 4477: {
            OpnPnlDDiv = input.ReadFloat();
            break;
          }
          case 4501: {
            OpnPnlSv = input.ReadFloat();
            break;
          }
          case 4525: {
            OpnPnlErr = input.ReadFloat();
            break;
          }
          case 4544: {
            ShBotC0 = input.ReadInt32();
            break;
          }
          case 4568: {
            ShSldC0 = input.ReadInt32();
            break;
          }
          case 4597: {
            ShMnyC0 = input.ReadFloat();
            break;
          }
          case 4616: {
            ShBotC1 = input.ReadInt32();
            break;
          }
          case 4640: {
            ShSldC1 = input.ReadInt32();
            break;
          }
          case 4669: {
            ShMnyC1 = input.ReadFloat();
            break;
          }
          case 4688: {
            MarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 4717: {
            ExValue = input.ReadFloat();
            break;
          }
          case 4736: {
            RiskAlert = (global::Spiderrock.Protobuf.AlertCode) input.ReadEnum();
            break;
          }
          case 4760: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 4786: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 4810: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4821: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 4829: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 4837: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 4845: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.OptionPositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            AggGroup = input.ReadString();
            break;
          }
          case 874: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 898: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 920: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 944: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 970: {
            if (multihedgeSource_ == null) {
              MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(MultihedgeSource);
            break;
          }
          case 997: {
            MultihedgePVRatio = input.ReadFloat();
            break;
          }
          case 1016: {
            OptionType = (global::Spiderrock.Protobuf.OptionType) input.ReadEnum();
            break;
          }
          case 1045: {
            CashOnEx = input.ReadFloat();
            break;
          }
          case 1069: {
            StrikeRatio = input.ReadFloat();
            break;
          }
          case 1093: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 1112: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1136: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1165: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1189: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1208: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1232: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1256: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1281: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1305: {
            UBid = input.ReadDouble();
            break;
          }
          case 1329: {
            UAsk = input.ReadDouble();
            break;
          }
          case 1353: {
            UMark = input.ReadDouble();
            break;
          }
          case 1376: {
            UMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1405: {
            OptBid = input.ReadFloat();
            break;
          }
          case 1429: {
            OptAsk = input.ReadFloat();
            break;
          }
          case 1449: {
            OptMidMark = input.ReadDouble();
            break;
          }
          case 1473: {
            OptVolMark = input.ReadDouble();
            break;
          }
          case 1497: {
            UOpnMark = input.ReadDouble();
            break;
          }
          case 1521: {
            OptOpnVolMark = input.ReadDouble();
            break;
          }
          case 1545: {
            OptOpnMidMark = input.ReadDouble();
            break;
          }
          case 1569: {
            OptOpnClrMark = input.ReadDouble();
            break;
          }
          case 1592: {
            OptOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1616: {
            OptOpnPosClr = input.ReadInt32();
            break;
          }
          case 1640: {
            OptOpnPos = input.ReadInt32();
            break;
          }
          case 1664: {
            OptOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1688: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1712: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1736: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1760: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1789: {
            EdgeOpened = input.ReadFloat();
            break;
          }
          case 1813: {
            EdgeClosed = input.ReadFloat();
            break;
          }
          case 1837: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 1861: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 1885: {
            TrdDeltaMny = input.ReadFloat();
            break;
          }
          case 1905: {
            OptMnyBot = input.ReadDouble();
            break;
          }
          case 1929: {
            OptMnySld = input.ReadDouble();
            break;
          }
          case 1957: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1981: {
            DnDayPnl = input.ReadFloat();
            break;
          }
          case 2005: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 2029: {
            OpnPnlVolMark = input.ReadFloat();
            break;
          }
          case 2053: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 2072: {
            CnNetOpnPos = input.ReadInt32();
            break;
          }
          case 2096: {
            CnNetCurPos = input.ReadInt32();
            break;
          }
          case 2125: {
            CnAtmEquiv = input.ReadFloat();
            break;
          }
          case 2149: {
            Beta = input.ReadFloat();
            break;
          }
          case 2168: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 2192: {
            DivDays = input.ReadInt32();
            break;
          }
          case 2216: {
            HedgeDeltaRule = (global::Spiderrock.Protobuf.HedgeDeltaRule) input.ReadEnum();
            break;
          }
          case 2245: {
            BinaryDays = input.ReadFloat();
            break;
          }
          case 2264: {
            Days = input.ReadInt32();
            break;
          }
          case 2293: {
            Years = input.ReadFloat();
            break;
          }
          case 2317: {
            Rate = input.ReadFloat();
            break;
          }
          case 2341: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 2365: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 2389: {
            Dadj = input.ReadFloat();
            break;
          }
          case 2413: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 2437: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 2461: {
            IVol = input.ReadFloat();
            break;
          }
          case 2480: {
            IVolSrc = (global::Spiderrock.Protobuf.MarkSource) input.ReadEnum();
            break;
          }
          case 2509: {
            De = input.ReadFloat();
            break;
          }
          case 2533: {
            Ga = input.ReadFloat();
            break;
          }
          case 2557: {
            Th = input.ReadFloat();
            break;
          }
          case 2581: {
            Ve = input.ReadFloat();
            break;
          }
          case 2605: {
            Rh = input.ReadFloat();
            break;
          }
          case 2629: {
            Ph = input.ReadFloat();
            break;
          }
          case 2653: {
            Vo = input.ReadFloat();
            break;
          }
          case 2677: {
            Va = input.ReadFloat();
            break;
          }
          case 2701: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 2720: {
            Err = input.ReadInt32();
            break;
          }
          case 2749: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 2773: {
            HedgeDe = input.ReadFloat();
            break;
          }
          case 2797: {
            HedgeGa = input.ReadFloat();
            break;
          }
          case 2821: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 2840: {
            IsBinary = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2869: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 2893: {
            Xde = input.ReadFloat();
            break;
          }
          case 2917: {
            LoBound = input.ReadFloat();
            break;
          }
          case 2941: {
            Su90 = input.ReadFloat();
            break;
          }
          case 2965: {
            Sd90 = input.ReadFloat();
            break;
          }
          case 2989: {
            Su50 = input.ReadFloat();
            break;
          }
          case 3013: {
            Sd50 = input.ReadFloat();
            break;
          }
          case 3037: {
            Su15 = input.ReadFloat();
            break;
          }
          case 3061: {
            Sd15 = input.ReadFloat();
            break;
          }
          case 3085: {
            Su10 = input.ReadFloat();
            break;
          }
          case 3109: {
            Sd10 = input.ReadFloat();
            break;
          }
          case 3133: {
            Su06 = input.ReadFloat();
            break;
          }
          case 3157: {
            Sd08 = input.ReadFloat();
            break;
          }
          case 3181: {
            Su05 = input.ReadFloat();
            break;
          }
          case 3205: {
            Sd05 = input.ReadFloat();
            break;
          }
          case 3229: {
            Su1E = input.ReadFloat();
            break;
          }
          case 3253: {
            Sd1E = input.ReadFloat();
            break;
          }
          case 3277: {
            Su2E = input.ReadFloat();
            break;
          }
          case 3301: {
            Sd2E = input.ReadFloat();
            break;
          }
          case 3325: {
            Earn = input.ReadFloat();
            break;
          }
          case 3349: {
            Cash = input.ReadFloat();
            break;
          }
          case 3370: {
            TheoModel = input.ReadString();
            break;
          }
          case 3397: {
            TVol = input.ReadFloat();
            break;
          }
          case 3421: {
            TOpx = input.ReadFloat();
            break;
          }
          case 3445: {
            TBOpnPx = input.ReadFloat();
            break;
          }
          case 3469: {
            TSOpnPx = input.ReadFloat();
            break;
          }
          case 3493: {
            TBClsPx = input.ReadFloat();
            break;
          }
          case 3517: {
            TSClsPx = input.ReadFloat();
            break;
          }
          case 3541: {
            TDe = input.ReadFloat();
            break;
          }
          case 3565: {
            TGa = input.ReadFloat();
            break;
          }
          case 3584: {
            TErr = input.ReadInt32();
            break;
          }
          case 3610: {
            TheoModel2 = input.ReadString();
            break;
          }
          case 3637: {
            TVol2 = input.ReadFloat();
            break;
          }
          case 3661: {
            TOpx2 = input.ReadFloat();
            break;
          }
          case 3680: {
            TErr2 = input.ReadInt32();
            break;
          }
          case 3709: {
            YearsPr = input.ReadFloat();
            break;
          }
          case 3733: {
            RatePr = input.ReadFloat();
            break;
          }
          case 3757: {
            SdivPr = input.ReadFloat();
            break;
          }
          case 3781: {
            DdivPr = input.ReadFloat();
            break;
          }
          case 3805: {
            IVolPr = input.ReadFloat();
            break;
          }
          case 3829: {
            DePr = input.ReadFloat();
            break;
          }
          case 3853: {
            GaPr = input.ReadFloat();
            break;
          }
          case 3877: {
            ThPr = input.ReadFloat();
            break;
          }
          case 3901: {
            VePr = input.ReadFloat();
            break;
          }
          case 3925: {
            RhPr = input.ReadFloat();
            break;
          }
          case 3949: {
            PhPr = input.ReadFloat();
            break;
          }
          case 3973: {
            VoPr = input.ReadFloat();
            break;
          }
          case 3997: {
            VaPr = input.ReadFloat();
            break;
          }
          case 4016: {
            ErrPr = input.ReadInt32();
            break;
          }
          case 4045: {
            VeSlopePr = input.ReadFloat();
            break;
          }
          case 4069: {
            HedgeDePr = input.ReadFloat();
            break;
          }
          case 4093: {
            TVolPr = input.ReadFloat();
            break;
          }
          case 4117: {
            TOpxPr = input.ReadFloat();
            break;
          }
          case 4141: {
            TDePr = input.ReadFloat();
            break;
          }
          case 4165: {
            TVolPr2 = input.ReadFloat();
            break;
          }
          case 4189: {
            TOpxPr2 = input.ReadFloat();
            break;
          }
          case 4213: {
            TDePr2 = input.ReadFloat();
            break;
          }
          case 4237: {
            XdePr = input.ReadFloat();
            break;
          }
          case 4261: {
            OpnPnlDe = input.ReadFloat();
            break;
          }
          case 4285: {
            OpnPnlGa = input.ReadFloat();
            break;
          }
          case 4309: {
            OpnPnlTh = input.ReadFloat();
            break;
          }
          case 4333: {
            OpnPnlVe = input.ReadFloat();
            break;
          }
          case 4357: {
            OpnPnlVo = input.ReadFloat();
            break;
          }
          case 4381: {
            OpnPnlVa = input.ReadFloat();
            break;
          }
          case 4405: {
            OpnPnlSl = input.ReadFloat();
            break;
          }
          case 4429: {
            OpnPnlRate = input.ReadFloat();
            break;
          }
          case 4453: {
            OpnPnlSDiv = input.ReadFloat();
            break;
          }
          case 4477: {
            OpnPnlDDiv = input.ReadFloat();
            break;
          }
          case 4501: {
            OpnPnlSv = input.ReadFloat();
            break;
          }
          case 4525: {
            OpnPnlErr = input.ReadFloat();
            break;
          }
          case 4544: {
            ShBotC0 = input.ReadInt32();
            break;
          }
          case 4568: {
            ShSldC0 = input.ReadInt32();
            break;
          }
          case 4597: {
            ShMnyC0 = input.ReadFloat();
            break;
          }
          case 4616: {
            ShBotC1 = input.ReadInt32();
            break;
          }
          case 4640: {
            ShSldC1 = input.ReadInt32();
            break;
          }
          case 4669: {
            ShMnyC1 = input.ReadFloat();
            break;
          }
          case 4688: {
            MarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 4717: {
            ExValue = input.ReadFloat();
            break;
          }
          case 4736: {
            RiskAlert = (global::Spiderrock.Protobuf.AlertCode) input.ReadEnum();
            break;
          }
          case 4760: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 4786: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 4810: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4821: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 4829: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 4837: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 4845: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OptionPositionRecordV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.OptionPositionRecordV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          accnt_ = other.accnt_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        /// <summary>
        /// ends with '$n' if an MH allocation fraction (n = 1-N) [MMH segment number]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 13;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
