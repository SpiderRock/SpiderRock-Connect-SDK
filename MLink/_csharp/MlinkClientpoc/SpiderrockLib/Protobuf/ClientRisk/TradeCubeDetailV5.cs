// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/TradeCubeDetailV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/TradeCubeDetailV5.proto</summary>
  public static partial class TradeCubeDetailV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/TradeCubeDetailV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradeCubeDetailV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQcm90b2J1Zi9DbGllbnRSaXNrL1RyYWRlQ3ViZURldGFpbFY1LnByb3Rv",
            "EhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90",
            "bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLeLwoRVHJhZGVD",
            "dWJlRGV0YWlsVjUSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk1lc3NhZ2VNZXRhZGF0YRI5CgRwa2V5GAIgASgLMisuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5UcmFkZUN1YmVEZXRhaWxWNS5QS2V5EjIKCnJ1bl9zdGF0",
            "dXMYZCABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLlJ1blN0YXR1cxI8Cg9z",
            "eXNfZW52aXJvbm1lbnQYZyABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVmLlN5",
            "c0Vudmlyb25tZW50Eg8KB3ZlcnNpb24YaiABKAUSEQoJY2xfb3JkX2lkGG0g",
            "ASgJEhUKDXBhcmVudF9udW1iZXIYcCABKAMSEgoKcGFja2FnZV9pZBhzIAEo",
            "AxIUCgxhbHRfb3JkZXJfaWQYdiABKAkSGAoQc3JjX3JvdXRpbmdfY29kZRh5",
            "IAEoCRI0CgtzcGRyX3NvdXJjZRh8IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3BkclNvdXJjZRIVCg1ncm91cGluZ19jb2RlGH8gASgDEg4KBWFjY250",
            "GIIBIAEoCRIUCgtjbGllbnRfZmlybRiFASABKAkSFgoNcHJpX2FnZ19ncm91",
            "cBiIASABKAkSFgoNc2VjX2FnZ19ncm91cBiLASABKAkSMAoHc2VjX2tleRiR",
            "ASABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRIzCghzZWNf",
            "dHlwZRiUASABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBl",
            "Ei8KBnRpY2tlchiXASABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tl",
            "cktleRIUCgt2aWV3X2dyb3VwMRiaASABKAkSFAoLdmlld19ncm91cDIYnQEg",
            "ASgJEhQKC3ZpZXdfZ3JvdXAzGKABIAEoCRITCgpyaXNrX2NsYXNzGKMBIAEo",
            "CRI1CgtzeW1ib2xfdHlwZRimASABKA4yHy5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlN5bWJvbFR5cGUSDwoGc2VjdG9yGKkBIAEoCRIQCgdpbmRfbnVtGKwBIAEo",
            "BRIQCgdzdWJfbnVtGK8BIAEoBRIQCgdncnBfbnVtGLIBIAEoBRIQCgduYnJf",
            "bnVtGLUBIAEoBRIOCgVlZGF5cxi4ASABKAUSLwoIZXhwX2NvZGUYuwEgASgO",
            "Mhwuc3BpZGVycm9jay5wcm90b2J1Zi5FeHBDb2RlEjEKCXNrZXdfY29kZRi+",
            "ASABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLlNrZXdDb2RlEjMKCndpZHRo",
            "X2NvZGUYwQEgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5XaWR0aENvZGUS",
            "NwoMcHJpY2VfZm9ybWF0GMQBIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "UHJpY2VGb3JtYXQSOQoOdV9wcmljZV9mb3JtYXQYxwEgASgOMiAuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5QcmljZUZvcm1hdBIOCgV5ZWFycxjKASABKAISGgoR",
            "dW5kZXJsaWVyc19wZXJfY24YzQEgASgFEjsKDnVuZGVybGllcl90eXBlGNAB",
            "IAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuVW5kZXJsaWVyVHlwZRITCgp0",
            "aWNrX3ZhbHVlGNMBIAEoAhIUCgtwb2ludF92YWx1ZRjWASABKAISNgoOcG9p",
            "bnRfY3VycmVuY3kY2QEgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5DdXJy",
            "ZW5jeRIUCgt1X3ByY19yYXRpbxjcASABKAISFgoNbWluX3RpY2tfc2l6ZRjf",
            "ASABKAISFQoMcm91dGluZ19jb2RlGOIBIAEoCRIVCgxvcmlnX2V4ZWNfaUQY",
            "5QEgASgJEhUKDGxhc3RfZXhlY19pRBjoASABKAkSMgoNdHJhbnNhY3RfZHR0",
            "bRjrASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUKC2V4ZWNf",
            "c3RhdHVzGO4BIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRXhlY1N0YXR1",
            "cxIUCgtyZW1vdGVfdGV4dBjxASABKAkSPQoQb3JkZXJfbGltaXRfdHlwZRj0",
            "ASABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJMaW1pdFR5cGUSPwoR",
            "b3JkZXJfbGltaXRfY2xhc3MY9wEgASgOMiMuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5TcGRyTGltaXRDbGFzcxI6CgxwYXJlbnRfc2hhcGUY+gEgASgOMiMuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TcGRyT3JkZXJTaGFwZRJIChVwYXJlbnRfb3Jk",
            "ZXJfaGFuZGxpbmcY/QEgASgOMiguc3BpZGVycm9jay5wcm90b2J1Zi5QYXJl",
            "bnRPcmRlckhhbmRsaW5nEkwKF3BhcmVudF9iYWxhbmNlX2hhbmRsaW5nGIAC",
            "IAEoDjIqLnNwaWRlcnJvY2sucHJvdG9idWYuUGFyZW50QmFsYW5jZUhhbmRs",
            "aW5nEhoKEXBhcmVudF9vcmRlcl9zaXplGIMCIAEoBRIPCgZtZXRob2QYhgIg",
            "ASgJEhEKCHN0cmF0ZWd5GIkCIAEoCRISCgl1c2VyX25hbWUYjAIgASgJEg8K",
            "Bm9yaWdpbhiPAiABKAkSDwoGc291cmNlGJICIAEoCRIPCgZzZXJ2ZXIYlQIg",
            "ASgJEhYKDWNsZWFyaW5nX2Zpcm0YmAIgASgJEhcKDmNsZWFyaW5nX2FjY250",
            "GJsCIAEoCRI6Cg1sYXN0X2NhcGFjaXR5GJ4CIAEoDjIiLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuT3JkZXJDYXBhY2l0eRIxCglleGVjX3JvbGUYoQIgASgOMh0u",
            "c3BpZGVycm9jay5wcm90b2J1Zi5FeGVjUm9sZRIXCg5leGVjX2Jya3JfY29k",
            "ZRjBBSABKAkSGAoPZXhlY19icmtyX2FjY250GKcCIAEoCRIaChFleGVjX2Jy",
            "a3JfY2xfZmlybRiqAiABKAkSHAoTZXhlY19icmtyX3VzZXJfbmFtZRitAiAB",
            "KAkSOgoSY2xlYXJpbmdfZmxpcF90eXBlGLACIAEoDjIdLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuRmxpcFR5cGUSGwoSY2xlYXJpbmdfZmxpcF9maXJtGLMCIAEo",
            "CRIcChNjbGVhcmluZ19mbGlwX2FjY250GLYCIAEoCRIWCg1yaXNrX2dyb3Vw",
            "X2lkGLkCIAEoAxIXCg5maWxsX2Jya3JfcmF0ZRi8AiABKAISGgoRZmlsbF9y",
            "b3V0aW5nX3JhdGUYvwIgASgCEj4KEGJpbGxpbmdfc2VjX3R5cGUYwgIgASgO",
            "MiMuc3BpZGVycm9jay5wcm90b2J1Zi5CaWxsaW5nU2VjVHlwZRI/ChBiaWxs",
            "aW5nX2NhdGVnb3J5GMUCIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuQmls",
            "bGluZ0NhdGVnb3J5EjEKCWZpcm1fdHlwZRjIAiABKA4yHS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkZpcm1UeXBlEisKBHNpZGUYywIgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5CdXlTZWxsEjMKCnByaWNlX3R5cGUYzgIgASgOMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5QcmljZVR5cGUSNwoKc3NhbGVfZmxhZxjRAiAB",
            "KA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlNob3J0U2FsZUZsYWcSPAoPc3Bk",
            "cl9zU2FsZV9mbGFnGNQCIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuU2hv",
            "cnRTYWxlRmxhZxI5Cg1wb3NpdGlvbl90eXBlGNcCIAEoDjIhLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuUG9zaXRpb25UeXBlEjMKCmF1dG9faGVkZ2UY2gIgASgO",
            "Mh4uc3BpZGVycm9jay5wcm90b2J1Zi5BdXRvSGVkZ2USLwoKb3JkZXJfZHR0",
            "bRjdAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKCm9yZGVy",
            "X3VCaWQY4AIgASgBEhMKCm9yZGVyX3VBc2sY4wIgASgBEhIKCW9yZGVyX2Jp",
            "ZBjmAiABKAESEgoJb3JkZXJfYXNrGOkCIAEoARIXCg5vcmRlcl9zdXJmX3By",
            "YxjsAiABKAISFwoOb3JkZXJfc3VyZl92b2wY7wIgASgCEhgKD29yZGVyX2xp",
            "bWl0X3ZvbBjyAiABKAISGAoPb3JkZXJfbGltaXRfcHJjGPUCIAEoARIdChRv",
            "cmRlcl9saW1pdF9yZWZfdVByYxj4AiABKAESOQoLY2hpbGRfc2hhcGUY+wIg",
            "ASgOMiMuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyT3JkZXJTaGFwZRITCgpj",
            "aGlsZF9zaXplGP4CIAEoBRIUCgtjaGlsZF9wcmljZRiBAyABKAESEwoKY2hp",
            "bGRfZXhjaBiEAyABKAkSFgoNY2hpbGRfZXhfZGVzdBjCBSABKAkSLwoKY2hp",
            "bGRfZHR0bRiKAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMK",
            "CmNoaWxkX3VCaWQYjQMgASgBEhMKCmNoaWxkX3VBc2sYkAMgASgBEhIKCWNo",
            "aWxkX2JpZBiTAyABKAESEgoJY2hpbGRfYXNrGJYDIAEoARIXCg5jaGlsZF9z",
            "dXJmX3ByYxiZAyABKAISEgoJY2hpbGRfdm9sGJwDIAEoAhITCgpjaGlsZF9w",
            "cm9iGJ8DIAEoAhIYCg9jaGlsZF9saW1pdF9wcmMYogMgASgBEh0KFGNoaWxk",
            "X2xpbWl0X3JlZl91UHJjGKUDIAEoARIYCg9jaGlsZF9saW1pdF9wbmwYqAMg",
            "ASgCEj4KEmNoaWxkX2FsZ29faGFuZGxlchirAyABKA4yIS5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkNoaWxkSGFuZGxlchIdChRjaGlsZF9vcmRlcl9oYW5kbGlu",
            "ZxiuAyABKAkSRAoTY2hpbGRfY3JlYXRlX3JlYXNvbhixAyABKA4yJi5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkNoaWxkQ3JlYXRlUmVhc29uEkQKE2NoaWxkX2Nh",
            "bmNlbF9yZWFzb24YtAMgASgOMiYuc3BpZGVycm9jay5wcm90b2J1Zi5DaGls",
            "ZENhbmNlbFJlYXNvbhI5ChBjaGlsZF9ta3Rfc3RhbmNlGLcDIAEoDjIeLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuTWt0U3RhbmNlEjgKE2NoaWxkX2N4bF9hdHRl",
            "bXB0ZWQYugMgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxIfChZj",
            "aGlsZF9jeGxfZmlsbF9sYXRlbmN5GL0DIAEoAhISCglmaWxsX2V4Y2gYwAMg",
            "ASgJEhMKCmZpbGxfcHJpY2UYwwMgASgBEhAKB2ZpbGxfdHMYxgMgASgBEi4K",
            "CWZpbGxfZHR0bRjJAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EhIKCWZpbGxfc2l6ZRjMAyABKAUSFgoNZWZmX2ZpbGxfc2l6ZRjPAyABKAUS",
            "EQoIZmlsbF92b2wY0gMgASgCEhIKCWZpbGxfcHJvYhjVAyABKAISFwoOZmls",
            "bF9saW1pdF9wcmMY2AMgASgBEhwKE2ZpbGxfbGltaXRfcmVmX3VQcmMY2wMg",
            "ASgBEhcKDmZpbGxfbGltaXRfcG5sGN4DIAEoAhIQCgdmaWxsX2RlGOEDIAEo",
            "AhIQCgdmaWxsX3ZlGOQDIAEoAhIQCgdmaWxsX3RoGOcDIAEoAhISCglmaWxs",
            "X3VQcmMY7QMgASgBEhIKCWZpbGxfYmV0YRjwAyABKAISEAoHZmlsbF90dhiU",
            "BCABKAISEAoHZmlsbF90cBiXBCABKAISEgoJZmlsbF91QmlkGJoEIAEoARIS",
            "CglmaWxsX3VBc2sYnQQgASgBEhEKCGZpbGxfYmlkGKAEIAEoARIRCghmaWxs",
            "X2FzaxijBCABKAESFgoNZmlsbF9zdXJmX3ByYximBCABKAISGwoSZmlsbF9w",
            "b3N0X3VNYXJrMV9tGKkEIAEoARIcChNmaWxsX3Bvc3RfdU1hcmsxMF9tGKwE",
            "IAEoARIaChFmaWxsX3Bvc3RfbWFyazFfbRivBCABKAESGwoSZmlsbF9wb3N0",
            "X21hcmsxMF9tGLIEIAEoARIXCg5tYXJnaW5fdURuX3ZEbhi9BSABKAISFwoO",
            "bWFyZ2luX3VEbl92VXAYvgUgASgCEhcKDm1hcmdpbl91VXBfdkRuGL8FIAEo",
            "AhIXCg5tYXJnaW5fdVVwX3ZVcBjABSABKAISMQoJcmlza19jb2RlGLUEIAEo",
            "DjIdLnNwaWRlcnJvY2sucHJvdG9idWYuUmlza0NvZGUSGwoSZXhjaF9saXF1",
            "aWRpdHlfdGFnGLgEIAEoCRIbChJzcGRyX2xpcXVpZGl0eV90YWcYuwQgASgJ",
            "EhkKEGZpbGxfZXhjaF9kZXRhaWwYvgQgASgJEhcKDm5vdGlvbmFsX3ZhbHVl",
            "GMEEIAEoAhIVCgxtYXJrZXRfdmFsdWUYxAQgASgCEhgKD29yZGVyX21rdF93",
            "aWR0aBjHBCABKAISGAoPY2hpbGRfbWt0X3dpZHRoGMoEIAEoAhIXCg5maWxs",
            "X21rdF93aWR0aBjNBCABKAISGQoQcGFyZW50X29yZGVyX2FnZRjQBCABKAIS",
            "OAoPcGFyZW50X2FnZV9jb2RlGNMEIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuUGFyZW50QWdlEhIKCXRyZF9kZWx0YRjWBCABKAISEwoKdHJkX2REZWx0",
            "YRjZBCABKAISEgoJdHJkX2dhbW1hGNwEIAEoAhIRCgh0cmRfdmVnYRjfBCAB",
            "KAISFAoLdHJkX3d0X3ZlZ2EY4gQgASgCEhIKCXRyZF90aGV0YRjlBCABKAIS",
            "EQoIdHJkX3ByZW0Y6AQgASgCEhEKCHRyZF9iZXRhGOsEIAEoAhISCgl0cmRf",
            "ZEJldGEY7gQgASgCEhIKCXN1cmZfZWRnZRjxBCABKAISFwoOc3VyZl9lZGdl",
            "X3VuaXQY9AQgASgCEhIKCXRoZW9fZWRnZRj3BCABKAISFwoOdGhlb19lZGdl",
            "X3VuaXQY+gQgASgCEhEKCGV4Y2hfZmVlGP0EIAEoAhIXCg5oYWxmX3dpZHRo",
            "X3BubBiABSABKAISFgoNY2xfYXJyaXZlX3BubBiDBSABKAISEwoKYXJyaXZl",
            "X3BubBiGBSABKAISFgoNYXJyaXZlX2RuX3BubBiJBSABKAISGwoSdV9kcmlm",
            "dF9hcnJpdmVfcG5sGIwFIAEoAhITCgpkYXlfZG5fcG5sGI8FIAEoAhITCgpk",
            "YXlfbTFfcG5sGJIFIAEoAhIUCgtkYXlfbTEwX3BubBiVBSABKAISGAoPdV9k",
            "cmlmdF9kYXlfcG5sGJgFIAEoAhIXCg51X2RyaWZ0X20xX3BubBibBSABKAIS",
            "GAoPdV9kcmlmdF9tMTBfcG5sGJ4FIAEoAhIQCgdkYXlfcG5sGKEFIAEoAhIS",
            "CglsaXZlX21hcmsYpAUgASgBEhIKCWxpdmVfdVByYxinBSABKAESEgoJcGVu",
            "ZF9tYXJrGKoFIAEoARISCglwZW5kX3VQcmMYrQUgASgBEhcKDnRyZF9tYXJr",
            "X2Vycm9yGLAFIAEoCRIXCg5kYXlfbWFya19lcnJvchizBSABKAkSEwoKdXNl",
            "cl9kYXRhMRi2BSABKAkSEwoKdXNlcl9kYXRhMhi5BSABKAkSLgoJdGltZXN0",
            "YW1wGLwFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAaTQoEUEtl",
            "eRITCgtmaWxsX251bWJlchgKIAEoAxIwCgp0cmFkZV9kYXRlGAsgASgLMhwu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TradeCubeDetailV5), global::Spiderrock.Protobuf.TradeCubeDetailV5.Parser, new[]{ "Meta", "Pkey", "RunStatus", "SysEnvironment", "Version", "ClOrdId", "ParentNumber", "PackageId", "AltOrderId", "SrcRoutingCode", "SpdrSource", "GroupingCode", "Accnt", "ClientFirm", "PriAggGroup", "SecAggGroup", "SecKey", "SecType", "Ticker", "ViewGroup1", "ViewGroup2", "ViewGroup3", "RiskClass", "SymbolType", "Sector", "IndNum", "SubNum", "GrpNum", "NbrNum", "Edays", "ExpCode", "SkewCode", "WidthCode", "PriceFormat", "UPriceFormat", "Years", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "UPrcRatio", "MinTickSize", "RoutingCode", "OrigExecID", "LastExecID", "TransactDttm", "ExecStatus", "RemoteText", "OrderLimitType", "OrderLimitClass", "ParentShape", "ParentOrderHandling", "ParentBalanceHandling", "ParentOrderSize", "Method", "Strategy", "UserName", "Origin", "Source", "Server", "ClearingFirm", "ClearingAccnt", "LastCapacity", "ExecRole", "ExecBrkrCode", "ExecBrkrAccnt", "ExecBrkrClFirm", "ExecBrkrUserName", "ClearingFlipType", "ClearingFlipFirm", "ClearingFlipAccnt", "RiskGroupId", "FillBrkrRate", "FillRoutingRate", "BillingSecType", "BillingCategory", "FirmType", "Side", "PriceType", "SsaleFlag", "SpdrSSaleFlag", "PositionType", "AutoHedge", "OrderDttm", "OrderUBid", "OrderUAsk", "OrderBid", "OrderAsk", "OrderSurfPrc", "OrderSurfVol", "OrderLimitVol", "OrderLimitPrc", "OrderLimitRefUPrc", "ChildShape", "ChildSize", "ChildPrice", "ChildExch", "ChildExDest", "ChildDttm", "ChildUBid", "ChildUAsk", "ChildBid", "ChildAsk", "ChildSurfPrc", "ChildVol", "ChildProb", "ChildLimitPrc", "ChildLimitRefUPrc", "ChildLimitPnl", "ChildAlgoHandler", "ChildOrderHandling", "ChildCreateReason", "ChildCancelReason", "ChildMktStance", "ChildCxlAttempted", "ChildCxlFillLatency", "FillExch", "FillPrice", "FillTs", "FillDttm", "FillSize", "EffFillSize", "FillVol", "FillProb", "FillLimitPrc", "FillLimitRefUPrc", "FillLimitPnl", "FillDe", "FillVe", "FillTh", "FillUPrc", "FillBeta", "FillTv", "FillTp", "FillUBid", "FillUAsk", "FillBid", "FillAsk", "FillSurfPrc", "FillPostUMark1M", "FillPostUMark10M", "FillPostMark1M", "FillPostMark10M", "MarginUDnVDn", "MarginUDnVUp", "MarginUUpVDn", "MarginUUpVUp", "RiskCode", "ExchLiquidityTag", "SpdrLiquidityTag", "FillExchDetail", "NotionalValue", "MarketValue", "OrderMktWidth", "ChildMktWidth", "FillMktWidth", "ParentOrderAge", "ParentAgeCode", "TrdDelta", "TrdDDelta", "TrdGamma", "TrdVega", "TrdWtVega", "TrdTheta", "TrdPrem", "TrdBeta", "TrdDBeta", "SurfEdge", "SurfEdgeUnit", "TheoEdge", "TheoEdgeUnit", "ExchFee", "HalfWidthPnl", "ClArrivePnl", "ArrivePnl", "ArriveDnPnl", "UDriftArrivePnl", "DayDnPnl", "DayM1Pnl", "DayM10Pnl", "UDriftDayPnl", "UDriftM1Pnl", "UDriftM10Pnl", "DayPnl", "LiveMark", "LiveUPrc", "PendMark", "PendUPrc", "TrdMarkError", "DayMarkError", "UserData1", "UserData2", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey), global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey.Parser, new[]{ "FillNumber", "TradeDate" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///TradeCubeDetail records are published by CoreRiskServers and are visible in SRSE throughout the day.  They are designed to be aggregated and analyzed over time.
  ///TradeCubeDetail records are published to the SpiderRock Archive Host data pipeline after all markup detail is complete.
  /// </summary>
  public sealed partial class TradeCubeDetailV5 : pb::IMessage<TradeCubeDetailV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradeCubeDetailV5> _parser = new pb::MessageParser<TradeCubeDetailV5>(() => new TradeCubeDetailV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradeCubeDetailV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.TradeCubeDetailV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradeCubeDetailV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradeCubeDetailV5(TradeCubeDetailV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      runStatus_ = other.runStatus_;
      sysEnvironment_ = other.sysEnvironment_;
      version_ = other.version_;
      clOrdId_ = other.clOrdId_;
      parentNumber_ = other.parentNumber_;
      packageId_ = other.packageId_;
      altOrderId_ = other.altOrderId_;
      srcRoutingCode_ = other.srcRoutingCode_;
      spdrSource_ = other.spdrSource_;
      groupingCode_ = other.groupingCode_;
      accnt_ = other.accnt_;
      clientFirm_ = other.clientFirm_;
      priAggGroup_ = other.priAggGroup_;
      secAggGroup_ = other.secAggGroup_;
      secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
      secType_ = other.secType_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      viewGroup1_ = other.viewGroup1_;
      viewGroup2_ = other.viewGroup2_;
      viewGroup3_ = other.viewGroup3_;
      riskClass_ = other.riskClass_;
      symbolType_ = other.symbolType_;
      sector_ = other.sector_;
      indNum_ = other.indNum_;
      subNum_ = other.subNum_;
      grpNum_ = other.grpNum_;
      nbrNum_ = other.nbrNum_;
      edays_ = other.edays_;
      expCode_ = other.expCode_;
      skewCode_ = other.skewCode_;
      widthCode_ = other.widthCode_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      years_ = other.years_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      uPrcRatio_ = other.uPrcRatio_;
      minTickSize_ = other.minTickSize_;
      routingCode_ = other.routingCode_;
      origExecID_ = other.origExecID_;
      lastExecID_ = other.lastExecID_;
      transactDttm_ = other.transactDttm_ != null ? other.transactDttm_.Clone() : null;
      execStatus_ = other.execStatus_;
      remoteText_ = other.remoteText_;
      orderLimitType_ = other.orderLimitType_;
      orderLimitClass_ = other.orderLimitClass_;
      parentShape_ = other.parentShape_;
      parentOrderHandling_ = other.parentOrderHandling_;
      parentBalanceHandling_ = other.parentBalanceHandling_;
      parentOrderSize_ = other.parentOrderSize_;
      method_ = other.method_;
      strategy_ = other.strategy_;
      userName_ = other.userName_;
      origin_ = other.origin_;
      source_ = other.source_;
      server_ = other.server_;
      clearingFirm_ = other.clearingFirm_;
      clearingAccnt_ = other.clearingAccnt_;
      lastCapacity_ = other.lastCapacity_;
      execRole_ = other.execRole_;
      execBrkrCode_ = other.execBrkrCode_;
      execBrkrAccnt_ = other.execBrkrAccnt_;
      execBrkrClFirm_ = other.execBrkrClFirm_;
      execBrkrUserName_ = other.execBrkrUserName_;
      clearingFlipType_ = other.clearingFlipType_;
      clearingFlipFirm_ = other.clearingFlipFirm_;
      clearingFlipAccnt_ = other.clearingFlipAccnt_;
      riskGroupId_ = other.riskGroupId_;
      fillBrkrRate_ = other.fillBrkrRate_;
      fillRoutingRate_ = other.fillRoutingRate_;
      billingSecType_ = other.billingSecType_;
      billingCategory_ = other.billingCategory_;
      firmType_ = other.firmType_;
      side_ = other.side_;
      priceType_ = other.priceType_;
      ssaleFlag_ = other.ssaleFlag_;
      spdrSSaleFlag_ = other.spdrSSaleFlag_;
      positionType_ = other.positionType_;
      autoHedge_ = other.autoHedge_;
      orderDttm_ = other.orderDttm_ != null ? other.orderDttm_.Clone() : null;
      orderUBid_ = other.orderUBid_;
      orderUAsk_ = other.orderUAsk_;
      orderBid_ = other.orderBid_;
      orderAsk_ = other.orderAsk_;
      orderSurfPrc_ = other.orderSurfPrc_;
      orderSurfVol_ = other.orderSurfVol_;
      orderLimitVol_ = other.orderLimitVol_;
      orderLimitPrc_ = other.orderLimitPrc_;
      orderLimitRefUPrc_ = other.orderLimitRefUPrc_;
      childShape_ = other.childShape_;
      childSize_ = other.childSize_;
      childPrice_ = other.childPrice_;
      childExch_ = other.childExch_;
      childExDest_ = other.childExDest_;
      childDttm_ = other.childDttm_ != null ? other.childDttm_.Clone() : null;
      childUBid_ = other.childUBid_;
      childUAsk_ = other.childUAsk_;
      childBid_ = other.childBid_;
      childAsk_ = other.childAsk_;
      childSurfPrc_ = other.childSurfPrc_;
      childVol_ = other.childVol_;
      childProb_ = other.childProb_;
      childLimitPrc_ = other.childLimitPrc_;
      childLimitRefUPrc_ = other.childLimitRefUPrc_;
      childLimitPnl_ = other.childLimitPnl_;
      childAlgoHandler_ = other.childAlgoHandler_;
      childOrderHandling_ = other.childOrderHandling_;
      childCreateReason_ = other.childCreateReason_;
      childCancelReason_ = other.childCancelReason_;
      childMktStance_ = other.childMktStance_;
      childCxlAttempted_ = other.childCxlAttempted_;
      childCxlFillLatency_ = other.childCxlFillLatency_;
      fillExch_ = other.fillExch_;
      fillPrice_ = other.fillPrice_;
      fillTs_ = other.fillTs_;
      fillDttm_ = other.fillDttm_ != null ? other.fillDttm_.Clone() : null;
      fillSize_ = other.fillSize_;
      effFillSize_ = other.effFillSize_;
      fillVol_ = other.fillVol_;
      fillProb_ = other.fillProb_;
      fillLimitPrc_ = other.fillLimitPrc_;
      fillLimitRefUPrc_ = other.fillLimitRefUPrc_;
      fillLimitPnl_ = other.fillLimitPnl_;
      fillDe_ = other.fillDe_;
      fillVe_ = other.fillVe_;
      fillTh_ = other.fillTh_;
      fillUPrc_ = other.fillUPrc_;
      fillBeta_ = other.fillBeta_;
      fillTv_ = other.fillTv_;
      fillTp_ = other.fillTp_;
      fillUBid_ = other.fillUBid_;
      fillUAsk_ = other.fillUAsk_;
      fillBid_ = other.fillBid_;
      fillAsk_ = other.fillAsk_;
      fillSurfPrc_ = other.fillSurfPrc_;
      fillPostUMark1M_ = other.fillPostUMark1M_;
      fillPostUMark10M_ = other.fillPostUMark10M_;
      fillPostMark1M_ = other.fillPostMark1M_;
      fillPostMark10M_ = other.fillPostMark10M_;
      marginUDnVDn_ = other.marginUDnVDn_;
      marginUDnVUp_ = other.marginUDnVUp_;
      marginUUpVDn_ = other.marginUUpVDn_;
      marginUUpVUp_ = other.marginUUpVUp_;
      riskCode_ = other.riskCode_;
      exchLiquidityTag_ = other.exchLiquidityTag_;
      spdrLiquidityTag_ = other.spdrLiquidityTag_;
      fillExchDetail_ = other.fillExchDetail_;
      notionalValue_ = other.notionalValue_;
      marketValue_ = other.marketValue_;
      orderMktWidth_ = other.orderMktWidth_;
      childMktWidth_ = other.childMktWidth_;
      fillMktWidth_ = other.fillMktWidth_;
      parentOrderAge_ = other.parentOrderAge_;
      parentAgeCode_ = other.parentAgeCode_;
      trdDelta_ = other.trdDelta_;
      trdDDelta_ = other.trdDDelta_;
      trdGamma_ = other.trdGamma_;
      trdVega_ = other.trdVega_;
      trdWtVega_ = other.trdWtVega_;
      trdTheta_ = other.trdTheta_;
      trdPrem_ = other.trdPrem_;
      trdBeta_ = other.trdBeta_;
      trdDBeta_ = other.trdDBeta_;
      surfEdge_ = other.surfEdge_;
      surfEdgeUnit_ = other.surfEdgeUnit_;
      theoEdge_ = other.theoEdge_;
      theoEdgeUnit_ = other.theoEdgeUnit_;
      exchFee_ = other.exchFee_;
      halfWidthPnl_ = other.halfWidthPnl_;
      clArrivePnl_ = other.clArrivePnl_;
      arrivePnl_ = other.arrivePnl_;
      arriveDnPnl_ = other.arriveDnPnl_;
      uDriftArrivePnl_ = other.uDriftArrivePnl_;
      dayDnPnl_ = other.dayDnPnl_;
      dayM1Pnl_ = other.dayM1Pnl_;
      dayM10Pnl_ = other.dayM10Pnl_;
      uDriftDayPnl_ = other.uDriftDayPnl_;
      uDriftM1Pnl_ = other.uDriftM1Pnl_;
      uDriftM10Pnl_ = other.uDriftM10Pnl_;
      dayPnl_ = other.dayPnl_;
      liveMark_ = other.liveMark_;
      liveUPrc_ = other.liveUPrc_;
      pendMark_ = other.pendMark_;
      pendUPrc_ = other.pendUPrc_;
      trdMarkError_ = other.trdMarkError_;
      dayMarkError_ = other.dayMarkError_;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradeCubeDetailV5 Clone() {
      return new TradeCubeDetailV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "run_status" field.</summary>
    public const int RunStatusFieldNumber = 100;
    private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RunStatus RunStatus {
      get { return runStatus_; }
      set {
        runStatus_ = value;
      }
    }

    /// <summary>Field number for the "sys_environment" field.</summary>
    public const int SysEnvironmentFieldNumber = 103;
    private global::Spiderrock.Protobuf.SysEnvironment sysEnvironment_ = global::Spiderrock.Protobuf.SysEnvironment.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SysEnvironment SysEnvironment {
      get { return sysEnvironment_; }
      set {
        sysEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 106;
    private int version_;
    /// <summary>
    /// record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "cl_ord_id" field.</summary>
    public const int ClOrdIdFieldNumber = 109;
    private string clOrdId_ = "";
    /// <summary>
    /// clOrdId resulting in fill (child order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 112;
    private long parentNumber_;
    /// <summary>
    /// SpiderRock parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 115;
    private long packageId_;
    /// <summary>
    /// groups related order/brokers together (eg. Legger w/MLeg Parent)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 118;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_routing_code" field.</summary>
    public const int SrcRoutingCodeFieldNumber = 121;
    private string srcRoutingCode_ = "";
    /// <summary>
    /// inbound FIX routing code, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SrcRoutingCode {
      get { return srcRoutingCode_; }
      set {
        srcRoutingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_source" field.</summary>
    public const int SpdrSourceFieldNumber = 124;
    private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
    /// <summary>
    /// SpiderRock parent order source code [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
      get { return spdrSource_; }
      set {
        spdrSource_ = value;
      }
    }

    /// <summary>Field number for the "grouping_code" field.</summary>
    public const int GroupingCodeFieldNumber = 127;
    private long groupingCode_;
    /// <summary>
    /// SpiderRock parent broker number [broker pkey]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GroupingCode {
      get { return groupingCode_; }
      set {
        groupingCode_ = value;
      }
    }

    /// <summary>Field number for the "accnt" field.</summary>
    public const int AccntFieldNumber = 130;
    private string accnt_ = "";
    /// <summary>
    /// SpiderRock Accnt Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accnt {
      get { return accnt_; }
      set {
        accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 133;
    private string clientFirm_ = "";
    /// <summary>
    /// SpiderRock ClientFirm Code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pri_agg_group" field.</summary>
    public const int PriAggGroupFieldNumber = 136;
    private string priAggGroup_ = "";
    /// <summary>
    /// primary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriAggGroup {
      get { return priAggGroup_; }
      set {
        priAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_agg_group" field.</summary>
    public const int SecAggGroupFieldNumber = 139;
    private string secAggGroup_ = "";
    /// <summary>
    /// secondary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecAggGroup {
      get { return secAggGroup_; }
      set {
        secAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_key" field.</summary>
    public const int SecKeyFieldNumber = 145;
    private global::Spiderrock.Protobuf.OptionKey secKey_;
    /// <summary>
    /// security key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptionKey SecKey {
      get { return secKey_; }
      set {
        secKey_ = value;
      }
    }

    /// <summary>Field number for the "sec_type" field.</summary>
    public const int SecTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// security type [Stock, Future, Option]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 151;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// base ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "view_group1" field.</summary>
    public const int ViewGroup1FieldNumber = 154;
    private string viewGroup1_ = "";
    /// <summary>
    /// viewGroup1 (user supplied; if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup1 {
      get { return viewGroup1_; }
      set {
        viewGroup1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_group2" field.</summary>
    public const int ViewGroup2FieldNumber = 157;
    private string viewGroup2_ = "";
    /// <summary>
    /// viewGroup2 (user supplied; if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup2 {
      get { return viewGroup2_; }
      set {
        viewGroup2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_group3" field.</summary>
    public const int ViewGroup3FieldNumber = 160;
    private string viewGroup3_ = "";
    /// <summary>
    /// viewGroup3 (user supplied; if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup3 {
      get { return viewGroup3_; }
      set {
        viewGroup3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_class" field.</summary>
    public const int RiskClassFieldNumber = 163;
    private string riskClass_ = "";
    /// <summary>
    /// user supplied risk class code (from SymbolControl record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskClass {
      get { return riskClass_; }
      set {
        riskClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 166;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    /// <summary>
    /// symbol type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 169;
    private string sector_ = "";
    /// <summary>
    /// user supplied sector code (from SymbolControl record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ind_num" field.</summary>
    public const int IndNumFieldNumber = 172;
    private int indNum_;
    /// <summary>
    /// ind num (00)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IndNum {
      get { return indNum_; }
      set {
        indNum_ = value;
      }
    }

    /// <summary>Field number for the "sub_num" field.</summary>
    public const int SubNumFieldNumber = 175;
    private int subNum_;
    /// <summary>
    /// sub num (0000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubNum {
      get { return subNum_; }
      set {
        subNum_ = value;
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 178;
    private int grpNum_;
    /// <summary>
    /// grp num (000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "nbr_num" field.</summary>
    public const int NbrNumFieldNumber = 181;
    private int nbrNum_;
    /// <summary>
    /// nbr num (00000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbrNum {
      get { return nbrNum_; }
      set {
        nbrNum_ = value;
      }
    }

    /// <summary>Field number for the "edays" field.</summary>
    public const int EdaysFieldNumber = 184;
    private int edays_;
    /// <summary>
    /// days to next earnings [-5, +60]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Edays {
      get { return edays_; }
      set {
        edays_ = value;
      }
    }

    /// <summary>Field number for the "exp_code" field.</summary>
    public const int ExpCodeFieldNumber = 187;
    private global::Spiderrock.Protobuf.ExpCode expCode_ = global::Spiderrock.Protobuf.ExpCode.Unspecified;
    /// <summary>
    /// expiration tenor code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpCode ExpCode {
      get { return expCode_; }
      set {
        expCode_ = value;
      }
    }

    /// <summary>Field number for the "skew_code" field.</summary>
    public const int SkewCodeFieldNumber = 190;
    private global::Spiderrock.Protobuf.SkewCode skewCode_ = global::Spiderrock.Protobuf.SkewCode.Unspecified;
    /// <summary>
    /// strike skew code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SkewCode SkewCode {
      get { return skewCode_; }
      set {
        skewCode_ = value;
      }
    }

    /// <summary>Field number for the "width_code" field.</summary>
    public const int WidthCodeFieldNumber = 193;
    private global::Spiderrock.Protobuf.WidthCode widthCode_ = global::Spiderrock.Protobuf.WidthCode.Unspecified;
    /// <summary>
    /// market width code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.WidthCode WidthCode {
      get { return widthCode_; }
      set {
        widthCode_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 196;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 199;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// SpiderRock underlier price display code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 202;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 205;
    private int underliersPerCn_;
    /// <summary>
    /// underliers per contract (futures and options)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 208;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// underlier type (affects $greek calcs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 211;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 214;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 217;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 220;
    private float uPrcRatio_;
    /// <summary>
    /// UPrcRatio (SymbolRatio) from product definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "min_tick_size" field.</summary>
    public const int MinTickSizeFieldNumber = 223;
    private float minTickSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTickSize {
      get { return minTickSize_; }
      set {
        minTickSize_ = value;
      }
    }

    /// <summary>Field number for the "routing_code" field.</summary>
    public const int RoutingCodeFieldNumber = 226;
    private string routingCode_ = "";
    /// <summary>
    /// SpiderRock market routing code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoutingCode {
      get { return routingCode_; }
      set {
        routingCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orig_exec_iD" field.</summary>
    public const int OrigExecIDFieldNumber = 229;
    private string origExecID_ = "";
    /// <summary>
    /// original execution ID string (child order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigExecID {
      get { return origExecID_; }
      set {
        origExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_exec_iD" field.</summary>
    public const int LastExecIDFieldNumber = 232;
    private string lastExecID_ = "";
    /// <summary>
    /// most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastExecID {
      get { return lastExecID_; }
      set {
        lastExecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transact_dttm" field.</summary>
    public const int TransactDttmFieldNumber = 235;
    private global::Google.Protobuf.WellKnownTypes.Timestamp transactDttm_;
    /// <summary>
    /// transaction date/time as reported by exchange or down stream broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TransactDttm {
      get { return transactDttm_; }
      set {
        transactDttm_ = value;
      }
    }

    /// <summary>Field number for the "exec_status" field.</summary>
    public const int ExecStatusFieldNumber = 238;
    private global::Spiderrock.Protobuf.ExecStatus execStatus_ = global::Spiderrock.Protobuf.ExecStatus.Unspecified;
    /// <summary>
    /// SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecStatus ExecStatus {
      get { return execStatus_; }
      set {
        execStatus_ = value;
      }
    }

    /// <summary>Field number for the "remote_text" field.</summary>
    public const int RemoteTextFieldNumber = 241;
    private string remoteText_ = "";
    /// <summary>
    /// text comment from endpoint (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RemoteText {
      get { return remoteText_; }
      set {
        remoteText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_limit_type" field.</summary>
    public const int OrderLimitTypeFieldNumber = 244;
    private global::Spiderrock.Protobuf.SpdrLimitType orderLimitType_ = global::Spiderrock.Protobuf.SpdrLimitType.Unspecified;
    /// <summary>
    /// parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitType OrderLimitType {
      get { return orderLimitType_; }
      set {
        orderLimitType_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_class" field.</summary>
    public const int OrderLimitClassFieldNumber = 247;
    private global::Spiderrock.Protobuf.SpdrLimitClass orderLimitClass_ = global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified;
    /// <summary>
    /// parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrLimitClass OrderLimitClass {
      get { return orderLimitClass_; }
      set {
        orderLimitClass_ = value;
      }
    }

    /// <summary>Field number for the "parent_shape" field.</summary>
    public const int ParentShapeFieldNumber = 250;
    private global::Spiderrock.Protobuf.SpdrOrderShape parentShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ParentShape {
      get { return parentShape_; }
      set {
        parentShape_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_handling" field.</summary>
    public const int ParentOrderHandlingFieldNumber = 253;
    private global::Spiderrock.Protobuf.ParentOrderHandling parentOrderHandling_ = global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified;
    /// <summary>
    /// base parent order algo [take style algo]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentOrderHandling ParentOrderHandling {
      get { return parentOrderHandling_; }
      set {
        parentOrderHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_balance_handling" field.</summary>
    public const int ParentBalanceHandlingFieldNumber = 256;
    private global::Spiderrock.Protobuf.ParentBalanceHandling parentBalanceHandling_ = global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified;
    /// <summary>
    /// base parent order balance handling [make style algo]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentBalanceHandling ParentBalanceHandling {
      get { return parentBalanceHandling_; }
      set {
        parentBalanceHandling_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_size" field.</summary>
    public const int ParentOrderSizeFieldNumber = 259;
    private int parentOrderSize_;
    /// <summary>
    /// parent order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentOrderSize {
      get { return parentOrderSize_; }
      set {
        parentOrderSize_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 262;
    private string method_ = "";
    /// <summary>
    /// execution method string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 265;
    private string strategy_ = "";
    /// <summary>
    /// client strategy [usually client supplied]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 268;
    private string userName_ = "";
    /// <summary>
    /// SpiderRock user name associated with the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 271;
    private string origin_ = "";
    /// <summary>
    /// parent order origin string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Origin {
      get { return origin_; }
      set {
        origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 274;
    private string source_ = "";
    /// <summary>
    /// execution source string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 277;
    private string server_ = "";
    /// <summary>
    /// SpiderRock execution engine that handled the parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_firm" field.</summary>
    public const int ClearingFirmFieldNumber = 280;
    private string clearingFirm_ = "";
    /// <summary>
    /// clearing firm (delivery)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFirm {
      get { return clearingFirm_; }
      set {
        clearingFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_accnt" field.</summary>
    public const int ClearingAccntFieldNumber = 283;
    private string clearingAccnt_ = "";
    /// <summary>
    /// clearing firm account (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingAccnt {
      get { return clearingAccnt_; }
      set {
        clearingAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_capacity" field.</summary>
    public const int LastCapacityFieldNumber = 286;
    private global::Spiderrock.Protobuf.OrderCapacity lastCapacity_ = global::Spiderrock.Protobuf.OrderCapacity.Unspecified;
    /// <summary>
    /// child order capacity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OrderCapacity LastCapacity {
      get { return lastCapacity_; }
      set {
        lastCapacity_ = value;
      }
    }

    /// <summary>Field number for the "exec_role" field.</summary>
    public const int ExecRoleFieldNumber = 289;
    private global::Spiderrock.Protobuf.ExecRole execRole_ = global::Spiderrock.Protobuf.ExecRole.Unspecified;
    /// <summary>
    /// SpiderRock relationship to this execution record (Direct, Drop, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExecRole ExecRole {
      get { return execRole_; }
      set {
        execRole_ = value;
      }
    }

    /// <summary>Field number for the "exec_brkr_code" field.</summary>
    public const int ExecBrkrCodeFieldNumber = 705;
    private string execBrkrCode_ = "";
    /// <summary>
    /// SR exec broker acronym
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrCode {
      get { return execBrkrCode_; }
      set {
        execBrkrCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_accnt" field.</summary>
    public const int ExecBrkrAccntFieldNumber = 295;
    private string execBrkrAccnt_ = "";
    /// <summary>
    /// account at executing broker/prime (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrAccnt {
      get { return execBrkrAccnt_; }
      set {
        execBrkrAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_cl_firm" field.</summary>
    public const int ExecBrkrClFirmFieldNumber = 298;
    private string execBrkrClFirm_ = "";
    /// <summary>
    /// client/firm at executing broker/prime (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrClFirm {
      get { return execBrkrClFirm_; }
      set {
        execBrkrClFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_brkr_user_name" field.</summary>
    public const int ExecBrkrUserNameFieldNumber = 301;
    private string execBrkrUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecBrkrUserName {
      get { return execBrkrUserName_; }
      set {
        execBrkrUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_type" field.</summary>
    public const int ClearingFlipTypeFieldNumber = 304;
    private global::Spiderrock.Protobuf.FlipType clearingFlipType_ = global::Spiderrock.Protobuf.FlipType.Unspecified;
    /// <summary>
    /// clearingFlip Type (CMTA or Giveup)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FlipType ClearingFlipType {
      get { return clearingFlipType_; }
      set {
        clearingFlipType_ = value;
      }
    }

    /// <summary>Field number for the "clearing_flip_firm" field.</summary>
    public const int ClearingFlipFirmFieldNumber = 307;
    private string clearingFlipFirm_ = "";
    /// <summary>
    /// clearingFlip Broker/MPID/CMTA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipFirm {
      get { return clearingFlipFirm_; }
      set {
        clearingFlipFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_flip_accnt" field.</summary>
    public const int ClearingFlipAccntFieldNumber = 310;
    private string clearingFlipAccnt_ = "";
    /// <summary>
    /// clearingFlip additional detail (sub-accnt)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFlipAccnt {
      get { return clearingFlipAccnt_; }
      set {
        clearingFlipAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 313;
    private long riskGroupId_;
    /// <summary>
    /// riskGroupId (parent order group ID) for this execution report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "fill_brkr_rate" field.</summary>
    public const int FillBrkrRateFieldNumber = 316;
    private float fillBrkrRate_;
    /// <summary>
    /// billing brokerage rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBrkrRate {
      get { return fillBrkrRate_; }
      set {
        fillBrkrRate_ = value;
      }
    }

    /// <summary>Field number for the "fill_routing_rate" field.</summary>
    public const int FillRoutingRateFieldNumber = 319;
    private float fillRoutingRate_;
    /// <summary>
    /// billing routing rate (tier 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillRoutingRate {
      get { return fillRoutingRate_; }
      set {
        fillRoutingRate_ = value;
      }
    }

    /// <summary>Field number for the "billing_sec_type" field.</summary>
    public const int BillingSecTypeFieldNumber = 322;
    private global::Spiderrock.Protobuf.BillingSecType billingSecType_ = global::Spiderrock.Protobuf.BillingSecType.Unspecified;
    /// <summary>
    /// SpiderRock billing security type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingSecType BillingSecType {
      get { return billingSecType_; }
      set {
        billingSecType_ = value;
      }
    }

    /// <summary>Field number for the "billing_category" field.</summary>
    public const int BillingCategoryFieldNumber = 325;
    private global::Spiderrock.Protobuf.BillingCategory billingCategory_ = global::Spiderrock.Protobuf.BillingCategory.Unspecified;
    /// <summary>
    /// SpiderRock billing category
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BillingCategory BillingCategory {
      get { return billingCategory_; }
      set {
        billingCategory_ = value;
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 328;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// chld order firm type [Customer, ProCust, Firm, MM, etc]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 331;
    private global::Spiderrock.Protobuf.BuySell side_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// parent/child order side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 334;
    private global::Spiderrock.Protobuf.PriceType priceType_ = global::Spiderrock.Protobuf.PriceType.Unspecified;
    /// <summary>
    /// order limit price type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "ssale_flag" field.</summary>
    public const int SsaleFlagFieldNumber = 337;
    private global::Spiderrock.Protobuf.ShortSaleFlag ssaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// child order short sale flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SsaleFlag {
      get { return ssaleFlag_; }
      set {
        ssaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "spdr_sSale_flag" field.</summary>
    public const int SpdrSSaleFlagFieldNumber = 340;
    private global::Spiderrock.Protobuf.ShortSaleFlag spdrSSaleFlag_ = global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified;
    /// <summary>
    /// parent order short sale flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ShortSaleFlag SpdrSSaleFlag {
      get { return spdrSSaleFlag_; }
      set {
        spdrSSaleFlag_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 343;
    private global::Spiderrock.Protobuf.PositionType positionType_ = global::Spiderrock.Protobuf.PositionType.Unspecified;
    /// <summary>
    /// child order position type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionType PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 346;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    /// <summary>
    /// SpiderRock auto-hedge algorithm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "order_dttm" field.</summary>
    public const int OrderDttmFieldNumber = 349;
    private global::Google.Protobuf.WellKnownTypes.Timestamp orderDttm_;
    /// <summary>
    /// Date/time of parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OrderDttm {
      get { return orderDttm_; }
      set {
        orderDttm_ = value;
      }
    }

    /// <summary>Field number for the "order_uBid" field.</summary>
    public const int OrderUBidFieldNumber = 352;
    private double orderUBid_;
    /// <summary>
    /// underlier market bid @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderUBid {
      get { return orderUBid_; }
      set {
        orderUBid_ = value;
      }
    }

    /// <summary>Field number for the "order_uAsk" field.</summary>
    public const int OrderUAskFieldNumber = 355;
    private double orderUAsk_;
    /// <summary>
    /// underlier market ask @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderUAsk {
      get { return orderUAsk_; }
      set {
        orderUAsk_ = value;
      }
    }

    /// <summary>Field number for the "order_bid" field.</summary>
    public const int OrderBidFieldNumber = 358;
    private double orderBid_;
    /// <summary>
    /// option market bid @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderBid {
      get { return orderBid_; }
      set {
        orderBid_ = value;
      }
    }

    /// <summary>Field number for the "order_ask" field.</summary>
    public const int OrderAskFieldNumber = 361;
    private double orderAsk_;
    /// <summary>
    /// option market ask @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderAsk {
      get { return orderAsk_; }
      set {
        orderAsk_ = value;
      }
    }

    /// <summary>Field number for the "order_surf_prc" field.</summary>
    public const int OrderSurfPrcFieldNumber = 364;
    private float orderSurfPrc_;
    /// <summary>
    /// SpiderRock surface price @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderSurfPrc {
      get { return orderSurfPrc_; }
      set {
        orderSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_surf_vol" field.</summary>
    public const int OrderSurfVolFieldNumber = 367;
    private float orderSurfVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderSurfVol {
      get { return orderSurfVol_; }
      set {
        orderSurfVol_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_vol" field.</summary>
    public const int OrderLimitVolFieldNumber = 370;
    private float orderLimitVol_;
    /// <summary>
    /// parent order limit volatilty (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderLimitVol {
      get { return orderLimitVol_; }
      set {
        orderLimitVol_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_prc" field.</summary>
    public const int OrderLimitPrcFieldNumber = 373;
    private double orderLimitPrc_;
    /// <summary>
    /// parent order limit price @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderLimitPrc {
      get { return orderLimitPrc_; }
      set {
        orderLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "order_limit_ref_uPrc" field.</summary>
    public const int OrderLimitRefUPrcFieldNumber = 376;
    private double orderLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ parent order arrival (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrderLimitRefUPrc {
      get { return orderLimitRefUPrc_; }
      set {
        orderLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_shape" field.</summary>
    public const int ChildShapeFieldNumber = 379;
    private global::Spiderrock.Protobuf.SpdrOrderShape childShape_ = global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderShape ChildShape {
      get { return childShape_; }
      set {
        childShape_ = value;
      }
    }

    /// <summary>Field number for the "child_size" field.</summary>
    public const int ChildSizeFieldNumber = 382;
    private int childSize_;
    /// <summary>
    /// child order size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildSize {
      get { return childSize_; }
      set {
        childSize_ = value;
      }
    }

    /// <summary>Field number for the "child_price" field.</summary>
    public const int ChildPriceFieldNumber = 385;
    private double childPrice_;
    /// <summary>
    /// child order price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildPrice {
      get { return childPrice_; }
      set {
        childPrice_ = value;
      }
    }

    /// <summary>Field number for the "child_exch" field.</summary>
    public const int ChildExchFieldNumber = 388;
    private string childExch_ = "";
    /// <summary>
    /// child order exchange code (SpiderRock)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExch {
      get { return childExch_; }
      set {
        childExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_ex_dest" field.</summary>
    public const int ChildExDestFieldNumber = 706;
    private string childExDest_ = "";
    /// <summary>
    /// child order exchange code (downstream)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildExDest {
      get { return childExDest_; }
      set {
        childExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_dttm" field.</summary>
    public const int ChildDttmFieldNumber = 394;
    private global::Google.Protobuf.WellKnownTypes.Timestamp childDttm_;
    /// <summary>
    /// child order send date/time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ChildDttm {
      get { return childDttm_; }
      set {
        childDttm_ = value;
      }
    }

    /// <summary>Field number for the "child_uBid" field.</summary>
    public const int ChildUBidFieldNumber = 397;
    private double childUBid_;
    /// <summary>
    /// underlier market bid @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildUBid {
      get { return childUBid_; }
      set {
        childUBid_ = value;
      }
    }

    /// <summary>Field number for the "child_uAsk" field.</summary>
    public const int ChildUAskFieldNumber = 400;
    private double childUAsk_;
    /// <summary>
    /// underlier market bid @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildUAsk {
      get { return childUAsk_; }
      set {
        childUAsk_ = value;
      }
    }

    /// <summary>Field number for the "child_bid" field.</summary>
    public const int ChildBidFieldNumber = 403;
    private double childBid_;
    /// <summary>
    /// option market bid @ child order send time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildBid {
      get { return childBid_; }
      set {
        childBid_ = value;
      }
    }

    /// <summary>Field number for the "child_ask" field.</summary>
    public const int ChildAskFieldNumber = 406;
    private double childAsk_;
    /// <summary>
    /// option market ask @ child order send time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildAsk {
      get { return childAsk_; }
      set {
        childAsk_ = value;
      }
    }

    /// <summary>Field number for the "child_surf_prc" field.</summary>
    public const int ChildSurfPrcFieldNumber = 409;
    private float childSurfPrc_;
    /// <summary>
    /// SpiderRock surface price @ child order send time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildSurfPrc {
      get { return childSurfPrc_; }
      set {
        childSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_vol" field.</summary>
    public const int ChildVolFieldNumber = 412;
    private float childVol_;
    /// <summary>
    /// child order volatilty (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildVol {
      get { return childVol_; }
      set {
        childVol_ = value;
      }
    }

    /// <summary>Field number for the "child_prob" field.</summary>
    public const int ChildProbFieldNumber = 415;
    private float childProb_;
    /// <summary>
    /// child order probability (T+x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildProb {
      get { return childProb_; }
      set {
        childProb_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_prc" field.</summary>
    public const int ChildLimitPrcFieldNumber = 418;
    private double childLimitPrc_;
    /// <summary>
    /// parent order limit price @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitPrc {
      get { return childLimitPrc_; }
      set {
        childLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_ref_uPrc" field.</summary>
    public const int ChildLimitRefUPrcFieldNumber = 421;
    private double childLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ child order send time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChildLimitRefUPrc {
      get { return childLimitRefUPrc_; }
      set {
        childLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "child_limit_pnl" field.</summary>
    public const int ChildLimitPnlFieldNumber = 424;
    private float childLimitPnl_;
    /// <summary>
    /// child limit improvement pnl (childLimitPrc to fillPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildLimitPnl {
      get { return childLimitPnl_; }
      set {
        childLimitPnl_ = value;
      }
    }

    /// <summary>Field number for the "child_algo_handler" field.</summary>
    public const int ChildAlgoHandlerFieldNumber = 427;
    private global::Spiderrock.Protobuf.ChildHandler childAlgoHandler_ = global::Spiderrock.Protobuf.ChildHandler.Unspecified;
    /// <summary>
    /// algo that generated the child order responsible for this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildHandler ChildAlgoHandler {
      get { return childAlgoHandler_; }
      set {
        childAlgoHandler_ = value;
      }
    }

    /// <summary>Field number for the "child_order_handling" field.</summary>
    public const int ChildOrderHandlingFieldNumber = 430;
    private string childOrderHandling_ = "";
    /// <summary>
    /// algo that generated the child order responsible for this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChildOrderHandling {
      get { return childOrderHandling_; }
      set {
        childOrderHandling_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_create_reason" field.</summary>
    public const int ChildCreateReasonFieldNumber = 433;
    private global::Spiderrock.Protobuf.ChildCreateReason childCreateReason_ = global::Spiderrock.Protobuf.ChildCreateReason.Unspecified;
    /// <summary>
    /// child order create reason code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCreateReason ChildCreateReason {
      get { return childCreateReason_; }
      set {
        childCreateReason_ = value;
      }
    }

    /// <summary>Field number for the "child_cancel_reason" field.</summary>
    public const int ChildCancelReasonFieldNumber = 436;
    private global::Spiderrock.Protobuf.ChildCancelReason childCancelReason_ = global::Spiderrock.Protobuf.ChildCancelReason.Unspecified;
    /// <summary>
    /// child order cancel reason code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildCancelReason ChildCancelReason {
      get { return childCancelReason_; }
      set {
        childCancelReason_ = value;
      }
    }

    /// <summary>Field number for the "child_mkt_stance" field.</summary>
    public const int ChildMktStanceFieldNumber = 439;
    private global::Spiderrock.Protobuf.MktStance childMktStance_ = global::Spiderrock.Protobuf.MktStance.Unspecified;
    /// <summary>
    /// child order was expected to be marketable @ child send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktStance ChildMktStance {
      get { return childMktStance_; }
      set {
        childMktStance_ = value;
      }
    }

    /// <summary>Field number for the "child_cxl_attempted" field.</summary>
    public const int ChildCxlAttemptedFieldNumber = 442;
    private global::Spiderrock.Protobuf.YesNo childCxlAttempted_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// cancel attempt was made on the child order prior to receiving this fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo ChildCxlAttempted {
      get { return childCxlAttempted_; }
      set {
        childCxlAttempted_ = value;
      }
    }

    /// <summary>Field number for the "child_cxl_fill_latency" field.</summary>
    public const int ChildCxlFillLatencyFieldNumber = 445;
    private float childCxlFillLatency_;
    /// <summary>
    /// cancel latency (for fills with a cancel attempt)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildCxlFillLatency {
      get { return childCxlFillLatency_; }
      set {
        childCxlFillLatency_ = value;
      }
    }

    /// <summary>Field number for the "fill_exch" field.</summary>
    public const int FillExchFieldNumber = 448;
    private string fillExch_ = "";
    /// <summary>
    /// ExDest code from child order execution report (lastMkt)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExch {
      get { return fillExch_; }
      set {
        fillExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_price" field.</summary>
    public const int FillPriceFieldNumber = 451;
    private double fillPrice_;
    /// <summary>
    /// fill price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "fill_ts" field.</summary>
    public const int FillTsFieldNumber = 454;
    private double fillTs_;
    /// <summary>
    /// fill report ts (seconds since startup; 100 nanosec resolution)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillTs {
      get { return fillTs_; }
      set {
        fillTs_ = value;
      }
    }

    /// <summary>Field number for the "fill_dttm" field.</summary>
    public const int FillDttmFieldNumber = 457;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fillDttm_;
    /// <summary>
    /// Date/time of fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FillDttm {
      get { return fillDttm_; }
      set {
        fillDttm_ = value;
      }
    }

    /// <summary>Field number for the "fill_size" field.</summary>
    public const int FillSizeFieldNumber = 460;
    private int fillSize_;
    /// <summary>
    /// fill quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FillSize {
      get { return fillSize_; }
      set {
        fillSize_ = value;
      }
    }

    /// <summary>Field number for the "eff_fill_size" field.</summary>
    public const int EffFillSizeFieldNumber = 463;
    private int effFillSize_;
    /// <summary>
    /// fill size x underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffFillSize {
      get { return effFillSize_; }
      set {
        effFillSize_ = value;
      }
    }

    /// <summary>Field number for the "fill_vol" field.</summary>
    public const int FillVolFieldNumber = 466;
    private float fillVol_;
    /// <summary>
    /// fill volatilty (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVol {
      get { return fillVol_; }
      set {
        fillVol_ = value;
      }
    }

    /// <summary>Field number for the "fill_prob" field.</summary>
    public const int FillProbFieldNumber = 469;
    private float fillProb_;
    /// <summary>
    /// fill order probability (T+x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillProb {
      get { return fillProb_; }
      set {
        fillProb_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_prc" field.</summary>
    public const int FillLimitPrcFieldNumber = 472;
    private double fillLimitPrc_;
    /// <summary>
    /// parent order limit price @ fill arrival time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitPrc {
      get { return fillLimitPrc_; }
      set {
        fillLimitPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_ref_uPrc" field.</summary>
    public const int FillLimitRefUPrcFieldNumber = 475;
    private double fillLimitRefUPrc_;
    /// <summary>
    /// limit reference underlier price @ fill arrival time (options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillLimitRefUPrc {
      get { return fillLimitRefUPrc_; }
      set {
        fillLimitRefUPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_limit_pnl" field.</summary>
    public const int FillLimitPnlFieldNumber = 478;
    private float fillLimitPnl_;
    /// <summary>
    /// fill limit improvement pnl (fillLimitPrc to fillPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillLimitPnl {
      get { return fillLimitPnl_; }
      set {
        fillLimitPnl_ = value;
      }
    }

    /// <summary>Field number for the "fill_de" field.</summary>
    public const int FillDeFieldNumber = 481;
    private float fillDe_;
    /// <summary>
    /// fill delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillDe {
      get { return fillDe_; }
      set {
        fillDe_ = value;
      }
    }

    /// <summary>Field number for the "fill_ve" field.</summary>
    public const int FillVeFieldNumber = 484;
    private float fillVe_;
    /// <summary>
    /// fill vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillVe {
      get { return fillVe_; }
      set {
        fillVe_ = value;
      }
    }

    /// <summary>Field number for the "fill_th" field.</summary>
    public const int FillThFieldNumber = 487;
    private float fillTh_;
    /// <summary>
    /// fill theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTh {
      get { return fillTh_; }
      set {
        fillTh_ = value;
      }
    }

    /// <summary>Field number for the "fill_uPrc" field.</summary>
    public const int FillUPrcFieldNumber = 493;
    private double fillUPrc_;
    /// <summary>
    /// fill underlier mid-market
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUPrc {
      get { return fillUPrc_; }
      set {
        fillUPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_beta" field.</summary>
    public const int FillBetaFieldNumber = 496;
    private float fillBeta_;
    /// <summary>
    /// SpiderRock estimate of beta to SPX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillBeta {
      get { return fillBeta_; }
      set {
        fillBeta_ = value;
      }
    }

    /// <summary>Field number for the "fill_tv" field.</summary>
    public const int FillTvFieldNumber = 532;
    private float fillTv_;
    /// <summary>
    /// theo vol (user supplied)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTv {
      get { return fillTv_; }
      set {
        fillTv_ = value;
      }
    }

    /// <summary>Field number for the "fill_tp" field.</summary>
    public const int FillTpFieldNumber = 535;
    private float fillTp_;
    /// <summary>
    /// theo price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillTp {
      get { return fillTp_; }
      set {
        fillTp_ = value;
      }
    }

    /// <summary>Field number for the "fill_uBid" field.</summary>
    public const int FillUBidFieldNumber = 538;
    private double fillUBid_;
    /// <summary>
    /// underlier market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUBid {
      get { return fillUBid_; }
      set {
        fillUBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_uAsk" field.</summary>
    public const int FillUAskFieldNumber = 541;
    private double fillUAsk_;
    /// <summary>
    /// underlier market ask @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillUAsk {
      get { return fillUAsk_; }
      set {
        fillUAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_bid" field.</summary>
    public const int FillBidFieldNumber = 544;
    private double fillBid_;
    /// <summary>
    /// option market bid @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillBid {
      get { return fillBid_; }
      set {
        fillBid_ = value;
      }
    }

    /// <summary>Field number for the "fill_ask" field.</summary>
    public const int FillAskFieldNumber = 547;
    private double fillAsk_;
    /// <summary>
    /// option market ask @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillAsk {
      get { return fillAsk_; }
      set {
        fillAsk_ = value;
      }
    }

    /// <summary>Field number for the "fill_surf_prc" field.</summary>
    public const int FillSurfPrcFieldNumber = 550;
    private float fillSurfPrc_;
    /// <summary>
    /// SpiderRock surface price @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillSurfPrc {
      get { return fillSurfPrc_; }
      set {
        fillSurfPrc_ = value;
      }
    }

    /// <summary>Field number for the "fill_post_uMark1_m" field.</summary>
    public const int FillPostUMark1MFieldNumber = 553;
    private double fillPostUMark1M_;
    /// <summary>
    /// underlier mark @ fill arrival + 1M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPostUMark1M {
      get { return fillPostUMark1M_; }
      set {
        fillPostUMark1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_post_uMark10_m" field.</summary>
    public const int FillPostUMark10MFieldNumber = 556;
    private double fillPostUMark10M_;
    /// <summary>
    /// underlier mark @ fill arrival + 10M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPostUMark10M {
      get { return fillPostUMark10M_; }
      set {
        fillPostUMark10M_ = value;
      }
    }

    /// <summary>Field number for the "fill_post_mark1_m" field.</summary>
    public const int FillPostMark1MFieldNumber = 559;
    private double fillPostMark1M_;
    /// <summary>
    /// SpiderRock mid or surface mark @ fill arrival + 1M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPostMark1M {
      get { return fillPostMark1M_; }
      set {
        fillPostMark1M_ = value;
      }
    }

    /// <summary>Field number for the "fill_post_mark10_m" field.</summary>
    public const int FillPostMark10MFieldNumber = 562;
    private double fillPostMark10M_;
    /// <summary>
    /// SpiderRock mid or surface mark @ fill arrival + 10M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FillPostMark10M {
      get { return fillPostMark10M_; }
      set {
        fillPostMark10M_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vDn" field.</summary>
    public const int MarginUDnVDnFieldNumber = 701;
    private float marginUDnVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVDn {
      get { return marginUDnVDn_; }
      set {
        marginUDnVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn_vUp" field.</summary>
    public const int MarginUDnVUpFieldNumber = 702;
    private float marginUDnVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDnVUp {
      get { return marginUDnVUp_; }
      set {
        marginUDnVUp_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vDn" field.</summary>
    public const int MarginUUpVDnFieldNumber = 703;
    private float marginUUpVDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVDn {
      get { return marginUUpVDn_; }
      set {
        marginUUpVDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp_vUp" field.</summary>
    public const int MarginUUpVUpFieldNumber = 704;
    private float marginUUpVUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up, vol up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUpVUp {
      get { return marginUUpVUp_; }
      set {
        marginUUpVUp_ = value;
      }
    }

    /// <summary>Field number for the "risk_code" field.</summary>
    public const int RiskCodeFieldNumber = 565;
    private global::Spiderrock.Protobuf.RiskCode riskCode_ = global::Spiderrock.Protobuf.RiskCode.Unspecified;
    /// <summary>
    /// SpiderRock Risk Code (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RiskCode RiskCode {
      get { return riskCode_; }
      set {
        riskCode_ = value;
      }
    }

    /// <summary>Field number for the "exch_liquidity_tag" field.</summary>
    public const int ExchLiquidityTagFieldNumber = 568;
    private string exchLiquidityTag_ = "";
    /// <summary>
    /// liquidity tag (exchange)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchLiquidityTag {
      get { return exchLiquidityTag_; }
      set {
        exchLiquidityTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_liquidity_tag" field.</summary>
    public const int SpdrLiquidityTagFieldNumber = 571;
    private string spdrLiquidityTag_ = "";
    /// <summary>
    /// SpiderRock normalized liquidity tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrLiquidityTag {
      get { return spdrLiquidityTag_; }
      set {
        spdrLiquidityTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fill_exch_detail" field.</summary>
    public const int FillExchDetailFieldNumber = 574;
    private string fillExchDetail_ = "";
    /// <summary>
    /// other fix tags (tag:value#tag:value) [additional detail used for analysis]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillExchDetail {
      get { return fillExchDetail_; }
      set {
        fillExchDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notional_value" field.</summary>
    public const int NotionalValueFieldNumber = 577;
    private float notionalValue_;
    /// <summary>
    /// cn * mult * uPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NotionalValue {
      get { return notionalValue_; }
      set {
        notionalValue_ = value;
      }
    }

    /// <summary>Field number for the "market_value" field.</summary>
    public const int MarketValueFieldNumber = 580;
    private float marketValue_;
    /// <summary>
    /// cn * mult * fillPrice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarketValue {
      get { return marketValue_; }
      set {
        marketValue_ = value;
      }
    }

    /// <summary>Field number for the "order_mkt_width" field.</summary>
    public const int OrderMktWidthFieldNumber = 583;
    private float orderMktWidth_;
    /// <summary>
    /// market width @ parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderMktWidth {
      get { return orderMktWidth_; }
      set {
        orderMktWidth_ = value;
      }
    }

    /// <summary>Field number for the "child_mkt_width" field.</summary>
    public const int ChildMktWidthFieldNumber = 586;
    private float childMktWidth_;
    /// <summary>
    /// market width @ child order send time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChildMktWidth {
      get { return childMktWidth_; }
      set {
        childMktWidth_ = value;
      }
    }

    /// <summary>Field number for the "fill_mkt_width" field.</summary>
    public const int FillMktWidthFieldNumber = 589;
    private float fillMktWidth_;
    /// <summary>
    /// market width @ fill arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FillMktWidth {
      get { return fillMktWidth_; }
      set {
        fillMktWidth_ = value;
      }
    }

    /// <summary>Field number for the "parent_order_age" field.</summary>
    public const int ParentOrderAgeFieldNumber = 592;
    private float parentOrderAge_;
    /// <summary>
    /// elaspsed time from parent order entry/update to this fill event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParentOrderAge {
      get { return parentOrderAge_; }
      set {
        parentOrderAge_ = value;
      }
    }

    /// <summary>Field number for the "parent_age_code" field.</summary>
    public const int ParentAgeCodeFieldNumber = 595;
    private global::Spiderrock.Protobuf.ParentAge parentAgeCode_ = global::Spiderrock.Protobuf.ParentAge.Unspecified;
    /// <summary>
    /// elaspsed time from parent order entry/update to this fill event [coded]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ParentAge ParentAgeCode {
      get { return parentAgeCode_; }
      set {
        parentAgeCode_ = value;
      }
    }

    /// <summary>Field number for the "trd_delta" field.</summary>
    public const int TrdDeltaFieldNumber = 598;
    private float trdDelta_;
    /// <summary>
    /// trade delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDelta {
      get { return trdDelta_; }
      set {
        trdDelta_ = value;
      }
    }

    /// <summary>Field number for the "trd_dDelta" field.</summary>
    public const int TrdDDeltaFieldNumber = 601;
    private float trdDDelta_;
    /// <summary>
    /// trade $delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDDelta {
      get { return trdDDelta_; }
      set {
        trdDDelta_ = value;
      }
    }

    /// <summary>Field number for the "trd_gamma" field.</summary>
    public const int TrdGammaFieldNumber = 604;
    private float trdGamma_;
    /// <summary>
    /// trade gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdGamma {
      get { return trdGamma_; }
      set {
        trdGamma_ = value;
      }
    }

    /// <summary>Field number for the "trd_vega" field.</summary>
    public const int TrdVegaFieldNumber = 607;
    private float trdVega_;
    /// <summary>
    /// trade vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdVega {
      get { return trdVega_; }
      set {
        trdVega_ = value;
      }
    }

    /// <summary>Field number for the "trd_wt_vega" field.</summary>
    public const int TrdWtVegaFieldNumber = 610;
    private float trdWtVega_;
    /// <summary>
    /// trade wtVega (vega * vol / sqrt(max(0.1, years * 4)))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdWtVega {
      get { return trdWtVega_; }
      set {
        trdWtVega_ = value;
      }
    }

    /// <summary>Field number for the "trd_theta" field.</summary>
    public const int TrdThetaFieldNumber = 613;
    private float trdTheta_;
    /// <summary>
    /// trade theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdTheta {
      get { return trdTheta_; }
      set {
        trdTheta_ = value;
      }
    }

    /// <summary>Field number for the "trd_prem" field.</summary>
    public const int TrdPremFieldNumber = 616;
    private float trdPrem_;
    /// <summary>
    /// trade premium over parity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdPrem {
      get { return trdPrem_; }
      set {
        trdPrem_ = value;
      }
    }

    /// <summary>Field number for the "trd_beta" field.</summary>
    public const int TrdBetaFieldNumber = 619;
    private float trdBeta_;
    /// <summary>
    /// trade beta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdBeta {
      get { return trdBeta_; }
      set {
        trdBeta_ = value;
      }
    }

    /// <summary>Field number for the "trd_dBeta" field.</summary>
    public const int TrdDBetaFieldNumber = 622;
    private float trdDBeta_;
    /// <summary>
    /// trade $beta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrdDBeta {
      get { return trdDBeta_; }
      set {
        trdDBeta_ = value;
      }
    }

    /// <summary>Field number for the "surf_edge" field.</summary>
    public const int SurfEdgeFieldNumber = 625;
    private float surfEdge_;
    /// <summary>
    /// SR surface edge (user supplied theo vol/prc to SpiderRock surface price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfEdge {
      get { return surfEdge_; }
      set {
        surfEdge_ = value;
      }
    }

    /// <summary>Field number for the "surf_edge_unit" field.</summary>
    public const int SurfEdgeUnitFieldNumber = 628;
    private float surfEdgeUnit_;
    /// <summary>
    /// SR surface edge normalized to $100 underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfEdgeUnit {
      get { return surfEdgeUnit_; }
      set {
        surfEdgeUnit_ = value;
      }
    }

    /// <summary>Field number for the "theo_edge" field.</summary>
    public const int TheoEdgeFieldNumber = 631;
    private float theoEdge_;
    /// <summary>
    /// theo edge (user supplied theo vol/prc to SpiderRock surface price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoEdge {
      get { return theoEdge_; }
      set {
        theoEdge_ = value;
      }
    }

    /// <summary>Field number for the "theo_edge_unit" field.</summary>
    public const int TheoEdgeUnitFieldNumber = 634;
    private float theoEdgeUnit_;
    /// <summary>
    /// theo edge normalized to $100 underlier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoEdgeUnit {
      get { return theoEdgeUnit_; }
      set {
        theoEdgeUnit_ = value;
      }
    }

    /// <summary>Field number for the "exch_fee" field.</summary>
    public const int ExchFeeFieldNumber = 637;
    private float exchFee_;
    /// <summary>
    /// SpiderRock exchange fee estimate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchFee {
      get { return exchFee_; }
      set {
        exchFee_ = value;
      }
    }

    /// <summary>Field number for the "half_width_pnl" field.</summary>
    public const int HalfWidthPnlFieldNumber = 640;
    private float halfWidthPnl_;
    /// <summary>
    /// estimated half-width Pnl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HalfWidthPnl {
      get { return halfWidthPnl_; }
      set {
        halfWidthPnl_ = value;
      }
    }

    /// <summary>Field number for the "cl_arrive_pnl" field.</summary>
    public const int ClArrivePnlFieldNumber = 643;
    private float clArrivePnl_;
    /// <summary>
    /// -dir * qty * (fillPrice - clArriveMark)  # maybe use orderSurfPrc instead
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClArrivePnl {
      get { return clArrivePnl_; }
      set {
        clArrivePnl_ = value;
      }
    }

    /// <summary>Field number for the "arrive_pnl" field.</summary>
    public const int ArrivePnlFieldNumber = 646;
    private float arrivePnl_;
    /// <summary>
    /// -dir * qty * (fillPrice - 0.5 * (orderBid + orderAsk))  # maybe use orderSurfPrc instead
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArrivePnl {
      get { return arrivePnl_; }
      set {
        arrivePnl_ = value;
      }
    }

    /// <summary>Field number for the "arrive_dn_pnl" field.</summary>
    public const int ArriveDnPnlFieldNumber = 649;
    private float arriveDnPnl_;
    /// <summary>
    /// arrivePnl - uDriftArrivePnl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArriveDnPnl {
      get { return arriveDnPnl_; }
      set {
        arriveDnPnl_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_arrive_pnl" field.</summary>
    public const int UDriftArrivePnlFieldNumber = 652;
    private float uDriftArrivePnl_;
    /// <summary>
    /// -dir * qty * fillDe * (0.5 * (fillUBid + fillUAsk) - 0.5 * (orderUBid + orderUAsk))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftArrivePnl {
      get { return uDriftArrivePnl_; }
      set {
        uDriftArrivePnl_ = value;
      }
    }

    /// <summary>Field number for the "day_dn_pnl" field.</summary>
    public const int DayDnPnlFieldNumber = 655;
    private float dayDnPnl_;
    /// <summary>
    /// delta neutral Pnl (to EOD)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayDnPnl {
      get { return dayDnPnl_; }
      set {
        dayDnPnl_ = value;
      }
    }

    /// <summary>Field number for the "day_m1_pnl" field.</summary>
    public const int DayM1PnlFieldNumber = 658;
    private float dayM1Pnl_;
    /// <summary>
    /// delta neutral Pnl (Fill + 1M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayM1Pnl {
      get { return dayM1Pnl_; }
      set {
        dayM1Pnl_ = value;
      }
    }

    /// <summary>Field number for the "day_m10_pnl" field.</summary>
    public const int DayM10PnlFieldNumber = 661;
    private float dayM10Pnl_;
    /// <summary>
    /// delta neutral Pnl (Fill + 10M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayM10Pnl {
      get { return dayM10Pnl_; }
      set {
        dayM10Pnl_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_day_pnl" field.</summary>
    public const int UDriftDayPnlFieldNumber = 664;
    private float uDriftDayPnl_;
    /// <summary>
    /// underlier delta drift Pnl (to EOD)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftDayPnl {
      get { return uDriftDayPnl_; }
      set {
        uDriftDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_m1_pnl" field.</summary>
    public const int UDriftM1PnlFieldNumber = 667;
    private float uDriftM1Pnl_;
    /// <summary>
    /// underlier delta drift Pnl (Fill + 1M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftM1Pnl {
      get { return uDriftM1Pnl_; }
      set {
        uDriftM1Pnl_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_m10_pnl" field.</summary>
    public const int UDriftM10PnlFieldNumber = 670;
    private float uDriftM10Pnl_;
    /// <summary>
    /// underlier delta drift Pnl (Fill + 10M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftM10Pnl {
      get { return uDriftM10Pnl_; }
      set {
        uDriftM10Pnl_ = value;
      }
    }

    /// <summary>Field number for the "day_pnl" field.</summary>
    public const int DayPnlFieldNumber = 673;
    private float dayPnl_;
    /// <summary>
    /// actual Pnl to EOD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnl {
      get { return dayPnl_; }
      set {
        dayPnl_ = value;
      }
    }

    /// <summary>Field number for the "live_mark" field.</summary>
    public const int LiveMarkFieldNumber = 676;
    private double liveMark_;
    /// <summary>
    /// SpiderRock internal use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveMark {
      get { return liveMark_; }
      set {
        liveMark_ = value;
      }
    }

    /// <summary>Field number for the "live_uPrc" field.</summary>
    public const int LiveUPrcFieldNumber = 679;
    private double liveUPrc_;
    /// <summary>
    /// SpiderRock internal use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LiveUPrc {
      get { return liveUPrc_; }
      set {
        liveUPrc_ = value;
      }
    }

    /// <summary>Field number for the "pend_mark" field.</summary>
    public const int PendMarkFieldNumber = 682;
    private double pendMark_;
    /// <summary>
    /// SpiderRock internal use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PendMark {
      get { return pendMark_; }
      set {
        pendMark_ = value;
      }
    }

    /// <summary>Field number for the "pend_uPrc" field.</summary>
    public const int PendUPrcFieldNumber = 685;
    private double pendUPrc_;
    /// <summary>
    /// SpiderRock internal use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PendUPrc {
      get { return pendUPrc_; }
      set {
        pendUPrc_ = value;
      }
    }

    /// <summary>Field number for the "trd_mark_error" field.</summary>
    public const int TrdMarkErrorFieldNumber = 688;
    private string trdMarkError_ = "";
    /// <summary>
    /// trade mark error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TrdMarkError {
      get { return trdMarkError_; }
      set {
        trdMarkError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "day_mark_error" field.</summary>
    public const int DayMarkErrorFieldNumber = 691;
    private string dayMarkError_ = "";
    /// <summary>
    /// day mark error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DayMarkError {
      get { return dayMarkError_; }
      set {
        dayMarkError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 694;
    private string userData1_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 697;
    private string userData2_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 700;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// SR system timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradeCubeDetailV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradeCubeDetailV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (RunStatus != other.RunStatus) return false;
      if (SysEnvironment != other.SysEnvironment) return false;
      if (Version != other.Version) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (PackageId != other.PackageId) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (SrcRoutingCode != other.SrcRoutingCode) return false;
      if (SpdrSource != other.SpdrSource) return false;
      if (GroupingCode != other.GroupingCode) return false;
      if (Accnt != other.Accnt) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (PriAggGroup != other.PriAggGroup) return false;
      if (SecAggGroup != other.SecAggGroup) return false;
      if (!object.Equals(SecKey, other.SecKey)) return false;
      if (SecType != other.SecType) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (ViewGroup1 != other.ViewGroup1) return false;
      if (ViewGroup2 != other.ViewGroup2) return false;
      if (ViewGroup3 != other.ViewGroup3) return false;
      if (RiskClass != other.RiskClass) return false;
      if (SymbolType != other.SymbolType) return false;
      if (Sector != other.Sector) return false;
      if (IndNum != other.IndNum) return false;
      if (SubNum != other.SubNum) return false;
      if (GrpNum != other.GrpNum) return false;
      if (NbrNum != other.NbrNum) return false;
      if (Edays != other.Edays) return false;
      if (ExpCode != other.ExpCode) return false;
      if (SkewCode != other.SkewCode) return false;
      if (WidthCode != other.WidthCode) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTickSize, other.MinTickSize)) return false;
      if (RoutingCode != other.RoutingCode) return false;
      if (OrigExecID != other.OrigExecID) return false;
      if (LastExecID != other.LastExecID) return false;
      if (!object.Equals(TransactDttm, other.TransactDttm)) return false;
      if (ExecStatus != other.ExecStatus) return false;
      if (RemoteText != other.RemoteText) return false;
      if (OrderLimitType != other.OrderLimitType) return false;
      if (OrderLimitClass != other.OrderLimitClass) return false;
      if (ParentShape != other.ParentShape) return false;
      if (ParentOrderHandling != other.ParentOrderHandling) return false;
      if (ParentBalanceHandling != other.ParentBalanceHandling) return false;
      if (ParentOrderSize != other.ParentOrderSize) return false;
      if (Method != other.Method) return false;
      if (Strategy != other.Strategy) return false;
      if (UserName != other.UserName) return false;
      if (Origin != other.Origin) return false;
      if (Source != other.Source) return false;
      if (Server != other.Server) return false;
      if (ClearingFirm != other.ClearingFirm) return false;
      if (ClearingAccnt != other.ClearingAccnt) return false;
      if (LastCapacity != other.LastCapacity) return false;
      if (ExecRole != other.ExecRole) return false;
      if (ExecBrkrCode != other.ExecBrkrCode) return false;
      if (ExecBrkrAccnt != other.ExecBrkrAccnt) return false;
      if (ExecBrkrClFirm != other.ExecBrkrClFirm) return false;
      if (ExecBrkrUserName != other.ExecBrkrUserName) return false;
      if (ClearingFlipType != other.ClearingFlipType) return false;
      if (ClearingFlipFirm != other.ClearingFlipFirm) return false;
      if (ClearingFlipAccnt != other.ClearingFlipAccnt) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBrkrRate, other.FillBrkrRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillRoutingRate, other.FillRoutingRate)) return false;
      if (BillingSecType != other.BillingSecType) return false;
      if (BillingCategory != other.BillingCategory) return false;
      if (FirmType != other.FirmType) return false;
      if (Side != other.Side) return false;
      if (PriceType != other.PriceType) return false;
      if (SsaleFlag != other.SsaleFlag) return false;
      if (SpdrSSaleFlag != other.SpdrSSaleFlag) return false;
      if (PositionType != other.PositionType) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (!object.Equals(OrderDttm, other.OrderDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderUBid, other.OrderUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderUAsk, other.OrderUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderBid, other.OrderBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderAsk, other.OrderAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderSurfPrc, other.OrderSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderSurfVol, other.OrderSurfVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderLimitVol, other.OrderLimitVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderLimitPrc, other.OrderLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderLimitRefUPrc, other.OrderLimitRefUPrc)) return false;
      if (ChildShape != other.ChildShape) return false;
      if (ChildSize != other.ChildSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildPrice, other.ChildPrice)) return false;
      if (ChildExch != other.ChildExch) return false;
      if (ChildExDest != other.ChildExDest) return false;
      if (!object.Equals(ChildDttm, other.ChildDttm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildUBid, other.ChildUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildUAsk, other.ChildUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildBid, other.ChildBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildAsk, other.ChildAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildSurfPrc, other.ChildSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildVol, other.ChildVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildProb, other.ChildProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitPrc, other.ChildLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChildLimitRefUPrc, other.ChildLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildLimitPnl, other.ChildLimitPnl)) return false;
      if (ChildAlgoHandler != other.ChildAlgoHandler) return false;
      if (ChildOrderHandling != other.ChildOrderHandling) return false;
      if (ChildCreateReason != other.ChildCreateReason) return false;
      if (ChildCancelReason != other.ChildCancelReason) return false;
      if (ChildMktStance != other.ChildMktStance) return false;
      if (ChildCxlAttempted != other.ChildCxlAttempted) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildCxlFillLatency, other.ChildCxlFillLatency)) return false;
      if (FillExch != other.FillExch) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPrice, other.FillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillTs, other.FillTs)) return false;
      if (!object.Equals(FillDttm, other.FillDttm)) return false;
      if (FillSize != other.FillSize) return false;
      if (EffFillSize != other.EffFillSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVol, other.FillVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillProb, other.FillProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitPrc, other.FillLimitPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillLimitRefUPrc, other.FillLimitRefUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillLimitPnl, other.FillLimitPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillDe, other.FillDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillVe, other.FillVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTh, other.FillTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUPrc, other.FillUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillBeta, other.FillBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTv, other.FillTv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillTp, other.FillTp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUBid, other.FillUBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillUAsk, other.FillUAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillBid, other.FillBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAsk, other.FillAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillSurfPrc, other.FillSurfPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPostUMark1M, other.FillPostUMark1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPostUMark10M, other.FillPostUMark10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPostMark1M, other.FillPostMark1M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillPostMark10M, other.FillPostMark10M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVDn, other.MarginUDnVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDnVUp, other.MarginUDnVUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVDn, other.MarginUUpVDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUpVUp, other.MarginUUpVUp)) return false;
      if (RiskCode != other.RiskCode) return false;
      if (ExchLiquidityTag != other.ExchLiquidityTag) return false;
      if (SpdrLiquidityTag != other.SpdrLiquidityTag) return false;
      if (FillExchDetail != other.FillExchDetail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NotionalValue, other.NotionalValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarketValue, other.MarketValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderMktWidth, other.OrderMktWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChildMktWidth, other.ChildMktWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillMktWidth, other.FillMktWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParentOrderAge, other.ParentOrderAge)) return false;
      if (ParentAgeCode != other.ParentAgeCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDelta, other.TrdDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDDelta, other.TrdDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdGamma, other.TrdGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdVega, other.TrdVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdWtVega, other.TrdWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdTheta, other.TrdTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdPrem, other.TrdPrem)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdBeta, other.TrdBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrdDBeta, other.TrdDBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfEdge, other.SurfEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfEdgeUnit, other.SurfEdgeUnit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoEdge, other.TheoEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoEdgeUnit, other.TheoEdgeUnit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchFee, other.ExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HalfWidthPnl, other.HalfWidthPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClArrivePnl, other.ClArrivePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArrivePnl, other.ArrivePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArriveDnPnl, other.ArriveDnPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftArrivePnl, other.UDriftArrivePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayDnPnl, other.DayDnPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayM1Pnl, other.DayM1Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayM10Pnl, other.DayM10Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftDayPnl, other.UDriftDayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftM1Pnl, other.UDriftM1Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftM10Pnl, other.UDriftM10Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnl, other.DayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveMark, other.LiveMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LiveUPrc, other.LiveUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PendMark, other.PendMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PendUPrc, other.PendUPrc)) return false;
      if (TrdMarkError != other.TrdMarkError) return false;
      if (DayMarkError != other.DayMarkError) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) hash ^= SysEnvironment.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (SrcRoutingCode.Length != 0) hash ^= SrcRoutingCode.GetHashCode();
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
      if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
      if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (PriAggGroup.Length != 0) hash ^= PriAggGroup.GetHashCode();
      if (SecAggGroup.Length != 0) hash ^= SecAggGroup.GetHashCode();
      if (secKey_ != null) hash ^= SecKey.GetHashCode();
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (ViewGroup1.Length != 0) hash ^= ViewGroup1.GetHashCode();
      if (ViewGroup2.Length != 0) hash ^= ViewGroup2.GetHashCode();
      if (ViewGroup3.Length != 0) hash ^= ViewGroup3.GetHashCode();
      if (RiskClass.Length != 0) hash ^= RiskClass.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IndNum != 0) hash ^= IndNum.GetHashCode();
      if (SubNum != 0) hash ^= SubNum.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (NbrNum != 0) hash ^= NbrNum.GetHashCode();
      if (Edays != 0) hash ^= Edays.GetHashCode();
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) hash ^= ExpCode.GetHashCode();
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) hash ^= SkewCode.GetHashCode();
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) hash ^= WidthCode.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (UPrcRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcRatio);
      if (MinTickSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTickSize);
      if (RoutingCode.Length != 0) hash ^= RoutingCode.GetHashCode();
      if (OrigExecID.Length != 0) hash ^= OrigExecID.GetHashCode();
      if (LastExecID.Length != 0) hash ^= LastExecID.GetHashCode();
      if (transactDttm_ != null) hash ^= TransactDttm.GetHashCode();
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) hash ^= ExecStatus.GetHashCode();
      if (RemoteText.Length != 0) hash ^= RemoteText.GetHashCode();
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) hash ^= OrderLimitType.GetHashCode();
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) hash ^= OrderLimitClass.GetHashCode();
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ParentShape.GetHashCode();
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) hash ^= ParentOrderHandling.GetHashCode();
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) hash ^= ParentBalanceHandling.GetHashCode();
      if (ParentOrderSize != 0) hash ^= ParentOrderSize.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Origin.Length != 0) hash ^= Origin.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (ClearingFirm.Length != 0) hash ^= ClearingFirm.GetHashCode();
      if (ClearingAccnt.Length != 0) hash ^= ClearingAccnt.GetHashCode();
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) hash ^= LastCapacity.GetHashCode();
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) hash ^= ExecRole.GetHashCode();
      if (ExecBrkrCode.Length != 0) hash ^= ExecBrkrCode.GetHashCode();
      if (ExecBrkrAccnt.Length != 0) hash ^= ExecBrkrAccnt.GetHashCode();
      if (ExecBrkrClFirm.Length != 0) hash ^= ExecBrkrClFirm.GetHashCode();
      if (ExecBrkrUserName.Length != 0) hash ^= ExecBrkrUserName.GetHashCode();
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) hash ^= ClearingFlipType.GetHashCode();
      if (ClearingFlipFirm.Length != 0) hash ^= ClearingFlipFirm.GetHashCode();
      if (ClearingFlipAccnt.Length != 0) hash ^= ClearingFlipAccnt.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (FillBrkrRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBrkrRate);
      if (FillRoutingRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillRoutingRate);
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) hash ^= BillingSecType.GetHashCode();
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) hash ^= BillingCategory.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= Side.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SsaleFlag.GetHashCode();
      if (SpdrSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) hash ^= SpdrSSaleFlag.GetHashCode();
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) hash ^= PositionType.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (orderDttm_ != null) hash ^= OrderDttm.GetHashCode();
      if (OrderUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderUBid);
      if (OrderUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderUAsk);
      if (OrderBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderBid);
      if (OrderAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderAsk);
      if (OrderSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderSurfPrc);
      if (OrderSurfVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderSurfVol);
      if (OrderLimitVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderLimitVol);
      if (OrderLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderLimitPrc);
      if (OrderLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderLimitRefUPrc);
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) hash ^= ChildShape.GetHashCode();
      if (ChildSize != 0) hash ^= ChildSize.GetHashCode();
      if (ChildPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildPrice);
      if (ChildExch.Length != 0) hash ^= ChildExch.GetHashCode();
      if (ChildExDest.Length != 0) hash ^= ChildExDest.GetHashCode();
      if (childDttm_ != null) hash ^= ChildDttm.GetHashCode();
      if (ChildUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildUBid);
      if (ChildUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildUAsk);
      if (ChildBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildBid);
      if (ChildAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildAsk);
      if (ChildSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildSurfPrc);
      if (ChildVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildVol);
      if (ChildProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildProb);
      if (ChildLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitPrc);
      if (ChildLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChildLimitRefUPrc);
      if (ChildLimitPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildLimitPnl);
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) hash ^= ChildAlgoHandler.GetHashCode();
      if (ChildOrderHandling.Length != 0) hash ^= ChildOrderHandling.GetHashCode();
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) hash ^= ChildCreateReason.GetHashCode();
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) hash ^= ChildCancelReason.GetHashCode();
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) hash ^= ChildMktStance.GetHashCode();
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= ChildCxlAttempted.GetHashCode();
      if (ChildCxlFillLatency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildCxlFillLatency);
      if (FillExch.Length != 0) hash ^= FillExch.GetHashCode();
      if (FillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPrice);
      if (FillTs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillTs);
      if (fillDttm_ != null) hash ^= FillDttm.GetHashCode();
      if (FillSize != 0) hash ^= FillSize.GetHashCode();
      if (EffFillSize != 0) hash ^= EffFillSize.GetHashCode();
      if (FillVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVol);
      if (FillProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillProb);
      if (FillLimitPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitPrc);
      if (FillLimitRefUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillLimitRefUPrc);
      if (FillLimitPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillLimitPnl);
      if (FillDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillDe);
      if (FillVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillVe);
      if (FillTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTh);
      if (FillUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUPrc);
      if (FillBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillBeta);
      if (FillTv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTv);
      if (FillTp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillTp);
      if (FillUBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUBid);
      if (FillUAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillUAsk);
      if (FillBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillBid);
      if (FillAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAsk);
      if (FillSurfPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillSurfPrc);
      if (FillPostUMark1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPostUMark1M);
      if (FillPostUMark10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPostUMark10M);
      if (FillPostMark1M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPostMark1M);
      if (FillPostMark10M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillPostMark10M);
      if (MarginUDnVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVDn);
      if (MarginUDnVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDnVUp);
      if (MarginUUpVDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVDn);
      if (MarginUUpVUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUpVUp);
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) hash ^= RiskCode.GetHashCode();
      if (ExchLiquidityTag.Length != 0) hash ^= ExchLiquidityTag.GetHashCode();
      if (SpdrLiquidityTag.Length != 0) hash ^= SpdrLiquidityTag.GetHashCode();
      if (FillExchDetail.Length != 0) hash ^= FillExchDetail.GetHashCode();
      if (NotionalValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NotionalValue);
      if (MarketValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarketValue);
      if (OrderMktWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderMktWidth);
      if (ChildMktWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChildMktWidth);
      if (FillMktWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillMktWidth);
      if (ParentOrderAge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParentOrderAge);
      if (ParentAgeCode != global::Spiderrock.Protobuf.ParentAge.Unspecified) hash ^= ParentAgeCode.GetHashCode();
      if (TrdDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDelta);
      if (TrdDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDDelta);
      if (TrdGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdGamma);
      if (TrdVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdVega);
      if (TrdWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdWtVega);
      if (TrdTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdTheta);
      if (TrdPrem != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdPrem);
      if (TrdBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdBeta);
      if (TrdDBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrdDBeta);
      if (SurfEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfEdge);
      if (SurfEdgeUnit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfEdgeUnit);
      if (TheoEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoEdge);
      if (TheoEdgeUnit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoEdgeUnit);
      if (ExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchFee);
      if (HalfWidthPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HalfWidthPnl);
      if (ClArrivePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClArrivePnl);
      if (ArrivePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArrivePnl);
      if (ArriveDnPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArriveDnPnl);
      if (UDriftArrivePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftArrivePnl);
      if (DayDnPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayDnPnl);
      if (DayM1Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayM1Pnl);
      if (DayM10Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayM10Pnl);
      if (UDriftDayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftDayPnl);
      if (UDriftM1Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftM1Pnl);
      if (UDriftM10Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftM10Pnl);
      if (DayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnl);
      if (LiveMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveMark);
      if (LiveUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LiveUPrc);
      if (PendMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PendMark);
      if (PendUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PendUPrc);
      if (TrdMarkError.Length != 0) hash ^= TrdMarkError.GetHashCode();
      if (DayMarkError.Length != 0) hash ^= DayMarkError.GetHashCode();
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (Version != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(Version);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ClOrdId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(ParentNumber);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(PackageId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(SrcRoutingCode);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(GroupingCode);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(ClientFirm);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(SecAggGroup);
      }
      if (secKey_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(Ticker);
      }
      if (ViewGroup1.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(ViewGroup3);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) SymbolType);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Sector);
      }
      if (IndNum != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(NbrNum);
      }
      if (Edays != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(Edays);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) UPriceFormat);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(MinTickSize);
      }
      if (RoutingCode.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(RoutingCode);
      }
      if (OrigExecID.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(LastExecID);
      }
      if (transactDttm_ != null) {
        output.WriteRawTag(218, 14);
        output.WriteMessage(TransactDttm);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(240, 14);
        output.WriteEnum((int) ExecStatus);
      }
      if (RemoteText.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(RemoteText);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) OrderLimitClass);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) ParentShape);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(ParentOrderSize);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(178, 16);
        output.WriteString(Method);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(202, 16);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(UserName);
      }
      if (Origin.Length != 0) {
        output.WriteRawTag(250, 16);
        output.WriteString(Origin);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(146, 17);
        output.WriteString(Source);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(170, 17);
        output.WriteString(Server);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(194, 17);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(218, 17);
        output.WriteString(ClearingAccnt);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) LastCapacity);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(136, 18);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(186, 18);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(178, 19);
        output.WriteString(ClearingFlipAccnt);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(200, 19);
        output.WriteInt64(RiskGroupId);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(FillRoutingRate);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) BillingCategory);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) FirmType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) Side);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(240, 20);
        output.WriteEnum((int) PriceType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) SsaleFlag);
      }
      if (SpdrSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) SpdrSSaleFlag);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) PositionType);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) AutoHedge);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(234, 21);
        output.WriteMessage(OrderDttm);
      }
      if (OrderUBid != 0D) {
        output.WriteRawTag(129, 22);
        output.WriteDouble(OrderUBid);
      }
      if (OrderUAsk != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(OrderUAsk);
      }
      if (OrderBid != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(OrderBid);
      }
      if (OrderAsk != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(OrderAsk);
      }
      if (OrderSurfPrc != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(OrderSurfPrc);
      }
      if (OrderSurfVol != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(OrderSurfVol);
      }
      if (OrderLimitVol != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(OrderLimitVol);
      }
      if (OrderLimitPrc != 0D) {
        output.WriteRawTag(169, 23);
        output.WriteDouble(OrderLimitPrc);
      }
      if (OrderLimitRefUPrc != 0D) {
        output.WriteRawTag(193, 23);
        output.WriteDouble(OrderLimitRefUPrc);
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(216, 23);
        output.WriteEnum((int) ChildShape);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(240, 23);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(137, 24);
        output.WriteDouble(ChildPrice);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(ChildExch);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(210, 24);
        output.WriteMessage(ChildDttm);
      }
      if (ChildUBid != 0D) {
        output.WriteRawTag(233, 24);
        output.WriteDouble(ChildUBid);
      }
      if (ChildUAsk != 0D) {
        output.WriteRawTag(129, 25);
        output.WriteDouble(ChildUAsk);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(153, 25);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(177, 25);
        output.WriteDouble(ChildAsk);
      }
      if (ChildSurfPrc != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(ChildSurfPrc);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(145, 26);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(169, 26);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildLimitPnl != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(ChildLimitPnl);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(136, 27);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(160, 27);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(184, 27);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 27);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(ChildCxlFillLatency);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(130, 28);
        output.WriteString(FillExch);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(153, 28);
        output.WriteDouble(FillPrice);
      }
      if (FillTs != 0D) {
        output.WriteRawTag(177, 28);
        output.WriteDouble(FillTs);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(202, 28);
        output.WriteMessage(FillDttm);
      }
      if (FillSize != 0) {
        output.WriteRawTag(224, 28);
        output.WriteInt32(FillSize);
      }
      if (EffFillSize != 0) {
        output.WriteRawTag(248, 28);
        output.WriteInt32(EffFillSize);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(FillVol);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(FillProb);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(193, 29);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(217, 29);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillLimitPnl != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(FillLimitPnl);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(FillDe);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(FillVe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(FillTh);
      }
      if (FillUPrc != 0D) {
        output.WriteRawTag(233, 30);
        output.WriteDouble(FillUPrc);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(FillBeta);
      }
      if (FillTv != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(FillTv);
      }
      if (FillTp != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(FillTp);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(209, 33);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(233, 33);
        output.WriteDouble(FillUAsk);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(129, 34);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(153, 34);
        output.WriteDouble(FillAsk);
      }
      if (FillSurfPrc != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillSurfPrc);
      }
      if (FillPostUMark1M != 0D) {
        output.WriteRawTag(201, 34);
        output.WriteDouble(FillPostUMark1M);
      }
      if (FillPostUMark10M != 0D) {
        output.WriteRawTag(225, 34);
        output.WriteDouble(FillPostUMark10M);
      }
      if (FillPostMark1M != 0D) {
        output.WriteRawTag(249, 34);
        output.WriteDouble(FillPostMark1M);
      }
      if (FillPostMark10M != 0D) {
        output.WriteRawTag(145, 35);
        output.WriteDouble(FillPostMark10M);
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        output.WriteRawTag(168, 35);
        output.WriteEnum((int) RiskCode);
      }
      if (ExchLiquidityTag.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(ExchLiquidityTag);
      }
      if (SpdrLiquidityTag.Length != 0) {
        output.WriteRawTag(218, 35);
        output.WriteString(SpdrLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        output.WriteRawTag(242, 35);
        output.WriteString(FillExchDetail);
      }
      if (NotionalValue != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(NotionalValue);
      }
      if (MarketValue != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(MarketValue);
      }
      if (OrderMktWidth != 0F) {
        output.WriteRawTag(189, 36);
        output.WriteFloat(OrderMktWidth);
      }
      if (ChildMktWidth != 0F) {
        output.WriteRawTag(213, 36);
        output.WriteFloat(ChildMktWidth);
      }
      if (FillMktWidth != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(FillMktWidth);
      }
      if (ParentOrderAge != 0F) {
        output.WriteRawTag(133, 37);
        output.WriteFloat(ParentOrderAge);
      }
      if (ParentAgeCode != global::Spiderrock.Protobuf.ParentAge.Unspecified) {
        output.WriteRawTag(152, 37);
        output.WriteEnum((int) ParentAgeCode);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(TrdDelta);
      }
      if (TrdDDelta != 0F) {
        output.WriteRawTag(205, 37);
        output.WriteFloat(TrdDDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(TrdGamma);
      }
      if (TrdVega != 0F) {
        output.WriteRawTag(253, 37);
        output.WriteFloat(TrdVega);
      }
      if (TrdWtVega != 0F) {
        output.WriteRawTag(149, 38);
        output.WriteFloat(TrdWtVega);
      }
      if (TrdTheta != 0F) {
        output.WriteRawTag(173, 38);
        output.WriteFloat(TrdTheta);
      }
      if (TrdPrem != 0F) {
        output.WriteRawTag(197, 38);
        output.WriteFloat(TrdPrem);
      }
      if (TrdBeta != 0F) {
        output.WriteRawTag(221, 38);
        output.WriteFloat(TrdBeta);
      }
      if (TrdDBeta != 0F) {
        output.WriteRawTag(245, 38);
        output.WriteFloat(TrdDBeta);
      }
      if (SurfEdge != 0F) {
        output.WriteRawTag(141, 39);
        output.WriteFloat(SurfEdge);
      }
      if (SurfEdgeUnit != 0F) {
        output.WriteRawTag(165, 39);
        output.WriteFloat(SurfEdgeUnit);
      }
      if (TheoEdge != 0F) {
        output.WriteRawTag(189, 39);
        output.WriteFloat(TheoEdge);
      }
      if (TheoEdgeUnit != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(TheoEdgeUnit);
      }
      if (ExchFee != 0F) {
        output.WriteRawTag(237, 39);
        output.WriteFloat(ExchFee);
      }
      if (HalfWidthPnl != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(HalfWidthPnl);
      }
      if (ClArrivePnl != 0F) {
        output.WriteRawTag(157, 40);
        output.WriteFloat(ClArrivePnl);
      }
      if (ArrivePnl != 0F) {
        output.WriteRawTag(181, 40);
        output.WriteFloat(ArrivePnl);
      }
      if (ArriveDnPnl != 0F) {
        output.WriteRawTag(205, 40);
        output.WriteFloat(ArriveDnPnl);
      }
      if (UDriftArrivePnl != 0F) {
        output.WriteRawTag(229, 40);
        output.WriteFloat(UDriftArrivePnl);
      }
      if (DayDnPnl != 0F) {
        output.WriteRawTag(253, 40);
        output.WriteFloat(DayDnPnl);
      }
      if (DayM1Pnl != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(DayM1Pnl);
      }
      if (DayM10Pnl != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(DayM10Pnl);
      }
      if (UDriftDayPnl != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(UDriftDayPnl);
      }
      if (UDriftM1Pnl != 0F) {
        output.WriteRawTag(221, 41);
        output.WriteFloat(UDriftM1Pnl);
      }
      if (UDriftM10Pnl != 0F) {
        output.WriteRawTag(245, 41);
        output.WriteFloat(UDriftM10Pnl);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(141, 42);
        output.WriteFloat(DayPnl);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(LiveMark);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(185, 42);
        output.WriteDouble(LiveUPrc);
      }
      if (PendMark != 0D) {
        output.WriteRawTag(209, 42);
        output.WriteDouble(PendMark);
      }
      if (PendUPrc != 0D) {
        output.WriteRawTag(233, 42);
        output.WriteDouble(PendUPrc);
      }
      if (TrdMarkError.Length != 0) {
        output.WriteRawTag(130, 43);
        output.WriteString(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        output.WriteRawTag(154, 43);
        output.WriteString(DayMarkError);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(178, 43);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(202, 43);
        output.WriteString(UserData2);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 43);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(237, 43);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(245, 43);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(253, 43);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(133, 44);
        output.WriteFloat(MarginUUpVUp);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(138, 44);
        output.WriteString(ExecBrkrCode);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(146, 44);
        output.WriteString(ChildExDest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) RunStatus);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) SysEnvironment);
      }
      if (Version != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(Version);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ClOrdId);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(ParentNumber);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(PackageId);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(SrcRoutingCode);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(GroupingCode);
      }
      if (Accnt.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(Accnt);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(ClientFirm);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(SecAggGroup);
      }
      if (secKey_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) SecType);
      }
      if (ticker_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(Ticker);
      }
      if (ViewGroup1.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(ViewGroup3);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteString(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) SymbolType);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(Sector);
      }
      if (IndNum != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(NbrNum);
      }
      if (Edays != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(Edays);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(240, 11);
        output.WriteEnum((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        output.WriteRawTag(136, 12);
        output.WriteEnum((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(160, 12);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) UPriceFormat);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Years);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(128, 13);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 13);
        output.WriteEnum((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(UPrcRatio);
      }
      if (MinTickSize != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(MinTickSize);
      }
      if (RoutingCode.Length != 0) {
        output.WriteRawTag(146, 14);
        output.WriteString(RoutingCode);
      }
      if (OrigExecID.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(LastExecID);
      }
      if (transactDttm_ != null) {
        output.WriteRawTag(218, 14);
        output.WriteMessage(TransactDttm);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        output.WriteRawTag(240, 14);
        output.WriteEnum((int) ExecStatus);
      }
      if (RemoteText.Length != 0) {
        output.WriteRawTag(138, 15);
        output.WriteString(RemoteText);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        output.WriteRawTag(160, 15);
        output.WriteEnum((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        output.WriteRawTag(184, 15);
        output.WriteEnum((int) OrderLimitClass);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(208, 15);
        output.WriteEnum((int) ParentShape);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(ParentOrderSize);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(178, 16);
        output.WriteString(Method);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(202, 16);
        output.WriteString(Strategy);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(UserName);
      }
      if (Origin.Length != 0) {
        output.WriteRawTag(250, 16);
        output.WriteString(Origin);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(146, 17);
        output.WriteString(Source);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(170, 17);
        output.WriteString(Server);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(194, 17);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(218, 17);
        output.WriteString(ClearingAccnt);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        output.WriteRawTag(240, 17);
        output.WriteEnum((int) LastCapacity);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        output.WriteRawTag(136, 18);
        output.WriteEnum((int) ExecRole);
      }
      if (ExecBrkrAccnt.Length != 0) {
        output.WriteRawTag(186, 18);
        output.WriteString(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        output.WriteRawTag(210, 18);
        output.WriteString(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        output.WriteRawTag(154, 19);
        output.WriteString(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        output.WriteRawTag(178, 19);
        output.WriteString(ClearingFlipAccnt);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(200, 19);
        output.WriteInt64(RiskGroupId);
      }
      if (FillBrkrRate != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(FillBrkrRate);
      }
      if (FillRoutingRate != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(FillRoutingRate);
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        output.WriteRawTag(144, 20);
        output.WriteEnum((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        output.WriteRawTag(168, 20);
        output.WriteEnum((int) BillingCategory);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(192, 20);
        output.WriteEnum((int) FirmType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) Side);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        output.WriteRawTag(240, 20);
        output.WriteEnum((int) PriceType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(136, 21);
        output.WriteEnum((int) SsaleFlag);
      }
      if (SpdrSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) SpdrSSaleFlag);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        output.WriteRawTag(184, 21);
        output.WriteEnum((int) PositionType);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) AutoHedge);
      }
      if (orderDttm_ != null) {
        output.WriteRawTag(234, 21);
        output.WriteMessage(OrderDttm);
      }
      if (OrderUBid != 0D) {
        output.WriteRawTag(129, 22);
        output.WriteDouble(OrderUBid);
      }
      if (OrderUAsk != 0D) {
        output.WriteRawTag(153, 22);
        output.WriteDouble(OrderUAsk);
      }
      if (OrderBid != 0D) {
        output.WriteRawTag(177, 22);
        output.WriteDouble(OrderBid);
      }
      if (OrderAsk != 0D) {
        output.WriteRawTag(201, 22);
        output.WriteDouble(OrderAsk);
      }
      if (OrderSurfPrc != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(OrderSurfPrc);
      }
      if (OrderSurfVol != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(OrderSurfVol);
      }
      if (OrderLimitVol != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(OrderLimitVol);
      }
      if (OrderLimitPrc != 0D) {
        output.WriteRawTag(169, 23);
        output.WriteDouble(OrderLimitPrc);
      }
      if (OrderLimitRefUPrc != 0D) {
        output.WriteRawTag(193, 23);
        output.WriteDouble(OrderLimitRefUPrc);
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        output.WriteRawTag(216, 23);
        output.WriteEnum((int) ChildShape);
      }
      if (ChildSize != 0) {
        output.WriteRawTag(240, 23);
        output.WriteInt32(ChildSize);
      }
      if (ChildPrice != 0D) {
        output.WriteRawTag(137, 24);
        output.WriteDouble(ChildPrice);
      }
      if (ChildExch.Length != 0) {
        output.WriteRawTag(162, 24);
        output.WriteString(ChildExch);
      }
      if (childDttm_ != null) {
        output.WriteRawTag(210, 24);
        output.WriteMessage(ChildDttm);
      }
      if (ChildUBid != 0D) {
        output.WriteRawTag(233, 24);
        output.WriteDouble(ChildUBid);
      }
      if (ChildUAsk != 0D) {
        output.WriteRawTag(129, 25);
        output.WriteDouble(ChildUAsk);
      }
      if (ChildBid != 0D) {
        output.WriteRawTag(153, 25);
        output.WriteDouble(ChildBid);
      }
      if (ChildAsk != 0D) {
        output.WriteRawTag(177, 25);
        output.WriteDouble(ChildAsk);
      }
      if (ChildSurfPrc != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(ChildSurfPrc);
      }
      if (ChildVol != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(ChildVol);
      }
      if (ChildProb != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(ChildProb);
      }
      if (ChildLimitPrc != 0D) {
        output.WriteRawTag(145, 26);
        output.WriteDouble(ChildLimitPrc);
      }
      if (ChildLimitRefUPrc != 0D) {
        output.WriteRawTag(169, 26);
        output.WriteDouble(ChildLimitRefUPrc);
      }
      if (ChildLimitPnl != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(ChildLimitPnl);
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        output.WriteRawTag(242, 26);
        output.WriteString(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        output.WriteRawTag(136, 27);
        output.WriteEnum((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        output.WriteRawTag(160, 27);
        output.WriteEnum((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        output.WriteRawTag(184, 27);
        output.WriteEnum((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 27);
        output.WriteEnum((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(ChildCxlFillLatency);
      }
      if (FillExch.Length != 0) {
        output.WriteRawTag(130, 28);
        output.WriteString(FillExch);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(153, 28);
        output.WriteDouble(FillPrice);
      }
      if (FillTs != 0D) {
        output.WriteRawTag(177, 28);
        output.WriteDouble(FillTs);
      }
      if (fillDttm_ != null) {
        output.WriteRawTag(202, 28);
        output.WriteMessage(FillDttm);
      }
      if (FillSize != 0) {
        output.WriteRawTag(224, 28);
        output.WriteInt32(FillSize);
      }
      if (EffFillSize != 0) {
        output.WriteRawTag(248, 28);
        output.WriteInt32(EffFillSize);
      }
      if (FillVol != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(FillVol);
      }
      if (FillProb != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(FillProb);
      }
      if (FillLimitPrc != 0D) {
        output.WriteRawTag(193, 29);
        output.WriteDouble(FillLimitPrc);
      }
      if (FillLimitRefUPrc != 0D) {
        output.WriteRawTag(217, 29);
        output.WriteDouble(FillLimitRefUPrc);
      }
      if (FillLimitPnl != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(FillLimitPnl);
      }
      if (FillDe != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(FillDe);
      }
      if (FillVe != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(FillVe);
      }
      if (FillTh != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(FillTh);
      }
      if (FillUPrc != 0D) {
        output.WriteRawTag(233, 30);
        output.WriteDouble(FillUPrc);
      }
      if (FillBeta != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(FillBeta);
      }
      if (FillTv != 0F) {
        output.WriteRawTag(165, 33);
        output.WriteFloat(FillTv);
      }
      if (FillTp != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(FillTp);
      }
      if (FillUBid != 0D) {
        output.WriteRawTag(209, 33);
        output.WriteDouble(FillUBid);
      }
      if (FillUAsk != 0D) {
        output.WriteRawTag(233, 33);
        output.WriteDouble(FillUAsk);
      }
      if (FillBid != 0D) {
        output.WriteRawTag(129, 34);
        output.WriteDouble(FillBid);
      }
      if (FillAsk != 0D) {
        output.WriteRawTag(153, 34);
        output.WriteDouble(FillAsk);
      }
      if (FillSurfPrc != 0F) {
        output.WriteRawTag(181, 34);
        output.WriteFloat(FillSurfPrc);
      }
      if (FillPostUMark1M != 0D) {
        output.WriteRawTag(201, 34);
        output.WriteDouble(FillPostUMark1M);
      }
      if (FillPostUMark10M != 0D) {
        output.WriteRawTag(225, 34);
        output.WriteDouble(FillPostUMark10M);
      }
      if (FillPostMark1M != 0D) {
        output.WriteRawTag(249, 34);
        output.WriteDouble(FillPostMark1M);
      }
      if (FillPostMark10M != 0D) {
        output.WriteRawTag(145, 35);
        output.WriteDouble(FillPostMark10M);
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        output.WriteRawTag(168, 35);
        output.WriteEnum((int) RiskCode);
      }
      if (ExchLiquidityTag.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(ExchLiquidityTag);
      }
      if (SpdrLiquidityTag.Length != 0) {
        output.WriteRawTag(218, 35);
        output.WriteString(SpdrLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        output.WriteRawTag(242, 35);
        output.WriteString(FillExchDetail);
      }
      if (NotionalValue != 0F) {
        output.WriteRawTag(141, 36);
        output.WriteFloat(NotionalValue);
      }
      if (MarketValue != 0F) {
        output.WriteRawTag(165, 36);
        output.WriteFloat(MarketValue);
      }
      if (OrderMktWidth != 0F) {
        output.WriteRawTag(189, 36);
        output.WriteFloat(OrderMktWidth);
      }
      if (ChildMktWidth != 0F) {
        output.WriteRawTag(213, 36);
        output.WriteFloat(ChildMktWidth);
      }
      if (FillMktWidth != 0F) {
        output.WriteRawTag(237, 36);
        output.WriteFloat(FillMktWidth);
      }
      if (ParentOrderAge != 0F) {
        output.WriteRawTag(133, 37);
        output.WriteFloat(ParentOrderAge);
      }
      if (ParentAgeCode != global::Spiderrock.Protobuf.ParentAge.Unspecified) {
        output.WriteRawTag(152, 37);
        output.WriteEnum((int) ParentAgeCode);
      }
      if (TrdDelta != 0F) {
        output.WriteRawTag(181, 37);
        output.WriteFloat(TrdDelta);
      }
      if (TrdDDelta != 0F) {
        output.WriteRawTag(205, 37);
        output.WriteFloat(TrdDDelta);
      }
      if (TrdGamma != 0F) {
        output.WriteRawTag(229, 37);
        output.WriteFloat(TrdGamma);
      }
      if (TrdVega != 0F) {
        output.WriteRawTag(253, 37);
        output.WriteFloat(TrdVega);
      }
      if (TrdWtVega != 0F) {
        output.WriteRawTag(149, 38);
        output.WriteFloat(TrdWtVega);
      }
      if (TrdTheta != 0F) {
        output.WriteRawTag(173, 38);
        output.WriteFloat(TrdTheta);
      }
      if (TrdPrem != 0F) {
        output.WriteRawTag(197, 38);
        output.WriteFloat(TrdPrem);
      }
      if (TrdBeta != 0F) {
        output.WriteRawTag(221, 38);
        output.WriteFloat(TrdBeta);
      }
      if (TrdDBeta != 0F) {
        output.WriteRawTag(245, 38);
        output.WriteFloat(TrdDBeta);
      }
      if (SurfEdge != 0F) {
        output.WriteRawTag(141, 39);
        output.WriteFloat(SurfEdge);
      }
      if (SurfEdgeUnit != 0F) {
        output.WriteRawTag(165, 39);
        output.WriteFloat(SurfEdgeUnit);
      }
      if (TheoEdge != 0F) {
        output.WriteRawTag(189, 39);
        output.WriteFloat(TheoEdge);
      }
      if (TheoEdgeUnit != 0F) {
        output.WriteRawTag(213, 39);
        output.WriteFloat(TheoEdgeUnit);
      }
      if (ExchFee != 0F) {
        output.WriteRawTag(237, 39);
        output.WriteFloat(ExchFee);
      }
      if (HalfWidthPnl != 0F) {
        output.WriteRawTag(133, 40);
        output.WriteFloat(HalfWidthPnl);
      }
      if (ClArrivePnl != 0F) {
        output.WriteRawTag(157, 40);
        output.WriteFloat(ClArrivePnl);
      }
      if (ArrivePnl != 0F) {
        output.WriteRawTag(181, 40);
        output.WriteFloat(ArrivePnl);
      }
      if (ArriveDnPnl != 0F) {
        output.WriteRawTag(205, 40);
        output.WriteFloat(ArriveDnPnl);
      }
      if (UDriftArrivePnl != 0F) {
        output.WriteRawTag(229, 40);
        output.WriteFloat(UDriftArrivePnl);
      }
      if (DayDnPnl != 0F) {
        output.WriteRawTag(253, 40);
        output.WriteFloat(DayDnPnl);
      }
      if (DayM1Pnl != 0F) {
        output.WriteRawTag(149, 41);
        output.WriteFloat(DayM1Pnl);
      }
      if (DayM10Pnl != 0F) {
        output.WriteRawTag(173, 41);
        output.WriteFloat(DayM10Pnl);
      }
      if (UDriftDayPnl != 0F) {
        output.WriteRawTag(197, 41);
        output.WriteFloat(UDriftDayPnl);
      }
      if (UDriftM1Pnl != 0F) {
        output.WriteRawTag(221, 41);
        output.WriteFloat(UDriftM1Pnl);
      }
      if (UDriftM10Pnl != 0F) {
        output.WriteRawTag(245, 41);
        output.WriteFloat(UDriftM10Pnl);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(141, 42);
        output.WriteFloat(DayPnl);
      }
      if (LiveMark != 0D) {
        output.WriteRawTag(161, 42);
        output.WriteDouble(LiveMark);
      }
      if (LiveUPrc != 0D) {
        output.WriteRawTag(185, 42);
        output.WriteDouble(LiveUPrc);
      }
      if (PendMark != 0D) {
        output.WriteRawTag(209, 42);
        output.WriteDouble(PendMark);
      }
      if (PendUPrc != 0D) {
        output.WriteRawTag(233, 42);
        output.WriteDouble(PendUPrc);
      }
      if (TrdMarkError.Length != 0) {
        output.WriteRawTag(130, 43);
        output.WriteString(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        output.WriteRawTag(154, 43);
        output.WriteString(DayMarkError);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(178, 43);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(202, 43);
        output.WriteString(UserData2);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(226, 43);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDnVDn != 0F) {
        output.WriteRawTag(237, 43);
        output.WriteFloat(MarginUDnVDn);
      }
      if (MarginUDnVUp != 0F) {
        output.WriteRawTag(245, 43);
        output.WriteFloat(MarginUDnVUp);
      }
      if (MarginUUpVDn != 0F) {
        output.WriteRawTag(253, 43);
        output.WriteFloat(MarginUUpVDn);
      }
      if (MarginUUpVUp != 0F) {
        output.WriteRawTag(133, 44);
        output.WriteFloat(MarginUUpVUp);
      }
      if (ExecBrkrCode.Length != 0) {
        output.WriteRawTag(138, 44);
        output.WriteString(ExecBrkrCode);
      }
      if (ChildExDest.Length != 0) {
        output.WriteRawTag(146, 44);
        output.WriteString(ChildExDest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
      }
      if (SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SysEnvironment);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (SrcRoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcRoutingCode);
      }
      if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
      }
      if (GroupingCode != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
      }
      if (Accnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accnt);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (PriAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecAggGroup);
      }
      if (secKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
      }
      if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (ViewGroup1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup3);
      }
      if (RiskClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IndNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndNum);
      }
      if (SubNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubNum);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (NbrNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbrNum);
      }
      if (Edays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Edays);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SkewCode);
      }
      if (WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WidthCode);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (UPrcRatio != 0F) {
        size += 2 + 4;
      }
      if (MinTickSize != 0F) {
        size += 2 + 4;
      }
      if (RoutingCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoutingCode);
      }
      if (OrigExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigExecID);
      }
      if (LastExecID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastExecID);
      }
      if (transactDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransactDttm);
      }
      if (ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecStatus);
      }
      if (RemoteText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RemoteText);
      }
      if (OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitType);
      }
      if (OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderLimitClass);
      }
      if (ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentShape);
      }
      if (ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentOrderHandling);
      }
      if (ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentBalanceHandling);
      }
      if (ParentOrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentOrderSize);
      }
      if (Method.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Strategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Origin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Origin);
      }
      if (Source.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Server.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (ClearingFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingAccnt);
      }
      if (LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LastCapacity);
      }
      if (ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExecRole);
      }
      if (ExecBrkrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrCode);
      }
      if (ExecBrkrAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrAccnt);
      }
      if (ExecBrkrClFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrClFirm);
      }
      if (ExecBrkrUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecBrkrUserName);
      }
      if (ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClearingFlipType);
      }
      if (ClearingFlipFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipFirm);
      }
      if (ClearingFlipAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFlipAccnt);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (FillBrkrRate != 0F) {
        size += 2 + 4;
      }
      if (FillRoutingRate != 0F) {
        size += 2 + 4;
      }
      if (BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingSecType);
      }
      if (BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BillingCategory);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SsaleFlag);
      }
      if (SpdrSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSSaleFlag);
      }
      if (PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (orderDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderDttm);
      }
      if (OrderUBid != 0D) {
        size += 2 + 8;
      }
      if (OrderUAsk != 0D) {
        size += 2 + 8;
      }
      if (OrderBid != 0D) {
        size += 2 + 8;
      }
      if (OrderAsk != 0D) {
        size += 2 + 8;
      }
      if (OrderSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (OrderSurfVol != 0F) {
        size += 2 + 4;
      }
      if (OrderLimitVol != 0F) {
        size += 2 + 4;
      }
      if (OrderLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (OrderLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildShape);
      }
      if (ChildSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChildSize);
      }
      if (ChildPrice != 0D) {
        size += 2 + 8;
      }
      if (ChildExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExch);
      }
      if (ChildExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildExDest);
      }
      if (childDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChildDttm);
      }
      if (ChildUBid != 0D) {
        size += 2 + 8;
      }
      if (ChildUAsk != 0D) {
        size += 2 + 8;
      }
      if (ChildBid != 0D) {
        size += 2 + 8;
      }
      if (ChildAsk != 0D) {
        size += 2 + 8;
      }
      if (ChildSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (ChildVol != 0F) {
        size += 2 + 4;
      }
      if (ChildProb != 0F) {
        size += 2 + 4;
      }
      if (ChildLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (ChildLimitPnl != 0F) {
        size += 2 + 4;
      }
      if (ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildAlgoHandler);
      }
      if (ChildOrderHandling.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChildOrderHandling);
      }
      if (ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCreateReason);
      }
      if (ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCancelReason);
      }
      if (ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildMktStance);
      }
      if (ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChildCxlAttempted);
      }
      if (ChildCxlFillLatency != 0F) {
        size += 2 + 4;
      }
      if (FillExch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExch);
      }
      if (FillPrice != 0D) {
        size += 2 + 8;
      }
      if (FillTs != 0D) {
        size += 2 + 8;
      }
      if (fillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillDttm);
      }
      if (FillSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FillSize);
      }
      if (EffFillSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EffFillSize);
      }
      if (FillVol != 0F) {
        size += 2 + 4;
      }
      if (FillProb != 0F) {
        size += 2 + 4;
      }
      if (FillLimitPrc != 0D) {
        size += 2 + 8;
      }
      if (FillLimitRefUPrc != 0D) {
        size += 2 + 8;
      }
      if (FillLimitPnl != 0F) {
        size += 2 + 4;
      }
      if (FillDe != 0F) {
        size += 2 + 4;
      }
      if (FillVe != 0F) {
        size += 2 + 4;
      }
      if (FillTh != 0F) {
        size += 2 + 4;
      }
      if (FillUPrc != 0D) {
        size += 2 + 8;
      }
      if (FillBeta != 0F) {
        size += 2 + 4;
      }
      if (FillTv != 0F) {
        size += 2 + 4;
      }
      if (FillTp != 0F) {
        size += 2 + 4;
      }
      if (FillUBid != 0D) {
        size += 2 + 8;
      }
      if (FillUAsk != 0D) {
        size += 2 + 8;
      }
      if (FillBid != 0D) {
        size += 2 + 8;
      }
      if (FillAsk != 0D) {
        size += 2 + 8;
      }
      if (FillSurfPrc != 0F) {
        size += 2 + 4;
      }
      if (FillPostUMark1M != 0D) {
        size += 2 + 8;
      }
      if (FillPostUMark10M != 0D) {
        size += 2 + 8;
      }
      if (FillPostMark1M != 0D) {
        size += 2 + 8;
      }
      if (FillPostMark10M != 0D) {
        size += 2 + 8;
      }
      if (MarginUDnVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUDnVUp != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUpVUp != 0F) {
        size += 2 + 4;
      }
      if (RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskCode);
      }
      if (ExchLiquidityTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchLiquidityTag);
      }
      if (SpdrLiquidityTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrLiquidityTag);
      }
      if (FillExchDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillExchDetail);
      }
      if (NotionalValue != 0F) {
        size += 2 + 4;
      }
      if (MarketValue != 0F) {
        size += 2 + 4;
      }
      if (OrderMktWidth != 0F) {
        size += 2 + 4;
      }
      if (ChildMktWidth != 0F) {
        size += 2 + 4;
      }
      if (FillMktWidth != 0F) {
        size += 2 + 4;
      }
      if (ParentOrderAge != 0F) {
        size += 2 + 4;
      }
      if (ParentAgeCode != global::Spiderrock.Protobuf.ParentAge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentAgeCode);
      }
      if (TrdDelta != 0F) {
        size += 2 + 4;
      }
      if (TrdDDelta != 0F) {
        size += 2 + 4;
      }
      if (TrdGamma != 0F) {
        size += 2 + 4;
      }
      if (TrdVega != 0F) {
        size += 2 + 4;
      }
      if (TrdWtVega != 0F) {
        size += 2 + 4;
      }
      if (TrdTheta != 0F) {
        size += 2 + 4;
      }
      if (TrdPrem != 0F) {
        size += 2 + 4;
      }
      if (TrdBeta != 0F) {
        size += 2 + 4;
      }
      if (TrdDBeta != 0F) {
        size += 2 + 4;
      }
      if (SurfEdge != 0F) {
        size += 2 + 4;
      }
      if (SurfEdgeUnit != 0F) {
        size += 2 + 4;
      }
      if (TheoEdge != 0F) {
        size += 2 + 4;
      }
      if (TheoEdgeUnit != 0F) {
        size += 2 + 4;
      }
      if (ExchFee != 0F) {
        size += 2 + 4;
      }
      if (HalfWidthPnl != 0F) {
        size += 2 + 4;
      }
      if (ClArrivePnl != 0F) {
        size += 2 + 4;
      }
      if (ArrivePnl != 0F) {
        size += 2 + 4;
      }
      if (ArriveDnPnl != 0F) {
        size += 2 + 4;
      }
      if (UDriftArrivePnl != 0F) {
        size += 2 + 4;
      }
      if (DayDnPnl != 0F) {
        size += 2 + 4;
      }
      if (DayM1Pnl != 0F) {
        size += 2 + 4;
      }
      if (DayM10Pnl != 0F) {
        size += 2 + 4;
      }
      if (UDriftDayPnl != 0F) {
        size += 2 + 4;
      }
      if (UDriftM1Pnl != 0F) {
        size += 2 + 4;
      }
      if (UDriftM10Pnl != 0F) {
        size += 2 + 4;
      }
      if (DayPnl != 0F) {
        size += 2 + 4;
      }
      if (LiveMark != 0D) {
        size += 2 + 8;
      }
      if (LiveUPrc != 0D) {
        size += 2 + 8;
      }
      if (PendMark != 0D) {
        size += 2 + 8;
      }
      if (PendUPrc != 0D) {
        size += 2 + 8;
      }
      if (TrdMarkError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TrdMarkError);
      }
      if (DayMarkError.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DayMarkError);
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradeCubeDetailV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
        RunStatus = other.RunStatus;
      }
      if (other.SysEnvironment != global::Spiderrock.Protobuf.SysEnvironment.Unspecified) {
        SysEnvironment = other.SysEnvironment;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.SrcRoutingCode.Length != 0) {
        SrcRoutingCode = other.SrcRoutingCode;
      }
      if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
        SpdrSource = other.SpdrSource;
      }
      if (other.GroupingCode != 0L) {
        GroupingCode = other.GroupingCode;
      }
      if (other.Accnt.Length != 0) {
        Accnt = other.Accnt;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.PriAggGroup.Length != 0) {
        PriAggGroup = other.PriAggGroup;
      }
      if (other.SecAggGroup.Length != 0) {
        SecAggGroup = other.SecAggGroup;
      }
      if (other.secKey_ != null) {
        if (secKey_ == null) {
          SecKey = new global::Spiderrock.Protobuf.OptionKey();
        }
        SecKey.MergeFrom(other.SecKey);
      }
      if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        SecType = other.SecType;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.ViewGroup1.Length != 0) {
        ViewGroup1 = other.ViewGroup1;
      }
      if (other.ViewGroup2.Length != 0) {
        ViewGroup2 = other.ViewGroup2;
      }
      if (other.ViewGroup3.Length != 0) {
        ViewGroup3 = other.ViewGroup3;
      }
      if (other.RiskClass.Length != 0) {
        RiskClass = other.RiskClass;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IndNum != 0) {
        IndNum = other.IndNum;
      }
      if (other.SubNum != 0) {
        SubNum = other.SubNum;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.NbrNum != 0) {
        NbrNum = other.NbrNum;
      }
      if (other.Edays != 0) {
        Edays = other.Edays;
      }
      if (other.ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        ExpCode = other.ExpCode;
      }
      if (other.SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        SkewCode = other.SkewCode;
      }
      if (other.WidthCode != global::Spiderrock.Protobuf.WidthCode.Unspecified) {
        WidthCode = other.WidthCode;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.UPrcRatio != 0F) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.MinTickSize != 0F) {
        MinTickSize = other.MinTickSize;
      }
      if (other.RoutingCode.Length != 0) {
        RoutingCode = other.RoutingCode;
      }
      if (other.OrigExecID.Length != 0) {
        OrigExecID = other.OrigExecID;
      }
      if (other.LastExecID.Length != 0) {
        LastExecID = other.LastExecID;
      }
      if (other.transactDttm_ != null) {
        if (transactDttm_ == null) {
          TransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TransactDttm.MergeFrom(other.TransactDttm);
      }
      if (other.ExecStatus != global::Spiderrock.Protobuf.ExecStatus.Unspecified) {
        ExecStatus = other.ExecStatus;
      }
      if (other.RemoteText.Length != 0) {
        RemoteText = other.RemoteText;
      }
      if (other.OrderLimitType != global::Spiderrock.Protobuf.SpdrLimitType.Unspecified) {
        OrderLimitType = other.OrderLimitType;
      }
      if (other.OrderLimitClass != global::Spiderrock.Protobuf.SpdrLimitClass.Unspecified) {
        OrderLimitClass = other.OrderLimitClass;
      }
      if (other.ParentShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ParentShape = other.ParentShape;
      }
      if (other.ParentOrderHandling != global::Spiderrock.Protobuf.ParentOrderHandling.Unspecified) {
        ParentOrderHandling = other.ParentOrderHandling;
      }
      if (other.ParentBalanceHandling != global::Spiderrock.Protobuf.ParentBalanceHandling.Unspecified) {
        ParentBalanceHandling = other.ParentBalanceHandling;
      }
      if (other.ParentOrderSize != 0) {
        ParentOrderSize = other.ParentOrderSize;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Origin.Length != 0) {
        Origin = other.Origin;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.ClearingFirm.Length != 0) {
        ClearingFirm = other.ClearingFirm;
      }
      if (other.ClearingAccnt.Length != 0) {
        ClearingAccnt = other.ClearingAccnt;
      }
      if (other.LastCapacity != global::Spiderrock.Protobuf.OrderCapacity.Unspecified) {
        LastCapacity = other.LastCapacity;
      }
      if (other.ExecRole != global::Spiderrock.Protobuf.ExecRole.Unspecified) {
        ExecRole = other.ExecRole;
      }
      if (other.ExecBrkrCode.Length != 0) {
        ExecBrkrCode = other.ExecBrkrCode;
      }
      if (other.ExecBrkrAccnt.Length != 0) {
        ExecBrkrAccnt = other.ExecBrkrAccnt;
      }
      if (other.ExecBrkrClFirm.Length != 0) {
        ExecBrkrClFirm = other.ExecBrkrClFirm;
      }
      if (other.ExecBrkrUserName.Length != 0) {
        ExecBrkrUserName = other.ExecBrkrUserName;
      }
      if (other.ClearingFlipType != global::Spiderrock.Protobuf.FlipType.Unspecified) {
        ClearingFlipType = other.ClearingFlipType;
      }
      if (other.ClearingFlipFirm.Length != 0) {
        ClearingFlipFirm = other.ClearingFlipFirm;
      }
      if (other.ClearingFlipAccnt.Length != 0) {
        ClearingFlipAccnt = other.ClearingFlipAccnt;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.FillBrkrRate != 0F) {
        FillBrkrRate = other.FillBrkrRate;
      }
      if (other.FillRoutingRate != 0F) {
        FillRoutingRate = other.FillRoutingRate;
      }
      if (other.BillingSecType != global::Spiderrock.Protobuf.BillingSecType.Unspecified) {
        BillingSecType = other.BillingSecType;
      }
      if (other.BillingCategory != global::Spiderrock.Protobuf.BillingCategory.Unspecified) {
        BillingCategory = other.BillingCategory;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.Side != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        Side = other.Side;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.PriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.SsaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SsaleFlag = other.SsaleFlag;
      }
      if (other.SpdrSSaleFlag != global::Spiderrock.Protobuf.ShortSaleFlag.Unspecified) {
        SpdrSSaleFlag = other.SpdrSSaleFlag;
      }
      if (other.PositionType != global::Spiderrock.Protobuf.PositionType.Unspecified) {
        PositionType = other.PositionType;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.orderDttm_ != null) {
        if (orderDttm_ == null) {
          OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OrderDttm.MergeFrom(other.OrderDttm);
      }
      if (other.OrderUBid != 0D) {
        OrderUBid = other.OrderUBid;
      }
      if (other.OrderUAsk != 0D) {
        OrderUAsk = other.OrderUAsk;
      }
      if (other.OrderBid != 0D) {
        OrderBid = other.OrderBid;
      }
      if (other.OrderAsk != 0D) {
        OrderAsk = other.OrderAsk;
      }
      if (other.OrderSurfPrc != 0F) {
        OrderSurfPrc = other.OrderSurfPrc;
      }
      if (other.OrderSurfVol != 0F) {
        OrderSurfVol = other.OrderSurfVol;
      }
      if (other.OrderLimitVol != 0F) {
        OrderLimitVol = other.OrderLimitVol;
      }
      if (other.OrderLimitPrc != 0D) {
        OrderLimitPrc = other.OrderLimitPrc;
      }
      if (other.OrderLimitRefUPrc != 0D) {
        OrderLimitRefUPrc = other.OrderLimitRefUPrc;
      }
      if (other.ChildShape != global::Spiderrock.Protobuf.SpdrOrderShape.Unspecified) {
        ChildShape = other.ChildShape;
      }
      if (other.ChildSize != 0) {
        ChildSize = other.ChildSize;
      }
      if (other.ChildPrice != 0D) {
        ChildPrice = other.ChildPrice;
      }
      if (other.ChildExch.Length != 0) {
        ChildExch = other.ChildExch;
      }
      if (other.ChildExDest.Length != 0) {
        ChildExDest = other.ChildExDest;
      }
      if (other.childDttm_ != null) {
        if (childDttm_ == null) {
          ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ChildDttm.MergeFrom(other.ChildDttm);
      }
      if (other.ChildUBid != 0D) {
        ChildUBid = other.ChildUBid;
      }
      if (other.ChildUAsk != 0D) {
        ChildUAsk = other.ChildUAsk;
      }
      if (other.ChildBid != 0D) {
        ChildBid = other.ChildBid;
      }
      if (other.ChildAsk != 0D) {
        ChildAsk = other.ChildAsk;
      }
      if (other.ChildSurfPrc != 0F) {
        ChildSurfPrc = other.ChildSurfPrc;
      }
      if (other.ChildVol != 0F) {
        ChildVol = other.ChildVol;
      }
      if (other.ChildProb != 0F) {
        ChildProb = other.ChildProb;
      }
      if (other.ChildLimitPrc != 0D) {
        ChildLimitPrc = other.ChildLimitPrc;
      }
      if (other.ChildLimitRefUPrc != 0D) {
        ChildLimitRefUPrc = other.ChildLimitRefUPrc;
      }
      if (other.ChildLimitPnl != 0F) {
        ChildLimitPnl = other.ChildLimitPnl;
      }
      if (other.ChildAlgoHandler != global::Spiderrock.Protobuf.ChildHandler.Unspecified) {
        ChildAlgoHandler = other.ChildAlgoHandler;
      }
      if (other.ChildOrderHandling.Length != 0) {
        ChildOrderHandling = other.ChildOrderHandling;
      }
      if (other.ChildCreateReason != global::Spiderrock.Protobuf.ChildCreateReason.Unspecified) {
        ChildCreateReason = other.ChildCreateReason;
      }
      if (other.ChildCancelReason != global::Spiderrock.Protobuf.ChildCancelReason.Unspecified) {
        ChildCancelReason = other.ChildCancelReason;
      }
      if (other.ChildMktStance != global::Spiderrock.Protobuf.MktStance.Unspecified) {
        ChildMktStance = other.ChildMktStance;
      }
      if (other.ChildCxlAttempted != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        ChildCxlAttempted = other.ChildCxlAttempted;
      }
      if (other.ChildCxlFillLatency != 0F) {
        ChildCxlFillLatency = other.ChildCxlFillLatency;
      }
      if (other.FillExch.Length != 0) {
        FillExch = other.FillExch;
      }
      if (other.FillPrice != 0D) {
        FillPrice = other.FillPrice;
      }
      if (other.FillTs != 0D) {
        FillTs = other.FillTs;
      }
      if (other.fillDttm_ != null) {
        if (fillDttm_ == null) {
          FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FillDttm.MergeFrom(other.FillDttm);
      }
      if (other.FillSize != 0) {
        FillSize = other.FillSize;
      }
      if (other.EffFillSize != 0) {
        EffFillSize = other.EffFillSize;
      }
      if (other.FillVol != 0F) {
        FillVol = other.FillVol;
      }
      if (other.FillProb != 0F) {
        FillProb = other.FillProb;
      }
      if (other.FillLimitPrc != 0D) {
        FillLimitPrc = other.FillLimitPrc;
      }
      if (other.FillLimitRefUPrc != 0D) {
        FillLimitRefUPrc = other.FillLimitRefUPrc;
      }
      if (other.FillLimitPnl != 0F) {
        FillLimitPnl = other.FillLimitPnl;
      }
      if (other.FillDe != 0F) {
        FillDe = other.FillDe;
      }
      if (other.FillVe != 0F) {
        FillVe = other.FillVe;
      }
      if (other.FillTh != 0F) {
        FillTh = other.FillTh;
      }
      if (other.FillUPrc != 0D) {
        FillUPrc = other.FillUPrc;
      }
      if (other.FillBeta != 0F) {
        FillBeta = other.FillBeta;
      }
      if (other.FillTv != 0F) {
        FillTv = other.FillTv;
      }
      if (other.FillTp != 0F) {
        FillTp = other.FillTp;
      }
      if (other.FillUBid != 0D) {
        FillUBid = other.FillUBid;
      }
      if (other.FillUAsk != 0D) {
        FillUAsk = other.FillUAsk;
      }
      if (other.FillBid != 0D) {
        FillBid = other.FillBid;
      }
      if (other.FillAsk != 0D) {
        FillAsk = other.FillAsk;
      }
      if (other.FillSurfPrc != 0F) {
        FillSurfPrc = other.FillSurfPrc;
      }
      if (other.FillPostUMark1M != 0D) {
        FillPostUMark1M = other.FillPostUMark1M;
      }
      if (other.FillPostUMark10M != 0D) {
        FillPostUMark10M = other.FillPostUMark10M;
      }
      if (other.FillPostMark1M != 0D) {
        FillPostMark1M = other.FillPostMark1M;
      }
      if (other.FillPostMark10M != 0D) {
        FillPostMark10M = other.FillPostMark10M;
      }
      if (other.MarginUDnVDn != 0F) {
        MarginUDnVDn = other.MarginUDnVDn;
      }
      if (other.MarginUDnVUp != 0F) {
        MarginUDnVUp = other.MarginUDnVUp;
      }
      if (other.MarginUUpVDn != 0F) {
        MarginUUpVDn = other.MarginUUpVDn;
      }
      if (other.MarginUUpVUp != 0F) {
        MarginUUpVUp = other.MarginUUpVUp;
      }
      if (other.RiskCode != global::Spiderrock.Protobuf.RiskCode.Unspecified) {
        RiskCode = other.RiskCode;
      }
      if (other.ExchLiquidityTag.Length != 0) {
        ExchLiquidityTag = other.ExchLiquidityTag;
      }
      if (other.SpdrLiquidityTag.Length != 0) {
        SpdrLiquidityTag = other.SpdrLiquidityTag;
      }
      if (other.FillExchDetail.Length != 0) {
        FillExchDetail = other.FillExchDetail;
      }
      if (other.NotionalValue != 0F) {
        NotionalValue = other.NotionalValue;
      }
      if (other.MarketValue != 0F) {
        MarketValue = other.MarketValue;
      }
      if (other.OrderMktWidth != 0F) {
        OrderMktWidth = other.OrderMktWidth;
      }
      if (other.ChildMktWidth != 0F) {
        ChildMktWidth = other.ChildMktWidth;
      }
      if (other.FillMktWidth != 0F) {
        FillMktWidth = other.FillMktWidth;
      }
      if (other.ParentOrderAge != 0F) {
        ParentOrderAge = other.ParentOrderAge;
      }
      if (other.ParentAgeCode != global::Spiderrock.Protobuf.ParentAge.Unspecified) {
        ParentAgeCode = other.ParentAgeCode;
      }
      if (other.TrdDelta != 0F) {
        TrdDelta = other.TrdDelta;
      }
      if (other.TrdDDelta != 0F) {
        TrdDDelta = other.TrdDDelta;
      }
      if (other.TrdGamma != 0F) {
        TrdGamma = other.TrdGamma;
      }
      if (other.TrdVega != 0F) {
        TrdVega = other.TrdVega;
      }
      if (other.TrdWtVega != 0F) {
        TrdWtVega = other.TrdWtVega;
      }
      if (other.TrdTheta != 0F) {
        TrdTheta = other.TrdTheta;
      }
      if (other.TrdPrem != 0F) {
        TrdPrem = other.TrdPrem;
      }
      if (other.TrdBeta != 0F) {
        TrdBeta = other.TrdBeta;
      }
      if (other.TrdDBeta != 0F) {
        TrdDBeta = other.TrdDBeta;
      }
      if (other.SurfEdge != 0F) {
        SurfEdge = other.SurfEdge;
      }
      if (other.SurfEdgeUnit != 0F) {
        SurfEdgeUnit = other.SurfEdgeUnit;
      }
      if (other.TheoEdge != 0F) {
        TheoEdge = other.TheoEdge;
      }
      if (other.TheoEdgeUnit != 0F) {
        TheoEdgeUnit = other.TheoEdgeUnit;
      }
      if (other.ExchFee != 0F) {
        ExchFee = other.ExchFee;
      }
      if (other.HalfWidthPnl != 0F) {
        HalfWidthPnl = other.HalfWidthPnl;
      }
      if (other.ClArrivePnl != 0F) {
        ClArrivePnl = other.ClArrivePnl;
      }
      if (other.ArrivePnl != 0F) {
        ArrivePnl = other.ArrivePnl;
      }
      if (other.ArriveDnPnl != 0F) {
        ArriveDnPnl = other.ArriveDnPnl;
      }
      if (other.UDriftArrivePnl != 0F) {
        UDriftArrivePnl = other.UDriftArrivePnl;
      }
      if (other.DayDnPnl != 0F) {
        DayDnPnl = other.DayDnPnl;
      }
      if (other.DayM1Pnl != 0F) {
        DayM1Pnl = other.DayM1Pnl;
      }
      if (other.DayM10Pnl != 0F) {
        DayM10Pnl = other.DayM10Pnl;
      }
      if (other.UDriftDayPnl != 0F) {
        UDriftDayPnl = other.UDriftDayPnl;
      }
      if (other.UDriftM1Pnl != 0F) {
        UDriftM1Pnl = other.UDriftM1Pnl;
      }
      if (other.UDriftM10Pnl != 0F) {
        UDriftM10Pnl = other.UDriftM10Pnl;
      }
      if (other.DayPnl != 0F) {
        DayPnl = other.DayPnl;
      }
      if (other.LiveMark != 0D) {
        LiveMark = other.LiveMark;
      }
      if (other.LiveUPrc != 0D) {
        LiveUPrc = other.LiveUPrc;
      }
      if (other.PendMark != 0D) {
        PendMark = other.PendMark;
      }
      if (other.PendUPrc != 0D) {
        PendUPrc = other.PendUPrc;
      }
      if (other.TrdMarkError.Length != 0) {
        TrdMarkError = other.TrdMarkError;
      }
      if (other.DayMarkError.Length != 0) {
        DayMarkError = other.DayMarkError;
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            Version = input.ReadInt32();
            break;
          }
          case 874: {
            ClOrdId = input.ReadString();
            break;
          }
          case 896: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 920: {
            PackageId = input.ReadInt64();
            break;
          }
          case 946: {
            AltOrderId = input.ReadString();
            break;
          }
          case 970: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 992: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1016: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1042: {
            Accnt = input.ReadString();
            break;
          }
          case 1066: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1090: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 1114: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 1162: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1184: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1234: {
            ViewGroup1 = input.ReadString();
            break;
          }
          case 1258: {
            ViewGroup2 = input.ReadString();
            break;
          }
          case 1282: {
            ViewGroup3 = input.ReadString();
            break;
          }
          case 1306: {
            RiskClass = input.ReadString();
            break;
          }
          case 1328: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1354: {
            Sector = input.ReadString();
            break;
          }
          case 1376: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1400: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1424: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1448: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1472: {
            Edays = input.ReadInt32();
            break;
          }
          case 1496: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1520: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1544: {
            WidthCode = (global::Spiderrock.Protobuf.WidthCode) input.ReadEnum();
            break;
          }
          case 1568: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1592: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1621: {
            Years = input.ReadFloat();
            break;
          }
          case 1640: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1664: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1693: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1717: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1736: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1765: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 1789: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 1810: {
            RoutingCode = input.ReadString();
            break;
          }
          case 1834: {
            OrigExecID = input.ReadString();
            break;
          }
          case 1858: {
            LastExecID = input.ReadString();
            break;
          }
          case 1882: {
            if (transactDttm_ == null) {
              TransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TransactDttm);
            break;
          }
          case 1904: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 1930: {
            RemoteText = input.ReadString();
            break;
          }
          case 1952: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1976: {
            OrderLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2000: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 2024: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 2048: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 2072: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 2098: {
            Method = input.ReadString();
            break;
          }
          case 2122: {
            Strategy = input.ReadString();
            break;
          }
          case 2146: {
            UserName = input.ReadString();
            break;
          }
          case 2170: {
            Origin = input.ReadString();
            break;
          }
          case 2194: {
            Source = input.ReadString();
            break;
          }
          case 2218: {
            Server = input.ReadString();
            break;
          }
          case 2242: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 2266: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 2288: {
            LastCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 2312: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 2362: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 2386: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 2410: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 2432: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 2458: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 2482: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 2504: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 2533: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 2557: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 2576: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 2600: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 2624: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 2648: {
            Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2672: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 2696: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2720: {
            SpdrSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2744: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2768: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2794: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 2817: {
            OrderUBid = input.ReadDouble();
            break;
          }
          case 2841: {
            OrderUAsk = input.ReadDouble();
            break;
          }
          case 2865: {
            OrderBid = input.ReadDouble();
            break;
          }
          case 2889: {
            OrderAsk = input.ReadDouble();
            break;
          }
          case 2917: {
            OrderSurfPrc = input.ReadFloat();
            break;
          }
          case 2941: {
            OrderSurfVol = input.ReadFloat();
            break;
          }
          case 2965: {
            OrderLimitVol = input.ReadFloat();
            break;
          }
          case 2985: {
            OrderLimitPrc = input.ReadDouble();
            break;
          }
          case 3009: {
            OrderLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3032: {
            ChildShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 3056: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 3081: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 3106: {
            ChildExch = input.ReadString();
            break;
          }
          case 3154: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 3177: {
            ChildUBid = input.ReadDouble();
            break;
          }
          case 3201: {
            ChildUAsk = input.ReadDouble();
            break;
          }
          case 3225: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 3249: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 3277: {
            ChildSurfPrc = input.ReadFloat();
            break;
          }
          case 3301: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 3325: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 3345: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 3369: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3397: {
            ChildLimitPnl = input.ReadFloat();
            break;
          }
          case 3416: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 3442: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 3464: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 3488: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 3512: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 3536: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3565: {
            ChildCxlFillLatency = input.ReadFloat();
            break;
          }
          case 3586: {
            FillExch = input.ReadString();
            break;
          }
          case 3609: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 3633: {
            FillTs = input.ReadDouble();
            break;
          }
          case 3658: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 3680: {
            FillSize = input.ReadInt32();
            break;
          }
          case 3704: {
            EffFillSize = input.ReadInt32();
            break;
          }
          case 3733: {
            FillVol = input.ReadFloat();
            break;
          }
          case 3757: {
            FillProb = input.ReadFloat();
            break;
          }
          case 3777: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 3801: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3829: {
            FillLimitPnl = input.ReadFloat();
            break;
          }
          case 3853: {
            FillDe = input.ReadFloat();
            break;
          }
          case 3877: {
            FillVe = input.ReadFloat();
            break;
          }
          case 3901: {
            FillTh = input.ReadFloat();
            break;
          }
          case 3945: {
            FillUPrc = input.ReadDouble();
            break;
          }
          case 3973: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 4261: {
            FillTv = input.ReadFloat();
            break;
          }
          case 4285: {
            FillTp = input.ReadFloat();
            break;
          }
          case 4305: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 4329: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 4353: {
            FillBid = input.ReadDouble();
            break;
          }
          case 4377: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 4405: {
            FillSurfPrc = input.ReadFloat();
            break;
          }
          case 4425: {
            FillPostUMark1M = input.ReadDouble();
            break;
          }
          case 4449: {
            FillPostUMark10M = input.ReadDouble();
            break;
          }
          case 4473: {
            FillPostMark1M = input.ReadDouble();
            break;
          }
          case 4497: {
            FillPostMark10M = input.ReadDouble();
            break;
          }
          case 4520: {
            RiskCode = (global::Spiderrock.Protobuf.RiskCode) input.ReadEnum();
            break;
          }
          case 4546: {
            ExchLiquidityTag = input.ReadString();
            break;
          }
          case 4570: {
            SpdrLiquidityTag = input.ReadString();
            break;
          }
          case 4594: {
            FillExchDetail = input.ReadString();
            break;
          }
          case 4621: {
            NotionalValue = input.ReadFloat();
            break;
          }
          case 4645: {
            MarketValue = input.ReadFloat();
            break;
          }
          case 4669: {
            OrderMktWidth = input.ReadFloat();
            break;
          }
          case 4693: {
            ChildMktWidth = input.ReadFloat();
            break;
          }
          case 4717: {
            FillMktWidth = input.ReadFloat();
            break;
          }
          case 4741: {
            ParentOrderAge = input.ReadFloat();
            break;
          }
          case 4760: {
            ParentAgeCode = (global::Spiderrock.Protobuf.ParentAge) input.ReadEnum();
            break;
          }
          case 4789: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 4813: {
            TrdDDelta = input.ReadFloat();
            break;
          }
          case 4837: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 4861: {
            TrdVega = input.ReadFloat();
            break;
          }
          case 4885: {
            TrdWtVega = input.ReadFloat();
            break;
          }
          case 4909: {
            TrdTheta = input.ReadFloat();
            break;
          }
          case 4933: {
            TrdPrem = input.ReadFloat();
            break;
          }
          case 4957: {
            TrdBeta = input.ReadFloat();
            break;
          }
          case 4981: {
            TrdDBeta = input.ReadFloat();
            break;
          }
          case 5005: {
            SurfEdge = input.ReadFloat();
            break;
          }
          case 5029: {
            SurfEdgeUnit = input.ReadFloat();
            break;
          }
          case 5053: {
            TheoEdge = input.ReadFloat();
            break;
          }
          case 5077: {
            TheoEdgeUnit = input.ReadFloat();
            break;
          }
          case 5101: {
            ExchFee = input.ReadFloat();
            break;
          }
          case 5125: {
            HalfWidthPnl = input.ReadFloat();
            break;
          }
          case 5149: {
            ClArrivePnl = input.ReadFloat();
            break;
          }
          case 5173: {
            ArrivePnl = input.ReadFloat();
            break;
          }
          case 5197: {
            ArriveDnPnl = input.ReadFloat();
            break;
          }
          case 5221: {
            UDriftArrivePnl = input.ReadFloat();
            break;
          }
          case 5245: {
            DayDnPnl = input.ReadFloat();
            break;
          }
          case 5269: {
            DayM1Pnl = input.ReadFloat();
            break;
          }
          case 5293: {
            DayM10Pnl = input.ReadFloat();
            break;
          }
          case 5317: {
            UDriftDayPnl = input.ReadFloat();
            break;
          }
          case 5341: {
            UDriftM1Pnl = input.ReadFloat();
            break;
          }
          case 5365: {
            UDriftM10Pnl = input.ReadFloat();
            break;
          }
          case 5389: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 5409: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 5433: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 5457: {
            PendMark = input.ReadDouble();
            break;
          }
          case 5481: {
            PendUPrc = input.ReadDouble();
            break;
          }
          case 5506: {
            TrdMarkError = input.ReadString();
            break;
          }
          case 5530: {
            DayMarkError = input.ReadString();
            break;
          }
          case 5554: {
            UserData1 = input.ReadString();
            break;
          }
          case 5578: {
            UserData2 = input.ReadString();
            break;
          }
          case 5602: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 5613: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 5621: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 5629: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 5637: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 5642: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 5650: {
            ChildExDest = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.TradeCubeDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
            break;
          }
          case 824: {
            SysEnvironment = (global::Spiderrock.Protobuf.SysEnvironment) input.ReadEnum();
            break;
          }
          case 848: {
            Version = input.ReadInt32();
            break;
          }
          case 874: {
            ClOrdId = input.ReadString();
            break;
          }
          case 896: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 920: {
            PackageId = input.ReadInt64();
            break;
          }
          case 946: {
            AltOrderId = input.ReadString();
            break;
          }
          case 970: {
            SrcRoutingCode = input.ReadString();
            break;
          }
          case 992: {
            SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
            break;
          }
          case 1016: {
            GroupingCode = input.ReadInt64();
            break;
          }
          case 1042: {
            Accnt = input.ReadString();
            break;
          }
          case 1066: {
            ClientFirm = input.ReadString();
            break;
          }
          case 1090: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 1114: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 1162: {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            input.ReadMessage(SecKey);
            break;
          }
          case 1184: {
            SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1234: {
            ViewGroup1 = input.ReadString();
            break;
          }
          case 1258: {
            ViewGroup2 = input.ReadString();
            break;
          }
          case 1282: {
            ViewGroup3 = input.ReadString();
            break;
          }
          case 1306: {
            RiskClass = input.ReadString();
            break;
          }
          case 1328: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1354: {
            Sector = input.ReadString();
            break;
          }
          case 1376: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1400: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1424: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1448: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1472: {
            Edays = input.ReadInt32();
            break;
          }
          case 1496: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1520: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1544: {
            WidthCode = (global::Spiderrock.Protobuf.WidthCode) input.ReadEnum();
            break;
          }
          case 1568: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1592: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1621: {
            Years = input.ReadFloat();
            break;
          }
          case 1640: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 1664: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 1693: {
            TickValue = input.ReadFloat();
            break;
          }
          case 1717: {
            PointValue = input.ReadFloat();
            break;
          }
          case 1736: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1765: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 1789: {
            MinTickSize = input.ReadFloat();
            break;
          }
          case 1810: {
            RoutingCode = input.ReadString();
            break;
          }
          case 1834: {
            OrigExecID = input.ReadString();
            break;
          }
          case 1858: {
            LastExecID = input.ReadString();
            break;
          }
          case 1882: {
            if (transactDttm_ == null) {
              TransactDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TransactDttm);
            break;
          }
          case 1904: {
            ExecStatus = (global::Spiderrock.Protobuf.ExecStatus) input.ReadEnum();
            break;
          }
          case 1930: {
            RemoteText = input.ReadString();
            break;
          }
          case 1952: {
            OrderLimitType = (global::Spiderrock.Protobuf.SpdrLimitType) input.ReadEnum();
            break;
          }
          case 1976: {
            OrderLimitClass = (global::Spiderrock.Protobuf.SpdrLimitClass) input.ReadEnum();
            break;
          }
          case 2000: {
            ParentShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 2024: {
            ParentOrderHandling = (global::Spiderrock.Protobuf.ParentOrderHandling) input.ReadEnum();
            break;
          }
          case 2048: {
            ParentBalanceHandling = (global::Spiderrock.Protobuf.ParentBalanceHandling) input.ReadEnum();
            break;
          }
          case 2072: {
            ParentOrderSize = input.ReadInt32();
            break;
          }
          case 2098: {
            Method = input.ReadString();
            break;
          }
          case 2122: {
            Strategy = input.ReadString();
            break;
          }
          case 2146: {
            UserName = input.ReadString();
            break;
          }
          case 2170: {
            Origin = input.ReadString();
            break;
          }
          case 2194: {
            Source = input.ReadString();
            break;
          }
          case 2218: {
            Server = input.ReadString();
            break;
          }
          case 2242: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 2266: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 2288: {
            LastCapacity = (global::Spiderrock.Protobuf.OrderCapacity) input.ReadEnum();
            break;
          }
          case 2312: {
            ExecRole = (global::Spiderrock.Protobuf.ExecRole) input.ReadEnum();
            break;
          }
          case 2362: {
            ExecBrkrAccnt = input.ReadString();
            break;
          }
          case 2386: {
            ExecBrkrClFirm = input.ReadString();
            break;
          }
          case 2410: {
            ExecBrkrUserName = input.ReadString();
            break;
          }
          case 2432: {
            ClearingFlipType = (global::Spiderrock.Protobuf.FlipType) input.ReadEnum();
            break;
          }
          case 2458: {
            ClearingFlipFirm = input.ReadString();
            break;
          }
          case 2482: {
            ClearingFlipAccnt = input.ReadString();
            break;
          }
          case 2504: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 2533: {
            FillBrkrRate = input.ReadFloat();
            break;
          }
          case 2557: {
            FillRoutingRate = input.ReadFloat();
            break;
          }
          case 2576: {
            BillingSecType = (global::Spiderrock.Protobuf.BillingSecType) input.ReadEnum();
            break;
          }
          case 2600: {
            BillingCategory = (global::Spiderrock.Protobuf.BillingCategory) input.ReadEnum();
            break;
          }
          case 2624: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 2648: {
            Side = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 2672: {
            PriceType = (global::Spiderrock.Protobuf.PriceType) input.ReadEnum();
            break;
          }
          case 2696: {
            SsaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2720: {
            SpdrSSaleFlag = (global::Spiderrock.Protobuf.ShortSaleFlag) input.ReadEnum();
            break;
          }
          case 2744: {
            PositionType = (global::Spiderrock.Protobuf.PositionType) input.ReadEnum();
            break;
          }
          case 2768: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2794: {
            if (orderDttm_ == null) {
              OrderDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OrderDttm);
            break;
          }
          case 2817: {
            OrderUBid = input.ReadDouble();
            break;
          }
          case 2841: {
            OrderUAsk = input.ReadDouble();
            break;
          }
          case 2865: {
            OrderBid = input.ReadDouble();
            break;
          }
          case 2889: {
            OrderAsk = input.ReadDouble();
            break;
          }
          case 2917: {
            OrderSurfPrc = input.ReadFloat();
            break;
          }
          case 2941: {
            OrderSurfVol = input.ReadFloat();
            break;
          }
          case 2965: {
            OrderLimitVol = input.ReadFloat();
            break;
          }
          case 2985: {
            OrderLimitPrc = input.ReadDouble();
            break;
          }
          case 3009: {
            OrderLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3032: {
            ChildShape = (global::Spiderrock.Protobuf.SpdrOrderShape) input.ReadEnum();
            break;
          }
          case 3056: {
            ChildSize = input.ReadInt32();
            break;
          }
          case 3081: {
            ChildPrice = input.ReadDouble();
            break;
          }
          case 3106: {
            ChildExch = input.ReadString();
            break;
          }
          case 3154: {
            if (childDttm_ == null) {
              ChildDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChildDttm);
            break;
          }
          case 3177: {
            ChildUBid = input.ReadDouble();
            break;
          }
          case 3201: {
            ChildUAsk = input.ReadDouble();
            break;
          }
          case 3225: {
            ChildBid = input.ReadDouble();
            break;
          }
          case 3249: {
            ChildAsk = input.ReadDouble();
            break;
          }
          case 3277: {
            ChildSurfPrc = input.ReadFloat();
            break;
          }
          case 3301: {
            ChildVol = input.ReadFloat();
            break;
          }
          case 3325: {
            ChildProb = input.ReadFloat();
            break;
          }
          case 3345: {
            ChildLimitPrc = input.ReadDouble();
            break;
          }
          case 3369: {
            ChildLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3397: {
            ChildLimitPnl = input.ReadFloat();
            break;
          }
          case 3416: {
            ChildAlgoHandler = (global::Spiderrock.Protobuf.ChildHandler) input.ReadEnum();
            break;
          }
          case 3442: {
            ChildOrderHandling = input.ReadString();
            break;
          }
          case 3464: {
            ChildCreateReason = (global::Spiderrock.Protobuf.ChildCreateReason) input.ReadEnum();
            break;
          }
          case 3488: {
            ChildCancelReason = (global::Spiderrock.Protobuf.ChildCancelReason) input.ReadEnum();
            break;
          }
          case 3512: {
            ChildMktStance = (global::Spiderrock.Protobuf.MktStance) input.ReadEnum();
            break;
          }
          case 3536: {
            ChildCxlAttempted = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 3565: {
            ChildCxlFillLatency = input.ReadFloat();
            break;
          }
          case 3586: {
            FillExch = input.ReadString();
            break;
          }
          case 3609: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 3633: {
            FillTs = input.ReadDouble();
            break;
          }
          case 3658: {
            if (fillDttm_ == null) {
              FillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FillDttm);
            break;
          }
          case 3680: {
            FillSize = input.ReadInt32();
            break;
          }
          case 3704: {
            EffFillSize = input.ReadInt32();
            break;
          }
          case 3733: {
            FillVol = input.ReadFloat();
            break;
          }
          case 3757: {
            FillProb = input.ReadFloat();
            break;
          }
          case 3777: {
            FillLimitPrc = input.ReadDouble();
            break;
          }
          case 3801: {
            FillLimitRefUPrc = input.ReadDouble();
            break;
          }
          case 3829: {
            FillLimitPnl = input.ReadFloat();
            break;
          }
          case 3853: {
            FillDe = input.ReadFloat();
            break;
          }
          case 3877: {
            FillVe = input.ReadFloat();
            break;
          }
          case 3901: {
            FillTh = input.ReadFloat();
            break;
          }
          case 3945: {
            FillUPrc = input.ReadDouble();
            break;
          }
          case 3973: {
            FillBeta = input.ReadFloat();
            break;
          }
          case 4261: {
            FillTv = input.ReadFloat();
            break;
          }
          case 4285: {
            FillTp = input.ReadFloat();
            break;
          }
          case 4305: {
            FillUBid = input.ReadDouble();
            break;
          }
          case 4329: {
            FillUAsk = input.ReadDouble();
            break;
          }
          case 4353: {
            FillBid = input.ReadDouble();
            break;
          }
          case 4377: {
            FillAsk = input.ReadDouble();
            break;
          }
          case 4405: {
            FillSurfPrc = input.ReadFloat();
            break;
          }
          case 4425: {
            FillPostUMark1M = input.ReadDouble();
            break;
          }
          case 4449: {
            FillPostUMark10M = input.ReadDouble();
            break;
          }
          case 4473: {
            FillPostMark1M = input.ReadDouble();
            break;
          }
          case 4497: {
            FillPostMark10M = input.ReadDouble();
            break;
          }
          case 4520: {
            RiskCode = (global::Spiderrock.Protobuf.RiskCode) input.ReadEnum();
            break;
          }
          case 4546: {
            ExchLiquidityTag = input.ReadString();
            break;
          }
          case 4570: {
            SpdrLiquidityTag = input.ReadString();
            break;
          }
          case 4594: {
            FillExchDetail = input.ReadString();
            break;
          }
          case 4621: {
            NotionalValue = input.ReadFloat();
            break;
          }
          case 4645: {
            MarketValue = input.ReadFloat();
            break;
          }
          case 4669: {
            OrderMktWidth = input.ReadFloat();
            break;
          }
          case 4693: {
            ChildMktWidth = input.ReadFloat();
            break;
          }
          case 4717: {
            FillMktWidth = input.ReadFloat();
            break;
          }
          case 4741: {
            ParentOrderAge = input.ReadFloat();
            break;
          }
          case 4760: {
            ParentAgeCode = (global::Spiderrock.Protobuf.ParentAge) input.ReadEnum();
            break;
          }
          case 4789: {
            TrdDelta = input.ReadFloat();
            break;
          }
          case 4813: {
            TrdDDelta = input.ReadFloat();
            break;
          }
          case 4837: {
            TrdGamma = input.ReadFloat();
            break;
          }
          case 4861: {
            TrdVega = input.ReadFloat();
            break;
          }
          case 4885: {
            TrdWtVega = input.ReadFloat();
            break;
          }
          case 4909: {
            TrdTheta = input.ReadFloat();
            break;
          }
          case 4933: {
            TrdPrem = input.ReadFloat();
            break;
          }
          case 4957: {
            TrdBeta = input.ReadFloat();
            break;
          }
          case 4981: {
            TrdDBeta = input.ReadFloat();
            break;
          }
          case 5005: {
            SurfEdge = input.ReadFloat();
            break;
          }
          case 5029: {
            SurfEdgeUnit = input.ReadFloat();
            break;
          }
          case 5053: {
            TheoEdge = input.ReadFloat();
            break;
          }
          case 5077: {
            TheoEdgeUnit = input.ReadFloat();
            break;
          }
          case 5101: {
            ExchFee = input.ReadFloat();
            break;
          }
          case 5125: {
            HalfWidthPnl = input.ReadFloat();
            break;
          }
          case 5149: {
            ClArrivePnl = input.ReadFloat();
            break;
          }
          case 5173: {
            ArrivePnl = input.ReadFloat();
            break;
          }
          case 5197: {
            ArriveDnPnl = input.ReadFloat();
            break;
          }
          case 5221: {
            UDriftArrivePnl = input.ReadFloat();
            break;
          }
          case 5245: {
            DayDnPnl = input.ReadFloat();
            break;
          }
          case 5269: {
            DayM1Pnl = input.ReadFloat();
            break;
          }
          case 5293: {
            DayM10Pnl = input.ReadFloat();
            break;
          }
          case 5317: {
            UDriftDayPnl = input.ReadFloat();
            break;
          }
          case 5341: {
            UDriftM1Pnl = input.ReadFloat();
            break;
          }
          case 5365: {
            UDriftM10Pnl = input.ReadFloat();
            break;
          }
          case 5389: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 5409: {
            LiveMark = input.ReadDouble();
            break;
          }
          case 5433: {
            LiveUPrc = input.ReadDouble();
            break;
          }
          case 5457: {
            PendMark = input.ReadDouble();
            break;
          }
          case 5481: {
            PendUPrc = input.ReadDouble();
            break;
          }
          case 5506: {
            TrdMarkError = input.ReadString();
            break;
          }
          case 5530: {
            DayMarkError = input.ReadString();
            break;
          }
          case 5554: {
            UserData1 = input.ReadString();
            break;
          }
          case 5578: {
            UserData2 = input.ReadString();
            break;
          }
          case 5602: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 5613: {
            MarginUDnVDn = input.ReadFloat();
            break;
          }
          case 5621: {
            MarginUDnVUp = input.ReadFloat();
            break;
          }
          case 5629: {
            MarginUUpVDn = input.ReadFloat();
            break;
          }
          case 5637: {
            MarginUUpVUp = input.ReadFloat();
            break;
          }
          case 5642: {
            ExecBrkrCode = input.ReadString();
            break;
          }
          case 5650: {
            ChildExDest = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TradeCubeDetailV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.TradeCubeDetailV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fillNumber_ = other.fillNumber_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fill_number" field.</summary>
        public const int FillNumberFieldNumber = 10;
        private long fillNumber_;
        /// <summary>
        /// SpiderRock execution number (globally unique over trailing 10 days)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FillNumber {
          get { return fillNumber_; }
          set {
            fillNumber_ = value;
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 11;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        /// <summary>
        /// trade date
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FillNumber != other.FillNumber) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FillNumber != 0L) hash ^= FillNumber.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(TradeDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FillNumber != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(FillNumber);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(TradeDate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FillNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FillNumber);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.FillNumber != 0L) {
            FillNumber = other.FillNumber;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
              case 90: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 80: {
                FillNumber = input.ReadInt64();
                break;
              }
              case 90: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
