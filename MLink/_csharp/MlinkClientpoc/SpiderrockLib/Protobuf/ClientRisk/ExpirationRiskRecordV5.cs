// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/ExpirationRiskRecordV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/ExpirationRiskRecordV5.proto</summary>
  public static partial class ExpirationRiskRecordV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/ExpirationRiskRecordV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpirationRiskRecordV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRSaXNrL0V4cGlyYXRpb25SaXNrUmVjb3JkVjUu",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIqwOChZF",
            "eHBpcmF0aW9uUmlza1JlY29yZFY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESPgoEcGtleRgCIAEoCzIw",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJhdGlvblJpc2tSZWNvcmRWNS5Q",
            "S2V5EhEKCXZlZ2FfbG9uZxhqIAEoAhISCgp2ZWdhX3Nob3J0GG0gASgCEhMK",
            "C3dfdmVnYV9sb25nGHAgASgCEhQKDHdfdmVnYV9zaG9ydBhzIAEoAhIUCgx3",
            "dF92ZWdhX2xvbmcYdiABKAISFQoNd3RfdmVnYV9zaG9ydBh5IAEoAhISCgp0",
            "aGV0YV9sb25nGHwgASgCEhMKC3RoZXRhX3Nob3J0GH8gASgCEhEKCHJob19s",
            "b25nGIIBIAEoAhISCglyaG9fc2hvcnQYhQEgASgCEhUKDGRfZ2FtbWFfbG9u",
            "ZxiIASABKAISFgoNZF9nYW1tYV9zaG9ydBiLASABKAISFwoOZF9iZXRhX2dh",
            "X2xvbmcYjgEgASgCEhgKD2RfYmV0YV9nYV9zaG9ydBiRASABKAISEAoHaXZv",
            "bF9sbhiUASABKAISEAoHaXZvbF9zaBiXASABKAISEQoId3RfdmVfZGQYmgEg",
            "ASgCEhEKCHd0X3ZlX2RuGJ0BIAEoAhIRCgh3dF92ZV9hdBigASABKAISEQoI",
            "d3RfdmVfdXAYowEgASgCEhEKCHd0X3ZlX2R1GKYBIAEoAhITCgphYnNfY2xy",
            "X2NuGKkBIAEoBRITCgphYnNfY3VyX2NuGKwBIAEoBRIUCgtwcmVtX292X3Bh",
            "chivASABKAISEwoKb3BfcG5sX3ZvbBiyASABKAISEwoKb3BfcG5sX21pZBi1",
            "ASABKAISEwoKb3BfcG5sX2Nschi4ASABKAISFAoLb3BfZGF5X3ZlZ2EYuwEg",
            "ASgCEhUKDG9wX2RheV93VmVnYRi+ASABKAISFQoMb3BfZGF5X3RWZWdhGMEB",
            "IAEoAhIXCg5vcF9kYXlfd3RfdmVnYRjEASABKAISFQoMb3BfZGF5X3RoZXRh",
            "GMcBIAEoAhIXCg5vcF9lZGdlX29wZW5lZBjKASABKAISFwoOb3BfZWRnZV9j",
            "bG9zZWQYzQEgASgCEg8KBnBubF9kbhjQASABKAISDwoGcG5sX2RlGNMBIAEo",
            "AhIPCgZwbmxfc2wY1gEgASgCEg8KBnBubF9nYRjZASABKAISDwoGcG5sX3Ro",
            "GNwBIAEoAhIPCgZwbmxfdmUY3wEgASgCEg8KBnBubF92bxjiASABKAISDwoG",
            "cG5sX3ZhGOUBIAEoAhIRCghwbmxfZERpdhjoASABKAISEQoIcG5sX3NEaXYY",
            "6wEgASgCEhEKCHBubF9yYXRlGO4BIAEoAhIQCgdwbmxfZXJyGPEBIAEoAhIP",
            "CgZwbmxfdGUY9AEgASgCEg8KBnBubF9sbhj3ASABKAISDwoGcG5sX3NoGPoB",
            "IAEoAhIPCgZ0X2VkZ2UY/QEgASgCEhQKC3RfZWRnZV9tdWx0GIACIAEoAhIS",
            "Cgl0X2VkZ2VfcHIYgwIgASgCEhcKDnRfZWRnZV9tdWx0X3ByGIYCIAEoAhIW",
            "Cg1wb3NfdEVkZ2VfcG5sGIkCIAEoAhIWCg1uZWdfdEVkZ2VfcG5sGIwCIAEo",
            "AhIWCg1iYWRfdEVkZ2VfcG5sGI8CIAEoAhIRCgh2YV9yc3U5MBiSAiABKAIS",
            "EQoIdmFfcnNkOTAYlQIgASgCEhEKCHZhX3JzdTUwGJgCIAEoAhIRCgh2YV9y",
            "c2Q1MBibAiABKAISEQoIdmFfcnN1MTUYngIgASgCEhEKCHZhX3JzZDE1GKEC",
            "IAEoAhIRCgh2YV9yc3UxMBikAiABKAISEQoIdmFfcnNkMTAYpwIgASgCEhEK",
            "CHZhX3JzdTA1GKoCIAEoAhIRCgh2YV9yc2QwNRitAiABKAISEQoIdmFfcnN1",
            "MWUYsAIgASgCEhEKCHZhX3JzZDFlGLMCIAEoAhIRCgh2YV9yc3UyZRi2AiAB",
            "KAISEQoIdmFfcnNkMmUYuQIgASgCEhEKCHZhX3JlYXJuGLwCIAEoAhIRCgh2",
            "YV9yY2FzaBi/AiABKAISMgoNbGFzdF9hY3Rpdml0eRjCAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEi4KCXRpbWVzdGFtcBjFAiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGo0BCgRQS2V5Eg0KBWFjY250GAog",
            "ASgJEi8KCGN1cnJlbmN5GAsgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5D",
            "dXJyZW5jeRIwCgpleHBpcmF0aW9uGAwgASgLMhwuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5EYXRlS2V5EhMKC2NsaWVudF9maXJtGA0gASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ExpirationRiskRecordV5), global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Parser, new[]{ "Meta", "Pkey", "VegaLong", "VegaShort", "WVegaLong", "WVegaShort", "WtVegaLong", "WtVegaShort", "ThetaLong", "ThetaShort", "RhoLong", "RhoShort", "DGammaLong", "DGammaShort", "DBetaGaLong", "DBetaGaShort", "IvolLn", "IvolSh", "WtVeDd", "WtVeDn", "WtVeAt", "WtVeUp", "WtVeDu", "AbsClrCn", "AbsCurCn", "PremOvPar", "OpPnlVol", "OpPnlMid", "OpPnlClr", "OpDayVega", "OpDayWVega", "OpDayTVega", "OpDayWtVega", "OpDayTheta", "OpEdgeOpened", "OpEdgeClosed", "PnlDn", "PnlDe", "PnlSl", "PnlGa", "PnlTh", "PnlVe", "PnlVo", "PnlVa", "PnlDDiv", "PnlSDiv", "PnlRate", "PnlErr", "PnlTe", "PnlLn", "PnlSh", "TEdge", "TEdgeMult", "TEdgePr", "TEdgeMultPr", "PosTEdgePnl", "NegTEdgePnl", "BadTEdgePnl", "VaRsu90", "VaRsd90", "VaRsu50", "VaRsd50", "VaRsu15", "VaRsd15", "VaRsu10", "VaRsd10", "VaRsu05", "VaRsd05", "VaRsu1E", "VaRsd1E", "VaRsu2E", "VaRsd2E", "VaRearn", "VaRcash", "LastActivity", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey), global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey.Parser, new[]{ "Accnt", "Currency", "Expiration", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///ExpirationRiskRecords contain account level position and risk summary detail. These records are published by AggRiskServers throughout the day approximately once per minute.
  /// </summary>
  public sealed partial class ExpirationRiskRecordV5 : pb::IMessage<ExpirationRiskRecordV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExpirationRiskRecordV5> _parser = new pb::MessageParser<ExpirationRiskRecordV5>(() => new ExpirationRiskRecordV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExpirationRiskRecordV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.ExpirationRiskRecordV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExpirationRiskRecordV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExpirationRiskRecordV5(ExpirationRiskRecordV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      vegaLong_ = other.vegaLong_;
      vegaShort_ = other.vegaShort_;
      wVegaLong_ = other.wVegaLong_;
      wVegaShort_ = other.wVegaShort_;
      wtVegaLong_ = other.wtVegaLong_;
      wtVegaShort_ = other.wtVegaShort_;
      thetaLong_ = other.thetaLong_;
      thetaShort_ = other.thetaShort_;
      rhoLong_ = other.rhoLong_;
      rhoShort_ = other.rhoShort_;
      dGammaLong_ = other.dGammaLong_;
      dGammaShort_ = other.dGammaShort_;
      dBetaGaLong_ = other.dBetaGaLong_;
      dBetaGaShort_ = other.dBetaGaShort_;
      ivolLn_ = other.ivolLn_;
      ivolSh_ = other.ivolSh_;
      wtVeDd_ = other.wtVeDd_;
      wtVeDn_ = other.wtVeDn_;
      wtVeAt_ = other.wtVeAt_;
      wtVeUp_ = other.wtVeUp_;
      wtVeDu_ = other.wtVeDu_;
      absClrCn_ = other.absClrCn_;
      absCurCn_ = other.absCurCn_;
      premOvPar_ = other.premOvPar_;
      opPnlVol_ = other.opPnlVol_;
      opPnlMid_ = other.opPnlMid_;
      opPnlClr_ = other.opPnlClr_;
      opDayVega_ = other.opDayVega_;
      opDayWVega_ = other.opDayWVega_;
      opDayTVega_ = other.opDayTVega_;
      opDayWtVega_ = other.opDayWtVega_;
      opDayTheta_ = other.opDayTheta_;
      opEdgeOpened_ = other.opEdgeOpened_;
      opEdgeClosed_ = other.opEdgeClosed_;
      pnlDn_ = other.pnlDn_;
      pnlDe_ = other.pnlDe_;
      pnlSl_ = other.pnlSl_;
      pnlGa_ = other.pnlGa_;
      pnlTh_ = other.pnlTh_;
      pnlVe_ = other.pnlVe_;
      pnlVo_ = other.pnlVo_;
      pnlVa_ = other.pnlVa_;
      pnlDDiv_ = other.pnlDDiv_;
      pnlSDiv_ = other.pnlSDiv_;
      pnlRate_ = other.pnlRate_;
      pnlErr_ = other.pnlErr_;
      pnlTe_ = other.pnlTe_;
      pnlLn_ = other.pnlLn_;
      pnlSh_ = other.pnlSh_;
      tEdge_ = other.tEdge_;
      tEdgeMult_ = other.tEdgeMult_;
      tEdgePr_ = other.tEdgePr_;
      tEdgeMultPr_ = other.tEdgeMultPr_;
      posTEdgePnl_ = other.posTEdgePnl_;
      negTEdgePnl_ = other.negTEdgePnl_;
      badTEdgePnl_ = other.badTEdgePnl_;
      vaRsu90_ = other.vaRsu90_;
      vaRsd90_ = other.vaRsd90_;
      vaRsu50_ = other.vaRsu50_;
      vaRsd50_ = other.vaRsd50_;
      vaRsu15_ = other.vaRsu15_;
      vaRsd15_ = other.vaRsd15_;
      vaRsu10_ = other.vaRsu10_;
      vaRsd10_ = other.vaRsd10_;
      vaRsu05_ = other.vaRsu05_;
      vaRsd05_ = other.vaRsd05_;
      vaRsu1E_ = other.vaRsu1E_;
      vaRsd1E_ = other.vaRsd1E_;
      vaRsu2E_ = other.vaRsu2E_;
      vaRsd2E_ = other.vaRsd2E_;
      vaRearn_ = other.vaRearn_;
      vaRcash_ = other.vaRcash_;
      lastActivity_ = other.lastActivity_ != null ? other.lastActivity_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExpirationRiskRecordV5 Clone() {
      return new ExpirationRiskRecordV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "vega_long" field.</summary>
    public const int VegaLongFieldNumber = 106;
    private float vegaLong_;
    /// <summary>
    /// sum of long vega symbol positions;=sum(+ors.vega) if ors.vega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VegaLong {
      get { return vegaLong_; }
      set {
        vegaLong_ = value;
      }
    }

    /// <summary>Field number for the "vega_short" field.</summary>
    public const int VegaShortFieldNumber = 109;
    private float vegaShort_;
    /// <summary>
    /// sum of short vega symbol positions;= sum(-ors.vega) if ors.vega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VegaShort {
      get { return vegaShort_; }
      set {
        vegaShort_ = value;
      }
    }

    /// <summary>Field number for the "w_vega_long" field.</summary>
    public const int WVegaLongFieldNumber = 112;
    private float wVegaLong_;
    /// <summary>
    /// sum of long weighted vega symbol positions;=sum(+ors.wVega) if ors.wVega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WVegaLong {
      get { return wVegaLong_; }
      set {
        wVegaLong_ = value;
      }
    }

    /// <summary>Field number for the "w_vega_short" field.</summary>
    public const int WVegaShortFieldNumber = 115;
    private float wVegaShort_;
    /// <summary>
    /// sum of short weighted vega symbol positions;= sum(-ors.wVega) if ors.wVega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WVegaShort {
      get { return wVegaShort_; }
      set {
        wVegaShort_ = value;
      }
    }

    /// <summary>Field number for the "wt_vega_long" field.</summary>
    public const int WtVegaLongFieldNumber = 118;
    private float wtVegaLong_;
    /// <summary>
    /// sum of long time weighted vega symbol positions;=sum(+ors.wtVega) if ors.wtVega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVegaLong {
      get { return wtVegaLong_; }
      set {
        wtVegaLong_ = value;
      }
    }

    /// <summary>Field number for the "wt_vega_short" field.</summary>
    public const int WtVegaShortFieldNumber = 121;
    private float wtVegaShort_;
    /// <summary>
    /// sum of short time weighted vega symbol positions;= sum(-ors.wtVega) if ors.wtVega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVegaShort {
      get { return wtVegaShort_; }
      set {
        wtVegaShort_ = value;
      }
    }

    /// <summary>Field number for the "theta_long" field.</summary>
    public const int ThetaLongFieldNumber = 124;
    private float thetaLong_;
    /// <summary>
    /// sum of long vega symbol positions;=sum(+ors.theta) if ors.theta > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThetaLong {
      get { return thetaLong_; }
      set {
        thetaLong_ = value;
      }
    }

    /// <summary>Field number for the "theta_short" field.</summary>
    public const int ThetaShortFieldNumber = 127;
    private float thetaShort_;
    /// <summary>
    /// sum of short vega symbol positions;= sum(-ors.theta) if ors.theta &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThetaShort {
      get { return thetaShort_; }
      set {
        thetaShort_ = value;
      }
    }

    /// <summary>Field number for the "rho_long" field.</summary>
    public const int RhoLongFieldNumber = 130;
    private float rhoLong_;
    /// <summary>
    /// sum of long rho symbol positions;=sum(+ors.rho) if ors.rho > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RhoLong {
      get { return rhoLong_; }
      set {
        rhoLong_ = value;
      }
    }

    /// <summary>Field number for the "rho_short" field.</summary>
    public const int RhoShortFieldNumber = 133;
    private float rhoShort_;
    /// <summary>
    /// sum of short rho symbol positions;= sum(-ors.rho) if ors.rho &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RhoShort {
      get { return rhoShort_; }
      set {
        rhoShort_ = value;
      }
    }

    /// <summary>Field number for the "d_gamma_long" field.</summary>
    public const int DGammaLongFieldNumber = 136;
    private float dGammaLong_;
    /// <summary>
    /// sum of long $ gamma option positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DGammaLong {
      get { return dGammaLong_; }
      set {
        dGammaLong_ = value;
      }
    }

    /// <summary>Field number for the "d_gamma_short" field.</summary>
    public const int DGammaShortFieldNumber = 139;
    private float dGammaShort_;
    /// <summary>
    /// sum of short $gamma option positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DGammaShort {
      get { return dGammaShort_; }
      set {
        dGammaShort_ = value;
      }
    }

    /// <summary>Field number for the "d_beta_ga_long" field.</summary>
    public const int DBetaGaLongFieldNumber = 142;
    private float dBetaGaLong_;
    /// <summary>
    /// sum of long $ beta/gamma option positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DBetaGaLong {
      get { return dBetaGaLong_; }
      set {
        dBetaGaLong_ = value;
      }
    }

    /// <summary>Field number for the "d_beta_ga_short" field.</summary>
    public const int DBetaGaShortFieldNumber = 145;
    private float dBetaGaShort_;
    /// <summary>
    /// sum of short $ beta/gamma option positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DBetaGaShort {
      get { return dBetaGaShort_; }
      set {
        dBetaGaShort_ = value;
      }
    }

    /// <summary>Field number for the "ivol_ln" field.</summary>
    public const int IvolLnFieldNumber = 148;
    private float ivolLn_;
    /// <summary>
    /// vega weighted average symbol ivol where ors.vega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolLn {
      get { return ivolLn_; }
      set {
        ivolLn_ = value;
      }
    }

    /// <summary>Field number for the "ivol_sh" field.</summary>
    public const int IvolShFieldNumber = 151;
    private float ivolSh_;
    /// <summary>
    /// vega weighted average symbol ivol where ors.vega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolSh {
      get { return ivolSh_; }
      set {
        ivolSh_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dd" field.</summary>
    public const int WtVeDdFieldNumber = 154;
    private float wtVeDd_;
    /// <summary>
    /// Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde &lt; -0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDd {
      get { return wtVeDd_; }
      set {
        wtVeDd_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dn" field.</summary>
    public const int WtVeDnFieldNumber = 157;
    private float wtVeDn_;
    /// <summary>
    /// Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 &lt;= opr.xde &lt; -0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDn {
      get { return wtVeDn_; }
      set {
        wtVeDn_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_at" field.</summary>
    public const int WtVeAtFieldNumber = 160;
    private float wtVeAt_;
    /// <summary>
    /// Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) &lt;= 0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeAt {
      get { return wtVeAt_; }
      set {
        wtVeAt_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_up" field.</summary>
    public const int WtVeUpFieldNumber = 163;
    private float wtVeUp_;
    /// <summary>
    /// Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 &lt; opr.xde &lt;= +0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeUp {
      get { return wtVeUp_; }
      set {
        wtVeUp_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_du" field.</summary>
    public const int WtVeDuFieldNumber = 166;
    private float wtVeDu_;
    /// <summary>
    /// Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 &lt; opr.xde
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDu {
      get { return wtVeDu_; }
      set {
        wtVeDu_ = value;
      }
    }

    /// <summary>Field number for the "abs_clr_cn" field.</summary>
    public const int AbsClrCnFieldNumber = 169;
    private int absClrCn_;
    /// <summary>
    /// absolute number of contracts (open clr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsClrCn {
      get { return absClrCn_; }
      set {
        absClrCn_ = value;
      }
    }

    /// <summary>Field number for the "abs_cur_cn" field.</summary>
    public const int AbsCurCnFieldNumber = 172;
    private int absCurCn_;
    /// <summary>
    /// absolute number of contracts (open clr + bot - sld)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsCurCn {
      get { return absCurCn_; }
      set {
        absCurCn_ = value;
      }
    }

    /// <summary>Field number for the "prem_ov_par" field.</summary>
    public const int PremOvParFieldNumber = 175;
    private float premOvPar_;
    /// <summary>
    /// aggregate option premium over parity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PremOvPar {
      get { return premOvPar_; }
      set {
        premOvPar_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_vol" field.</summary>
    public const int OpPnlVolFieldNumber = 178;
    private float opPnlVol_;
    /// <summary>
    /// options pnl (using SR vol marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPnlVol {
      get { return opPnlVol_; }
      set {
        opPnlVol_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_mid" field.</summary>
    public const int OpPnlMidFieldNumber = 181;
    private float opPnlMid_;
    /// <summary>
    /// options pnl (using SR mid marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPnlMid {
      get { return opPnlMid_; }
      set {
        opPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "op_pnl_clr" field.</summary>
    public const int OpPnlClrFieldNumber = 184;
    private float opPnlClr_;
    /// <summary>
    /// options pnl (using CLR mid marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpPnlClr {
      get { return opPnlClr_; }
      set {
        opPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "op_day_vega" field.</summary>
    public const int OpDayVegaFieldNumber = 187;
    private float opDayVega_;
    /// <summary>
    /// option vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayVega {
      get { return opDayVega_; }
      set {
        opDayVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wVega" field.</summary>
    public const int OpDayWVegaFieldNumber = 190;
    private float opDayWVega_;
    /// <summary>
    /// option (vol weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWVega {
      get { return opDayWVega_; }
      set {
        opDayWVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_tVega" field.</summary>
    public const int OpDayTVegaFieldNumber = 193;
    private float opDayTVega_;
    /// <summary>
    /// option (time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTVega {
      get { return opDayTVega_; }
      set {
        opDayTVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wt_vega" field.</summary>
    public const int OpDayWtVegaFieldNumber = 196;
    private float opDayWtVega_;
    /// <summary>
    /// option (vol time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWtVega {
      get { return opDayWtVega_; }
      set {
        opDayWtVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_theta" field.</summary>
    public const int OpDayThetaFieldNumber = 199;
    private float opDayTheta_;
    /// <summary>
    /// option theta traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTheta {
      get { return opDayTheta_; }
      set {
        opDayTheta_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_opened" field.</summary>
    public const int OpEdgeOpenedFieldNumber = 202;
    private float opEdgeOpened_;
    /// <summary>
    /// option theo edge opened today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeOpened {
      get { return opEdgeOpened_; }
      set {
        opEdgeOpened_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_closed" field.</summary>
    public const int OpEdgeClosedFieldNumber = 205;
    private float opEdgeClosed_;
    /// <summary>
    /// option theo edge closed today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeClosed {
      get { return opEdgeClosed_; }
      set {
        opEdgeClosed_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dn" field.</summary>
    public const int PnlDnFieldNumber = 208;
    private float pnlDn_;
    /// <summary>
    /// option delta neutral pnl;=sum(ors.pnlDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDn {
      get { return pnlDn_; }
      set {
        pnlDn_ = value;
      }
    }

    /// <summary>Field number for the "pnl_de" field.</summary>
    public const int PnlDeFieldNumber = 211;
    private float pnlDe_;
    /// <summary>
    /// option delta pnl;=sum(ors.pnlDe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDe {
      get { return pnlDe_; }
      set {
        pnlDe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sl" field.</summary>
    public const int PnlSlFieldNumber = 214;
    private float pnlSl_;
    /// <summary>
    /// option vega/delta pnl;=sum(ors.pnlSl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSl {
      get { return pnlSl_; }
      set {
        pnlSl_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ga" field.</summary>
    public const int PnlGaFieldNumber = 217;
    private float pnlGa_;
    /// <summary>
    /// option gamma pnl;=sum(ors.pnlGa)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlGa {
      get { return pnlGa_; }
      set {
        pnlGa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_th" field.</summary>
    public const int PnlThFieldNumber = 220;
    private float pnlTh_;
    /// <summary>
    /// option theta pnl;=sum(ors.pnlTh)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTh {
      get { return pnlTh_; }
      set {
        pnlTh_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ve" field.</summary>
    public const int PnlVeFieldNumber = 223;
    private float pnlVe_;
    /// <summary>
    /// option vega pnl;=sum(ors.pnlVe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVe {
      get { return pnlVe_; }
      set {
        pnlVe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_vo" field.</summary>
    public const int PnlVoFieldNumber = 226;
    private float pnlVo_;
    /// <summary>
    /// option volga pnl;=sum(ors.pnlVo)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVo {
      get { return pnlVo_; }
      set {
        pnlVo_ = value;
      }
    }

    /// <summary>Field number for the "pnl_va" field.</summary>
    public const int PnlVaFieldNumber = 229;
    private float pnlVa_;
    /// <summary>
    /// option vanna pnl;=sum(ors.pnlVa)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVa {
      get { return pnlVa_; }
      set {
        pnlVa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dDiv" field.</summary>
    public const int PnlDDivFieldNumber = 232;
    private float pnlDDiv_;
    /// <summary>
    /// option DDiv pnl;=sum(ors.pnlDDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDDiv {
      get { return pnlDDiv_; }
      set {
        pnlDDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sDiv" field.</summary>
    public const int PnlSDivFieldNumber = 235;
    private float pnlSDiv_;
    /// <summary>
    /// option SDiv pnl;=sum(ors.pnlSDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSDiv {
      get { return pnlSDiv_; }
      set {
        pnlSDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_rate" field.</summary>
    public const int PnlRateFieldNumber = 238;
    private float pnlRate_;
    /// <summary>
    /// option Rate pnl;=sum(ors.pnlRate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlRate {
      get { return pnlRate_; }
      set {
        pnlRate_ = value;
      }
    }

    /// <summary>Field number for the "pnl_err" field.</summary>
    public const int PnlErrFieldNumber = 241;
    private float pnlErr_;
    /// <summary>
    /// option unexplained (error) pnl;=sum(ors.pnlErr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlErr {
      get { return pnlErr_; }
      set {
        pnlErr_ = value;
      }
    }

    /// <summary>Field number for the "pnl_te" field.</summary>
    public const int PnlTeFieldNumber = 244;
    private float pnlTe_;
    /// <summary>
    /// option theo edge pnl;=sum(ors.pnlTe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTe {
      get { return pnlTe_; }
      set {
        pnlTe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ln" field.</summary>
    public const int PnlLnFieldNumber = 247;
    private float pnlLn_;
    /// <summary>
    /// option pnl from option positions with +vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlLn {
      get { return pnlLn_; }
      set {
        pnlLn_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sh" field.</summary>
    public const int PnlShFieldNumber = 250;
    private float pnlSh_;
    /// <summary>
    /// option pnl from option positions with -vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSh {
      get { return pnlSh_; }
      set {
        pnlSh_ = value;
      }
    }

    /// <summary>Field number for the "t_edge" field.</summary>
    public const int TEdgeFieldNumber = 253;
    private float tEdge_;
    /// <summary>
    /// aggregate option theo edge;=sum(srs.tEdge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdge {
      get { return tEdge_; }
      set {
        tEdge_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_mult" field.</summary>
    public const int TEdgeMultFieldNumber = 256;
    private float tEdgeMult_;
    /// <summary>
    /// denominator for computing edge per unit;=sum(srs.tEdgeMult)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMult {
      get { return tEdgeMult_; }
      set {
        tEdgeMult_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_pr" field.</summary>
    public const int TEdgePrFieldNumber = 259;
    private float tEdgePr_;
    /// <summary>
    /// aggregate option theo edge (prior period);=sum(srs.tEdgePr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgePr {
      get { return tEdgePr_; }
      set {
        tEdgePr_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_mult_pr" field.</summary>
    public const int TEdgeMultPrFieldNumber = 262;
    private float tEdgeMultPr_;
    /// <summary>
    /// enominator for computing edge per unit (prior period);=sum(srs.tEdgeMultPr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMultPr {
      get { return tEdgeMultPr_; }
      set {
        tEdgeMultPr_ = value;
      }
    }

    /// <summary>Field number for the "pos_tEdge_pnl" field.</summary>
    public const int PosTEdgePnlFieldNumber = 265;
    private float posTEdgePnl_;
    /// <summary>
    /// aggregate pnl (positive edge symbols);=sum(ors.posTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTEdgePnl {
      get { return posTEdgePnl_; }
      set {
        posTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "neg_tEdge_pnl" field.</summary>
    public const int NegTEdgePnlFieldNumber = 268;
    private float negTEdgePnl_;
    /// <summary>
    /// aggregate pnl (negative edge symbols);=sum(ors.negTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NegTEdgePnl {
      get { return negTEdgePnl_; }
      set {
        negTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "bad_tEdge_pnl" field.</summary>
    public const int BadTEdgePnlFieldNumber = 271;
    private float badTEdgePnl_;
    /// <summary>
    /// aggregate pnl (no theo edge symbols);=sum(ors.badTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BadTEdgePnl {
      get { return badTEdgePnl_; }
      set {
        badTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu90" field.</summary>
    public const int VaRsu90FieldNumber = 274;
    private float vaRsu90_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.90))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu90 {
      get { return vaRsu90_; }
      set {
        vaRsu90_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd90" field.</summary>
    public const int VaRsd90FieldNumber = 277;
    private float vaRsd90_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.90))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd90 {
      get { return vaRsd90_; }
      set {
        vaRsd90_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu50" field.</summary>
    public const int VaRsu50FieldNumber = 280;
    private float vaRsu50_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.50))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu50 {
      get { return vaRsu50_; }
      set {
        vaRsu50_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd50" field.</summary>
    public const int VaRsd50FieldNumber = 283;
    private float vaRsd50_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.50))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd50 {
      get { return vaRsd50_; }
      set {
        vaRsd50_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu15" field.</summary>
    public const int VaRsu15FieldNumber = 286;
    private float vaRsu15_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.15))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu15 {
      get { return vaRsu15_; }
      set {
        vaRsu15_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd15" field.</summary>
    public const int VaRsd15FieldNumber = 289;
    private float vaRsd15_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.15))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd15 {
      get { return vaRsd15_; }
      set {
        vaRsd15_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu10" field.</summary>
    public const int VaRsu10FieldNumber = 292;
    private float vaRsu10_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu10 {
      get { return vaRsu10_; }
      set {
        vaRsu10_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd10" field.</summary>
    public const int VaRsd10FieldNumber = 295;
    private float vaRsd10_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd10 {
      get { return vaRsd10_; }
      set {
        vaRsd10_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu05" field.</summary>
    public const int VaRsu05FieldNumber = 298;
    private float vaRsu05_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.05))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu05 {
      get { return vaRsu05_; }
      set {
        vaRsu05_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd05" field.</summary>
    public const int VaRsd05FieldNumber = 301;
    private float vaRsd05_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.05))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd05 {
      get { return vaRsd05_; }
      set {
        vaRsd05_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu1e" field.</summary>
    public const int VaRsu1EFieldNumber = 304;
    private float vaRsu1E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu1E {
      get { return vaRsu1E_; }
      set {
        vaRsu1E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd1e" field.</summary>
    public const int VaRsd1EFieldNumber = 307;
    private float vaRsd1E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd1E {
      get { return vaRsd1E_; }
      set {
        vaRsd1E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu2e" field.</summary>
    public const int VaRsu2EFieldNumber = 310;
    private float vaRsu2E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu2E {
      get { return vaRsu2E_; }
      set {
        vaRsu2E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd2e" field.</summary>
    public const int VaRsd2EFieldNumber = 313;
    private float vaRsd2E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd2E {
      get { return vaRsd2E_; }
      set {
        vaRsd2E_ = value;
      }
    }

    /// <summary>Field number for the "va_rearn" field.</summary>
    public const int VaRearnFieldNumber = 316;
    private float vaRearn_;
    /// <summary>
    /// Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRearn {
      get { return vaRearn_; }
      set {
        vaRearn_ = value;
      }
    }

    /// <summary>Field number for the "va_rcash" field.</summary>
    public const int VaRcashFieldNumber = 319;
    private float vaRcash_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRcash {
      get { return vaRcash_; }
      set {
        vaRcash_ = value;
      }
    }

    /// <summary>Field number for the "last_activity" field.</summary>
    public const int LastActivityFieldNumber = 322;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastActivity {
      get { return lastActivity_; }
      set {
        lastActivity_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 325;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExpirationRiskRecordV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExpirationRiskRecordV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VegaLong, other.VegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VegaShort, other.VegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WVegaLong, other.WVegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WVegaShort, other.WVegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVegaLong, other.WtVegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVegaShort, other.WtVegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetaLong, other.ThetaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetaShort, other.ThetaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhoLong, other.RhoLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhoShort, other.RhoShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DGammaLong, other.DGammaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DGammaShort, other.DGammaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DBetaGaLong, other.DBetaGaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DBetaGaShort, other.DBetaGaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolLn, other.IvolLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolSh, other.IvolSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDd, other.WtVeDd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDn, other.WtVeDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeAt, other.WtVeAt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeUp, other.WtVeUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDu, other.WtVeDu)) return false;
      if (AbsClrCn != other.AbsClrCn) return false;
      if (AbsCurCn != other.AbsCurCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PremOvPar, other.PremOvPar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPnlVol, other.OpPnlVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPnlMid, other.OpPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpPnlClr, other.OpPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayVega, other.OpDayVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWVega, other.OpDayWVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTVega, other.OpDayTVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWtVega, other.OpDayWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTheta, other.OpDayTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeOpened, other.OpEdgeOpened)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeClosed, other.OpEdgeClosed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDn, other.PnlDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDe, other.PnlDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSl, other.PnlSl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlGa, other.PnlGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTh, other.PnlTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVe, other.PnlVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVo, other.PnlVo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVa, other.PnlVa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDDiv, other.PnlDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSDiv, other.PnlSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlRate, other.PnlRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlErr, other.PnlErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTe, other.PnlTe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlLn, other.PnlLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSh, other.PnlSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdge, other.TEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMult, other.TEdgeMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgePr, other.TEdgePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMultPr, other.TEdgeMultPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTEdgePnl, other.PosTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegTEdgePnl, other.NegTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BadTEdgePnl, other.BadTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu90, other.VaRsu90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd90, other.VaRsd90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu50, other.VaRsu50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd50, other.VaRsd50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu15, other.VaRsu15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd15, other.VaRsd15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu10, other.VaRsu10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd10, other.VaRsd10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu05, other.VaRsu05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd05, other.VaRsd05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu1E, other.VaRsu1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd1E, other.VaRsd1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu2E, other.VaRsu2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd2E, other.VaRsd2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRearn, other.VaRearn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRcash, other.VaRcash)) return false;
      if (!object.Equals(LastActivity, other.LastActivity)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (VegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VegaLong);
      if (VegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VegaShort);
      if (WVegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WVegaLong);
      if (WVegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WVegaShort);
      if (WtVegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVegaLong);
      if (WtVegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVegaShort);
      if (ThetaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetaLong);
      if (ThetaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetaShort);
      if (RhoLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhoLong);
      if (RhoShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhoShort);
      if (DGammaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DGammaLong);
      if (DGammaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DGammaShort);
      if (DBetaGaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DBetaGaLong);
      if (DBetaGaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DBetaGaShort);
      if (IvolLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolLn);
      if (IvolSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolSh);
      if (WtVeDd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDd);
      if (WtVeDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDn);
      if (WtVeAt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeAt);
      if (WtVeUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeUp);
      if (WtVeDu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDu);
      if (AbsClrCn != 0) hash ^= AbsClrCn.GetHashCode();
      if (AbsCurCn != 0) hash ^= AbsCurCn.GetHashCode();
      if (PremOvPar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PremOvPar);
      if (OpPnlVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPnlVol);
      if (OpPnlMid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPnlMid);
      if (OpPnlClr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpPnlClr);
      if (OpDayVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayVega);
      if (OpDayWVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWVega);
      if (OpDayTVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTVega);
      if (OpDayWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWtVega);
      if (OpDayTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTheta);
      if (OpEdgeOpened != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeOpened);
      if (OpEdgeClosed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeClosed);
      if (PnlDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDn);
      if (PnlDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDe);
      if (PnlSl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSl);
      if (PnlGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlGa);
      if (PnlTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTh);
      if (PnlVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVe);
      if (PnlVo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVo);
      if (PnlVa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVa);
      if (PnlDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDDiv);
      if (PnlSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSDiv);
      if (PnlRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlRate);
      if (PnlErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlErr);
      if (PnlTe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTe);
      if (PnlLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlLn);
      if (PnlSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSh);
      if (TEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdge);
      if (TEdgeMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMult);
      if (TEdgePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgePr);
      if (TEdgeMultPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMultPr);
      if (PosTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTEdgePnl);
      if (NegTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegTEdgePnl);
      if (BadTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BadTEdgePnl);
      if (VaRsu90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu90);
      if (VaRsd90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd90);
      if (VaRsu50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu50);
      if (VaRsd50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd50);
      if (VaRsu15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu15);
      if (VaRsd15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd15);
      if (VaRsu10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu10);
      if (VaRsd10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd10);
      if (VaRsu05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu05);
      if (VaRsd05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd05);
      if (VaRsu1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu1E);
      if (VaRsd1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd1E);
      if (VaRsu2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu2E);
      if (VaRsd2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd2E);
      if (VaRearn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRearn);
      if (VaRcash != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRcash);
      if (lastActivity_ != null) hash ^= LastActivity.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (VegaLong != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(VegaLong);
      }
      if (VegaShort != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(VegaShort);
      }
      if (WVegaLong != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(WVegaLong);
      }
      if (WVegaShort != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(WVegaShort);
      }
      if (WtVegaLong != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(WtVegaLong);
      }
      if (WtVegaShort != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(WtVegaShort);
      }
      if (ThetaLong != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(ThetaLong);
      }
      if (ThetaShort != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(ThetaShort);
      }
      if (RhoLong != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(RhoLong);
      }
      if (RhoShort != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(RhoShort);
      }
      if (DGammaLong != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(DGammaLong);
      }
      if (DGammaShort != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(DGammaShort);
      }
      if (DBetaGaLong != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(DBetaGaLong);
      }
      if (DBetaGaShort != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(DBetaGaShort);
      }
      if (IvolLn != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(IvolLn);
      }
      if (IvolSh != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(IvolSh);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(WtVeDu);
      }
      if (AbsClrCn != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(AbsClrCn);
      }
      if (AbsCurCn != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(PremOvPar);
      }
      if (OpPnlVol != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(OpPnlVol);
      }
      if (OpPnlMid != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(OpPnlMid);
      }
      if (OpPnlClr != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(OpPnlClr);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(OpDayTheta);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(PnlVa);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(PnlRate);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(PnlErr);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(PnlTe);
      }
      if (PnlLn != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(PnlLn);
      }
      if (PnlSh != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PnlSh);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(TEdgeMult);
      }
      if (TEdgePr != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(TEdgePr);
      }
      if (TEdgeMultPr != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(TEdgeMultPr);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BadTEdgePnl);
      }
      if (VaRsu90 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(VaRsu90);
      }
      if (VaRsd90 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(VaRsd90);
      }
      if (VaRsu50 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(VaRsu50);
      }
      if (VaRsd50 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(VaRsd50);
      }
      if (VaRsu15 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(VaRsu15);
      }
      if (VaRsd15 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(VaRsd15);
      }
      if (VaRsu10 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(VaRsu10);
      }
      if (VaRsd10 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(VaRsd10);
      }
      if (VaRsu05 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(VaRsu05);
      }
      if (VaRsd05 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(VaRsd05);
      }
      if (VaRsu1E != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(VaRsu1E);
      }
      if (VaRsd1E != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(VaRsd1E);
      }
      if (VaRsu2E != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(VaRsu2E);
      }
      if (VaRsd2E != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(VaRsd2E);
      }
      if (VaRearn != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(VaRearn);
      }
      if (VaRcash != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(VaRcash);
      }
      if (lastActivity_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(LastActivity);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 20);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (VegaLong != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(VegaLong);
      }
      if (VegaShort != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(VegaShort);
      }
      if (WVegaLong != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(WVegaLong);
      }
      if (WVegaShort != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(WVegaShort);
      }
      if (WtVegaLong != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(WtVegaLong);
      }
      if (WtVegaShort != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(WtVegaShort);
      }
      if (ThetaLong != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(ThetaLong);
      }
      if (ThetaShort != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(ThetaShort);
      }
      if (RhoLong != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(RhoLong);
      }
      if (RhoShort != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(RhoShort);
      }
      if (DGammaLong != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(DGammaLong);
      }
      if (DGammaShort != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(DGammaShort);
      }
      if (DBetaGaLong != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(DBetaGaLong);
      }
      if (DBetaGaShort != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(DBetaGaShort);
      }
      if (IvolLn != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(IvolLn);
      }
      if (IvolSh != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(IvolSh);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(WtVeDu);
      }
      if (AbsClrCn != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(AbsClrCn);
      }
      if (AbsCurCn != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(PremOvPar);
      }
      if (OpPnlVol != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(OpPnlVol);
      }
      if (OpPnlMid != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(OpPnlMid);
      }
      if (OpPnlClr != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(OpPnlClr);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(OpDayTheta);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(PnlVa);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(PnlRate);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(PnlErr);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(PnlTe);
      }
      if (PnlLn != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(PnlLn);
      }
      if (PnlSh != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(PnlSh);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(TEdgeMult);
      }
      if (TEdgePr != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(TEdgePr);
      }
      if (TEdgeMultPr != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(TEdgeMultPr);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BadTEdgePnl);
      }
      if (VaRsu90 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(VaRsu90);
      }
      if (VaRsd90 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(VaRsd90);
      }
      if (VaRsu50 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(VaRsu50);
      }
      if (VaRsd50 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(VaRsd50);
      }
      if (VaRsu15 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(VaRsu15);
      }
      if (VaRsd15 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(VaRsd15);
      }
      if (VaRsu10 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(VaRsu10);
      }
      if (VaRsd10 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(VaRsd10);
      }
      if (VaRsu05 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(VaRsu05);
      }
      if (VaRsd05 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(VaRsd05);
      }
      if (VaRsu1E != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(VaRsu1E);
      }
      if (VaRsd1E != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(VaRsd1E);
      }
      if (VaRsu2E != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(VaRsu2E);
      }
      if (VaRsd2E != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(VaRsd2E);
      }
      if (VaRearn != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(VaRearn);
      }
      if (VaRcash != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(VaRcash);
      }
      if (lastActivity_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(LastActivity);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 20);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (VegaLong != 0F) {
        size += 2 + 4;
      }
      if (VegaShort != 0F) {
        size += 2 + 4;
      }
      if (WVegaLong != 0F) {
        size += 2 + 4;
      }
      if (WVegaShort != 0F) {
        size += 2 + 4;
      }
      if (WtVegaLong != 0F) {
        size += 2 + 4;
      }
      if (WtVegaShort != 0F) {
        size += 2 + 4;
      }
      if (ThetaLong != 0F) {
        size += 2 + 4;
      }
      if (ThetaShort != 0F) {
        size += 2 + 4;
      }
      if (RhoLong != 0F) {
        size += 2 + 4;
      }
      if (RhoShort != 0F) {
        size += 2 + 4;
      }
      if (DGammaLong != 0F) {
        size += 2 + 4;
      }
      if (DGammaShort != 0F) {
        size += 2 + 4;
      }
      if (DBetaGaLong != 0F) {
        size += 2 + 4;
      }
      if (DBetaGaShort != 0F) {
        size += 2 + 4;
      }
      if (IvolLn != 0F) {
        size += 2 + 4;
      }
      if (IvolSh != 0F) {
        size += 2 + 4;
      }
      if (WtVeDd != 0F) {
        size += 2 + 4;
      }
      if (WtVeDn != 0F) {
        size += 2 + 4;
      }
      if (WtVeAt != 0F) {
        size += 2 + 4;
      }
      if (WtVeUp != 0F) {
        size += 2 + 4;
      }
      if (WtVeDu != 0F) {
        size += 2 + 4;
      }
      if (AbsClrCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsClrCn);
      }
      if (AbsCurCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        size += 2 + 4;
      }
      if (OpPnlVol != 0F) {
        size += 2 + 4;
      }
      if (OpPnlMid != 0F) {
        size += 2 + 4;
      }
      if (OpPnlClr != 0F) {
        size += 2 + 4;
      }
      if (OpDayVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWtVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTheta != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeOpened != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeClosed != 0F) {
        size += 2 + 4;
      }
      if (PnlDn != 0F) {
        size += 2 + 4;
      }
      if (PnlDe != 0F) {
        size += 2 + 4;
      }
      if (PnlSl != 0F) {
        size += 2 + 4;
      }
      if (PnlGa != 0F) {
        size += 2 + 4;
      }
      if (PnlTh != 0F) {
        size += 2 + 4;
      }
      if (PnlVe != 0F) {
        size += 2 + 4;
      }
      if (PnlVo != 0F) {
        size += 2 + 4;
      }
      if (PnlVa != 0F) {
        size += 2 + 4;
      }
      if (PnlDDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlSDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlRate != 0F) {
        size += 2 + 4;
      }
      if (PnlErr != 0F) {
        size += 2 + 4;
      }
      if (PnlTe != 0F) {
        size += 2 + 4;
      }
      if (PnlLn != 0F) {
        size += 2 + 4;
      }
      if (PnlSh != 0F) {
        size += 2 + 4;
      }
      if (TEdge != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMult != 0F) {
        size += 2 + 4;
      }
      if (TEdgePr != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMultPr != 0F) {
        size += 2 + 4;
      }
      if (PosTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (NegTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (BadTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (VaRsu90 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd90 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu50 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd50 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu15 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd15 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu10 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd10 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu05 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd05 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu1E != 0F) {
        size += 2 + 4;
      }
      if (VaRsd1E != 0F) {
        size += 2 + 4;
      }
      if (VaRsu2E != 0F) {
        size += 2 + 4;
      }
      if (VaRsd2E != 0F) {
        size += 2 + 4;
      }
      if (VaRearn != 0F) {
        size += 2 + 4;
      }
      if (VaRcash != 0F) {
        size += 2 + 4;
      }
      if (lastActivity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastActivity);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExpirationRiskRecordV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.VegaLong != 0F) {
        VegaLong = other.VegaLong;
      }
      if (other.VegaShort != 0F) {
        VegaShort = other.VegaShort;
      }
      if (other.WVegaLong != 0F) {
        WVegaLong = other.WVegaLong;
      }
      if (other.WVegaShort != 0F) {
        WVegaShort = other.WVegaShort;
      }
      if (other.WtVegaLong != 0F) {
        WtVegaLong = other.WtVegaLong;
      }
      if (other.WtVegaShort != 0F) {
        WtVegaShort = other.WtVegaShort;
      }
      if (other.ThetaLong != 0F) {
        ThetaLong = other.ThetaLong;
      }
      if (other.ThetaShort != 0F) {
        ThetaShort = other.ThetaShort;
      }
      if (other.RhoLong != 0F) {
        RhoLong = other.RhoLong;
      }
      if (other.RhoShort != 0F) {
        RhoShort = other.RhoShort;
      }
      if (other.DGammaLong != 0F) {
        DGammaLong = other.DGammaLong;
      }
      if (other.DGammaShort != 0F) {
        DGammaShort = other.DGammaShort;
      }
      if (other.DBetaGaLong != 0F) {
        DBetaGaLong = other.DBetaGaLong;
      }
      if (other.DBetaGaShort != 0F) {
        DBetaGaShort = other.DBetaGaShort;
      }
      if (other.IvolLn != 0F) {
        IvolLn = other.IvolLn;
      }
      if (other.IvolSh != 0F) {
        IvolSh = other.IvolSh;
      }
      if (other.WtVeDd != 0F) {
        WtVeDd = other.WtVeDd;
      }
      if (other.WtVeDn != 0F) {
        WtVeDn = other.WtVeDn;
      }
      if (other.WtVeAt != 0F) {
        WtVeAt = other.WtVeAt;
      }
      if (other.WtVeUp != 0F) {
        WtVeUp = other.WtVeUp;
      }
      if (other.WtVeDu != 0F) {
        WtVeDu = other.WtVeDu;
      }
      if (other.AbsClrCn != 0) {
        AbsClrCn = other.AbsClrCn;
      }
      if (other.AbsCurCn != 0) {
        AbsCurCn = other.AbsCurCn;
      }
      if (other.PremOvPar != 0F) {
        PremOvPar = other.PremOvPar;
      }
      if (other.OpPnlVol != 0F) {
        OpPnlVol = other.OpPnlVol;
      }
      if (other.OpPnlMid != 0F) {
        OpPnlMid = other.OpPnlMid;
      }
      if (other.OpPnlClr != 0F) {
        OpPnlClr = other.OpPnlClr;
      }
      if (other.OpDayVega != 0F) {
        OpDayVega = other.OpDayVega;
      }
      if (other.OpDayWVega != 0F) {
        OpDayWVega = other.OpDayWVega;
      }
      if (other.OpDayTVega != 0F) {
        OpDayTVega = other.OpDayTVega;
      }
      if (other.OpDayWtVega != 0F) {
        OpDayWtVega = other.OpDayWtVega;
      }
      if (other.OpDayTheta != 0F) {
        OpDayTheta = other.OpDayTheta;
      }
      if (other.OpEdgeOpened != 0F) {
        OpEdgeOpened = other.OpEdgeOpened;
      }
      if (other.OpEdgeClosed != 0F) {
        OpEdgeClosed = other.OpEdgeClosed;
      }
      if (other.PnlDn != 0F) {
        PnlDn = other.PnlDn;
      }
      if (other.PnlDe != 0F) {
        PnlDe = other.PnlDe;
      }
      if (other.PnlSl != 0F) {
        PnlSl = other.PnlSl;
      }
      if (other.PnlGa != 0F) {
        PnlGa = other.PnlGa;
      }
      if (other.PnlTh != 0F) {
        PnlTh = other.PnlTh;
      }
      if (other.PnlVe != 0F) {
        PnlVe = other.PnlVe;
      }
      if (other.PnlVo != 0F) {
        PnlVo = other.PnlVo;
      }
      if (other.PnlVa != 0F) {
        PnlVa = other.PnlVa;
      }
      if (other.PnlDDiv != 0F) {
        PnlDDiv = other.PnlDDiv;
      }
      if (other.PnlSDiv != 0F) {
        PnlSDiv = other.PnlSDiv;
      }
      if (other.PnlRate != 0F) {
        PnlRate = other.PnlRate;
      }
      if (other.PnlErr != 0F) {
        PnlErr = other.PnlErr;
      }
      if (other.PnlTe != 0F) {
        PnlTe = other.PnlTe;
      }
      if (other.PnlLn != 0F) {
        PnlLn = other.PnlLn;
      }
      if (other.PnlSh != 0F) {
        PnlSh = other.PnlSh;
      }
      if (other.TEdge != 0F) {
        TEdge = other.TEdge;
      }
      if (other.TEdgeMult != 0F) {
        TEdgeMult = other.TEdgeMult;
      }
      if (other.TEdgePr != 0F) {
        TEdgePr = other.TEdgePr;
      }
      if (other.TEdgeMultPr != 0F) {
        TEdgeMultPr = other.TEdgeMultPr;
      }
      if (other.PosTEdgePnl != 0F) {
        PosTEdgePnl = other.PosTEdgePnl;
      }
      if (other.NegTEdgePnl != 0F) {
        NegTEdgePnl = other.NegTEdgePnl;
      }
      if (other.BadTEdgePnl != 0F) {
        BadTEdgePnl = other.BadTEdgePnl;
      }
      if (other.VaRsu90 != 0F) {
        VaRsu90 = other.VaRsu90;
      }
      if (other.VaRsd90 != 0F) {
        VaRsd90 = other.VaRsd90;
      }
      if (other.VaRsu50 != 0F) {
        VaRsu50 = other.VaRsu50;
      }
      if (other.VaRsd50 != 0F) {
        VaRsd50 = other.VaRsd50;
      }
      if (other.VaRsu15 != 0F) {
        VaRsu15 = other.VaRsu15;
      }
      if (other.VaRsd15 != 0F) {
        VaRsd15 = other.VaRsd15;
      }
      if (other.VaRsu10 != 0F) {
        VaRsu10 = other.VaRsu10;
      }
      if (other.VaRsd10 != 0F) {
        VaRsd10 = other.VaRsd10;
      }
      if (other.VaRsu05 != 0F) {
        VaRsu05 = other.VaRsu05;
      }
      if (other.VaRsd05 != 0F) {
        VaRsd05 = other.VaRsd05;
      }
      if (other.VaRsu1E != 0F) {
        VaRsu1E = other.VaRsu1E;
      }
      if (other.VaRsd1E != 0F) {
        VaRsd1E = other.VaRsd1E;
      }
      if (other.VaRsu2E != 0F) {
        VaRsu2E = other.VaRsu2E;
      }
      if (other.VaRsd2E != 0F) {
        VaRsd2E = other.VaRsd2E;
      }
      if (other.VaRearn != 0F) {
        VaRearn = other.VaRearn;
      }
      if (other.VaRcash != 0F) {
        VaRcash = other.VaRcash;
      }
      if (other.lastActivity_ != null) {
        if (lastActivity_ == null) {
          LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastActivity.MergeFrom(other.LastActivity);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 853: {
            VegaLong = input.ReadFloat();
            break;
          }
          case 877: {
            VegaShort = input.ReadFloat();
            break;
          }
          case 901: {
            WVegaLong = input.ReadFloat();
            break;
          }
          case 925: {
            WVegaShort = input.ReadFloat();
            break;
          }
          case 949: {
            WtVegaLong = input.ReadFloat();
            break;
          }
          case 973: {
            WtVegaShort = input.ReadFloat();
            break;
          }
          case 997: {
            ThetaLong = input.ReadFloat();
            break;
          }
          case 1021: {
            ThetaShort = input.ReadFloat();
            break;
          }
          case 1045: {
            RhoLong = input.ReadFloat();
            break;
          }
          case 1069: {
            RhoShort = input.ReadFloat();
            break;
          }
          case 1093: {
            DGammaLong = input.ReadFloat();
            break;
          }
          case 1117: {
            DGammaShort = input.ReadFloat();
            break;
          }
          case 1141: {
            DBetaGaLong = input.ReadFloat();
            break;
          }
          case 1165: {
            DBetaGaShort = input.ReadFloat();
            break;
          }
          case 1189: {
            IvolLn = input.ReadFloat();
            break;
          }
          case 1213: {
            IvolSh = input.ReadFloat();
            break;
          }
          case 1237: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 1261: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 1285: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 1309: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 1333: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 1352: {
            AbsClrCn = input.ReadInt32();
            break;
          }
          case 1376: {
            AbsCurCn = input.ReadInt32();
            break;
          }
          case 1405: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 1429: {
            OpPnlVol = input.ReadFloat();
            break;
          }
          case 1453: {
            OpPnlMid = input.ReadFloat();
            break;
          }
          case 1477: {
            OpPnlClr = input.ReadFloat();
            break;
          }
          case 1501: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 1525: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 1549: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 1573: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 1597: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 1621: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 1645: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 1669: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 1693: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 1717: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 1741: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 1765: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 1789: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 1813: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 1837: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 1861: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 1885: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 1909: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 1933: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 1957: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 1981: {
            PnlLn = input.ReadFloat();
            break;
          }
          case 2005: {
            PnlSh = input.ReadFloat();
            break;
          }
          case 2029: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2053: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 2077: {
            TEdgePr = input.ReadFloat();
            break;
          }
          case 2101: {
            TEdgeMultPr = input.ReadFloat();
            break;
          }
          case 2125: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 2149: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 2173: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 2197: {
            VaRsu90 = input.ReadFloat();
            break;
          }
          case 2221: {
            VaRsd90 = input.ReadFloat();
            break;
          }
          case 2245: {
            VaRsu50 = input.ReadFloat();
            break;
          }
          case 2269: {
            VaRsd50 = input.ReadFloat();
            break;
          }
          case 2293: {
            VaRsu15 = input.ReadFloat();
            break;
          }
          case 2317: {
            VaRsd15 = input.ReadFloat();
            break;
          }
          case 2341: {
            VaRsu10 = input.ReadFloat();
            break;
          }
          case 2365: {
            VaRsd10 = input.ReadFloat();
            break;
          }
          case 2389: {
            VaRsu05 = input.ReadFloat();
            break;
          }
          case 2413: {
            VaRsd05 = input.ReadFloat();
            break;
          }
          case 2437: {
            VaRsu1E = input.ReadFloat();
            break;
          }
          case 2461: {
            VaRsd1E = input.ReadFloat();
            break;
          }
          case 2485: {
            VaRsu2E = input.ReadFloat();
            break;
          }
          case 2509: {
            VaRsd2E = input.ReadFloat();
            break;
          }
          case 2533: {
            VaRearn = input.ReadFloat();
            break;
          }
          case 2557: {
            VaRcash = input.ReadFloat();
            break;
          }
          case 2578: {
            if (lastActivity_ == null) {
              LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastActivity);
            break;
          }
          case 2602: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 853: {
            VegaLong = input.ReadFloat();
            break;
          }
          case 877: {
            VegaShort = input.ReadFloat();
            break;
          }
          case 901: {
            WVegaLong = input.ReadFloat();
            break;
          }
          case 925: {
            WVegaShort = input.ReadFloat();
            break;
          }
          case 949: {
            WtVegaLong = input.ReadFloat();
            break;
          }
          case 973: {
            WtVegaShort = input.ReadFloat();
            break;
          }
          case 997: {
            ThetaLong = input.ReadFloat();
            break;
          }
          case 1021: {
            ThetaShort = input.ReadFloat();
            break;
          }
          case 1045: {
            RhoLong = input.ReadFloat();
            break;
          }
          case 1069: {
            RhoShort = input.ReadFloat();
            break;
          }
          case 1093: {
            DGammaLong = input.ReadFloat();
            break;
          }
          case 1117: {
            DGammaShort = input.ReadFloat();
            break;
          }
          case 1141: {
            DBetaGaLong = input.ReadFloat();
            break;
          }
          case 1165: {
            DBetaGaShort = input.ReadFloat();
            break;
          }
          case 1189: {
            IvolLn = input.ReadFloat();
            break;
          }
          case 1213: {
            IvolSh = input.ReadFloat();
            break;
          }
          case 1237: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 1261: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 1285: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 1309: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 1333: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 1352: {
            AbsClrCn = input.ReadInt32();
            break;
          }
          case 1376: {
            AbsCurCn = input.ReadInt32();
            break;
          }
          case 1405: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 1429: {
            OpPnlVol = input.ReadFloat();
            break;
          }
          case 1453: {
            OpPnlMid = input.ReadFloat();
            break;
          }
          case 1477: {
            OpPnlClr = input.ReadFloat();
            break;
          }
          case 1501: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 1525: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 1549: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 1573: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 1597: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 1621: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 1645: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 1669: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 1693: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 1717: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 1741: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 1765: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 1789: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 1813: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 1837: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 1861: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 1885: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 1909: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 1933: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 1957: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 1981: {
            PnlLn = input.ReadFloat();
            break;
          }
          case 2005: {
            PnlSh = input.ReadFloat();
            break;
          }
          case 2029: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2053: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 2077: {
            TEdgePr = input.ReadFloat();
            break;
          }
          case 2101: {
            TEdgeMultPr = input.ReadFloat();
            break;
          }
          case 2125: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 2149: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 2173: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 2197: {
            VaRsu90 = input.ReadFloat();
            break;
          }
          case 2221: {
            VaRsd90 = input.ReadFloat();
            break;
          }
          case 2245: {
            VaRsu50 = input.ReadFloat();
            break;
          }
          case 2269: {
            VaRsd50 = input.ReadFloat();
            break;
          }
          case 2293: {
            VaRsu15 = input.ReadFloat();
            break;
          }
          case 2317: {
            VaRsd15 = input.ReadFloat();
            break;
          }
          case 2341: {
            VaRsu10 = input.ReadFloat();
            break;
          }
          case 2365: {
            VaRsd10 = input.ReadFloat();
            break;
          }
          case 2389: {
            VaRsu05 = input.ReadFloat();
            break;
          }
          case 2413: {
            VaRsd05 = input.ReadFloat();
            break;
          }
          case 2437: {
            VaRsu1E = input.ReadFloat();
            break;
          }
          case 2461: {
            VaRsd1E = input.ReadFloat();
            break;
          }
          case 2485: {
            VaRsu2E = input.ReadFloat();
            break;
          }
          case 2509: {
            VaRsd2E = input.ReadFloat();
            break;
          }
          case 2533: {
            VaRearn = input.ReadFloat();
            break;
          }
          case 2557: {
            VaRcash = input.ReadFloat();
            break;
          }
          case 2578: {
            if (lastActivity_ == null) {
              LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastActivity);
            break;
          }
          case 2602: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExpirationRiskRecordV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.ExpirationRiskRecordV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          currency_ = other.currency_;
          expiration_ = other.expiration_ != null ? other.expiration_.Clone() : null;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 11;
        private global::Spiderrock.Protobuf.Currency currency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.Currency Currency {
          get { return currency_; }
          set {
            currency_ = value;
          }
        }

        /// <summary>Field number for the "expiration" field.</summary>
        public const int ExpirationFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey expiration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey Expiration {
          get { return expiration_; }
          set {
            expiration_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 13;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (Currency != other.Currency) return false;
          if (!object.Equals(Expiration, other.Expiration)) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= Currency.GetHashCode();
          if (expiration_ != null) hash ^= Expiration.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Currency);
          }
          if (expiration_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Expiration);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Currency);
          }
          if (expiration_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Expiration);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
          }
          if (expiration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiration);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            Currency = other.Currency;
          }
          if (other.expiration_ != null) {
            if (expiration_ == null) {
              Expiration = new global::Spiderrock.Protobuf.DateKey();
            }
            Expiration.MergeFrom(other.Expiration);
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                Currency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
                break;
              }
              case 98: {
                if (expiration_ == null) {
                  Expiration = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Expiration);
                break;
              }
              case 106: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                Currency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
                break;
              }
              case 98: {
                if (expiration_ == null) {
                  Expiration = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(Expiration);
                break;
              }
              case 106: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
