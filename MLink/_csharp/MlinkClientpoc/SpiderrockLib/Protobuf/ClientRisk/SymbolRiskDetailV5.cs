// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/SymbolRiskDetailV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/SymbolRiskDetailV5.proto</summary>
  public static partial class SymbolRiskDetailV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/SymbolRiskDetailV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SymbolRiskDetailV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9DbGllbnRSaXNrL1N5bWJvbFJpc2tEZXRhaWxWNS5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iqAsKElN5bWJv",
            "bFJpc2tEZXRhaWxWNRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlN5bWJvbFJpc2tEZXRhaWxWNS5QS2V5EhMKC2NsaWVu",
            "dF90YWdzGGcgASgJEjIKCnN0a19zdGF0dXMYaiABKA4yHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlN0a1N0YXR1cxIyCgpvcHRfc3RhdHVzGG0gASgOMh4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5PcHRTdGF0dXMSEgoKcmlza19jbGFzcxhwIAEo",
            "CRISCgp0aGVvX21vZGVsGHMgASgJEhMKC3RoZW9fbW9kZWwyGHYgASgJEj0K",
            "EGhlZGdlX2RlbHRhX3J1bGUYeSABKA4yIy5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkhlZGdlRGVsdGFSdWxlEjQKC2hvbGRfcmVhc29uGHwgASgOMh8uc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5Ib2xkUmVhc29uEhMKC2JpbmFyeV9kYXlzGH8gASgC",
            "EjAKC2N0cmxfdXBkYXRlGIIBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASNAoPcGVyaW9kX2VuZF90aW1lGIUBIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASNQoLc3ltYm9sX3R5cGUYiAEgASgOMh8uc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TeW1ib2xUeXBlEg0KBG5hbWUYiwEgASgJEhEKCGlu",
            "ZHVzdHJ5GI4BIAEoBRIPCgZzZWN0b3IYkQEgASgJEg0KBGJldGEYlAEgASgC",
            "EjUKC2JldGFfc291cmNlGJcBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QmV0YVNvdXJjZRITCgpzdGtfdm9sdW1lGJoBIAEoAhITCgpvcHRfdm9sdW1l",
            "GJ0BIAEoAhIxCgl0YXBlX2NvZGUYoAEgASgOMh0uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5UYXBlQ29kZRI1CgttYXJnaW5fdHlwZRijASABKA4yHy5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLk1hcmdpblR5cGUSNgoOcG9pbnRfY3VycmVuY3kYpgEg",
            "ASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5DdXJyZW5jeRIOCgVkX2FtdBip",
            "ASABKAISDwoGZF9kYXlzGKwBIAEoBRIPCgZlX2RheXMYrwEgASgFEhQKC2xv",
            "Y2F0ZV9xdWFuGLIBIAEoBRIeChVhdmFpbGFibGVfbG9jYXRlX3F1YW4YtQEg",
            "ASgFEiwKB2djX2ZsYWcYuAEgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5Z",
            "ZXNObxIQCgdnY19yYXRlGLsBIAEoAhIUCgtib3Jyb3dfcmF0ZRi+ASABKAIS",
            "FAoLc3RfbWluX2lWb2wYwQEgASgCEhQKC3N0X21heF9pVm9sGMQBIAEoAhIS",
            "CgllYXJuX211bHQYxwEgASgCEhYKDWVhcm5fbXVsdF9lcnIYygEgASgCEhEK",
            "CGJhc2Vfdm9sGM0BIAEoAhIRCgh0YWlsX3ZvbBjQASABKAISLgoJdGltZXN0",
            "YW1wGNMBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAajAEKBFBL",
            "ZXkSLgoGdGlja2VyGAogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNr",
            "ZXJLZXkSDQoFYWNjbnQYCyABKAkSMAoKdHJhZGVfZGF0ZRgMIAEoCzIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRGF0ZUtleRITCgtjbGllbnRfZmlybRgNIAEo",
            "CWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SymbolRiskDetailV5), global::Spiderrock.Protobuf.SymbolRiskDetailV5.Parser, new[]{ "Meta", "Pkey", "ClientTags", "StkStatus", "OptStatus", "RiskClass", "TheoModel", "TheoModel2", "HedgeDeltaRule", "HoldReason", "BinaryDays", "CtrlUpdate", "PeriodEndTime", "SymbolType", "Name", "Industry", "Sector", "Beta", "BetaSource", "StkVolume", "OptVolume", "TapeCode", "MarginType", "PointCurrency", "DAmt", "DDays", "EDays", "LocateQuan", "AvailableLocateQuan", "GcFlag", "GcRate", "BorrowRate", "StMinIVol", "StMaxIVol", "EarnMult", "EarnMultErr", "BaseVol", "TailVol", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey), global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey.Parser, new[]{ "Ticker", "Accnt", "TradeDate", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SymbolRiskDetail records contain semi-static markup detail for SymbolRiskSummary records.
  /// </summary>
  public sealed partial class SymbolRiskDetailV5 : pb::IMessage<SymbolRiskDetailV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolRiskDetailV5> _parser = new pb::MessageParser<SymbolRiskDetailV5>(() => new SymbolRiskDetailV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolRiskDetailV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SymbolRiskDetailV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRiskDetailV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRiskDetailV5(SymbolRiskDetailV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      clientTags_ = other.clientTags_;
      stkStatus_ = other.stkStatus_;
      optStatus_ = other.optStatus_;
      riskClass_ = other.riskClass_;
      theoModel_ = other.theoModel_;
      theoModel2_ = other.theoModel2_;
      hedgeDeltaRule_ = other.hedgeDeltaRule_;
      holdReason_ = other.holdReason_;
      binaryDays_ = other.binaryDays_;
      ctrlUpdate_ = other.ctrlUpdate_ != null ? other.ctrlUpdate_.Clone() : null;
      periodEndTime_ = other.periodEndTime_ != null ? other.periodEndTime_.Clone() : null;
      symbolType_ = other.symbolType_;
      name_ = other.name_;
      industry_ = other.industry_;
      sector_ = other.sector_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      stkVolume_ = other.stkVolume_;
      optVolume_ = other.optVolume_;
      tapeCode_ = other.tapeCode_;
      marginType_ = other.marginType_;
      pointCurrency_ = other.pointCurrency_;
      dAmt_ = other.dAmt_;
      dDays_ = other.dDays_;
      eDays_ = other.eDays_;
      locateQuan_ = other.locateQuan_;
      availableLocateQuan_ = other.availableLocateQuan_;
      gcFlag_ = other.gcFlag_;
      gcRate_ = other.gcRate_;
      borrowRate_ = other.borrowRate_;
      stMinIVol_ = other.stMinIVol_;
      stMaxIVol_ = other.stMaxIVol_;
      earnMult_ = other.earnMult_;
      earnMultErr_ = other.earnMultErr_;
      baseVol_ = other.baseVol_;
      tailVol_ = other.tailVol_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRiskDetailV5 Clone() {
      return new SymbolRiskDetailV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "client_tags" field.</summary>
    public const int ClientTagsFieldNumber = 103;
    private string clientTags_ = "";
    /// <summary>
    /// (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientTags {
      get { return clientTags_; }
      set {
        clientTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stk_status" field.</summary>
    public const int StkStatusFieldNumber = 106;
    private global::Spiderrock.Protobuf.StkStatus stkStatus_ = global::Spiderrock.Protobuf.StkStatus.Unspecified;
    /// <summary>
    /// Stock trading status indicator (user controlled;used by the HedgeTool and by trade controllers) [SymbolControl.stkStatus]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkStatus StkStatus {
      get { return stkStatus_; }
      set {
        stkStatus_ = value;
      }
    }

    /// <summary>Field number for the "opt_status" field.</summary>
    public const int OptStatusFieldNumber = 109;
    private global::Spiderrock.Protobuf.OptStatus optStatus_ = global::Spiderrock.Protobuf.OptStatus.Unspecified;
    /// <summary>
    /// Option trading status indicator (user controlled;only used by trade controllers) [SymbolControl.optStatus]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.OptStatus OptStatus {
      get { return optStatus_; }
      set {
        optStatus_ = value;
      }
    }

    /// <summary>Field number for the "risk_class" field.</summary>
    public const int RiskClassFieldNumber = 112;
    private string riskClass_ = "";
    /// <summary>
    /// Symbol Risk Class Code (user supplied) [SymbolControl.riskClass]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskClass {
      get { return riskClass_; }
      set {
        riskClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "theo_model" field.</summary>
    public const int TheoModelFieldNumber = 115;
    private string theoModel_ = "";
    /// <summary>
    /// SR assigned theo model tag (associated with user supplied theo surfaces) [AccountConfig.theoModel]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoModel {
      get { return theoModel_; }
      set {
        theoModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "theo_model2" field.</summary>
    public const int TheoModel2FieldNumber = 118;
    private string theoModel2_ = "";
    /// <summary>
    /// SR assigned theo model#2 tag (associated with user supplied theo surfaces) [AccountConfig.theoModel2]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TheoModel2 {
      get { return theoModel2_; }
      set {
        theoModel2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hedge_delta_rule" field.</summary>
    public const int HedgeDeltaRuleFieldNumber = 121;
    private global::Spiderrock.Protobuf.HedgeDeltaRule hedgeDeltaRule_ = global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified;
    /// <summary>
    /// HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeDeltaRule HedgeDeltaRule {
      get { return hedgeDeltaRule_; }
      set {
        hedgeDeltaRule_ = value;
      }
    }

    /// <summary>Field number for the "hold_reason" field.</summary>
    public const int HoldReasonFieldNumber = 124;
    private global::Spiderrock.Protobuf.HoldReason holdReason_ = global::Spiderrock.Protobuf.HoldReason.Unspecified;
    /// <summary>
    /// User supplied description (only informational) [SymbolControl.holdReason]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HoldReason HoldReason {
      get { return holdReason_; }
      set {
        holdReason_ = value;
      }
    }

    /// <summary>Field number for the "binary_days" field.</summary>
    public const int BinaryDaysFieldNumber = 127;
    private float binaryDays_;
    /// <summary>
    /// Fractional days [0 - 5.0] prior to expiration after which hedgeDeltas become binary [-1.0, -0.5, 0, +0.5, +1.0] [SymbolControl.binaryDays]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BinaryDays {
      get { return binaryDays_; }
      set {
        binaryDays_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_update" field.</summary>
    public const int CtrlUpdateFieldNumber = 130;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ctrlUpdate_;
    /// <summary>
    /// last update dttm of SymbolControl record [SymbolControl.timestamp]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CtrlUpdate {
      get { return ctrlUpdate_; }
      set {
        ctrlUpdate_ = value;
      }
    }

    /// <summary>Field number for the "period_end_time" field.</summary>
    public const int PeriodEndTimeFieldNumber = 133;
    private global::Google.Protobuf.WellKnownTypes.Timestamp periodEndTime_;
    /// <summary>
    /// DTTM of the end of the current trading period
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PeriodEndTime {
      get { return periodEndTime_; }
      set {
        periodEndTime_ = value;
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 136;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    /// <summary>
    /// SymbolType (Equity, ETF, ShortETF, ADR, CashIndex, FutureComplex)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 139;
    private string name_ = "";
    /// <summary>
    /// Symbol name/description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 142;
    private int industry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Industry {
      get { return industry_; }
      set {
        industry_ = value;
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 145;
    private string sector_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 148;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 151;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "stk_volume" field.</summary>
    public const int StkVolumeFieldNumber = 154;
    private float stkVolume_;
    /// <summary>
    /// trailing 30 day average daily stock volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkVolume {
      get { return stkVolume_; }
      set {
        stkVolume_ = value;
      }
    }

    /// <summary>Field number for the "opt_volume" field.</summary>
    public const int OptVolumeFieldNumber = 157;
    private float optVolume_;
    /// <summary>
    /// trailing 30 day average daily option volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptVolume {
      get { return optVolume_; }
      set {
        optVolume_ = value;
      }
    }

    /// <summary>Field number for the "tape_code" field.</summary>
    public const int TapeCodeFieldNumber = 160;
    private global::Spiderrock.Protobuf.TapeCode tapeCode_ = global::Spiderrock.Protobuf.TapeCode.Unspecified;
    /// <summary>
    /// market data tape code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TapeCode TapeCode {
      get { return tapeCode_; }
      set {
        tapeCode_ = value;
      }
    }

    /// <summary>Field number for the "margin_type" field.</summary>
    public const int MarginTypeFieldNumber = 163;
    private global::Spiderrock.Protobuf.MarginType marginType_ = global::Spiderrock.Protobuf.MarginType.Unspecified;
    /// <summary>
    /// margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarginType MarginType {
      get { return marginType_; }
      set {
        marginType_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 166;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "d_amt" field.</summary>
    public const int DAmtFieldNumber = 169;
    private float dAmt_;
    /// <summary>
    /// $amount of the next expected dividend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DAmt {
      get { return dAmt_; }
      set {
        dAmt_ = value;
      }
    }

    /// <summary>Field number for the "d_days" field.</summary>
    public const int DDaysFieldNumber = 172;
    private int dDays_;
    /// <summary>
    /// days to next expected dividend (negative indicates days from a recent ex-date)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DDays {
      get { return dDays_; }
      set {
        dDays_ = value;
      }
    }

    /// <summary>Field number for the "e_days" field.</summary>
    public const int EDaysFieldNumber = 175;
    private int eDays_;
    /// <summary>
    /// days to next expected earnings (negative indicates days from a recent announcement)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EDays {
      get { return eDays_; }
      set {
        eDays_ = value;
      }
    }

    /// <summary>Field number for the "locate_quan" field.</summary>
    public const int LocateQuanFieldNumber = 178;
    private int locateQuan_;
    /// <summary>
    /// starting locate quantity in this symbol befores trades
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LocateQuan {
      get { return locateQuan_; }
      set {
        locateQuan_ = value;
      }
    }

    /// <summary>Field number for the "available_locate_quan" field.</summary>
    public const int AvailableLocateQuanFieldNumber = 181;
    private int availableLocateQuan_;
    /// <summary>
    /// available equity locate quantity in this symbol after trades
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AvailableLocateQuan {
      get { return availableLocateQuan_; }
      set {
        availableLocateQuan_ = value;
      }
    }

    /// <summary>Field number for the "gc_flag" field.</summary>
    public const int GcFlagFieldNumber = 184;
    private global::Spiderrock.Protobuf.YesNo gcFlag_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// is this symbol a general collateral name (no special borrow rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo GcFlag {
      get { return gcFlag_; }
      set {
        gcFlag_ = value;
      }
    }

    /// <summary>Field number for the "gc_rate" field.</summary>
    public const int GcRateFieldNumber = 187;
    private float gcRate_;
    /// <summary>
    /// expected overnight rate if general collateral (usually FF overnight rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GcRate {
      get { return gcRate_; }
      set {
        gcRate_ = value;
      }
    }

    /// <summary>Field number for the "borrow_rate" field.</summary>
    public const int BorrowRateFieldNumber = 190;
    private float borrowRate_;
    /// <summary>
    /// expected overnight borrow rate (special borrrow)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BorrowRate {
      get { return borrowRate_; }
      set {
        borrowRate_ = value;
      }
    }

    /// <summary>Field number for the "st_min_iVol" field.</summary>
    public const int StMinIVolFieldNumber = 193;
    private float stMinIVol_;
    /// <summary>
    /// minimum atm implied volatility (all expirations with a position)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StMinIVol {
      get { return stMinIVol_; }
      set {
        stMinIVol_ = value;
      }
    }

    /// <summary>Field number for the "st_max_iVol" field.</summary>
    public const int StMaxIVolFieldNumber = 196;
    private float stMaxIVol_;
    /// <summary>
    /// maximum atm implied volatility (all expirations with a position)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StMaxIVol {
      get { return stMaxIVol_; }
      set {
        stMaxIVol_ = value;
      }
    }

    /// <summary>Field number for the "earn_mult" field.</summary>
    public const int EarnMultFieldNumber = 199;
    private float earnMult_;
    /// <summary>
    /// expected earnings multiplier (affects some risk slides) [1.0 - 8.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnMult {
      get { return earnMult_; }
      set {
        earnMult_ = value;
      }
    }

    /// <summary>Field number for the "earn_mult_err" field.</summary>
    public const int EarnMultErrFieldNumber = 202;
    private float earnMultErr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnMultErr {
      get { return earnMultErr_; }
      set {
        earnMultErr_ = value;
      }
    }

    /// <summary>Field number for the "base_vol" field.</summary>
    public const int BaseVolFieldNumber = 205;
    private float baseVol_;
    /// <summary>
    /// from earn mult fit (&lt;0.75 yrs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BaseVol {
      get { return baseVol_; }
      set {
        baseVol_ = value;
      }
    }

    /// <summary>Field number for the "tail_vol" field.</summary>
    public const int TailVolFieldNumber = 208;
    private float tailVol_;
    /// <summary>
    /// weighted toward max expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TailVol {
      get { return tailVol_; }
      set {
        tailVol_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 211;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolRiskDetailV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolRiskDetailV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (ClientTags != other.ClientTags) return false;
      if (StkStatus != other.StkStatus) return false;
      if (OptStatus != other.OptStatus) return false;
      if (RiskClass != other.RiskClass) return false;
      if (TheoModel != other.TheoModel) return false;
      if (TheoModel2 != other.TheoModel2) return false;
      if (HedgeDeltaRule != other.HedgeDeltaRule) return false;
      if (HoldReason != other.HoldReason) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BinaryDays, other.BinaryDays)) return false;
      if (!object.Equals(CtrlUpdate, other.CtrlUpdate)) return false;
      if (!object.Equals(PeriodEndTime, other.PeriodEndTime)) return false;
      if (SymbolType != other.SymbolType) return false;
      if (Name != other.Name) return false;
      if (Industry != other.Industry) return false;
      if (Sector != other.Sector) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkVolume, other.StkVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptVolume, other.OptVolume)) return false;
      if (TapeCode != other.TapeCode) return false;
      if (MarginType != other.MarginType) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DAmt, other.DAmt)) return false;
      if (DDays != other.DDays) return false;
      if (EDays != other.EDays) return false;
      if (LocateQuan != other.LocateQuan) return false;
      if (AvailableLocateQuan != other.AvailableLocateQuan) return false;
      if (GcFlag != other.GcFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GcRate, other.GcRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BorrowRate, other.BorrowRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StMinIVol, other.StMinIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StMaxIVol, other.StMaxIVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnMult, other.EarnMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnMultErr, other.EarnMultErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseVol, other.BaseVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TailVol, other.TailVol)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ClientTags.Length != 0) hash ^= ClientTags.GetHashCode();
      if (StkStatus != global::Spiderrock.Protobuf.StkStatus.Unspecified) hash ^= StkStatus.GetHashCode();
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) hash ^= OptStatus.GetHashCode();
      if (RiskClass.Length != 0) hash ^= RiskClass.GetHashCode();
      if (TheoModel.Length != 0) hash ^= TheoModel.GetHashCode();
      if (TheoModel2.Length != 0) hash ^= TheoModel2.GetHashCode();
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) hash ^= HedgeDeltaRule.GetHashCode();
      if (HoldReason != global::Spiderrock.Protobuf.HoldReason.Unspecified) hash ^= HoldReason.GetHashCode();
      if (BinaryDays != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BinaryDays);
      if (ctrlUpdate_ != null) hash ^= CtrlUpdate.GetHashCode();
      if (periodEndTime_ != null) hash ^= PeriodEndTime.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Industry != 0) hash ^= Industry.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (StkVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkVolume);
      if (OptVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptVolume);
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) hash ^= TapeCode.GetHashCode();
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) hash ^= MarginType.GetHashCode();
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (DAmt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DAmt);
      if (DDays != 0) hash ^= DDays.GetHashCode();
      if (EDays != 0) hash ^= EDays.GetHashCode();
      if (LocateQuan != 0) hash ^= LocateQuan.GetHashCode();
      if (AvailableLocateQuan != 0) hash ^= AvailableLocateQuan.GetHashCode();
      if (GcFlag != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= GcFlag.GetHashCode();
      if (GcRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GcRate);
      if (BorrowRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BorrowRate);
      if (StMinIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StMinIVol);
      if (StMaxIVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StMaxIVol);
      if (EarnMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnMult);
      if (EarnMultErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnMultErr);
      if (BaseVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseVol);
      if (TailVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TailVol);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ClientTags.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientTags);
      }
      if (StkStatus != global::Spiderrock.Protobuf.StkStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) StkStatus);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) OptStatus);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(RiskClass);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(TheoModel);
      }
      if (TheoModel2.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(TheoModel2);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) HedgeDeltaRule);
      }
      if (HoldReason != global::Spiderrock.Protobuf.HoldReason.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) HoldReason);
      }
      if (BinaryDays != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(BinaryDays);
      }
      if (ctrlUpdate_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(CtrlUpdate);
      }
      if (periodEndTime_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(PeriodEndTime);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(Name);
      }
      if (Industry != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(Industry);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Sector);
      }
      if (Beta != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) BetaSource);
      }
      if (StkVolume != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(StkVolume);
      }
      if (OptVolume != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(OptVolume);
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) TapeCode);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) MarginType);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) PointCurrency);
      }
      if (DAmt != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(DAmt);
      }
      if (DDays != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(DDays);
      }
      if (EDays != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(EDays);
      }
      if (LocateQuan != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(LocateQuan);
      }
      if (AvailableLocateQuan != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(AvailableLocateQuan);
      }
      if (GcFlag != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) GcFlag);
      }
      if (GcRate != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(GcRate);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(BorrowRate);
      }
      if (StMinIVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(StMinIVol);
      }
      if (StMaxIVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(StMaxIVol);
      }
      if (EarnMult != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(EarnMult);
      }
      if (EarnMultErr != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(EarnMultErr);
      }
      if (BaseVol != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(BaseVol);
      }
      if (TailVol != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(TailVol);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ClientTags.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientTags);
      }
      if (StkStatus != global::Spiderrock.Protobuf.StkStatus.Unspecified) {
        output.WriteRawTag(208, 6);
        output.WriteEnum((int) StkStatus);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) OptStatus);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(RiskClass);
      }
      if (TheoModel.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(TheoModel);
      }
      if (TheoModel2.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(TheoModel2);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) HedgeDeltaRule);
      }
      if (HoldReason != global::Spiderrock.Protobuf.HoldReason.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) HoldReason);
      }
      if (BinaryDays != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(BinaryDays);
      }
      if (ctrlUpdate_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(CtrlUpdate);
      }
      if (periodEndTime_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(PeriodEndTime);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(Name);
      }
      if (Industry != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(Industry);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Sector);
      }
      if (Beta != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) BetaSource);
      }
      if (StkVolume != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(StkVolume);
      }
      if (OptVolume != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(OptVolume);
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) TapeCode);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) MarginType);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) PointCurrency);
      }
      if (DAmt != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(DAmt);
      }
      if (DDays != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(DDays);
      }
      if (EDays != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(EDays);
      }
      if (LocateQuan != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(LocateQuan);
      }
      if (AvailableLocateQuan != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(AvailableLocateQuan);
      }
      if (GcFlag != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) GcFlag);
      }
      if (GcRate != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(GcRate);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(BorrowRate);
      }
      if (StMinIVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(StMinIVol);
      }
      if (StMaxIVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(StMaxIVol);
      }
      if (EarnMult != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(EarnMult);
      }
      if (EarnMultErr != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(EarnMultErr);
      }
      if (BaseVol != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(BaseVol);
      }
      if (TailVol != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(TailVol);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ClientTags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientTags);
      }
      if (StkStatus != global::Spiderrock.Protobuf.StkStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkStatus);
      }
      if (OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptStatus);
      }
      if (RiskClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskClass);
      }
      if (TheoModel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoModel);
      }
      if (TheoModel2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TheoModel2);
      }
      if (HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeDeltaRule);
      }
      if (HoldReason != global::Spiderrock.Protobuf.HoldReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HoldReason);
      }
      if (BinaryDays != 0F) {
        size += 2 + 4;
      }
      if (ctrlUpdate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CtrlUpdate);
      }
      if (periodEndTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PeriodEndTime);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Industry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Industry);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (StkVolume != 0F) {
        size += 2 + 4;
      }
      if (OptVolume != 0F) {
        size += 2 + 4;
      }
      if (TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TapeCode);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarginType);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (DAmt != 0F) {
        size += 2 + 4;
      }
      if (DDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DDays);
      }
      if (EDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EDays);
      }
      if (LocateQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LocateQuan);
      }
      if (AvailableLocateQuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AvailableLocateQuan);
      }
      if (GcFlag != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GcFlag);
      }
      if (GcRate != 0F) {
        size += 2 + 4;
      }
      if (BorrowRate != 0F) {
        size += 2 + 4;
      }
      if (StMinIVol != 0F) {
        size += 2 + 4;
      }
      if (StMaxIVol != 0F) {
        size += 2 + 4;
      }
      if (EarnMult != 0F) {
        size += 2 + 4;
      }
      if (EarnMultErr != 0F) {
        size += 2 + 4;
      }
      if (BaseVol != 0F) {
        size += 2 + 4;
      }
      if (TailVol != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolRiskDetailV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ClientTags.Length != 0) {
        ClientTags = other.ClientTags;
      }
      if (other.StkStatus != global::Spiderrock.Protobuf.StkStatus.Unspecified) {
        StkStatus = other.StkStatus;
      }
      if (other.OptStatus != global::Spiderrock.Protobuf.OptStatus.Unspecified) {
        OptStatus = other.OptStatus;
      }
      if (other.RiskClass.Length != 0) {
        RiskClass = other.RiskClass;
      }
      if (other.TheoModel.Length != 0) {
        TheoModel = other.TheoModel;
      }
      if (other.TheoModel2.Length != 0) {
        TheoModel2 = other.TheoModel2;
      }
      if (other.HedgeDeltaRule != global::Spiderrock.Protobuf.HedgeDeltaRule.Unspecified) {
        HedgeDeltaRule = other.HedgeDeltaRule;
      }
      if (other.HoldReason != global::Spiderrock.Protobuf.HoldReason.Unspecified) {
        HoldReason = other.HoldReason;
      }
      if (other.BinaryDays != 0F) {
        BinaryDays = other.BinaryDays;
      }
      if (other.ctrlUpdate_ != null) {
        if (ctrlUpdate_ == null) {
          CtrlUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CtrlUpdate.MergeFrom(other.CtrlUpdate);
      }
      if (other.periodEndTime_ != null) {
        if (periodEndTime_ == null) {
          PeriodEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PeriodEndTime.MergeFrom(other.PeriodEndTime);
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Industry != 0) {
        Industry = other.Industry;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.StkVolume != 0F) {
        StkVolume = other.StkVolume;
      }
      if (other.OptVolume != 0F) {
        OptVolume = other.OptVolume;
      }
      if (other.TapeCode != global::Spiderrock.Protobuf.TapeCode.Unspecified) {
        TapeCode = other.TapeCode;
      }
      if (other.MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        MarginType = other.MarginType;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.DAmt != 0F) {
        DAmt = other.DAmt;
      }
      if (other.DDays != 0) {
        DDays = other.DDays;
      }
      if (other.EDays != 0) {
        EDays = other.EDays;
      }
      if (other.LocateQuan != 0) {
        LocateQuan = other.LocateQuan;
      }
      if (other.AvailableLocateQuan != 0) {
        AvailableLocateQuan = other.AvailableLocateQuan;
      }
      if (other.GcFlag != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        GcFlag = other.GcFlag;
      }
      if (other.GcRate != 0F) {
        GcRate = other.GcRate;
      }
      if (other.BorrowRate != 0F) {
        BorrowRate = other.BorrowRate;
      }
      if (other.StMinIVol != 0F) {
        StMinIVol = other.StMinIVol;
      }
      if (other.StMaxIVol != 0F) {
        StMaxIVol = other.StMaxIVol;
      }
      if (other.EarnMult != 0F) {
        EarnMult = other.EarnMult;
      }
      if (other.EarnMultErr != 0F) {
        EarnMultErr = other.EarnMultErr;
      }
      if (other.BaseVol != 0F) {
        BaseVol = other.BaseVol;
      }
      if (other.TailVol != 0F) {
        TailVol = other.TailVol;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            ClientTags = input.ReadString();
            break;
          }
          case 848: {
            StkStatus = (global::Spiderrock.Protobuf.StkStatus) input.ReadEnum();
            break;
          }
          case 872: {
            OptStatus = (global::Spiderrock.Protobuf.OptStatus) input.ReadEnum();
            break;
          }
          case 898: {
            RiskClass = input.ReadString();
            break;
          }
          case 922: {
            TheoModel = input.ReadString();
            break;
          }
          case 946: {
            TheoModel2 = input.ReadString();
            break;
          }
          case 968: {
            HedgeDeltaRule = (global::Spiderrock.Protobuf.HedgeDeltaRule) input.ReadEnum();
            break;
          }
          case 992: {
            HoldReason = (global::Spiderrock.Protobuf.HoldReason) input.ReadEnum();
            break;
          }
          case 1021: {
            BinaryDays = input.ReadFloat();
            break;
          }
          case 1042: {
            if (ctrlUpdate_ == null) {
              CtrlUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CtrlUpdate);
            break;
          }
          case 1066: {
            if (periodEndTime_ == null) {
              PeriodEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PeriodEndTime);
            break;
          }
          case 1088: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1114: {
            Name = input.ReadString();
            break;
          }
          case 1136: {
            Industry = input.ReadInt32();
            break;
          }
          case 1162: {
            Sector = input.ReadString();
            break;
          }
          case 1189: {
            Beta = input.ReadFloat();
            break;
          }
          case 1208: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1237: {
            StkVolume = input.ReadFloat();
            break;
          }
          case 1261: {
            OptVolume = input.ReadFloat();
            break;
          }
          case 1280: {
            TapeCode = (global::Spiderrock.Protobuf.TapeCode) input.ReadEnum();
            break;
          }
          case 1304: {
            MarginType = (global::Spiderrock.Protobuf.MarginType) input.ReadEnum();
            break;
          }
          case 1328: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1357: {
            DAmt = input.ReadFloat();
            break;
          }
          case 1376: {
            DDays = input.ReadInt32();
            break;
          }
          case 1400: {
            EDays = input.ReadInt32();
            break;
          }
          case 1424: {
            LocateQuan = input.ReadInt32();
            break;
          }
          case 1448: {
            AvailableLocateQuan = input.ReadInt32();
            break;
          }
          case 1472: {
            GcFlag = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1501: {
            GcRate = input.ReadFloat();
            break;
          }
          case 1525: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 1549: {
            StMinIVol = input.ReadFloat();
            break;
          }
          case 1573: {
            StMaxIVol = input.ReadFloat();
            break;
          }
          case 1597: {
            EarnMult = input.ReadFloat();
            break;
          }
          case 1621: {
            EarnMultErr = input.ReadFloat();
            break;
          }
          case 1645: {
            BaseVol = input.ReadFloat();
            break;
          }
          case 1669: {
            TailVol = input.ReadFloat();
            break;
          }
          case 1690: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SymbolRiskDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            ClientTags = input.ReadString();
            break;
          }
          case 848: {
            StkStatus = (global::Spiderrock.Protobuf.StkStatus) input.ReadEnum();
            break;
          }
          case 872: {
            OptStatus = (global::Spiderrock.Protobuf.OptStatus) input.ReadEnum();
            break;
          }
          case 898: {
            RiskClass = input.ReadString();
            break;
          }
          case 922: {
            TheoModel = input.ReadString();
            break;
          }
          case 946: {
            TheoModel2 = input.ReadString();
            break;
          }
          case 968: {
            HedgeDeltaRule = (global::Spiderrock.Protobuf.HedgeDeltaRule) input.ReadEnum();
            break;
          }
          case 992: {
            HoldReason = (global::Spiderrock.Protobuf.HoldReason) input.ReadEnum();
            break;
          }
          case 1021: {
            BinaryDays = input.ReadFloat();
            break;
          }
          case 1042: {
            if (ctrlUpdate_ == null) {
              CtrlUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CtrlUpdate);
            break;
          }
          case 1066: {
            if (periodEndTime_ == null) {
              PeriodEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PeriodEndTime);
            break;
          }
          case 1088: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1114: {
            Name = input.ReadString();
            break;
          }
          case 1136: {
            Industry = input.ReadInt32();
            break;
          }
          case 1162: {
            Sector = input.ReadString();
            break;
          }
          case 1189: {
            Beta = input.ReadFloat();
            break;
          }
          case 1208: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1237: {
            StkVolume = input.ReadFloat();
            break;
          }
          case 1261: {
            OptVolume = input.ReadFloat();
            break;
          }
          case 1280: {
            TapeCode = (global::Spiderrock.Protobuf.TapeCode) input.ReadEnum();
            break;
          }
          case 1304: {
            MarginType = (global::Spiderrock.Protobuf.MarginType) input.ReadEnum();
            break;
          }
          case 1328: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1357: {
            DAmt = input.ReadFloat();
            break;
          }
          case 1376: {
            DDays = input.ReadInt32();
            break;
          }
          case 1400: {
            EDays = input.ReadInt32();
            break;
          }
          case 1424: {
            LocateQuan = input.ReadInt32();
            break;
          }
          case 1448: {
            AvailableLocateQuan = input.ReadInt32();
            break;
          }
          case 1472: {
            GcFlag = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1501: {
            GcRate = input.ReadFloat();
            break;
          }
          case 1525: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 1549: {
            StMinIVol = input.ReadFloat();
            break;
          }
          case 1573: {
            StMaxIVol = input.ReadFloat();
            break;
          }
          case 1597: {
            EarnMult = input.ReadFloat();
            break;
          }
          case 1621: {
            EarnMultErr = input.ReadFloat();
            break;
          }
          case 1645: {
            BaseVol = input.ReadFloat();
            break;
          }
          case 1669: {
            TailVol = input.ReadFloat();
            break;
          }
          case 1690: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SymbolRiskDetailV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SymbolRiskDetailV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          accnt_ = other.accnt_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 13;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 106: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 106: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
