// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/AccountRiskRecordV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/AccountRiskRecordV5.proto</summary>
  public static partial class AccountRiskRecordV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/AccountRiskRecordV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountRiskRecordV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1Qcm90b2J1Zi9DbGllbnRSaXNrL0FjY291bnRSaXNrUmVjb3JkVjUucHJv",
            "dG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIoIaChNBY2Nv",
            "dW50Umlza1JlY29yZFY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzItLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuQWNjb3VudFJpc2tSZWNvcmRWNS5QS2V5EhgKEHJp",
            "c2tfc2VydmVyX2NvZGUYZyABKAkSEQoJbG5fZERlbHRhGGogASgBEhEKCXNo",
            "X2REZWx0YRhtIAEoARIYChBsbl9zdGtfbWt0X3ZhbHVlGHAgASgBEhgKEHNo",
            "X3N0a19ta3RfdmFsdWUYcyABKAESFQoNZnV0X21rdF92YWx1ZRh2IAEoARIZ",
            "ChFzdGtfb3B0X21rdF92YWx1ZRh5IAEoARIZChFmdXRfb3B0X21rdF92YWx1",
            "ZRh8IAEoARIRCgl2ZWdhX2xvbmcYfyABKAISEwoKdmVnYV9zaG9ydBiCASAB",
            "KAISFAoLd192ZWdhX2xvbmcYhQEgASgCEhUKDHdfdmVnYV9zaG9ydBiIASAB",
            "KAISFQoMd3RfdmVnYV9sb25nGIsBIAEoAhIWCg13dF92ZWdhX3Nob3J0GI4B",
            "IAEoAhITCgp0aGV0YV9sb25nGJEBIAEoAhIUCgt0aGV0YV9zaG9ydBiUASAB",
            "KAISEQoIcmhvX2xvbmcYlwEgASgCEhIKCXJob19zaG9ydBiaASABKAISEAoH",
            "aXZvbF9sbhidASABKAISEAoHaXZvbF9zaBigASABKAISEQoId3RfdmVfZGQY",
            "owEgASgCEhEKCHd0X3ZlX2RuGKYBIAEoAhIRCgh3dF92ZV9hdBipASABKAIS",
            "EQoId3RfdmVfdXAYrAEgASgCEhEKCHd0X3ZlX2R1GK8BIAEoAhIRCgh3dF92",
            "ZV9tMRiyASABKAISEQoId3RfdmVfbTIYtQEgASgCEhEKCHd0X3ZlX20zGLgB",
            "IAEoAhIRCgh3dF92ZV9tNBi7ASABKAISEQoId3RfdmVfbTUYvgEgASgCEg8K",
            "BmRkZWx0YRjBASABKAISFAoLbnVtX3N5bWJvbHMYxAEgASgFEhMKCmFic19j",
            "dXJfc2gYxwEgASgFEhMKCmFic19jdXJfZmMYygEgASgFEhMKCmFic19jdXJf",
            "Y24YzQEgASgFEhQKC3ByZW1fb3ZfcGFyGNABIAEoAhIWCg1vcHRfZXhfYXNf",
            "cG5sGNMBIAEoARIVCgxkaXZpZGVuZF9wbmwY1gEgASgBEhsKEmNvcnBfYWN0",
            "X2Nhc2hfcG5fbBjZASABKAESGAoPc3RrX29wbl9wbmxfbWlkGNwBIAEoARIY",
            "Cg9zdGtfb3BuX3BubF9jbHIY3wEgASgBEhgKD2Z1dF9vcG5fcG5sX21pZBji",
            "ASABKAESGAoPZnV0X29wbl9wbmxfY2xyGOUBIAEoARIcChNzdGtfb3B0X29w",
            "bl9wbmxfdm9sGOgBIAEoARIcChNzdGtfb3B0X29wbl9wbmxfbWlkGOsBIAEo",
            "ARIcChNzdGtfb3B0X29wbl9wbmxfY2xyGO4BIAEoARIcChNmdXRfb3B0X29w",
            "bl9wbmxfdm9sGPEBIAEoARIcChNmdXRfb3B0X29wbl9wbmxfbWlkGPQBIAEo",
            "ARIcChNmdXRfb3B0X29wbl9wbmxfY2xyGPcBIAEoARIUCgtzdGtfZGF5X3Bu",
            "bBj6ASABKAESFAoLZnV0X2RheV9wbmwY/QEgASgBEhgKD3N0a19vcHRfZGF5",
            "X3BubBiAAiABKAESGAoPZnV0X29wdF9kYXlfcG5sGIMCIAEoARIUCgtzdGt0",
            "X2RheV9zaBiGAiABKAUSFAoLc3RrX2RheV9tbnkYiQIgASgBEhMKCmZ1dF9k",
            "YXlfY24YjAIgASgFEhQKC2Z1dF9kYXlfbW55GI8CIAEoARIXCg5zdGtfb3B0",
            "X2RheV9jbhiSAiABKAUSGAoPc3RrX29wdF9kYXlfbW55GJUCIAEoARIXCg5m",
            "dXRfb3B0X2RheV9jbhiYAiABKAUSGAoPZnV0X29wdF9kYXlfbW55GJsCIAEo",
            "ARITCgpkYXlfZERlbHRhGJ4CIAEoAhIUCgtvcF9kYXlfdmVnYRihAiABKAIS",
            "FQoMb3BfZGF5X3dWZWdhGKQCIAEoAhIVCgxvcF9kYXlfdFZlZ2EYpwIgASgC",
            "EhcKDm9wX2RheV93dF92ZWdhGKoCIAEoAhIVCgxvcF9kYXlfdGhldGEYrQIg",
            "ASgCEhcKDm9wX2VkZ2Vfb3BlbmVkGLACIAEoAhIXCg5vcF9lZGdlX2Nsb3Nl",
            "ZBizAiABKAISDwoGcG5sX2RuGLYCIAEoAhIPCgZwbmxfZGUYuQIgASgCEg8K",
            "BnBubF9zbBi8AiABKAISDwoGcG5sX2dhGL8CIAEoAhIPCgZwbmxfdGgYwgIg",
            "ASgCEg8KBnBubF92ZRjFAiABKAISDwoGcG5sX3ZvGMgCIAEoAhIPCgZwbmxf",
            "dmEYywIgASgCEhEKCHBubF9kRGl2GM4CIAEoAhIRCghwbmxfc0RpdhjRAiAB",
            "KAISEQoIcG5sX3JhdGUY1AIgASgCEhAKB3BubF9lcnIY1wIgASgCEg8KBnBu",
            "bF90ZRjaAiABKAISDwoGcG5sX2xuGN0CIAEoAhIPCgZwbmxfc2gY4AIgASgC",
            "Eg8KBnRfZWRnZRjjAiABKAISFAoLdF9lZGdlX211bHQY5gIgASgCEhYKDXBv",
            "c190RWRnZV9wbmwY6QIgASgCEhYKDW5lZ190RWRnZV9wbmwY7AIgASgCEhYK",
            "DWJhZF90RWRnZV9wbmwY7wIgASgCEhEKCHZhX3JzdTkwGPICIAEoAhIRCgh2",
            "YV9yc2Q5MBj1AiABKAISEQoIdmFfcnN1NTAY+AIgASgCEhEKCHZhX3JzZDUw",
            "GPsCIAEoAhIRCgh2YV9yc3UxNRj+AiABKAISEQoIdmFfcnNkMTUYgQMgASgC",
            "EhEKCHZhX3JzdTEwGIQDIAEoAhIRCgh2YV9yc2QxMBiHAyABKAISEQoIdmFf",
            "cnN1MDUYigMgASgCEhEKCHZhX3JzZDA1GI0DIAEoAhIRCgh2YV9yc3UxZRiQ",
            "AyABKAISEQoIdmFfcnNkMWUYkwMgASgCEhEKCHZhX3JzdTJlGJYDIAEoAhIR",
            "Cgh2YV9yc2QyZRiZAyABKAISEQoIdmFfcmVhcm4YnAMgASgCEhEKCHZhX3Jj",
            "YXNoGJ8DIAEoAhIPCgZoY19jbnQYogMgASgCEhIKCWhhaXJjdXQyNRilAyAB",
            "KAISEgoJaGFpcmN1dDM3GKgDIAEoAhIXCg5vcHRfY25fbWluaW11bRirAyAB",
            "KAISDwoGc3BhbjAxGK4DIAEoAhIPCgZzcGFuMDIYsQMgASgCEg8KBnNwYW4w",
            "Mxi0AyABKAISDwoGc3BhbjA0GLcDIAEoAhIPCgZzcGFuMDUYugMgASgCEg8K",
            "BnNwYW4wNhi9AyABKAISDwoGc3BhbjA3GMADIAEoAhIPCgZzcGFuMDgYwwMg",
            "ASgCEg8KBnNwYW4wORjGAyABKAISDwoGc3BhbjEwGMkDIAEoAhIPCgZzcGFu",
            "MTEYzAMgASgCEg8KBnNwYW4xMhjPAyABKAISDwoGc3BhbjEzGNIDIAEoAhIP",
            "CgZzcGFuMTQY1QMgASgCEg8KBnNwYW4xNRjYAyABKAISDwoGc3BhbjE2GNsD",
            "IAEoAhIUCgt3b3JzdDNfcmlzaxjeAyABKAISMwoKd29yc3Rfc3ltMRjhAyAB",
            "KAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLlRpY2tlcktleRIzCgp3b3JzdF9z",
            "eW0yGOQDIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EjMK",
            "CndvcnN0X3N5bTMY5wMgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNr",
            "ZXJLZXkSFQoMc3RrX2xpcV9yaXNrGOoDIAEoAhIVCgxmdXRfbGlxX3Jpc2sY",
            "7QMgASgCEhUKDG9wdF9saXFfcmlzaxjwAyABKAISFwoOc3Jfcmlza19tYXJn",
            "aW4Y8wMgASgCEjIKDWxhc3RfYWN0aXZpdHkY9gMgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIuCgl0aW1lc3RhbXAY+QMgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBrFAQoEUEtleRINCgVhY2NudBgKIAEoCRIv",
            "CghjdXJyZW5jeRgLIAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuQ3VycmVu",
            "Y3kSMAoKdHJhZGVfZGF0ZRgMIAEoCzIcLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "RGF0ZUtleRI2CgxyaXNrX3Nlc3Npb24YDSABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlJpc2tTZXNzaW9uEhMKC2NsaWVudF9maXJtGA4gASgJYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AccountRiskRecordV5), global::Spiderrock.Protobuf.AccountRiskRecordV5.Parser, new[]{ "Meta", "Pkey", "RiskServerCode", "LnDDelta", "ShDDelta", "LnStkMktValue", "ShStkMktValue", "FutMktValue", "StkOptMktValue", "FutOptMktValue", "VegaLong", "VegaShort", "WVegaLong", "WVegaShort", "WtVegaLong", "WtVegaShort", "ThetaLong", "ThetaShort", "RhoLong", "RhoShort", "IvolLn", "IvolSh", "WtVeDd", "WtVeDn", "WtVeAt", "WtVeUp", "WtVeDu", "WtVeM1", "WtVeM2", "WtVeM3", "WtVeM4", "WtVeM5", "Ddelta", "NumSymbols", "AbsCurSh", "AbsCurFc", "AbsCurCn", "PremOvPar", "OptExAsPnl", "DividendPnl", "CorpActCashPnL", "StkOpnPnlMid", "StkOpnPnlClr", "FutOpnPnlMid", "FutOpnPnlClr", "StkOptOpnPnlVol", "StkOptOpnPnlMid", "StkOptOpnPnlClr", "FutOptOpnPnlVol", "FutOptOpnPnlMid", "FutOptOpnPnlClr", "StkDayPnl", "FutDayPnl", "StkOptDayPnl", "FutOptDayPnl", "StktDaySh", "StkDayMny", "FutDayCn", "FutDayMny", "StkOptDayCn", "StkOptDayMny", "FutOptDayCn", "FutOptDayMny", "DayDDelta", "OpDayVega", "OpDayWVega", "OpDayTVega", "OpDayWtVega", "OpDayTheta", "OpEdgeOpened", "OpEdgeClosed", "PnlDn", "PnlDe", "PnlSl", "PnlGa", "PnlTh", "PnlVe", "PnlVo", "PnlVa", "PnlDDiv", "PnlSDiv", "PnlRate", "PnlErr", "PnlTe", "PnlLn", "PnlSh", "TEdge", "TEdgeMult", "PosTEdgePnl", "NegTEdgePnl", "BadTEdgePnl", "VaRsu90", "VaRsd90", "VaRsu50", "VaRsd50", "VaRsu15", "VaRsd15", "VaRsu10", "VaRsd10", "VaRsu05", "VaRsd05", "VaRsu1E", "VaRsd1E", "VaRsu2E", "VaRsd2E", "VaRearn", "VaRcash", "HcCnt", "Haircut25", "Haircut37", "OptCnMinimum", "Span01", "Span02", "Span03", "Span04", "Span05", "Span06", "Span07", "Span08", "Span09", "Span10", "Span11", "Span12", "Span13", "Span14", "Span15", "Span16", "Worst3Risk", "WorstSym1", "WorstSym2", "WorstSym3", "StkLiqRisk", "FutLiqRisk", "OptLiqRisk", "SrRiskMargin", "LastActivity", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey), global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey.Parser, new[]{ "Accnt", "Currency", "TradeDate", "RiskSession", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///AccountRiskRecords contain account level position and risk summary detail. These records are published by AggRiskServers throughout the day approximately once per minute.
  /// </summary>
  public sealed partial class AccountRiskRecordV5 : pb::IMessage<AccountRiskRecordV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountRiskRecordV5> _parser = new pb::MessageParser<AccountRiskRecordV5>(() => new AccountRiskRecordV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccountRiskRecordV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.AccountRiskRecordV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountRiskRecordV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountRiskRecordV5(AccountRiskRecordV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      riskServerCode_ = other.riskServerCode_;
      lnDDelta_ = other.lnDDelta_;
      shDDelta_ = other.shDDelta_;
      lnStkMktValue_ = other.lnStkMktValue_;
      shStkMktValue_ = other.shStkMktValue_;
      futMktValue_ = other.futMktValue_;
      stkOptMktValue_ = other.stkOptMktValue_;
      futOptMktValue_ = other.futOptMktValue_;
      vegaLong_ = other.vegaLong_;
      vegaShort_ = other.vegaShort_;
      wVegaLong_ = other.wVegaLong_;
      wVegaShort_ = other.wVegaShort_;
      wtVegaLong_ = other.wtVegaLong_;
      wtVegaShort_ = other.wtVegaShort_;
      thetaLong_ = other.thetaLong_;
      thetaShort_ = other.thetaShort_;
      rhoLong_ = other.rhoLong_;
      rhoShort_ = other.rhoShort_;
      ivolLn_ = other.ivolLn_;
      ivolSh_ = other.ivolSh_;
      wtVeDd_ = other.wtVeDd_;
      wtVeDn_ = other.wtVeDn_;
      wtVeAt_ = other.wtVeAt_;
      wtVeUp_ = other.wtVeUp_;
      wtVeDu_ = other.wtVeDu_;
      wtVeM1_ = other.wtVeM1_;
      wtVeM2_ = other.wtVeM2_;
      wtVeM3_ = other.wtVeM3_;
      wtVeM4_ = other.wtVeM4_;
      wtVeM5_ = other.wtVeM5_;
      ddelta_ = other.ddelta_;
      numSymbols_ = other.numSymbols_;
      absCurSh_ = other.absCurSh_;
      absCurFc_ = other.absCurFc_;
      absCurCn_ = other.absCurCn_;
      premOvPar_ = other.premOvPar_;
      optExAsPnl_ = other.optExAsPnl_;
      dividendPnl_ = other.dividendPnl_;
      corpActCashPnL_ = other.corpActCashPnL_;
      stkOpnPnlMid_ = other.stkOpnPnlMid_;
      stkOpnPnlClr_ = other.stkOpnPnlClr_;
      futOpnPnlMid_ = other.futOpnPnlMid_;
      futOpnPnlClr_ = other.futOpnPnlClr_;
      stkOptOpnPnlVol_ = other.stkOptOpnPnlVol_;
      stkOptOpnPnlMid_ = other.stkOptOpnPnlMid_;
      stkOptOpnPnlClr_ = other.stkOptOpnPnlClr_;
      futOptOpnPnlVol_ = other.futOptOpnPnlVol_;
      futOptOpnPnlMid_ = other.futOptOpnPnlMid_;
      futOptOpnPnlClr_ = other.futOptOpnPnlClr_;
      stkDayPnl_ = other.stkDayPnl_;
      futDayPnl_ = other.futDayPnl_;
      stkOptDayPnl_ = other.stkOptDayPnl_;
      futOptDayPnl_ = other.futOptDayPnl_;
      stktDaySh_ = other.stktDaySh_;
      stkDayMny_ = other.stkDayMny_;
      futDayCn_ = other.futDayCn_;
      futDayMny_ = other.futDayMny_;
      stkOptDayCn_ = other.stkOptDayCn_;
      stkOptDayMny_ = other.stkOptDayMny_;
      futOptDayCn_ = other.futOptDayCn_;
      futOptDayMny_ = other.futOptDayMny_;
      dayDDelta_ = other.dayDDelta_;
      opDayVega_ = other.opDayVega_;
      opDayWVega_ = other.opDayWVega_;
      opDayTVega_ = other.opDayTVega_;
      opDayWtVega_ = other.opDayWtVega_;
      opDayTheta_ = other.opDayTheta_;
      opEdgeOpened_ = other.opEdgeOpened_;
      opEdgeClosed_ = other.opEdgeClosed_;
      pnlDn_ = other.pnlDn_;
      pnlDe_ = other.pnlDe_;
      pnlSl_ = other.pnlSl_;
      pnlGa_ = other.pnlGa_;
      pnlTh_ = other.pnlTh_;
      pnlVe_ = other.pnlVe_;
      pnlVo_ = other.pnlVo_;
      pnlVa_ = other.pnlVa_;
      pnlDDiv_ = other.pnlDDiv_;
      pnlSDiv_ = other.pnlSDiv_;
      pnlRate_ = other.pnlRate_;
      pnlErr_ = other.pnlErr_;
      pnlTe_ = other.pnlTe_;
      pnlLn_ = other.pnlLn_;
      pnlSh_ = other.pnlSh_;
      tEdge_ = other.tEdge_;
      tEdgeMult_ = other.tEdgeMult_;
      posTEdgePnl_ = other.posTEdgePnl_;
      negTEdgePnl_ = other.negTEdgePnl_;
      badTEdgePnl_ = other.badTEdgePnl_;
      vaRsu90_ = other.vaRsu90_;
      vaRsd90_ = other.vaRsd90_;
      vaRsu50_ = other.vaRsu50_;
      vaRsd50_ = other.vaRsd50_;
      vaRsu15_ = other.vaRsu15_;
      vaRsd15_ = other.vaRsd15_;
      vaRsu10_ = other.vaRsu10_;
      vaRsd10_ = other.vaRsd10_;
      vaRsu05_ = other.vaRsu05_;
      vaRsd05_ = other.vaRsd05_;
      vaRsu1E_ = other.vaRsu1E_;
      vaRsd1E_ = other.vaRsd1E_;
      vaRsu2E_ = other.vaRsu2E_;
      vaRsd2E_ = other.vaRsd2E_;
      vaRearn_ = other.vaRearn_;
      vaRcash_ = other.vaRcash_;
      hcCnt_ = other.hcCnt_;
      haircut25_ = other.haircut25_;
      haircut37_ = other.haircut37_;
      optCnMinimum_ = other.optCnMinimum_;
      span01_ = other.span01_;
      span02_ = other.span02_;
      span03_ = other.span03_;
      span04_ = other.span04_;
      span05_ = other.span05_;
      span06_ = other.span06_;
      span07_ = other.span07_;
      span08_ = other.span08_;
      span09_ = other.span09_;
      span10_ = other.span10_;
      span11_ = other.span11_;
      span12_ = other.span12_;
      span13_ = other.span13_;
      span14_ = other.span14_;
      span15_ = other.span15_;
      span16_ = other.span16_;
      worst3Risk_ = other.worst3Risk_;
      worstSym1_ = other.worstSym1_ != null ? other.worstSym1_.Clone() : null;
      worstSym2_ = other.worstSym2_ != null ? other.worstSym2_.Clone() : null;
      worstSym3_ = other.worstSym3_ != null ? other.worstSym3_.Clone() : null;
      stkLiqRisk_ = other.stkLiqRisk_;
      futLiqRisk_ = other.futLiqRisk_;
      optLiqRisk_ = other.optLiqRisk_;
      srRiskMargin_ = other.srRiskMargin_;
      lastActivity_ = other.lastActivity_ != null ? other.lastActivity_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountRiskRecordV5 Clone() {
      return new AccountRiskRecordV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 103;
    private string riskServerCode_ = "";
    /// <summary>
    /// risk server that published this record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ln_dDelta" field.</summary>
    public const int LnDDeltaFieldNumber = 106;
    private double lnDDelta_;
    /// <summary>
    /// long net position $delta value (underlier + options) (today; SR marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LnDDelta {
      get { return lnDDelta_; }
      set {
        lnDDelta_ = value;
      }
    }

    /// <summary>Field number for the "sh_dDelta" field.</summary>
    public const int ShDDeltaFieldNumber = 109;
    private double shDDelta_;
    /// <summary>
    /// short net position $delta value (underlier + options) (today; SR marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ShDDelta {
      get { return shDDelta_; }
      set {
        shDDelta_ = value;
      }
    }

    /// <summary>Field number for the "ln_stk_mkt_value" field.</summary>
    public const int LnStkMktValueFieldNumber = 112;
    private double lnStkMktValue_;
    /// <summary>
    /// long stock market value (today; SR marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LnStkMktValue {
      get { return lnStkMktValue_; }
      set {
        lnStkMktValue_ = value;
      }
    }

    /// <summary>Field number for the "sh_stk_mkt_value" field.</summary>
    public const int ShStkMktValueFieldNumber = 115;
    private double shStkMktValue_;
    /// <summary>
    /// short stock market value (today; SR marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ShStkMktValue {
      get { return shStkMktValue_; }
      set {
        shStkMktValue_ = value;
      }
    }

    /// <summary>Field number for the "fut_mkt_value" field.</summary>
    public const int FutMktValueFieldNumber = 118;
    private double futMktValue_;
    /// <summary>
    /// future market value (today; SR marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutMktValue {
      get { return futMktValue_; }
      set {
        futMktValue_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_mkt_value" field.</summary>
    public const int StkOptMktValueFieldNumber = 121;
    private double stkOptMktValue_;
    /// <summary>
    /// stock option market value (today; SR vol marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptMktValue {
      get { return stkOptMktValue_; }
      set {
        stkOptMktValue_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_mkt_value" field.</summary>
    public const int FutOptMktValueFieldNumber = 124;
    private double futOptMktValue_;
    /// <summary>
    /// future option market value (today; SR vol marks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptMktValue {
      get { return futOptMktValue_; }
      set {
        futOptMktValue_ = value;
      }
    }

    /// <summary>Field number for the "vega_long" field.</summary>
    public const int VegaLongFieldNumber = 127;
    private float vegaLong_;
    /// <summary>
    /// sum of long vega symbol positions;=sum(+srs.vega) if srs.vega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VegaLong {
      get { return vegaLong_; }
      set {
        vegaLong_ = value;
      }
    }

    /// <summary>Field number for the "vega_short" field.</summary>
    public const int VegaShortFieldNumber = 130;
    private float vegaShort_;
    /// <summary>
    /// sum of short vega symbol positions;= sum(-srs.vega) if srs.vega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VegaShort {
      get { return vegaShort_; }
      set {
        vegaShort_ = value;
      }
    }

    /// <summary>Field number for the "w_vega_long" field.</summary>
    public const int WVegaLongFieldNumber = 133;
    private float wVegaLong_;
    /// <summary>
    /// sum of long weighted vega symbol positions;=sum(+srs.wVega) if srs.wVega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WVegaLong {
      get { return wVegaLong_; }
      set {
        wVegaLong_ = value;
      }
    }

    /// <summary>Field number for the "w_vega_short" field.</summary>
    public const int WVegaShortFieldNumber = 136;
    private float wVegaShort_;
    /// <summary>
    /// sum of short weighted vega symbol positions;= sum(-srs.wVega) if srs.wVega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WVegaShort {
      get { return wVegaShort_; }
      set {
        wVegaShort_ = value;
      }
    }

    /// <summary>Field number for the "wt_vega_long" field.</summary>
    public const int WtVegaLongFieldNumber = 139;
    private float wtVegaLong_;
    /// <summary>
    /// sum of long time weighted weighted vega symbol positions;=sum(+srs.wtVega) if srs.wtVega > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVegaLong {
      get { return wtVegaLong_; }
      set {
        wtVegaLong_ = value;
      }
    }

    /// <summary>Field number for the "wt_vega_short" field.</summary>
    public const int WtVegaShortFieldNumber = 142;
    private float wtVegaShort_;
    /// <summary>
    /// sum of short time weighted vega symbol positions;= sum(-srs.wtVega) if srs.wtVega &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVegaShort {
      get { return wtVegaShort_; }
      set {
        wtVegaShort_ = value;
      }
    }

    /// <summary>Field number for the "theta_long" field.</summary>
    public const int ThetaLongFieldNumber = 145;
    private float thetaLong_;
    /// <summary>
    /// sum of long vega symbol positions;=sum(+srs.theta) if srs.theta > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThetaLong {
      get { return thetaLong_; }
      set {
        thetaLong_ = value;
      }
    }

    /// <summary>Field number for the "theta_short" field.</summary>
    public const int ThetaShortFieldNumber = 148;
    private float thetaShort_;
    /// <summary>
    /// sum of short vega symbol positions;= sum(-srs.theta) if srs.theta &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ThetaShort {
      get { return thetaShort_; }
      set {
        thetaShort_ = value;
      }
    }

    /// <summary>Field number for the "rho_long" field.</summary>
    public const int RhoLongFieldNumber = 151;
    private float rhoLong_;
    /// <summary>
    /// sum of long rho symbol positions;=sum(+srs.rho) if srs.rho > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RhoLong {
      get { return rhoLong_; }
      set {
        rhoLong_ = value;
      }
    }

    /// <summary>Field number for the "rho_short" field.</summary>
    public const int RhoShortFieldNumber = 154;
    private float rhoShort_;
    /// <summary>
    /// sum of short rho symbol positions;= sum(-srs.rho) if srs.rho &lt; 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RhoShort {
      get { return rhoShort_; }
      set {
        rhoShort_ = value;
      }
    }

    /// <summary>Field number for the "ivol_ln" field.</summary>
    public const int IvolLnFieldNumber = 157;
    private float ivolLn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolLn {
      get { return ivolLn_; }
      set {
        ivolLn_ = value;
      }
    }

    /// <summary>Field number for the "ivol_sh" field.</summary>
    public const int IvolShFieldNumber = 160;
    private float ivolSh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IvolSh {
      get { return ivolSh_; }
      set {
        ivolSh_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dd" field.</summary>
    public const int WtVeDdFieldNumber = 163;
    private float wtVeDd_;
    /// <summary>
    /// Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde &lt; -0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDd {
      get { return wtVeDd_; }
      set {
        wtVeDd_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_dn" field.</summary>
    public const int WtVeDnFieldNumber = 166;
    private float wtVeDn_;
    /// <summary>
    /// Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 &lt;= opr.xde &lt; -0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDn {
      get { return wtVeDn_; }
      set {
        wtVeDn_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_at" field.</summary>
    public const int WtVeAtFieldNumber = 169;
    private float wtVeAt_;
    /// <summary>
    /// Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) &lt;= 0.10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeAt {
      get { return wtVeAt_; }
      set {
        wtVeAt_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_up" field.</summary>
    public const int WtVeUpFieldNumber = 172;
    private float wtVeUp_;
    /// <summary>
    /// Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 &lt; opr.xde &lt;= +0.30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeUp {
      get { return wtVeUp_; }
      set {
        wtVeUp_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_du" field.</summary>
    public const int WtVeDuFieldNumber = 175;
    private float wtVeDu_;
    /// <summary>
    /// Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 &lt; opr.xde
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeDu {
      get { return wtVeDu_; }
      set {
        wtVeDu_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m1" field.</summary>
    public const int WtVeM1FieldNumber = 178;
    private float wtVeM1_;
    /// <summary>
    /// Aggregate M1 Time Weighted Vega;=sum[wtVega] if days &lt; 10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM1 {
      get { return wtVeM1_; }
      set {
        wtVeM1_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m2" field.</summary>
    public const int WtVeM2FieldNumber = 181;
    private float wtVeM2_;
    /// <summary>
    /// Aggregate M2 Time Weighted Vega;=sum[wtVega] if 10 &lt; days &lt; 25
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM2 {
      get { return wtVeM2_; }
      set {
        wtVeM2_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m3" field.</summary>
    public const int WtVeM3FieldNumber = 184;
    private float wtVeM3_;
    /// <summary>
    /// Aggregate M3 Time Weighted Vega;=sum[wtVega] if 25 &lt; days &lt; 65
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM3 {
      get { return wtVeM3_; }
      set {
        wtVeM3_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m4" field.</summary>
    public const int WtVeM4FieldNumber = 187;
    private float wtVeM4_;
    /// <summary>
    /// Aggregate M4 Time Weighted Vega;=sum[wtVega] if 65 &lt; days &lt; 130
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM4 {
      get { return wtVeM4_; }
      set {
        wtVeM4_ = value;
      }
    }

    /// <summary>Field number for the "wt_ve_m5" field.</summary>
    public const int WtVeM5FieldNumber = 190;
    private float wtVeM5_;
    /// <summary>
    /// Aggregate M5 Time Weighted Vega;=sum[wtVega] if 130 &lt; days
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WtVeM5 {
      get { return wtVeM5_; }
      set {
        wtVeM5_ = value;
      }
    }

    /// <summary>Field number for the "ddelta" field.</summary>
    public const int DdeltaFieldNumber = 193;
    private float ddelta_;
    /// <summary>
    /// net $delta;=sum(srs.ddelta)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddelta {
      get { return ddelta_; }
      set {
        ddelta_ = value;
      }
    }

    /// <summary>Field number for the "num_symbols" field.</summary>
    public const int NumSymbolsFieldNumber = 196;
    private int numSymbols_;
    /// <summary>
    /// count of srs records being aggregated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumSymbols {
      get { return numSymbols_; }
      set {
        numSymbols_ = value;
      }
    }

    /// <summary>Field number for the "abs_cur_sh" field.</summary>
    public const int AbsCurShFieldNumber = 199;
    private int absCurSh_;
    /// <summary>
    /// absolute number of account shares (CLR + trades);=sum(srs.opShAbsCur)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsCurSh {
      get { return absCurSh_; }
      set {
        absCurSh_ = value;
      }
    }

    /// <summary>Field number for the "abs_cur_fc" field.</summary>
    public const int AbsCurFcFieldNumber = 202;
    private int absCurFc_;
    /// <summary>
    /// absolute number of account future contracts (CLR + trades);=sum(srs.opFcAbsCur)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsCurFc {
      get { return absCurFc_; }
      set {
        absCurFc_ = value;
      }
    }

    /// <summary>Field number for the "abs_cur_cn" field.</summary>
    public const int AbsCurCnFieldNumber = 205;
    private int absCurCn_;
    /// <summary>
    /// absolute number of account option contracts (CLR + trades);=sum(srs.opCnAbsCur)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsCurCn {
      get { return absCurCn_; }
      set {
        absCurCn_ = value;
      }
    }

    /// <summary>Field number for the "prem_ov_par" field.</summary>
    public const int PremOvParFieldNumber = 208;
    private float premOvPar_;
    /// <summary>
    /// aggregate premium over parity for the option position;=sum(srs.premOvPar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PremOvPar {
      get { return premOvPar_; }
      set {
        premOvPar_ = value;
      }
    }

    /// <summary>Field number for the "opt_ex_as_pnl" field.</summary>
    public const int OptExAsPnlFieldNumber = 211;
    private double optExAsPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptExAsPnl {
      get { return optExAsPnl_; }
      set {
        optExAsPnl_ = value;
      }
    }

    /// <summary>Field number for the "dividend_pnl" field.</summary>
    public const int DividendPnlFieldNumber = 214;
    private double dividendPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DividendPnl {
      get { return dividendPnl_; }
      set {
        dividendPnl_ = value;
      }
    }

    /// <summary>Field number for the "corp_act_cash_pn_l" field.</summary>
    public const int CorpActCashPnLFieldNumber = 217;
    private double corpActCashPnL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CorpActCashPnL {
      get { return corpActCashPnL_; }
      set {
        corpActCashPnL_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pnl_mid" field.</summary>
    public const int StkOpnPnlMidFieldNumber = 220;
    private double stkOpnPnlMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOpnPnlMid {
      get { return stkOpnPnlMid_; }
      set {
        stkOpnPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pnl_clr" field.</summary>
    public const int StkOpnPnlClrFieldNumber = 223;
    private double stkOpnPnlClr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOpnPnlClr {
      get { return stkOpnPnlClr_; }
      set {
        stkOpnPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pnl_mid" field.</summary>
    public const int FutOpnPnlMidFieldNumber = 226;
    private double futOpnPnlMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOpnPnlMid {
      get { return futOpnPnlMid_; }
      set {
        futOpnPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pnl_clr" field.</summary>
    public const int FutOpnPnlClrFieldNumber = 229;
    private double futOpnPnlClr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOpnPnlClr {
      get { return futOpnPnlClr_; }
      set {
        futOpnPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_opn_pnl_vol" field.</summary>
    public const int StkOptOpnPnlVolFieldNumber = 232;
    private double stkOptOpnPnlVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptOpnPnlVol {
      get { return stkOptOpnPnlVol_; }
      set {
        stkOptOpnPnlVol_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_opn_pnl_mid" field.</summary>
    public const int StkOptOpnPnlMidFieldNumber = 235;
    private double stkOptOpnPnlMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptOpnPnlMid {
      get { return stkOptOpnPnlMid_; }
      set {
        stkOptOpnPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_opn_pnl_clr" field.</summary>
    public const int StkOptOpnPnlClrFieldNumber = 238;
    private double stkOptOpnPnlClr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptOpnPnlClr {
      get { return stkOptOpnPnlClr_; }
      set {
        stkOptOpnPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_opn_pnl_vol" field.</summary>
    public const int FutOptOpnPnlVolFieldNumber = 241;
    private double futOptOpnPnlVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptOpnPnlVol {
      get { return futOptOpnPnlVol_; }
      set {
        futOptOpnPnlVol_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_opn_pnl_mid" field.</summary>
    public const int FutOptOpnPnlMidFieldNumber = 244;
    private double futOptOpnPnlMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptOpnPnlMid {
      get { return futOptOpnPnlMid_; }
      set {
        futOptOpnPnlMid_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_opn_pnl_clr" field.</summary>
    public const int FutOptOpnPnlClrFieldNumber = 247;
    private double futOptOpnPnlClr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptOpnPnlClr {
      get { return futOptOpnPnlClr_; }
      set {
        futOptOpnPnlClr_ = value;
      }
    }

    /// <summary>Field number for the "stk_day_pnl" field.</summary>
    public const int StkDayPnlFieldNumber = 250;
    private double stkDayPnl_;
    /// <summary>
    /// stock day pnl;=sum(srs.stPnlDay)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkDayPnl {
      get { return stkDayPnl_; }
      set {
        stkDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "fut_day_pnl" field.</summary>
    public const int FutDayPnlFieldNumber = 253;
    private double futDayPnl_;
    /// <summary>
    /// futures day pnl;=sum(srs.fcPnlDay)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutDayPnl {
      get { return futDayPnl_; }
      set {
        futDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_day_pnl" field.</summary>
    public const int StkOptDayPnlFieldNumber = 256;
    private double stkOptDayPnl_;
    /// <summary>
    /// stock option day pnl;= sum(srs.opPnlDay)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptDayPnl {
      get { return stkOptDayPnl_; }
      set {
        stkOptDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_day_pnl" field.</summary>
    public const int FutOptDayPnlFieldNumber = 259;
    private double futOptDayPnl_;
    /// <summary>
    /// future option day pnl;= sum(srs.opPnlDay)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptDayPnl {
      get { return futOptDayPnl_; }
      set {
        futOptDayPnl_ = value;
      }
    }

    /// <summary>Field number for the "stkt_day_sh" field.</summary>
    public const int StktDayShFieldNumber = 262;
    private int stktDaySh_;
    /// <summary>
    /// stock day shares (bot + sld);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StktDaySh {
      get { return stktDaySh_; }
      set {
        stktDaySh_ = value;
      }
    }

    /// <summary>Field number for the "stk_day_mny" field.</summary>
    public const int StkDayMnyFieldNumber = 265;
    private double stkDayMny_;
    /// <summary>
    /// stock day mny (sld - bot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkDayMny {
      get { return stkDayMny_; }
      set {
        stkDayMny_ = value;
      }
    }

    /// <summary>Field number for the "fut_day_cn" field.</summary>
    public const int FutDayCnFieldNumber = 268;
    private int futDayCn_;
    /// <summary>
    /// future day contracts (bot + sld);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FutDayCn {
      get { return futDayCn_; }
      set {
        futDayCn_ = value;
      }
    }

    /// <summary>Field number for the "fut_day_mny" field.</summary>
    public const int FutDayMnyFieldNumber = 271;
    private double futDayMny_;
    /// <summary>
    /// future day mny (sld - bot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutDayMny {
      get { return futDayMny_; }
      set {
        futDayMny_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_day_cn" field.</summary>
    public const int StkOptDayCnFieldNumber = 274;
    private int stkOptDayCn_;
    /// <summary>
    /// stock option day contracts (bot + sld);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StkOptDayCn {
      get { return stkOptDayCn_; }
      set {
        stkOptDayCn_ = value;
      }
    }

    /// <summary>Field number for the "stk_opt_day_mny" field.</summary>
    public const int StkOptDayMnyFieldNumber = 277;
    private double stkOptDayMny_;
    /// <summary>
    /// stock option day mny (sld - bot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOptDayMny {
      get { return stkOptDayMny_; }
      set {
        stkOptDayMny_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_day_cn" field.</summary>
    public const int FutOptDayCnFieldNumber = 280;
    private int futOptDayCn_;
    /// <summary>
    /// future option day contracts (bot + sld);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FutOptDayCn {
      get { return futOptDayCn_; }
      set {
        futOptDayCn_ = value;
      }
    }

    /// <summary>Field number for the "fut_opt_day_mny" field.</summary>
    public const int FutOptDayMnyFieldNumber = 283;
    private double futOptDayMny_;
    /// <summary>
    /// future option day mny (sld - bot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOptDayMny {
      get { return futOptDayMny_; }
      set {
        futOptDayMny_ = value;
      }
    }

    /// <summary>Field number for the "day_dDelta" field.</summary>
    public const int DayDDeltaFieldNumber = 286;
    private float dayDDelta_;
    /// <summary>
    /// day $delta;= sum(srs.dayDelta)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayDDelta {
      get { return dayDDelta_; }
      set {
        dayDDelta_ = value;
      }
    }

    /// <summary>Field number for the "op_day_vega" field.</summary>
    public const int OpDayVegaFieldNumber = 289;
    private float opDayVega_;
    /// <summary>
    /// option vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayVega {
      get { return opDayVega_; }
      set {
        opDayVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wVega" field.</summary>
    public const int OpDayWVegaFieldNumber = 292;
    private float opDayWVega_;
    /// <summary>
    /// option (vol weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWVega {
      get { return opDayWVega_; }
      set {
        opDayWVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_tVega" field.</summary>
    public const int OpDayTVegaFieldNumber = 295;
    private float opDayTVega_;
    /// <summary>
    /// option (time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTVega {
      get { return opDayTVega_; }
      set {
        opDayTVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_wt_vega" field.</summary>
    public const int OpDayWtVegaFieldNumber = 298;
    private float opDayWtVega_;
    /// <summary>
    /// option (vol time weighted) vega traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayWtVega {
      get { return opDayWtVega_; }
      set {
        opDayWtVega_ = value;
      }
    }

    /// <summary>Field number for the "op_day_theta" field.</summary>
    public const int OpDayThetaFieldNumber = 301;
    private float opDayTheta_;
    /// <summary>
    /// option theta traded today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpDayTheta {
      get { return opDayTheta_; }
      set {
        opDayTheta_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_opened" field.</summary>
    public const int OpEdgeOpenedFieldNumber = 304;
    private float opEdgeOpened_;
    /// <summary>
    /// option theo edge opened today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeOpened {
      get { return opEdgeOpened_; }
      set {
        opEdgeOpened_ = value;
      }
    }

    /// <summary>Field number for the "op_edge_closed" field.</summary>
    public const int OpEdgeClosedFieldNumber = 307;
    private float opEdgeClosed_;
    /// <summary>
    /// option theo edge closed today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpEdgeClosed {
      get { return opEdgeClosed_; }
      set {
        opEdgeClosed_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dn" field.</summary>
    public const int PnlDnFieldNumber = 310;
    private float pnlDn_;
    /// <summary>
    /// option delta neutral pnl;=sum(srs.pnlDn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDn {
      get { return pnlDn_; }
      set {
        pnlDn_ = value;
      }
    }

    /// <summary>Field number for the "pnl_de" field.</summary>
    public const int PnlDeFieldNumber = 313;
    private float pnlDe_;
    /// <summary>
    /// option delta pnl;=sum(srs.pnlDe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDe {
      get { return pnlDe_; }
      set {
        pnlDe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sl" field.</summary>
    public const int PnlSlFieldNumber = 316;
    private float pnlSl_;
    /// <summary>
    /// option vega/delta pnl;=sum(srs.pnlSl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSl {
      get { return pnlSl_; }
      set {
        pnlSl_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ga" field.</summary>
    public const int PnlGaFieldNumber = 319;
    private float pnlGa_;
    /// <summary>
    /// option gamma pnl;=sum(srs.pnlGa)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlGa {
      get { return pnlGa_; }
      set {
        pnlGa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_th" field.</summary>
    public const int PnlThFieldNumber = 322;
    private float pnlTh_;
    /// <summary>
    /// option theta pnl;=sum(srs.pnlTh)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTh {
      get { return pnlTh_; }
      set {
        pnlTh_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ve" field.</summary>
    public const int PnlVeFieldNumber = 325;
    private float pnlVe_;
    /// <summary>
    /// option vega pnl;=sum(srs.pnlVe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVe {
      get { return pnlVe_; }
      set {
        pnlVe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_vo" field.</summary>
    public const int PnlVoFieldNumber = 328;
    private float pnlVo_;
    /// <summary>
    /// option volga pnl;=sum(srs.pnlVo)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVo {
      get { return pnlVo_; }
      set {
        pnlVo_ = value;
      }
    }

    /// <summary>Field number for the "pnl_va" field.</summary>
    public const int PnlVaFieldNumber = 331;
    private float pnlVa_;
    /// <summary>
    /// option vanna pnl;=sum(srs.pnlVa)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlVa {
      get { return pnlVa_; }
      set {
        pnlVa_ = value;
      }
    }

    /// <summary>Field number for the "pnl_dDiv" field.</summary>
    public const int PnlDDivFieldNumber = 334;
    private float pnlDDiv_;
    /// <summary>
    /// option DDiv pnl;=sum(srs.pnlDDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlDDiv {
      get { return pnlDDiv_; }
      set {
        pnlDDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sDiv" field.</summary>
    public const int PnlSDivFieldNumber = 337;
    private float pnlSDiv_;
    /// <summary>
    /// option SDiv pnl;=sum(srs.pnlSDiv)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSDiv {
      get { return pnlSDiv_; }
      set {
        pnlSDiv_ = value;
      }
    }

    /// <summary>Field number for the "pnl_rate" field.</summary>
    public const int PnlRateFieldNumber = 340;
    private float pnlRate_;
    /// <summary>
    /// option Rate pnl;=sum(srs.pnlRate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlRate {
      get { return pnlRate_; }
      set {
        pnlRate_ = value;
      }
    }

    /// <summary>Field number for the "pnl_err" field.</summary>
    public const int PnlErrFieldNumber = 343;
    private float pnlErr_;
    /// <summary>
    /// option unexplained (error) pnl;=sum(srs.pnlErr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlErr {
      get { return pnlErr_; }
      set {
        pnlErr_ = value;
      }
    }

    /// <summary>Field number for the "pnl_te" field.</summary>
    public const int PnlTeFieldNumber = 346;
    private float pnlTe_;
    /// <summary>
    /// option theo edge pnl;=sum(srs.pnlTe)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlTe {
      get { return pnlTe_; }
      set {
        pnlTe_ = value;
      }
    }

    /// <summary>Field number for the "pnl_ln" field.</summary>
    public const int PnlLnFieldNumber = 349;
    private float pnlLn_;
    /// <summary>
    /// option pnl from symbol positions with +vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlLn {
      get { return pnlLn_; }
      set {
        pnlLn_ = value;
      }
    }

    /// <summary>Field number for the "pnl_sh" field.</summary>
    public const int PnlShFieldNumber = 352;
    private float pnlSh_;
    /// <summary>
    /// option pnl from symbol positions with -vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlSh {
      get { return pnlSh_; }
      set {
        pnlSh_ = value;
      }
    }

    /// <summary>Field number for the "t_edge" field.</summary>
    public const int TEdgeFieldNumber = 355;
    private float tEdge_;
    /// <summary>
    /// aggregate option theo edge;=sum(srs.tEdge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdge {
      get { return tEdge_; }
      set {
        tEdge_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_mult" field.</summary>
    public const int TEdgeMultFieldNumber = 358;
    private float tEdgeMult_;
    /// <summary>
    /// denominator for computing edge per unit;=sum(srs.tEdgeMult)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMult {
      get { return tEdgeMult_; }
      set {
        tEdgeMult_ = value;
      }
    }

    /// <summary>Field number for the "pos_tEdge_pnl" field.</summary>
    public const int PosTEdgePnlFieldNumber = 361;
    private float posTEdgePnl_;
    /// <summary>
    /// aggregate pnl (positive edge symbols);=sum(srs.posTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTEdgePnl {
      get { return posTEdgePnl_; }
      set {
        posTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "neg_tEdge_pnl" field.</summary>
    public const int NegTEdgePnlFieldNumber = 364;
    private float negTEdgePnl_;
    /// <summary>
    /// aggregate pnl (negative edge symbols);=sum(srs.negTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NegTEdgePnl {
      get { return negTEdgePnl_; }
      set {
        negTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "bad_tEdge_pnl" field.</summary>
    public const int BadTEdgePnlFieldNumber = 367;
    private float badTEdgePnl_;
    /// <summary>
    /// aggregate pnl (no theo edge symbols);=sum(srs.badTEdgePnl)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BadTEdgePnl {
      get { return badTEdgePnl_; }
      set {
        badTEdgePnl_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu90" field.</summary>
    public const int VaRsu90FieldNumber = 370;
    private float vaRsu90_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * exp(+0.90))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu90 {
      get { return vaRsu90_; }
      set {
        vaRsu90_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd90" field.</summary>
    public const int VaRsd90FieldNumber = 373;
    private float vaRsd90_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * exp(-0.90))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd90 {
      get { return vaRsd90_; }
      set {
        vaRsd90_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu50" field.</summary>
    public const int VaRsu50FieldNumber = 376;
    private float vaRsu50_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * exp(+0.50))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu50 {
      get { return vaRsu50_; }
      set {
        vaRsu50_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd50" field.</summary>
    public const int VaRsd50FieldNumber = 379;
    private float vaRsd50_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * exp(-0.50))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd50 {
      get { return vaRsd50_; }
      set {
        vaRsd50_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu15" field.</summary>
    public const int VaRsu15FieldNumber = 382;
    private float vaRsu15_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * exp(+0.15))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu15 {
      get { return vaRsu15_; }
      set {
        vaRsu15_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd15" field.</summary>
    public const int VaRsd15FieldNumber = 385;
    private float vaRsd15_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * exp(-0.15))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd15 {
      get { return vaRsd15_; }
      set {
        vaRsd15_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu10" field.</summary>
    public const int VaRsu10FieldNumber = 388;
    private float vaRsu10_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu10 {
      get { return vaRsu10_; }
      set {
        vaRsu10_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd10" field.</summary>
    public const int VaRsd10FieldNumber = 391;
    private float vaRsd10_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd10 {
      get { return vaRsd10_; }
      set {
        vaRsd10_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu05" field.</summary>
    public const int VaRsu05FieldNumber = 394;
    private float vaRsu05_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * exp(+0.05))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu05 {
      get { return vaRsu05_; }
      set {
        vaRsu05_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd05" field.</summary>
    public const int VaRsd05FieldNumber = 397;
    private float vaRsd05_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * exp(-0.05))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd05 {
      get { return vaRsd05_; }
      set {
        vaRsd05_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu1e" field.</summary>
    public const int VaRsu1EFieldNumber = 400;
    private float vaRsu1E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu1E {
      get { return vaRsu1E_; }
      set {
        vaRsu1E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd1e" field.</summary>
    public const int VaRsd1EFieldNumber = 403;
    private float vaRsd1E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd1E {
      get { return vaRsd1E_; }
      set {
        vaRsd1E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsu2e" field.</summary>
    public const int VaRsu2EFieldNumber = 406;
    private float vaRsu2E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsu2E {
      get { return vaRsu2E_; }
      set {
        vaRsu2E_ = value;
      }
    }

    /// <summary>Field number for the "va_rsd2e" field.</summary>
    public const int VaRsd2EFieldNumber = 409;
    private float vaRsd2E_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRsd2E {
      get { return vaRsd2E_; }
      set {
        vaRsd2E_ = value;
      }
    }

    /// <summary>Field number for the "va_rearn" field.</summary>
    public const int VaRearnFieldNumber = 412;
    private float vaRearn_;
    /// <summary>
    /// Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRearn {
      get { return vaRearn_; }
      set {
        vaRearn_ = value;
      }
    }

    /// <summary>Field number for the "va_rcash" field.</summary>
    public const int VaRcashFieldNumber = 415;
    private float vaRcash_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VaRcash {
      get { return vaRcash_; }
      set {
        vaRcash_ = value;
      }
    }

    /// <summary>Field number for the "hc_cnt" field.</summary>
    public const int HcCntFieldNumber = 418;
    private float hcCnt_;
    /// <summary>
    /// count of haircut > $0.0 symbols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HcCnt {
      get { return hcCnt_; }
      set {
        hcCnt_ = value;
      }
    }

    /// <summary>Field number for the "haircut25" field.</summary>
    public const int Haircut25FieldNumber = 421;
    private float haircut25_;
    /// <summary>
    /// haircut ($25 minimum/cn) [act basis]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Haircut25 {
      get { return haircut25_; }
      set {
        haircut25_ = value;
      }
    }

    /// <summary>Field number for the "haircut37" field.</summary>
    public const int Haircut37FieldNumber = 424;
    private float haircut37_;
    /// <summary>
    /// haircut ($37 minimum/cn) [act basis]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Haircut37 {
      get { return haircut37_; }
      set {
        haircut37_ = value;
      }
    }

    /// <summary>Field number for the "opt_cn_minimum" field.</summary>
    public const int OptCnMinimumFieldNumber = 427;
    private float optCnMinimum_;
    /// <summary>
    /// option contract margin minimum (37.50 for equities;SPAN minimum for options on futures)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptCnMinimum {
      get { return optCnMinimum_; }
      set {
        optCnMinimum_ = value;
      }
    }

    /// <summary>Field number for the "span01" field.</summary>
    public const int Span01FieldNumber = 430;
    private float span01_;
    /// <summary>
    /// span1: uPrc=unch, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span01 {
      get { return span01_; }
      set {
        span01_ = value;
      }
    }

    /// <summary>Field number for the "span02" field.</summary>
    public const int Span02FieldNumber = 433;
    private float span02_;
    /// <summary>
    /// span2: uPrc=unch, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span02 {
      get { return span02_; }
      set {
        span02_ = value;
      }
    }

    /// <summary>Field number for the "span03" field.</summary>
    public const int Span03FieldNumber = 436;
    private float span03_;
    /// <summary>
    /// span3: uPrc=+33.33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span03 {
      get { return span03_; }
      set {
        span03_ = value;
      }
    }

    /// <summary>Field number for the "span04" field.</summary>
    public const int Span04FieldNumber = 439;
    private float span04_;
    /// <summary>
    /// span4: uPrc=+33.33%, vol=dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span04 {
      get { return span04_; }
      set {
        span04_ = value;
      }
    }

    /// <summary>Field number for the "span05" field.</summary>
    public const int Span05FieldNumber = 442;
    private float span05_;
    /// <summary>
    /// span5: uPrc=-33.33%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span05 {
      get { return span05_; }
      set {
        span05_ = value;
      }
    }

    /// <summary>Field number for the "span06" field.</summary>
    public const int Span06FieldNumber = 445;
    private float span06_;
    /// <summary>
    /// span6: uPrc=-33.33%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span06 {
      get { return span06_; }
      set {
        span06_ = value;
      }
    }

    /// <summary>Field number for the "span07" field.</summary>
    public const int Span07FieldNumber = 448;
    private float span07_;
    /// <summary>
    /// span7: uPrc=+66.67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span07 {
      get { return span07_; }
      set {
        span07_ = value;
      }
    }

    /// <summary>Field number for the "span08" field.</summary>
    public const int Span08FieldNumber = 451;
    private float span08_;
    /// <summary>
    /// span8: uPrc=+66.67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span08 {
      get { return span08_; }
      set {
        span08_ = value;
      }
    }

    /// <summary>Field number for the "span09" field.</summary>
    public const int Span09FieldNumber = 454;
    private float span09_;
    /// <summary>
    /// span9: uPrc=-66.67%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span09 {
      get { return span09_; }
      set {
        span09_ = value;
      }
    }

    /// <summary>Field number for the "span10" field.</summary>
    public const int Span10FieldNumber = 457;
    private float span10_;
    /// <summary>
    /// span10: uPrc=-66.67%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span10 {
      get { return span10_; }
      set {
        span10_ = value;
      }
    }

    /// <summary>Field number for the "span11" field.</summary>
    public const int Span11FieldNumber = 460;
    private float span11_;
    /// <summary>
    /// span11: uPrc=+100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span11 {
      get { return span11_; }
      set {
        span11_ = value;
      }
    }

    /// <summary>Field number for the "span12" field.</summary>
    public const int Span12FieldNumber = 463;
    private float span12_;
    /// <summary>
    /// span12: uPrc=+100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span12 {
      get { return span12_; }
      set {
        span12_ = value;
      }
    }

    /// <summary>Field number for the "span13" field.</summary>
    public const int Span13FieldNumber = 466;
    private float span13_;
    /// <summary>
    /// span13: uPrc=-100%, vol=up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span13 {
      get { return span13_; }
      set {
        span13_ = value;
      }
    }

    /// <summary>Field number for the "span14" field.</summary>
    public const int Span14FieldNumber = 469;
    private float span14_;
    /// <summary>
    /// span14: uPrc=-100%, vol=down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span14 {
      get { return span14_; }
      set {
        span14_ = value;
      }
    }

    /// <summary>Field number for the "span15" field.</summary>
    public const int Span15FieldNumber = 472;
    private float span15_;
    /// <summary>
    /// span15: uPrc=+300%; price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span15 {
      get { return span15_; }
      set {
        span15_ = value;
      }
    }

    /// <summary>Field number for the "span16" field.</summary>
    public const int Span16FieldNumber = 475;
    private float span16_;
    /// <summary>
    /// span16: uPrc=-300%, price slide * 0.33
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Span16 {
      get { return span16_; }
      set {
        span16_ = value;
      }
    }

    /// <summary>Field number for the "worst3_risk" field.</summary>
    public const int Worst3RiskFieldNumber = 478;
    private float worst3Risk_;
    /// <summary>
    /// sum of 3 worst 50% slide loss symbols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Worst3Risk {
      get { return worst3Risk_; }
      set {
        worst3Risk_ = value;
      }
    }

    /// <summary>Field number for the "worst_sym1" field.</summary>
    public const int WorstSym1FieldNumber = 481;
    private global::Spiderrock.Protobuf.TickerKey worstSym1_;
    /// <summary>
    /// symbol with the largest 50% slide loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey WorstSym1 {
      get { return worstSym1_; }
      set {
        worstSym1_ = value;
      }
    }

    /// <summary>Field number for the "worst_sym2" field.</summary>
    public const int WorstSym2FieldNumber = 484;
    private global::Spiderrock.Protobuf.TickerKey worstSym2_;
    /// <summary>
    /// symbol with the second largest 50% slide loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey WorstSym2 {
      get { return worstSym2_; }
      set {
        worstSym2_ = value;
      }
    }

    /// <summary>Field number for the "worst_sym3" field.</summary>
    public const int WorstSym3FieldNumber = 487;
    private global::Spiderrock.Protobuf.TickerKey worstSym3_;
    /// <summary>
    /// symbol with the third largest 50% slide loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey WorstSym3 {
      get { return worstSym3_; }
      set {
        worstSym3_ = value;
      }
    }

    /// <summary>Field number for the "stk_liq_risk" field.</summary>
    public const int StkLiqRiskFieldNumber = 490;
    private float stkLiqRisk_;
    /// <summary>
    /// estimated cost of neutralizing/liquidating all stock positions (half market width * position size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkLiqRisk {
      get { return stkLiqRisk_; }
      set {
        stkLiqRisk_ = value;
      }
    }

    /// <summary>Field number for the "fut_liq_risk" field.</summary>
    public const int FutLiqRiskFieldNumber = 493;
    private float futLiqRisk_;
    /// <summary>
    /// estimated cost of neutralizing/liquidating all future positions (half market width * position size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FutLiqRisk {
      get { return futLiqRisk_; }
      set {
        futLiqRisk_ = value;
      }
    }

    /// <summary>Field number for the "opt_liq_risk" field.</summary>
    public const int OptLiqRiskFieldNumber = 496;
    private float optLiqRisk_;
    /// <summary>
    /// estimated cost of neutralizing/liquidating all option positions (half market width * position size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OptLiqRisk {
      get { return optLiqRisk_; }
      set {
        optLiqRisk_ = value;
      }
    }

    /// <summary>Field number for the "sr_risk_margin" field.</summary>
    public const int SrRiskMarginFieldNumber = 499;
    private float srRiskMargin_;
    /// <summary>
    /// SR assessed risk margin MAX(haircut37, worst3Risk + optCnMinimum)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrRiskMargin {
      get { return srRiskMargin_; }
      set {
        srRiskMargin_ = value;
      }
    }

    /// <summary>Field number for the "last_activity" field.</summary>
    public const int LastActivityFieldNumber = 502;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastActivity {
      get { return lastActivity_; }
      set {
        lastActivity_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 505;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccountRiskRecordV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccountRiskRecordV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LnDDelta, other.LnDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShDDelta, other.ShDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LnStkMktValue, other.LnStkMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShStkMktValue, other.ShStkMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutMktValue, other.FutMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptMktValue, other.StkOptMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptMktValue, other.FutOptMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VegaLong, other.VegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VegaShort, other.VegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WVegaLong, other.WVegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WVegaShort, other.WVegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVegaLong, other.WtVegaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVegaShort, other.WtVegaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetaLong, other.ThetaLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetaShort, other.ThetaShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhoLong, other.RhoLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhoShort, other.RhoShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolLn, other.IvolLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IvolSh, other.IvolSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDd, other.WtVeDd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDn, other.WtVeDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeAt, other.WtVeAt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeUp, other.WtVeUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeDu, other.WtVeDu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM1, other.WtVeM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM2, other.WtVeM2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM3, other.WtVeM3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM4, other.WtVeM4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WtVeM5, other.WtVeM5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddelta, other.Ddelta)) return false;
      if (NumSymbols != other.NumSymbols) return false;
      if (AbsCurSh != other.AbsCurSh) return false;
      if (AbsCurFc != other.AbsCurFc) return false;
      if (AbsCurCn != other.AbsCurCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PremOvPar, other.PremOvPar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptExAsPnl, other.OptExAsPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DividendPnl, other.DividendPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CorpActCashPnL, other.CorpActCashPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOpnPnlMid, other.StkOpnPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOpnPnlClr, other.StkOpnPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOpnPnlMid, other.FutOpnPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOpnPnlClr, other.FutOpnPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptOpnPnlVol, other.StkOptOpnPnlVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptOpnPnlMid, other.StkOptOpnPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptOpnPnlClr, other.StkOptOpnPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptOpnPnlVol, other.FutOptOpnPnlVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptOpnPnlMid, other.FutOptOpnPnlMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptOpnPnlClr, other.FutOptOpnPnlClr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkDayPnl, other.StkDayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutDayPnl, other.FutDayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptDayPnl, other.StkOptDayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptDayPnl, other.FutOptDayPnl)) return false;
      if (StktDaySh != other.StktDaySh) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkDayMny, other.StkDayMny)) return false;
      if (FutDayCn != other.FutDayCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutDayMny, other.FutDayMny)) return false;
      if (StkOptDayCn != other.StkOptDayCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOptDayMny, other.StkOptDayMny)) return false;
      if (FutOptDayCn != other.FutOptDayCn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOptDayMny, other.FutOptDayMny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayDDelta, other.DayDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayVega, other.OpDayVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWVega, other.OpDayWVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTVega, other.OpDayTVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayWtVega, other.OpDayWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpDayTheta, other.OpDayTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeOpened, other.OpEdgeOpened)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpEdgeClosed, other.OpEdgeClosed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDn, other.PnlDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDe, other.PnlDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSl, other.PnlSl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlGa, other.PnlGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTh, other.PnlTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVe, other.PnlVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVo, other.PnlVo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlVa, other.PnlVa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlDDiv, other.PnlDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSDiv, other.PnlSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlRate, other.PnlRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlErr, other.PnlErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlTe, other.PnlTe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlLn, other.PnlLn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlSh, other.PnlSh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdge, other.TEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMult, other.TEdgeMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTEdgePnl, other.PosTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegTEdgePnl, other.NegTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BadTEdgePnl, other.BadTEdgePnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu90, other.VaRsu90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd90, other.VaRsd90)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu50, other.VaRsu50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd50, other.VaRsd50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu15, other.VaRsu15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd15, other.VaRsd15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu10, other.VaRsu10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd10, other.VaRsd10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu05, other.VaRsu05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd05, other.VaRsd05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu1E, other.VaRsu1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd1E, other.VaRsd1E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsu2E, other.VaRsu2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRsd2E, other.VaRsd2E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRearn, other.VaRearn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VaRcash, other.VaRcash)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HcCnt, other.HcCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Haircut25, other.Haircut25)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Haircut37, other.Haircut37)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptCnMinimum, other.OptCnMinimum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span01, other.Span01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span02, other.Span02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span03, other.Span03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span04, other.Span04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span05, other.Span05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span06, other.Span06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span07, other.Span07)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span08, other.Span08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span09, other.Span09)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span10, other.Span10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span11, other.Span11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span12, other.Span12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span13, other.Span13)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span14, other.Span14)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span15, other.Span15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Span16, other.Span16)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Worst3Risk, other.Worst3Risk)) return false;
      if (!object.Equals(WorstSym1, other.WorstSym1)) return false;
      if (!object.Equals(WorstSym2, other.WorstSym2)) return false;
      if (!object.Equals(WorstSym3, other.WorstSym3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkLiqRisk, other.StkLiqRisk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FutLiqRisk, other.FutLiqRisk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OptLiqRisk, other.OptLiqRisk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrRiskMargin, other.SrRiskMargin)) return false;
      if (!object.Equals(LastActivity, other.LastActivity)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (LnDDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LnDDelta);
      if (ShDDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShDDelta);
      if (LnStkMktValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LnStkMktValue);
      if (ShStkMktValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShStkMktValue);
      if (FutMktValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutMktValue);
      if (StkOptMktValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptMktValue);
      if (FutOptMktValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptMktValue);
      if (VegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VegaLong);
      if (VegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VegaShort);
      if (WVegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WVegaLong);
      if (WVegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WVegaShort);
      if (WtVegaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVegaLong);
      if (WtVegaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVegaShort);
      if (ThetaLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetaLong);
      if (ThetaShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetaShort);
      if (RhoLong != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhoLong);
      if (RhoShort != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhoShort);
      if (IvolLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolLn);
      if (IvolSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IvolSh);
      if (WtVeDd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDd);
      if (WtVeDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDn);
      if (WtVeAt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeAt);
      if (WtVeUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeUp);
      if (WtVeDu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeDu);
      if (WtVeM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM1);
      if (WtVeM2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM2);
      if (WtVeM3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM3);
      if (WtVeM4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM4);
      if (WtVeM5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WtVeM5);
      if (Ddelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddelta);
      if (NumSymbols != 0) hash ^= NumSymbols.GetHashCode();
      if (AbsCurSh != 0) hash ^= AbsCurSh.GetHashCode();
      if (AbsCurFc != 0) hash ^= AbsCurFc.GetHashCode();
      if (AbsCurCn != 0) hash ^= AbsCurCn.GetHashCode();
      if (PremOvPar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PremOvPar);
      if (OptExAsPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptExAsPnl);
      if (DividendPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DividendPnl);
      if (CorpActCashPnL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CorpActCashPnL);
      if (StkOpnPnlMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOpnPnlMid);
      if (StkOpnPnlClr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOpnPnlClr);
      if (FutOpnPnlMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOpnPnlMid);
      if (FutOpnPnlClr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOpnPnlClr);
      if (StkOptOpnPnlVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptOpnPnlVol);
      if (StkOptOpnPnlMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptOpnPnlMid);
      if (StkOptOpnPnlClr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptOpnPnlClr);
      if (FutOptOpnPnlVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptOpnPnlVol);
      if (FutOptOpnPnlMid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptOpnPnlMid);
      if (FutOptOpnPnlClr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptOpnPnlClr);
      if (StkDayPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkDayPnl);
      if (FutDayPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutDayPnl);
      if (StkOptDayPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptDayPnl);
      if (FutOptDayPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptDayPnl);
      if (StktDaySh != 0) hash ^= StktDaySh.GetHashCode();
      if (StkDayMny != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkDayMny);
      if (FutDayCn != 0) hash ^= FutDayCn.GetHashCode();
      if (FutDayMny != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutDayMny);
      if (StkOptDayCn != 0) hash ^= StkOptDayCn.GetHashCode();
      if (StkOptDayMny != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOptDayMny);
      if (FutOptDayCn != 0) hash ^= FutOptDayCn.GetHashCode();
      if (FutOptDayMny != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOptDayMny);
      if (DayDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayDDelta);
      if (OpDayVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayVega);
      if (OpDayWVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWVega);
      if (OpDayTVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTVega);
      if (OpDayWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayWtVega);
      if (OpDayTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpDayTheta);
      if (OpEdgeOpened != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeOpened);
      if (OpEdgeClosed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpEdgeClosed);
      if (PnlDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDn);
      if (PnlDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDe);
      if (PnlSl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSl);
      if (PnlGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlGa);
      if (PnlTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTh);
      if (PnlVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVe);
      if (PnlVo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVo);
      if (PnlVa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlVa);
      if (PnlDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlDDiv);
      if (PnlSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSDiv);
      if (PnlRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlRate);
      if (PnlErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlErr);
      if (PnlTe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlTe);
      if (PnlLn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlLn);
      if (PnlSh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlSh);
      if (TEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdge);
      if (TEdgeMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMult);
      if (PosTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTEdgePnl);
      if (NegTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegTEdgePnl);
      if (BadTEdgePnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BadTEdgePnl);
      if (VaRsu90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu90);
      if (VaRsd90 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd90);
      if (VaRsu50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu50);
      if (VaRsd50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd50);
      if (VaRsu15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu15);
      if (VaRsd15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd15);
      if (VaRsu10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu10);
      if (VaRsd10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd10);
      if (VaRsu05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu05);
      if (VaRsd05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd05);
      if (VaRsu1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu1E);
      if (VaRsd1E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd1E);
      if (VaRsu2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsu2E);
      if (VaRsd2E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRsd2E);
      if (VaRearn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRearn);
      if (VaRcash != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VaRcash);
      if (HcCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HcCnt);
      if (Haircut25 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Haircut25);
      if (Haircut37 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Haircut37);
      if (OptCnMinimum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptCnMinimum);
      if (Span01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span01);
      if (Span02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span02);
      if (Span03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span03);
      if (Span04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span04);
      if (Span05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span05);
      if (Span06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span06);
      if (Span07 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span07);
      if (Span08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span08);
      if (Span09 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span09);
      if (Span10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span10);
      if (Span11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span11);
      if (Span12 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span12);
      if (Span13 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span13);
      if (Span14 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span14);
      if (Span15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span15);
      if (Span16 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Span16);
      if (Worst3Risk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Worst3Risk);
      if (worstSym1_ != null) hash ^= WorstSym1.GetHashCode();
      if (worstSym2_ != null) hash ^= WorstSym2.GetHashCode();
      if (worstSym3_ != null) hash ^= WorstSym3.GetHashCode();
      if (StkLiqRisk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkLiqRisk);
      if (FutLiqRisk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FutLiqRisk);
      if (OptLiqRisk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OptLiqRisk);
      if (SrRiskMargin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrRiskMargin);
      if (lastActivity_ != null) hash ^= LastActivity.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (LnDDelta != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(LnDDelta);
      }
      if (ShDDelta != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(ShDDelta);
      }
      if (LnStkMktValue != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(LnStkMktValue);
      }
      if (ShStkMktValue != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(ShStkMktValue);
      }
      if (FutMktValue != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(FutMktValue);
      }
      if (StkOptMktValue != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(StkOptMktValue);
      }
      if (FutOptMktValue != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(FutOptMktValue);
      }
      if (VegaLong != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(VegaLong);
      }
      if (VegaShort != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(VegaShort);
      }
      if (WVegaLong != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(WVegaLong);
      }
      if (WVegaShort != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(WVegaShort);
      }
      if (WtVegaLong != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(WtVegaLong);
      }
      if (WtVegaShort != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(WtVegaShort);
      }
      if (ThetaLong != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ThetaLong);
      }
      if (ThetaShort != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ThetaShort);
      }
      if (RhoLong != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(RhoLong);
      }
      if (RhoShort != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(RhoShort);
      }
      if (IvolLn != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(IvolLn);
      }
      if (IvolSh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(IvolSh);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(WtVeDu);
      }
      if (WtVeM1 != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(WtVeM1);
      }
      if (WtVeM2 != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(WtVeM2);
      }
      if (WtVeM3 != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(WtVeM3);
      }
      if (WtVeM4 != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(WtVeM4);
      }
      if (WtVeM5 != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(WtVeM5);
      }
      if (Ddelta != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(Ddelta);
      }
      if (NumSymbols != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(NumSymbols);
      }
      if (AbsCurSh != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(AbsCurSh);
      }
      if (AbsCurFc != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(AbsCurFc);
      }
      if (AbsCurCn != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PremOvPar);
      }
      if (OptExAsPnl != 0D) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(OptExAsPnl);
      }
      if (DividendPnl != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(DividendPnl);
      }
      if (CorpActCashPnL != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(CorpActCashPnL);
      }
      if (StkOpnPnlMid != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(StkOpnPnlMid);
      }
      if (StkOpnPnlClr != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(StkOpnPnlClr);
      }
      if (FutOpnPnlMid != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(FutOpnPnlMid);
      }
      if (FutOpnPnlClr != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(FutOpnPnlClr);
      }
      if (StkOptOpnPnlVol != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(StkOptOpnPnlVol);
      }
      if (StkOptOpnPnlMid != 0D) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(StkOptOpnPnlMid);
      }
      if (StkOptOpnPnlClr != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(StkOptOpnPnlClr);
      }
      if (FutOptOpnPnlVol != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(FutOptOpnPnlVol);
      }
      if (FutOptOpnPnlMid != 0D) {
        output.WriteRawTag(161, 15);
        output.WriteDouble(FutOptOpnPnlMid);
      }
      if (FutOptOpnPnlClr != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(FutOptOpnPnlClr);
      }
      if (StkDayPnl != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(StkDayPnl);
      }
      if (FutDayPnl != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(FutDayPnl);
      }
      if (StkOptDayPnl != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(StkOptDayPnl);
      }
      if (FutOptDayPnl != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(FutOptDayPnl);
      }
      if (StktDaySh != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(StktDaySh);
      }
      if (StkDayMny != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(StkDayMny);
      }
      if (FutDayCn != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(FutDayCn);
      }
      if (FutDayMny != 0D) {
        output.WriteRawTag(249, 16);
        output.WriteDouble(FutDayMny);
      }
      if (StkOptDayCn != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(StkOptDayCn);
      }
      if (StkOptDayMny != 0D) {
        output.WriteRawTag(169, 17);
        output.WriteDouble(StkOptDayMny);
      }
      if (FutOptDayCn != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(FutOptDayCn);
      }
      if (FutOptDayMny != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(FutOptDayMny);
      }
      if (DayDDelta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(DayDDelta);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpDayTheta);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(PnlVa);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(PnlRate);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlErr);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(PnlTe);
      }
      if (PnlLn != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PnlLn);
      }
      if (PnlSh != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(PnlSh);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(TEdgeMult);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(BadTEdgePnl);
      }
      if (VaRsu90 != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(VaRsu90);
      }
      if (VaRsd90 != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(VaRsd90);
      }
      if (VaRsu50 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(VaRsu50);
      }
      if (VaRsd50 != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(VaRsd50);
      }
      if (VaRsu15 != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(VaRsu15);
      }
      if (VaRsd15 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(VaRsd15);
      }
      if (VaRsu10 != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(VaRsu10);
      }
      if (VaRsd10 != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(VaRsd10);
      }
      if (VaRsu05 != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(VaRsu05);
      }
      if (VaRsd05 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(VaRsd05);
      }
      if (VaRsu1E != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(VaRsu1E);
      }
      if (VaRsd1E != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(VaRsd1E);
      }
      if (VaRsu2E != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(VaRsu2E);
      }
      if (VaRsd2E != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(VaRsd2E);
      }
      if (VaRearn != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(VaRearn);
      }
      if (VaRcash != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(VaRcash);
      }
      if (HcCnt != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(HcCnt);
      }
      if (Haircut25 != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(Haircut25);
      }
      if (Haircut37 != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(Haircut37);
      }
      if (OptCnMinimum != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(OptCnMinimum);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(Span16);
      }
      if (Worst3Risk != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(Worst3Risk);
      }
      if (worstSym1_ != null) {
        output.WriteRawTag(138, 30);
        output.WriteMessage(WorstSym1);
      }
      if (worstSym2_ != null) {
        output.WriteRawTag(162, 30);
        output.WriteMessage(WorstSym2);
      }
      if (worstSym3_ != null) {
        output.WriteRawTag(186, 30);
        output.WriteMessage(WorstSym3);
      }
      if (StkLiqRisk != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(StkLiqRisk);
      }
      if (FutLiqRisk != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(FutLiqRisk);
      }
      if (OptLiqRisk != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(OptLiqRisk);
      }
      if (SrRiskMargin != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(SrRiskMargin);
      }
      if (lastActivity_ != null) {
        output.WriteRawTag(178, 31);
        output.WriteMessage(LastActivity);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 31);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (LnDDelta != 0D) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(LnDDelta);
      }
      if (ShDDelta != 0D) {
        output.WriteRawTag(233, 6);
        output.WriteDouble(ShDDelta);
      }
      if (LnStkMktValue != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(LnStkMktValue);
      }
      if (ShStkMktValue != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(ShStkMktValue);
      }
      if (FutMktValue != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(FutMktValue);
      }
      if (StkOptMktValue != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(StkOptMktValue);
      }
      if (FutOptMktValue != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(FutOptMktValue);
      }
      if (VegaLong != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(VegaLong);
      }
      if (VegaShort != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(VegaShort);
      }
      if (WVegaLong != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(WVegaLong);
      }
      if (WVegaShort != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(WVegaShort);
      }
      if (WtVegaLong != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(WtVegaLong);
      }
      if (WtVegaShort != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(WtVegaShort);
      }
      if (ThetaLong != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(ThetaLong);
      }
      if (ThetaShort != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(ThetaShort);
      }
      if (RhoLong != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(RhoLong);
      }
      if (RhoShort != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(RhoShort);
      }
      if (IvolLn != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(IvolLn);
      }
      if (IvolSh != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(IvolSh);
      }
      if (WtVeDd != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(WtVeDd);
      }
      if (WtVeDn != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(WtVeDn);
      }
      if (WtVeAt != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(WtVeAt);
      }
      if (WtVeUp != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(WtVeUp);
      }
      if (WtVeDu != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(WtVeDu);
      }
      if (WtVeM1 != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(WtVeM1);
      }
      if (WtVeM2 != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(WtVeM2);
      }
      if (WtVeM3 != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(WtVeM3);
      }
      if (WtVeM4 != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(WtVeM4);
      }
      if (WtVeM5 != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(WtVeM5);
      }
      if (Ddelta != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(Ddelta);
      }
      if (NumSymbols != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(NumSymbols);
      }
      if (AbsCurSh != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(AbsCurSh);
      }
      if (AbsCurFc != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(AbsCurFc);
      }
      if (AbsCurCn != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(PremOvPar);
      }
      if (OptExAsPnl != 0D) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(OptExAsPnl);
      }
      if (DividendPnl != 0D) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(DividendPnl);
      }
      if (CorpActCashPnL != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(CorpActCashPnL);
      }
      if (StkOpnPnlMid != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(StkOpnPnlMid);
      }
      if (StkOpnPnlClr != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(StkOpnPnlClr);
      }
      if (FutOpnPnlMid != 0D) {
        output.WriteRawTag(145, 14);
        output.WriteDouble(FutOpnPnlMid);
      }
      if (FutOpnPnlClr != 0D) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(FutOpnPnlClr);
      }
      if (StkOptOpnPnlVol != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(StkOptOpnPnlVol);
      }
      if (StkOptOpnPnlMid != 0D) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(StkOptOpnPnlMid);
      }
      if (StkOptOpnPnlClr != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(StkOptOpnPnlClr);
      }
      if (FutOptOpnPnlVol != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(FutOptOpnPnlVol);
      }
      if (FutOptOpnPnlMid != 0D) {
        output.WriteRawTag(161, 15);
        output.WriteDouble(FutOptOpnPnlMid);
      }
      if (FutOptOpnPnlClr != 0D) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(FutOptOpnPnlClr);
      }
      if (StkDayPnl != 0D) {
        output.WriteRawTag(209, 15);
        output.WriteDouble(StkDayPnl);
      }
      if (FutDayPnl != 0D) {
        output.WriteRawTag(233, 15);
        output.WriteDouble(FutDayPnl);
      }
      if (StkOptDayPnl != 0D) {
        output.WriteRawTag(129, 16);
        output.WriteDouble(StkOptDayPnl);
      }
      if (FutOptDayPnl != 0D) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(FutOptDayPnl);
      }
      if (StktDaySh != 0) {
        output.WriteRawTag(176, 16);
        output.WriteInt32(StktDaySh);
      }
      if (StkDayMny != 0D) {
        output.WriteRawTag(201, 16);
        output.WriteDouble(StkDayMny);
      }
      if (FutDayCn != 0) {
        output.WriteRawTag(224, 16);
        output.WriteInt32(FutDayCn);
      }
      if (FutDayMny != 0D) {
        output.WriteRawTag(249, 16);
        output.WriteDouble(FutDayMny);
      }
      if (StkOptDayCn != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(StkOptDayCn);
      }
      if (StkOptDayMny != 0D) {
        output.WriteRawTag(169, 17);
        output.WriteDouble(StkOptDayMny);
      }
      if (FutOptDayCn != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(FutOptDayCn);
      }
      if (FutOptDayMny != 0D) {
        output.WriteRawTag(217, 17);
        output.WriteDouble(FutOptDayMny);
      }
      if (DayDDelta != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(DayDDelta);
      }
      if (OpDayVega != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(OpDayVega);
      }
      if (OpDayWVega != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpDayWVega);
      }
      if (OpDayTVega != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(OpDayTVega);
      }
      if (OpDayWtVega != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(OpDayWtVega);
      }
      if (OpDayTheta != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpDayTheta);
      }
      if (OpEdgeOpened != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpEdgeOpened);
      }
      if (OpEdgeClosed != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(OpEdgeClosed);
      }
      if (PnlDn != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(PnlDn);
      }
      if (PnlDe != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(PnlDe);
      }
      if (PnlSl != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(PnlSl);
      }
      if (PnlGa != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(PnlGa);
      }
      if (PnlTh != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(PnlTh);
      }
      if (PnlVe != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(PnlVe);
      }
      if (PnlVo != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(PnlVo);
      }
      if (PnlVa != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(PnlVa);
      }
      if (PnlDDiv != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(PnlDDiv);
      }
      if (PnlSDiv != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(PnlSDiv);
      }
      if (PnlRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(PnlRate);
      }
      if (PnlErr != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlErr);
      }
      if (PnlTe != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(PnlTe);
      }
      if (PnlLn != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(PnlLn);
      }
      if (PnlSh != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(PnlSh);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(TEdge);
      }
      if (TEdgeMult != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(TEdgeMult);
      }
      if (PosTEdgePnl != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(PosTEdgePnl);
      }
      if (NegTEdgePnl != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(NegTEdgePnl);
      }
      if (BadTEdgePnl != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(BadTEdgePnl);
      }
      if (VaRsu90 != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(VaRsu90);
      }
      if (VaRsd90 != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(VaRsd90);
      }
      if (VaRsu50 != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(VaRsu50);
      }
      if (VaRsd50 != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(VaRsd50);
      }
      if (VaRsu15 != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(VaRsu15);
      }
      if (VaRsd15 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(VaRsd15);
      }
      if (VaRsu10 != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(VaRsu10);
      }
      if (VaRsd10 != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(VaRsd10);
      }
      if (VaRsu05 != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(VaRsu05);
      }
      if (VaRsd05 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(VaRsd05);
      }
      if (VaRsu1E != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(VaRsu1E);
      }
      if (VaRsd1E != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(VaRsd1E);
      }
      if (VaRsu2E != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(VaRsu2E);
      }
      if (VaRsd2E != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(VaRsd2E);
      }
      if (VaRearn != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(VaRearn);
      }
      if (VaRcash != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(VaRcash);
      }
      if (HcCnt != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(HcCnt);
      }
      if (Haircut25 != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(Haircut25);
      }
      if (Haircut37 != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(Haircut37);
      }
      if (OptCnMinimum != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(OptCnMinimum);
      }
      if (Span01 != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(Span01);
      }
      if (Span02 != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(Span02);
      }
      if (Span03 != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(Span03);
      }
      if (Span04 != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(Span04);
      }
      if (Span05 != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(Span05);
      }
      if (Span06 != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(Span06);
      }
      if (Span07 != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(Span07);
      }
      if (Span08 != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(Span08);
      }
      if (Span09 != 0F) {
        output.WriteRawTag(181, 28);
        output.WriteFloat(Span09);
      }
      if (Span10 != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(Span10);
      }
      if (Span11 != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(Span11);
      }
      if (Span12 != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(Span12);
      }
      if (Span13 != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(Span13);
      }
      if (Span14 != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(Span14);
      }
      if (Span15 != 0F) {
        output.WriteRawTag(197, 29);
        output.WriteFloat(Span15);
      }
      if (Span16 != 0F) {
        output.WriteRawTag(221, 29);
        output.WriteFloat(Span16);
      }
      if (Worst3Risk != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(Worst3Risk);
      }
      if (worstSym1_ != null) {
        output.WriteRawTag(138, 30);
        output.WriteMessage(WorstSym1);
      }
      if (worstSym2_ != null) {
        output.WriteRawTag(162, 30);
        output.WriteMessage(WorstSym2);
      }
      if (worstSym3_ != null) {
        output.WriteRawTag(186, 30);
        output.WriteMessage(WorstSym3);
      }
      if (StkLiqRisk != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(StkLiqRisk);
      }
      if (FutLiqRisk != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(FutLiqRisk);
      }
      if (OptLiqRisk != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(OptLiqRisk);
      }
      if (SrRiskMargin != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(SrRiskMargin);
      }
      if (lastActivity_ != null) {
        output.WriteRawTag(178, 31);
        output.WriteMessage(LastActivity);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(202, 31);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (LnDDelta != 0D) {
        size += 2 + 8;
      }
      if (ShDDelta != 0D) {
        size += 2 + 8;
      }
      if (LnStkMktValue != 0D) {
        size += 2 + 8;
      }
      if (ShStkMktValue != 0D) {
        size += 2 + 8;
      }
      if (FutMktValue != 0D) {
        size += 2 + 8;
      }
      if (StkOptMktValue != 0D) {
        size += 2 + 8;
      }
      if (FutOptMktValue != 0D) {
        size += 2 + 8;
      }
      if (VegaLong != 0F) {
        size += 2 + 4;
      }
      if (VegaShort != 0F) {
        size += 2 + 4;
      }
      if (WVegaLong != 0F) {
        size += 2 + 4;
      }
      if (WVegaShort != 0F) {
        size += 2 + 4;
      }
      if (WtVegaLong != 0F) {
        size += 2 + 4;
      }
      if (WtVegaShort != 0F) {
        size += 2 + 4;
      }
      if (ThetaLong != 0F) {
        size += 2 + 4;
      }
      if (ThetaShort != 0F) {
        size += 2 + 4;
      }
      if (RhoLong != 0F) {
        size += 2 + 4;
      }
      if (RhoShort != 0F) {
        size += 2 + 4;
      }
      if (IvolLn != 0F) {
        size += 2 + 4;
      }
      if (IvolSh != 0F) {
        size += 2 + 4;
      }
      if (WtVeDd != 0F) {
        size += 2 + 4;
      }
      if (WtVeDn != 0F) {
        size += 2 + 4;
      }
      if (WtVeAt != 0F) {
        size += 2 + 4;
      }
      if (WtVeUp != 0F) {
        size += 2 + 4;
      }
      if (WtVeDu != 0F) {
        size += 2 + 4;
      }
      if (WtVeM1 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM2 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM3 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM4 != 0F) {
        size += 2 + 4;
      }
      if (WtVeM5 != 0F) {
        size += 2 + 4;
      }
      if (Ddelta != 0F) {
        size += 2 + 4;
      }
      if (NumSymbols != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumSymbols);
      }
      if (AbsCurSh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsCurSh);
      }
      if (AbsCurFc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsCurFc);
      }
      if (AbsCurCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbsCurCn);
      }
      if (PremOvPar != 0F) {
        size += 2 + 4;
      }
      if (OptExAsPnl != 0D) {
        size += 2 + 8;
      }
      if (DividendPnl != 0D) {
        size += 2 + 8;
      }
      if (CorpActCashPnL != 0D) {
        size += 2 + 8;
      }
      if (StkOpnPnlMid != 0D) {
        size += 2 + 8;
      }
      if (StkOpnPnlClr != 0D) {
        size += 2 + 8;
      }
      if (FutOpnPnlMid != 0D) {
        size += 2 + 8;
      }
      if (FutOpnPnlClr != 0D) {
        size += 2 + 8;
      }
      if (StkOptOpnPnlVol != 0D) {
        size += 2 + 8;
      }
      if (StkOptOpnPnlMid != 0D) {
        size += 2 + 8;
      }
      if (StkOptOpnPnlClr != 0D) {
        size += 2 + 8;
      }
      if (FutOptOpnPnlVol != 0D) {
        size += 2 + 8;
      }
      if (FutOptOpnPnlMid != 0D) {
        size += 2 + 8;
      }
      if (FutOptOpnPnlClr != 0D) {
        size += 2 + 8;
      }
      if (StkDayPnl != 0D) {
        size += 2 + 8;
      }
      if (FutDayPnl != 0D) {
        size += 2 + 8;
      }
      if (StkOptDayPnl != 0D) {
        size += 2 + 8;
      }
      if (FutOptDayPnl != 0D) {
        size += 2 + 8;
      }
      if (StktDaySh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StktDaySh);
      }
      if (StkDayMny != 0D) {
        size += 2 + 8;
      }
      if (FutDayCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FutDayCn);
      }
      if (FutDayMny != 0D) {
        size += 2 + 8;
      }
      if (StkOptDayCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StkOptDayCn);
      }
      if (StkOptDayMny != 0D) {
        size += 2 + 8;
      }
      if (FutOptDayCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FutOptDayCn);
      }
      if (FutOptDayMny != 0D) {
        size += 2 + 8;
      }
      if (DayDDelta != 0F) {
        size += 2 + 4;
      }
      if (OpDayVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayWtVega != 0F) {
        size += 2 + 4;
      }
      if (OpDayTheta != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeOpened != 0F) {
        size += 2 + 4;
      }
      if (OpEdgeClosed != 0F) {
        size += 2 + 4;
      }
      if (PnlDn != 0F) {
        size += 2 + 4;
      }
      if (PnlDe != 0F) {
        size += 2 + 4;
      }
      if (PnlSl != 0F) {
        size += 2 + 4;
      }
      if (PnlGa != 0F) {
        size += 2 + 4;
      }
      if (PnlTh != 0F) {
        size += 2 + 4;
      }
      if (PnlVe != 0F) {
        size += 2 + 4;
      }
      if (PnlVo != 0F) {
        size += 2 + 4;
      }
      if (PnlVa != 0F) {
        size += 2 + 4;
      }
      if (PnlDDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlSDiv != 0F) {
        size += 2 + 4;
      }
      if (PnlRate != 0F) {
        size += 2 + 4;
      }
      if (PnlErr != 0F) {
        size += 2 + 4;
      }
      if (PnlTe != 0F) {
        size += 2 + 4;
      }
      if (PnlLn != 0F) {
        size += 2 + 4;
      }
      if (PnlSh != 0F) {
        size += 2 + 4;
      }
      if (TEdge != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMult != 0F) {
        size += 2 + 4;
      }
      if (PosTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (NegTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (BadTEdgePnl != 0F) {
        size += 2 + 4;
      }
      if (VaRsu90 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd90 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu50 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd50 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu15 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd15 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu10 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd10 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu05 != 0F) {
        size += 2 + 4;
      }
      if (VaRsd05 != 0F) {
        size += 2 + 4;
      }
      if (VaRsu1E != 0F) {
        size += 2 + 4;
      }
      if (VaRsd1E != 0F) {
        size += 2 + 4;
      }
      if (VaRsu2E != 0F) {
        size += 2 + 4;
      }
      if (VaRsd2E != 0F) {
        size += 2 + 4;
      }
      if (VaRearn != 0F) {
        size += 2 + 4;
      }
      if (VaRcash != 0F) {
        size += 2 + 4;
      }
      if (HcCnt != 0F) {
        size += 2 + 4;
      }
      if (Haircut25 != 0F) {
        size += 2 + 4;
      }
      if (Haircut37 != 0F) {
        size += 2 + 4;
      }
      if (OptCnMinimum != 0F) {
        size += 2 + 4;
      }
      if (Span01 != 0F) {
        size += 2 + 4;
      }
      if (Span02 != 0F) {
        size += 2 + 4;
      }
      if (Span03 != 0F) {
        size += 2 + 4;
      }
      if (Span04 != 0F) {
        size += 2 + 4;
      }
      if (Span05 != 0F) {
        size += 2 + 4;
      }
      if (Span06 != 0F) {
        size += 2 + 4;
      }
      if (Span07 != 0F) {
        size += 2 + 4;
      }
      if (Span08 != 0F) {
        size += 2 + 4;
      }
      if (Span09 != 0F) {
        size += 2 + 4;
      }
      if (Span10 != 0F) {
        size += 2 + 4;
      }
      if (Span11 != 0F) {
        size += 2 + 4;
      }
      if (Span12 != 0F) {
        size += 2 + 4;
      }
      if (Span13 != 0F) {
        size += 2 + 4;
      }
      if (Span14 != 0F) {
        size += 2 + 4;
      }
      if (Span15 != 0F) {
        size += 2 + 4;
      }
      if (Span16 != 0F) {
        size += 2 + 4;
      }
      if (Worst3Risk != 0F) {
        size += 2 + 4;
      }
      if (worstSym1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WorstSym1);
      }
      if (worstSym2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WorstSym2);
      }
      if (worstSym3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WorstSym3);
      }
      if (StkLiqRisk != 0F) {
        size += 2 + 4;
      }
      if (FutLiqRisk != 0F) {
        size += 2 + 4;
      }
      if (OptLiqRisk != 0F) {
        size += 2 + 4;
      }
      if (SrRiskMargin != 0F) {
        size += 2 + 4;
      }
      if (lastActivity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastActivity);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccountRiskRecordV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.LnDDelta != 0D) {
        LnDDelta = other.LnDDelta;
      }
      if (other.ShDDelta != 0D) {
        ShDDelta = other.ShDDelta;
      }
      if (other.LnStkMktValue != 0D) {
        LnStkMktValue = other.LnStkMktValue;
      }
      if (other.ShStkMktValue != 0D) {
        ShStkMktValue = other.ShStkMktValue;
      }
      if (other.FutMktValue != 0D) {
        FutMktValue = other.FutMktValue;
      }
      if (other.StkOptMktValue != 0D) {
        StkOptMktValue = other.StkOptMktValue;
      }
      if (other.FutOptMktValue != 0D) {
        FutOptMktValue = other.FutOptMktValue;
      }
      if (other.VegaLong != 0F) {
        VegaLong = other.VegaLong;
      }
      if (other.VegaShort != 0F) {
        VegaShort = other.VegaShort;
      }
      if (other.WVegaLong != 0F) {
        WVegaLong = other.WVegaLong;
      }
      if (other.WVegaShort != 0F) {
        WVegaShort = other.WVegaShort;
      }
      if (other.WtVegaLong != 0F) {
        WtVegaLong = other.WtVegaLong;
      }
      if (other.WtVegaShort != 0F) {
        WtVegaShort = other.WtVegaShort;
      }
      if (other.ThetaLong != 0F) {
        ThetaLong = other.ThetaLong;
      }
      if (other.ThetaShort != 0F) {
        ThetaShort = other.ThetaShort;
      }
      if (other.RhoLong != 0F) {
        RhoLong = other.RhoLong;
      }
      if (other.RhoShort != 0F) {
        RhoShort = other.RhoShort;
      }
      if (other.IvolLn != 0F) {
        IvolLn = other.IvolLn;
      }
      if (other.IvolSh != 0F) {
        IvolSh = other.IvolSh;
      }
      if (other.WtVeDd != 0F) {
        WtVeDd = other.WtVeDd;
      }
      if (other.WtVeDn != 0F) {
        WtVeDn = other.WtVeDn;
      }
      if (other.WtVeAt != 0F) {
        WtVeAt = other.WtVeAt;
      }
      if (other.WtVeUp != 0F) {
        WtVeUp = other.WtVeUp;
      }
      if (other.WtVeDu != 0F) {
        WtVeDu = other.WtVeDu;
      }
      if (other.WtVeM1 != 0F) {
        WtVeM1 = other.WtVeM1;
      }
      if (other.WtVeM2 != 0F) {
        WtVeM2 = other.WtVeM2;
      }
      if (other.WtVeM3 != 0F) {
        WtVeM3 = other.WtVeM3;
      }
      if (other.WtVeM4 != 0F) {
        WtVeM4 = other.WtVeM4;
      }
      if (other.WtVeM5 != 0F) {
        WtVeM5 = other.WtVeM5;
      }
      if (other.Ddelta != 0F) {
        Ddelta = other.Ddelta;
      }
      if (other.NumSymbols != 0) {
        NumSymbols = other.NumSymbols;
      }
      if (other.AbsCurSh != 0) {
        AbsCurSh = other.AbsCurSh;
      }
      if (other.AbsCurFc != 0) {
        AbsCurFc = other.AbsCurFc;
      }
      if (other.AbsCurCn != 0) {
        AbsCurCn = other.AbsCurCn;
      }
      if (other.PremOvPar != 0F) {
        PremOvPar = other.PremOvPar;
      }
      if (other.OptExAsPnl != 0D) {
        OptExAsPnl = other.OptExAsPnl;
      }
      if (other.DividendPnl != 0D) {
        DividendPnl = other.DividendPnl;
      }
      if (other.CorpActCashPnL != 0D) {
        CorpActCashPnL = other.CorpActCashPnL;
      }
      if (other.StkOpnPnlMid != 0D) {
        StkOpnPnlMid = other.StkOpnPnlMid;
      }
      if (other.StkOpnPnlClr != 0D) {
        StkOpnPnlClr = other.StkOpnPnlClr;
      }
      if (other.FutOpnPnlMid != 0D) {
        FutOpnPnlMid = other.FutOpnPnlMid;
      }
      if (other.FutOpnPnlClr != 0D) {
        FutOpnPnlClr = other.FutOpnPnlClr;
      }
      if (other.StkOptOpnPnlVol != 0D) {
        StkOptOpnPnlVol = other.StkOptOpnPnlVol;
      }
      if (other.StkOptOpnPnlMid != 0D) {
        StkOptOpnPnlMid = other.StkOptOpnPnlMid;
      }
      if (other.StkOptOpnPnlClr != 0D) {
        StkOptOpnPnlClr = other.StkOptOpnPnlClr;
      }
      if (other.FutOptOpnPnlVol != 0D) {
        FutOptOpnPnlVol = other.FutOptOpnPnlVol;
      }
      if (other.FutOptOpnPnlMid != 0D) {
        FutOptOpnPnlMid = other.FutOptOpnPnlMid;
      }
      if (other.FutOptOpnPnlClr != 0D) {
        FutOptOpnPnlClr = other.FutOptOpnPnlClr;
      }
      if (other.StkDayPnl != 0D) {
        StkDayPnl = other.StkDayPnl;
      }
      if (other.FutDayPnl != 0D) {
        FutDayPnl = other.FutDayPnl;
      }
      if (other.StkOptDayPnl != 0D) {
        StkOptDayPnl = other.StkOptDayPnl;
      }
      if (other.FutOptDayPnl != 0D) {
        FutOptDayPnl = other.FutOptDayPnl;
      }
      if (other.StktDaySh != 0) {
        StktDaySh = other.StktDaySh;
      }
      if (other.StkDayMny != 0D) {
        StkDayMny = other.StkDayMny;
      }
      if (other.FutDayCn != 0) {
        FutDayCn = other.FutDayCn;
      }
      if (other.FutDayMny != 0D) {
        FutDayMny = other.FutDayMny;
      }
      if (other.StkOptDayCn != 0) {
        StkOptDayCn = other.StkOptDayCn;
      }
      if (other.StkOptDayMny != 0D) {
        StkOptDayMny = other.StkOptDayMny;
      }
      if (other.FutOptDayCn != 0) {
        FutOptDayCn = other.FutOptDayCn;
      }
      if (other.FutOptDayMny != 0D) {
        FutOptDayMny = other.FutOptDayMny;
      }
      if (other.DayDDelta != 0F) {
        DayDDelta = other.DayDDelta;
      }
      if (other.OpDayVega != 0F) {
        OpDayVega = other.OpDayVega;
      }
      if (other.OpDayWVega != 0F) {
        OpDayWVega = other.OpDayWVega;
      }
      if (other.OpDayTVega != 0F) {
        OpDayTVega = other.OpDayTVega;
      }
      if (other.OpDayWtVega != 0F) {
        OpDayWtVega = other.OpDayWtVega;
      }
      if (other.OpDayTheta != 0F) {
        OpDayTheta = other.OpDayTheta;
      }
      if (other.OpEdgeOpened != 0F) {
        OpEdgeOpened = other.OpEdgeOpened;
      }
      if (other.OpEdgeClosed != 0F) {
        OpEdgeClosed = other.OpEdgeClosed;
      }
      if (other.PnlDn != 0F) {
        PnlDn = other.PnlDn;
      }
      if (other.PnlDe != 0F) {
        PnlDe = other.PnlDe;
      }
      if (other.PnlSl != 0F) {
        PnlSl = other.PnlSl;
      }
      if (other.PnlGa != 0F) {
        PnlGa = other.PnlGa;
      }
      if (other.PnlTh != 0F) {
        PnlTh = other.PnlTh;
      }
      if (other.PnlVe != 0F) {
        PnlVe = other.PnlVe;
      }
      if (other.PnlVo != 0F) {
        PnlVo = other.PnlVo;
      }
      if (other.PnlVa != 0F) {
        PnlVa = other.PnlVa;
      }
      if (other.PnlDDiv != 0F) {
        PnlDDiv = other.PnlDDiv;
      }
      if (other.PnlSDiv != 0F) {
        PnlSDiv = other.PnlSDiv;
      }
      if (other.PnlRate != 0F) {
        PnlRate = other.PnlRate;
      }
      if (other.PnlErr != 0F) {
        PnlErr = other.PnlErr;
      }
      if (other.PnlTe != 0F) {
        PnlTe = other.PnlTe;
      }
      if (other.PnlLn != 0F) {
        PnlLn = other.PnlLn;
      }
      if (other.PnlSh != 0F) {
        PnlSh = other.PnlSh;
      }
      if (other.TEdge != 0F) {
        TEdge = other.TEdge;
      }
      if (other.TEdgeMult != 0F) {
        TEdgeMult = other.TEdgeMult;
      }
      if (other.PosTEdgePnl != 0F) {
        PosTEdgePnl = other.PosTEdgePnl;
      }
      if (other.NegTEdgePnl != 0F) {
        NegTEdgePnl = other.NegTEdgePnl;
      }
      if (other.BadTEdgePnl != 0F) {
        BadTEdgePnl = other.BadTEdgePnl;
      }
      if (other.VaRsu90 != 0F) {
        VaRsu90 = other.VaRsu90;
      }
      if (other.VaRsd90 != 0F) {
        VaRsd90 = other.VaRsd90;
      }
      if (other.VaRsu50 != 0F) {
        VaRsu50 = other.VaRsu50;
      }
      if (other.VaRsd50 != 0F) {
        VaRsd50 = other.VaRsd50;
      }
      if (other.VaRsu15 != 0F) {
        VaRsu15 = other.VaRsu15;
      }
      if (other.VaRsd15 != 0F) {
        VaRsd15 = other.VaRsd15;
      }
      if (other.VaRsu10 != 0F) {
        VaRsu10 = other.VaRsu10;
      }
      if (other.VaRsd10 != 0F) {
        VaRsd10 = other.VaRsd10;
      }
      if (other.VaRsu05 != 0F) {
        VaRsu05 = other.VaRsu05;
      }
      if (other.VaRsd05 != 0F) {
        VaRsd05 = other.VaRsd05;
      }
      if (other.VaRsu1E != 0F) {
        VaRsu1E = other.VaRsu1E;
      }
      if (other.VaRsd1E != 0F) {
        VaRsd1E = other.VaRsd1E;
      }
      if (other.VaRsu2E != 0F) {
        VaRsu2E = other.VaRsu2E;
      }
      if (other.VaRsd2E != 0F) {
        VaRsd2E = other.VaRsd2E;
      }
      if (other.VaRearn != 0F) {
        VaRearn = other.VaRearn;
      }
      if (other.VaRcash != 0F) {
        VaRcash = other.VaRcash;
      }
      if (other.HcCnt != 0F) {
        HcCnt = other.HcCnt;
      }
      if (other.Haircut25 != 0F) {
        Haircut25 = other.Haircut25;
      }
      if (other.Haircut37 != 0F) {
        Haircut37 = other.Haircut37;
      }
      if (other.OptCnMinimum != 0F) {
        OptCnMinimum = other.OptCnMinimum;
      }
      if (other.Span01 != 0F) {
        Span01 = other.Span01;
      }
      if (other.Span02 != 0F) {
        Span02 = other.Span02;
      }
      if (other.Span03 != 0F) {
        Span03 = other.Span03;
      }
      if (other.Span04 != 0F) {
        Span04 = other.Span04;
      }
      if (other.Span05 != 0F) {
        Span05 = other.Span05;
      }
      if (other.Span06 != 0F) {
        Span06 = other.Span06;
      }
      if (other.Span07 != 0F) {
        Span07 = other.Span07;
      }
      if (other.Span08 != 0F) {
        Span08 = other.Span08;
      }
      if (other.Span09 != 0F) {
        Span09 = other.Span09;
      }
      if (other.Span10 != 0F) {
        Span10 = other.Span10;
      }
      if (other.Span11 != 0F) {
        Span11 = other.Span11;
      }
      if (other.Span12 != 0F) {
        Span12 = other.Span12;
      }
      if (other.Span13 != 0F) {
        Span13 = other.Span13;
      }
      if (other.Span14 != 0F) {
        Span14 = other.Span14;
      }
      if (other.Span15 != 0F) {
        Span15 = other.Span15;
      }
      if (other.Span16 != 0F) {
        Span16 = other.Span16;
      }
      if (other.Worst3Risk != 0F) {
        Worst3Risk = other.Worst3Risk;
      }
      if (other.worstSym1_ != null) {
        if (worstSym1_ == null) {
          WorstSym1 = new global::Spiderrock.Protobuf.TickerKey();
        }
        WorstSym1.MergeFrom(other.WorstSym1);
      }
      if (other.worstSym2_ != null) {
        if (worstSym2_ == null) {
          WorstSym2 = new global::Spiderrock.Protobuf.TickerKey();
        }
        WorstSym2.MergeFrom(other.WorstSym2);
      }
      if (other.worstSym3_ != null) {
        if (worstSym3_ == null) {
          WorstSym3 = new global::Spiderrock.Protobuf.TickerKey();
        }
        WorstSym3.MergeFrom(other.WorstSym3);
      }
      if (other.StkLiqRisk != 0F) {
        StkLiqRisk = other.StkLiqRisk;
      }
      if (other.FutLiqRisk != 0F) {
        FutLiqRisk = other.FutLiqRisk;
      }
      if (other.OptLiqRisk != 0F) {
        OptLiqRisk = other.OptLiqRisk;
      }
      if (other.SrRiskMargin != 0F) {
        SrRiskMargin = other.SrRiskMargin;
      }
      if (other.lastActivity_ != null) {
        if (lastActivity_ == null) {
          LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastActivity.MergeFrom(other.LastActivity);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 849: {
            LnDDelta = input.ReadDouble();
            break;
          }
          case 873: {
            ShDDelta = input.ReadDouble();
            break;
          }
          case 897: {
            LnStkMktValue = input.ReadDouble();
            break;
          }
          case 921: {
            ShStkMktValue = input.ReadDouble();
            break;
          }
          case 945: {
            FutMktValue = input.ReadDouble();
            break;
          }
          case 969: {
            StkOptMktValue = input.ReadDouble();
            break;
          }
          case 993: {
            FutOptMktValue = input.ReadDouble();
            break;
          }
          case 1021: {
            VegaLong = input.ReadFloat();
            break;
          }
          case 1045: {
            VegaShort = input.ReadFloat();
            break;
          }
          case 1069: {
            WVegaLong = input.ReadFloat();
            break;
          }
          case 1093: {
            WVegaShort = input.ReadFloat();
            break;
          }
          case 1117: {
            WtVegaLong = input.ReadFloat();
            break;
          }
          case 1141: {
            WtVegaShort = input.ReadFloat();
            break;
          }
          case 1165: {
            ThetaLong = input.ReadFloat();
            break;
          }
          case 1189: {
            ThetaShort = input.ReadFloat();
            break;
          }
          case 1213: {
            RhoLong = input.ReadFloat();
            break;
          }
          case 1237: {
            RhoShort = input.ReadFloat();
            break;
          }
          case 1261: {
            IvolLn = input.ReadFloat();
            break;
          }
          case 1285: {
            IvolSh = input.ReadFloat();
            break;
          }
          case 1309: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 1333: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 1357: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 1381: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 1405: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 1429: {
            WtVeM1 = input.ReadFloat();
            break;
          }
          case 1453: {
            WtVeM2 = input.ReadFloat();
            break;
          }
          case 1477: {
            WtVeM3 = input.ReadFloat();
            break;
          }
          case 1501: {
            WtVeM4 = input.ReadFloat();
            break;
          }
          case 1525: {
            WtVeM5 = input.ReadFloat();
            break;
          }
          case 1549: {
            Ddelta = input.ReadFloat();
            break;
          }
          case 1568: {
            NumSymbols = input.ReadInt32();
            break;
          }
          case 1592: {
            AbsCurSh = input.ReadInt32();
            break;
          }
          case 1616: {
            AbsCurFc = input.ReadInt32();
            break;
          }
          case 1640: {
            AbsCurCn = input.ReadInt32();
            break;
          }
          case 1669: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 1689: {
            OptExAsPnl = input.ReadDouble();
            break;
          }
          case 1713: {
            DividendPnl = input.ReadDouble();
            break;
          }
          case 1737: {
            CorpActCashPnL = input.ReadDouble();
            break;
          }
          case 1761: {
            StkOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1785: {
            StkOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1809: {
            FutOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1833: {
            FutOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1857: {
            StkOptOpnPnlVol = input.ReadDouble();
            break;
          }
          case 1881: {
            StkOptOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1905: {
            StkOptOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1929: {
            FutOptOpnPnlVol = input.ReadDouble();
            break;
          }
          case 1953: {
            FutOptOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1977: {
            FutOptOpnPnlClr = input.ReadDouble();
            break;
          }
          case 2001: {
            StkDayPnl = input.ReadDouble();
            break;
          }
          case 2025: {
            FutDayPnl = input.ReadDouble();
            break;
          }
          case 2049: {
            StkOptDayPnl = input.ReadDouble();
            break;
          }
          case 2073: {
            FutOptDayPnl = input.ReadDouble();
            break;
          }
          case 2096: {
            StktDaySh = input.ReadInt32();
            break;
          }
          case 2121: {
            StkDayMny = input.ReadDouble();
            break;
          }
          case 2144: {
            FutDayCn = input.ReadInt32();
            break;
          }
          case 2169: {
            FutDayMny = input.ReadDouble();
            break;
          }
          case 2192: {
            StkOptDayCn = input.ReadInt32();
            break;
          }
          case 2217: {
            StkOptDayMny = input.ReadDouble();
            break;
          }
          case 2240: {
            FutOptDayCn = input.ReadInt32();
            break;
          }
          case 2265: {
            FutOptDayMny = input.ReadDouble();
            break;
          }
          case 2293: {
            DayDDelta = input.ReadFloat();
            break;
          }
          case 2317: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 2341: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 2365: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 2389: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 2413: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 2437: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 2461: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 2485: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 2509: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 2533: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 2557: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 2581: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 2605: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 2629: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 2653: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 2677: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 2701: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 2773: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 2797: {
            PnlLn = input.ReadFloat();
            break;
          }
          case 2821: {
            PnlSh = input.ReadFloat();
            break;
          }
          case 2845: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2869: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 2893: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 2917: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 2941: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 2965: {
            VaRsu90 = input.ReadFloat();
            break;
          }
          case 2989: {
            VaRsd90 = input.ReadFloat();
            break;
          }
          case 3013: {
            VaRsu50 = input.ReadFloat();
            break;
          }
          case 3037: {
            VaRsd50 = input.ReadFloat();
            break;
          }
          case 3061: {
            VaRsu15 = input.ReadFloat();
            break;
          }
          case 3085: {
            VaRsd15 = input.ReadFloat();
            break;
          }
          case 3109: {
            VaRsu10 = input.ReadFloat();
            break;
          }
          case 3133: {
            VaRsd10 = input.ReadFloat();
            break;
          }
          case 3157: {
            VaRsu05 = input.ReadFloat();
            break;
          }
          case 3181: {
            VaRsd05 = input.ReadFloat();
            break;
          }
          case 3205: {
            VaRsu1E = input.ReadFloat();
            break;
          }
          case 3229: {
            VaRsd1E = input.ReadFloat();
            break;
          }
          case 3253: {
            VaRsu2E = input.ReadFloat();
            break;
          }
          case 3277: {
            VaRsd2E = input.ReadFloat();
            break;
          }
          case 3301: {
            VaRearn = input.ReadFloat();
            break;
          }
          case 3325: {
            VaRcash = input.ReadFloat();
            break;
          }
          case 3349: {
            HcCnt = input.ReadFloat();
            break;
          }
          case 3373: {
            Haircut25 = input.ReadFloat();
            break;
          }
          case 3397: {
            Haircut37 = input.ReadFloat();
            break;
          }
          case 3421: {
            OptCnMinimum = input.ReadFloat();
            break;
          }
          case 3445: {
            Span01 = input.ReadFloat();
            break;
          }
          case 3469: {
            Span02 = input.ReadFloat();
            break;
          }
          case 3493: {
            Span03 = input.ReadFloat();
            break;
          }
          case 3517: {
            Span04 = input.ReadFloat();
            break;
          }
          case 3541: {
            Span05 = input.ReadFloat();
            break;
          }
          case 3565: {
            Span06 = input.ReadFloat();
            break;
          }
          case 3589: {
            Span07 = input.ReadFloat();
            break;
          }
          case 3613: {
            Span08 = input.ReadFloat();
            break;
          }
          case 3637: {
            Span09 = input.ReadFloat();
            break;
          }
          case 3661: {
            Span10 = input.ReadFloat();
            break;
          }
          case 3685: {
            Span11 = input.ReadFloat();
            break;
          }
          case 3709: {
            Span12 = input.ReadFloat();
            break;
          }
          case 3733: {
            Span13 = input.ReadFloat();
            break;
          }
          case 3757: {
            Span14 = input.ReadFloat();
            break;
          }
          case 3781: {
            Span15 = input.ReadFloat();
            break;
          }
          case 3805: {
            Span16 = input.ReadFloat();
            break;
          }
          case 3829: {
            Worst3Risk = input.ReadFloat();
            break;
          }
          case 3850: {
            if (worstSym1_ == null) {
              WorstSym1 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym1);
            break;
          }
          case 3874: {
            if (worstSym2_ == null) {
              WorstSym2 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym2);
            break;
          }
          case 3898: {
            if (worstSym3_ == null) {
              WorstSym3 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym3);
            break;
          }
          case 3925: {
            StkLiqRisk = input.ReadFloat();
            break;
          }
          case 3949: {
            FutLiqRisk = input.ReadFloat();
            break;
          }
          case 3973: {
            OptLiqRisk = input.ReadFloat();
            break;
          }
          case 3997: {
            SrRiskMargin = input.ReadFloat();
            break;
          }
          case 4018: {
            if (lastActivity_ == null) {
              LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastActivity);
            break;
          }
          case 4042: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.AccountRiskRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 849: {
            LnDDelta = input.ReadDouble();
            break;
          }
          case 873: {
            ShDDelta = input.ReadDouble();
            break;
          }
          case 897: {
            LnStkMktValue = input.ReadDouble();
            break;
          }
          case 921: {
            ShStkMktValue = input.ReadDouble();
            break;
          }
          case 945: {
            FutMktValue = input.ReadDouble();
            break;
          }
          case 969: {
            StkOptMktValue = input.ReadDouble();
            break;
          }
          case 993: {
            FutOptMktValue = input.ReadDouble();
            break;
          }
          case 1021: {
            VegaLong = input.ReadFloat();
            break;
          }
          case 1045: {
            VegaShort = input.ReadFloat();
            break;
          }
          case 1069: {
            WVegaLong = input.ReadFloat();
            break;
          }
          case 1093: {
            WVegaShort = input.ReadFloat();
            break;
          }
          case 1117: {
            WtVegaLong = input.ReadFloat();
            break;
          }
          case 1141: {
            WtVegaShort = input.ReadFloat();
            break;
          }
          case 1165: {
            ThetaLong = input.ReadFloat();
            break;
          }
          case 1189: {
            ThetaShort = input.ReadFloat();
            break;
          }
          case 1213: {
            RhoLong = input.ReadFloat();
            break;
          }
          case 1237: {
            RhoShort = input.ReadFloat();
            break;
          }
          case 1261: {
            IvolLn = input.ReadFloat();
            break;
          }
          case 1285: {
            IvolSh = input.ReadFloat();
            break;
          }
          case 1309: {
            WtVeDd = input.ReadFloat();
            break;
          }
          case 1333: {
            WtVeDn = input.ReadFloat();
            break;
          }
          case 1357: {
            WtVeAt = input.ReadFloat();
            break;
          }
          case 1381: {
            WtVeUp = input.ReadFloat();
            break;
          }
          case 1405: {
            WtVeDu = input.ReadFloat();
            break;
          }
          case 1429: {
            WtVeM1 = input.ReadFloat();
            break;
          }
          case 1453: {
            WtVeM2 = input.ReadFloat();
            break;
          }
          case 1477: {
            WtVeM3 = input.ReadFloat();
            break;
          }
          case 1501: {
            WtVeM4 = input.ReadFloat();
            break;
          }
          case 1525: {
            WtVeM5 = input.ReadFloat();
            break;
          }
          case 1549: {
            Ddelta = input.ReadFloat();
            break;
          }
          case 1568: {
            NumSymbols = input.ReadInt32();
            break;
          }
          case 1592: {
            AbsCurSh = input.ReadInt32();
            break;
          }
          case 1616: {
            AbsCurFc = input.ReadInt32();
            break;
          }
          case 1640: {
            AbsCurCn = input.ReadInt32();
            break;
          }
          case 1669: {
            PremOvPar = input.ReadFloat();
            break;
          }
          case 1689: {
            OptExAsPnl = input.ReadDouble();
            break;
          }
          case 1713: {
            DividendPnl = input.ReadDouble();
            break;
          }
          case 1737: {
            CorpActCashPnL = input.ReadDouble();
            break;
          }
          case 1761: {
            StkOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1785: {
            StkOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1809: {
            FutOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1833: {
            FutOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1857: {
            StkOptOpnPnlVol = input.ReadDouble();
            break;
          }
          case 1881: {
            StkOptOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1905: {
            StkOptOpnPnlClr = input.ReadDouble();
            break;
          }
          case 1929: {
            FutOptOpnPnlVol = input.ReadDouble();
            break;
          }
          case 1953: {
            FutOptOpnPnlMid = input.ReadDouble();
            break;
          }
          case 1977: {
            FutOptOpnPnlClr = input.ReadDouble();
            break;
          }
          case 2001: {
            StkDayPnl = input.ReadDouble();
            break;
          }
          case 2025: {
            FutDayPnl = input.ReadDouble();
            break;
          }
          case 2049: {
            StkOptDayPnl = input.ReadDouble();
            break;
          }
          case 2073: {
            FutOptDayPnl = input.ReadDouble();
            break;
          }
          case 2096: {
            StktDaySh = input.ReadInt32();
            break;
          }
          case 2121: {
            StkDayMny = input.ReadDouble();
            break;
          }
          case 2144: {
            FutDayCn = input.ReadInt32();
            break;
          }
          case 2169: {
            FutDayMny = input.ReadDouble();
            break;
          }
          case 2192: {
            StkOptDayCn = input.ReadInt32();
            break;
          }
          case 2217: {
            StkOptDayMny = input.ReadDouble();
            break;
          }
          case 2240: {
            FutOptDayCn = input.ReadInt32();
            break;
          }
          case 2265: {
            FutOptDayMny = input.ReadDouble();
            break;
          }
          case 2293: {
            DayDDelta = input.ReadFloat();
            break;
          }
          case 2317: {
            OpDayVega = input.ReadFloat();
            break;
          }
          case 2341: {
            OpDayWVega = input.ReadFloat();
            break;
          }
          case 2365: {
            OpDayTVega = input.ReadFloat();
            break;
          }
          case 2389: {
            OpDayWtVega = input.ReadFloat();
            break;
          }
          case 2413: {
            OpDayTheta = input.ReadFloat();
            break;
          }
          case 2437: {
            OpEdgeOpened = input.ReadFloat();
            break;
          }
          case 2461: {
            OpEdgeClosed = input.ReadFloat();
            break;
          }
          case 2485: {
            PnlDn = input.ReadFloat();
            break;
          }
          case 2509: {
            PnlDe = input.ReadFloat();
            break;
          }
          case 2533: {
            PnlSl = input.ReadFloat();
            break;
          }
          case 2557: {
            PnlGa = input.ReadFloat();
            break;
          }
          case 2581: {
            PnlTh = input.ReadFloat();
            break;
          }
          case 2605: {
            PnlVe = input.ReadFloat();
            break;
          }
          case 2629: {
            PnlVo = input.ReadFloat();
            break;
          }
          case 2653: {
            PnlVa = input.ReadFloat();
            break;
          }
          case 2677: {
            PnlDDiv = input.ReadFloat();
            break;
          }
          case 2701: {
            PnlSDiv = input.ReadFloat();
            break;
          }
          case 2725: {
            PnlRate = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlErr = input.ReadFloat();
            break;
          }
          case 2773: {
            PnlTe = input.ReadFloat();
            break;
          }
          case 2797: {
            PnlLn = input.ReadFloat();
            break;
          }
          case 2821: {
            PnlSh = input.ReadFloat();
            break;
          }
          case 2845: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2869: {
            TEdgeMult = input.ReadFloat();
            break;
          }
          case 2893: {
            PosTEdgePnl = input.ReadFloat();
            break;
          }
          case 2917: {
            NegTEdgePnl = input.ReadFloat();
            break;
          }
          case 2941: {
            BadTEdgePnl = input.ReadFloat();
            break;
          }
          case 2965: {
            VaRsu90 = input.ReadFloat();
            break;
          }
          case 2989: {
            VaRsd90 = input.ReadFloat();
            break;
          }
          case 3013: {
            VaRsu50 = input.ReadFloat();
            break;
          }
          case 3037: {
            VaRsd50 = input.ReadFloat();
            break;
          }
          case 3061: {
            VaRsu15 = input.ReadFloat();
            break;
          }
          case 3085: {
            VaRsd15 = input.ReadFloat();
            break;
          }
          case 3109: {
            VaRsu10 = input.ReadFloat();
            break;
          }
          case 3133: {
            VaRsd10 = input.ReadFloat();
            break;
          }
          case 3157: {
            VaRsu05 = input.ReadFloat();
            break;
          }
          case 3181: {
            VaRsd05 = input.ReadFloat();
            break;
          }
          case 3205: {
            VaRsu1E = input.ReadFloat();
            break;
          }
          case 3229: {
            VaRsd1E = input.ReadFloat();
            break;
          }
          case 3253: {
            VaRsu2E = input.ReadFloat();
            break;
          }
          case 3277: {
            VaRsd2E = input.ReadFloat();
            break;
          }
          case 3301: {
            VaRearn = input.ReadFloat();
            break;
          }
          case 3325: {
            VaRcash = input.ReadFloat();
            break;
          }
          case 3349: {
            HcCnt = input.ReadFloat();
            break;
          }
          case 3373: {
            Haircut25 = input.ReadFloat();
            break;
          }
          case 3397: {
            Haircut37 = input.ReadFloat();
            break;
          }
          case 3421: {
            OptCnMinimum = input.ReadFloat();
            break;
          }
          case 3445: {
            Span01 = input.ReadFloat();
            break;
          }
          case 3469: {
            Span02 = input.ReadFloat();
            break;
          }
          case 3493: {
            Span03 = input.ReadFloat();
            break;
          }
          case 3517: {
            Span04 = input.ReadFloat();
            break;
          }
          case 3541: {
            Span05 = input.ReadFloat();
            break;
          }
          case 3565: {
            Span06 = input.ReadFloat();
            break;
          }
          case 3589: {
            Span07 = input.ReadFloat();
            break;
          }
          case 3613: {
            Span08 = input.ReadFloat();
            break;
          }
          case 3637: {
            Span09 = input.ReadFloat();
            break;
          }
          case 3661: {
            Span10 = input.ReadFloat();
            break;
          }
          case 3685: {
            Span11 = input.ReadFloat();
            break;
          }
          case 3709: {
            Span12 = input.ReadFloat();
            break;
          }
          case 3733: {
            Span13 = input.ReadFloat();
            break;
          }
          case 3757: {
            Span14 = input.ReadFloat();
            break;
          }
          case 3781: {
            Span15 = input.ReadFloat();
            break;
          }
          case 3805: {
            Span16 = input.ReadFloat();
            break;
          }
          case 3829: {
            Worst3Risk = input.ReadFloat();
            break;
          }
          case 3850: {
            if (worstSym1_ == null) {
              WorstSym1 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym1);
            break;
          }
          case 3874: {
            if (worstSym2_ == null) {
              WorstSym2 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym2);
            break;
          }
          case 3898: {
            if (worstSym3_ == null) {
              WorstSym3 = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(WorstSym3);
            break;
          }
          case 3925: {
            StkLiqRisk = input.ReadFloat();
            break;
          }
          case 3949: {
            FutLiqRisk = input.ReadFloat();
            break;
          }
          case 3973: {
            OptLiqRisk = input.ReadFloat();
            break;
          }
          case 3997: {
            SrRiskMargin = input.ReadFloat();
            break;
          }
          case 4018: {
            if (lastActivity_ == null) {
              LastActivity = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastActivity);
            break;
          }
          case 4042: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AccountRiskRecordV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.AccountRiskRecordV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          currency_ = other.currency_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        /// <summary>
        /// SR account acronym
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 11;
        private global::Spiderrock.Protobuf.Currency currency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
        /// <summary>
        /// point currency of all associated positions and pnl values
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.Currency Currency {
          get { return currency_; }
          set {
            currency_ = value;
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 13;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm acronym
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (Currency != other.Currency) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= Currency.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Currency);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) Currency);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.Currency != global::Spiderrock.Protobuf.Currency.Unspecified) {
            Currency = other.Currency;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                Currency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 88: {
                Currency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
