// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/RiskCubeDetailV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/RiskCubeDetailV5.proto</summary>
  public static partial class RiskCubeDetailV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/RiskCubeDetailV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RiskCubeDetailV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipQcm90b2J1Zi9DbGllbnRSaXNrL1Jpc2tDdWJlRGV0YWlsVjUucHJvdG8S",
            "E3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9uLnByb3Rv",
            "Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIqAeChBSaXNrQ3Vi",
            "ZURldGFpbFY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NZXNzYWdlTWV0YWRhdGESOAoEcGtleRgCIAEoCzIqLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuUmlza0N1YmVEZXRhaWxWNS5QS2V5EjUKB3ZlcnNpb24YZCAB",
            "KA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLlJpc2tDdWJlVmVyc2lvbhIVCg1j",
            "bGVhcmluZ19maXJtGGogASgJEhYKDmNsZWFyaW5nX2FjY250GG0gASgJEhgK",
            "EHJpc2tfc2VydmVyX2NvZGUYcCABKAkSEwoLdmlld19ncm91cDEYcyABKAkS",
            "EwoLdmlld19ncm91cDIYdiABKAkSEwoLdmlld19ncm91cDMYeSABKAkSLgoG",
            "dGlja2VyGHwgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkS",
            "EgoKcmlza19jbGFzcxh/IAEoCRI1CgtzeW1ib2xfdHlwZRiCASABKA4yHy5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlN5bWJvbFR5cGUSDQoEYmV0YRiFASABKAIS",
            "NQoLYmV0YV9zb3VyY2UYiAEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5C",
            "ZXRhU291cmNlEg8KBnNlY3RvchiLASABKAkSEAoHaW5kX251bRiOASABKAUS",
            "EAoHc3ViX251bRiRASABKAUSEAoHZ3JwX251bRiUASABKAUSEAoHbmJyX251",
            "bRiXASABKAUSDwoGZV9kYXlzGJoBIAEoBRIPCgZkX2RheXMYnQEgASgFEhAK",
            "B3hfZGVsdGEYoAEgASgCEi8KCGV4cF9jb2RlGKMBIAEoDjIcLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuRXhwQ29kZRIxCglza2V3X2NvZGUYpgEgASgOMh0uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5Ta2V3Q29kZRI0CgtlX2RheXNfY29kZRipASAB",
            "KA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkVEYXlzQ29kZRI0CgtpX3ZvbF9y",
            "YW5nZRisASABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLmlWb2xSYW5nZRIQ",
            "Cgdza2V3X2REGK8BIAEoAhIQCgdza2V3X2ROGLIBIAEoAhIQCgdza2V3X2FU",
            "GLUBIAEoAhIQCgdza2V3X3VQGLgBIAEoAhIQCgdza2V3X2RVGLsBIAEoAhIT",
            "CgpzaF9vcG5fcG9zGL4BIAEoBRITCgpmY19vcG5fcG9zGMEBIAEoBRITCgpj",
            "bl9vcG5fcG9zGMQBIAEoBRIVCgxjbl9hdG1fZXF1aXYYxwEgASgCEg8KBnNo",
            "X2JvdBjKASABKAUSDwoGc2hfc2xkGM0BIAEoBRIUCgtzaF9zbGRfc2hydBjQ",
            "ASABKAUSDwoGZmNfYm90GNMBIAEoBRIPCgZmY19zbGQY1gEgASgFEg8KBmNu",
            "X2JvdBjZASABKAUSDwoGY25fc2xkGNwBIAEoBRISCgljbl9vcGVuZWQY3wEg",
            "ASgFEhIKCWNuX2Nsb3NlZBjiASABKAUSEAoHb3BuX2RpchjlASABKAkSEAoH",
            "cG9zX2RpchjoASABKAkSFQoMdW5pdF9vcG5fcG9zGOsBIAEoBRIVCgx1bml0",
            "X2N1cl9wb3MY7gEgASgFEhUKDHVuaXRfcXR5X2JvdBjxASABKAUSFQoMdW5p",
            "dF9xdHlfc2xkGPQBIAEoBRIQCgdkYXlfcG5sGPcBIAEoAhITCgpkYXlfZG5f",
            "cG5sGPoBIAEoAhIWCg1kYXlfdHJkX2RlbHRhGP0BIAEoAhIXCg5kYXlfdHJk",
            "X2REZWx0YRiAAiABKAISFgoNZGF5X3RyZF9nYW1tYRiDAiABKAISFwoOZGF5",
            "X3RyZF9kR2FtbWEYhgIgASgCEhUKDGRheV90cmRfdmVnYRiJAiABKAISFgoN",
            "ZGF5X3RyZF93VmVnYRiMAiABKAISFgoNZGF5X3RyZF90VmVnYRiPAiABKAIS",
            "GAoPZGF5X3RyZF93dF92ZWdhGJICIAEoAhIWCg1kYXlfdHJkX3RoZXRhGJUC",
            "IAEoAhIYCg9kYXlfZWRnZV9vcGVuZWQYmAIgASgCEhgKD2RheV9lZGdlX2Ns",
            "b3NlZBibAiABKAISFAoLZGF5X21ueV9ib3QYngIgASgBEhQKC2RheV9tbnlf",
            "c2xkGKECIAEoARIZChBvcG5fcG5sX3ZvbF9tYXJrGKQCIAEoAhIZChBvcG5f",
            "cG5sX21pZF9tYXJrGKcCIAEoAhIZChBvcG5fcG5sX2Nscl9tYXJrGKoCIAEo",
            "AhIZChBvcG5fbWFya19icmtfbW55GK0CIAEoAhIWCg1vcG5fdGhlb19lZGdl",
            "GLACIAEoAhIWCg1wb3NfdGhlb19lZGdlGLMCIAEoAhITCgp0X3ZvbF9tb3Zl",
            "GLYCIAEoAhIUCgt0X2VkZ2VfbW92ZRi5AiABKAISDwoGdF9lZGdlGLwCIAEo",
            "AhITCgpvcG5fcG5sX2RlGL8CIAEoAhITCgpvcG5fcG5sX2dhGMICIAEoAhIT",
            "CgpvcG5fcG5sX3RoGMUCIAEoAhITCgpvcG5fcG5sX3ZlGMgCIAEoAhITCgpv",
            "cG5fcG5sX3ZvGMsCIAEoAhITCgpvcG5fcG5sX3ZhGM4CIAEoAhITCgpvcG5f",
            "cG5sX3NsGNECIAEoAhIVCgxvcG5fcG5sX3JhdGUY1AIgASgCEhUKDG9wbl9w",
            "bmxfc0RpdhjXAiABKAISFQoMb3BuX3BubF9kRGl2GNoCIAEoAhIUCgtvcG5f",
            "cG5sX2VychjdAiABKAISGAoPb3BuX2VkZ2VfY2hhbmdlGOACIAEoAhISCglw",
            "b3NfZGVsdGEY4wIgASgCEhMKCnBvc19kRGVsdGEY5gIgASgCEhIKCXBvc19k",
            "QmV0YRjpAiABKAISEgoJcG9zX2dhbW1hGOwCIAEoAhITCgpwb3NfZEdhbW1h",
            "GO8CIAEoAhIRCghwb3NfdmVnYRjyAiABKAISEgoJcG9zX3dWZWdhGPUCIAEo",
            "AhISCglwb3NfdFZlZ2EY+AIgASgCEhQKC3Bvc193dF92ZWdhGPsCIAEoAhIS",
            "Cglwb3Nfdm9sZ2EY/gIgASgCEhIKCXBvc192YW5uYRiBAyABKAISEgoJcG9z",
            "X3RoZXRhGIQDIAEoAhIQCgdwb3NfcmhvGIcDIAEoAhIQCgdwb3NfcGhpGIoD",
            "IAEoAhITCgpwb3NfaERlbHRhGPcDIAEoAhIUCgtwb3NfaEREZWx0YRj4AyAB",
            "KAISEwoKcG9zX2hHYW1tYRj5AyABKAISFQoMcG9zX2hER2FhbW1hGPoDIAEo",
            "AhIVCgxwb3Nfbm90aW9uYWwYjQMgASgCEhYKDXBvc19ta3RfdmFsdWUYkAMg",
            "ASgCEhYKDXBvc19wcmVtX29QYXIYkwMgASgCEhAKB2F0bV92b2wYlgMgASgC",
            "EhAKB3N5bV92b2wYmQMgASgCEhEKCHNyX3Nsb3BlGJwDIAEoAhIRCghwcmNf",
            "c1ZvbBifAyABKAISEQoIcHJjX3RPcHgYogMgASgCEhEKCHByY195T3B4GKUD",
            "IAEoAhIRCghwcmNfdVByYxioAyABKAISEgoJcHJjX3llYXJzGKsDIAEoAhIR",
            "CghwcmNfcmF0ZRiuAyABKAISEQoIcHJjX3NkaXYYsQMgASgCEhEKCHByY19k",
            "ZGl2GLQDIAEoAhIUCgt1X3ByY19yYXRpbxi3AyABKAISEwoKdV9wcmNfbW92",
            "ZRi6AyABKAISEwoKaV92b2xfbW92ZRi9AyABKAISEwoKZXhfZGl2X2FtdBjA",
            "AyABKAISFAoLYm9ycm93X3JhdGUYwwMgASgCEhMKCm1vZGVsX3R5cGUYxgMg",
            "ASgFEhoKEXVuZGVybGllcnNfcGVyX2NuGMkDIAEoBRI7Cg51bmRlcmxpZXJf",
            "dHlwZRjMAyABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLlVuZGVybGllclR5",
            "cGUSFAoLcG9pbnRfdmFsdWUYzwMgASgCEjYKDnBvaW50X2N1cnJlbmN5GNID",
            "IAEoDjIdLnNwaWRlcnJvY2sucHJvdG9idWYuQ3VycmVuY3kSEwoKdGlja192",
            "YWx1ZRjVAyABKAISNAoKbXVsdGloZWRnZRjYAyABKA4yHy5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk11bHRpaGVkZ2USOgoRbXVsdGloZWRnZV9zb3VyY2UY2wMg",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSGwoSbXVsdGlo",
            "ZWRnZV9wVlJhdGlvGN4DIAEoAhIYCg9zcGFuX3ByY19pbmNfdXAY4QMgASgC",
            "EhgKD3NwYW5fcHJjX2luY19kbhjkAyABKAISFQoMc3Bhbl92b2xfaW5jGOcD",
            "IAEoAhI1Cg1wcmNfc3Bhbl90eXBlGOoDIAEoDjIdLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuU3BhblR5cGUSNQoNdm9sX3NwYW5fdHlwZRjtAyABKA4yHS5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLlNwYW5UeXBlEkIKEnNwYW5fcHJpY2luZ19tb2Rl",
            "bBjwAyABKA4yJS5zcGlkZXJyb2NrLnByb3RvYnVmLlNwYW5QcmljaW5nTW9k",
            "ZWwSNQoLbWFyZ2luX3R5cGUY8wMgASgOMh8uc3BpZGVycm9jay5wcm90b2J1",
            "Zi5NYXJnaW5UeXBlEi4KCXRpbWVzdGFtcBj2AyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wGvUBCgRQS2V5Eg0KBWFjY250GAogASgJEi8KB3Nl",
            "Y19rZXkYCyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9wdGlvbktleRIu",
            "CghzZWNfdHlwZRgMIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuU2VjVHlw",
            "ZRIwCgp0cmFkZV9kYXRlGA0gASgLMhwuc3BpZGVycm9jay5wcm90b2J1Zi5E",
            "YXRlS2V5EjYKDHJpc2tfc2Vzc2lvbhgOIAEoDjIgLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuUmlza1Nlc3Npb24SEwoLY2xpZW50X2Zpcm0YDyABKAliBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RiskCubeDetailV5), global::Spiderrock.Protobuf.RiskCubeDetailV5.Parser, new[]{ "Meta", "Pkey", "Version", "ClearingFirm", "ClearingAccnt", "RiskServerCode", "ViewGroup1", "ViewGroup2", "ViewGroup3", "Ticker", "RiskClass", "SymbolType", "Beta", "BetaSource", "Sector", "IndNum", "SubNum", "GrpNum", "NbrNum", "EDays", "DDays", "XDelta", "ExpCode", "SkewCode", "EDaysCode", "IVolRange", "SkewDD", "SkewDN", "SkewAT", "SkewUP", "SkewDU", "ShOpnPos", "FcOpnPos", "CnOpnPos", "CnAtmEquiv", "ShBot", "ShSld", "ShSldShrt", "FcBot", "FcSld", "CnBot", "CnSld", "CnOpened", "CnClosed", "OpnDir", "PosDir", "UnitOpnPos", "UnitCurPos", "UnitQtyBot", "UnitQtySld", "DayPnl", "DayDnPnl", "DayTrdDelta", "DayTrdDDelta", "DayTrdGamma", "DayTrdDGamma", "DayTrdVega", "DayTrdWVega", "DayTrdTVega", "DayTrdWtVega", "DayTrdTheta", "DayEdgeOpened", "DayEdgeClosed", "DayMnyBot", "DayMnySld", "OpnPnlVolMark", "OpnPnlMidMark", "OpnPnlClrMark", "OpnMarkBrkMny", "OpnTheoEdge", "PosTheoEdge", "TVolMove", "TEdgeMove", "TEdge", "OpnPnlDe", "OpnPnlGa", "OpnPnlTh", "OpnPnlVe", "OpnPnlVo", "OpnPnlVa", "OpnPnlSl", "OpnPnlRate", "OpnPnlSDiv", "OpnPnlDDiv", "OpnPnlErr", "OpnEdgeChange", "PosDelta", "PosDDelta", "PosDBeta", "PosGamma", "PosDGamma", "PosVega", "PosWVega", "PosTVega", "PosWtVega", "PosVolga", "PosVanna", "PosTheta", "PosRho", "PosPhi", "PosHDelta", "PosHDDelta", "PosHGamma", "PosHDGaamma", "PosNotional", "PosMktValue", "PosPremOPar", "AtmVol", "SymVol", "SrSlope", "PrcSVol", "PrcTOpx", "PrcYOpx", "PrcUPrc", "PrcYears", "PrcRate", "PrcSdiv", "PrcDdiv", "UPrcRatio", "UPrcMove", "IVolMove", "ExDivAmt", "BorrowRate", "ModelType", "UnderliersPerCn", "UnderlierType", "PointValue", "PointCurrency", "TickValue", "Multihedge", "MultihedgeSource", "MultihedgePVRatio", "SpanPrcIncUp", "SpanPrcIncDn", "SpanVolInc", "PrcSpanType", "VolSpanType", "SpanPricingModel", "MarginType", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey), global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey.Parser, new[]{ "Accnt", "SecKey", "SecType", "TradeDate", "RiskSession", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///RiskCubeDetail records are published by CoreRiskServers and are designed to be aggregated and analyzed over time.
  ///RiskCubeDetail records are published to the SpiderRock Archive Host data pipeline at the end of each trading period.
  /// </summary>
  public sealed partial class RiskCubeDetailV5 : pb::IMessage<RiskCubeDetailV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RiskCubeDetailV5> _parser = new pb::MessageParser<RiskCubeDetailV5>(() => new RiskCubeDetailV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RiskCubeDetailV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.RiskCubeDetailV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiskCubeDetailV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiskCubeDetailV5(RiskCubeDetailV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      version_ = other.version_;
      clearingFirm_ = other.clearingFirm_;
      clearingAccnt_ = other.clearingAccnt_;
      riskServerCode_ = other.riskServerCode_;
      viewGroup1_ = other.viewGroup1_;
      viewGroup2_ = other.viewGroup2_;
      viewGroup3_ = other.viewGroup3_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      riskClass_ = other.riskClass_;
      symbolType_ = other.symbolType_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      sector_ = other.sector_;
      indNum_ = other.indNum_;
      subNum_ = other.subNum_;
      grpNum_ = other.grpNum_;
      nbrNum_ = other.nbrNum_;
      eDays_ = other.eDays_;
      dDays_ = other.dDays_;
      xDelta_ = other.xDelta_;
      expCode_ = other.expCode_;
      skewCode_ = other.skewCode_;
      eDaysCode_ = other.eDaysCode_;
      iVolRange_ = other.iVolRange_;
      skewDD_ = other.skewDD_;
      skewDN_ = other.skewDN_;
      skewAT_ = other.skewAT_;
      skewUP_ = other.skewUP_;
      skewDU_ = other.skewDU_;
      shOpnPos_ = other.shOpnPos_;
      fcOpnPos_ = other.fcOpnPos_;
      cnOpnPos_ = other.cnOpnPos_;
      cnAtmEquiv_ = other.cnAtmEquiv_;
      shBot_ = other.shBot_;
      shSld_ = other.shSld_;
      shSldShrt_ = other.shSldShrt_;
      fcBot_ = other.fcBot_;
      fcSld_ = other.fcSld_;
      cnBot_ = other.cnBot_;
      cnSld_ = other.cnSld_;
      cnOpened_ = other.cnOpened_;
      cnClosed_ = other.cnClosed_;
      opnDir_ = other.opnDir_;
      posDir_ = other.posDir_;
      unitOpnPos_ = other.unitOpnPos_;
      unitCurPos_ = other.unitCurPos_;
      unitQtyBot_ = other.unitQtyBot_;
      unitQtySld_ = other.unitQtySld_;
      dayPnl_ = other.dayPnl_;
      dayDnPnl_ = other.dayDnPnl_;
      dayTrdDelta_ = other.dayTrdDelta_;
      dayTrdDDelta_ = other.dayTrdDDelta_;
      dayTrdGamma_ = other.dayTrdGamma_;
      dayTrdDGamma_ = other.dayTrdDGamma_;
      dayTrdVega_ = other.dayTrdVega_;
      dayTrdWVega_ = other.dayTrdWVega_;
      dayTrdTVega_ = other.dayTrdTVega_;
      dayTrdWtVega_ = other.dayTrdWtVega_;
      dayTrdTheta_ = other.dayTrdTheta_;
      dayEdgeOpened_ = other.dayEdgeOpened_;
      dayEdgeClosed_ = other.dayEdgeClosed_;
      dayMnyBot_ = other.dayMnyBot_;
      dayMnySld_ = other.dayMnySld_;
      opnPnlVolMark_ = other.opnPnlVolMark_;
      opnPnlMidMark_ = other.opnPnlMidMark_;
      opnPnlClrMark_ = other.opnPnlClrMark_;
      opnMarkBrkMny_ = other.opnMarkBrkMny_;
      opnTheoEdge_ = other.opnTheoEdge_;
      posTheoEdge_ = other.posTheoEdge_;
      tVolMove_ = other.tVolMove_;
      tEdgeMove_ = other.tEdgeMove_;
      tEdge_ = other.tEdge_;
      opnPnlDe_ = other.opnPnlDe_;
      opnPnlGa_ = other.opnPnlGa_;
      opnPnlTh_ = other.opnPnlTh_;
      opnPnlVe_ = other.opnPnlVe_;
      opnPnlVo_ = other.opnPnlVo_;
      opnPnlVa_ = other.opnPnlVa_;
      opnPnlSl_ = other.opnPnlSl_;
      opnPnlRate_ = other.opnPnlRate_;
      opnPnlSDiv_ = other.opnPnlSDiv_;
      opnPnlDDiv_ = other.opnPnlDDiv_;
      opnPnlErr_ = other.opnPnlErr_;
      opnEdgeChange_ = other.opnEdgeChange_;
      posDelta_ = other.posDelta_;
      posDDelta_ = other.posDDelta_;
      posDBeta_ = other.posDBeta_;
      posGamma_ = other.posGamma_;
      posDGamma_ = other.posDGamma_;
      posVega_ = other.posVega_;
      posWVega_ = other.posWVega_;
      posTVega_ = other.posTVega_;
      posWtVega_ = other.posWtVega_;
      posVolga_ = other.posVolga_;
      posVanna_ = other.posVanna_;
      posTheta_ = other.posTheta_;
      posRho_ = other.posRho_;
      posPhi_ = other.posPhi_;
      posHDelta_ = other.posHDelta_;
      posHDDelta_ = other.posHDDelta_;
      posHGamma_ = other.posHGamma_;
      posHDGaamma_ = other.posHDGaamma_;
      posNotional_ = other.posNotional_;
      posMktValue_ = other.posMktValue_;
      posPremOPar_ = other.posPremOPar_;
      atmVol_ = other.atmVol_;
      symVol_ = other.symVol_;
      srSlope_ = other.srSlope_;
      prcSVol_ = other.prcSVol_;
      prcTOpx_ = other.prcTOpx_;
      prcYOpx_ = other.prcYOpx_;
      prcUPrc_ = other.prcUPrc_;
      prcYears_ = other.prcYears_;
      prcRate_ = other.prcRate_;
      prcSdiv_ = other.prcSdiv_;
      prcDdiv_ = other.prcDdiv_;
      uPrcRatio_ = other.uPrcRatio_;
      uPrcMove_ = other.uPrcMove_;
      iVolMove_ = other.iVolMove_;
      exDivAmt_ = other.exDivAmt_;
      borrowRate_ = other.borrowRate_;
      modelType_ = other.modelType_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      tickValue_ = other.tickValue_;
      multihedge_ = other.multihedge_;
      multihedgeSource_ = other.multihedgeSource_ != null ? other.multihedgeSource_.Clone() : null;
      multihedgePVRatio_ = other.multihedgePVRatio_;
      spanPrcIncUp_ = other.spanPrcIncUp_;
      spanPrcIncDn_ = other.spanPrcIncDn_;
      spanVolInc_ = other.spanVolInc_;
      prcSpanType_ = other.prcSpanType_;
      volSpanType_ = other.volSpanType_;
      spanPricingModel_ = other.spanPricingModel_;
      marginType_ = other.marginType_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiskCubeDetailV5 Clone() {
      return new RiskCubeDetailV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 100;
    private global::Spiderrock.Protobuf.RiskCubeVersion version_ = global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RiskCubeVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "clearing_firm" field.</summary>
    public const int ClearingFirmFieldNumber = 106;
    private string clearingFirm_ = "";
    /// <summary>
    /// Clearing Firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFirm {
      get { return clearingFirm_; }
      set {
        clearingFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_accnt" field.</summary>
    public const int ClearingAccntFieldNumber = 109;
    private string clearingAccnt_ = "";
    /// <summary>
    /// Clearing Firm Accnt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingAccnt {
      get { return clearingAccnt_; }
      set {
        clearingAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 112;
    private string riskServerCode_ = "";
    /// <summary>
    /// SR RiskServer (server that published this record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_group1" field.</summary>
    public const int ViewGroup1FieldNumber = 115;
    private string viewGroup1_ = "";
    /// <summary>
    /// Client defined view group #1 (can be fitered/aggregated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup1 {
      get { return viewGroup1_; }
      set {
        viewGroup1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_group2" field.</summary>
    public const int ViewGroup2FieldNumber = 118;
    private string viewGroup2_ = "";
    /// <summary>
    /// Client defined view group #2 (can be fitered/aggregated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup2 {
      get { return viewGroup2_; }
      set {
        viewGroup2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_group3" field.</summary>
    public const int ViewGroup3FieldNumber = 121;
    private string viewGroup3_ = "";
    /// <summary>
    /// Client defined view group #3 (can be fitered/aggregated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewGroup3 {
      get { return viewGroup3_; }
      set {
        viewGroup3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 124;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// Risk Symbol (underlier for equities; product group for future/option complexes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "risk_class" field.</summary>
    public const int RiskClassFieldNumber = 127;
    private string riskClass_ = "";
    /// <summary>
    /// Symbol risk class (from SymbolControl record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskClass {
      get { return riskClass_; }
      set {
        riskClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 130;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    /// <summary>
    /// Symbol type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 133;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 136;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 139;
    private string sector_ = "";
    /// <summary>
    /// Client defined sector (from SymbolControl record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ind_num" field.</summary>
    public const int IndNumFieldNumber = 142;
    private int indNum_;
    /// <summary>
    /// Ind Num (00)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IndNum {
      get { return indNum_; }
      set {
        indNum_ = value;
      }
    }

    /// <summary>Field number for the "sub_num" field.</summary>
    public const int SubNumFieldNumber = 145;
    private int subNum_;
    /// <summary>
    /// Sub Num (0000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubNum {
      get { return subNum_; }
      set {
        subNum_ = value;
      }
    }

    /// <summary>Field number for the "grp_num" field.</summary>
    public const int GrpNumFieldNumber = 148;
    private int grpNum_;
    /// <summary>
    /// Grp Num (000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrpNum {
      get { return grpNum_; }
      set {
        grpNum_ = value;
      }
    }

    /// <summary>Field number for the "nbr_num" field.</summary>
    public const int NbrNumFieldNumber = 151;
    private int nbrNum_;
    /// <summary>
    /// Nbr Num (00000000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbrNum {
      get { return nbrNum_; }
      set {
        nbrNum_ = value;
      }
    }

    /// <summary>Field number for the "e_days" field.</summary>
    public const int EDaysFieldNumber = 154;
    private int eDays_;
    /// <summary>
    /// days to next earnings [-5, +30]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EDays {
      get { return eDays_; }
      set {
        eDays_ = value;
      }
    }

    /// <summary>Field number for the "d_days" field.</summary>
    public const int DDaysFieldNumber = 157;
    private int dDays_;
    /// <summary>
    /// days to next dividend [-5, +30]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DDays {
      get { return dDays_; }
      set {
        dDays_ = value;
      }
    }

    /// <summary>Field number for the "x_delta" field.</summary>
    public const int XDeltaFieldNumber = 160;
    private float xDelta_;
    /// <summary>
    /// calls = +0.5 - delta; puts = -0.5 - delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XDelta {
      get { return xDelta_; }
      set {
        xDelta_ = value;
      }
    }

    /// <summary>Field number for the "exp_code" field.</summary>
    public const int ExpCodeFieldNumber = 163;
    private global::Spiderrock.Protobuf.ExpCode expCode_ = global::Spiderrock.Protobuf.ExpCode.Unspecified;
    /// <summary>
    /// Time-to-expiry code (W1, W2, M1, M2, M34, M56, M7C, Y1, Y2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpCode ExpCode {
      get { return expCode_; }
      set {
        expCode_ = value;
      }
    }

    /// <summary>Field number for the "skew_code" field.</summary>
    public const int SkewCodeFieldNumber = 166;
    private global::Spiderrock.Protobuf.SkewCode skewCode_ = global::Spiderrock.Protobuf.SkewCode.Unspecified;
    /// <summary>
    /// Skew bucket code (Dd=Deep DownSide, Dn = DownSide, At = ATM, Up = UpSide, DU = FarUpSide)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SkewCode SkewCode {
      get { return skewCode_; }
      set {
        skewCode_ = value;
      }
    }

    /// <summary>Field number for the "e_days_code" field.</summary>
    public const int EDaysCodeFieldNumber = 169;
    private global::Spiderrock.Protobuf.EDaysCode eDaysCode_ = global::Spiderrock.Protobuf.EDaysCode.Unspecified;
    /// <summary>
    /// Days to next earnings event (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.EDaysCode EDaysCode {
      get { return eDaysCode_; }
      set {
        eDaysCode_ = value;
      }
    }

    /// <summary>Field number for the "i_vol_range" field.</summary>
    public const int IVolRangeFieldNumber = 172;
    private global::Spiderrock.Protobuf.iVolRange iVolRange_ = global::Spiderrock.Protobuf.iVolRange.Unspecified;
    /// <summary>
    /// Implied ATM Vol Range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.iVolRange IVolRange {
      get { return iVolRange_; }
      set {
        iVolRange_ = value;
      }
    }

    /// <summary>Field number for the "skew_dD" field.</summary>
    public const int SkewDDFieldNumber = 175;
    private float skewDD_;
    /// <summary>
    /// dd (deep downside) skew metric (xde &lt; -0.30)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewDD {
      get { return skewDD_; }
      set {
        skewDD_ = value;
      }
    }

    /// <summary>Field number for the "skew_dN" field.</summary>
    public const int SkewDNFieldNumber = 178;
    private float skewDN_;
    /// <summary>
    /// dn (downside) skew metric (-0.30 &lt; xde &lt; -0.10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewDN {
      get { return skewDN_; }
      set {
        skewDN_ = value;
      }
    }

    /// <summary>Field number for the "skew_aT" field.</summary>
    public const int SkewATFieldNumber = 181;
    private float skewAT_;
    /// <summary>
    /// at (atm) skew risk metric (-0.10 &lt; xde &lt; +0.10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewAT {
      get { return skewAT_; }
      set {
        skewAT_ = value;
      }
    }

    /// <summary>Field number for the "skew_uP" field.</summary>
    public const int SkewUPFieldNumber = 184;
    private float skewUP_;
    /// <summary>
    /// up (upside) skew risk metric (+0.10 &lt; xde &lt; +0.30)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewUP {
      get { return skewUP_; }
      set {
        skewUP_ = value;
      }
    }

    /// <summary>Field number for the "skew_dU" field.</summary>
    public const int SkewDUFieldNumber = 187;
    private float skewDU_;
    /// <summary>
    /// du (far upside) skew risk metric (+0.30 &lt; xde)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewDU {
      get { return skewDU_; }
      set {
        skewDU_ = value;
      }
    }

    /// <summary>Field number for the "sh_opn_pos" field.</summary>
    public const int ShOpnPosFieldNumber = 190;
    private int shOpnPos_;
    /// <summary>
    /// shares (start-of-day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShOpnPos {
      get { return shOpnPos_; }
      set {
        shOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "fc_opn_pos" field.</summary>
    public const int FcOpnPosFieldNumber = 193;
    private int fcOpnPos_;
    /// <summary>
    /// futures contracts (start-of-day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcOpnPos {
      get { return fcOpnPos_; }
      set {
        fcOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "cn_opn_pos" field.</summary>
    public const int CnOpnPosFieldNumber = 196;
    private int cnOpnPos_;
    /// <summary>
    /// options contracts (start-of-day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnOpnPos {
      get { return cnOpnPos_; }
      set {
        cnOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "cn_atm_equiv" field.</summary>
    public const int CnAtmEquivFieldNumber = 199;
    private float cnAtmEquiv_;
    /// <summary>
    /// atm equivalent contracts; (opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnAtmEquiv {
      get { return cnAtmEquiv_; }
      set {
        cnAtmEquiv_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot" field.</summary>
    public const int ShBotFieldNumber = 202;
    private int shBot_;
    /// <summary>
    /// shares bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBot {
      get { return shBot_; }
      set {
        shBot_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld" field.</summary>
    public const int ShSldFieldNumber = 205;
    private int shSld_;
    /// <summary>
    /// shares sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSld {
      get { return shSld_; }
      set {
        shSld_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_shrt" field.</summary>
    public const int ShSldShrtFieldNumber = 208;
    private int shSldShrt_;
    /// <summary>
    /// shares sld short
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldShrt {
      get { return shSldShrt_; }
      set {
        shSldShrt_ = value;
      }
    }

    /// <summary>Field number for the "fc_bot" field.</summary>
    public const int FcBotFieldNumber = 211;
    private int fcBot_;
    /// <summary>
    /// future contracts bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcBot {
      get { return fcBot_; }
      set {
        fcBot_ = value;
      }
    }

    /// <summary>Field number for the "fc_sld" field.</summary>
    public const int FcSldFieldNumber = 214;
    private int fcSld_;
    /// <summary>
    /// future contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FcSld {
      get { return fcSld_; }
      set {
        fcSld_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot" field.</summary>
    public const int CnBotFieldNumber = 217;
    private int cnBot_;
    /// <summary>
    /// option contracts bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBot {
      get { return cnBot_; }
      set {
        cnBot_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld" field.</summary>
    public const int CnSldFieldNumber = 220;
    private int cnSld_;
    /// <summary>
    /// option contracts sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSld {
      get { return cnSld_; }
      set {
        cnSld_ = value;
      }
    }

    /// <summary>Field number for the "cn_opened" field.</summary>
    public const int CnOpenedFieldNumber = 223;
    private int cnOpened_;
    /// <summary>
    /// option contracts opened
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnOpened {
      get { return cnOpened_; }
      set {
        cnOpened_ = value;
      }
    }

    /// <summary>Field number for the "cn_closed" field.</summary>
    public const int CnClosedFieldNumber = 226;
    private int cnClosed_;
    /// <summary>
    /// option contracts closed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnClosed {
      get { return cnClosed_; }
      set {
        cnClosed_ = value;
      }
    }

    /// <summary>Field number for the "opn_dir" field.</summary>
    public const int OpnDirFieldNumber = 229;
    private string opnDir_ = "";
    /// <summary>
    /// open (start-of-day) direction (LN or SH)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OpnDir {
      get { return opnDir_; }
      set {
        opnDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos_dir" field.</summary>
    public const int PosDirFieldNumber = 232;
    private string posDir_ = "";
    /// <summary>
    /// current (start-of-day + trades) direction (LN or SH)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PosDir {
      get { return posDir_; }
      set {
        posDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_opn_pos" field.</summary>
    public const int UnitOpnPosFieldNumber = 235;
    private int unitOpnPos_;
    /// <summary>
    /// effective opening position (shares or cn * pointValue) (start-of-day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnitOpnPos {
      get { return unitOpnPos_; }
      set {
        unitOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "unit_cur_pos" field.</summary>
    public const int UnitCurPosFieldNumber = 238;
    private int unitCurPos_;
    /// <summary>
    /// effective current position (shares or cn * pointValue) (start-of-day + trades)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnitCurPos {
      get { return unitCurPos_; }
      set {
        unitCurPos_ = value;
      }
    }

    /// <summary>Field number for the "unit_qty_bot" field.</summary>
    public const int UnitQtyBotFieldNumber = 241;
    private int unitQtyBot_;
    /// <summary>
    /// effective shares bot (shares or cn * underlierPerCn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnitQtyBot {
      get { return unitQtyBot_; }
      set {
        unitQtyBot_ = value;
      }
    }

    /// <summary>Field number for the "unit_qty_sld" field.</summary>
    public const int UnitQtySldFieldNumber = 244;
    private int unitQtySld_;
    /// <summary>
    /// effective shares sld (shares or cn * underlierPerCn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnitQtySld {
      get { return unitQtySld_; }
      set {
        unitQtySld_ = value;
      }
    }

    /// <summary>Field number for the "day_pnl" field.</summary>
    public const int DayPnlFieldNumber = 247;
    private float dayPnl_;
    /// <summary>
    /// day pnl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnl {
      get { return dayPnl_; }
      set {
        dayPnl_ = value;
      }
    }

    /// <summary>Field number for the "day_dn_pnl" field.</summary>
    public const int DayDnPnlFieldNumber = 250;
    private float dayDnPnl_;
    /// <summary>
    /// day pnl (delta neutral)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayDnPnl {
      get { return dayDnPnl_; }
      set {
        dayDnPnl_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_delta" field.</summary>
    public const int DayTrdDeltaFieldNumber = 253;
    private float dayTrdDelta_;
    /// <summary>
    /// day trade delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdDelta {
      get { return dayTrdDelta_; }
      set {
        dayTrdDelta_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_dDelta" field.</summary>
    public const int DayTrdDDeltaFieldNumber = 256;
    private float dayTrdDDelta_;
    /// <summary>
    /// day trade $delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdDDelta {
      get { return dayTrdDDelta_; }
      set {
        dayTrdDDelta_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_gamma" field.</summary>
    public const int DayTrdGammaFieldNumber = 259;
    private float dayTrdGamma_;
    /// <summary>
    /// day trade gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdGamma {
      get { return dayTrdGamma_; }
      set {
        dayTrdGamma_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_dGamma" field.</summary>
    public const int DayTrdDGammaFieldNumber = 262;
    private float dayTrdDGamma_;
    /// <summary>
    /// day trade $gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdDGamma {
      get { return dayTrdDGamma_; }
      set {
        dayTrdDGamma_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_vega" field.</summary>
    public const int DayTrdVegaFieldNumber = 265;
    private float dayTrdVega_;
    /// <summary>
    /// day trade vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdVega {
      get { return dayTrdVega_; }
      set {
        dayTrdVega_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_wVega" field.</summary>
    public const int DayTrdWVegaFieldNumber = 268;
    private float dayTrdWVega_;
    /// <summary>
    /// day trade wVega (vega * vol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdWVega {
      get { return dayTrdWVega_; }
      set {
        dayTrdWVega_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_tVega" field.</summary>
    public const int DayTrdTVegaFieldNumber = 271;
    private float dayTrdTVega_;
    /// <summary>
    /// day trade tVega (vega / sqrt(max(0.1, years * 4)))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdTVega {
      get { return dayTrdTVega_; }
      set {
        dayTrdTVega_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_wt_vega" field.</summary>
    public const int DayTrdWtVegaFieldNumber = 274;
    private float dayTrdWtVega_;
    /// <summary>
    /// day trade wtVega (vega * vol / sqrt(max(0.1, years * 4)))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdWtVega {
      get { return dayTrdWtVega_; }
      set {
        dayTrdWtVega_ = value;
      }
    }

    /// <summary>Field number for the "day_trd_theta" field.</summary>
    public const int DayTrdThetaFieldNumber = 277;
    private float dayTrdTheta_;
    /// <summary>
    /// day trade theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayTrdTheta {
      get { return dayTrdTheta_; }
      set {
        dayTrdTheta_ = value;
      }
    }

    /// <summary>Field number for the "day_edge_opened" field.</summary>
    public const int DayEdgeOpenedFieldNumber = 280;
    private float dayEdgeOpened_;
    /// <summary>
    /// day theo option edge opened (requires a theo model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayEdgeOpened {
      get { return dayEdgeOpened_; }
      set {
        dayEdgeOpened_ = value;
      }
    }

    /// <summary>Field number for the "day_edge_closed" field.</summary>
    public const int DayEdgeClosedFieldNumber = 283;
    private float dayEdgeClosed_;
    /// <summary>
    /// day theo option edge closed (requires a theo model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayEdgeClosed {
      get { return dayEdgeClosed_; }
      set {
        dayEdgeClosed_ = value;
      }
    }

    /// <summary>Field number for the "day_mny_bot" field.</summary>
    public const int DayMnyBotFieldNumber = 286;
    private double dayMnyBot_;
    /// <summary>
    /// day money bot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DayMnyBot {
      get { return dayMnyBot_; }
      set {
        dayMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "day_mny_sld" field.</summary>
    public const int DayMnySldFieldNumber = 289;
    private double dayMnySld_;
    /// <summary>
    /// day money sld
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DayMnySld {
      get { return dayMnySld_; }
      set {
        dayMnySld_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_vol_mark" field.</summary>
    public const int OpnPnlVolMarkFieldNumber = 292;
    private float opnPnlVolMark_;
    /// <summary>
    /// (cur.surface - pr.surface) * cnOpnClr * upc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVolMark {
      get { return opnPnlVolMark_; }
      set {
        opnPnlVolMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_mid_mark" field.</summary>
    public const int OpnPnlMidMarkFieldNumber = 295;
    private float opnPnlMidMark_;
    /// <summary>
    /// (cur.mid - pr.mid) * cnOpnClr * upc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlMidMark {
      get { return opnPnlMidMark_; }
      set {
        opnPnlMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_clr_mark" field.</summary>
    public const int OpnPnlClrMarkFieldNumber = 298;
    private float opnPnlClrMark_;
    /// <summary>
    /// (cur.mid - pr.clr) * cnOpnClr * upc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlClrMark {
      get { return opnPnlClrMark_; }
      set {
        opnPnlClrMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_mark_brk_mny" field.</summary>
    public const int OpnMarkBrkMnyFieldNumber = 301;
    private float opnMarkBrkMny_;
    /// <summary>
    /// (cur.surface - cur.mid) * cnOpnClr * upc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnMarkBrkMny {
      get { return opnMarkBrkMny_; }
      set {
        opnMarkBrkMny_ = value;
      }
    }

    /// <summary>Field number for the "opn_theo_edge" field.</summary>
    public const int OpnTheoEdgeFieldNumber = 304;
    private float opnTheoEdge_;
    /// <summary>
    /// opening edge (edge at the end of prior period) (requires a theo model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnTheoEdge {
      get { return opnTheoEdge_; }
      set {
        opnTheoEdge_ = value;
      }
    }

    /// <summary>Field number for the "pos_theo_edge" field.</summary>
    public const int PosTheoEdgeFieldNumber = 307;
    private float posTheoEdge_;
    /// <summary>
    /// current edge (opening positions + trades) (requires a theo model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTheoEdge {
      get { return posTheoEdge_; }
      set {
        posTheoEdge_ = value;
      }
    }

    /// <summary>Field number for the "t_vol_move" field.</summary>
    public const int TVolMoveFieldNumber = 310;
    private float tVolMove_;
    /// <summary>
    /// LN(tVol / tVolPr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TVolMove {
      get { return tVolMove_; }
      set {
        tVolMove_ = value;
      }
    }

    /// <summary>Field number for the "t_edge_move" field.</summary>
    public const int TEdgeMoveFieldNumber = 313;
    private float tEdgeMove_;
    /// <summary>
    /// LN(tVol / iVol) - LN(tVolPr / iVolPr)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdgeMove {
      get { return tEdgeMove_; }
      set {
        tEdgeMove_ = value;
      }
    }

    /// <summary>Field number for the "t_edge" field.</summary>
    public const int TEdgeFieldNumber = 316;
    private float tEdge_;
    /// <summary>
    /// LN(tVol / iVol)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TEdge {
      get { return tEdge_; }
      set {
        tEdge_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_de" field.</summary>
    public const int OpnPnlDeFieldNumber = 319;
    private float opnPnlDe_;
    /// <summary>
    /// open position * mult * optDelta * dUPrc			( pnlSD = sum(pnlDe) [stock + futures + options] )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlDe {
      get { return opnPnlDe_; }
      set {
        opnPnlDe_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_ga" field.</summary>
    public const int OpnPnlGaFieldNumber = 322;
    private float opnPnlGa_;
    /// <summary>
    /// open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlGa {
      get { return opnPnlGa_; }
      set {
        opnPnlGa_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_th" field.</summary>
    public const int OpnPnlThFieldNumber = 325;
    private float opnPnlTh_;
    /// <summary>
    /// open position * mult * optTheta * dTime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlTh {
      get { return opnPnlTh_; }
      set {
        opnPnlTh_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_ve" field.</summary>
    public const int OpnPnlVeFieldNumber = 328;
    private float opnPnlVe_;
    /// <summary>
    /// open position * mult * optVega * dVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVe {
      get { return opnPnlVe_; }
      set {
        opnPnlVe_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_vo" field.</summary>
    public const int OpnPnlVoFieldNumber = 331;
    private float opnPnlVo_;
    /// <summary>
    /// open position * mult * 0.5 * optVolga * dVol * dVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVo {
      get { return opnPnlVo_; }
      set {
        opnPnlVo_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_va" field.</summary>
    public const int OpnPnlVaFieldNumber = 334;
    private float opnPnlVa_;
    /// <summary>
    /// open position * mult * optVanna * dVol * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlVa {
      get { return opnPnlVa_; }
      set {
        opnPnlVa_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_sl" field.</summary>
    public const int OpnPnlSlFieldNumber = 337;
    private float opnPnlSl_;
    /// <summary>
    /// open position * mult * vol/uPrc * slope * optVega * dUPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlSl {
      get { return opnPnlSl_; }
      set {
        opnPnlSl_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_rate" field.</summary>
    public const int OpnPnlRateFieldNumber = 340;
    private float opnPnlRate_;
    /// <summary>
    /// open position * mult * optRho * dRate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlRate {
      get { return opnPnlRate_; }
      set {
        opnPnlRate_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_sDiv" field.</summary>
    public const int OpnPnlSDivFieldNumber = 343;
    private float opnPnlSDiv_;
    /// <summary>
    /// open position * mult * optPhi * dSDv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlSDiv {
      get { return opnPnlSDiv_; }
      set {
        opnPnlSDiv_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_dDiv" field.</summary>
    public const int OpnPnlDDivFieldNumber = 346;
    private float opnPnlDDiv_;
    /// <summary>
    /// open position * mult * optPhi * dDDv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlDDiv {
      get { return opnPnlDDiv_; }
      set {
        opnPnlDDiv_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_err" field.</summary>
    public const int OpnPnlErrFieldNumber = 349;
    private float opnPnlErr_;
    /// <summary>
    /// unattributed pnl: SR Vol Pnl - opnPnlDe - opnPnlGa - opnPnlTh - opnPnlVe - opnPnlRat - opnPnlSDiv - opnPnlDDiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlErr {
      get { return opnPnlErr_; }
      set {
        opnPnlErr_ = value;
      }
    }

    /// <summary>Field number for the "opn_edge_change" field.</summary>
    public const int OpnEdgeChangeFieldNumber = 352;
    private float opnEdgeChange_;
    /// <summary>
    /// open position * mult * (tEdge - tEdgePr) (requires a theo model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnEdgeChange {
      get { return opnEdgeChange_; }
      set {
        opnEdgeChange_ = value;
      }
    }

    /// <summary>Field number for the "pos_delta" field.</summary>
    public const int PosDeltaFieldNumber = 355;
    private float posDelta_;
    /// <summary>
    /// live position * mult * optDelta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDelta {
      get { return posDelta_; }
      set {
        posDelta_ = value;
      }
    }

    /// <summary>Field number for the "pos_dDelta" field.</summary>
    public const int PosDDeltaFieldNumber = 358;
    private float posDDelta_;
    /// <summary>
    /// live position * mult * optDelta * UPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDDelta {
      get { return posDDelta_; }
      set {
        posDDelta_ = value;
      }
    }

    /// <summary>Field number for the "pos_dBeta" field.</summary>
    public const int PosDBetaFieldNumber = 361;
    private float posDBeta_;
    /// <summary>
    /// live position * mult * optDelta * beta * UPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDBeta {
      get { return posDBeta_; }
      set {
        posDBeta_ = value;
      }
    }

    /// <summary>Field number for the "pos_gamma" field.</summary>
    public const int PosGammaFieldNumber = 364;
    private float posGamma_;
    /// <summary>
    /// live position * mult * optGamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosGamma {
      get { return posGamma_; }
      set {
        posGamma_ = value;
      }
    }

    /// <summary>Field number for the "pos_dGamma" field.</summary>
    public const int PosDGammaFieldNumber = 367;
    private float posDGamma_;
    /// <summary>
    /// live position * mult * optGamma * uPrc * uPrc / 100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosDGamma {
      get { return posDGamma_; }
      set {
        posDGamma_ = value;
      }
    }

    /// <summary>Field number for the "pos_vega" field.</summary>
    public const int PosVegaFieldNumber = 370;
    private float posVega_;
    /// <summary>
    /// live position * mult * optVega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosVega {
      get { return posVega_; }
      set {
        posVega_ = value;
      }
    }

    /// <summary>Field number for the "pos_wVega" field.</summary>
    public const int PosWVegaFieldNumber = 373;
    private float posWVega_;
    /// <summary>
    /// live position * mult * optVega * iVol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosWVega {
      get { return posWVega_; }
      set {
        posWVega_ = value;
      }
    }

    /// <summary>Field number for the "pos_tVega" field.</summary>
    public const int PosTVegaFieldNumber = 376;
    private float posTVega_;
    /// <summary>
    /// live position * mult * optVega / sqrt(max(0.1, years * 4))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTVega {
      get { return posTVega_; }
      set {
        posTVega_ = value;
      }
    }

    /// <summary>Field number for the "pos_wt_vega" field.</summary>
    public const int PosWtVegaFieldNumber = 379;
    private float posWtVega_;
    /// <summary>
    /// live position * mult * optVega * iVol / sqrt(max(0.1, years * 4))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosWtVega {
      get { return posWtVega_; }
      set {
        posWtVega_ = value;
      }
    }

    /// <summary>Field number for the "pos_volga" field.</summary>
    public const int PosVolgaFieldNumber = 382;
    private float posVolga_;
    /// <summary>
    /// live position * mult * optVolg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosVolga {
      get { return posVolga_; }
      set {
        posVolga_ = value;
      }
    }

    /// <summary>Field number for the "pos_vanna" field.</summary>
    public const int PosVannaFieldNumber = 385;
    private float posVanna_;
    /// <summary>
    /// live position * mult * optVanna
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosVanna {
      get { return posVanna_; }
      set {
        posVanna_ = value;
      }
    }

    /// <summary>Field number for the "pos_theta" field.</summary>
    public const int PosThetaFieldNumber = 388;
    private float posTheta_;
    /// <summary>
    /// live position * mult * optTheta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosTheta {
      get { return posTheta_; }
      set {
        posTheta_ = value;
      }
    }

    /// <summary>Field number for the "pos_rho" field.</summary>
    public const int PosRhoFieldNumber = 391;
    private float posRho_;
    /// <summary>
    /// live position * mult * optRho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosRho {
      get { return posRho_; }
      set {
        posRho_ = value;
      }
    }

    /// <summary>Field number for the "pos_phi" field.</summary>
    public const int PosPhiFieldNumber = 394;
    private float posPhi_;
    /// <summary>
    /// live position * mult * optPhi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosPhi {
      get { return posPhi_; }
      set {
        posPhi_ = value;
      }
    }

    /// <summary>Field number for the "pos_hDelta" field.</summary>
    public const int PosHDeltaFieldNumber = 503;
    private float posHDelta_;
    /// <summary>
    /// hedge delta (either ivol or tvol based;follows binary rules)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHDelta {
      get { return posHDelta_; }
      set {
        posHDelta_ = value;
      }
    }

    /// <summary>Field number for the "pos_hDDelta" field.</summary>
    public const int PosHDDeltaFieldNumber = 504;
    private float posHDDelta_;
    /// <summary>
    /// hedge delta (dollarized)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHDDelta {
      get { return posHDDelta_; }
      set {
        posHDDelta_ = value;
      }
    }

    /// <summary>Field number for the "pos_hGamma" field.</summary>
    public const int PosHGammaFieldNumber = 505;
    private float posHGamma_;
    /// <summary>
    /// hedge gamma (either ivol or tvol based;follows binary rules)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHGamma {
      get { return posHGamma_; }
      set {
        posHGamma_ = value;
      }
    }

    /// <summary>Field number for the "pos_hDGaamma" field.</summary>
    public const int PosHDGaammaFieldNumber = 506;
    private float posHDGaamma_;
    /// <summary>
    /// hedge gamma (dollarized)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosHDGaamma {
      get { return posHDGaamma_; }
      set {
        posHDGaamma_ = value;
      }
    }

    /// <summary>Field number for the "pos_notional" field.</summary>
    public const int PosNotionalFieldNumber = 397;
    private float posNotional_;
    /// <summary>
    /// live position * mult * uPrc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosNotional {
      get { return posNotional_; }
      set {
        posNotional_ = value;
      }
    }

    /// <summary>Field number for the "pos_mkt_value" field.</summary>
    public const int PosMktValueFieldNumber = 400;
    private float posMktValue_;
    /// <summary>
    /// live position * mult * SR surface mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosMktValue {
      get { return posMktValue_; }
      set {
        posMktValue_ = value;
      }
    }

    /// <summary>Field number for the "pos_prem_oPar" field.</summary>
    public const int PosPremOParFieldNumber = 403;
    private float posPremOPar_;
    /// <summary>
    /// live position * mult * premium over parity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PosPremOPar {
      get { return posPremOPar_; }
      set {
        posPremOPar_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 406;
    private float atmVol_;
    /// <summary>
    /// atm volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "sym_vol" field.</summary>
    public const int SymVolFieldNumber = 409;
    private float symVol_;
    /// <summary>
    /// underlier symbol volatility (term.21d;censored)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymVol {
      get { return symVol_; }
      set {
        symVol_ = value;
      }
    }

    /// <summary>Field number for the "sr_slope" field.</summary>
    public const int SrSlopeFieldNumber = 412;
    private float srSlope_;
    /// <summary>
    /// strike veSlope (sr surface;options only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SrSlope {
      get { return srSlope_; }
      set {
        srSlope_ = value;
      }
    }

    /// <summary>Field number for the "prc_sVol" field.</summary>
    public const int PrcSVolFieldNumber = 415;
    private float prcSVol_;
    /// <summary>
    /// SR Surface Vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcSVol {
      get { return prcSVol_; }
      set {
        prcSVol_ = value;
      }
    }

    /// <summary>Field number for the "prc_tOpx" field.</summary>
    public const int PrcTOpxFieldNumber = 418;
    private float prcTOpx_;
    /// <summary>
    /// SR Surface Price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcTOpx {
      get { return prcTOpx_; }
      set {
        prcTOpx_ = value;
      }
    }

    /// <summary>Field number for the "prc_yOpx" field.</summary>
    public const int PrcYOpxFieldNumber = 421;
    private float prcYOpx_;
    /// <summary>
    /// SR Yesterday Surface Price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcYOpx {
      get { return prcYOpx_; }
      set {
        prcYOpx_ = value;
      }
    }

    /// <summary>Field number for the "prc_uPrc" field.</summary>
    public const int PrcUPrcFieldNumber = 424;
    private float prcUPrc_;
    /// <summary>
    /// underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcUPrc {
      get { return prcUPrc_; }
      set {
        prcUPrc_ = value;
      }
    }

    /// <summary>Field number for the "prc_years" field.</summary>
    public const int PrcYearsFieldNumber = 427;
    private float prcYears_;
    /// <summary>
    /// years-to-expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcYears {
      get { return prcYears_; }
      set {
        prcYears_ = value;
      }
    }

    /// <summary>Field number for the "prc_rate" field.</summary>
    public const int PrcRateFieldNumber = 430;
    private float prcRate_;
    /// <summary>
    /// discount rate-to-expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcRate {
      get { return prcRate_; }
      set {
        prcRate_ = value;
      }
    }

    /// <summary>Field number for the "prc_sdiv" field.</summary>
    public const int PrcSdivFieldNumber = 433;
    private float prcSdiv_;
    /// <summary>
    /// continuous stock div rate-to-expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcSdiv {
      get { return prcSdiv_; }
      set {
        prcSdiv_ = value;
      }
    }

    /// <summary>Field number for the "prc_ddiv" field.</summary>
    public const int PrcDdivFieldNumber = 436;
    private float prcDdiv_;
    /// <summary>
    /// cumulative discrete dividend paid through expiry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PrcDdiv {
      get { return prcDdiv_; }
      set {
        prcDdiv_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 439;
    private float uPrcRatio_;
    /// <summary>
    /// stock price multiplier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_move" field.</summary>
    public const int UPrcMoveFieldNumber = 442;
    private float uPrcMove_;
    /// <summary>
    /// Underlier price change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcMove {
      get { return uPrcMove_; }
      set {
        uPrcMove_ = value;
      }
    }

    /// <summary>Field number for the "i_vol_move" field.</summary>
    public const int IVolMoveFieldNumber = 445;
    private float iVolMove_;
    /// <summary>
    /// Implied vol change (fixed strike ivol change from prior period)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IVolMove {
      get { return iVolMove_; }
      set {
        iVolMove_ = value;
      }
    }

    /// <summary>Field number for the "ex_div_amt" field.</summary>
    public const int ExDivAmtFieldNumber = 448;
    private float exDivAmt_;
    /// <summary>
    /// estimated exDiv amount (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExDivAmt {
      get { return exDivAmt_; }
      set {
        exDivAmt_ = value;
      }
    }

    /// <summary>Field number for the "borrow_rate" field.</summary>
    public const int BorrowRateFieldNumber = 451;
    private float borrowRate_;
    /// <summary>
    /// estimated stock borrow rate (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BorrowRate {
      get { return borrowRate_; }
      set {
        borrowRate_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 454;
    private int modelType_;
    /// <summary>
    /// SRPricingLib.CalcModelType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 457;
    private int underliersPerCn_;
    /// <summary>
    /// underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 460;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// underlier type (used for option pricing)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 463;
    private float pointValue_;
    /// <summary>
    /// value of one point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 466;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 469;
    private float tickValue_;
    /// <summary>
    /// value of one tick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "multihedge" field.</summary>
    public const int MultihedgeFieldNumber = 472;
    private global::Spiderrock.Protobuf.Multihedge multihedge_ = global::Spiderrock.Protobuf.Multihedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Multihedge Multihedge {
      get { return multihedge_; }
      set {
        multihedge_ = value;
      }
    }

    /// <summary>Field number for the "multihedge_source" field.</summary>
    public const int MultihedgeSourceFieldNumber = 475;
    private global::Spiderrock.Protobuf.TickerKey multihedgeSource_;
    /// <summary>
    /// MH Ticker Key (starts with '_') (if exists)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey MultihedgeSource {
      get { return multihedgeSource_; }
      set {
        multihedgeSource_ = value;
      }
    }

    /// <summary>Field number for the "multihedge_pVRatio" field.</summary>
    public const int MultihedgePVRatioFieldNumber = 478;
    private float multihedgePVRatio_;
    /// <summary>
    /// pv multiplier (fraction of underlier value (uPerCn x uPrc) / SUM(uPerCn x uPrc) associated with this fragment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MultihedgePVRatio {
      get { return multihedgePVRatio_; }
      set {
        multihedgePVRatio_ = value;
      }
    }

    /// <summary>Field number for the "span_prc_inc_up" field.</summary>
    public const int SpanPrcIncUpFieldNumber = 481;
    private float spanPrcIncUp_;
    /// <summary>
    /// default (exchange) span price up increment for this asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpanPrcIncUp {
      get { return spanPrcIncUp_; }
      set {
        spanPrcIncUp_ = value;
      }
    }

    /// <summary>Field number for the "span_prc_inc_dn" field.</summary>
    public const int SpanPrcIncDnFieldNumber = 484;
    private float spanPrcIncDn_;
    /// <summary>
    /// default (exchange) span price dn increment for this asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpanPrcIncDn {
      get { return spanPrcIncDn_; }
      set {
        spanPrcIncDn_ = value;
      }
    }

    /// <summary>Field number for the "span_vol_inc" field.</summary>
    public const int SpanVolIncFieldNumber = 487;
    private float spanVolInc_;
    /// <summary>
    /// default (exchange) span volatility increment for this asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpanVolInc {
      get { return spanVolInc_; }
      set {
        spanVolInc_ = value;
      }
    }

    /// <summary>Field number for the "prc_span_type" field.</summary>
    public const int PrcSpanTypeFieldNumber = 490;
    private global::Spiderrock.Protobuf.SpanType prcSpanType_ = global::Spiderrock.Protobuf.SpanType.Unspecified;
    /// <summary>
    /// exchange prcSpan type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpanType PrcSpanType {
      get { return prcSpanType_; }
      set {
        prcSpanType_ = value;
      }
    }

    /// <summary>Field number for the "vol_span_type" field.</summary>
    public const int VolSpanTypeFieldNumber = 493;
    private global::Spiderrock.Protobuf.SpanType volSpanType_ = global::Spiderrock.Protobuf.SpanType.Unspecified;
    /// <summary>
    /// exchange volSpan type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpanType VolSpanType {
      get { return volSpanType_; }
      set {
        volSpanType_ = value;
      }
    }

    /// <summary>Field number for the "span_pricing_model" field.</summary>
    public const int SpanPricingModelFieldNumber = 496;
    private global::Spiderrock.Protobuf.SpanPricingModel spanPricingModel_ = global::Spiderrock.Protobuf.SpanPricingModel.Unspecified;
    /// <summary>
    /// Exchange-defined model for SPAN option pricing calcs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpanPricingModel SpanPricingModel {
      get { return spanPricingModel_; }
      set {
        spanPricingModel_ = value;
      }
    }

    /// <summary>Field number for the "margin_type" field.</summary>
    public const int MarginTypeFieldNumber = 499;
    private global::Spiderrock.Protobuf.MarginType marginType_ = global::Spiderrock.Protobuf.MarginType.Unspecified;
    /// <summary>
    /// margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarginType MarginType {
      get { return marginType_; }
      set {
        marginType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 502;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RiskCubeDetailV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RiskCubeDetailV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (Version != other.Version) return false;
      if (ClearingFirm != other.ClearingFirm) return false;
      if (ClearingAccnt != other.ClearingAccnt) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (ViewGroup1 != other.ViewGroup1) return false;
      if (ViewGroup2 != other.ViewGroup2) return false;
      if (ViewGroup3 != other.ViewGroup3) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (RiskClass != other.RiskClass) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (Sector != other.Sector) return false;
      if (IndNum != other.IndNum) return false;
      if (SubNum != other.SubNum) return false;
      if (GrpNum != other.GrpNum) return false;
      if (NbrNum != other.NbrNum) return false;
      if (EDays != other.EDays) return false;
      if (DDays != other.DDays) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XDelta, other.XDelta)) return false;
      if (ExpCode != other.ExpCode) return false;
      if (SkewCode != other.SkewCode) return false;
      if (EDaysCode != other.EDaysCode) return false;
      if (IVolRange != other.IVolRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewDD, other.SkewDD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewDN, other.SkewDN)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewAT, other.SkewAT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewUP, other.SkewUP)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewDU, other.SkewDU)) return false;
      if (ShOpnPos != other.ShOpnPos) return false;
      if (FcOpnPos != other.FcOpnPos) return false;
      if (CnOpnPos != other.CnOpnPos) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnAtmEquiv, other.CnAtmEquiv)) return false;
      if (ShBot != other.ShBot) return false;
      if (ShSld != other.ShSld) return false;
      if (ShSldShrt != other.ShSldShrt) return false;
      if (FcBot != other.FcBot) return false;
      if (FcSld != other.FcSld) return false;
      if (CnBot != other.CnBot) return false;
      if (CnSld != other.CnSld) return false;
      if (CnOpened != other.CnOpened) return false;
      if (CnClosed != other.CnClosed) return false;
      if (OpnDir != other.OpnDir) return false;
      if (PosDir != other.PosDir) return false;
      if (UnitOpnPos != other.UnitOpnPos) return false;
      if (UnitCurPos != other.UnitCurPos) return false;
      if (UnitQtyBot != other.UnitQtyBot) return false;
      if (UnitQtySld != other.UnitQtySld) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnl, other.DayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayDnPnl, other.DayDnPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdDelta, other.DayTrdDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdDDelta, other.DayTrdDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdGamma, other.DayTrdGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdDGamma, other.DayTrdDGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdVega, other.DayTrdVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdWVega, other.DayTrdWVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdTVega, other.DayTrdTVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdWtVega, other.DayTrdWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayTrdTheta, other.DayTrdTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayEdgeOpened, other.DayEdgeOpened)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayEdgeClosed, other.DayEdgeClosed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DayMnyBot, other.DayMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DayMnySld, other.DayMnySld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVolMark, other.OpnPnlVolMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlMidMark, other.OpnPnlMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlClrMark, other.OpnPnlClrMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnMarkBrkMny, other.OpnMarkBrkMny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnTheoEdge, other.OpnTheoEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTheoEdge, other.PosTheoEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TVolMove, other.TVolMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdgeMove, other.TEdgeMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEdge, other.TEdge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlDe, other.OpnPnlDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlGa, other.OpnPnlGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlTh, other.OpnPnlTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVe, other.OpnPnlVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVo, other.OpnPnlVo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlVa, other.OpnPnlVa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlSl, other.OpnPnlSl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlRate, other.OpnPnlRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlSDiv, other.OpnPnlSDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlDDiv, other.OpnPnlDDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlErr, other.OpnPnlErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnEdgeChange, other.OpnEdgeChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDelta, other.PosDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDDelta, other.PosDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDBeta, other.PosDBeta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosGamma, other.PosGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosDGamma, other.PosDGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosVega, other.PosVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosWVega, other.PosWVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTVega, other.PosTVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosWtVega, other.PosWtVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosVolga, other.PosVolga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosVanna, other.PosVanna)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosTheta, other.PosTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosRho, other.PosRho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosPhi, other.PosPhi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHDelta, other.PosHDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHDDelta, other.PosHDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHGamma, other.PosHGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosHDGaamma, other.PosHDGaamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosNotional, other.PosNotional)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosMktValue, other.PosMktValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosPremOPar, other.PosPremOPar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymVol, other.SymVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrSlope, other.SrSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcSVol, other.PrcSVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcTOpx, other.PrcTOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcYOpx, other.PrcYOpx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcUPrc, other.PrcUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcYears, other.PrcYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcRate, other.PrcRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcSdiv, other.PrcSdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrcDdiv, other.PrcDdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcMove, other.UPrcMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IVolMove, other.IVolMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExDivAmt, other.ExDivAmt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BorrowRate, other.BorrowRate)) return false;
      if (ModelType != other.ModelType) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (Multihedge != other.Multihedge) return false;
      if (!object.Equals(MultihedgeSource, other.MultihedgeSource)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MultihedgePVRatio, other.MultihedgePVRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpanPrcIncUp, other.SpanPrcIncUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpanPrcIncDn, other.SpanPrcIncDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpanVolInc, other.SpanVolInc)) return false;
      if (PrcSpanType != other.PrcSpanType) return false;
      if (VolSpanType != other.VolSpanType) return false;
      if (SpanPricingModel != other.SpanPricingModel) return false;
      if (MarginType != other.MarginType) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (Version != global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified) hash ^= Version.GetHashCode();
      if (ClearingFirm.Length != 0) hash ^= ClearingFirm.GetHashCode();
      if (ClearingAccnt.Length != 0) hash ^= ClearingAccnt.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (ViewGroup1.Length != 0) hash ^= ViewGroup1.GetHashCode();
      if (ViewGroup2.Length != 0) hash ^= ViewGroup2.GetHashCode();
      if (ViewGroup3.Length != 0) hash ^= ViewGroup3.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (RiskClass.Length != 0) hash ^= RiskClass.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IndNum != 0) hash ^= IndNum.GetHashCode();
      if (SubNum != 0) hash ^= SubNum.GetHashCode();
      if (GrpNum != 0) hash ^= GrpNum.GetHashCode();
      if (NbrNum != 0) hash ^= NbrNum.GetHashCode();
      if (EDays != 0) hash ^= EDays.GetHashCode();
      if (DDays != 0) hash ^= DDays.GetHashCode();
      if (XDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XDelta);
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) hash ^= ExpCode.GetHashCode();
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) hash ^= SkewCode.GetHashCode();
      if (EDaysCode != global::Spiderrock.Protobuf.EDaysCode.Unspecified) hash ^= EDaysCode.GetHashCode();
      if (IVolRange != global::Spiderrock.Protobuf.iVolRange.Unspecified) hash ^= IVolRange.GetHashCode();
      if (SkewDD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewDD);
      if (SkewDN != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewDN);
      if (SkewAT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewAT);
      if (SkewUP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewUP);
      if (SkewDU != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewDU);
      if (ShOpnPos != 0) hash ^= ShOpnPos.GetHashCode();
      if (FcOpnPos != 0) hash ^= FcOpnPos.GetHashCode();
      if (CnOpnPos != 0) hash ^= CnOpnPos.GetHashCode();
      if (CnAtmEquiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnAtmEquiv);
      if (ShBot != 0) hash ^= ShBot.GetHashCode();
      if (ShSld != 0) hash ^= ShSld.GetHashCode();
      if (ShSldShrt != 0) hash ^= ShSldShrt.GetHashCode();
      if (FcBot != 0) hash ^= FcBot.GetHashCode();
      if (FcSld != 0) hash ^= FcSld.GetHashCode();
      if (CnBot != 0) hash ^= CnBot.GetHashCode();
      if (CnSld != 0) hash ^= CnSld.GetHashCode();
      if (CnOpened != 0) hash ^= CnOpened.GetHashCode();
      if (CnClosed != 0) hash ^= CnClosed.GetHashCode();
      if (OpnDir.Length != 0) hash ^= OpnDir.GetHashCode();
      if (PosDir.Length != 0) hash ^= PosDir.GetHashCode();
      if (UnitOpnPos != 0) hash ^= UnitOpnPos.GetHashCode();
      if (UnitCurPos != 0) hash ^= UnitCurPos.GetHashCode();
      if (UnitQtyBot != 0) hash ^= UnitQtyBot.GetHashCode();
      if (UnitQtySld != 0) hash ^= UnitQtySld.GetHashCode();
      if (DayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnl);
      if (DayDnPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayDnPnl);
      if (DayTrdDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdDelta);
      if (DayTrdDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdDDelta);
      if (DayTrdGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdGamma);
      if (DayTrdDGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdDGamma);
      if (DayTrdVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdVega);
      if (DayTrdWVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdWVega);
      if (DayTrdTVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdTVega);
      if (DayTrdWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdWtVega);
      if (DayTrdTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayTrdTheta);
      if (DayEdgeOpened != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayEdgeOpened);
      if (DayEdgeClosed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayEdgeClosed);
      if (DayMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DayMnyBot);
      if (DayMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DayMnySld);
      if (OpnPnlVolMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVolMark);
      if (OpnPnlMidMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlMidMark);
      if (OpnPnlClrMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlClrMark);
      if (OpnMarkBrkMny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnMarkBrkMny);
      if (OpnTheoEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnTheoEdge);
      if (PosTheoEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTheoEdge);
      if (TVolMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TVolMove);
      if (TEdgeMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdgeMove);
      if (TEdge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEdge);
      if (OpnPnlDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlDe);
      if (OpnPnlGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlGa);
      if (OpnPnlTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlTh);
      if (OpnPnlVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVe);
      if (OpnPnlVo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVo);
      if (OpnPnlVa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlVa);
      if (OpnPnlSl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlSl);
      if (OpnPnlRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlRate);
      if (OpnPnlSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlSDiv);
      if (OpnPnlDDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlDDiv);
      if (OpnPnlErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlErr);
      if (OpnEdgeChange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnEdgeChange);
      if (PosDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDelta);
      if (PosDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDDelta);
      if (PosDBeta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDBeta);
      if (PosGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosGamma);
      if (PosDGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosDGamma);
      if (PosVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosVega);
      if (PosWVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosWVega);
      if (PosTVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTVega);
      if (PosWtVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosWtVega);
      if (PosVolga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosVolga);
      if (PosVanna != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosVanna);
      if (PosTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosTheta);
      if (PosRho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosRho);
      if (PosPhi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosPhi);
      if (PosHDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHDelta);
      if (PosHDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHDDelta);
      if (PosHGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHGamma);
      if (PosHDGaamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosHDGaamma);
      if (PosNotional != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosNotional);
      if (PosMktValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosMktValue);
      if (PosPremOPar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosPremOPar);
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (SymVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymVol);
      if (SrSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrSlope);
      if (PrcSVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcSVol);
      if (PrcTOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcTOpx);
      if (PrcYOpx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcYOpx);
      if (PrcUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcUPrc);
      if (PrcYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcYears);
      if (PrcRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcRate);
      if (PrcSdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcSdiv);
      if (PrcDdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrcDdiv);
      if (UPrcRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcRatio);
      if (UPrcMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcMove);
      if (IVolMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IVolMove);
      if (ExDivAmt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExDivAmt);
      if (BorrowRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BorrowRate);
      if (ModelType != 0) hash ^= ModelType.GetHashCode();
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) hash ^= Multihedge.GetHashCode();
      if (multihedgeSource_ != null) hash ^= MultihedgeSource.GetHashCode();
      if (MultihedgePVRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MultihedgePVRatio);
      if (SpanPrcIncUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpanPrcIncUp);
      if (SpanPrcIncDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpanPrcIncDn);
      if (SpanVolInc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpanVolInc);
      if (PrcSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) hash ^= PrcSpanType.GetHashCode();
      if (VolSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) hash ^= VolSpanType.GetHashCode();
      if (SpanPricingModel != global::Spiderrock.Protobuf.SpanPricingModel.Unspecified) hash ^= SpanPricingModel.GetHashCode();
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) hash ^= MarginType.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Version != global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) Version);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ClearingAccnt);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(RiskServerCode);
      }
      if (ViewGroup1.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(ViewGroup3);
      }
      if (ticker_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(Ticker);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (Beta != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) BetaSource);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(Sector);
      }
      if (IndNum != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NbrNum);
      }
      if (EDays != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(EDays);
      }
      if (DDays != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(DDays);
      }
      if (XDelta != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(XDelta);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) SkewCode);
      }
      if (EDaysCode != global::Spiderrock.Protobuf.EDaysCode.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) EDaysCode);
      }
      if (IVolRange != global::Spiderrock.Protobuf.iVolRange.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) IVolRange);
      }
      if (SkewDD != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(SkewDD);
      }
      if (SkewDN != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(SkewDN);
      }
      if (SkewAT != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SkewAT);
      }
      if (SkewUP != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SkewUP);
      }
      if (SkewDU != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(SkewDU);
      }
      if (ShOpnPos != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(ShOpnPos);
      }
      if (FcOpnPos != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(FcOpnPos);
      }
      if (CnOpnPos != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(CnOpnPos);
      }
      if (CnAtmEquiv != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(CnAtmEquiv);
      }
      if (ShBot != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(ShBot);
      }
      if (ShSld != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(ShSld);
      }
      if (ShSldShrt != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(ShSldShrt);
      }
      if (FcBot != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(FcBot);
      }
      if (FcSld != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(FcSld);
      }
      if (CnBot != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(CnSld);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(CnClosed);
      }
      if (OpnDir.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(OpnDir);
      }
      if (PosDir.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(PosDir);
      }
      if (UnitOpnPos != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(UnitOpnPos);
      }
      if (UnitCurPos != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(UnitCurPos);
      }
      if (UnitQtyBot != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(UnitQtyBot);
      }
      if (UnitQtySld != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(UnitQtySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(DayPnl);
      }
      if (DayDnPnl != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(DayDnPnl);
      }
      if (DayTrdDelta != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(DayTrdDelta);
      }
      if (DayTrdDDelta != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(DayTrdDDelta);
      }
      if (DayTrdGamma != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(DayTrdGamma);
      }
      if (DayTrdDGamma != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(DayTrdDGamma);
      }
      if (DayTrdVega != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(DayTrdVega);
      }
      if (DayTrdWVega != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(DayTrdWVega);
      }
      if (DayTrdTVega != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(DayTrdTVega);
      }
      if (DayTrdWtVega != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(DayTrdWtVega);
      }
      if (DayTrdTheta != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(DayTrdTheta);
      }
      if (DayEdgeOpened != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(DayEdgeOpened);
      }
      if (DayEdgeClosed != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(DayEdgeClosed);
      }
      if (DayMnyBot != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(DayMnyBot);
      }
      if (DayMnySld != 0D) {
        output.WriteRawTag(137, 18);
        output.WriteDouble(DayMnySld);
      }
      if (OpnPnlVolMark != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpnPnlVolMark);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (OpnMarkBrkMny != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpnMarkBrkMny);
      }
      if (OpnTheoEdge != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpnTheoEdge);
      }
      if (PosTheoEdge != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PosTheoEdge);
      }
      if (TVolMove != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(TVolMove);
      }
      if (TEdgeMove != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(TEdgeMove);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(TEdge);
      }
      if (OpnPnlDe != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(OpnPnlDe);
      }
      if (OpnPnlGa != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OpnPnlGa);
      }
      if (OpnPnlTh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OpnPnlTh);
      }
      if (OpnPnlVe != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(OpnPnlVe);
      }
      if (OpnPnlVo != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(OpnPnlVo);
      }
      if (OpnPnlVa != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(OpnPnlVa);
      }
      if (OpnPnlSl != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(OpnPnlSl);
      }
      if (OpnPnlRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(OpnPnlRate);
      }
      if (OpnPnlSDiv != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(OpnPnlSDiv);
      }
      if (OpnPnlDDiv != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(OpnPnlDDiv);
      }
      if (OpnPnlErr != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(OpnPnlErr);
      }
      if (OpnEdgeChange != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(OpnEdgeChange);
      }
      if (PosDelta != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PosDelta);
      }
      if (PosDDelta != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(PosDDelta);
      }
      if (PosDBeta != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(PosDBeta);
      }
      if (PosGamma != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(PosGamma);
      }
      if (PosDGamma != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(PosDGamma);
      }
      if (PosVega != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(PosVega);
      }
      if (PosWVega != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(PosWVega);
      }
      if (PosTVega != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(PosTVega);
      }
      if (PosWtVega != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(PosWtVega);
      }
      if (PosVolga != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(PosVolga);
      }
      if (PosVanna != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(PosVanna);
      }
      if (PosTheta != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(PosTheta);
      }
      if (PosRho != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(PosRho);
      }
      if (PosPhi != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(PosPhi);
      }
      if (PosNotional != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(PosNotional);
      }
      if (PosMktValue != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(PosMktValue);
      }
      if (PosPremOPar != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(PosPremOPar);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(AtmVol);
      }
      if (SymVol != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(SymVol);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(SrSlope);
      }
      if (PrcSVol != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(PrcSVol);
      }
      if (PrcTOpx != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(PrcTOpx);
      }
      if (PrcYOpx != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(PrcYOpx);
      }
      if (PrcUPrc != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(PrcUPrc);
      }
      if (PrcYears != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(PrcYears);
      }
      if (PrcRate != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(PrcRate);
      }
      if (PrcSdiv != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(PrcSdiv);
      }
      if (PrcDdiv != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(PrcDdiv);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(UPrcRatio);
      }
      if (UPrcMove != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(UPrcMove);
      }
      if (IVolMove != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(IVolMove);
      }
      if (ExDivAmt != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(ExDivAmt);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(BorrowRate);
      }
      if (ModelType != 0) {
        output.WriteRawTag(176, 28);
        output.WriteInt32(ModelType);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(200, 28);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(224, 28);
        output.WriteEnum((int) UnderlierType);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(144, 29);
        output.WriteEnum((int) PointCurrency);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TickValue);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(192, 29);
        output.WriteEnum((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        output.WriteRawTag(218, 29);
        output.WriteMessage(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(MultihedgePVRatio);
      }
      if (SpanPrcIncUp != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(SpanPrcIncUp);
      }
      if (SpanPrcIncDn != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(SpanPrcIncDn);
      }
      if (SpanVolInc != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(SpanVolInc);
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        output.WriteRawTag(208, 30);
        output.WriteEnum((int) PrcSpanType);
      }
      if (VolSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        output.WriteRawTag(232, 30);
        output.WriteEnum((int) VolSpanType);
      }
      if (SpanPricingModel != global::Spiderrock.Protobuf.SpanPricingModel.Unspecified) {
        output.WriteRawTag(128, 31);
        output.WriteEnum((int) SpanPricingModel);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        output.WriteRawTag(152, 31);
        output.WriteEnum((int) MarginType);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 31);
        output.WriteMessage(Timestamp);
      }
      if (PosHDelta != 0F) {
        output.WriteRawTag(189, 31);
        output.WriteFloat(PosHDelta);
      }
      if (PosHDDelta != 0F) {
        output.WriteRawTag(197, 31);
        output.WriteFloat(PosHDDelta);
      }
      if (PosHGamma != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(PosHGamma);
      }
      if (PosHDGaamma != 0F) {
        output.WriteRawTag(213, 31);
        output.WriteFloat(PosHDGaamma);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Version != global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) Version);
      }
      if (ClearingFirm.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ClearingAccnt);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(RiskServerCode);
      }
      if (ViewGroup1.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(ViewGroup3);
      }
      if (ticker_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(Ticker);
      }
      if (RiskClass.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) SymbolType);
      }
      if (Beta != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) BetaSource);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(Sector);
      }
      if (IndNum != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(IndNum);
      }
      if (SubNum != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(SubNum);
      }
      if (GrpNum != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(GrpNum);
      }
      if (NbrNum != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NbrNum);
      }
      if (EDays != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(EDays);
      }
      if (DDays != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(DDays);
      }
      if (XDelta != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(XDelta);
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) SkewCode);
      }
      if (EDaysCode != global::Spiderrock.Protobuf.EDaysCode.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) EDaysCode);
      }
      if (IVolRange != global::Spiderrock.Protobuf.iVolRange.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) IVolRange);
      }
      if (SkewDD != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(SkewDD);
      }
      if (SkewDN != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(SkewDN);
      }
      if (SkewAT != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(SkewAT);
      }
      if (SkewUP != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(SkewUP);
      }
      if (SkewDU != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(SkewDU);
      }
      if (ShOpnPos != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(ShOpnPos);
      }
      if (FcOpnPos != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(FcOpnPos);
      }
      if (CnOpnPos != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(CnOpnPos);
      }
      if (CnAtmEquiv != 0F) {
        output.WriteRawTag(189, 12);
        output.WriteFloat(CnAtmEquiv);
      }
      if (ShBot != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(ShBot);
      }
      if (ShSld != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(ShSld);
      }
      if (ShSldShrt != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(ShSldShrt);
      }
      if (FcBot != 0) {
        output.WriteRawTag(152, 13);
        output.WriteInt32(FcBot);
      }
      if (FcSld != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(FcSld);
      }
      if (CnBot != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(CnSld);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(144, 14);
        output.WriteInt32(CnClosed);
      }
      if (OpnDir.Length != 0) {
        output.WriteRawTag(170, 14);
        output.WriteString(OpnDir);
      }
      if (PosDir.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteString(PosDir);
      }
      if (UnitOpnPos != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(UnitOpnPos);
      }
      if (UnitCurPos != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(UnitCurPos);
      }
      if (UnitQtyBot != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(UnitQtyBot);
      }
      if (UnitQtySld != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(UnitQtySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(DayPnl);
      }
      if (DayDnPnl != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(DayDnPnl);
      }
      if (DayTrdDelta != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(DayTrdDelta);
      }
      if (DayTrdDDelta != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(DayTrdDDelta);
      }
      if (DayTrdGamma != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(DayTrdGamma);
      }
      if (DayTrdDGamma != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(DayTrdDGamma);
      }
      if (DayTrdVega != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(DayTrdVega);
      }
      if (DayTrdWVega != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(DayTrdWVega);
      }
      if (DayTrdTVega != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(DayTrdTVega);
      }
      if (DayTrdWtVega != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(DayTrdWtVega);
      }
      if (DayTrdTheta != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(DayTrdTheta);
      }
      if (DayEdgeOpened != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(DayEdgeOpened);
      }
      if (DayEdgeClosed != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(DayEdgeClosed);
      }
      if (DayMnyBot != 0D) {
        output.WriteRawTag(241, 17);
        output.WriteDouble(DayMnyBot);
      }
      if (DayMnySld != 0D) {
        output.WriteRawTag(137, 18);
        output.WriteDouble(DayMnySld);
      }
      if (OpnPnlVolMark != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(OpnPnlVolMark);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (OpnMarkBrkMny != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(OpnMarkBrkMny);
      }
      if (OpnTheoEdge != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OpnTheoEdge);
      }
      if (PosTheoEdge != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(PosTheoEdge);
      }
      if (TVolMove != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(TVolMove);
      }
      if (TEdgeMove != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(TEdgeMove);
      }
      if (TEdge != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(TEdge);
      }
      if (OpnPnlDe != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(OpnPnlDe);
      }
      if (OpnPnlGa != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(OpnPnlGa);
      }
      if (OpnPnlTh != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(OpnPnlTh);
      }
      if (OpnPnlVe != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(OpnPnlVe);
      }
      if (OpnPnlVo != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(OpnPnlVo);
      }
      if (OpnPnlVa != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(OpnPnlVa);
      }
      if (OpnPnlSl != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(OpnPnlSl);
      }
      if (OpnPnlRate != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(OpnPnlRate);
      }
      if (OpnPnlSDiv != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(OpnPnlSDiv);
      }
      if (OpnPnlDDiv != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(OpnPnlDDiv);
      }
      if (OpnPnlErr != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(OpnPnlErr);
      }
      if (OpnEdgeChange != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(OpnEdgeChange);
      }
      if (PosDelta != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PosDelta);
      }
      if (PosDDelta != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(PosDDelta);
      }
      if (PosDBeta != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(PosDBeta);
      }
      if (PosGamma != 0F) {
        output.WriteRawTag(229, 22);
        output.WriteFloat(PosGamma);
      }
      if (PosDGamma != 0F) {
        output.WriteRawTag(253, 22);
        output.WriteFloat(PosDGamma);
      }
      if (PosVega != 0F) {
        output.WriteRawTag(149, 23);
        output.WriteFloat(PosVega);
      }
      if (PosWVega != 0F) {
        output.WriteRawTag(173, 23);
        output.WriteFloat(PosWVega);
      }
      if (PosTVega != 0F) {
        output.WriteRawTag(197, 23);
        output.WriteFloat(PosTVega);
      }
      if (PosWtVega != 0F) {
        output.WriteRawTag(221, 23);
        output.WriteFloat(PosWtVega);
      }
      if (PosVolga != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(PosVolga);
      }
      if (PosVanna != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(PosVanna);
      }
      if (PosTheta != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(PosTheta);
      }
      if (PosRho != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(PosRho);
      }
      if (PosPhi != 0F) {
        output.WriteRawTag(213, 24);
        output.WriteFloat(PosPhi);
      }
      if (PosNotional != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(PosNotional);
      }
      if (PosMktValue != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(PosMktValue);
      }
      if (PosPremOPar != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(PosPremOPar);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(AtmVol);
      }
      if (SymVol != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(SymVol);
      }
      if (SrSlope != 0F) {
        output.WriteRawTag(229, 25);
        output.WriteFloat(SrSlope);
      }
      if (PrcSVol != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(PrcSVol);
      }
      if (PrcTOpx != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(PrcTOpx);
      }
      if (PrcYOpx != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(PrcYOpx);
      }
      if (PrcUPrc != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(PrcUPrc);
      }
      if (PrcYears != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(PrcYears);
      }
      if (PrcRate != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(PrcRate);
      }
      if (PrcSdiv != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(PrcSdiv);
      }
      if (PrcDdiv != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(PrcDdiv);
      }
      if (UPrcRatio != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(UPrcRatio);
      }
      if (UPrcMove != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(UPrcMove);
      }
      if (IVolMove != 0F) {
        output.WriteRawTag(237, 27);
        output.WriteFloat(IVolMove);
      }
      if (ExDivAmt != 0F) {
        output.WriteRawTag(133, 28);
        output.WriteFloat(ExDivAmt);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(157, 28);
        output.WriteFloat(BorrowRate);
      }
      if (ModelType != 0) {
        output.WriteRawTag(176, 28);
        output.WriteInt32(ModelType);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(200, 28);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(224, 28);
        output.WriteEnum((int) UnderlierType);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(253, 28);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(144, 29);
        output.WriteEnum((int) PointCurrency);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TickValue);
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        output.WriteRawTag(192, 29);
        output.WriteEnum((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        output.WriteRawTag(218, 29);
        output.WriteMessage(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(MultihedgePVRatio);
      }
      if (SpanPrcIncUp != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(SpanPrcIncUp);
      }
      if (SpanPrcIncDn != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(SpanPrcIncDn);
      }
      if (SpanVolInc != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(SpanVolInc);
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        output.WriteRawTag(208, 30);
        output.WriteEnum((int) PrcSpanType);
      }
      if (VolSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        output.WriteRawTag(232, 30);
        output.WriteEnum((int) VolSpanType);
      }
      if (SpanPricingModel != global::Spiderrock.Protobuf.SpanPricingModel.Unspecified) {
        output.WriteRawTag(128, 31);
        output.WriteEnum((int) SpanPricingModel);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        output.WriteRawTag(152, 31);
        output.WriteEnum((int) MarginType);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 31);
        output.WriteMessage(Timestamp);
      }
      if (PosHDelta != 0F) {
        output.WriteRawTag(189, 31);
        output.WriteFloat(PosHDelta);
      }
      if (PosHDDelta != 0F) {
        output.WriteRawTag(197, 31);
        output.WriteFloat(PosHDDelta);
      }
      if (PosHGamma != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(PosHGamma);
      }
      if (PosHDGaamma != 0F) {
        output.WriteRawTag(213, 31);
        output.WriteFloat(PosHDGaamma);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (Version != global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Version);
      }
      if (ClearingFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFirm);
      }
      if (ClearingAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingAccnt);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (ViewGroup1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup1);
      }
      if (ViewGroup2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup2);
      }
      if (ViewGroup3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ViewGroup3);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (RiskClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskClass);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IndNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndNum);
      }
      if (SubNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubNum);
      }
      if (GrpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrpNum);
      }
      if (NbrNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbrNum);
      }
      if (EDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EDays);
      }
      if (DDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DDays);
      }
      if (XDelta != 0F) {
        size += 2 + 4;
      }
      if (ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExpCode);
      }
      if (SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SkewCode);
      }
      if (EDaysCode != global::Spiderrock.Protobuf.EDaysCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EDaysCode);
      }
      if (IVolRange != global::Spiderrock.Protobuf.iVolRange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IVolRange);
      }
      if (SkewDD != 0F) {
        size += 2 + 4;
      }
      if (SkewDN != 0F) {
        size += 2 + 4;
      }
      if (SkewAT != 0F) {
        size += 2 + 4;
      }
      if (SkewUP != 0F) {
        size += 2 + 4;
      }
      if (SkewDU != 0F) {
        size += 2 + 4;
      }
      if (ShOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShOpnPos);
      }
      if (FcOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcOpnPos);
      }
      if (CnOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnOpnPos);
      }
      if (CnAtmEquiv != 0F) {
        size += 2 + 4;
      }
      if (ShBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBot);
      }
      if (ShSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSld);
      }
      if (ShSldShrt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldShrt);
      }
      if (FcBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcBot);
      }
      if (FcSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FcSld);
      }
      if (CnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBot);
      }
      if (CnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSld);
      }
      if (CnOpened != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnOpened);
      }
      if (CnClosed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnClosed);
      }
      if (OpnDir.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpnDir);
      }
      if (PosDir.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PosDir);
      }
      if (UnitOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitOpnPos);
      }
      if (UnitCurPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitCurPos);
      }
      if (UnitQtyBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitQtyBot);
      }
      if (UnitQtySld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitQtySld);
      }
      if (DayPnl != 0F) {
        size += 2 + 4;
      }
      if (DayDnPnl != 0F) {
        size += 2 + 4;
      }
      if (DayTrdDelta != 0F) {
        size += 2 + 4;
      }
      if (DayTrdDDelta != 0F) {
        size += 2 + 4;
      }
      if (DayTrdGamma != 0F) {
        size += 2 + 4;
      }
      if (DayTrdDGamma != 0F) {
        size += 2 + 4;
      }
      if (DayTrdVega != 0F) {
        size += 2 + 4;
      }
      if (DayTrdWVega != 0F) {
        size += 2 + 4;
      }
      if (DayTrdTVega != 0F) {
        size += 2 + 4;
      }
      if (DayTrdWtVega != 0F) {
        size += 2 + 4;
      }
      if (DayTrdTheta != 0F) {
        size += 2 + 4;
      }
      if (DayEdgeOpened != 0F) {
        size += 2 + 4;
      }
      if (DayEdgeClosed != 0F) {
        size += 2 + 4;
      }
      if (DayMnyBot != 0D) {
        size += 2 + 8;
      }
      if (DayMnySld != 0D) {
        size += 2 + 8;
      }
      if (OpnPnlVolMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlMidMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlClrMark != 0F) {
        size += 2 + 4;
      }
      if (OpnMarkBrkMny != 0F) {
        size += 2 + 4;
      }
      if (OpnTheoEdge != 0F) {
        size += 2 + 4;
      }
      if (PosTheoEdge != 0F) {
        size += 2 + 4;
      }
      if (TVolMove != 0F) {
        size += 2 + 4;
      }
      if (TEdgeMove != 0F) {
        size += 2 + 4;
      }
      if (TEdge != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlDe != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlGa != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlTh != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVe != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVo != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlVa != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlSl != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlRate != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlSDiv != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlDDiv != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlErr != 0F) {
        size += 2 + 4;
      }
      if (OpnEdgeChange != 0F) {
        size += 2 + 4;
      }
      if (PosDelta != 0F) {
        size += 2 + 4;
      }
      if (PosDDelta != 0F) {
        size += 2 + 4;
      }
      if (PosDBeta != 0F) {
        size += 2 + 4;
      }
      if (PosGamma != 0F) {
        size += 2 + 4;
      }
      if (PosDGamma != 0F) {
        size += 2 + 4;
      }
      if (PosVega != 0F) {
        size += 2 + 4;
      }
      if (PosWVega != 0F) {
        size += 2 + 4;
      }
      if (PosTVega != 0F) {
        size += 2 + 4;
      }
      if (PosWtVega != 0F) {
        size += 2 + 4;
      }
      if (PosVolga != 0F) {
        size += 2 + 4;
      }
      if (PosVanna != 0F) {
        size += 2 + 4;
      }
      if (PosTheta != 0F) {
        size += 2 + 4;
      }
      if (PosRho != 0F) {
        size += 2 + 4;
      }
      if (PosPhi != 0F) {
        size += 2 + 4;
      }
      if (PosHDelta != 0F) {
        size += 2 + 4;
      }
      if (PosHDDelta != 0F) {
        size += 2 + 4;
      }
      if (PosHGamma != 0F) {
        size += 2 + 4;
      }
      if (PosHDGaamma != 0F) {
        size += 2 + 4;
      }
      if (PosNotional != 0F) {
        size += 2 + 4;
      }
      if (PosMktValue != 0F) {
        size += 2 + 4;
      }
      if (PosPremOPar != 0F) {
        size += 2 + 4;
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (SymVol != 0F) {
        size += 2 + 4;
      }
      if (SrSlope != 0F) {
        size += 2 + 4;
      }
      if (PrcSVol != 0F) {
        size += 2 + 4;
      }
      if (PrcTOpx != 0F) {
        size += 2 + 4;
      }
      if (PrcYOpx != 0F) {
        size += 2 + 4;
      }
      if (PrcUPrc != 0F) {
        size += 2 + 4;
      }
      if (PrcYears != 0F) {
        size += 2 + 4;
      }
      if (PrcRate != 0F) {
        size += 2 + 4;
      }
      if (PrcSdiv != 0F) {
        size += 2 + 4;
      }
      if (PrcDdiv != 0F) {
        size += 2 + 4;
      }
      if (UPrcRatio != 0F) {
        size += 2 + 4;
      }
      if (UPrcMove != 0F) {
        size += 2 + 4;
      }
      if (IVolMove != 0F) {
        size += 2 + 4;
      }
      if (ExDivAmt != 0F) {
        size += 2 + 4;
      }
      if (BorrowRate != 0F) {
        size += 2 + 4;
      }
      if (ModelType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModelType);
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Multihedge);
      }
      if (multihedgeSource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MultihedgeSource);
      }
      if (MultihedgePVRatio != 0F) {
        size += 2 + 4;
      }
      if (SpanPrcIncUp != 0F) {
        size += 2 + 4;
      }
      if (SpanPrcIncDn != 0F) {
        size += 2 + 4;
      }
      if (SpanVolInc != 0F) {
        size += 2 + 4;
      }
      if (PrcSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PrcSpanType);
      }
      if (VolSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VolSpanType);
      }
      if (SpanPricingModel != global::Spiderrock.Protobuf.SpanPricingModel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpanPricingModel);
      }
      if (MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarginType);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RiskCubeDetailV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.Version != global::Spiderrock.Protobuf.RiskCubeVersion.Unspecified) {
        Version = other.Version;
      }
      if (other.ClearingFirm.Length != 0) {
        ClearingFirm = other.ClearingFirm;
      }
      if (other.ClearingAccnt.Length != 0) {
        ClearingAccnt = other.ClearingAccnt;
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.ViewGroup1.Length != 0) {
        ViewGroup1 = other.ViewGroup1;
      }
      if (other.ViewGroup2.Length != 0) {
        ViewGroup2 = other.ViewGroup2;
      }
      if (other.ViewGroup3.Length != 0) {
        ViewGroup3 = other.ViewGroup3;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.RiskClass.Length != 0) {
        RiskClass = other.RiskClass;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IndNum != 0) {
        IndNum = other.IndNum;
      }
      if (other.SubNum != 0) {
        SubNum = other.SubNum;
      }
      if (other.GrpNum != 0) {
        GrpNum = other.GrpNum;
      }
      if (other.NbrNum != 0) {
        NbrNum = other.NbrNum;
      }
      if (other.EDays != 0) {
        EDays = other.EDays;
      }
      if (other.DDays != 0) {
        DDays = other.DDays;
      }
      if (other.XDelta != 0F) {
        XDelta = other.XDelta;
      }
      if (other.ExpCode != global::Spiderrock.Protobuf.ExpCode.Unspecified) {
        ExpCode = other.ExpCode;
      }
      if (other.SkewCode != global::Spiderrock.Protobuf.SkewCode.Unspecified) {
        SkewCode = other.SkewCode;
      }
      if (other.EDaysCode != global::Spiderrock.Protobuf.EDaysCode.Unspecified) {
        EDaysCode = other.EDaysCode;
      }
      if (other.IVolRange != global::Spiderrock.Protobuf.iVolRange.Unspecified) {
        IVolRange = other.IVolRange;
      }
      if (other.SkewDD != 0F) {
        SkewDD = other.SkewDD;
      }
      if (other.SkewDN != 0F) {
        SkewDN = other.SkewDN;
      }
      if (other.SkewAT != 0F) {
        SkewAT = other.SkewAT;
      }
      if (other.SkewUP != 0F) {
        SkewUP = other.SkewUP;
      }
      if (other.SkewDU != 0F) {
        SkewDU = other.SkewDU;
      }
      if (other.ShOpnPos != 0) {
        ShOpnPos = other.ShOpnPos;
      }
      if (other.FcOpnPos != 0) {
        FcOpnPos = other.FcOpnPos;
      }
      if (other.CnOpnPos != 0) {
        CnOpnPos = other.CnOpnPos;
      }
      if (other.CnAtmEquiv != 0F) {
        CnAtmEquiv = other.CnAtmEquiv;
      }
      if (other.ShBot != 0) {
        ShBot = other.ShBot;
      }
      if (other.ShSld != 0) {
        ShSld = other.ShSld;
      }
      if (other.ShSldShrt != 0) {
        ShSldShrt = other.ShSldShrt;
      }
      if (other.FcBot != 0) {
        FcBot = other.FcBot;
      }
      if (other.FcSld != 0) {
        FcSld = other.FcSld;
      }
      if (other.CnBot != 0) {
        CnBot = other.CnBot;
      }
      if (other.CnSld != 0) {
        CnSld = other.CnSld;
      }
      if (other.CnOpened != 0) {
        CnOpened = other.CnOpened;
      }
      if (other.CnClosed != 0) {
        CnClosed = other.CnClosed;
      }
      if (other.OpnDir.Length != 0) {
        OpnDir = other.OpnDir;
      }
      if (other.PosDir.Length != 0) {
        PosDir = other.PosDir;
      }
      if (other.UnitOpnPos != 0) {
        UnitOpnPos = other.UnitOpnPos;
      }
      if (other.UnitCurPos != 0) {
        UnitCurPos = other.UnitCurPos;
      }
      if (other.UnitQtyBot != 0) {
        UnitQtyBot = other.UnitQtyBot;
      }
      if (other.UnitQtySld != 0) {
        UnitQtySld = other.UnitQtySld;
      }
      if (other.DayPnl != 0F) {
        DayPnl = other.DayPnl;
      }
      if (other.DayDnPnl != 0F) {
        DayDnPnl = other.DayDnPnl;
      }
      if (other.DayTrdDelta != 0F) {
        DayTrdDelta = other.DayTrdDelta;
      }
      if (other.DayTrdDDelta != 0F) {
        DayTrdDDelta = other.DayTrdDDelta;
      }
      if (other.DayTrdGamma != 0F) {
        DayTrdGamma = other.DayTrdGamma;
      }
      if (other.DayTrdDGamma != 0F) {
        DayTrdDGamma = other.DayTrdDGamma;
      }
      if (other.DayTrdVega != 0F) {
        DayTrdVega = other.DayTrdVega;
      }
      if (other.DayTrdWVega != 0F) {
        DayTrdWVega = other.DayTrdWVega;
      }
      if (other.DayTrdTVega != 0F) {
        DayTrdTVega = other.DayTrdTVega;
      }
      if (other.DayTrdWtVega != 0F) {
        DayTrdWtVega = other.DayTrdWtVega;
      }
      if (other.DayTrdTheta != 0F) {
        DayTrdTheta = other.DayTrdTheta;
      }
      if (other.DayEdgeOpened != 0F) {
        DayEdgeOpened = other.DayEdgeOpened;
      }
      if (other.DayEdgeClosed != 0F) {
        DayEdgeClosed = other.DayEdgeClosed;
      }
      if (other.DayMnyBot != 0D) {
        DayMnyBot = other.DayMnyBot;
      }
      if (other.DayMnySld != 0D) {
        DayMnySld = other.DayMnySld;
      }
      if (other.OpnPnlVolMark != 0F) {
        OpnPnlVolMark = other.OpnPnlVolMark;
      }
      if (other.OpnPnlMidMark != 0F) {
        OpnPnlMidMark = other.OpnPnlMidMark;
      }
      if (other.OpnPnlClrMark != 0F) {
        OpnPnlClrMark = other.OpnPnlClrMark;
      }
      if (other.OpnMarkBrkMny != 0F) {
        OpnMarkBrkMny = other.OpnMarkBrkMny;
      }
      if (other.OpnTheoEdge != 0F) {
        OpnTheoEdge = other.OpnTheoEdge;
      }
      if (other.PosTheoEdge != 0F) {
        PosTheoEdge = other.PosTheoEdge;
      }
      if (other.TVolMove != 0F) {
        TVolMove = other.TVolMove;
      }
      if (other.TEdgeMove != 0F) {
        TEdgeMove = other.TEdgeMove;
      }
      if (other.TEdge != 0F) {
        TEdge = other.TEdge;
      }
      if (other.OpnPnlDe != 0F) {
        OpnPnlDe = other.OpnPnlDe;
      }
      if (other.OpnPnlGa != 0F) {
        OpnPnlGa = other.OpnPnlGa;
      }
      if (other.OpnPnlTh != 0F) {
        OpnPnlTh = other.OpnPnlTh;
      }
      if (other.OpnPnlVe != 0F) {
        OpnPnlVe = other.OpnPnlVe;
      }
      if (other.OpnPnlVo != 0F) {
        OpnPnlVo = other.OpnPnlVo;
      }
      if (other.OpnPnlVa != 0F) {
        OpnPnlVa = other.OpnPnlVa;
      }
      if (other.OpnPnlSl != 0F) {
        OpnPnlSl = other.OpnPnlSl;
      }
      if (other.OpnPnlRate != 0F) {
        OpnPnlRate = other.OpnPnlRate;
      }
      if (other.OpnPnlSDiv != 0F) {
        OpnPnlSDiv = other.OpnPnlSDiv;
      }
      if (other.OpnPnlDDiv != 0F) {
        OpnPnlDDiv = other.OpnPnlDDiv;
      }
      if (other.OpnPnlErr != 0F) {
        OpnPnlErr = other.OpnPnlErr;
      }
      if (other.OpnEdgeChange != 0F) {
        OpnEdgeChange = other.OpnEdgeChange;
      }
      if (other.PosDelta != 0F) {
        PosDelta = other.PosDelta;
      }
      if (other.PosDDelta != 0F) {
        PosDDelta = other.PosDDelta;
      }
      if (other.PosDBeta != 0F) {
        PosDBeta = other.PosDBeta;
      }
      if (other.PosGamma != 0F) {
        PosGamma = other.PosGamma;
      }
      if (other.PosDGamma != 0F) {
        PosDGamma = other.PosDGamma;
      }
      if (other.PosVega != 0F) {
        PosVega = other.PosVega;
      }
      if (other.PosWVega != 0F) {
        PosWVega = other.PosWVega;
      }
      if (other.PosTVega != 0F) {
        PosTVega = other.PosTVega;
      }
      if (other.PosWtVega != 0F) {
        PosWtVega = other.PosWtVega;
      }
      if (other.PosVolga != 0F) {
        PosVolga = other.PosVolga;
      }
      if (other.PosVanna != 0F) {
        PosVanna = other.PosVanna;
      }
      if (other.PosTheta != 0F) {
        PosTheta = other.PosTheta;
      }
      if (other.PosRho != 0F) {
        PosRho = other.PosRho;
      }
      if (other.PosPhi != 0F) {
        PosPhi = other.PosPhi;
      }
      if (other.PosHDelta != 0F) {
        PosHDelta = other.PosHDelta;
      }
      if (other.PosHDDelta != 0F) {
        PosHDDelta = other.PosHDDelta;
      }
      if (other.PosHGamma != 0F) {
        PosHGamma = other.PosHGamma;
      }
      if (other.PosHDGaamma != 0F) {
        PosHDGaamma = other.PosHDGaamma;
      }
      if (other.PosNotional != 0F) {
        PosNotional = other.PosNotional;
      }
      if (other.PosMktValue != 0F) {
        PosMktValue = other.PosMktValue;
      }
      if (other.PosPremOPar != 0F) {
        PosPremOPar = other.PosPremOPar;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.SymVol != 0F) {
        SymVol = other.SymVol;
      }
      if (other.SrSlope != 0F) {
        SrSlope = other.SrSlope;
      }
      if (other.PrcSVol != 0F) {
        PrcSVol = other.PrcSVol;
      }
      if (other.PrcTOpx != 0F) {
        PrcTOpx = other.PrcTOpx;
      }
      if (other.PrcYOpx != 0F) {
        PrcYOpx = other.PrcYOpx;
      }
      if (other.PrcUPrc != 0F) {
        PrcUPrc = other.PrcUPrc;
      }
      if (other.PrcYears != 0F) {
        PrcYears = other.PrcYears;
      }
      if (other.PrcRate != 0F) {
        PrcRate = other.PrcRate;
      }
      if (other.PrcSdiv != 0F) {
        PrcSdiv = other.PrcSdiv;
      }
      if (other.PrcDdiv != 0F) {
        PrcDdiv = other.PrcDdiv;
      }
      if (other.UPrcRatio != 0F) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.UPrcMove != 0F) {
        UPrcMove = other.UPrcMove;
      }
      if (other.IVolMove != 0F) {
        IVolMove = other.IVolMove;
      }
      if (other.ExDivAmt != 0F) {
        ExDivAmt = other.ExDivAmt;
      }
      if (other.BorrowRate != 0F) {
        BorrowRate = other.BorrowRate;
      }
      if (other.ModelType != 0) {
        ModelType = other.ModelType;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.Multihedge != global::Spiderrock.Protobuf.Multihedge.Unspecified) {
        Multihedge = other.Multihedge;
      }
      if (other.multihedgeSource_ != null) {
        if (multihedgeSource_ == null) {
          MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
        }
        MultihedgeSource.MergeFrom(other.MultihedgeSource);
      }
      if (other.MultihedgePVRatio != 0F) {
        MultihedgePVRatio = other.MultihedgePVRatio;
      }
      if (other.SpanPrcIncUp != 0F) {
        SpanPrcIncUp = other.SpanPrcIncUp;
      }
      if (other.SpanPrcIncDn != 0F) {
        SpanPrcIncDn = other.SpanPrcIncDn;
      }
      if (other.SpanVolInc != 0F) {
        SpanVolInc = other.SpanVolInc;
      }
      if (other.PrcSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        PrcSpanType = other.PrcSpanType;
      }
      if (other.VolSpanType != global::Spiderrock.Protobuf.SpanType.Unspecified) {
        VolSpanType = other.VolSpanType;
      }
      if (other.SpanPricingModel != global::Spiderrock.Protobuf.SpanPricingModel.Unspecified) {
        SpanPricingModel = other.SpanPricingModel;
      }
      if (other.MarginType != global::Spiderrock.Protobuf.MarginType.Unspecified) {
        MarginType = other.MarginType;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            Version = (global::Spiderrock.Protobuf.RiskCubeVersion) input.ReadEnum();
            break;
          }
          case 850: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 874: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 898: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 922: {
            ViewGroup1 = input.ReadString();
            break;
          }
          case 946: {
            ViewGroup2 = input.ReadString();
            break;
          }
          case 970: {
            ViewGroup3 = input.ReadString();
            break;
          }
          case 994: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1018: {
            RiskClass = input.ReadString();
            break;
          }
          case 1040: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1069: {
            Beta = input.ReadFloat();
            break;
          }
          case 1088: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1114: {
            Sector = input.ReadString();
            break;
          }
          case 1136: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1160: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1184: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1208: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1232: {
            EDays = input.ReadInt32();
            break;
          }
          case 1256: {
            DDays = input.ReadInt32();
            break;
          }
          case 1285: {
            XDelta = input.ReadFloat();
            break;
          }
          case 1304: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1328: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1352: {
            EDaysCode = (global::Spiderrock.Protobuf.EDaysCode) input.ReadEnum();
            break;
          }
          case 1376: {
            IVolRange = (global::Spiderrock.Protobuf.iVolRange) input.ReadEnum();
            break;
          }
          case 1405: {
            SkewDD = input.ReadFloat();
            break;
          }
          case 1429: {
            SkewDN = input.ReadFloat();
            break;
          }
          case 1453: {
            SkewAT = input.ReadFloat();
            break;
          }
          case 1477: {
            SkewUP = input.ReadFloat();
            break;
          }
          case 1501: {
            SkewDU = input.ReadFloat();
            break;
          }
          case 1520: {
            ShOpnPos = input.ReadInt32();
            break;
          }
          case 1544: {
            FcOpnPos = input.ReadInt32();
            break;
          }
          case 1568: {
            CnOpnPos = input.ReadInt32();
            break;
          }
          case 1597: {
            CnAtmEquiv = input.ReadFloat();
            break;
          }
          case 1616: {
            ShBot = input.ReadInt32();
            break;
          }
          case 1640: {
            ShSld = input.ReadInt32();
            break;
          }
          case 1664: {
            ShSldShrt = input.ReadInt32();
            break;
          }
          case 1688: {
            FcBot = input.ReadInt32();
            break;
          }
          case 1712: {
            FcSld = input.ReadInt32();
            break;
          }
          case 1736: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1760: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1784: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1808: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1834: {
            OpnDir = input.ReadString();
            break;
          }
          case 1858: {
            PosDir = input.ReadString();
            break;
          }
          case 1880: {
            UnitOpnPos = input.ReadInt32();
            break;
          }
          case 1904: {
            UnitCurPos = input.ReadInt32();
            break;
          }
          case 1928: {
            UnitQtyBot = input.ReadInt32();
            break;
          }
          case 1952: {
            UnitQtySld = input.ReadInt32();
            break;
          }
          case 1981: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 2005: {
            DayDnPnl = input.ReadFloat();
            break;
          }
          case 2029: {
            DayTrdDelta = input.ReadFloat();
            break;
          }
          case 2053: {
            DayTrdDDelta = input.ReadFloat();
            break;
          }
          case 2077: {
            DayTrdGamma = input.ReadFloat();
            break;
          }
          case 2101: {
            DayTrdDGamma = input.ReadFloat();
            break;
          }
          case 2125: {
            DayTrdVega = input.ReadFloat();
            break;
          }
          case 2149: {
            DayTrdWVega = input.ReadFloat();
            break;
          }
          case 2173: {
            DayTrdTVega = input.ReadFloat();
            break;
          }
          case 2197: {
            DayTrdWtVega = input.ReadFloat();
            break;
          }
          case 2221: {
            DayTrdTheta = input.ReadFloat();
            break;
          }
          case 2245: {
            DayEdgeOpened = input.ReadFloat();
            break;
          }
          case 2269: {
            DayEdgeClosed = input.ReadFloat();
            break;
          }
          case 2289: {
            DayMnyBot = input.ReadDouble();
            break;
          }
          case 2313: {
            DayMnySld = input.ReadDouble();
            break;
          }
          case 2341: {
            OpnPnlVolMark = input.ReadFloat();
            break;
          }
          case 2365: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 2389: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 2413: {
            OpnMarkBrkMny = input.ReadFloat();
            break;
          }
          case 2437: {
            OpnTheoEdge = input.ReadFloat();
            break;
          }
          case 2461: {
            PosTheoEdge = input.ReadFloat();
            break;
          }
          case 2485: {
            TVolMove = input.ReadFloat();
            break;
          }
          case 2509: {
            TEdgeMove = input.ReadFloat();
            break;
          }
          case 2533: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2557: {
            OpnPnlDe = input.ReadFloat();
            break;
          }
          case 2581: {
            OpnPnlGa = input.ReadFloat();
            break;
          }
          case 2605: {
            OpnPnlTh = input.ReadFloat();
            break;
          }
          case 2629: {
            OpnPnlVe = input.ReadFloat();
            break;
          }
          case 2653: {
            OpnPnlVo = input.ReadFloat();
            break;
          }
          case 2677: {
            OpnPnlVa = input.ReadFloat();
            break;
          }
          case 2701: {
            OpnPnlSl = input.ReadFloat();
            break;
          }
          case 2725: {
            OpnPnlRate = input.ReadFloat();
            break;
          }
          case 2749: {
            OpnPnlSDiv = input.ReadFloat();
            break;
          }
          case 2773: {
            OpnPnlDDiv = input.ReadFloat();
            break;
          }
          case 2797: {
            OpnPnlErr = input.ReadFloat();
            break;
          }
          case 2821: {
            OpnEdgeChange = input.ReadFloat();
            break;
          }
          case 2845: {
            PosDelta = input.ReadFloat();
            break;
          }
          case 2869: {
            PosDDelta = input.ReadFloat();
            break;
          }
          case 2893: {
            PosDBeta = input.ReadFloat();
            break;
          }
          case 2917: {
            PosGamma = input.ReadFloat();
            break;
          }
          case 2941: {
            PosDGamma = input.ReadFloat();
            break;
          }
          case 2965: {
            PosVega = input.ReadFloat();
            break;
          }
          case 2989: {
            PosWVega = input.ReadFloat();
            break;
          }
          case 3013: {
            PosTVega = input.ReadFloat();
            break;
          }
          case 3037: {
            PosWtVega = input.ReadFloat();
            break;
          }
          case 3061: {
            PosVolga = input.ReadFloat();
            break;
          }
          case 3085: {
            PosVanna = input.ReadFloat();
            break;
          }
          case 3109: {
            PosTheta = input.ReadFloat();
            break;
          }
          case 3133: {
            PosRho = input.ReadFloat();
            break;
          }
          case 3157: {
            PosPhi = input.ReadFloat();
            break;
          }
          case 3181: {
            PosNotional = input.ReadFloat();
            break;
          }
          case 3205: {
            PosMktValue = input.ReadFloat();
            break;
          }
          case 3229: {
            PosPremOPar = input.ReadFloat();
            break;
          }
          case 3253: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 3277: {
            SymVol = input.ReadFloat();
            break;
          }
          case 3301: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 3325: {
            PrcSVol = input.ReadFloat();
            break;
          }
          case 3349: {
            PrcTOpx = input.ReadFloat();
            break;
          }
          case 3373: {
            PrcYOpx = input.ReadFloat();
            break;
          }
          case 3397: {
            PrcUPrc = input.ReadFloat();
            break;
          }
          case 3421: {
            PrcYears = input.ReadFloat();
            break;
          }
          case 3445: {
            PrcRate = input.ReadFloat();
            break;
          }
          case 3469: {
            PrcSdiv = input.ReadFloat();
            break;
          }
          case 3493: {
            PrcDdiv = input.ReadFloat();
            break;
          }
          case 3517: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 3541: {
            UPrcMove = input.ReadFloat();
            break;
          }
          case 3565: {
            IVolMove = input.ReadFloat();
            break;
          }
          case 3589: {
            ExDivAmt = input.ReadFloat();
            break;
          }
          case 3613: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 3632: {
            ModelType = input.ReadInt32();
            break;
          }
          case 3656: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 3680: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 3709: {
            PointValue = input.ReadFloat();
            break;
          }
          case 3728: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 3757: {
            TickValue = input.ReadFloat();
            break;
          }
          case 3776: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 3802: {
            if (multihedgeSource_ == null) {
              MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(MultihedgeSource);
            break;
          }
          case 3829: {
            MultihedgePVRatio = input.ReadFloat();
            break;
          }
          case 3853: {
            SpanPrcIncUp = input.ReadFloat();
            break;
          }
          case 3877: {
            SpanPrcIncDn = input.ReadFloat();
            break;
          }
          case 3901: {
            SpanVolInc = input.ReadFloat();
            break;
          }
          case 3920: {
            PrcSpanType = (global::Spiderrock.Protobuf.SpanType) input.ReadEnum();
            break;
          }
          case 3944: {
            VolSpanType = (global::Spiderrock.Protobuf.SpanType) input.ReadEnum();
            break;
          }
          case 3968: {
            SpanPricingModel = (global::Spiderrock.Protobuf.SpanPricingModel) input.ReadEnum();
            break;
          }
          case 3992: {
            MarginType = (global::Spiderrock.Protobuf.MarginType) input.ReadEnum();
            break;
          }
          case 4018: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4029: {
            PosHDelta = input.ReadFloat();
            break;
          }
          case 4037: {
            PosHDDelta = input.ReadFloat();
            break;
          }
          case 4045: {
            PosHGamma = input.ReadFloat();
            break;
          }
          case 4053: {
            PosHDGaamma = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.RiskCubeDetailV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            Version = (global::Spiderrock.Protobuf.RiskCubeVersion) input.ReadEnum();
            break;
          }
          case 850: {
            ClearingFirm = input.ReadString();
            break;
          }
          case 874: {
            ClearingAccnt = input.ReadString();
            break;
          }
          case 898: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 922: {
            ViewGroup1 = input.ReadString();
            break;
          }
          case 946: {
            ViewGroup2 = input.ReadString();
            break;
          }
          case 970: {
            ViewGroup3 = input.ReadString();
            break;
          }
          case 994: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1018: {
            RiskClass = input.ReadString();
            break;
          }
          case 1040: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 1069: {
            Beta = input.ReadFloat();
            break;
          }
          case 1088: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1114: {
            Sector = input.ReadString();
            break;
          }
          case 1136: {
            IndNum = input.ReadInt32();
            break;
          }
          case 1160: {
            SubNum = input.ReadInt32();
            break;
          }
          case 1184: {
            GrpNum = input.ReadInt32();
            break;
          }
          case 1208: {
            NbrNum = input.ReadInt32();
            break;
          }
          case 1232: {
            EDays = input.ReadInt32();
            break;
          }
          case 1256: {
            DDays = input.ReadInt32();
            break;
          }
          case 1285: {
            XDelta = input.ReadFloat();
            break;
          }
          case 1304: {
            ExpCode = (global::Spiderrock.Protobuf.ExpCode) input.ReadEnum();
            break;
          }
          case 1328: {
            SkewCode = (global::Spiderrock.Protobuf.SkewCode) input.ReadEnum();
            break;
          }
          case 1352: {
            EDaysCode = (global::Spiderrock.Protobuf.EDaysCode) input.ReadEnum();
            break;
          }
          case 1376: {
            IVolRange = (global::Spiderrock.Protobuf.iVolRange) input.ReadEnum();
            break;
          }
          case 1405: {
            SkewDD = input.ReadFloat();
            break;
          }
          case 1429: {
            SkewDN = input.ReadFloat();
            break;
          }
          case 1453: {
            SkewAT = input.ReadFloat();
            break;
          }
          case 1477: {
            SkewUP = input.ReadFloat();
            break;
          }
          case 1501: {
            SkewDU = input.ReadFloat();
            break;
          }
          case 1520: {
            ShOpnPos = input.ReadInt32();
            break;
          }
          case 1544: {
            FcOpnPos = input.ReadInt32();
            break;
          }
          case 1568: {
            CnOpnPos = input.ReadInt32();
            break;
          }
          case 1597: {
            CnAtmEquiv = input.ReadFloat();
            break;
          }
          case 1616: {
            ShBot = input.ReadInt32();
            break;
          }
          case 1640: {
            ShSld = input.ReadInt32();
            break;
          }
          case 1664: {
            ShSldShrt = input.ReadInt32();
            break;
          }
          case 1688: {
            FcBot = input.ReadInt32();
            break;
          }
          case 1712: {
            FcSld = input.ReadInt32();
            break;
          }
          case 1736: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1760: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1784: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1808: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1834: {
            OpnDir = input.ReadString();
            break;
          }
          case 1858: {
            PosDir = input.ReadString();
            break;
          }
          case 1880: {
            UnitOpnPos = input.ReadInt32();
            break;
          }
          case 1904: {
            UnitCurPos = input.ReadInt32();
            break;
          }
          case 1928: {
            UnitQtyBot = input.ReadInt32();
            break;
          }
          case 1952: {
            UnitQtySld = input.ReadInt32();
            break;
          }
          case 1981: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 2005: {
            DayDnPnl = input.ReadFloat();
            break;
          }
          case 2029: {
            DayTrdDelta = input.ReadFloat();
            break;
          }
          case 2053: {
            DayTrdDDelta = input.ReadFloat();
            break;
          }
          case 2077: {
            DayTrdGamma = input.ReadFloat();
            break;
          }
          case 2101: {
            DayTrdDGamma = input.ReadFloat();
            break;
          }
          case 2125: {
            DayTrdVega = input.ReadFloat();
            break;
          }
          case 2149: {
            DayTrdWVega = input.ReadFloat();
            break;
          }
          case 2173: {
            DayTrdTVega = input.ReadFloat();
            break;
          }
          case 2197: {
            DayTrdWtVega = input.ReadFloat();
            break;
          }
          case 2221: {
            DayTrdTheta = input.ReadFloat();
            break;
          }
          case 2245: {
            DayEdgeOpened = input.ReadFloat();
            break;
          }
          case 2269: {
            DayEdgeClosed = input.ReadFloat();
            break;
          }
          case 2289: {
            DayMnyBot = input.ReadDouble();
            break;
          }
          case 2313: {
            DayMnySld = input.ReadDouble();
            break;
          }
          case 2341: {
            OpnPnlVolMark = input.ReadFloat();
            break;
          }
          case 2365: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 2389: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 2413: {
            OpnMarkBrkMny = input.ReadFloat();
            break;
          }
          case 2437: {
            OpnTheoEdge = input.ReadFloat();
            break;
          }
          case 2461: {
            PosTheoEdge = input.ReadFloat();
            break;
          }
          case 2485: {
            TVolMove = input.ReadFloat();
            break;
          }
          case 2509: {
            TEdgeMove = input.ReadFloat();
            break;
          }
          case 2533: {
            TEdge = input.ReadFloat();
            break;
          }
          case 2557: {
            OpnPnlDe = input.ReadFloat();
            break;
          }
          case 2581: {
            OpnPnlGa = input.ReadFloat();
            break;
          }
          case 2605: {
            OpnPnlTh = input.ReadFloat();
            break;
          }
          case 2629: {
            OpnPnlVe = input.ReadFloat();
            break;
          }
          case 2653: {
            OpnPnlVo = input.ReadFloat();
            break;
          }
          case 2677: {
            OpnPnlVa = input.ReadFloat();
            break;
          }
          case 2701: {
            OpnPnlSl = input.ReadFloat();
            break;
          }
          case 2725: {
            OpnPnlRate = input.ReadFloat();
            break;
          }
          case 2749: {
            OpnPnlSDiv = input.ReadFloat();
            break;
          }
          case 2773: {
            OpnPnlDDiv = input.ReadFloat();
            break;
          }
          case 2797: {
            OpnPnlErr = input.ReadFloat();
            break;
          }
          case 2821: {
            OpnEdgeChange = input.ReadFloat();
            break;
          }
          case 2845: {
            PosDelta = input.ReadFloat();
            break;
          }
          case 2869: {
            PosDDelta = input.ReadFloat();
            break;
          }
          case 2893: {
            PosDBeta = input.ReadFloat();
            break;
          }
          case 2917: {
            PosGamma = input.ReadFloat();
            break;
          }
          case 2941: {
            PosDGamma = input.ReadFloat();
            break;
          }
          case 2965: {
            PosVega = input.ReadFloat();
            break;
          }
          case 2989: {
            PosWVega = input.ReadFloat();
            break;
          }
          case 3013: {
            PosTVega = input.ReadFloat();
            break;
          }
          case 3037: {
            PosWtVega = input.ReadFloat();
            break;
          }
          case 3061: {
            PosVolga = input.ReadFloat();
            break;
          }
          case 3085: {
            PosVanna = input.ReadFloat();
            break;
          }
          case 3109: {
            PosTheta = input.ReadFloat();
            break;
          }
          case 3133: {
            PosRho = input.ReadFloat();
            break;
          }
          case 3157: {
            PosPhi = input.ReadFloat();
            break;
          }
          case 3181: {
            PosNotional = input.ReadFloat();
            break;
          }
          case 3205: {
            PosMktValue = input.ReadFloat();
            break;
          }
          case 3229: {
            PosPremOPar = input.ReadFloat();
            break;
          }
          case 3253: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 3277: {
            SymVol = input.ReadFloat();
            break;
          }
          case 3301: {
            SrSlope = input.ReadFloat();
            break;
          }
          case 3325: {
            PrcSVol = input.ReadFloat();
            break;
          }
          case 3349: {
            PrcTOpx = input.ReadFloat();
            break;
          }
          case 3373: {
            PrcYOpx = input.ReadFloat();
            break;
          }
          case 3397: {
            PrcUPrc = input.ReadFloat();
            break;
          }
          case 3421: {
            PrcYears = input.ReadFloat();
            break;
          }
          case 3445: {
            PrcRate = input.ReadFloat();
            break;
          }
          case 3469: {
            PrcSdiv = input.ReadFloat();
            break;
          }
          case 3493: {
            PrcDdiv = input.ReadFloat();
            break;
          }
          case 3517: {
            UPrcRatio = input.ReadFloat();
            break;
          }
          case 3541: {
            UPrcMove = input.ReadFloat();
            break;
          }
          case 3565: {
            IVolMove = input.ReadFloat();
            break;
          }
          case 3589: {
            ExDivAmt = input.ReadFloat();
            break;
          }
          case 3613: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 3632: {
            ModelType = input.ReadInt32();
            break;
          }
          case 3656: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 3680: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 3709: {
            PointValue = input.ReadFloat();
            break;
          }
          case 3728: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 3757: {
            TickValue = input.ReadFloat();
            break;
          }
          case 3776: {
            Multihedge = (global::Spiderrock.Protobuf.Multihedge) input.ReadEnum();
            break;
          }
          case 3802: {
            if (multihedgeSource_ == null) {
              MultihedgeSource = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(MultihedgeSource);
            break;
          }
          case 3829: {
            MultihedgePVRatio = input.ReadFloat();
            break;
          }
          case 3853: {
            SpanPrcIncUp = input.ReadFloat();
            break;
          }
          case 3877: {
            SpanPrcIncDn = input.ReadFloat();
            break;
          }
          case 3901: {
            SpanVolInc = input.ReadFloat();
            break;
          }
          case 3920: {
            PrcSpanType = (global::Spiderrock.Protobuf.SpanType) input.ReadEnum();
            break;
          }
          case 3944: {
            VolSpanType = (global::Spiderrock.Protobuf.SpanType) input.ReadEnum();
            break;
          }
          case 3968: {
            SpanPricingModel = (global::Spiderrock.Protobuf.SpanPricingModel) input.ReadEnum();
            break;
          }
          case 3992: {
            MarginType = (global::Spiderrock.Protobuf.MarginType) input.ReadEnum();
            break;
          }
          case 4018: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 4029: {
            PosHDelta = input.ReadFloat();
            break;
          }
          case 4037: {
            PosHDDelta = input.ReadFloat();
            break;
          }
          case 4045: {
            PosHGamma = input.ReadFloat();
            break;
          }
          case 4053: {
            PosHDGaamma = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RiskCubeDetailV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.RiskCubeDetailV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        /// <summary>
        /// SR Accnt
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 11;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 12;
        private global::Spiderrock.Protobuf.SecType secType_ = global::Spiderrock.Protobuf.SecType.Unspecified;
        /// <summary>
        /// [Call, Put, Stock, Future, Cash]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SecType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 13;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 14;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 15;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SecType.Unspecified) hash ^= SecType.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SecType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SecType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SecType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SecType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SecType) input.ReadEnum();
                break;
              }
              case 106: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 112: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 122: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SecType) input.ReadEnum();
                break;
              }
              case 106: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 112: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 122: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
