// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptExchAuction/SpdrAuctionState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptExchAuction/SpdrAuctionState.proto</summary>
  public static partial class SpdrAuctionStateReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptExchAuction/SpdrAuctionState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrAuctionStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9PcHRFeGNoQXVjdGlvbi9TcGRyQXVjdGlvblN0YXRlLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKsDQoQU3Bk",
            "ckF1Y3Rpb25TdGF0ZRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjgKBHBrZXkYAiABKAsyKi5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJBdWN0aW9uU3RhdGUuUEtleRIVCg1zcl9hdWN0",
            "aW9uX2lEGGQgASgDEhcKD2V4Y2hfYXVjdGlvbl9pZBhnIAEoCRIZChFleGNo",
            "X2F1Y3Rpb25fdHlwZRhqIAEoCRIzCg9pc190ZXN0X2F1Y3Rpb24YbSABKA4y",
            "Gi5zcGlkZXJyb2NrLnByb3RvYnVmLlllc05vEjgKDWF1Y3Rpb25fZXZlbnQY",
            "cCABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLkF1Y3Rpb25FdmVudBI3Cg1h",
            "dWN0aW9uX3NoYXBlGHMgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5Ob3Rp",
            "Y2VTaGFwZRI2CgxhdWN0aW9uX3R5cGUYdiABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLkF1Y3Rpb25UeXBlEjIKDGF1Y3Rpb25fc2lkZRh5IAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBIUCgxhdWN0aW9uX3NpemUYfCAB",
            "KAUSFQoNYXVjdGlvbl9wcmljZRh/IAEoARI7ChZpc19hdWN0aW9uX3ByaWNl",
            "X3ZhbGlkGIIBIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8SGQoQ",
            "YXVjdGlvbl9kdXJhdGlvbhiFASABKAUSGwoSYXVjdGlvbl9zdGFydF9zaXpl",
            "GIgBIAEoBRIcChNhdWN0aW9uX3N0YXJ0X3ByaWNlGIsBIAEoARIgChdhdWN0",
            "aW9uX3N0YXJ0X3RpbWVzdGFtcBiOASABKAMSGgoRbWluX3Jlc3BvbnNlX3Np",
            "emUYkQEgASgFEjoKCmxpbWl0X3R5cGUYlAEgASgOMiUuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5BdWN0aW9uTGltaXRUeXBlEjEKCWZpcm1fdHlwZRiXASABKA4y",
            "HS5zcGlkZXJyb2NrLnByb3RvYnVmLkZpcm1UeXBlEhQKC21lbWJlcl9tUElE",
            "GJoBIAEoCRIVCgxjbGllbnRfYWNjbnQYnQEgASgJEhUKDG90aGVyX2RldGFp",
            "bBigASABKAkSFQoMbWF0Y2hlZF9zaXplGKMBIAEoBRIUCgtudW1fdXBkYXRl",
            "cximASABKAUSFgoNbnVtX3Jlc3BvbnNlcxipASABKAUSGwoSYmVzdF9yZXNw",
            "b25zZV9zaXplGKwBIAEoBRIcChNiZXN0X3Jlc3BvbnNlX3ByaWNlGK8BIAEo",
            "ARIaChFjdW1fZmlsbF9xdWFudGl0eRiyASABKAUSFwoOYXZnX2ZpbGxfcHJp",
            "Y2UYtQEgASgBEjkKDW1hcmtldF9zdGF0dXMYuAEgASgOMiEuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NYXJrZXRTdGF0dXMSFgoNc3JjX3RpbWVzdGFtcBi7ASAB",
            "KAMSFgoNbmV0X3RpbWVzdGFtcBi+ASABKAMSFgoNZGd3X3RpbWVzdGFtcBjB",
            "ASABKAMSLgoJdGltZXN0YW1wGMQBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASOQoEbGVncxjHASADKAsyKi5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlNwZHJBdWN0aW9uU3RhdGUuTGVncxq4AQoEUEtleRIvCgdzZWNfa2V5GAog",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSMgoIc2VjX3R5",
            "cGUYCyABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEjIK",
            "DGF1Y3Rpb25fZXhjaBgMIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0",
            "RXhjaBIXCg9hdWN0aW9uX2V4X2Rlc3QYDSABKAkaugEKBExlZ3MSNAoLbGVn",
            "X3NlY19rZXkYygEgASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25L",
            "ZXkSNwoMbGVnX3NlY190eXBlGM0BIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3BkcktleVR5cGUSLwoIbGVnX3NpZGUY0AEgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5CdXlTZWxsEhIKCWxlZ19yYXRpbxjTASABKA1iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionState), global::Spiderrock.Protobuf.SpdrAuctionState.Parser, new[]{ "Meta", "Pkey", "SrAuctionID", "ExchAuctionId", "ExchAuctionType", "IsTestAuction", "AuctionEvent", "AuctionShape", "AuctionType", "AuctionSide", "AuctionSize", "AuctionPrice", "IsAuctionPriceValid", "AuctionDuration", "AuctionStartSize", "AuctionStartPrice", "AuctionStartTimestamp", "MinResponseSize", "LimitType", "FirmType", "MemberMPID", "ClientAccnt", "OtherDetail", "MatchedSize", "NumUpdates", "NumResponses", "BestResponseSize", "BestResponsePrice", "CumFillQuantity", "AvgFillPrice", "MarketStatus", "SrcTimestamp", "NetTimestamp", "DgwTimestamp", "Timestamp", "Legs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey), global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey.Parser, new[]{ "SecKey", "SecType", "AuctionExch", "AuctionExDest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs), global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs.Parser, new[]{ "LegSecKey", "LegSecType", "LegSide", "LegRatio" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpdrAuctionState : pb::IMessage<SpdrAuctionState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrAuctionState> _parser = new pb::MessageParser<SpdrAuctionState>(() => new SpdrAuctionState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrAuctionState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrAuctionStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionState(SpdrAuctionState other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      srAuctionID_ = other.srAuctionID_;
      exchAuctionId_ = other.exchAuctionId_;
      exchAuctionType_ = other.exchAuctionType_;
      isTestAuction_ = other.isTestAuction_;
      auctionEvent_ = other.auctionEvent_;
      auctionShape_ = other.auctionShape_;
      auctionType_ = other.auctionType_;
      auctionSide_ = other.auctionSide_;
      auctionSize_ = other.auctionSize_;
      auctionPrice_ = other.auctionPrice_;
      isAuctionPriceValid_ = other.isAuctionPriceValid_;
      auctionDuration_ = other.auctionDuration_;
      auctionStartSize_ = other.auctionStartSize_;
      auctionStartPrice_ = other.auctionStartPrice_;
      auctionStartTimestamp_ = other.auctionStartTimestamp_;
      minResponseSize_ = other.minResponseSize_;
      limitType_ = other.limitType_;
      firmType_ = other.firmType_;
      memberMPID_ = other.memberMPID_;
      clientAccnt_ = other.clientAccnt_;
      otherDetail_ = other.otherDetail_;
      matchedSize_ = other.matchedSize_;
      numUpdates_ = other.numUpdates_;
      numResponses_ = other.numResponses_;
      bestResponseSize_ = other.bestResponseSize_;
      bestResponsePrice_ = other.bestResponsePrice_;
      cumFillQuantity_ = other.cumFillQuantity_;
      avgFillPrice_ = other.avgFillPrice_;
      marketStatus_ = other.marketStatus_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      dgwTimestamp_ = other.dgwTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      legs_ = other.legs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionState Clone() {
      return new SpdrAuctionState(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sr_auction_iD" field.</summary>
    public const int SrAuctionIDFieldNumber = 100;
    private long srAuctionID_;
    /// <summary>
    /// unique SR AUCTION ID (required when responding to an auction notice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrAuctionID {
      get { return srAuctionID_; }
      set {
        srAuctionID_ = value;
      }
    }

    /// <summary>Field number for the "exch_auction_id" field.</summary>
    public const int ExchAuctionIdFieldNumber = 103;
    private string exchAuctionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchAuctionId {
      get { return exchAuctionId_; }
      set {
        exchAuctionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exch_auction_type" field.</summary>
    public const int ExchAuctionTypeFieldNumber = 106;
    private string exchAuctionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchAuctionType {
      get { return exchAuctionType_; }
      set {
        exchAuctionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_test_auction" field.</summary>
    public const int IsTestAuctionFieldNumber = 109;
    private global::Spiderrock.Protobuf.YesNo isTestAuction_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// test auction (should only respond from T.accnts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsTestAuction {
      get { return isTestAuction_; }
      set {
        isTestAuction_ = value;
      }
    }

    /// <summary>Field number for the "auction_event" field.</summary>
    public const int AuctionEventFieldNumber = 112;
    private global::Spiderrock.Protobuf.AuctionEvent auctionEvent_ = global::Spiderrock.Protobuf.AuctionEvent.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionEvent AuctionEvent {
      get { return auctionEvent_; }
      set {
        auctionEvent_ = value;
      }
    }

    /// <summary>Field number for the "auction_shape" field.</summary>
    public const int AuctionShapeFieldNumber = 115;
    private global::Spiderrock.Protobuf.NoticeShape auctionShape_ = global::Spiderrock.Protobuf.NoticeShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.NoticeShape AuctionShape {
      get { return auctionShape_; }
      set {
        auctionShape_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 118;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_side" field.</summary>
    public const int AuctionSideFieldNumber = 121;
    private global::Spiderrock.Protobuf.BuySell auctionSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell AuctionSide {
      get { return auctionSide_; }
      set {
        auctionSide_ = value;
      }
    }

    /// <summary>Field number for the "auction_size" field.</summary>
    public const int AuctionSizeFieldNumber = 124;
    private int auctionSize_;
    /// <summary>
    /// size available to trade
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionSize {
      get { return auctionSize_; }
      set {
        auctionSize_ = value;
      }
    }

    /// <summary>Field number for the "auction_price" field.</summary>
    public const int AuctionPriceFieldNumber = 127;
    private double auctionPrice_;
    /// <summary>
    /// auction price (can be positive or negative)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionPrice {
      get { return auctionPrice_; }
      set {
        auctionPrice_ = value;
      }
    }

    /// <summary>Field number for the "is_auction_price_valid" field.</summary>
    public const int IsAuctionPriceValidFieldNumber = 130;
    private global::Spiderrock.Protobuf.YesNo isAuctionPriceValid_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsAuctionPriceValid {
      get { return isAuctionPriceValid_; }
      set {
        isAuctionPriceValid_ = value;
      }
    }

    /// <summary>Field number for the "auction_duration" field.</summary>
    public const int AuctionDurationFieldNumber = 133;
    private int auctionDuration_;
    /// <summary>
    /// expected auction / imbalance action duration (ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionDuration {
      get { return auctionDuration_; }
      set {
        auctionDuration_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_size" field.</summary>
    public const int AuctionStartSizeFieldNumber = 136;
    private int auctionStartSize_;
    /// <summary>
    /// initial (starting) auction size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionStartSize {
      get { return auctionStartSize_; }
      set {
        auctionStartSize_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_price" field.</summary>
    public const int AuctionStartPriceFieldNumber = 139;
    private double auctionStartPrice_;
    /// <summary>
    /// initial (starting) auction price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionStartPrice {
      get { return auctionStartPrice_; }
      set {
        auctionStartPrice_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_timestamp" field.</summary>
    public const int AuctionStartTimestampFieldNumber = 142;
    private long auctionStartTimestamp_;
    /// <summary>
    /// auction start timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AuctionStartTimestamp {
      get { return auctionStartTimestamp_; }
      set {
        auctionStartTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "min_response_size" field.</summary>
    public const int MinResponseSizeFieldNumber = 145;
    private int minResponseSize_;
    /// <summary>
    /// minimum size of the response order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinResponseSize {
      get { return minResponseSize_; }
      set {
        minResponseSize_ = value;
      }
    }

    /// <summary>Field number for the "limit_type" field.</summary>
    public const int LimitTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.AuctionLimitType limitType_ = global::Spiderrock.Protobuf.AuctionLimitType.Unspecified;
    /// <summary>
    /// client / imbalance limit type (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionLimitType LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 151;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// firm type of the client side of auction (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "member_mPID" field.</summary>
    public const int MemberMPIDFieldNumber = 154;
    private string memberMPID_ = "";
    /// <summary>
    /// exchange member initiating auction (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MemberMPID {
      get { return memberMPID_; }
      set {
        memberMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_accnt" field.</summary>
    public const int ClientAccntFieldNumber = 157;
    private string clientAccnt_ = "";
    /// <summary>
    /// client account designation (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientAccnt {
      get { return clientAccnt_; }
      set {
        clientAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_detail" field.</summary>
    public const int OtherDetailFieldNumber = 160;
    private string otherDetail_ = "";
    /// <summary>
    /// additional auction detail (exchange specific)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OtherDetail {
      get { return otherDetail_; }
      set {
        otherDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matched_size" field.</summary>
    public const int MatchedSizeFieldNumber = 163;
    private int matchedSize_;
    /// <summary>
    /// size already matched (may still be available to trade at a better price)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MatchedSize {
      get { return matchedSize_; }
      set {
        matchedSize_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 166;
    private int numUpdates_;
    /// <summary>
    /// number of auction updates received (not counting auction termination message)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "num_responses" field.</summary>
    public const int NumResponsesFieldNumber = 169;
    private int numResponses_;
    /// <summary>
    /// as reported by exchange (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumResponses {
      get { return numResponses_; }
      set {
        numResponses_ = value;
      }
    }

    /// <summary>Field number for the "best_response_size" field.</summary>
    public const int BestResponseSizeFieldNumber = 172;
    private int bestResponseSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BestResponseSize {
      get { return bestResponseSize_; }
      set {
        bestResponseSize_ = value;
      }
    }

    /// <summary>Field number for the "best_response_price" field.</summary>
    public const int BestResponsePriceFieldNumber = 175;
    private double bestResponsePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BestResponsePrice {
      get { return bestResponsePrice_; }
      set {
        bestResponsePrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quantity" field.</summary>
    public const int CumFillQuantityFieldNumber = 178;
    private int cumFillQuantity_;
    /// <summary>
    /// as reported by exchange (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuantity {
      get { return cumFillQuantity_; }
      set {
        cumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price" field.</summary>
    public const int AvgFillPriceFieldNumber = 181;
    private double avgFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "market_status" field.</summary>
    public const int MarketStatusFieldNumber = 184;
    private global::Spiderrock.Protobuf.MarketStatus marketStatus_ = global::Spiderrock.Protobuf.MarketStatus.Unspecified;
    /// <summary>
    /// market status (pre-open, open, closed, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketStatus MarketStatus {
      get { return marketStatus_; }
      set {
        marketStatus_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 187;
    private long srcTimestamp_;
    /// <summary>
    /// source timestamp (nanoseconds) if available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 190;
    private long netTimestamp_;
    /// <summary>
    /// network timestamp message arrival @ direct exchange gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "dgw_timestamp" field.</summary>
    public const int DgwTimestampFieldNumber = 193;
    private long dgwTimestamp_;
    /// <summary>
    /// network timestamp mbus message send @ direct exchange gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DgwTimestamp {
      get { return dgwTimestamp_; }
      set {
        dgwTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "legs" field.</summary>
    public const int LegsFieldNumber = 199;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs> _repeated_legs_codec
        = pb::FieldCodec.ForMessage(1594, global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs> legs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionState.Types.Legs> Legs {
      get { return legs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrAuctionState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrAuctionState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SrAuctionID != other.SrAuctionID) return false;
      if (ExchAuctionId != other.ExchAuctionId) return false;
      if (ExchAuctionType != other.ExchAuctionType) return false;
      if (IsTestAuction != other.IsTestAuction) return false;
      if (AuctionEvent != other.AuctionEvent) return false;
      if (AuctionShape != other.AuctionShape) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionSide != other.AuctionSide) return false;
      if (AuctionSize != other.AuctionSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionPrice, other.AuctionPrice)) return false;
      if (IsAuctionPriceValid != other.IsAuctionPriceValid) return false;
      if (AuctionDuration != other.AuctionDuration) return false;
      if (AuctionStartSize != other.AuctionStartSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionStartPrice, other.AuctionStartPrice)) return false;
      if (AuctionStartTimestamp != other.AuctionStartTimestamp) return false;
      if (MinResponseSize != other.MinResponseSize) return false;
      if (LimitType != other.LimitType) return false;
      if (FirmType != other.FirmType) return false;
      if (MemberMPID != other.MemberMPID) return false;
      if (ClientAccnt != other.ClientAccnt) return false;
      if (OtherDetail != other.OtherDetail) return false;
      if (MatchedSize != other.MatchedSize) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if (NumResponses != other.NumResponses) return false;
      if (BestResponseSize != other.BestResponseSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BestResponsePrice, other.BestResponsePrice)) return false;
      if (CumFillQuantity != other.CumFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (MarketStatus != other.MarketStatus) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (DgwTimestamp != other.DgwTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!legs_.Equals(other.legs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SrAuctionID != 0L) hash ^= SrAuctionID.GetHashCode();
      if (ExchAuctionId.Length != 0) hash ^= ExchAuctionId.GetHashCode();
      if (ExchAuctionType.Length != 0) hash ^= ExchAuctionType.GetHashCode();
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsTestAuction.GetHashCode();
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) hash ^= AuctionEvent.GetHashCode();
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) hash ^= AuctionShape.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= AuctionSide.GetHashCode();
      if (AuctionSize != 0) hash ^= AuctionSize.GetHashCode();
      if (AuctionPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionPrice);
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsAuctionPriceValid.GetHashCode();
      if (AuctionDuration != 0) hash ^= AuctionDuration.GetHashCode();
      if (AuctionStartSize != 0) hash ^= AuctionStartSize.GetHashCode();
      if (AuctionStartPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionStartPrice);
      if (AuctionStartTimestamp != 0L) hash ^= AuctionStartTimestamp.GetHashCode();
      if (MinResponseSize != 0) hash ^= MinResponseSize.GetHashCode();
      if (LimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) hash ^= LimitType.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (MemberMPID.Length != 0) hash ^= MemberMPID.GetHashCode();
      if (ClientAccnt.Length != 0) hash ^= ClientAccnt.GetHashCode();
      if (OtherDetail.Length != 0) hash ^= OtherDetail.GetHashCode();
      if (MatchedSize != 0) hash ^= MatchedSize.GetHashCode();
      if (NumUpdates != 0) hash ^= NumUpdates.GetHashCode();
      if (NumResponses != 0) hash ^= NumResponses.GetHashCode();
      if (BestResponseSize != 0) hash ^= BestResponseSize.GetHashCode();
      if (BestResponsePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BestResponsePrice);
      if (CumFillQuantity != 0) hash ^= CumFillQuantity.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) hash ^= MarketStatus.GetHashCode();
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (DgwTimestamp != 0L) hash ^= DgwTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= legs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SrAuctionID != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ExchAuctionType);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionEvent);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) AuctionSide);
      }
      if (AuctionSize != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(AuctionPrice);
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(AuctionDuration);
      }
      if (AuctionStartSize != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(AuctionStartPrice);
      }
      if (AuctionStartTimestamp != 0L) {
        output.WriteRawTag(240, 8);
        output.WriteInt64(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(MinResponseSize);
      }
      if (LimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) LimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(OtherDetail);
      }
      if (MatchedSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(MatchedSize);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(NumUpdates);
      }
      if (NumResponses != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(NumResponses);
      }
      if (BestResponseSize != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(BestResponsePrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(AvgFillPrice);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) MarketStatus);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(216, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(240, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        output.WriteRawTag(136, 12);
        output.WriteInt64(DgwTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      legs_.WriteTo(output, _repeated_legs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SrAuctionID != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ExchAuctionType);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) IsTestAuction);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionEvent);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) AuctionSide);
      }
      if (AuctionSize != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(AuctionPrice);
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(144, 8);
        output.WriteEnum((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(AuctionDuration);
      }
      if (AuctionStartSize != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(AuctionStartPrice);
      }
      if (AuctionStartTimestamp != 0L) {
        output.WriteRawTag(240, 8);
        output.WriteInt64(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(MinResponseSize);
      }
      if (LimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) LimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteString(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(OtherDetail);
      }
      if (MatchedSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(MatchedSize);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(NumUpdates);
      }
      if (NumResponses != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(NumResponses);
      }
      if (BestResponseSize != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(BestResponsePrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(169, 11);
        output.WriteDouble(AvgFillPrice);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) MarketStatus);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(216, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(240, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        output.WriteRawTag(136, 12);
        output.WriteInt64(DgwTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      legs_.WriteTo(ref output, _repeated_legs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SrAuctionID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchAuctionType);
      }
      if (IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsTestAuction);
      }
      if (AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionEvent);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSide);
      }
      if (AuctionSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        size += 2 + 8;
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionDuration);
      }
      if (AuctionStartSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        size += 2 + 8;
      }
      if (AuctionStartTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinResponseSize);
      }
      if (LimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OtherDetail);
      }
      if (MatchedSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchedSize);
      }
      if (NumUpdates != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpdates);
      }
      if (NumResponses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumResponses);
      }
      if (BestResponseSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        size += 2 + 8;
      }
      if (CumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketStatus);
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DgwTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += legs_.CalculateSize(_repeated_legs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrAuctionState other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SrAuctionID != 0L) {
        SrAuctionID = other.SrAuctionID;
      }
      if (other.ExchAuctionId.Length != 0) {
        ExchAuctionId = other.ExchAuctionId;
      }
      if (other.ExchAuctionType.Length != 0) {
        ExchAuctionType = other.ExchAuctionType;
      }
      if (other.IsTestAuction != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsTestAuction = other.IsTestAuction;
      }
      if (other.AuctionEvent != global::Spiderrock.Protobuf.AuctionEvent.Unspecified) {
        AuctionEvent = other.AuctionEvent;
      }
      if (other.AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        AuctionShape = other.AuctionShape;
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        AuctionSide = other.AuctionSide;
      }
      if (other.AuctionSize != 0) {
        AuctionSize = other.AuctionSize;
      }
      if (other.AuctionPrice != 0D) {
        AuctionPrice = other.AuctionPrice;
      }
      if (other.IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsAuctionPriceValid = other.IsAuctionPriceValid;
      }
      if (other.AuctionDuration != 0) {
        AuctionDuration = other.AuctionDuration;
      }
      if (other.AuctionStartSize != 0) {
        AuctionStartSize = other.AuctionStartSize;
      }
      if (other.AuctionStartPrice != 0D) {
        AuctionStartPrice = other.AuctionStartPrice;
      }
      if (other.AuctionStartTimestamp != 0L) {
        AuctionStartTimestamp = other.AuctionStartTimestamp;
      }
      if (other.MinResponseSize != 0) {
        MinResponseSize = other.MinResponseSize;
      }
      if (other.LimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        LimitType = other.LimitType;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.MemberMPID.Length != 0) {
        MemberMPID = other.MemberMPID;
      }
      if (other.ClientAccnt.Length != 0) {
        ClientAccnt = other.ClientAccnt;
      }
      if (other.OtherDetail.Length != 0) {
        OtherDetail = other.OtherDetail;
      }
      if (other.MatchedSize != 0) {
        MatchedSize = other.MatchedSize;
      }
      if (other.NumUpdates != 0) {
        NumUpdates = other.NumUpdates;
      }
      if (other.NumResponses != 0) {
        NumResponses = other.NumResponses;
      }
      if (other.BestResponseSize != 0) {
        BestResponseSize = other.BestResponseSize;
      }
      if (other.BestResponsePrice != 0D) {
        BestResponsePrice = other.BestResponsePrice;
      }
      if (other.CumFillQuantity != 0) {
        CumFillQuantity = other.CumFillQuantity;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        MarketStatus = other.MarketStatus;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.DgwTimestamp != 0L) {
        DgwTimestamp = other.DgwTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      legs_.Add(other.legs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SrAuctionID = input.ReadInt64();
            break;
          }
          case 826: {
            ExchAuctionId = input.ReadString();
            break;
          }
          case 850: {
            ExchAuctionType = input.ReadString();
            break;
          }
          case 872: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionShape = (global::Spiderrock.Protobuf.NoticeShape) input.ReadEnum();
            break;
          }
          case 944: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 968: {
            AuctionSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 992: {
            AuctionSize = input.ReadInt32();
            break;
          }
          case 1017: {
            AuctionPrice = input.ReadDouble();
            break;
          }
          case 1040: {
            IsAuctionPriceValid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1064: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1088: {
            AuctionStartSize = input.ReadInt32();
            break;
          }
          case 1113: {
            AuctionStartPrice = input.ReadDouble();
            break;
          }
          case 1136: {
            AuctionStartTimestamp = input.ReadInt64();
            break;
          }
          case 1160: {
            MinResponseSize = input.ReadInt32();
            break;
          }
          case 1184: {
            LimitType = (global::Spiderrock.Protobuf.AuctionLimitType) input.ReadEnum();
            break;
          }
          case 1208: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1234: {
            MemberMPID = input.ReadString();
            break;
          }
          case 1258: {
            ClientAccnt = input.ReadString();
            break;
          }
          case 1282: {
            OtherDetail = input.ReadString();
            break;
          }
          case 1304: {
            MatchedSize = input.ReadInt32();
            break;
          }
          case 1328: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 1352: {
            NumResponses = input.ReadInt32();
            break;
          }
          case 1376: {
            BestResponseSize = input.ReadInt32();
            break;
          }
          case 1401: {
            BestResponsePrice = input.ReadDouble();
            break;
          }
          case 1424: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1449: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1472: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 1496: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1520: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1544: {
            DgwTimestamp = input.ReadInt64();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1594: {
            legs_.AddEntriesFrom(input, _repeated_legs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAuctionState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SrAuctionID = input.ReadInt64();
            break;
          }
          case 826: {
            ExchAuctionId = input.ReadString();
            break;
          }
          case 850: {
            ExchAuctionType = input.ReadString();
            break;
          }
          case 872: {
            IsTestAuction = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionEvent = (global::Spiderrock.Protobuf.AuctionEvent) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionShape = (global::Spiderrock.Protobuf.NoticeShape) input.ReadEnum();
            break;
          }
          case 944: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 968: {
            AuctionSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 992: {
            AuctionSize = input.ReadInt32();
            break;
          }
          case 1017: {
            AuctionPrice = input.ReadDouble();
            break;
          }
          case 1040: {
            IsAuctionPriceValid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1064: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1088: {
            AuctionStartSize = input.ReadInt32();
            break;
          }
          case 1113: {
            AuctionStartPrice = input.ReadDouble();
            break;
          }
          case 1136: {
            AuctionStartTimestamp = input.ReadInt64();
            break;
          }
          case 1160: {
            MinResponseSize = input.ReadInt32();
            break;
          }
          case 1184: {
            LimitType = (global::Spiderrock.Protobuf.AuctionLimitType) input.ReadEnum();
            break;
          }
          case 1208: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1234: {
            MemberMPID = input.ReadString();
            break;
          }
          case 1258: {
            ClientAccnt = input.ReadString();
            break;
          }
          case 1282: {
            OtherDetail = input.ReadString();
            break;
          }
          case 1304: {
            MatchedSize = input.ReadInt32();
            break;
          }
          case 1328: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 1352: {
            NumResponses = input.ReadInt32();
            break;
          }
          case 1376: {
            BestResponseSize = input.ReadInt32();
            break;
          }
          case 1401: {
            BestResponsePrice = input.ReadDouble();
            break;
          }
          case 1424: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1449: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1472: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 1496: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1520: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1544: {
            DgwTimestamp = input.ReadInt64();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1594: {
            legs_.AddEntriesFrom(ref input, _repeated_legs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrAuctionState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAuctionState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          auctionExch_ = other.auctionExch_;
          auctionExDest_ = other.auctionExDest_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "auction_exch" field.</summary>
        public const int AuctionExchFieldNumber = 12;
        private global::Spiderrock.Protobuf.OptExch auctionExch_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
        /// <summary>
        /// exchange handling the auction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptExch AuctionExch {
          get { return auctionExch_; }
          set {
            auctionExch_ = value;
          }
        }

        /// <summary>Field number for the "auction_ex_dest" field.</summary>
        public const int AuctionExDestFieldNumber = 13;
        private string auctionExDest_ = "";
        /// <summary>
        /// external exDest of auction (usually means auction is off-exchange)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AuctionExDest {
          get { return auctionExDest_; }
          set {
            auctionExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (AuctionExch != other.AuctionExch) return false;
          if (AuctionExDest != other.AuctionExDest) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= AuctionExch.GetHashCode();
          if (AuctionExDest.Length != 0) hash ^= AuctionExDest.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(AuctionExDest);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(AuctionExDest);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuctionExDest);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            AuctionExch = other.AuctionExch;
          }
          if (other.AuctionExDest.Length != 0) {
            AuctionExDest = other.AuctionExDest;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 96: {
                AuctionExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 106: {
                AuctionExDest = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 96: {
                AuctionExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 106: {
                AuctionExDest = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Legs : pb::IMessage<Legs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Legs> _parser = new pb::MessageParser<Legs>(() => new Legs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Legs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAuctionState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs(Legs other) : this() {
          legSecKey_ = other.legSecKey_ != null ? other.legSecKey_.Clone() : null;
          legSecType_ = other.legSecType_;
          legSide_ = other.legSide_;
          legRatio_ = other.legRatio_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs Clone() {
          return new Legs(this);
        }

        /// <summary>Field number for the "leg_sec_key" field.</summary>
        public const int LegSecKeyFieldNumber = 202;
        private global::Spiderrock.Protobuf.OptionKey legSecKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey LegSecKey {
          get { return legSecKey_; }
          set {
            legSecKey_ = value;
          }
        }

        /// <summary>Field number for the "leg_sec_type" field.</summary>
        public const int LegSecTypeFieldNumber = 205;
        private global::Spiderrock.Protobuf.SpdrKeyType legSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType LegSecType {
          get { return legSecType_; }
          set {
            legSecType_ = value;
          }
        }

        /// <summary>Field number for the "leg_side" field.</summary>
        public const int LegSideFieldNumber = 208;
        private global::Spiderrock.Protobuf.BuySell legSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell LegSide {
          get { return legSide_; }
          set {
            legSide_ = value;
          }
        }

        /// <summary>Field number for the "leg_ratio" field.</summary>
        public const int LegRatioFieldNumber = 211;
        private uint legRatio_;
        /// <summary>
        /// leg ratio (1, 2, etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint LegRatio {
          get { return legRatio_; }
          set {
            legRatio_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Legs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Legs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LegSecKey, other.LegSecKey)) return false;
          if (LegSecType != other.LegSecType) return false;
          if (LegSide != other.LegSide) return false;
          if (LegRatio != other.LegRatio) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (legSecKey_ != null) hash ^= LegSecKey.GetHashCode();
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= LegSecType.GetHashCode();
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LegSide.GetHashCode();
          if (LegRatio != 0) hash ^= LegRatio.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (legSecKey_ != null) {
            output.WriteRawTag(210, 12);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(232, 12);
            output.WriteEnum((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(128, 13);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(152, 13);
            output.WriteUInt32(LegRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (legSecKey_ != null) {
            output.WriteRawTag(210, 12);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(232, 12);
            output.WriteEnum((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(128, 13);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(152, 13);
            output.WriteUInt32(LegRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (legSecKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSide);
          }
          if (LegRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegRatio);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Legs other) {
          if (other == null) {
            return;
          }
          if (other.legSecKey_ != null) {
            if (legSecKey_ == null) {
              LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            LegSecKey.MergeFrom(other.LegSecKey);
          }
          if (other.LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            LegSecType = other.LegSecType;
          }
          if (other.LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            LegSide = other.LegSide;
          }
          if (other.LegRatio != 0) {
            LegRatio = other.LegRatio;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1618: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1640: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1664: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1688: {
                LegRatio = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1618: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1640: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1664: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1688: {
                LegRatio = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
