syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message LiveImpliedQuoteAdj {
    message PKey {
        
        OptionKey okey = 10;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float uprc = 103; // underlier price (usually mid-market)
    float years = 106; // years to expiration
    float rate = 109; // interest rate
    float sdiv = 112; // sdiv (stock dividend) rate
    float ddiv = 115; // cumulative discrete dividend values
    float obid = 118; // option bid price
    float oask = 121; // option ask price
    float obiv = 124; // volatility implied by option bid price
    float oaiv = 127; // volatility implied by option ask price
    float satm = 130; // option atm volatility (from SR surface)
    float smny = 133; // option moneyness
    float svol = 136; // option surface volatility
    float sprc = 139; // option surface price
    float smrk = 142; // option surface price (w/bounding rules)
    float ve_slope = 145; // veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant);hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    float de = 148; // option delta
    float ga = 151; // option gamma
    float th = 154; // option theta
    float ve = 157; // option vega
    float va = 160; // option vanna
    float vo = 163; // option volga
    float ro = 166; // option rho
    float ph = 169; // option phi
    float de_decay = 172; // option delta decay
    float up50 = 175; // underlier up 50% slide
    float dn50 = 178; // underlier dn 50% slide
    float up15 = 181; // underlier up 15% slide
    float dn15 = 184; // underlier dn 15% slide
    float up06 = 187; // underlier up 6% slide
    float dn08 = 190; // underlier dn 8% slide
    double syn_spot = 193; // Synthetic spot price (market-derived spot when the underlying is not a traded instrument)
    CalcPriceType price_type = 196; // Equity or Future (Black76) pricing framework;  if Future then uPrc is the forwardUPrc and sdiv = rate
    string calc_err = 199; // option pricing error (if any)
    CalcSource calc_source = 202;
    AdjResult u_prc_adj_result = 205;
    int64 src_timestamp = 209; // OPRA source timestamp (nanoseconds since epoch); will be zero if calcSource != Tick
    int64 net_timestamp = 210; // SR timestamp @ base data publish time
    google.protobuf.Timestamp timestamp = 208; // SR timestamp @ adj data computation time
}


