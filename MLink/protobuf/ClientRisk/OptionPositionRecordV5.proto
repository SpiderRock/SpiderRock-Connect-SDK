syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    OptionPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
    These records are published by a CoreRiskServer and represent the position and risk markup detail for a single option series.
    New records are published immediately when a position changes and about once per minute if no position has changed.
    Note that all records for a single underlier are published simultaneously and records for the same chain should have consistent marks.
*/    
message OptionPositionRecordV5 {
    message PKey {
        
        OptionKey okey = 10; // ends with '$n' if an MH allocation fraction (n = 1-N) [MMH segment number]
        string accnt = 11;
        DateKey trade_date = 12;
        RiskSession risk_session = 13;
        string client_firm = 14; // SR assigned client firm
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string risk_server_code = 103;
    string agg_group = 106; // SR assigned agg group
    ExpiryKey fkey = 109; // underlying future (if written on a future)
    TickerKey ticker = 112; // underlying ticker
    ExerciseType ex_type = 115;
    Multihedge multihedge = 118;
    TickerKey multihedge_source = 121; // MH Ticker Key (starts with '_') (if exists)
    float multihedge_pVRatio = 124; // pv multiplier (fraction of underlier value (uPerCn x uPrc) / SUM(uPerCn x uPrc) associated with this fragment
    OptionType option_type = 127;
    float cash_on_ex = 130; // cash on settlement (multihedge)
    float strike_ratio = 133; // strike ratio
    float u_prc_ratio = 136; // stock price multiplier
    int32 underliers_per_cn = 139; // underliers per contract
    UnderlierType underlier_type = 142; // type of underlier (affects $greek calculations)
    float tick_value = 145; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 148; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 151;
    PriceFormat price_format = 154; // option price display format code
    PriceFormat u_price_format = 157; // underlier price display format code
    double u_prc = 160; // current underlier price (any market session) (persists if market closed/halted)
    double u_bid = 163; // current underlier bid (any market session) (zero if market closed/halted)
    double u_ask = 166; // current underlier ask (any market session) (zero if market closed/halted)
    double u_mark = 169; // current underlier mark (usually mid market) (freezes at SR CloseMarkTime)
    UMarkSource u_mark_source = 172;
    float opt_bid = 175; // current option market bid (any market session) (zero if market closed/halted)
    float opt_ask = 178; // current option market ask (any market session) (zero if market closed/halted)
    double opt_mid_mark = 181; // current option mark (mid market) (freezes at SR CloseMarkTime)
    double opt_vol_mark = 184; // current option mark (volatility surface) (freezes at SR CloseMarkTime)
    double u_opn_mark = 187; // start-of-day SR underlier mark (rotated from prior day record) [corp action adjusted]
    double opt_opn_vol_mark = 190; // start-of-day SR vol mark [corp action adjusted]
    double opt_opn_mid_mark = 193; // start-of-day SR mid mark [corp action adjusted]
    double opt_opn_clr_mark = 196; // start-of-day clearing mark [should be corp action adjusted]
    int32 opt_opn_pos_prv = 199; // start-of-day SR contract position (rotated from prior day record) [corp action adjusted]
    int32 opt_opn_pos_clr = 202; // start-of-day CKR contract position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    int32 opt_opn_pos = 205; // start of period contract position (effective; can be from either CLR or SR)
    PositionSource opt_opn_pos_src = 208; // start of period position source
    int32 cn_bot = 211; // number of contracts bot today
    int32 cn_sld = 214; // number of contracts sld today
    int32 cn_opened = 217; // number of contracts opened today
    int32 cn_closed = 220; // number of contracts closed today
    float edge_opened = 223; // edge from opening trades (model #1)
    float edge_closed = 226; // edge from closing trades (model #1)
    float trd_delta = 229; // deltas from trades (fixed at the time of trade)
    float trd_gamma = 232; // gamma from trades (fixed at the time of trade)
    float trd_delta_mny = 235; // deltas x uPrc from trades (fixed at the time of trade)
    double opt_mny_bot = 238; // sum of settle cash for all buy executions
    double opt_mny_sld = 241; // sum of settle cash for all sell executions
    float day_pnl = 244;
    float dn_day_pnl = 247;
    float opn_pnl_mid_mark = 250;
    float opn_pnl_vol_mark = 253;
    float opn_pnl_clr_mark = 256;
    int32 cn_net_opn_pos = 259; // opening position (cnOpnPos) net of reversals/conversions
    int32 cn_net_cur_pos = 262; // current position (cnOpnPos + cnBot - cnSld) net of reversals/conversions
    float cn_atm_equiv = 265; // current position (atm equivalent contracts: (cnNetPos * ve / atmVega)
    float beta = 268; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 271;
    int32 div_days = 274; // days to the next dividend (0 = exDate is today, -1 = exDate is yesterday)
    HedgeDeltaRule hedge_delta_rule = 277; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    float binary_days = 280; // hedgeDelta = -1.0,-0.5,0,+0.5,+1.0 if less than binary days to expiration;usually [0.0 - 2.0]
    int32 days = 283; // days to expiration
    float years = 286; // years to expiration
    float rate = 289; // global rate to expiration (pricing)
    float sdiv = 292; // continuous stock div (pricing)
    float ddiv = 295; // present value of discrete dividends (pricing)
    float dadj = 298; // dadj frational dividend value; 1.0 except for some multihedge roots
    float atm_vol = 301; // live surface atm volatility
    float atm_vega = 304; // live surface atm vega
    float i_vol = 307; // surface volatility
    MarkSource i_vol_src = 310;
    float de = 313; // delta;(dOpx / dUPrc)
    float ga = 316; // gamma;(dDelta / dUPrc)
    float th = 319; // theta;(dOpx / dTime)
    float ve = 322; // vega;(dOpx / dVol)
    float rh = 325; // rho;(dOpx / dRate)
    float ph = 328; // phi;(dOpx / dSDiv)
    float vo = 331; // volga (SR surface)
    float va = 334; // vanna (SR surface)
    float de_decay = 337; // delta decay, charm, delta bleed; (dDelta/dTime)
    int32 err = 340; // computation error code (if any)
    float ve_slope = 343; // ivol correlation (veSlope = dVol / dUPrc) [can be either SR surface veSlope or client theo veSlope]
    float hedge_de = 346; // hedge delta (either ivol or tvol based;follows binary rules)
    float hedge_ga = 349; // hedge gamma (either ivol or tvol based;follows binary rules)
    float sr_slope = 352; // ivol correlation (srSlope = dVol / dUPrc) [always SR surface veSlope]
    YesNo is_binary = 355; // hedge delta/gamma has switched to 'binary'
    float prem_ov_par = 358; // premium over parity for the option position
    float xde = 361; // xdelta (C: +0.5 - de, P: -0.5 - de)
    float lo_bound = 364; // minimum no-arb opx (zero volatility given sdiv/ddiv/years/rate)
    float su90 = 367; // underlier up 90%, sticky delta
    float sd90 = 370; // underlier dn 90%, sticky delta
    float su50 = 373; // underlier up 50%, sticky delta
    float sd50 = 376; // underlier dn 50%, sticky delta
    float su15 = 379; // underlier up 15%, sticky delta
    float sd15 = 382; // underlier dn 15%, sticky delta
    float su10 = 385; // underlier up 10%, sticky delta
    float sd10 = 388; // underlier dn 10%, sticky delta
    float su06 = 391; // underlier up 6%, sticky delta
    float sd08 = 394; // underlier dn 8%, sticky delta
    float su05 = 397; // underlier up 5%, sticky delta
    float sd05 = 400; // underlier dn 5%, sticky delta
    float su1e = 403; // underlier up 1x implied earn move, vol ramp out, delta-neutral
    float sd1e = 406; // underlier dn 1x implied earn move, vol ramp out, delta-neutral
    float su2e = 409; // underlier up 2x implied earn move, vol ramp out, delta-neutral
    float sd2e = 412; // underlier dn 2x implied earn move, vol ramp out, delta-neutral
    float earn = 415; // vol earn ramp out (no underlier move)
    float cash = 418; // underlier up 30%, vol = 0.10, 6mn deal close
    string theo_model = 421; // theo model #1
    float t_vol = 424; // theo volatility
    float t_opx = 427; // theo price
    float t_bOpn_px = 430; // theo buy/open price
    float t_sOpn_px = 433; // theo sell/open price
    float t_bCls_px = 436; // theo buy/close price
    float t_sCls_px = 439; // theo sell/close price
    float t_de = 442; // theo delta
    float t_ga = 445; // theo gamma
    int32 t_err = 448; // theo vol error code (TheoError)
    string theo_model2 = 451; // theo model #2 (used for edge markup)
    float t_vol2 = 454; // theo volatility (model #2)
    float t_opx2 = 457; // theo price (model #2)
    int32 t_err2 = 460; // theo vol error code (model #2)
    float years_pr = 463;
    float rate_pr = 466;
    float sdiv_pr = 469;
    float ddiv_pr = 472;
    float i_vol_pr = 475; // prior period surface volatility
    float de_pr = 478;
    float ga_pr = 481;
    float th_pr = 484;
    float ve_pr = 487;
    float rh_pr = 490;
    float ph_pr = 493;
    float vo_pr = 496;
    float va_pr = 499;
    int32 err_pr = 502; // prior period computation error code (if any)
    float ve_slope_pr = 505; // prior period veSlope
    float hedge_de_pr = 508; // prior period hedge delta
    float t_vol_pr = 511; // prior period theo volatility (theoModel)
    float t_opx_pr = 514; // prior period theo price
    float t_de_pr = 517; // prior period theo delta
    float t_vol_pr2 = 520; // prior period theo volatility (theoModel#2)
    float t_opx_pr2 = 523; // prior period theo price
    float t_de_pr2 = 526; // prior period theo delta
    float xde_pr = 529;
    float margin_uDn_vDn = 602; // Aggregate RiskSlide: uPrc dn, vol dn
    float margin_uDn_vUp = 603; // Aggregate RiskSlide: uPrc dn, vol up
    float margin_uUp_vDn = 604; // Aggregate RiskSlide: uPrc up, vol dn
    float margin_uUp_vUp = 605; // Aggregate RiskSlide: uPrc up, vol up
    float opn_pnl_de = 532; // open position * mult * hedgeDe * dUPrc
    float opn_pnl_ga = 535; // open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    float opn_pnl_th = 538; // open position * mult * optTheta * dTime
    float opn_pnl_ve = 541; // open position * mult * optVega * dVol
    float opn_pnl_vo = 544; // open position * mult * 0.5 * optVolga * dVol * dVol
    float opn_pnl_va = 547; // open position * mult * optVanna * dVol * dUPrc
    float opn_pnl_sl = 550; // open position * mult * vol/uPrc * slope * optVega * dUPrc
    float opn_pnl_rate = 553; // open position * mult * optRho * dRate
    float opn_pnl_sDiv = 556; // open position * mult * optPhi * dSDv
    float opn_pnl_dDiv = 559; // open position * mult * optPhi * dDDv
    float opn_pnl_sv = 562; // open position * mult * (SR Vol Pnl - opnPnlDe)
    float opn_pnl_err = 565; // unattributed pnl: SR Vol Pnl - opnPnlDe - opnPnlGa - opnPnlTh - opnPnlVe - opnPnlRat - opnPnlSDiv - opnPnlDDiv
    int32 sh_bot_c0 = 568; // hypothetical shares bot (~1/minute intervals)
    int32 sh_sld_c0 = 571; // hypothetical shares sld
    float sh_mny_c0 = 574; // hypothetical money
    int32 sh_bot_c1 = 577; // hypothetical shares bot (~10/minute intervals)
    int32 sh_sld_c1 = 580; // hypothetical shares sld
    float sh_mny_c1 = 583; // hypothetical money
    MarkErrorCode mark_err_codes = 586;
    float ex_value = 589; // early exercise value (amLimit - bsPrice)
    AlertCode risk_alert = 592;
    int32 num_executions = 595; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 598; // maximum activity dttm of execution records included in this option risk summary
    google.protobuf.Timestamp timestamp = 601;
}


