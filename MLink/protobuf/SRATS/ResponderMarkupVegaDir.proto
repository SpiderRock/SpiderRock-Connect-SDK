syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message ResponderMarkupVegaDir {
    message PKey {
        
        string accnt = 10;
        string client_firm = 11;
        TickerKey ticker = 12;
        BuySell resp_side = 13; // auction responder side (your side)
        int32 expiry_group = 14;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string user_name = 100; // username used for responding to auction notices
    YesNo is_disabled = 101; // if Yes, this auto-responder record is disabled
    YesNo can_include_flex = 102; // if yes, can respond to auction notices that include flex option legs
    YesNo can_include_stock = 103; // if yes, can respond to auction notices that include a stock leg
    CallPut cp_flag = 104; // if not Pair must match all option legs
    float min_years = 105; // both markup.minYears and markup.maxYears must be between [minYears, maxYears]
    float max_years = 106;
    google.protobuf.Timestamp min_expiry = 107; // both markup.minExpiry and markup.maxExpiry must be between [minExpiry, maxExpiry]
    google.protobuf.Timestamp max_expiry = 108;
    float min_xDelta = 109; // all leg xDelta must be between [minXDelta, maxXDelta]
    float max_xDelta = 110;
    double min_strike = 111; // all leg strikes must be between [minStrike, maxStrike]
    double max_strike = 112;
    float min_surf_edge_prem = 113; // spread surface edge (in premium) (+ = through surface; - = behind surface)
    float min_surf_edge_vol = 114; // spread surface edge (in vol) (0.01 = 1.0 vol pts) (+ = through surface; - = behind surface)
    YesNo inc_fees_in_resp = 115; // include all estimated responder fees in final response price
    RoundRule round_rule = 116;
    int32 max_response_size = 117; // maximum number of contracts per response (will respond for 100% if auction size <= maxResponseSize)
    float max_response_vega = 118; // maximum total vega per response
    float total_response_vega = 119; // maximum vega (filled) all day
    float total_response_wt_vega = 120; // maximum wtVega (filled) all day
    AutoHedge auto_hedge = 121;
    HedgeInst hedge_instrument = 122; // Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    ExpiryKey hedge_sec_key = 123; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 124; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 125; // hedge group scope [RiskGroup or Accnt]
    MarketSession hedge_session = 126; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    int64 risk_group_id = 127; // Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    int64 num_notices = 129;
    int64 num_notices_pass = 130;
    int64 num_responses = 131;
    int32 qty_traded = 132;
    double vega_traded = 133;
    string modified_by = 134; // user who last modified this record
    SysEnvironment modified_in = 135;
    google.protobuf.Timestamp timestamp = 136; // timestamp of last modification
}


