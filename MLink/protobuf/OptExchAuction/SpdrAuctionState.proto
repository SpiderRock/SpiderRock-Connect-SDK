syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message SpdrAuctionState {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 11;
        OptExch auction_exch = 12; // exchange handling the auction
        string auction_ex_dest = 13; // external exDest of auction (usually means auction is off-exchange)
    }

    message Legs {
        
        OptionKey leg_sec_key = 202;
        SpdrKeyType leg_sec_type = 205;
        BuySell leg_side = 208;
        uint32 leg_ratio = 211; // leg ratio (1, 2, etc)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    int64 sr_auction_iD = 100; // unique SR AUCTION ID (required when responding to an auction notice)
    string exch_auction_id = 103;
    string exch_auction_type = 106;
    YesNo is_test_auction = 109; // test auction (should only respond from T.accnts)
    AuctionEvent auction_event = 212;
    NoticeShape auction_shape = 115;
    AuctionType auction_type = 118;
    BuySell auction_side = 121; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    int32 auction_size = 124; // size available to trade
    double auction_price = 127; // auction price (can be positive or negative)
    YesNo is_auction_price_valid = 130;
    int32 auction_duration = 133; // expected auction / imbalance action duration (ms)
    int32 auction_start_size = 136; // initial (starting) auction size
    double auction_start_price = 139; // initial (starting) auction price
    int64 auction_start_timestamp = 142; // auction start timestamp
    int32 min_response_size = 145; // minimum size of the response order
    AuctionLimitType limit_type = 148; // client / imbalance limit type (if available)
    FirmType firm_type = 151; // firm type of the client side of auction (if available)
    string member_mPID = 154; // exchange member initiating auction (if available)
    string client_accnt = 157; // client account designation (if known)
    string other_detail = 160; // additional auction detail (exchange specific)
    int32 matched_size = 163; // size already matched (may still be available to trade at a better price)
    int32 num_updates = 166; // number of auction updates received (not counting auction termination message)
    int32 num_responses = 169; // as reported by exchange (if available)
    int32 best_response_size = 172;
    double best_response_price = 175;
    int32 cum_fill_quantity = 178; // as reported by exchange (if available)
    double avg_fill_price = 181;
    MarketStatus market_status = 184; // market status (pre-open, open, closed, etc)
    int64 src_timestamp = 187; // source timestamp (nanoseconds) if available
    int64 net_timestamp = 190; // network timestamp message arrival @ direct exchange gateway
    int64 dgw_timestamp = 193; // network timestamp mbus message send @ direct exchange gateway
    google.protobuf.Timestamp timestamp = 196;
    repeated Legs legs = 199;
}


