syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

    
message PositionHedgePolicyConfig {
    message PKey {
        
        string accnt = 10;
        string client_firm = 11;
        PositionHedgePolicy policy = 12;
    }

    message HedgeWaves {
        
        google.protobuf.Duration hedge_time = 104; // create hedge wave at hedgeTime each trading day (HH:MM:SS)
        float sym_hedge_band_dD = 105; // individual symbol hedge band ($delta)
        float sym_hedge_band_gR = 106; // individual symbol hedge band (gamma ratio)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    YesNo enabled = 100;
    HedgeDeltaRule hedge_delta_rule = 101; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (dynamic), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface (dynamic)) [AccountConfig.hedgeDelta]
    float binary_days = 102; // used to force delta calcs binary prior to expiration (1.0 = force to binary at the start of the final regular market; 0.5 = force to binary half way through final regular market)
    YesNo balance_symbols = 107; // balance accnt level deltas from all symbols using this policy
    HedgeAlgo hedge_algo = 108;
    string exec_brkr_algo = 109; // display name of exec broker algo (should not have spaces)
    string exec_brkr_code = 110; // required if BROKER_ALGO
    string exec_bkkr_tags = 111; // key/value set of algo tags
    HedgeWindow eod_hedge_window = 112;
    float eod_sym_hedge_band_dD = 113; // individual symbol hedge band ($delta)
    float eod_sym_hedge_band_gR = 114; // individual symbol hedge band (gamma ratio)
    YesNo eod_balance_symbols = 115; // balance accnt level deltas from all symbols using this policy
    HedgeAlgo eod_hedge_algo = 116;
    string eod_exec_brkr_algo = 117; // display name of exec broker algo (should not have spaces)
    string eod_exec_brkr_code = 118; // required if BROKER_ALGO
    string eod_exec_bkkr_tags = 119; // key/value set of algo tags that get forwarded to exec broker on order
    ClsHedgeWindow cls_hedge_window = 120;
    float cls_auction_sym_hedge_band_dD = 121; // individual symbol hedge band ($delta) (if participating in closing auction)
    float cls_auction_sym_hedge_band_gR = 122; // individual symbol hedge band (gamma ratio) (if participating in closing auction)
    float cls_sym_hedge_band_dD = 123; // individual symbol hedge band ($delta) (if using an EOD algo)
    float cls_sym_hedge_band_gR = 124; // individual symbol hedge band (gamma ratio) (if using an EOD algo)
    YesNo cls_balance_symbols = 125; // balance accnt level deltas from all symbols using this policy
    ClsHedgeAlgo cls_hedge_algo = 126;
    string cls_exec_brkr_algo = 127; // display name of exec broker algo (should not have spaces)
    string cls_exec_brkr_code = 128; // required if BROKER_ALGO
    string cls_exec_bkkr_tags = 129; // key/value set of algo tags that get forwarded to exec broker on order
    string modified_by = 130; // user who last modified this record
    SysEnvironment modified_in = 131;
    google.protobuf.Timestamp timestamp = 132; // timestamp of last modification
    repeated HedgeWaves hedge_waves = 103;
}


