syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message SpdrAllocationNotice {
    message PKey {
        
        int64 alloc_number = 10; // unique number assigned to this allocation notice
    }

    message ChildOrders {
        
        int64 cl_ord_id = 151;
        int32 order_size = 154;
        int32 cum_fill_quantity = 157;
        double avg_fill_price = 160;
        string street_cl_ord_id = 163; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
        string street_order_id = 166; // street side order ID (for canceling order)
    }

    message Fragments {
        
        string accnt = 172; // SR alloc accnt
        string client_firm = 385; // SR client firm
        string alloc_accnt = 175; // clearing firm alloc accnt (maps to Fix.AllocAccount)
        int64 alloc_frag_id = 178; // unique ID of this alloc/fragment (maps to Fix.IndividualAllocID)
        int32 alloc_size = 181; // accnt alloc size
    }

    message LegPosType {
        
        OptionKey sec_key = 395;
        SpdrKeyType sec_type = 396;
        string accnt = 397; // SR alloc accnt (matches fragment)
        string client_firm = 398; // SR client firm
        ShortSaleFlag ssale_flag = 399; // ssale flag (if secType = Stock)
        PositionType position_type = 400; // positionType (if secType != Stock)
        int32 firm_position = 401;
    }

    message OrderLegs {
        
        OptionKey sec_key = 386;
        SpdrKeyType sec_type = 387;
        uint32 mult = 388;
        BuySell side = 389;
        int64 leg_id = 390; // SR leg Id
        string alt_leg_id = 391; // client leg Id (usually from a FIX order)
        int32 sum_leg_qty = 392;
        double sum_leg_mny = 393;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    string client_firm = 103;
    string omni_accnt = 106; // omnibus accnt (SR accnt)
    OptionKey sec_key = 109; // security key (stock, future, or option)
    SpdrKeyType sec_type = 112; // security type
    string mleg_leg_key = 115; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    BuySell order_side = 118; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 121; // ssale flag (None if not stock)
    PositionType position_type = 124; // positionType (None if not equity option)
    NoticeState notice_state = 127; // indicates that this noticed is ready to forward to a custodian
    string notice_text = 130;
    AllocMethod alloc_method = 133; // method for delivery of the allocation instruction to the broker
    string exec_brkr_code = 402; // used for FIX routing (can be null)
    string alloc_ex_dest = 403; // used for FIX routing
    SpdrOrderShape order_shape = 136; // Single or MLeg
    int32 cum_fill_quantity = 139; // total fill size of all ChildOrders
    double avg_fill_price = 142; // parent order average fill price
    double net_money = 145; // net allocation money
    string modified_by = 376; // user who last modified this record
    SysEnvironment modified_in = 379;
    google.protobuf.Timestamp timestamp = 382; // timestamp of last modification
    repeated ChildOrders child_orders = 148;
    repeated Fragments fragments = 169;
    repeated LegPosType leg_pos_type = 394;
    repeated OrderLegs order_legs = 184;
}


