syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrAutoHedgeState records are published by autohedge servers and describe the current state of an autohedge controller that is managing RiskGroup autohedge orders.
*/    
message SpdrAutoHedgeState {
    message PKey {
        
        string accnt = 10;
        int64 risk_group_id = 11;
        ExpiryKey hedge_sec_key = 12; // Execution Hedge SecKey (from SpdrAutoHedgeControl.targetSecKey)
        SpdrKeyType hedge_sec_type = 13; // Execution Hedge SecType (from SpdrAutoHedgeControl.targetSecType) [can be None]
        string client_firm = 14;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    int64 grouping_code = 100;
    TickerKey ticker = 106; // ticker group (eg. @ES, @ZN)
    string security_desc = 109;
    ShortSaleFlag ssale_flag = 112;
    PositionType position_type = 263;
    HedgeGroupState hedge_state = 115;
    string hedge_text = 118;
    double u_prc = 121; // hedge target underlier price
    float hedge_prc_lmt = 264; // price limit of the hedge order (if hedge is using hedgeFillUMarkLmtPrc)
    YesNo is_delta_mixed = 124;
    string accumulator_error = 127;
    double grp_delta_bot = 130; // option delta bot (in ctrlDe units)
    double grp_delta_sld = 133;
    double grp_dDelta_bot = 136; // option $delta bot (using uMid at time of option fill)
    double grp_dDelta_sld = 139;
    google.protobuf.Timestamp last_grp_fill_dttm = 142;
    double ctrl_delta_bot = 145; // hedge target delta (units) bot
    double ctrl_delta_sld = 148;
    double ctrl_dDelta_bot = 151; // hedge target $delta bot (using actual fill price)
    double ctrl_dDelta_sld = 154;
    google.protobuf.Timestamp last_ctrl_fill_dttm = 157;
    int32 abs_opt_cn = 160; // total number of option contracts executed in this hedge group
    double net_delta = 163; // grpDeltaBot - grpDeltaSld + ctrlDeltaBot - ctrlDeltaSld
    double net_dDelta = 166; // grpDDeltaBot - grpDDeltaSld + ctrlDDeltaBot - ctrlDDeltaSld
    float open_hedge_time = 169; // size weighted average time (in seconds) hedge risk has been open (executions to fills)
    float hedge_target_vol = 172; // implied / expected today (annualized) volatility for hedge target
    float expected_prc_range = 175; // SQRT(avgHedgeTime x hedgeTargetVol) cone
    double opn_delta_bot = 178; // open risk delta bot (in ctrlDe units)
    double opn_delta_sld = 181;
    double opn_dDelta_bot = 184; // open risk $delta bot (in ctrlDe units)
    double opn_dDelta_sld = 187;
    double cls_delta_bot = 190; // close risk delta bot (in ctrlDe units)
    double cls_delta_sld = 193;
    double cls_dDelta_bot = 196; // close risk $delta bot (in ctrlDe units)
    double cls_dDelta_sld = 199;
    float slippage_pn_l = 202; // opnDeltaBot * (clsDeltaPrcSld - opnDeltaPrcBot) + opnDeltaSld * (opnDeltaPrcSld - clsDeltaPrcBot)
    float slippage_unit_pn_l = 205; // slippagePnL / (grpDeltaBot + grpDeltaSld) [pnl / unit (share or fc)]
    float slippage_norm_pn_l = 208; // slippageUnitPnL / expectedPrcRange
    float min_dDelta_band = 211;
    float max_dDelta_band = 214;
    int64 b_parent_number = 217;
    int32 b_active_size = 220;
    string b_brkr_status = 223;
    string b_brkr_error = 226;
    int64 s_parent_number = 229;
    int32 s_active_size = 232;
    string s_brkr_status = 235;
    string s_brkr_error = 238;
    double dd_mult = 241;
    int32 underliers_per_cn = 244; // future underliers per contract
    UnderlierType underlier_type = 247; // type of underlier (affects $greek calculations)
    double point_value = 250; // $NLV value of a single point change in display premium (hedge target)
    Currency point_currency = 253;
    double live_hedge_mark = 256; // hedgeSecKey live mark (mid-market) [zero in SRSE]
    string updt_reason = 259;
    google.protobuf.Timestamp timestamp = 262; // SR system timestamp
}


