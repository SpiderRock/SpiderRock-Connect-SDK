syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrParentReviewResponse records are created when a parent order review request is completed
*/    
message SpdrParentReviewResponse {
    message PKey {
        
        int64 parent_number = 10; // SPDR order number
    }

    message OrderLegs {
        
        TickerKey ticker = 217; // stock ticker
        BuySell stock_side = 220; // [Buy | Sell | None]
        int32 stock_shares = 223; // number of shares included (zero if none)
        ShortSaleFlag ssale_flag = 226; // will override value on the original parent order (if != None)
        string review_stk_leg_id = 229; // client review stock leg Id
        string review_stk_leg_alt_id = 232; // client review stock leg alt Id
        int32 num_legs = 235; // number of valid legs below
        OptionKey sec_key1 = 238; // leg #1
        SpdrKeyType sec_type1 = 241;
        uint32 mult1 = 244;
        BuySell side1 = 247;
        PositionType pos_type1 = 250; // will override value on the original parent order (if != None)
        ShortSaleFlag ssale_flag1 = 253; // will override value on the original parent order (if != None)
        string review_leg_id1 = 256; // client review leg #1 Id
        string review_leg_alt_id1 = 259; // client review leg #1 alt Id
        OptionKey sec_key2 = 262; // leg #2
        SpdrKeyType sec_type2 = 265;
        uint32 mult2 = 268;
        BuySell side2 = 271;
        PositionType pos_type2 = 274;
        ShortSaleFlag ssale_flag2 = 277;
        string review_leg_id2 = 280; // client review leg #2 Id
        string review_leg_alt_id2 = 283; // client review leg #2 alt Id
        OptionKey sec_key3 = 286; // leg #3
        SpdrKeyType sec_type3 = 289;
        uint32 mult3 = 292;
        BuySell side3 = 295;
        PositionType pos_type3 = 298;
        ShortSaleFlag ssale_flag3 = 301;
        string review_leg_id3 = 304; // client review leg #3 Id
        string review_leg_alt_id3 = 307; // client review leg #3 alt Id
        OptionKey sec_key4 = 310; // leg #4
        SpdrKeyType sec_type4 = 313;
        uint32 mult4 = 316;
        BuySell side4 = 319;
        PositionType pos_type4 = 322;
        ShortSaleFlag ssale_flag4 = 325;
        string review_leg_id4 = 328; // client review leg #4 Id
        string review_leg_alt_id4 = 331; // client review leg #4 alt Id
        OptionKey sec_key5 = 334; // leg #5
        SpdrKeyType sec_type5 = 337;
        uint32 mult5 = 340;
        BuySell side5 = 343;
        PositionType pos_type5 = 346;
        ShortSaleFlag ssale_flag5 = 349;
        string review_leg_id5 = 352; // client review leg #5 Id
        string review_leg_alt_id5 = 355; // client review leg #5 alt Id
        OptionKey sec_key6 = 358; // leg #6
        SpdrKeyType sec_type6 = 361;
        uint32 mult6 = 364;
        BuySell side6 = 367;
        PositionType pos_type6 = 370;
        ShortSaleFlag ssale_flag6 = 373;
        string review_leg_id6 = 376; // client review leg #6 Id
        string review_leg_alt_id6 = 379; // client review leg #6 alt Id
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    SysEnvironment sys_environment = 100; // original (source) sys environment [Stable, Current, etc]
    RunStatus run_status = 103; // original (source) run status [Prod,Beta]
    SpdrOrderShape parent_shape = 106; // Parent Shape [Single, Cross, MLeg, MLegCross]
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    string alt_prev_order_id = 112; // alternate prev order ID (usually origClOrdId from client during cxl/replace)
    string alt_accnt = 115; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 118; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    OptionKey sec_key = 121; // Composite Security Key
    SpdrKeyType sec_type = 124; // Security Type [Stock, Future, Option]
    string security_desc = 127; // additional security description
    string accnt = 130; // SR trading account
    string client_firm = 133; // SR client firm
    SpdrSource spdr_source = 136; // from original parent order
    int64 grouping_code = 139; // from original parent order
    string client_cl_ord_id = 142; // client ClOrdId (if handled by ClientGateway)
    string src_routing_code = 145; // RoutingCode (if handled by ClientGateway)
    string strategy = 148; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 151; // name of the user entering the order
    BuySell order_side = 154;
    int32 order_size = 157; // maximum fill size (contracts) [can be less than requested]
    int32 order_active_size = 160;
    ReviewResult review_result = 163;
    string review_text = 166; // review release / reject text (will be showed to the user submitting the parent order)
    SpdrSource response_spdr_source = 169; // source of the response (SRSE, FIX, etc)
    string response_cl_ord_id = 172; // review request / response clOrdID (if any)
    string response_orig_cl_ord_id = 175; // review request / response orig clOrdID
    string response_cancel_cl_ord_id = 178; // review request / response cancel clOrdID
    FirmType firm_type = 181; // will override firmType on the original parent order (if != None)
    OrderCapacity order_capacity = 184; // will override orderCapacity on the original parent order (if != None)
    PositionType position_type = 187; // will override positionType on the original parent order (if != None)
    ShortSaleFlag ssale_flag = 190; // will override ssaleFlag on the original parent order (if != None)
    int32 locate_quan = 193; // locate quantity
    string locate_firm = 196; // locate firm
    string locate_pool = 199; // locate pool @ firm granting the locate
    string user_data1 = 202; // will override value on original parent order (if != null)
    string user_data2 = 205; // will override value on the original parent order (if != null)
    string child_data = 208; // will override value on the original parent order (if != null)
    google.protobuf.Timestamp timestamp = 211;
    repeated OrderLegs order_legs = 214;
}


